!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=543)}([function(e,t){e.exports=function(e){return e&&e.__esModule?e:{default:e}}},function(e,t,n){e.exports=n(518)()},function(e,t,n){"use strict";e.exports=n(541)},function(e,t){e.exports=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}},function(e,t){function n(){return e.exports=n=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},n.apply(this,arguments)}e.exports=n},function(e,t,n){"use strict";var r=n(58),o=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.sheetsManager=void 0;var a=o(n(4)),i=o(n(12)),l=o(n(9)),u=o(n(8)),s=o(n(11)),c=o(n(10)),d=o(n(3)),f=o(n(2)),p=o(n(1)),h=(o(n(14)),o(n(129))),m=(o(n(220)),o(n(54)),o(n(465))),v=n(226),y=r(n(219)),g=o(n(227)),b=o(n(134)),x=o(n(135)),w=o(n(232)),_=o(n(463)),k=o(n(462)),P=(0,v.create)((0,g.default)()),E=(0,w.default)(),O=-1e11,C=new Map;t.sheetsManager=C;var S,T={};var M=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return function(n){var r=t.withTheme,o=void 0!==r&&r,v=t.flip,g=void 0===v?null:v,w=t.name,M=(0,d.default)(t,["withTheme","flip","name"]),j=(0,_.default)(e),N=j.themingEnabled||o||"string"==typeof w;O+=1,j.options.index=O;var L=function(e){function t(e,n){var r;(0,l.default)(this,t),(r=(0,s.default)(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,n))).state={},r.disableStylesGeneration=!1,r.jss=null,r.sheetOptions=null,r.sheetsManager=C,r.stylesCreatorSaved=null,r.theme=null,r.unsubscribeId=null,r.jss=r.context[y.jss]||P;var o=r.context.muiThemeProviderOptions;return o&&(o.sheetsManager&&(r.sheetsManager=o.sheetsManager),r.disableStylesGeneration=o.disableStylesGeneration),r.stylesCreatorSaved=j,r.sheetOptions=(0,i.default)({generateClassName:E},r.context[y.sheetOptions]),r.theme=N?x.default.initial(n)||S||(S=(0,b.default)()):T,r.attach(r.theme),r.cacheClasses={value:null,lastProp:null,lastJSS:{}},r}return(0,c.default)(t,e),(0,u.default)(t,[{key:"componentDidMount",value:function(){var e=this;N&&(this.unsubscribeId=x.default.subscribe(this.context,function(t){var n=e.theme;e.theme=t,e.attach(e.theme),e.setState({},function(){e.detach(n)})}))}},{key:"componentDidUpdate",value:function(){this.stylesCreatorSaved}},{key:"componentWillUnmount",value:function(){this.detach(this.theme),null!==this.unsubscribeId&&x.default.unsubscribe(this.context,this.unsubscribeId)}},{key:"getClasses",value:function(){var e=this,t=!1;if(!this.disableStylesGeneration){var n=this.sheetsManager.get(this.stylesCreatorSaved).get(this.theme);n.sheet.classes!==this.cacheClasses.lastJSS&&(this.cacheClasses.lastJSS=n.sheet.classes,t=!0)}return this.props.classes!==this.cacheClasses.lastProp&&(this.cacheClasses.lastProp=this.props.classes,t=!0),t&&(this.props.classes?this.cacheClasses.value=(0,i.default)({},this.cacheClasses.lastJSS,Object.keys(this.props.classes).reduce(function(t,n){return e.props.classes[n]&&(t[n]="".concat(e.cacheClasses.lastJSS[n]," ").concat(e.props.classes[n])),t},{})):this.cacheClasses.value=this.cacheClasses.lastJSS),this.cacheClasses.value}},{key:"attach",value:function(e){if(!this.disableStylesGeneration){var t=this.stylesCreatorSaved,n=this.sheetsManager.get(t);n||(n=new Map,this.sheetsManager.set(t,n));var r=n.get(e);if(r||(r={refs:0,sheet:null},n.set(e,r)),0===r.refs){var o=t.create(e,w),a=w,l=this.jss.createStyleSheet(o,(0,i.default)({meta:a,classNamePrefix:a,flip:"boolean"==typeof g?g:"rtl"===e.direction,link:!1},this.sheetOptions,t.options,{name:w},M));r.sheet=l,l.attach();var u=this.context[y.sheetsRegistry];u&&u.add(l)}r.refs+=1}}},{key:"detach",value:function(e){if(!this.disableStylesGeneration){var t=this.stylesCreatorSaved,n=this.sheetsManager.get(t),r=n.get(e);if(r.refs-=1,0===r.refs){n.delete(e),this.jss.removeStyleSheet(r.sheet);var o=this.context[y.sheetsRegistry];o&&o.remove(r.sheet)}}}},{key:"render",value:function(){var e=this.props,t=(e.classes,e.innerRef),r=(0,d.default)(e,["classes","innerRef"]),i=(0,k.default)({theme:this.theme,name:w});return o&&(i.theme=this.theme),f.default.createElement(n,(0,a.default)({},i,{classes:this.getClasses(),ref:t},r))}}]),t}(f.default.Component);return L.propTypes={},L.contextTypes=(0,i.default)({muiThemeProviderOptions:p.default.object},m.default,N?x.default.contextTypes:{}),(0,h.default)(L,n),L}};t.default=M},function(e,t,n){var r;
/*!
  Copyright (c) 2017 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/
/*!
  Copyright (c) 2017 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/
!function(){"use strict";var n={}.hasOwnProperty;function o(){for(var e=[],t=0;t<arguments.length;t++){var r=arguments[t];if(r){var a=typeof r;if("string"===a||"number"===a)e.push(r);else if(Array.isArray(r)&&r.length){var i=o.apply(null,r);i&&e.push(i)}else if("object"===a)for(var l in r)n.call(r,l)&&r[l]&&e.push(l)}}return e.join(" ")}void 0!==e&&e.exports?(o.default=o,e.exports=o):void 0===(r=function(){return o}.apply(t,[]))||(e.exports=r)}()},function(e,t){e.exports=function(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}},function(e,t){function n(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}e.exports=function(e,t,r){return t&&n(e.prototype,t),r&&n(e,r),e}},function(e,t){e.exports=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}},function(e,t,n){var r=n(506);e.exports=function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&r(e,t)}},function(e,t,n){var r=n(136),o=n(52);e.exports=function(e,t){return!t||"object"!==r(t)&&"function"!=typeof t?o(e):t}},function(e,t,n){var r=n(7);e.exports=function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},o=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(o=o.concat(Object.getOwnPropertySymbols(n).filter(function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),o.forEach(function(t){r(e,t,n[t])})}return e}},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.capitalize=function(e){0;return e.charAt(0).toUpperCase()+e.slice(1)},t.contains=a,t.findIndex=i,t.find=function(e,t){var n=i(e,t);return n>-1?e[n]:void 0},t.createChainedFunction=function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return t.reduce(function(e,t){return null==t?e:function(){for(var n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];e.apply(this,r),t.apply(this,r)}},function(){})};var o=r(n(136));r(n(14));function a(e,t){return Object.keys(t).every(function(n){return e.hasOwnProperty(n)&&e[n]===t[n]})}function i(e,t){for(var n=(0,o.default)(t),r=0;r<e.length;r+=1){if("function"===n&&!0==!!t(e[r],r,e))return r;if("object"===n&&a(e[r],t))return r;if(-1!==["string","number","boolean"].indexOf(n))return e.indexOf(t)}return-1}},function(e,t,n){"use strict";var r=function(){};e.exports=r},function(e,t,n){"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(540)},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(399))},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"createGenerateClassName",{enumerable:!0,get:function(){return o.default}}),Object.defineProperty(t,"createMuiTheme",{enumerable:!0,get:function(){return a.default}}),Object.defineProperty(t,"jssPreset",{enumerable:!0,get:function(){return i.default}}),Object.defineProperty(t,"MuiThemeProvider",{enumerable:!0,get:function(){return l.default}}),Object.defineProperty(t,"createStyles",{enumerable:!0,get:function(){return u.default}}),Object.defineProperty(t,"withStyles",{enumerable:!0,get:function(){return s.default}}),Object.defineProperty(t,"withTheme",{enumerable:!0,get:function(){return c.default}});var o=r(n(232)),a=r(n(134)),i=r(n(227)),l=r(n(233)),u=r(n(466)),s=r(n(5)),c=r(n(31))},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(459))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=a(n(440)),o=a(n(400));a(n(207)),a(n(54));function a(e){return e&&e.__esModule?e:{default:e}}t.default=function(e){return(0,r.default)(function(e,t){return!(0,o.default)(e,t)})(e)}},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(453))},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(456))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return e&&e.ownerDocument||document},e.exports=t.default},function(e,t,n){"use strict";function r(e){return e&&"object"==typeof e&&"default"in e?e.default:e}Object.defineProperty(t,"__esModule",{value:!0});var o=r(n(9)),a=r(n(8)),i=r(n(11)),l=r(n(10)),u=r(n(136)),s=r(n(3)),c=r(n(12)),d=r(n(2));r(n(1)),r(n(460));var f,p=(f=null,function(){if(null!==f)return f;var e,t,n,r=!1;try{window.addEventListener("test",null,(e={},t="passive",n={get:function(){r=!0}},Object.defineProperty(e,t,n)))}catch(e){}return f=r,r}()),h={capture:!1,passive:!1};function m(e){return c({},h,e)}function v(e,t,n){var r=[e,t];return r.push(p?n:n.capture),r}function y(e,t,n,r){e.addEventListener.apply(e,v(t,n,r))}function g(e,t,n,r){e.removeEventListener.apply(e,v(t,n,r))}var b=function(e){function t(){return o(this,t),i(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return l(t,e),a(t,[{key:"componentDidMount",value:function(){this.applyListeners(y)}},{key:"componentDidUpdate",value:function(e){this.applyListeners(g,e),this.applyListeners(y)}},{key:"componentWillUnmount",value:function(){this.applyListeners(g)}},{key:"applyListeners",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.props,n=t.target;if(n){var r=n;"string"==typeof n&&(r=window[n]),function(e,t){e.children,e.target;var n=s(e,["children","target"]);Object.keys(n).forEach(function(e){if("on"===e.substring(0,2)){var r=n[e],o=u(r),a="object"===o;if(a||"function"===o){var i="capture"===e.substr(-7).toLowerCase(),l=e.substring(2).toLowerCase();l=i?l.substring(0,l.length-7):l,a?t(l,r.handler,r.options):t(l,r,m({capture:i}))}}})}(t,e.bind(null,r))}}},{key:"render",value:function(){return this.props.children||null}}]),t}(d.PureComponent);b.propTypes={},t.withOptions=function(e,t){return{handler:e,options:m(t)}},t.default=b},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(454))},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.isNumber=t.isString=t.formatMs=t.duration=t.easing=void 0;var o=r(n(3)),a=(r(n(14)),{easeInOut:"cubic-bezier(0.4, 0, 0.2, 1)",easeOut:"cubic-bezier(0.0, 0, 0.2, 1)",easeIn:"cubic-bezier(0.4, 0, 1, 1)",sharp:"cubic-bezier(0.4, 0, 0.6, 1)"});t.easing=a;var i={shortest:150,shorter:200,short:250,standard:300,complex:375,enteringScreen:225,leavingScreen:195};t.duration=i;var l=function(e){return"".concat(Math.round(e),"ms")};t.formatMs=l;t.isString=function(e){return"string"==typeof e};t.isNumber=function(e){return!isNaN(parseFloat(e))};var u={easing:a,duration:i,create:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:["all"],t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return function(){var n=t.duration,r=void 0===n?i.standard:n,u=t.easing,s=void 0===u?a.easeInOut:u,c=t.delay,d=void 0===c?0:c;(0,o.default)(t,["duration","easing","delay"]);return(Array.isArray(e)?e:[e]).map(function(e){return"".concat(e," ").concat("string"==typeof r?r:l(r)," ").concat(s," ").concat("string"==typeof d?d:l(d))}).join(",")}()},getAutoHeightDuration:function(e){if(!e)return 0;var t=e/36;return Math.round(10*(4+15*Math.pow(t,.25)+t/5))}};t.default=u},function(e,t){var n=e.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=n)},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(2)),a=r(n(19)),i=r(n(16));var l=function(e,t){var n=function(t){return o.default.createElement(i.default,t,e)};return n.displayName=t,(n=(0,a.default)(n)).muiName="SvgIcon",n};t.default=l},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(442))},function(e,t){e.exports=function(e,t,n){var r,o,a,i,l;function u(){var s=Date.now()-i;s<t&&s>=0?r=setTimeout(u,t-s):(r=null,n||(l=e.apply(a,o),a=o=null))}null==t&&(t=100);var s=function(){a=this,o=arguments,i=Date.now();var s=n&&!r;return r||(r=setTimeout(u,t)),s&&(l=e.apply(a,o),a=o=null),l};return s.clear=function(){r&&(clearTimeout(r),r=null)},s.flush=function(){r&&(l=e.apply(a,o),a=o=null,clearTimeout(r),r=null)},s}},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0});var o={};Object.defineProperty(t,"default",{enumerable:!0,get:function(){return a.default}});var a=r(n(461));Object.keys(a).forEach(function(e){"default"!==e&&"__esModule"!==e&&(Object.prototype.hasOwnProperty.call(o,e)||Object.defineProperty(t,e,{enumerable:!0,get:function(){return a[e]}}))})},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o,a=r(n(4)),i=r(n(9)),l=r(n(8)),u=r(n(11)),s=r(n(10)),c=r(n(2)),d=r(n(129)),f=(r(n(54)),r(n(134))),p=r(n(135));var h=function(){return function(e){var t=function(t){function n(e,t){var r;return(0,i.default)(this,n),(r=(0,u.default)(this,(n.__proto__||Object.getPrototypeOf(n)).call(this,e,t))).state={},r.unsubscribeId=null,r.state={theme:p.default.initial(t)||o||(o=(0,f.default)())},r}return(0,s.default)(n,t),(0,l.default)(n,[{key:"componentDidMount",value:function(){var e=this;this.unsubscribeId=p.default.subscribe(this.context,function(t){e.setState({theme:t})})}},{key:"componentWillUnmount",value:function(){null!==this.unsubscribeId&&p.default.unsubscribe(this.context,this.unsubscribeId)}},{key:"render",value:function(){return c.default.createElement(e,(0,a.default)({theme:this.state.theme},this.props))}}]),n}(c.default.Component);return t.contextTypes=p.default.contextTypes,(0,d.default)(t,e),t}};t.default=h},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.convertHexToRGB=a,t.decomposeColor=i,t.recomposeColor=l,t.getContrastRatio=function(e,t){var n=u(e),r=u(t);return(Math.max(n,r)+.05)/(Math.min(n,r)+.05)},t.getLuminance=u,t.emphasize=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:.15;return u(e)>.5?s(e,t):c(e,t)},t.fade=function(e,t){if(!e)return e;e=i(e),t=o(t),("rgb"===e.type||"hsl"===e.type)&&(e.type+="a");return e.values[3]=t,l(e)},t.darken=s,t.lighten=c;r(n(14));function o(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1;return e<t?t:e>n?n:e}function a(e){e=e.substr(1);var t=new RegExp(".{1,".concat(e.length/3,"}"),"g"),n=e.match(t);return n&&1===n[0].length&&(n=n.map(function(e){return e+e})),n?"rgb(".concat(n.map(function(e){return parseInt(e,16)}).join(", "),")"):""}function i(e){if("#"===e.charAt(0))return i(a(e));var t=e.indexOf("("),n=e.substring(0,t),r=e.substring(t+1,e.length-1).split(",");return{type:n,values:r=r.map(function(e){return parseFloat(e)})}}function l(e){var t=e.type,n=e.values;return-1!==t.indexOf("rgb")&&(n=n.map(function(e,t){return t<3?parseInt(e,10):e})),-1!==t.indexOf("hsl")&&(n[1]="".concat(n[1],"%"),n[2]="".concat(n[2],"%")),"".concat(e.type,"(").concat(n.join(", "),")")}function u(e){var t=i(e);if(-1!==t.type.indexOf("rgb")){var n=t.values.map(function(e){return(e/=255)<=.03928?e/12.92:Math.pow((e+.055)/1.055,2.4)});return Number((.2126*n[0]+.7152*n[1]+.0722*n[2]).toFixed(3))}return t.values[2]/100}function s(e,t){if(!e)return e;if(e=i(e),t=o(t),-1!==e.type.indexOf("hsl"))e.values[2]*=1-t;else if(-1!==e.type.indexOf("rgb"))for(var n=0;n<3;n+=1)e.values[n]*=1-t;return l(e)}function c(e,t){if(!e)return e;if(e=i(e),t=o(t),-1!==e.type.indexOf("hsl"))e.values[2]+=(100-e.values[2])*t;else if(-1!==e.type.indexOf("rgb"))for(var n=0;n<3;n+=1)e.values[n]+=(255-e.values[n])*t;return l(e)}},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(106))},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(332))},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.cloneElementWithClassName=i,t.cloneChildrenWithClassName=function(e,t){return o.default.Children.map(e,function(e){return o.default.isValidElement(e)&&i(e,t)})},t.isMuiElement=function(e,t){return o.default.isValidElement(e)&&-1!==t.indexOf(e.type.muiName)},t.isMuiComponent=function(e,t){return-1!==t.indexOf(e.muiName)};var o=r(n(2)),a=r(n(6));function i(e,t){return o.default.cloneElement(e,{className:(0,a.default)(e.props.className,t)})}},function(e,t){var n={}.hasOwnProperty;e.exports=function(e,t){return n.call(e,t)}},function(e,t){var n;n=function(){return this}();try{n=n||Function("return this")()||(0,eval)("this")}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}}),Object.defineProperty(t,"ModalManager",{enumerable:!0,get:function(){return a.default}});var o=r(n(361)),a=r(n(191))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getTransitionProps=function(e,t){var n=e.timeout,r=e.style,o=void 0===r?{}:r;return{duration:o.transitionDuration||"number"==typeof n?n:n[t.mode],delay:o.transitionDelay}},t.reflow=void 0;t.reflow=function(e){return e.scrollTop}},function(e,t,n){var r=n(121)("wks"),o=n(69),a=n(26).Symbol,i="function"==typeof a;(e.exports=function(e){return r[e]||(r[e]=i&&a[e]||(i?a:o)("Symbol."+e))}).store=r},function(e,t,n){var r=n(430),o=n(127);e.exports=function(e){return r(o(e))}},function(e,t,n){e.exports=!n(71)(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})},function(e,t){e.exports=function(e){return"object"==typeof e?null!==e:"function"==typeof e}},function(e,t,n){var r=n(53),o=n(215),a=n(126),i=Object.defineProperty;t.f=n(42)?Object.defineProperty:function(e,t,n){if(r(e),t=a(t,!0),r(n),o)try{return i(e,t,n)}catch(e){}if("get"in n||"set"in n)throw TypeError("Accessors not supported!");return"value"in n&&(e[t]=n.value),e}},function(e,t,n){var r=n(44),o=n(70);e.exports=n(42)?function(e,t,n){return r.f(e,t,o(1,n))}:function(e,t,n){return e[t]=n,e}},function(e,t){var n=e.exports={version:"2.5.7"};"number"==typeof __e&&(__e=n)},function(e,t,n){"use strict";t.__esModule=!0,t.EXITING=t.ENTERED=t.ENTERING=t.EXITED=t.UNMOUNTED=void 0;var r=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(1)),o=i(n(2)),a=i(n(15));n(444);function i(e){return e&&e.__esModule?e:{default:e}}var l=t.UNMOUNTED="unmounted",u=t.EXITED="exited",s=t.ENTERING="entering",c=t.ENTERED="entered",d=t.EXITING="exiting",f=function(e){function t(n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var o=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,e.call(this,n,r)),a=r.transitionGroup,i=a&&!a.isMounting?n.enter:n.appear,d=void 0;return o.nextStatus=null,n.in?i?(d=u,o.nextStatus=s):d=c:d=n.unmountOnExit||n.mountOnEnter?l:u,o.state={status:d},o.nextCallback=null,o}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.getChildContext=function(){return{transitionGroup:null}},t.prototype.componentDidMount=function(){this.updateStatus(!0)},t.prototype.componentWillReceiveProps=function(e){var t=(this.pendingState||this.state).status;e.in?(t===l&&this.setState({status:u}),t!==s&&t!==c&&(this.nextStatus=s)):t!==s&&t!==c||(this.nextStatus=d)},t.prototype.componentDidUpdate=function(){this.updateStatus()},t.prototype.componentWillUnmount=function(){this.cancelNextCallback()},t.prototype.getTimeouts=function(){var e=this.props.timeout,t=void 0,n=void 0,r=void 0;return t=n=r=e,null!=e&&"number"!=typeof e&&(t=e.exit,n=e.enter,r=e.appear),{exit:t,enter:n,appear:r}},t.prototype.updateStatus=function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],t=this.nextStatus;if(null!==t){this.nextStatus=null,this.cancelNextCallback();var n=a.default.findDOMNode(this);t===s?this.performEnter(n,e):this.performExit(n)}else this.props.unmountOnExit&&this.state.status===u&&this.setState({status:l})},t.prototype.performEnter=function(e,t){var n=this,r=this.props.enter,o=this.context.transitionGroup?this.context.transitionGroup.isMounting:t,a=this.getTimeouts();t||r?(this.props.onEnter(e,o),this.safeSetState({status:s},function(){n.props.onEntering(e,o),n.onTransitionEnd(e,a.enter,function(){n.safeSetState({status:c},function(){n.props.onEntered(e,o)})})})):this.safeSetState({status:c},function(){n.props.onEntered(e)})},t.prototype.performExit=function(e){var t=this,n=this.props.exit,r=this.getTimeouts();n?(this.props.onExit(e),this.safeSetState({status:d},function(){t.props.onExiting(e),t.onTransitionEnd(e,r.exit,function(){t.safeSetState({status:u},function(){t.props.onExited(e)})})})):this.safeSetState({status:u},function(){t.props.onExited(e)})},t.prototype.cancelNextCallback=function(){null!==this.nextCallback&&(this.nextCallback.cancel(),this.nextCallback=null)},t.prototype.safeSetState=function(e,t){var n=this;this.pendingState=e,t=this.setNextCallback(t),this.setState(e,function(){n.pendingState=null,t()})},t.prototype.setNextCallback=function(e){var t=this,n=!0;return this.nextCallback=function(r){n&&(n=!1,t.nextCallback=null,e(r))},this.nextCallback.cancel=function(){n=!1},this.nextCallback},t.prototype.onTransitionEnd=function(e,t,n){this.setNextCallback(n),e?(this.props.addEndListener&&this.props.addEndListener(e,this.nextCallback),null!=t&&setTimeout(this.nextCallback,t)):setTimeout(this.nextCallback,0)},t.prototype.render=function(){var e=this.state.status;if(e===l)return null;var t=this.props,n=t.children,r=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(t,["children"]);if(delete r.in,delete r.mountOnEnter,delete r.unmountOnExit,delete r.appear,delete r.enter,delete r.exit,delete r.timeout,delete r.addEndListener,delete r.onEnter,delete r.onEntering,delete r.onEntered,delete r.onExit,delete r.onExiting,delete r.onExited,"function"==typeof n)return n(e,r);var a=o.default.Children.only(n);return o.default.cloneElement(a,r)},t}(o.default.Component);function p(){}f.contextTypes={transitionGroup:r.object},f.childContextTypes={transitionGroup:function(){}},f.propTypes={},f.defaultProps={in:!1,mountOnEnter:!1,unmountOnExit:!1,appear:!1,enter:!0,exit:!0,onEnter:p,onEntering:p,onEntered:p,onExit:p,onExiting:p,onExited:p},f.UNMOUNTED=0,f.EXITED=1,f.ENTERING=2,f.ENTERED=3,f.EXITING=4,t.default=f},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=!("undefined"==typeof window||!window.document||!window.document.createElement),e.exports=t.default},function(e,t){function n(e){if(e&&"object"==typeof e){var t=e.which||e.keyCode||e.charCode;t&&(e=t)}if("number"==typeof e)return i[e];var n,a=String(e);return(n=r[a.toLowerCase()])?n:(n=o[a.toLowerCase()])||(1===a.length?a.charCodeAt(0):void 0)}n.isEventKey=function(e,t){if(e&&"object"==typeof e){var n=e.which||e.keyCode||e.charCode;if(null===n||void 0===n)return!1;if("string"==typeof t){var a;if(a=r[t.toLowerCase()])return a===n;if(a=o[t.toLowerCase()])return a===n}else if("number"==typeof t)return t===n;return!1}};var r=(t=e.exports=n).code=t.codes={backspace:8,tab:9,enter:13,shift:16,ctrl:17,alt:18,"pause/break":19,"caps lock":20,esc:27,space:32,"page up":33,"page down":34,end:35,home:36,left:37,up:38,right:39,down:40,insert:45,delete:46,command:91,"left command":91,"right command":93,"numpad *":106,"numpad +":107,"numpad -":109,"numpad .":110,"numpad /":111,"num lock":144,"scroll lock":145,"my computer":182,"my calculator":183,";":186,"=":187,",":188,"-":189,".":190,"/":191,"`":192,"[":219,"\\":220,"]":221,"'":222},o=t.aliases={windows:91,"⇧":16,"⌥":18,"⌃":17,"⌘":91,ctl:17,control:17,option:18,pause:19,break:19,caps:20,return:13,escape:27,spc:32,spacebar:32,pgup:33,pgdn:34,ins:45,del:46,cmd:91};
/*!
 * Programatically add the following
 */
for(a=97;a<123;a++)r[String.fromCharCode(a)]=a-32;for(var a=48;a<58;a++)r[a-48]=a;for(a=1;a<13;a++)r["f"+a]=a+111;for(a=0;a<10;a++)r["numpad "+a]=a+96;var i=t.names=t.title={};for(a in r)i[r[a]]=a;for(var l in o)r[l]=o[l]},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=s(n(51)),l=s(n(132)),u=s(n(81));function s(e){return e&&e.__esModule?e:{default:e}}var c=function(){function e(t,n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.type="style",this.isProcessed=!1;var o=r.sheet,a=r.Renderer,i=r.selector;this.key=t,this.options=r,this.style=n,i&&(this.selectorText=i),this.renderer=o?o.renderer:new a}return a(e,[{key:"prop",value:function(e,t){if(void 0===t)return this.style[e];if(this.style[e]===t)return this;var n=null==(t=this.options.jss.plugins.onChangeValue(t,e,this))||!1===t,r=e in this.style;if(n&&!r)return this;var o=n&&r;if(o?delete this.style[e]:this.style[e]=t,this.renderable)return o?this.renderer.removeProperty(this.renderable,e):this.renderer.setProperty(this.renderable,e,t),this;var a=this.options.sheet;return a&&a.attached&&(0,i.default)(!1,'Rule is not linked. Missing sheet option "link: true".'),this}},{key:"applyTo",value:function(e){var t=this.toJSON();for(var n in t)this.renderer.setProperty(e,n,t[n]);return this}},{key:"toJSON",value:function(){var e={};for(var t in this.style){var n=this.style[t];"object"!==(void 0===n?"undefined":o(n))?e[t]=n:Array.isArray(n)&&(e[t]=(0,u.default)(n))}return e}},{key:"toString",value:function(e){var t=this.options.sheet,n=!!t&&t.options.link?r({},e,{allowEmpty:!0}):e;return(0,l.default)(this.selector,this.style,n)}},{key:"selector",set:function(e){if(e!==this.selectorText&&(this.selectorText=e,this.renderable&&!this.renderer.setSelector(this.renderable,e)&&this.renderable)){var t=this.renderer.replaceRule(this.renderable,this);t&&(this.renderable=t)}},get:function(){return this.selectorText}}]),e}();t.default=c},function(e,t,n){"use strict";e.exports=function(){}},function(e,t){e.exports=function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}},function(e,t,n){var r=n(43);e.exports=function(e){if(!r(e))throw TypeError(e+" is not an object!");return e}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=n(220),a=(r=o)&&r.__esModule?r:{default:r};t.default=function(e,t){return t+"("+(0,a.default)(e)+")"}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=s(n(80)),i=s(n(223)),l=s(n(50)),u=s(n(492));function s(e){return e&&e.__esModule?e:{default:e}}var c=function(){function e(t){var n=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.map={},this.raw={},this.index=[],this.update=function(e,t){var r=n.options,o=r.jss.plugins,a=r.sheet;if("string"==typeof e)o.onUpdate(t,n.get(e),a);else for(var i=0;i<n.index.length;i++)o.onUpdate(e,n.index[i],a)},this.options=t,this.classes=t.classes}return o(e,[{key:"add",value:function(e,t,n){var o=this.options,i=o.parent,s=o.sheet,c=o.jss,d=o.Renderer,f=o.generateClassName;!(n=r({classes:this.classes,parent:i,sheet:s,jss:c,Renderer:d,generateClassName:f},n)).selector&&this.classes[e]&&(n.selector="."+(0,u.default)(this.classes[e])),this.raw[e]=t;var p=(0,a.default)(e,t,n),h=void 0;!n.selector&&p instanceof l.default&&(h=f(p,s),p.selector="."+(0,u.default)(h)),this.register(p,h);var m=void 0===n.index?this.index.length:n.index;return this.index.splice(m,0,p),p}},{key:"get",value:function(e){return this.map[e]}},{key:"remove",value:function(e){this.unregister(e),this.index.splice(this.indexOf(e),1)}},{key:"indexOf",value:function(e){return this.index.indexOf(e)}},{key:"process",value:function(){var e=this.options.jss.plugins;this.index.slice(0).forEach(e.onProcessRule,e)}},{key:"register",value:function(e,t){this.map[e.key]=e,e instanceof l.default&&(this.map[e.selector]=e,t&&(this.classes[e.key]=t))}},{key:"unregister",value:function(e){delete this.map[e.key],e instanceof l.default&&(delete this.map[e.selector],delete this.classes[e.key])}},{key:"link",value:function(e){for(var t=this.options.sheet.renderer.getUnescapedKeysMap(this.index),n=0;n<e.length;n++){var r=e[n],o=this.options.sheet.renderer.getKey(r);t[o]&&(o=t[o]);var a=this.map[o];a&&(0,i.default)(a,r)}}},{key:"toString",value:function(e){for(var t="",n=this.options.sheet,r=!!n&&n.options.link,o=0;o<this.index.length;o++){var a=this.index[o].toString(e);(a||r)&&(t&&(t+="\n"),t+=a)}return t}}]),e}();t.default=c},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){var t=e.values,n=void 0===t?{xs:0,sm:600,md:960,lg:1280,xl:1920}:t,r=e.unit,l=void 0===r?"px":r,u=e.step,s=void 0===u?5:u,c=(0,a.default)(e,["values","unit","step"]);function d(e){var t="number"==typeof n[e]?n[e]:e;return"@media (min-width:".concat(t).concat(l,")")}function f(e,t){var r=i.indexOf(t)+1;return r===i.length?d(e):"@media (min-width:".concat(n[e]).concat(l,") and ")+"(max-width:".concat(n[i[r]]-s/100).concat(l,")")}return(0,o.default)({keys:i,values:n,up:d,down:function(e){var t=i.indexOf(e)+1,r=n[i[t]];if(t===i.length)return d("xs");return"@media (max-width:".concat(("number"==typeof r&&t>0?r:e)-s/100).concat(l,")")},between:f,only:function(e){return f(e,e)},width:function(e){return n[e]}},c)},t.keys=void 0;var o=r(n(12)),a=r(n(3)),i=["xs","sm","md","lg","xl"];t.keys=i},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){return(0,a.default)({},e,(0,o.default)({},i,function(n){var r=Object.keys(n).filter(function(t){return!e.hasOwnProperty(t)});return r.length>0?new TypeError("".concat(t,": unknown props found: ").concat(r.join(", "),". Please remove the unknown properties.")):null}))},t.specialProperty=void 0;var o=r(n(7)),a=r(n(12)),i="exact-prop: ​";t.specialProperty=i},function(e,t){e.exports=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}},function(e,t,n){var r,o,a;o=[t],void 0===(a="function"==typeof(r=function(e){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.camelize=function(e){return e.split(" ").map(function(e){return e.charAt(0).toUpperCase()+e.slice(1)}).join("")}})?r.apply(t,o):r)||(e.exports=a)},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(267))},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(304))},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(320))},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(321))},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(338))},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(343))},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(359))},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(364))},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(381))},function(e,t){var n=0,r=Math.random();e.exports=function(e){return"Symbol(".concat(void 0===e?"":e,")_",(++n+r).toString(36))}},function(e,t){e.exports=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}},function(e,t){e.exports=function(e){try{return!!e()}catch(e){return!0}}},function(e,t,n){var r=n(26),o=n(46),a=n(216),i=n(45),l=n(36),u=function(e,t,n){var s,c,d,f=e&u.F,p=e&u.G,h=e&u.S,m=e&u.P,v=e&u.B,y=e&u.W,g=p?o:o[t]||(o[t]={}),b=g.prototype,x=p?r:h?r[t]:(r[t]||{}).prototype;for(s in p&&(n=t),n)(c=!f&&x&&void 0!==x[s])&&l(g,s)||(d=c?x[s]:n[s],g[s]=p&&"function"!=typeof x[s]?n[s]:v&&c?a(d,r):y&&x[s]==d?function(e){var t=function(t,n,r){if(this instanceof e){switch(arguments.length){case 0:return new e;case 1:return new e(t);case 2:return new e(t,n)}return new e(t,n,r)}return e.apply(this,arguments)};return t.prototype=e.prototype,t}(d):m&&"function"==typeof d?a(Function.call,d):d,m&&((g.virtual||(g.virtual={}))[s]=d,e&u.R&&b&&!b[s]&&i(b,s,d)))};u.F=1,u.G=2,u.S=4,u.P=8,u.B=16,u.W=32,u.U=64,u.R=128,e.exports=u},function(e,t){e.exports=!0},function(e,t,n){var r=n(450),o=n(449),a=n(448);e.exports=function(e){return r(e)||o(e)||a()}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=n(48),a=(r=o)&&r.__esModule?r:{default:r};function i(e,t){if(t)do{if(t===e)return!0}while(t=t.parentNode);return!1}t.default=a.default?function(e,t){return e.contains?e.contains(t):e.compareDocumentPosition?e===t||!!(16&e.compareDocumentPosition(t)):i(e,t)}:i,e.exports=t.default},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(22)),a=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:window,n=(0,o.default)(e);return n.defaultView||n.parentView||t};t.default=a},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(455))},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(457))},function(e,t,n){"use strict";n.r(t),n.d(t,"isBrowser",function(){return o});var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o="object"===("undefined"==typeof window?"undefined":r(window))&&"object"===("undefined"==typeof document?"undefined":r(document))&&9===document.nodeType;t.default=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"unnamed",t=arguments[1],n=arguments[2],i=n.jss,l=(0,a.default)(t),u=i.plugins.onCreateRule(e,l,n);if(u)return u;"@"===e[0]&&(0,r.default)(!1,"[JSS] Unknown at-rule %s",e);return new o.default(e,l,n)};var r=i(n(51)),o=i(n(50)),a=i(n(495));function i(e){return e&&e.__esModule?e:{default:e}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];if(!Array.isArray(e))return e;var n="";if(Array.isArray(e[0]))for(var o=0;o<e.length&&"!important"!==e[o];o++)n&&(n+=", "),n+=r(e[o]," ");else n=r(e,", ");t||"!important"!==e[e.length-1]||(n+=" !important");return n};var r=function(e,t){for(var n="",r=0;r<e.length&&"!important"!==e[r];r++)n&&(n+=t),n+=e[r];return n}},function(e,t,n){"use strict";n.r(t);var r=function(e){return function(e){return!!e&&"object"==typeof e}(e)&&!function(e){var t=Object.prototype.toString.call(e);return"[object RegExp]"===t||"[object Date]"===t||function(e){return e.$$typeof===o}(e)}(e)};var o="function"==typeof Symbol&&Symbol.for?Symbol.for("react.element"):60103;function a(e,t){return!1!==t.clone&&t.isMergeableObject(e)?l((n=e,Array.isArray(n)?[]:{}),e,t):e;var n}function i(e,t,n){return e.concat(t).map(function(e){return a(e,n)})}function l(e,t,n){(n=n||{}).arrayMerge=n.arrayMerge||i,n.isMergeableObject=n.isMergeableObject||r;var o=Array.isArray(t);return o===Array.isArray(e)?o?n.arrayMerge(e,t,n):function(e,t,n){var r={};return n.isMergeableObject(e)&&Object.keys(e).forEach(function(t){r[t]=a(e[t],n)}),Object.keys(t).forEach(function(o){n.isMergeableObject(t[o])&&e[o]?r[o]=l(e[o],t[o],n):r[o]=a(t[o],n)}),r}(e,t,n):a(t,n)}l.all=function(e,t){if(!Array.isArray(e))throw new Error("first argument should be an array");return e.reduce(function(e,n){return l(e,n,t)},{})};var u=l;t.default=u},function(e,t,n){"use strict";function r(e){return function(){return e}}var o=function(){};o.thatReturns=r,o.thatReturnsFalse=r(!1),o.thatReturnsTrue=r(!0),o.thatReturnsNull=r(null),o.thatReturnsThis=function(){return this},o.thatReturnsArgument=function(e){return e},e.exports=o},function(e,t,n){"use strict";var r=function(e){};e.exports=function(e,t,n,o,a,i,l,u){if(r(t),!e){var s;if(void 0===t)s=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var c=[n,o,a,i,l,u],d=0;(s=new Error(t.replace(/%s/g,function(){return c[d++]}))).name="Invariant Violation"}throw s.framesToPop=1,s}}},function(e,t){var n=Object.prototype.toString;e.exports=function(e){switch(n.call(e)){case"[object Date]":return"date";case"[object RegExp]":return"regexp";case"[object Arguments]":return"arguments";case"[object Array]":return"array";case"[object Error]":return"error"}return null===e?"null":void 0===e?"undefined":e!=e?"nan":e&&1===e.nodeType?"element":typeof(e=e.valueOf?e.valueOf():Object.prototype.valueOf.apply(e))}},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(264))},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(268))},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(276))},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(285))},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(293))},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(297))},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(298))},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(301))},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(310))},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(311))},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(312))},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(318))},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(319))},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(322))},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(327))},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(329))},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(330))},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(333))},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(334))},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(335))},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.hasValue=y,t.isFilled=g,t.isAdornedStart=function(e){return e.startAdornment},t.default=t.styles=void 0;var o=r(n(4)),a=r(n(12)),i=r(n(7)),l=r(n(3)),u=r(n(9)),s=r(n(8)),c=r(n(11)),d=r(n(10)),f=r(n(2)),p=r(n(1)),h=r(n(6)),m=r(n(5)),v=r(n(337));function y(e){return null!=e&&!(Array.isArray(e)&&0===e.length)}function g(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];return e&&(y(e.value)&&""!==e.value||t&&y(e.defaultValue)&&""!==e.defaultValue)}var b=function(e){var t="light"===e.palette.type,n={color:"currentColor",opacity:t?.42:.5,transition:e.transitions.create("opacity",{duration:e.transitions.duration.shorter})},r={opacity:0},o={opacity:t?.42:.5},a=t?"rgba(0, 0, 0, 0.42)":"rgba(255, 255, 255, 0.7)";return{root:{display:"inline-flex",position:"relative",fontFamily:e.typography.fontFamily,color:t?"rgba(0, 0, 0, 0.87)":e.palette.common.white,fontSize:e.typography.pxToRem(16),lineHeight:"1.1875em","&$disabled":{color:e.palette.text.disabled}},formControl:{"label + &":{marginTop:2*e.spacing.unit}},focused:{},disabled:{},underline:{"&:after":{borderBottom:"2px solid ".concat(e.palette.primary[t?"dark":"light"]),left:0,bottom:0,content:'""',position:"absolute",right:0,transform:"scaleX(0)",transition:e.transitions.create("transform",{duration:e.transitions.duration.shorter,easing:e.transitions.easing.easeOut}),pointerEvents:"none"},"&$focused:after":{transform:"scaleX(1)"},"&$error:after":{borderBottomColor:e.palette.error.main,transform:"scaleX(1)"},"&:before":{borderBottom:"1px solid ".concat(a),left:0,bottom:0,content:'"\\00a0"',position:"absolute",right:0,transition:e.transitions.create("border-bottom-color",{duration:e.transitions.duration.shorter}),pointerEvents:"none"},"&:hover:not($disabled):not($focused):not($error):before":{borderBottom:"2px solid ".concat(e.palette.text.primary)},"&$disabled:before":{borderBottom:"1px dotted ".concat(a)}},error:{},multiline:{padding:"".concat(e.spacing.unit-2,"px 0 ").concat(e.spacing.unit-1,"px")},fullWidth:{width:"100%"},input:{font:"inherit",color:"currentColor",padding:"".concat(e.spacing.unit-2,"px 0 ").concat(e.spacing.unit-1,"px"),border:0,boxSizing:"content-box",verticalAlign:"middle",background:"none",margin:0,WebkitTapHighlightColor:"transparent",display:"block",minWidth:0,flexGrow:1,"&::-webkit-input-placeholder":n,"&::-moz-placeholder":n,"&:-ms-input-placeholder":n,"&::-ms-input-placeholder":n,"&:focus":{outline:0},"&:invalid":{boxShadow:"none"},"&::-webkit-search-decoration":{"-webkit-appearance":"none"},"label[data-shrink=false] + $formControl &":{"&::-webkit-input-placeholder":r,"&::-moz-placeholder":r,"&:-ms-input-placeholder":r,"&::-ms-input-placeholder":r,"&:focus::-webkit-input-placeholder":o,"&:focus::-moz-placeholder":o,"&:focus:-ms-input-placeholder":o,"&:focus::-ms-input-placeholder":o},"&$disabled":{opacity:1}},inputMarginDense:{paddingTop:e.spacing.unit/2-1},inputMultiline:{resize:"none",padding:0},inputType:{height:"1.1875em"},inputTypeSearch:{"-moz-appearance":"textfield","-webkit-appearance":"textfield"}}};function x(e,t){var n=e.disabled,r=e.error,o=e.margin;return t&&t.muiFormControl&&(void 0===n&&(n=t.muiFormControl.disabled),void 0===r&&(r=t.muiFormControl.error),void 0===o&&(o=t.muiFormControl.margin)),{disabled:n,error:r,margin:o}}t.styles=b;var w=function(e){function t(e,n){var r;(0,u.default)(this,t),(r=(0,c.default)(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,n))).state={focused:!1},r.isControlled=null!=r.props.value,r.input=null,r.handleFocus=function(e){if(x(r.props,r.context).disabled)e.stopPropagation();else{r.setState({focused:!0}),r.props.onFocus&&r.props.onFocus(e);var t=r.context.muiFormControl;t&&t.onFocus&&t.onFocus(e)}},r.handleBlur=function(e){r.setState({focused:!1}),r.props.onBlur&&r.props.onBlur(e);var t=r.context.muiFormControl;t&&t.onBlur&&t.onBlur(e)},r.handleChange=function(e){r.isControlled||r.checkDirty(r.input),r.props.onChange&&r.props.onChange(e)},r.handleRefInput=function(e){var t;r.input=e,r.props.inputRef?t=r.props.inputRef:r.props.inputProps&&r.props.inputProps.ref&&(t=r.props.inputProps.ref),t&&("function"==typeof t?t(e):t.current=e)},r.isControlled&&r.checkDirty(e);var o=function(e,t){!x(r.props,r.context).disabled&&x(e,t).disabled&&r.setState({focused:!1})},a=function(e,t,n){if(!x(r.props,r.context).disabled&&x(e,n).disabled){var o=r.context.muiFormControl;o&&o.onBlur&&o.onBlur()}};return f.default.createContext?(r.UNSAFE_componentWillReceiveProps=o,r.UNSAFE_componentWillUpdate=a):(r.componentWillReceiveProps=o,r.componentWillUpdate=a),r}return(0,d.default)(t,e),(0,s.default)(t,[{key:"getChildContext",value:function(){return{muiFormControl:null}}},{key:"componentDidMount",value:function(){this.isControlled||this.checkDirty(this.input)}},{key:"componentDidUpdate",value:function(){this.isControlled&&this.checkDirty(this.props)}},{key:"checkDirty",value:function(e){var t=this.context.muiFormControl;if(g(e))return t&&t.onFilled&&t.onFilled(),void(this.props.onFilled&&this.props.onFilled());t&&t.onEmpty&&t.onEmpty(),this.props.onEmpty&&this.props.onEmpty()}},{key:"render",value:function(){var e,t,n=this.props,r=n.autoComplete,u=n.autoFocus,s=n.classes,c=n.className,d=n.defaultValue,p=(n.disabled,n.disableUnderline),m=n.endAdornment,y=(n.error,n.fullWidth),g=n.id,b=n.inputComponent,w=n.inputProps,_=(w=void 0===w?{}:w).className,k=(0,l.default)(w,["className"]),P=(n.inputRef,n.margin,n.multiline),E=n.name,O=(n.onBlur,n.onChange,n.onEmpty,n.onFilled,n.onFocus,n.onKeyDown),C=n.onKeyUp,S=n.placeholder,T=n.readOnly,M=n.rows,j=n.rowsMax,N=n.startAdornment,L=n.type,R=n.value,D=(0,l.default)(n,["autoComplete","autoFocus","classes","className","defaultValue","disabled","disableUnderline","endAdornment","error","fullWidth","id","inputComponent","inputProps","inputRef","margin","multiline","name","onBlur","onChange","onEmpty","onFilled","onFocus","onKeyDown","onKeyUp","placeholder","readOnly","rows","rowsMax","startAdornment","type","value"]),A=this.context.muiFormControl,I=x(this.props,this.context),F=I.disabled,z=I.error,W=I.margin,B=(0,h.default)(s.root,(e={},(0,i.default)(e,s.disabled,F),(0,i.default)(e,s.error,z),(0,i.default)(e,s.fullWidth,y),(0,i.default)(e,s.focused,this.state.focused),(0,i.default)(e,s.formControl,A),(0,i.default)(e,s.multiline,P),(0,i.default)(e,s.underline,!p),e),c),U=(0,h.default)(s.input,(t={},(0,i.default)(t,s.disabled,F),(0,i.default)(t,s.inputType,"text"!==L),(0,i.default)(t,s.inputTypeSearch,"search"===L),(0,i.default)(t,s.inputMultiline,P),(0,i.default)(t,s.inputMarginDense,"dense"===W),t),_),H=A&&!0===A.required,V="input",$=(0,a.default)({},k,{ref:this.handleRefInput});return b?(V=b,$=(0,a.default)({inputRef:this.handleRefInput},$,{ref:null})):P&&(M&&!j?V="textarea":($=(0,a.default)({rowsMax:j,textareaRef:this.handleRefInput},$,{ref:null}),V=v.default)),f.default.createElement("div",(0,o.default)({className:B},D),N,f.default.createElement(V,(0,o.default)({"aria-invalid":z,"aria-required":H,autoComplete:r,autoFocus:u,className:U,defaultValue:d,disabled:F,id:g,name:E,onBlur:this.handleBlur,onChange:this.handleChange,onFocus:this.handleFocus,onKeyDown:O,onKeyUp:C,placeholder:S,readOnly:T,required:!!H||void 0,rows:M,type:L,value:R},$)),m)}}]),t}(f.default.Component);w.propTypes={},w.muiName="Input",w.defaultProps={disableUnderline:!1,fullWidth:!1,multiline:!1,type:"text"},w.contextTypes={muiFormControl:p.default.object},w.childContextTypes={muiFormControl:p.default.object};var _=(0,m.default)(b,{name:"MuiInput"})(w);t.default=_},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.isHorizontal=w,t.getAnchor=_,t.default=t.styles=void 0;var o=r(n(12)),a=r(n(4)),i=r(n(7)),l=r(n(3)),u=r(n(9)),s=r(n(8)),c=r(n(11)),d=r(n(10)),f=r(n(2)),p=(r(n(1)),r(n(6))),h=r(n(38)),m=r(n(5)),v=r(n(65)),y=r(n(21)),g=n(13),b=n(25),x={left:"right",right:"left",top:"down",bottom:"up"};function w(e){return-1!==["left","right"].indexOf(e.anchor)}function _(e){return"rtl"===e.theme.direction&&w(e)?x[e.anchor]:e.anchor}var k=function(e){return{docked:{flex:"0 0 auto"},paper:{overflowY:"auto",display:"flex",flexDirection:"column",height:"100vh",flex:"1 0 auto",zIndex:e.zIndex.drawer,WebkitOverflowScrolling:"touch",position:"fixed",top:0,outline:"none"},paperAnchorLeft:{left:0,right:"auto"},paperAnchorRight:{left:"auto",right:0},paperAnchorTop:{top:0,left:0,bottom:"auto",right:0,height:"auto",maxHeight:"100vh"},paperAnchorBottom:{top:"auto",left:0,bottom:0,right:0,height:"auto",maxHeight:"100vh"},paperAnchorDockedLeft:{borderRight:"1px solid ".concat(e.palette.divider)},paperAnchorDockedTop:{borderBottom:"1px solid ".concat(e.palette.divider)},paperAnchorDockedRight:{borderLeft:"1px solid ".concat(e.palette.divider)},paperAnchorDockedBottom:{borderTop:"1px solid ".concat(e.palette.divider)},modal:{}}};t.styles=k;var P=function(e){function t(){var e,n,r;(0,u.default)(this,t);for(var o=arguments.length,a=new Array(o),i=0;i<o;i++)a[i]=arguments[i];return(0,c.default)(r,(n=r=(0,c.default)(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(a))),r.mounted=!1,n))}return(0,d.default)(t,e),(0,s.default)(t,[{key:"componentDidMount",value:function(){this.mounted=!0}},{key:"render",value:function(){var e=this.props,t=(e.anchor,e.children),n=e.classes,r=e.className,u=e.elevation,s=e.ModalProps,c=(s=void 0===s?{}:s).BackdropProps,d=(0,l.default)(s,["BackdropProps"]),m=e.onClose,b=e.open,w=e.PaperProps,k=e.SlideProps,P=(e.theme,e.transitionDuration),E=e.variant,O=(0,l.default)(e,["anchor","children","classes","className","elevation","ModalProps","onClose","open","PaperProps","SlideProps","theme","transitionDuration","variant"]),C=_(this.props),S=f.default.createElement(y.default,(0,a.default)({elevation:"temporary"===E?u:0,square:!0,className:(0,p.default)(n.paper,n["paperAnchor".concat((0,g.capitalize)(C))],(0,i.default)({},n["paperAnchorDocked".concat((0,g.capitalize)(C))],"temporary"!==E))},w),t);if("permanent"===E)return f.default.createElement("div",(0,a.default)({className:(0,p.default)(n.docked,r)},O),S);var T=f.default.createElement(v.default,(0,a.default)({in:b,direction:x[C],timeout:P,appear:this.mounted},k),S);return"persistent"===E?f.default.createElement("div",(0,a.default)({className:(0,p.default)(n.docked,r)},O),T):f.default.createElement(h.default,(0,a.default)({BackdropProps:(0,o.default)({},c,{transitionDuration:P}),className:(0,p.default)(n.modal,r),open:b,onClose:m},O,d),T)}}]),t}(f.default.Component);P.propTypes={},P.defaultProps={anchor:"left",elevation:16,open:!1,transitionDuration:{enter:b.duration.enteringScreen,exit:b.duration.leavingScreen},variant:"temporary"};var E=(0,m.default)(k,{name:"MuiDrawer",flip:!1,withTheme:!0})(P);t.default=E},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(365))},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(366))},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.styles=void 0;var o=r(n(4)),a=r(n(7)),i=r(n(3)),l=r(n(9)),u=r(n(8)),s=r(n(11)),c=r(n(10)),d=r(n(2)),f=r(n(1)),p=r(n(6)),h=r(n(5)),m=r(n(28)),v={root:{display:"inline-flex",alignItems:"center",transition:"none","&:hover":{backgroundColor:"transparent"}},checked:{},disabled:{},input:{cursor:"inherit",position:"absolute",opacity:0,width:"100%",height:"100%",top:0,left:0,margin:0,padding:0}};t.styles=v;var y=function(e){function t(e){var n;return(0,l.default)(this,t),(n=(0,s.default)(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e))).state={},n.input=null,n.isControlled=null,n.handleFocus=function(e){n.props.onFocus&&n.props.onFocus(e);var t=n.context.muiFormControl;t&&t.onFocus&&t.onFocus(e)},n.handleBlur=function(e){n.props.onBlur&&n.props.onBlur(e);var t=n.context.muiFormControl;t&&t.onBlur&&t.onBlur(e)},n.handleInputChange=function(e){var t=e.target.checked;n.isControlled||n.setState({checked:t}),n.props.onChange&&n.props.onChange(e,t)},n.isControlled=null!=e.checked,n.isControlled||(n.state.checked=void 0!==e.defaultChecked&&e.defaultChecked),n}return(0,c.default)(t,e),(0,u.default)(t,[{key:"render",value:function(){var e,t=this.props,n=t.checked,r=t.checkedIcon,l=t.classes,u=t.className,s=t.disabled,c=t.icon,f=t.id,h=t.inputProps,v=t.inputRef,y=t.name,g=(t.onBlur,t.onChange,t.onFocus,t.tabIndex),b=t.type,x=t.value,w=(0,i.default)(t,["checked","checkedIcon","classes","className","disabled","icon","id","inputProps","inputRef","name","onBlur","onChange","onFocus","tabIndex","type","value"]),_=this.context.muiFormControl,k=s;_&&void 0===k&&(k=_.disabled);var P=this.isControlled?n:this.state.checked,E="checkbox"===b||"radio"===b;return d.default.createElement(m.default,(0,o.default)({component:"span",className:(0,p.default)(l.root,(e={},(0,a.default)(e,l.checked,P),(0,a.default)(e,l.disabled,k),e),u),disabled:k,tabIndex:null,role:void 0,onFocus:this.handleFocus,onBlur:this.handleBlur},w),P?r:c,d.default.createElement("input",(0,o.default)({id:E&&f,type:b,name:y,checked:P,onChange:this.handleInputChange,className:l.input,disabled:k,tabIndex:g,value:x,ref:v},h)))}}]),t}(d.default.Component);y.propTypes={},y.defaultProps={type:"checkbox"},y.contextTypes={muiFormControl:f.default.object};var g=(0,h.default)(v,{name:"MuiSwitchBase"})(y);t.default=g},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(375))},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(377))},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(382))},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(204))},function(e,t,n){"use strict";n.r(t);var r=n(206);n.d(t,"colors",function(){return r});var o=n(17);n.d(t,"createGenerateClassName",function(){return o.createGenerateClassName}),n.d(t,"createMuiTheme",function(){return o.createMuiTheme}),n.d(t,"createStyles",function(){return o.createStyles}),n.d(t,"jssPreset",function(){return o.jssPreset}),n.d(t,"MuiThemeProvider",function(){return o.MuiThemeProvider}),n.d(t,"withStyles",function(){return o.withStyles}),n.d(t,"withTheme",function(){return o.withTheme});var a=n(78),i=n.n(a);n.d(t,"AppBar",function(){return i.a});var l=n(114),u=n.n(l);n.d(t,"Avatar",function(){return u.a});var s=n(113),c=n.n(s);n.d(t,"Backdrop",function(){return c.a});var d=n(203),f=n.n(d);n.d(t,"Badge",function(){return f.a});var p=n(202),h=n.n(p);n.d(t,"BottomNavigation",function(){return h.a});var m=n(201),v=n.n(m);n.d(t,"BottomNavigationAction",function(){return v.a});var y=n(24),g=n.n(y);n.d(t,"Button",function(){return g.a});var b=n(20),x=n.n(b);n.d(t,"ButtonBase",function(){return x.a});var w=n(112),_=n.n(w);n.d(t,"Card",function(){return _.a});var k=n(200),P=n.n(k);n.d(t,"CardActions",function(){return P.a});var E=n(111),O=n.n(E);n.d(t,"CardContent",function(){return O.a});var C=n(199),S=n.n(C);n.d(t,"CardHeader",function(){return S.a});var T=n(198),M=n.n(T);n.d(t,"CardMedia",function(){return M.a});var j=n(197),N=n.n(j);n.d(t,"Checkbox",function(){return N.a});var L=n(196),R=n.n(L);n.d(t,"Chip",function(){return R.a});var D=n(109),A=n.n(D);n.d(t,"CircularProgress",function(){return A.a});var I=n(108),F=n.n(I);n.d(t,"ClickAwayListener",function(){return F.a});var z=n(67),W=n.n(z);n.d(t,"Collapse",function(){return W.a});var B=n(195),U=n.n(B);n.d(t,"CssBaseline",function(){return U.a});var H=n(194),V=n.n(H);n.d(t,"Dialog",function(){return V.a});var $=n(187),q=n.n($);n.d(t,"DialogActions",function(){return q.a});var K=n(186),G=n.n(K);n.d(t,"DialogContent",function(){return G.a});var X=n(185),Y=n.n(X);n.d(t,"DialogContentText",function(){return Y.a});var Q=n(184),J=n.n(Q);n.d(t,"DialogTitle",function(){return J.a});var Z=n(183),ee=n.n(Z);n.d(t,"Divider",function(){return ee.a});var te=n(182),ne=n.n(te);n.d(t,"Drawer",function(){return ne.a});var re=n(181),oe=n.n(re);n.d(t,"ExpansionPanel",function(){return oe.a});var ae=n(180),ie=n.n(ae);n.d(t,"ExpansionPanelActions",function(){return ie.a});var le=n(179),ue=n.n(le);n.d(t,"ExpansionPanelDetails",function(){return ue.a});var se=n(178),ce=n.n(se);n.d(t,"ExpansionPanelSummary",function(){return ce.a});var de=n(68),fe=n.n(de);n.d(t,"Fade",function(){return fe.a});var pe=n(64),he=n.n(pe);n.d(t,"FormControl",function(){return he.a});var me=n(177),ve=n.n(me);n.d(t,"FormControlLabel",function(){return ve.a});var ye=n(105),ge=n.n(ye);n.d(t,"FormGroup",function(){return ge.a});var be=n(104),xe=n.n(be);n.d(t,"FormHelperText",function(){return xe.a});var we=n(103),_e=n.n(we);n.d(t,"FormLabel",function(){return _e.a});var ke=n(34),Pe=n.n(ke);n.d(t,"Grid",function(){return Pe.a});var Ee=n(102),Oe=n.n(Ee);n.d(t,"GridList",function(){return Oe.a});var Ce=n(101),Se=n.n(Ce);n.d(t,"GridListTile",function(){return Se.a});var Te=n(176),Me=n.n(Te);n.d(t,"GridListTileBar",function(){return Me.a});var je=n(100),Ne=n.n(je);n.d(t,"Grow",function(){return Ne.a});var Le=n(175),Re=n.n(Le);n.d(t,"Hidden",function(){return Re.a});var De=n(174),Ae=n.n(De);n.d(t,"Icon",function(){return Ae.a});var Ie=n(28),Fe=n.n(Ie);n.d(t,"IconButton",function(){return Fe.a});var ze=n(33),We=n.n(ze);n.d(t,"Input",function(){return We.a});var Be=n(99),Ue=n.n(Be);n.d(t,"InputAdornment",function(){return Ue.a});var He=n(63),Ve=n.n(He);n.d(t,"InputLabel",function(){return Ve.a});var $e=n(62),qe=n.n($e);n.d(t,"LinearProgress",function(){return qe.a});var Ke=n(98),Ge=n.n(Ke);n.d(t,"List",function(){return Ge.a});var Xe=n(97),Ye=n.n(Xe);n.d(t,"ListItem",function(){return Ye.a});var Qe=n(173),Je=n.n(Qe);n.d(t,"ListItemAvatar",function(){return Je.a});var Ze=n(172),et=n.n(Ze);n.d(t,"ListItemIcon",function(){return et.a});var tt=n(171),nt=n.n(tt);n.d(t,"ListItemSecondaryAction",function(){return nt.a});var rt=n(170),ot=n.n(rt);n.d(t,"ListItemText",function(){return ot.a});var at=n(169),it=n.n(at);n.d(t,"ListSubheader",function(){return it.a});var lt=n(168),ut=n.n(lt);n.d(t,"Menu",function(){return ut.a});var st=n(94),ct=n.n(st);n.d(t,"MenuItem",function(){return ct.a});var dt=n(95),ft=n.n(dt);n.d(t,"MenuList",function(){return ft.a});var pt=n(166),ht=n.n(pt);n.d(t,"MobileStepper",function(){return ht.a});var mt=n(38),vt=n.n(mt);n.d(t,"Modal",function(){return vt.a}),n.d(t,"ModalManager",function(){return mt.ModalManager});var yt=n(165),gt=n.n(yt);n.d(t,"NativeSelect",function(){return gt.a});var bt=n(21),xt=n.n(bt);n.d(t,"Paper",function(){return xt.a});var wt=n(96),_t=n.n(wt);n.d(t,"Popover",function(){return _t.a});var kt=n(66),Pt=n.n(kt);n.d(t,"Portal",function(){return Pt.a});var Et=n(161),Ot=n.n(Et);n.d(t,"Radio",function(){return Ot.a});var Ct=n(160),St=n.n(Ct);n.d(t,"RadioGroup",function(){return St.a});var Tt=n(61),Mt=n.n(Tt);n.d(t,"Select",function(){return Mt.a});var jt=n(65),Nt=n.n(jt);n.d(t,"Slide",function(){return Nt.a});var Lt=n(159),Rt=n.n(Lt);n.d(t,"Snackbar",function(){return Rt.a});var Dt=n(93),At=n.n(Dt);n.d(t,"SnackbarContent",function(){return At.a});var It=n(158),Ft=n.n(It);n.d(t,"Step",function(){return Ft.a});var zt=n(157),Wt=n.n(zt);n.d(t,"StepButton",function(){return Wt.a});var Bt=n(90),Ut=n.n(Bt);n.d(t,"StepConnector",function(){return Ut.a});var Ht=n(156),Vt=n.n(Ht);n.d(t,"StepContent",function(){return Vt.a});var $t=n(91),qt=n.n($t);n.d(t,"StepIcon",function(){return qt.a});var Kt=n(92),Gt=n.n(Kt);n.d(t,"StepLabel",function(){return Gt.a});var Xt=n(155),Yt=n.n(Xt);n.d(t,"Stepper",function(){return Yt.a});var Qt=n(16),Jt=n.n(Qt);n.d(t,"SvgIcon",function(){return Jt.a});var Zt=n(154),en=n.n(Zt);n.d(t,"SwipeableDrawer",function(){return en.a});var tn=n(153),nn=n.n(tn);n.d(t,"Switch",function(){return nn.a});var rn=n(152),on=n.n(rn);n.d(t,"Table",function(){return on.a});var an=n(151),ln=n.n(an);n.d(t,"TableBody",function(){return ln.a});var un=n(89),sn=n.n(un);n.d(t,"TableCell",function(){return sn.a});var cn=n(150),dn=n.n(cn);n.d(t,"TableFooter",function(){return dn.a});var fn=n(149),pn=n.n(fn);n.d(t,"TableHead",function(){return pn.a});var hn=n(148),mn=n.n(hn);n.d(t,"TablePagination",function(){return mn.a});var vn=n(145),yn=n.n(vn);n.d(t,"TableRow",function(){return yn.a});var gn=n(144),bn=n.n(gn);n.d(t,"TableSortLabel",function(){return bn.a});var xn=n(88),wn=n.n(xn);n.d(t,"Tabs",function(){return wn.a});var _n=n(87),kn=n.n(_n);n.d(t,"Tab",function(){return kn.a});var Pn=n(60),En=n.n(Pn);n.d(t,"TextField",function(){return En.a});var On=n(77),Cn=n.n(On);n.d(t,"Toolbar",function(){return Cn.a});var Sn=n(143),Tn=n.n(Sn);n.d(t,"Tooltip",function(){return Tn.a});var Mn=n(18),jn=n.n(Mn);n.d(t,"Typography",function(){return jn.a});var Nn=n(142),Ln=n.n(Nn);n.d(t,"withMobileDialog",function(){return Ln.a});var Rn=n(30),Dn=n.n(Rn);n.d(t,"withWidth",function(){return Dn.a});var An=n(86),In=n.n(An);n.d(t,"Zoom",function(){return In.a})},function(e,t){t.f={}.propertyIsEnumerable},function(e,t,n){var r=n(26),o=n(46),a=n(73),i=n(118),l=n(44).f;e.exports=function(e){var t=o.Symbol||(o.Symbol=a?{}:r.Symbol||{});"_"==e.charAt(0)||e in t||l(t,e,{value:i.f(e)})}},function(e,t,n){t.f=n(40)},function(e,t,n){var r=n(44).f,o=n(36),a=n(40)("toStringTag");e.exports=function(e,t,n){e&&!o(e=n?e:e.prototype,a)&&r(e,a,{configurable:!0,value:t})}},function(e,t){e.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},function(e,t,n){var r=n(46),o=n(26),a=o["__core-js_shared__"]||(o["__core-js_shared__"]={});(e.exports=function(e,t){return a[e]||(a[e]=void 0!==t?t:{})})("versions",[]).push({version:r.version,mode:n(73)?"pure":"global",copyright:"© 2018 Denis Pushkarev (zloirock.ru)"})},function(e,t,n){var r=n(121)("keys"),o=n(69);e.exports=function(e){return r[e]||(r[e]=o(e))}},function(e,t,n){var r=n(212),o=n(120);e.exports=Object.keys||function(e){return r(e,o)}},function(e,t,n){var r=n(53),o=n(431),a=n(120),i=n(122)("IE_PROTO"),l=function(){},u=function(){var e,t=n(214)("iframe"),r=a.length;for(t.style.display="none",n(426).appendChild(t),t.src="javascript:",(e=t.contentWindow.document).open(),e.write("<script>document.F=Object<\/script>"),e.close(),u=e.F;r--;)delete u.prototype[a[r]];return u()};e.exports=Object.create||function(e,t){var n;return null!==e?(l.prototype=r(e),n=new l,l.prototype=null,n[i]=e):n=u(),void 0===t?n:o(n,t)}},function(e,t){e.exports={}},function(e,t,n){var r=n(43);e.exports=function(e,t){if(!r(e))return e;var n,o;if(t&&"function"==typeof(n=e.toString)&&!r(o=n.call(e)))return o;if("function"==typeof(n=e.valueOf)&&!r(o=n.call(e)))return o;if(!t&&"function"==typeof(n=e.toString)&&!r(o=n.call(e)))return o;throw TypeError("Can't convert object to primitive value")}},function(e,t){e.exports=function(e){if(void 0==e)throw TypeError("Can't call method on  "+e);return e}},function(e,t){var n=Math.ceil,r=Math.floor;e.exports=function(e){return isNaN(e=+e)?0:(e>0?r:n)(e)}},function(e,t,n){e.exports=function(){"use strict";var e={childContextTypes:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},t={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},n=Object.defineProperty,r=Object.getOwnPropertyNames,o=Object.getOwnPropertySymbols,a=Object.getOwnPropertyDescriptor,i=Object.getPrototypeOf,l=i&&i(Object);return function u(s,c,d){if("string"!=typeof c){if(l){var f=i(c);f&&f!==l&&u(s,f,d)}var p=r(c);o&&(p=p.concat(o(c)));for(var h=0;h<p.length;++h){var m=p[h];if(!(e[m]||t[m]||d&&d[m])){var v=a(c,m);try{n(s,m,v)}catch(e){}}}return s}return s}}()},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=n(79);var a="",i="";if(((r=o)&&r.__esModule?r:{default:r}).default){var l={Moz:"-moz-",ms:"-ms-",O:"-o-",Webkit:"-webkit-"},u=document.createElement("p").style;for(var s in l)if(s+"Transform"in u){a=s,i=l[s];break}}t.default={js:a,css:i}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=n(225),a=(r=o)&&r.__esModule?r:{default:r};t.default=new a.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},r="";if(!t)return r;var o=n.indent,l=void 0===o?0:o,u=t.fallbacks;if(l++,u)if(Array.isArray(u))for(var s=0;s<u.length;s++){var c=u[s];for(var d in c){var f=c[d];null!=f&&(r+="\n"+i(d+": "+(0,a.default)(f)+";",l))}}else for(var p in u){var h=u[p];null!=h&&(r+="\n"+i(p+": "+(0,a.default)(h)+";",l))}for(var m in t){var v=t[m];null!=v&&"fallbacks"!==m&&(r+="\n"+i(m+": "+(0,a.default)(v)+";",l))}return r||n.allowEmpty?r=i(e+" {"+r+"\n",--l)+i("}",l):r};var r,o=n(81),a=(r=o)&&r.__esModule?r:{default:r};function i(e,t){for(var n="",r=0;r<t;r++)n+="  ";return n+e}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r={black:"#000",white:"#fff"};t.default=r},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(12)),a=r(n(3)),i=r(n(82)),l=(r(n(14)),r(n(504))),u=r(n(56)),s=r(n(503)),c=r(n(502)),d=r(n(501)),f=r(n(25)),p=r(n(500)),h=r(n(499));var m=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.palette,n=void 0===t?{}:t,r=e.breakpoints,m=void 0===r?{}:r,v=e.mixins,y=void 0===v?{}:v,g=e.typography,b=void 0===g?{}:g,x=e.shadows,w=(0,a.default)(e,["palette","breakpoints","mixins","typography","shadows"]),_=(0,s.default)(n),k=(0,u.default)(m);return(0,o.default)({breakpoints:k,direction:"ltr",mixins:(0,c.default)(k,h.default,y),overrides:{},palette:_,props:{},shadows:x||d.default,typography:(0,l.default)(_,b)},(0,i.default)({transitions:f.default,spacing:h.default,zIndex:p.default},w))};t.default=m},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.CHANNEL=void 0;var o=r(n(7)),a=r(n(1)),i="__THEMING__";t.CHANNEL=i;var l={contextTypes:(0,o.default)({},i,a.default.object),initial:function(e){return e[i]?e[i].getState():null},subscribe:function(e,t){return e[i]?e[i].subscribe(t):null},unsubscribe:function(e,t){e[i]&&e[i].unsubscribe(t)}};t.default=l},function(e,t){function n(e){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function r(t){return"function"==typeof Symbol&&"symbol"===n(Symbol.iterator)?e.exports=r=function(e){return n(e)}:e.exports=r=function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":n(e)},r(t)}e.exports=r},function(e,t,n){"use strict";e.exports={}},function(e,t,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,a=Object.prototype.propertyIsEnumerable;e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map(function(e){return t[e]}).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach(function(e){r[e]=e}),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,i,l=function(e){if(null===e||void 0===e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}(e),u=1;u<arguments.length;u++){for(var s in n=Object(arguments[u]))o.call(n,s)&&(l[s]=n[s]);if(r){i=r(n);for(var c=0;c<i.length;c++)a.call(n,i[c])&&(l[i[c]]=n[i[c]])}}return l}},function(e,t,n){"use strict";(function(e){for(
/**!
 * @fileOverview Kickass library to create and place poppers near their reference elements.
 * @version 1.14.3
 * @license
 * Copyright (c) 2016 Federico Zivolo and contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
var n="undefined"!=typeof window&&"undefined"!=typeof document,r=["Edge","Trident","Firefox"],o=0,a=0;a<r.length;a+=1)if(n&&navigator.userAgent.indexOf(r[a])>=0){o=1;break}var i=n&&window.Promise?function(e){var t=!1;return function(){t||(t=!0,window.Promise.resolve().then(function(){t=!1,e()}))}}:function(e){var t=!1;return function(){t||(t=!0,setTimeout(function(){t=!1,e()},o))}};function l(e){return e&&"[object Function]"==={}.toString.call(e)}function u(e,t){if(1!==e.nodeType)return[];var n=getComputedStyle(e,null);return t?n[t]:n}function s(e){return"HTML"===e.nodeName?e:e.parentNode||e.host}function c(e){if(!e)return document.body;switch(e.nodeName){case"HTML":case"BODY":return e.ownerDocument.body;case"#document":return e.body}var t=u(e),n=t.overflow,r=t.overflowX,o=t.overflowY;return/(auto|scroll|overlay)/.test(n+o+r)?e:c(s(e))}var d=n&&!(!window.MSInputMethodContext||!document.documentMode),f=n&&/MSIE 10/.test(navigator.userAgent);function p(e){return 11===e?d:10===e?f:d||f}function h(e){if(!e)return document.documentElement;for(var t=p(10)?document.body:null,n=e.offsetParent;n===t&&e.nextElementSibling;)n=(e=e.nextElementSibling).offsetParent;var r=n&&n.nodeName;return r&&"BODY"!==r&&"HTML"!==r?-1!==["TD","TABLE"].indexOf(n.nodeName)&&"static"===u(n,"position")?h(n):n:e?e.ownerDocument.documentElement:document.documentElement}function m(e){return null!==e.parentNode?m(e.parentNode):e}function v(e,t){if(!(e&&e.nodeType&&t&&t.nodeType))return document.documentElement;var n=e.compareDocumentPosition(t)&Node.DOCUMENT_POSITION_FOLLOWING,r=n?e:t,o=n?t:e,a=document.createRange();a.setStart(r,0),a.setEnd(o,0);var i,l,u=a.commonAncestorContainer;if(e!==u&&t!==u||r.contains(o))return"BODY"===(l=(i=u).nodeName)||"HTML"!==l&&h(i.firstElementChild)!==i?h(u):u;var s=m(e);return s.host?v(s.host,t):v(e,m(t).host)}function y(e){var t="top"===(arguments.length>1&&void 0!==arguments[1]?arguments[1]:"top")?"scrollTop":"scrollLeft",n=e.nodeName;if("BODY"===n||"HTML"===n){var r=e.ownerDocument.documentElement;return(e.ownerDocument.scrollingElement||r)[t]}return e[t]}function g(e,t){var n="x"===t?"Left":"Top",r="Left"===n?"Right":"Bottom";return parseFloat(e["border"+n+"Width"],10)+parseFloat(e["border"+r+"Width"],10)}function b(e,t,n,r){return Math.max(t["offset"+e],t["scroll"+e],n["client"+e],n["offset"+e],n["scroll"+e],p(10)?n["offset"+e]+r["margin"+("Height"===e?"Top":"Left")]+r["margin"+("Height"===e?"Bottom":"Right")]:0)}function x(){var e=document.body,t=document.documentElement,n=p(10)&&getComputedStyle(t);return{height:b("Height",e,t,n),width:b("Width",e,t,n)}}var w=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},_=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),k=function(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e},P=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function E(e){return P({},e,{right:e.left+e.width,bottom:e.top+e.height})}function O(e){var t={};try{if(p(10)){t=e.getBoundingClientRect();var n=y(e,"top"),r=y(e,"left");t.top+=n,t.left+=r,t.bottom+=n,t.right+=r}else t=e.getBoundingClientRect()}catch(e){}var o={left:t.left,top:t.top,width:t.right-t.left,height:t.bottom-t.top},a="HTML"===e.nodeName?x():{},i=a.width||e.clientWidth||o.right-o.left,l=a.height||e.clientHeight||o.bottom-o.top,s=e.offsetWidth-i,c=e.offsetHeight-l;if(s||c){var d=u(e);s-=g(d,"x"),c-=g(d,"y"),o.width-=s,o.height-=c}return E(o)}function C(e,t){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=p(10),o="HTML"===t.nodeName,a=O(e),i=O(t),l=c(e),s=u(t),d=parseFloat(s.borderTopWidth,10),f=parseFloat(s.borderLeftWidth,10);n&&"HTML"===t.nodeName&&(i.top=Math.max(i.top,0),i.left=Math.max(i.left,0));var h=E({top:a.top-i.top-d,left:a.left-i.left-f,width:a.width,height:a.height});if(h.marginTop=0,h.marginLeft=0,!r&&o){var m=parseFloat(s.marginTop,10),v=parseFloat(s.marginLeft,10);h.top-=d-m,h.bottom-=d-m,h.left-=f-v,h.right-=f-v,h.marginTop=m,h.marginLeft=v}return(r&&!n?t.contains(l):t===l&&"BODY"!==l.nodeName)&&(h=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=y(t,"top"),o=y(t,"left"),a=n?-1:1;return e.top+=r*a,e.bottom+=r*a,e.left+=o*a,e.right+=o*a,e}(h,t)),h}function S(e){if(!e||!e.parentElement||p())return document.documentElement;for(var t=e.parentElement;t&&"none"===u(t,"transform");)t=t.parentElement;return t||document.documentElement}function T(e,t,n,r){var o=arguments.length>4&&void 0!==arguments[4]&&arguments[4],a={top:0,left:0},i=o?S(e):v(e,t);if("viewport"===r)a=function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=e.ownerDocument.documentElement,r=C(e,n),o=Math.max(n.clientWidth,window.innerWidth||0),a=Math.max(n.clientHeight,window.innerHeight||0),i=t?0:y(n),l=t?0:y(n,"left");return E({top:i-r.top+r.marginTop,left:l-r.left+r.marginLeft,width:o,height:a})}(i,o);else{var l=void 0;"scrollParent"===r?"BODY"===(l=c(s(t))).nodeName&&(l=e.ownerDocument.documentElement):l="window"===r?e.ownerDocument.documentElement:r;var d=C(l,i,o);if("HTML"!==l.nodeName||function e(t){var n=t.nodeName;return"BODY"!==n&&"HTML"!==n&&("fixed"===u(t,"position")||e(s(t)))}(i))a=d;else{var f=x(),p=f.height,h=f.width;a.top+=d.top-d.marginTop,a.bottom=p+d.top,a.left+=d.left-d.marginLeft,a.right=h+d.left}}return a.left+=n,a.top+=n,a.right-=n,a.bottom-=n,a}function M(e,t,n,r,o){var a=arguments.length>5&&void 0!==arguments[5]?arguments[5]:0;if(-1===e.indexOf("auto"))return e;var i=T(n,r,a,o),l={top:{width:i.width,height:t.top-i.top},right:{width:i.right-t.right,height:i.height},bottom:{width:i.width,height:i.bottom-t.bottom},left:{width:t.left-i.left,height:i.height}},u=Object.keys(l).map(function(e){return P({key:e},l[e],{area:(t=l[e],t.width*t.height)});var t}).sort(function(e,t){return t.area-e.area}),s=u.filter(function(e){var t=e.width,r=e.height;return t>=n.clientWidth&&r>=n.clientHeight}),c=s.length>0?s[0].key:u[0].key,d=e.split("-")[1];return c+(d?"-"+d:"")}function j(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null;return C(n,r?S(t):v(t,n),r)}function N(e){var t=getComputedStyle(e),n=parseFloat(t.marginTop)+parseFloat(t.marginBottom),r=parseFloat(t.marginLeft)+parseFloat(t.marginRight);return{width:e.offsetWidth+r,height:e.offsetHeight+n}}function L(e){var t={left:"right",right:"left",bottom:"top",top:"bottom"};return e.replace(/left|right|bottom|top/g,function(e){return t[e]})}function R(e,t,n){n=n.split("-")[0];var r=N(e),o={width:r.width,height:r.height},a=-1!==["right","left"].indexOf(n),i=a?"top":"left",l=a?"left":"top",u=a?"height":"width",s=a?"width":"height";return o[i]=t[i]+t[u]/2-r[u]/2,o[l]=n===l?t[l]-r[s]:t[L(l)],o}function D(e,t){return Array.prototype.find?e.find(t):e.filter(t)[0]}function A(e,t,n){return(void 0===n?e:e.slice(0,function(e,t,n){if(Array.prototype.findIndex)return e.findIndex(function(e){return e[t]===n});var r=D(e,function(e){return e[t]===n});return e.indexOf(r)}(e,"name",n))).forEach(function(e){e.function&&console.warn("`modifier.function` is deprecated, use `modifier.fn`!");var n=e.function||e.fn;e.enabled&&l(n)&&(t.offsets.popper=E(t.offsets.popper),t.offsets.reference=E(t.offsets.reference),t=n(t,e))}),t}function I(e,t){return e.some(function(e){var n=e.name;return e.enabled&&n===t})}function F(e){for(var t=[!1,"ms","Webkit","Moz","O"],n=e.charAt(0).toUpperCase()+e.slice(1),r=0;r<t.length;r++){var o=t[r],a=o?""+o+n:e;if(void 0!==document.body.style[a])return a}return null}function z(e){var t=e.ownerDocument;return t?t.defaultView:window}function W(e,t,n,r){n.updateBound=r,z(e).addEventListener("resize",n.updateBound,{passive:!0});var o=c(e);return function e(t,n,r,o){var a="BODY"===t.nodeName,i=a?t.ownerDocument.defaultView:t;i.addEventListener(n,r,{passive:!0}),a||e(c(i.parentNode),n,r,o),o.push(i)}(o,"scroll",n.updateBound,n.scrollParents),n.scrollElement=o,n.eventsEnabled=!0,n}function B(){var e,t;this.state.eventsEnabled&&(cancelAnimationFrame(this.scheduleUpdate),this.state=(e=this.reference,t=this.state,z(e).removeEventListener("resize",t.updateBound),t.scrollParents.forEach(function(e){e.removeEventListener("scroll",t.updateBound)}),t.updateBound=null,t.scrollParents=[],t.scrollElement=null,t.eventsEnabled=!1,t))}function U(e){return""!==e&&!isNaN(parseFloat(e))&&isFinite(e)}function H(e,t){Object.keys(t).forEach(function(n){var r="";-1!==["width","height","top","right","bottom","left"].indexOf(n)&&U(t[n])&&(r="px"),e.style[n]=t[n]+r})}function V(e,t,n){var r=D(e,function(e){return e.name===t}),o=!!r&&e.some(function(e){return e.name===n&&e.enabled&&e.order<r.order});if(!o){var a="`"+t+"`",i="`"+n+"`";console.warn(i+" modifier is required by "+a+" modifier in order to work, be sure to include it before "+a+"!")}return o}var $=["auto-start","auto","auto-end","top-start","top","top-end","right-start","right","right-end","bottom-end","bottom","bottom-start","left-end","left","left-start"],q=$.slice(3);function K(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=q.indexOf(e),r=q.slice(n+1).concat(q.slice(0,n));return t?r.reverse():r}var G={FLIP:"flip",CLOCKWISE:"clockwise",COUNTERCLOCKWISE:"counterclockwise"};function X(e,t,n,r){var o=[0,0],a=-1!==["right","left"].indexOf(r),i=e.split(/(\+|\-)/).map(function(e){return e.trim()}),l=i.indexOf(D(i,function(e){return-1!==e.search(/,|\s/)}));i[l]&&-1===i[l].indexOf(",")&&console.warn("Offsets separated by white space(s) are deprecated, use a comma (,) instead.");var u=/\s*,\s*|\s+/,s=-1!==l?[i.slice(0,l).concat([i[l].split(u)[0]]),[i[l].split(u)[1]].concat(i.slice(l+1))]:[i];return(s=s.map(function(e,r){var o=(1===r?!a:a)?"height":"width",i=!1;return e.reduce(function(e,t){return""===e[e.length-1]&&-1!==["+","-"].indexOf(t)?(e[e.length-1]=t,i=!0,e):i?(e[e.length-1]+=t,i=!1,e):e.concat(t)},[]).map(function(e){return function(e,t,n,r){var o=e.match(/((?:\-|\+)?\d*\.?\d*)(.*)/),a=+o[1],i=o[2];if(!a)return e;if(0===i.indexOf("%")){var l=void 0;switch(i){case"%p":l=n;break;case"%":case"%r":default:l=r}return E(l)[t]/100*a}if("vh"===i||"vw"===i)return("vh"===i?Math.max(document.documentElement.clientHeight,window.innerHeight||0):Math.max(document.documentElement.clientWidth,window.innerWidth||0))/100*a;return a}(e,o,t,n)})})).forEach(function(e,t){e.forEach(function(n,r){U(n)&&(o[t]+=n*("-"===e[r-1]?-1:1))})}),o}var Y={placement:"bottom",positionFixed:!1,eventsEnabled:!0,removeOnDestroy:!1,onCreate:function(){},onUpdate:function(){},modifiers:{shift:{order:100,enabled:!0,fn:function(e){var t=e.placement,n=t.split("-")[0],r=t.split("-")[1];if(r){var o=e.offsets,a=o.reference,i=o.popper,l=-1!==["bottom","top"].indexOf(n),u=l?"left":"top",s=l?"width":"height",c={start:k({},u,a[u]),end:k({},u,a[u]+a[s]-i[s])};e.offsets.popper=P({},i,c[r])}return e}},offset:{order:200,enabled:!0,fn:function(e,t){var n=t.offset,r=e.placement,o=e.offsets,a=o.popper,i=o.reference,l=r.split("-")[0],u=void 0;return u=U(+n)?[+n,0]:X(n,a,i,l),"left"===l?(a.top+=u[0],a.left-=u[1]):"right"===l?(a.top+=u[0],a.left+=u[1]):"top"===l?(a.left+=u[0],a.top-=u[1]):"bottom"===l&&(a.left+=u[0],a.top+=u[1]),e.popper=a,e},offset:0},preventOverflow:{order:300,enabled:!0,fn:function(e,t){var n=t.boundariesElement||h(e.instance.popper);e.instance.reference===n&&(n=h(n));var r=F("transform"),o=e.instance.popper.style,a=o.top,i=o.left,l=o[r];o.top="",o.left="",o[r]="";var u=T(e.instance.popper,e.instance.reference,t.padding,n,e.positionFixed);o.top=a,o.left=i,o[r]=l,t.boundaries=u;var s=t.priority,c=e.offsets.popper,d={primary:function(e){var n=c[e];return c[e]<u[e]&&!t.escapeWithReference&&(n=Math.max(c[e],u[e])),k({},e,n)},secondary:function(e){var n="right"===e?"left":"top",r=c[n];return c[e]>u[e]&&!t.escapeWithReference&&(r=Math.min(c[n],u[e]-("right"===e?c.width:c.height))),k({},n,r)}};return s.forEach(function(e){var t=-1!==["left","top"].indexOf(e)?"primary":"secondary";c=P({},c,d[t](e))}),e.offsets.popper=c,e},priority:["left","right","top","bottom"],padding:5,boundariesElement:"scrollParent"},keepTogether:{order:400,enabled:!0,fn:function(e){var t=e.offsets,n=t.popper,r=t.reference,o=e.placement.split("-")[0],a=Math.floor,i=-1!==["top","bottom"].indexOf(o),l=i?"right":"bottom",u=i?"left":"top",s=i?"width":"height";return n[l]<a(r[u])&&(e.offsets.popper[u]=a(r[u])-n[s]),n[u]>a(r[l])&&(e.offsets.popper[u]=a(r[l])),e}},arrow:{order:500,enabled:!0,fn:function(e,t){var n;if(!V(e.instance.modifiers,"arrow","keepTogether"))return e;var r=t.element;if("string"==typeof r){if(!(r=e.instance.popper.querySelector(r)))return e}else if(!e.instance.popper.contains(r))return console.warn("WARNING: `arrow.element` must be child of its popper element!"),e;var o=e.placement.split("-")[0],a=e.offsets,i=a.popper,l=a.reference,s=-1!==["left","right"].indexOf(o),c=s?"height":"width",d=s?"Top":"Left",f=d.toLowerCase(),p=s?"left":"top",h=s?"bottom":"right",m=N(r)[c];l[h]-m<i[f]&&(e.offsets.popper[f]-=i[f]-(l[h]-m)),l[f]+m>i[h]&&(e.offsets.popper[f]+=l[f]+m-i[h]),e.offsets.popper=E(e.offsets.popper);var v=l[f]+l[c]/2-m/2,y=u(e.instance.popper),g=parseFloat(y["margin"+d],10),b=parseFloat(y["border"+d+"Width"],10),x=v-e.offsets.popper[f]-g-b;return x=Math.max(Math.min(i[c]-m,x),0),e.arrowElement=r,e.offsets.arrow=(k(n={},f,Math.round(x)),k(n,p,""),n),e},element:"[x-arrow]"},flip:{order:600,enabled:!0,fn:function(e,t){if(I(e.instance.modifiers,"inner"))return e;if(e.flipped&&e.placement===e.originalPlacement)return e;var n=T(e.instance.popper,e.instance.reference,t.padding,t.boundariesElement,e.positionFixed),r=e.placement.split("-")[0],o=L(r),a=e.placement.split("-")[1]||"",i=[];switch(t.behavior){case G.FLIP:i=[r,o];break;case G.CLOCKWISE:i=K(r);break;case G.COUNTERCLOCKWISE:i=K(r,!0);break;default:i=t.behavior}return i.forEach(function(l,u){if(r!==l||i.length===u+1)return e;r=e.placement.split("-")[0],o=L(r);var s=e.offsets.popper,c=e.offsets.reference,d=Math.floor,f="left"===r&&d(s.right)>d(c.left)||"right"===r&&d(s.left)<d(c.right)||"top"===r&&d(s.bottom)>d(c.top)||"bottom"===r&&d(s.top)<d(c.bottom),p=d(s.left)<d(n.left),h=d(s.right)>d(n.right),m=d(s.top)<d(n.top),v=d(s.bottom)>d(n.bottom),y="left"===r&&p||"right"===r&&h||"top"===r&&m||"bottom"===r&&v,g=-1!==["top","bottom"].indexOf(r),b=!!t.flipVariations&&(g&&"start"===a&&p||g&&"end"===a&&h||!g&&"start"===a&&m||!g&&"end"===a&&v);(f||y||b)&&(e.flipped=!0,(f||y)&&(r=i[u+1]),b&&(a=function(e){return"end"===e?"start":"start"===e?"end":e}(a)),e.placement=r+(a?"-"+a:""),e.offsets.popper=P({},e.offsets.popper,R(e.instance.popper,e.offsets.reference,e.placement)),e=A(e.instance.modifiers,e,"flip"))}),e},behavior:"flip",padding:5,boundariesElement:"viewport"},inner:{order:700,enabled:!1,fn:function(e){var t=e.placement,n=t.split("-")[0],r=e.offsets,o=r.popper,a=r.reference,i=-1!==["left","right"].indexOf(n),l=-1===["top","left"].indexOf(n);return o[i?"left":"top"]=a[n]-(l?o[i?"width":"height"]:0),e.placement=L(t),e.offsets.popper=E(o),e}},hide:{order:800,enabled:!0,fn:function(e){if(!V(e.instance.modifiers,"hide","preventOverflow"))return e;var t=e.offsets.reference,n=D(e.instance.modifiers,function(e){return"preventOverflow"===e.name}).boundaries;if(t.bottom<n.top||t.left>n.right||t.top>n.bottom||t.right<n.left){if(!0===e.hide)return e;e.hide=!0,e.attributes["x-out-of-boundaries"]=""}else{if(!1===e.hide)return e;e.hide=!1,e.attributes["x-out-of-boundaries"]=!1}return e}},computeStyle:{order:850,enabled:!0,fn:function(e,t){var n=t.x,r=t.y,o=e.offsets.popper,a=D(e.instance.modifiers,function(e){return"applyStyle"===e.name}).gpuAcceleration;void 0!==a&&console.warn("WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!");var i=void 0!==a?a:t.gpuAcceleration,l=O(h(e.instance.popper)),u={position:o.position},s={left:Math.floor(o.left),top:Math.round(o.top),bottom:Math.round(o.bottom),right:Math.floor(o.right)},c="bottom"===n?"top":"bottom",d="right"===r?"left":"right",f=F("transform"),p=void 0,m=void 0;if(m="bottom"===c?-l.height+s.bottom:s.top,p="right"===d?-l.width+s.right:s.left,i&&f)u[f]="translate3d("+p+"px, "+m+"px, 0)",u[c]=0,u[d]=0,u.willChange="transform";else{var v="bottom"===c?-1:1,y="right"===d?-1:1;u[c]=m*v,u[d]=p*y,u.willChange=c+", "+d}var g={"x-placement":e.placement};return e.attributes=P({},g,e.attributes),e.styles=P({},u,e.styles),e.arrowStyles=P({},e.offsets.arrow,e.arrowStyles),e},gpuAcceleration:!0,x:"bottom",y:"right"},applyStyle:{order:900,enabled:!0,fn:function(e){var t,n;return H(e.instance.popper,e.styles),t=e.instance.popper,n=e.attributes,Object.keys(n).forEach(function(e){!1!==n[e]?t.setAttribute(e,n[e]):t.removeAttribute(e)}),e.arrowElement&&Object.keys(e.arrowStyles).length&&H(e.arrowElement,e.arrowStyles),e},onLoad:function(e,t,n,r,o){var a=j(o,t,e,n.positionFixed),i=M(n.placement,a,t,e,n.modifiers.flip.boundariesElement,n.modifiers.flip.padding);return t.setAttribute("x-placement",i),H(t,{position:n.positionFixed?"fixed":"absolute"}),n},gpuAcceleration:void 0}}},Q=function(){function e(t,n){var r=this,o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};w(this,e),this.scheduleUpdate=function(){return requestAnimationFrame(r.update)},this.update=i(this.update.bind(this)),this.options=P({},e.Defaults,o),this.state={isDestroyed:!1,isCreated:!1,scrollParents:[]},this.reference=t&&t.jquery?t[0]:t,this.popper=n&&n.jquery?n[0]:n,this.options.modifiers={},Object.keys(P({},e.Defaults.modifiers,o.modifiers)).forEach(function(t){r.options.modifiers[t]=P({},e.Defaults.modifiers[t]||{},o.modifiers?o.modifiers[t]:{})}),this.modifiers=Object.keys(this.options.modifiers).map(function(e){return P({name:e},r.options.modifiers[e])}).sort(function(e,t){return e.order-t.order}),this.modifiers.forEach(function(e){e.enabled&&l(e.onLoad)&&e.onLoad(r.reference,r.popper,r.options,e,r.state)}),this.update();var a=this.options.eventsEnabled;a&&this.enableEventListeners(),this.state.eventsEnabled=a}return _(e,[{key:"update",value:function(){return function(){if(!this.state.isDestroyed){var e={instance:this,styles:{},arrowStyles:{},attributes:{},flipped:!1,offsets:{}};e.offsets.reference=j(this.state,this.popper,this.reference,this.options.positionFixed),e.placement=M(this.options.placement,e.offsets.reference,this.popper,this.reference,this.options.modifiers.flip.boundariesElement,this.options.modifiers.flip.padding),e.originalPlacement=e.placement,e.positionFixed=this.options.positionFixed,e.offsets.popper=R(this.popper,e.offsets.reference,e.placement),e.offsets.popper.position=this.options.positionFixed?"fixed":"absolute",e=A(this.modifiers,e),this.state.isCreated?this.options.onUpdate(e):(this.state.isCreated=!0,this.options.onCreate(e))}}.call(this)}},{key:"destroy",value:function(){return function(){return this.state.isDestroyed=!0,I(this.modifiers,"applyStyle")&&(this.popper.removeAttribute("x-placement"),this.popper.style.position="",this.popper.style.top="",this.popper.style.left="",this.popper.style.right="",this.popper.style.bottom="",this.popper.style.willChange="",this.popper.style[F("transform")]=""),this.disableEventListeners(),this.options.removeOnDestroy&&this.popper.parentNode.removeChild(this.popper),this}.call(this)}},{key:"enableEventListeners",value:function(){return function(){this.state.eventsEnabled||(this.state=W(this.reference,this.options,this.state,this.scheduleUpdate))}.call(this)}},{key:"disableEventListeners",value:function(){return B.call(this)}}]),e}();Q.Utils=("undefined"!=typeof window?window:e).PopperUtils,Q.placements=$,Q.Defaults=Y,t.a=Q}).call(this,n(37))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;t.default={RESISTANCE_COEF:.6,UNCERTAINTY_THRESHOLD:3}},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(2)),a=(0,r(n(27)).default)(o.default.createElement("g",null,o.default.createElement("path",{d:"M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"})),"Search");t.default=a},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(265))},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(266))},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(278))},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(279))},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(2)),a=r(n(19)),i=r(n(16)),l=o.default.createElement("path",{d:"M8.59 16.34l4.58-4.59-4.58-4.59L10 5.75l6 6-6 6z"}),u=function(e){return o.default.createElement(i.default,e,l)};(u=(0,a.default)(u)).muiName="SvgIcon";var s=u;t.default=s},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(2)),a=r(n(19)),i=r(n(16)),l=o.default.createElement("path",{d:"M15.41 16.09l-4.58-4.59 4.58-4.59L14 5.5l-6 6 6 6z"}),u=function(e){return o.default.createElement(i.default,e,l)};(u=(0,a.default)(u)).muiName="SvgIcon";var s=u;t.default=s},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(282))},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(283))},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(284))},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(286))},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(287))},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(288))},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(290))},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(291))},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(292))},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(299))},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(300))},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(302))},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(305))},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(308))},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(2)),a=r(n(19)),i=r(n(16)),l=o.default.createElement("path",{d:"M7 10l5 5 5-5z"}),u=function(e){return o.default.createElement(i.default,e,l)};(u=(0,a.default)(u)).muiName="SvgIcon";var s=u;t.default=s},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(4)),a=r(n(7)),i=r(n(3)),l=r(n(2)),u=(r(n(1)),r(n(6)));function s(e){var t=e.children,n=e.classes,r=e.className,s=e.disabled,c=e.IconComponent,d=e.inputRef,f=e.name,p=e.onChange,h=e.value,m=(0,i.default)(e,["children","classes","className","disabled","IconComponent","inputRef","name","onChange","value"]);return l.default.createElement("div",{className:n.root},l.default.createElement("select",(0,o.default)({className:(0,u.default)(n.select,(0,a.default)({},n.disabled,s),r),name:f,disabled:s,onChange:p,value:h,ref:d},m),t),l.default.createElement(c,{className:n.icon}))}s.propTypes={};var c=s;t.default=c},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.styles=void 0;var o=r(n(12)),a=r(n(3)),i=r(n(2)),l=(r(n(1)),r(n(163))),u=r(n(5)),s=r(n(162)),c=r(n(33)),d=function(e){return{root:{position:"relative",width:"100%"},select:{"-moz-appearance":"none","-webkit-appearance":"none",userSelect:"none",paddingRight:4*e.spacing.unit,width:"calc(100% - ".concat(4*e.spacing.unit,"px)"),minWidth:2*e.spacing.unit,cursor:"pointer","&:focus":{background:"light"===e.palette.type?"rgba(0, 0, 0, 0.05)":"rgba(255, 255, 255, 0.05)",borderRadius:0},"&:-moz-focusring":{color:"transparent",textShadow:"0 0 0 #000"},"&::-ms-expand":{display:"none"},"&$disabled":{cursor:"default"}},selectMenu:{width:"auto",textOverflow:"ellipsis",whiteSpace:"nowrap",overflow:"hidden",minHeight:"1.1875em"},disabled:{},icon:{position:"absolute",right:0,top:"calc(50% - 12px)",color:e.palette.action.active,"pointer-events":"none"}}};function f(e){var t=e.children,n=e.classes,r=e.IconComponent,u=e.input,s=e.inputProps,c=(0,a.default)(e,["children","classes","IconComponent","input","inputProps"]);return i.default.cloneElement(u,(0,o.default)({inputComponent:l.default,inputProps:(0,o.default)({children:t,classes:n,IconComponent:r,type:void 0},s,u?u.props.inputProps:{})},c))}t.styles=d,f.propTypes={},f.defaultProps={IconComponent:s.default,input:i.default.createElement(c.default,null)},f.muiName="NativeSelect";var p=(0,u.default)(d,{name:"MuiNativeSelect"})(f);t.default=p},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(164))},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(309))},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.styles=void 0;var o=r(n(4)),a=r(n(12)),i=r(n(3)),l=r(n(9)),u=r(n(8)),s=r(n(11)),c=r(n(10)),d=r(n(2)),f=(r(n(1)),r(n(15))),p=r(n(188)),h=r(n(5)),m=r(n(96)),v=r(n(95)),y={vertical:"top",horizontal:"right"},g={vertical:"top",horizontal:"left"},b={paper:{maxHeight:"calc(100% - 96px)",WebkitOverflowScrolling:"touch"}};t.styles=b;var x=function(e){function t(){var e,n,r;(0,l.default)(this,t);for(var o=arguments.length,a=new Array(o),i=0;i<o;i++)a[i]=arguments[i];return(0,s.default)(r,(n=r=(0,s.default)(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(a))),r.getContentAnchorEl=function(){return r.menuList&&r.menuList.selectedItem?f.default.findDOMNode(r.menuList.selectedItem):f.default.findDOMNode(r.menuList).firstChild},r.menuList=void 0,r.focus=function(){if(r.menuList&&r.menuList.selectedItem)f.default.findDOMNode(r.menuList.selectedItem).focus();else{var e=f.default.findDOMNode(r.menuList);e&&e.firstChild&&e.firstChild.focus()}},r.handleEnter=function(e){var t=r.props.theme,n=f.default.findDOMNode(r.menuList);if(r.focus(),n&&e.clientHeight<n.clientHeight&&!n.style.width){var o="".concat((0,p.default)(),"px");n.style["rtl"===t.direction?"paddingLeft":"paddingRight"]=o,n.style.width="calc(100% + ".concat(o,")")}r.props.onEnter&&r.props.onEnter(e)},r.handleListKeyDown=function(e,t){"tab"===t&&(e.preventDefault(),r.props.onClose&&r.props.onClose(e))},n))}return(0,c.default)(t,e),(0,u.default)(t,[{key:"componentDidMount",value:function(){this.props.open&&this.focus()}},{key:"render",value:function(){var e=this,t=this.props,n=t.children,r=t.classes,l=t.MenuListProps,u=(t.onEnter,t.PaperProps),s=void 0===u?{}:u,c=t.PopoverClasses,f=t.theme,p=(0,i.default)(t,["children","classes","MenuListProps","onEnter","PaperProps","PopoverClasses","theme"]);return d.default.createElement(m.default,(0,o.default)({getContentAnchorEl:this.getContentAnchorEl,classes:c,onEnter:this.handleEnter,anchorOrigin:"rtl"===f.direction?y:g,transformOrigin:"rtl"===f.direction?y:g,PaperProps:(0,a.default)({},s,{classes:(0,a.default)({},s.classes,{root:r.paper})})},p),d.default.createElement(v.default,(0,o.default)({role:"menu",onKeyDown:this.handleListKeyDown},l,{ref:function(t){e.menuList=t}}),n))}}]),t}(d.default.Component);x.propTypes={},x.defaultProps={transitionDuration:"auto"};var w=(0,h.default)(b,{name:"MuiMenu",withTheme:!0})(x);t.default=w},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(167))},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(313))},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(314))},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(315))},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(316))},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(317))},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(323))},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(326))},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(328))},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(336))},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(339))},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(340))},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(341))},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(342))},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(107))},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(344))},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(345))},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(346))},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(347))},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(348))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){if((!i&&0!==i||e)&&a.default){var t=document.createElement("div");t.style.position="absolute",t.style.top="-9999px",t.style.width="50px",t.style.height="50px",t.style.overflow="scroll",document.body.appendChild(t),i=t.offsetWidth-t.clientWidth,document.body.removeChild(t)}return i};var r,o=n(48),a=(r=o)&&r.__esModule?r:{default:r};var i=void 0;e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.animationEnd=t.animationDelay=t.animationTiming=t.animationDuration=t.animationName=t.transitionEnd=t.transitionDuration=t.transitionDelay=t.transitionTiming=t.transitionProperty=t.transform=void 0;var r,o=n(48);var a="transform",i=void 0,l=void 0,u=void 0,s=void 0,c=void 0,d=void 0,f=void 0,p=void 0,h=void 0,m=void 0,v=void 0;if(((r=o)&&r.__esModule?r:{default:r}).default){var y=function(){for(var e=document.createElement("div").style,t={O:function(e){return"o"+e.toLowerCase()},Moz:function(e){return e.toLowerCase()},Webkit:function(e){return"webkit"+e},ms:function(e){return"MS"+e}},n=Object.keys(t),r=void 0,o=void 0,a="",i=0;i<n.length;i++){var l=n[i];if(l+"TransitionProperty"in e){a="-"+l.toLowerCase(),r=t[l]("TransitionEnd"),o=t[l]("AnimationEnd");break}}!r&&"transitionProperty"in e&&(r="transitionend");!o&&"animationName"in e&&(o="animationend");return e=null,{animationEnd:o,transitionEnd:r,prefix:a}}();i=y.prefix,t.transitionEnd=l=y.transitionEnd,t.animationEnd=u=y.animationEnd,t.transform=a=i+"-"+a,t.transitionProperty=s=i+"-transition-property",t.transitionDuration=c=i+"-transition-duration",t.transitionDelay=f=i+"-transition-delay",t.transitionTiming=d=i+"-transition-timing-function",t.animationName=p=i+"-animation-name",t.animationDuration=h=i+"-animation-duration",t.animationTiming=m=i+"-animation-delay",t.animationDelay=v=i+"-animation-timing-function"}t.transform=a,t.transitionProperty=s,t.transitionTiming=d,t.transitionDelay=f,t.transitionDuration=c,t.transitionEnd=l,t.animationName=p,t.animationDuration=h,t.animationTiming=m,t.animationDelay=v,t.animationEnd=u,t.default={transform:a,end:l,property:s,timing:d,delay:f,duration:c}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return(0,a.default)(e.replace(i,"ms-"))};var r,o=n(357),a=(r=o)&&r.__esModule?r:{default:r};var i=/^-ms-/;e.exports=t.default},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(9)),a=r(n(8)),i=r(n(358)),l=r(n(22)),u=r(n(188)),s=r(n(351)),c=n(349);function d(e){return parseInt((0,i.default)(e,"paddingRight")||0,10)}var f=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};(0,o.default)(this,e);var n=t.hideSiblingNodes,r=void 0===n||n,a=t.handleContainerOverflow,i=void 0===a||a;this.hideSiblingNodes=r,this.handleContainerOverflow=i,this.modals=[],this.containers=[],this.data=[]}return(0,a.default)(e,[{key:"add",value:function(e,t){var n=this.modals.indexOf(e);if(-1!==n)return n;n=this.modals.length,this.modals.push(e),this.hideSiblingNodes&&(0,c.hideSiblings)(t,e.mountNode);var r=this.containers.indexOf(t);if(-1!==r)return this.data[r].modals.push(e),n;var o={modals:[e],overflowing:(0,s.default)(t),prevPaddings:[]};return this.handleContainerOverflow&&function(e,t){var n={overflow:"hidden"};if(e.style={overflow:t.style.overflow,paddingRight:t.style.paddingRight},e.overflowing){var r=(0,u.default)();n.paddingRight="".concat(d(t)+r,"px");for(var o=(0,l.default)(t).querySelectorAll(".mui-fixed"),a=0;a<o.length;a+=1){var i=d(o[a]);e.prevPaddings.push(i),o[a].style.paddingRight="".concat(i+r,"px")}}Object.keys(n).forEach(function(e){t.style[e]=n[e]})}(o,t),this.containers.push(t),this.data.push(o),n}},{key:"remove",value:function(e){var t=this.modals.indexOf(e);if(-1===t)return t;var n=function(e,t){var n=-1;return e.some(function(e,r){return!!t(e)&&(n=r,!0)}),n}(this.data,function(t){return-1!==t.modals.indexOf(e)}),r=this.data[n],o=this.containers[n];return r.modals.splice(r.modals.indexOf(e),1),this.modals.splice(t,1),0===r.modals.length?(this.handleContainerOverflow&&function(e,t){Object.keys(e.style).forEach(function(n){t.style[n]=e.style[n]});for(var n=(0,l.default)(t).querySelectorAll(".mui-fixed"),r=0;r<n.length;r+=1)n[r].style.paddingRight="".concat(e.prevPaddings[r],"px")}(r,o),this.hideSiblingNodes&&(0,c.showSiblings)(o,e.mountNode),this.containers.splice(n,1),this.data.splice(n,1)):this.hideSiblingNodes&&(0,c.ariaHidden)(!1,r.modals[r.modals.length-1].mountNode),t}},{key:"isTopModal",value:function(e){return!!this.modals.length&&this.modals[this.modals.length-1]===e}}]),e}();t.default=f},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(360))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:(0,a.default)();try{return e.activeElement}catch(e){}};var r,o=n(22),a=(r=o)&&r.__esModule?r:{default:r};e.exports=t.default},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(362))},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(363))},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(368))},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(372))},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(373))},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(374))},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(376))},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(378))},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(379))},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(380))},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.styles=void 0;var o=r(n(4)),a=r(n(7)),i=r(n(3)),l=r(n(2)),u=(r(n(1)),r(n(6))),s=r(n(5)),c=function(e){return{root:{position:"relative",display:"flex",alignItems:"center",justifyContent:"center",flexShrink:0,width:5*e.spacing.unit,height:5*e.spacing.unit,fontFamily:e.typography.fontFamily,fontSize:e.typography.pxToRem(20),borderRadius:"50%",overflow:"hidden",userSelect:"none"},colorDefault:{color:e.palette.background.default,backgroundColor:"light"===e.palette.type?e.palette.grey[400]:e.palette.grey[600]},img:{width:"100%",height:"100%",textAlign:"center",objectFit:"cover"}}};function d(e){var t=e.alt,n=e.children,r=e.childrenClassName,s=e.classes,c=e.className,d=e.component,f=e.imgProps,p=e.sizes,h=e.src,m=e.srcSet,v=(0,i.default)(e,["alt","children","childrenClassName","classes","className","component","imgProps","sizes","src","srcSet"]),y=(0,u.default)(s.root,(0,a.default)({},s.colorDefault,n&&!h&&!m),c),g=null;if(n)if(r&&"string"!=typeof n&&l.default.isValidElement(n)){var b=(0,u.default)(r,n.props.className);g=l.default.cloneElement(n,{className:b})}else g=n;else(h||m)&&(g=l.default.createElement("img",(0,o.default)({alt:t,src:h,srcSet:m,sizes:p,className:s.img},f)));return l.default.createElement(d,(0,o.default)({className:y},v),g)}t.styles=c,d.propTypes={},d.defaultProps={component:"div"};var f=(0,s.default)(c,{name:"MuiAvatar"})(d);t.default=f},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r={50:"#e8f5e9",100:"#c8e6c9",200:"#a5d6a7",300:"#81c784",400:"#66bb6a",500:"#4caf50",600:"#43a047",700:"#388e3c",800:"#2e7d32",900:"#1b5e20",A100:"#b9f6ca",A200:"#69f0ae",A400:"#00e676",A700:"#00c853"};t.default=r},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"common",{enumerable:!0,get:function(){return o.default}}),Object.defineProperty(t,"red",{enumerable:!0,get:function(){return a.default}}),Object.defineProperty(t,"pink",{enumerable:!0,get:function(){return i.default}}),Object.defineProperty(t,"purple",{enumerable:!0,get:function(){return l.default}}),Object.defineProperty(t,"deepPurple",{enumerable:!0,get:function(){return u.default}}),Object.defineProperty(t,"indigo",{enumerable:!0,get:function(){return s.default}}),Object.defineProperty(t,"blue",{enumerable:!0,get:function(){return c.default}}),Object.defineProperty(t,"lightBlue",{enumerable:!0,get:function(){return d.default}}),Object.defineProperty(t,"cyan",{enumerable:!0,get:function(){return f.default}}),Object.defineProperty(t,"teal",{enumerable:!0,get:function(){return p.default}}),Object.defineProperty(t,"green",{enumerable:!0,get:function(){return h.default}}),Object.defineProperty(t,"lightGreen",{enumerable:!0,get:function(){return m.default}}),Object.defineProperty(t,"lime",{enumerable:!0,get:function(){return v.default}}),Object.defineProperty(t,"yellow",{enumerable:!0,get:function(){return y.default}}),Object.defineProperty(t,"amber",{enumerable:!0,get:function(){return g.default}}),Object.defineProperty(t,"orange",{enumerable:!0,get:function(){return b.default}}),Object.defineProperty(t,"deepOrange",{enumerable:!0,get:function(){return x.default}}),Object.defineProperty(t,"brown",{enumerable:!0,get:function(){return w.default}}),Object.defineProperty(t,"grey",{enumerable:!0,get:function(){return _.default}}),Object.defineProperty(t,"blueGrey",{enumerable:!0,get:function(){return k.default}});var o=r(n(133)),a=r(n(228)),i=r(n(230)),l=r(n(396)),u=r(n(395)),s=r(n(231)),c=r(n(394)),d=r(n(393)),f=r(n(392)),p=r(n(391)),h=r(n(205)),m=r(n(390)),v=r(n(389)),y=r(n(388)),g=r(n(387)),b=r(n(386)),x=r(n(385)),w=r(n(384)),_=r(n(229)),k=r(n(383))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=n(401),a=(r=o)&&r.__esModule?r:{default:r};t.default=function(e){return(0,a.default)("displayName",e)}},function(e,t,n){var r=n(116),o=n(70),a=n(41),i=n(126),l=n(36),u=n(215),s=Object.getOwnPropertyDescriptor;t.f=n(42)?s:function(e,t){if(e=a(e),t=i(t,!0),u)try{return s(e,t)}catch(e){}if(l(e,t))return o(!r.f.call(e,t),e[t])}},function(e,t,n){var r=n(212),o=n(120).concat("length","prototype");t.f=Object.getOwnPropertyNames||function(e){return r(e,o)}},function(e,t){t.f=Object.getOwnPropertySymbols},function(e,t){var n={}.toString;e.exports=function(e){return n.call(e).slice(8,-1)}},function(e,t,n){var r=n(36),o=n(41),a=n(429)(!1),i=n(122)("IE_PROTO");e.exports=function(e,t){var n,l=o(e),u=0,s=[];for(n in l)n!=i&&r(l,n)&&s.push(n);for(;t.length>u;)r(l,n=t[u++])&&(~a(s,n)||s.push(n));return s}},function(e,t,n){e.exports=n(45)},function(e,t,n){var r=n(43),o=n(26).document,a=r(o)&&r(o.createElement);e.exports=function(e){return a?o.createElement(e):{}}},function(e,t,n){e.exports=!n(42)&&!n(71)(function(){return 7!=Object.defineProperty(n(214)("div"),"a",{get:function(){return 7}}).a})},function(e,t,n){var r=n(433);e.exports=function(e,t,n){if(r(e),void 0===t)return e;switch(n){case 1:return function(n){return e.call(t,n)};case 2:return function(n,r){return e.call(t,n,r)};case 3:return function(n,r,o){return e.call(t,n,r,o)}}return function(){return e.apply(t,arguments)}}},function(e,t,n){"use strict";var r=n(73),o=n(72),a=n(213),i=n(45),l=n(125),u=n(432),s=n(119),c=n(425),d=n(40)("iterator"),f=!([].keys&&"next"in[].keys()),p=function(){return this};e.exports=function(e,t,n,h,m,v,y){u(n,t,h);var g,b,x,w=function(e){if(!f&&e in E)return E[e];switch(e){case"keys":case"values":return function(){return new n(this,e)}}return function(){return new n(this,e)}},_=t+" Iterator",k="values"==m,P=!1,E=e.prototype,O=E[d]||E["@@iterator"]||m&&E[m],C=O||w(m),S=m?k?w("entries"):C:void 0,T="Array"==t&&E.entries||O;if(T&&(x=c(T.call(new e)))!==Object.prototype&&x.next&&(s(x,_,!0),r||"function"==typeof x[d]||i(x,d,p)),k&&O&&"values"!==O.name&&(P=!0,C=function(){return O.call(this)}),r&&!y||!f&&!P&&E[d]||i(E,d,C),l[t]=C,l[_]=p,m)if(g={values:k?C:w("values"),keys:v?C:w("keys"),entries:S},y)for(b in g)b in E||a(E,b,g[b]);else o(o.P+o.F*(f||P),t,g);return g}},function(e,t,n){"use strict";t.__esModule=!0;var r=i(n(437)),o=i(n(419)),a="function"==typeof o.default&&"symbol"==typeof r.default?function(e){return typeof e}:function(e){return e&&"function"==typeof o.default&&e.constructor===o.default&&e!==o.default.prototype?"symbol":typeof e};function i(e){return e&&e.__esModule?e:{default:e}}t.default="function"==typeof o.default&&"symbol"===a(r.default)?function(e){return void 0===e?"undefined":a(e)}:function(e){return e&&"function"==typeof o.default&&e.constructor===o.default&&e!==o.default.prototype?"symbol":void 0===e?"undefined":a(e)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.jss="64a55d578f856d258dc345b094a2a2b3",t.sheetsRegistry="d4bd0baacbc52bbd48bbb9eb24344ecd",t.managers="b768b78919504fba9de2c03545c5cd3a",t.sheetOptions="6fc570d6bd61383819d0f9e7407c452d"},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function(e){return"string"==typeof e?e:e?e.displayName||e.name||"Component":void 0}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=l(n(223)),i=l(n(55));function l(e){return e&&e.__esModule?e:{default:e}}var u=function(){function e(t,n){var o=this;for(var a in function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.update=function(e,t){return"string"==typeof e?o.rules.update(e,t):o.rules.update(e),o},this.attached=!1,this.deployed=!1,this.linked=!1,this.classes={},this.options=r({},n,{sheet:this,parent:this,classes:this.classes}),this.renderer=new n.Renderer(this),this.rules=new i.default(this.options),t)this.rules.add(a,t[a]);this.rules.process()}return o(e,[{key:"attach",value:function(){return this.attached?this:(this.deployed||this.deploy(),this.renderer.attach(),!this.linked&&this.options.link&&this.link(),this.attached=!0,this)}},{key:"detach",value:function(){return this.attached?(this.renderer.detach(),this.attached=!1,this):this}},{key:"addRule",value:function(e,t,n){var r=this.queue;this.attached&&!r&&(this.queue=[]);var o=this.rules.add(e,t,n);return this.options.jss.plugins.onProcessRule(o),this.attached?this.deployed?(r?r.push(o):(this.insertRule(o),this.queue&&(this.queue.forEach(this.insertRule,this),this.queue=void 0)),o):o:(this.deployed=!1,o)}},{key:"insertRule",value:function(e){var t=this.renderer.insertRule(e);t&&this.options.link&&(0,a.default)(e,t)}},{key:"addRules",value:function(e,t){var n=[];for(var r in e)n.push(this.addRule(r,e[r],t));return n}},{key:"getRule",value:function(e){return this.rules.get(e)}},{key:"deleteRule",value:function(e){var t=this.rules.get(e);return!!t&&(this.rules.remove(t),!this.attached||!t.renderable||this.renderer.deleteRule(t.renderable))}},{key:"indexOf",value:function(e){return this.rules.indexOf(e)}},{key:"deploy",value:function(){return this.renderer.deploy(),this.deployed=!0,this}},{key:"link",value:function(){var e=this.renderer.getRules();return e&&this.rules.link(e),this.linked=!0,this}},{key:"toString",value:function(e){return this.rules.toString(e)}}]),e}();t.default=u},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=a(n(51)),o=(a(n(221)),a(n(491)));function a(e){return e&&e.__esModule?e:{default:e}}t.default=function(){var e=0;return function(t,n){(e+=1)>1e10&&(0,r.default)(!1,"[JSS] You might have a memory leak. Rule counter is at %s.",e);var a="c",i="";return n&&(a=n.options.classNamePrefix||"c",null!=n.options.jss.id&&(i+=n.options.jss.id)),""+a+o.default+i+e}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){e.renderable=t,e.rules&&t.cssRules&&e.rules.link(t.cssRules)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=n(494),a=(r=o)&&r.__esModule?r:{default:r};t.default=function(e){return e&&e[a.default]&&e===e[a.default]()}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();var o=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.registry=[]}return r(e,[{key:"add",value:function(e){var t=this.registry,n=e.options.index;if(-1===t.indexOf(e))if(0===t.length||n>=this.index)t.push(e);else for(var r=0;r<t.length;r++)if(t[r].options.index>n)return void t.splice(r,0,e)}},{key:"reset",value:function(){this.registry=[]}},{key:"remove",value:function(e){var t=this.registry.indexOf(e);this.registry.splice(t,1)}},{key:"toString",value:function(e){return this.registry.filter(function(e){return e.attached}).map(function(t){return t.toString(e)}).join("\n")}},{key:"index",get:function(){return 0===this.registry.length?0:this.registry[this.registry.length-1].options.index}}]),e}();t.default=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.create=t.createGenerateClassName=t.sheets=t.RuleList=t.SheetsManager=t.SheetsRegistry=t.toCssValue=t.getDynamicStyles=void 0;var r=n(497);Object.defineProperty(t,"getDynamicStyles",{enumerable:!0,get:function(){return d(r).default}});var o=n(81);Object.defineProperty(t,"toCssValue",{enumerable:!0,get:function(){return d(o).default}});var a=n(225);Object.defineProperty(t,"SheetsRegistry",{enumerable:!0,get:function(){return d(a).default}});var i=n(496);Object.defineProperty(t,"SheetsManager",{enumerable:!0,get:function(){return d(i).default}});var l=n(55);Object.defineProperty(t,"RuleList",{enumerable:!0,get:function(){return d(l).default}});var u=n(131);Object.defineProperty(t,"sheets",{enumerable:!0,get:function(){return d(u).default}});var s=n(222);Object.defineProperty(t,"createGenerateClassName",{enumerable:!0,get:function(){return d(s).default}});var c=d(n(490));function d(e){return e&&e.__esModule?e:{default:e}}var f=t.create=function(e){return new c.default(e)};t.default=f()},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(498)),a=r(n(478)),i=r(n(476)),l=r(n(474)),u=r(n(472)),s=r(n(467));var c=function(){return{plugins:[(0,o.default)(),(0,a.default)(),(0,i.default)(),(0,l.default)(),(0,u.default)(),(0,s.default)()]}};t.default=c},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r={50:"#ffebee",100:"#ffcdd2",200:"#ef9a9a",300:"#e57373",400:"#ef5350",500:"#f44336",600:"#e53935",700:"#d32f2f",800:"#c62828",900:"#b71c1c",A100:"#ff8a80",A200:"#ff5252",A400:"#ff1744",A700:"#d50000"};t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r={50:"#fafafa",100:"#f5f5f5",200:"#eeeeee",300:"#e0e0e0",400:"#bdbdbd",500:"#9e9e9e",600:"#757575",700:"#616161",800:"#424242",900:"#212121",A100:"#d5d5d5",A200:"#aaaaaa",A400:"#303030",A700:"#616161"};t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r={50:"#fce4ec",100:"#f8bbd0",200:"#f48fb1",300:"#f06292",400:"#ec407a",500:"#e91e63",600:"#d81b60",700:"#c2185b",800:"#ad1457",900:"#880e4f",A100:"#ff80ab",A200:"#ff4081",A400:"#f50057",A700:"#c51162"};t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r={50:"#e8eaf6",100:"#c5cae9",200:"#9fa8da",300:"#7986cb",400:"#5c6bc0",500:"#3f51b5",600:"#3949ab",700:"#303f9f",800:"#283593",900:"#1a237e",A100:"#8c9eff",A200:"#536dfe",A400:"#3d5afe",A700:"#304ffe"};t.default=r},function(e,t,n){"use strict";(function(e){var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=t.dangerouslyUseGlobalCSS,r=void 0!==n&&n,o=t.productionPrefix,a=void 0===o?"jss":o,i=/([[\].#*$><+~=|^:(),"'`\s])/g,l=0;"undefined"!=typeof window&&(e.__MUI_GENERATOR_COUNTER__+=1,e.__MUI_GENERATOR_COUNTER__>2&&console.error(["Material-UI: we have detected more than needed creation of the class name generator.","You should only use one class name generator on the client side.","If you do otherwise, you take the risk to have conflicting class names in production."].join("\n")));return function(e,t){if(l+=1,r){if(t&&t.options.classNamePrefix){var n=t.options.classNamePrefix;if((n=n.replace(i,"-")).match(/^Mui/))return"".concat(n,"-").concat(e.key);0}return"".concat(a).concat(l)}return"".concat(a).concat(l)}};r(n(14));e.__MUI_GENERATOR_COUNTER__=0}).call(this,n(37))},function(e,t,n){"use strict";var r=n(58),o=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=o(n(12)),i=o(n(7)),l=o(n(9)),u=o(n(8)),s=o(n(11)),c=o(n(10)),d=o(n(2)),f=o(n(1)),p=(o(n(14)),o(n(505))),h=r(n(135)),m=(o(n(57)),function(e){function t(e,n){var r;return(0,l.default)(this,t),(r=(0,s.default)(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,n))).broadcast=(0,p.default)(),r.unsubscribeId=null,r.outerTheme=null,r.outerTheme=h.default.initial(n),r.broadcast.setState(r.mergeOuterLocalTheme(r.props.theme)),r}return(0,c.default)(t,e),(0,u.default)(t,[{key:"getChildContext",value:function(){var e,t=this.props,n=t.sheetsManager,r=t.disableStylesGeneration,o=this.context.muiThemeProviderOptions||{};return void 0!==n&&(o.sheetsManager=n),void 0!==r&&(o.disableStylesGeneration=r),e={},(0,i.default)(e,h.CHANNEL,this.broadcast),(0,i.default)(e,"muiThemeProviderOptions",o),e}},{key:"componentDidMount",value:function(){var e=this;this.unsubscribeId=h.default.subscribe(this.context,function(t){e.outerTheme=t,e.broadcast.setState(e.mergeOuterLocalTheme(e.props.theme))})}},{key:"componentDidUpdate",value:function(e){this.props.theme!==e.theme&&this.broadcast.setState(this.mergeOuterLocalTheme(this.props.theme))}},{key:"componentWillUnmount",value:function(){null!==this.unsubscribeId&&h.default.unsubscribe(this.context,this.unsubscribeId)}},{key:"mergeOuterLocalTheme",value:function(e){return"function"==typeof e?e(this.outerTheme):this.outerTheme?(0,a.default)({},this.outerTheme,e):e}},{key:"render",value:function(){return this.props.children}}]),t}(d.default.Component));m.propTypes={},m.propTypes={},m.childContextTypes=(0,a.default)({},h.default.contextTypes,{muiThemeProviderOptions:f.default.object}),m.contextTypes=(0,a.default)({},h.default.contextTypes,{muiThemeProviderOptions:f.default.object});var v=m;t.default=v},function(e,t,n){var r,o,a;o=[t],void 0===(a="function"==typeof(r=function(e){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var t="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},n=(e.arePathsEqual=function(e,t){if(e===t)return!0;if(!Array.isArray(e)||!Array.isArray(t))return!1;if(e.length!==t.length)return!1;for(var r=0;r<e.length;++r)if(e[r]!==t[r]){if(!n(e[r])||!n(t[r]))return!1;if(t[r].lat!==e[r].lat||t[r].lng!==e[r].lng)return!1}return!0},function(e){return null!==e&&"object"===(void 0===e?"undefined":t(e))&&e.hasOwnProperty("lat")&&e.hasOwnProperty("lng")})})?r.apply(t,o):r)||(e.exports=a)},function(e,t,n){"use strict";var r=Object.prototype.hasOwnProperty;function o(e,t){return e===t?0!==e||0!==t||1/e==1/t:e!=e&&t!=t}e.exports=function(e,t){if(o(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),a=Object.keys(t);if(n.length!==a.length)return!1;for(var i=0;i<n.length;i++)if(!r.call(t,n[i])||!o(e[n[i]],t[n[i]]))return!1;return!0}},function(e,t,n){"use strict";function r(e){var t,n=e.Symbol;return"function"==typeof n?n.observable?t=n.observable:(t=n("observable"),n.observable=t):t="@@observable",t}n.d(t,"a",function(){return r})},function(e,t,n){"use strict";n.r(t);var r=n(2),o=n(1),a=n.n(o),i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();function l(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var u=function(e){function t(){var e,n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,a=Array(o),i=0;i<o;i++)a[i]=arguments[i];return n=r=l(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(a))),r._setTargetNode=function(e){r._targetNode=e},r._getTargetNode=function(){return r._targetNode},l(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,r["Component"]),i(t,[{key:"getChildContext",value:function(){return{popperManager:{setTargetNode:this._setTargetNode,getTargetNode:this._getTargetNode}}}},{key:"render",value:function(){var e=this.props,t=e.tag,n=e.children,o=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(e,["tag","children"]);return!1!==t?Object(r.createElement)(t,o,n):n}}]),t}();u.childContextTypes={popperManager:a.a.object.isRequired},u.propTypes={tag:a.a.oneOfType([a.a.string,a.a.bool]),children:a.a.oneOfType([a.a.node,a.a.func])},u.defaultProps={tag:"div"};var s=u,c=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};var d=function(e,t){var n=e.component,o=void 0===n?"div":n,a=e.innerRef,i=e.children,l=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(e,["component","innerRef","children"]),u=t.popperManager,s=function(e){u.setTargetNode(e),"function"==typeof a&&a(e)};if("function"==typeof i)return i({targetProps:{ref:s},restProps:l});var d=c({},l);return"string"==typeof o?d.ref=s:d.innerRef=s,Object(r.createElement)(o,d,i)};d.contextTypes={popperManager:a.a.object.isRequired},d.propTypes={component:a.a.oneOfType([a.a.node,a.a.func]),innerRef:a.a.func,children:a.a.oneOfType([a.a.node,a.a.func])};var f=d,p=n(139),h=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},m=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();function v(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var y=p.a.placements,g=function(e){function t(){var e,n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,a=Array(o),i=0;i<o;i++)a[i]=arguments[i];return n=r=v(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(a))),r.state={},r._setArrowNode=function(e){r._arrowNode=e},r._getTargetNode=function(){if(r.props.target)return r.props.target;if(!r.context.popperManager||!r.context.popperManager.getTargetNode())throw new Error("Target missing. Popper must be given a target from the Popper Manager, or as a prop.");return r.context.popperManager.getTargetNode()},r._getOffsets=function(e){return Object.keys(e.offsets).map(function(t){return e.offsets[t]})},r._isDataDirty=function(e){return!r.state.data||JSON.stringify(r._getOffsets(r.state.data))!==JSON.stringify(r._getOffsets(e))},r._updateStateModifier={enabled:!0,order:900,fn:function(e){return r._isDataDirty(e)&&r.setState({data:e}),e}},r._getPopperStyle=function(){var e=r.state.data;return r._popper&&e?h({position:e.offsets.popper.position},e.styles):{position:"absolute",pointerEvents:"none",opacity:0}},r._getPopperPlacement=function(){return r.state.data?r.state.data.placement:void 0},r._getPopperHide=function(){return r.state.data&&r.state.data.hide?"":void 0},r._getArrowStyle=function(){if(r.state.data&&r.state.data.offsets.arrow){var e=r.state.data.offsets.arrow;return{top:e.top,left:e.left}}return{}},r._handlePopperRef=function(e){r._popperNode=e,e?r._createPopper():r._destroyPopper(),r.props.innerRef&&r.props.innerRef(e)},r._scheduleUpdate=function(){r._popper&&r._popper.scheduleUpdate()},v(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,r["Component"]),m(t,[{key:"getChildContext",value:function(){return{popper:{setArrowNode:this._setArrowNode,getArrowStyle:this._getArrowStyle}}}},{key:"componentDidUpdate",value:function(e){e.placement===this.props.placement&&e.eventsEnabled===this.props.eventsEnabled&&e.target===this.props.target||(this._destroyPopper(),this._createPopper()),e.children!==this.props.children&&this._scheduleUpdate()}},{key:"componentWillUnmount",value:function(){this._destroyPopper()}},{key:"_createPopper",value:function(){var e=this,t=this.props,n=t.placement,r=t.eventsEnabled,o=t.positionFixed,a=h({},this.props.modifiers,{applyStyle:{enabled:!1},updateState:this._updateStateModifier});this._arrowNode&&(a.arrow=h({},this.props.modifiers.arrow||{},{element:this._arrowNode})),this._popper=new p.a(this._getTargetNode(),this._popperNode,{placement:n,positionFixed:o,eventsEnabled:r,modifiers:a}),setTimeout(function(){return e._scheduleUpdate()})}},{key:"_destroyPopper",value:function(){this._popper&&this._popper.destroy()}},{key:"render",value:function(){var e=this.props,t=e.component,n=(e.innerRef,e.placement,e.eventsEnabled,e.positionFixed,e.modifiers,e.children),o=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(e,["component","innerRef","placement","eventsEnabled","positionFixed","modifiers","children"]),a=this._getPopperStyle(),i=this._getPopperPlacement(),l=this._getPopperHide();if("function"==typeof n)return n({popperProps:{ref:this._handlePopperRef,style:a,"data-placement":i,"data-x-out-of-boundaries":l},restProps:o,scheduleUpdate:this._scheduleUpdate});var u=h({},o,{style:h({},o.style,a),"data-placement":i,"data-x-out-of-boundaries":l});return"string"==typeof t?u.ref=this._handlePopperRef:u.innerRef=this._handlePopperRef,Object(r.createElement)(t,u,n)}}]),t}();g.contextTypes={popperManager:a.a.object},g.childContextTypes={popper:a.a.object.isRequired},g.propTypes={component:a.a.oneOfType([a.a.node,a.a.func]),innerRef:a.a.func,placement:a.a.oneOf(y),eventsEnabled:a.a.bool,positionFixed:a.a.bool,modifiers:a.a.object,children:a.a.oneOfType([a.a.node,a.a.func]),target:a.a.oneOfType([a.a.instanceOf("undefined"!=typeof Element?Element:Object),a.a.shape({getBoundingClientRect:a.a.func.isRequired,clientWidth:a.a.number.isRequired,clientHeight:a.a.number.isRequired})])},g.defaultProps={component:"div",placement:"bottom",eventsEnabled:!0,positionFixed:!1,modifiers:{}};var b=g,x=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};var w=function(e,t){var n=e.component,o=void 0===n?"span":n,a=e.innerRef,i=e.children,l=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(e,["component","innerRef","children"]),u=t.popper,s=function(e){u.setArrowNode(e),"function"==typeof a&&a(e)},c=u.getArrowStyle();if("function"==typeof i)return i({arrowProps:{ref:s,style:c},restProps:l});var d=x({},l,{style:x({},c,l.style)});return"string"==typeof o?d.ref=s:d.innerRef=s,Object(r.createElement)(o,d,i)};w.contextTypes={popper:a.a.object.isRequired},w.propTypes={component:a.a.oneOfType([a.a.node,a.a.func]),innerRef:a.a.func,children:a.a.oneOfType([a.a.node,a.a.func])};var _=w;n.d(t,"Manager",function(){return s}),n.d(t,"Target",function(){return f}),n.d(t,"Popper",function(){return b}),n.d(t,"placements",function(){return y}),n.d(t,"Arrow",function(){return _})},function(e){e.exports={googleToken:"AIzaSyDUBeY_2Z6UnIFI7BisXGOJVDOwWzLr-PM",uberToken:"9rHOG5_ZpkK7PoByfQI75T4sx0Nqy23w_TOiHPPB",lyftToken:"t/G0s0TjgmbRD6gQ/76aQDd+EqRaw1RjZFIrqweDjtOvYS8BgOTQl3Q4zWbtMYa+YyZTy9AV1lRkl4YCo//8Sp+5Z+459ZY9VBp97nwVdO9JWnn270F4mlM="}},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(2)),a=(0,r(n(27)).default)(o.default.createElement("g",null,o.default.createElement("path",{d:"M7.41 15.41L12 10.83l4.59 4.58L18 14l-6-6-6 6z"})),"KeyboardArrowUp");t.default=a},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(2)),a=(0,r(n(27)).default)(o.default.createElement("g",null,o.default.createElement("path",{d:"M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34c-.39-.39-1.02-.39-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z"})),"ModeEdit");t.default=a},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(2)),a=(0,r(n(27)).default)(o.default.createElement("g",null,o.default.createElement("path",{d:"M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"})),"Add");t.default=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=function(e,t){var n=e%t;return n<0?n+t:n};t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=function(e,t){var n=!1;if(e.children.length&&t.children.length){var r=e.children[e.index],o=r?r.key:"empty";if(null!==o){var a=t.children[t.index];o===(a?a.key:"empty")&&(n=!0)}}return n};t.default=r},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){var t,n=e.children,r=e.startIndex,i=e.startX,l=e.pageX,u=e.viewLength,s=e.resistance,c=o.default.Children.count(n)-1,d=r+(i-l)/u;s?d<0?d=Math.exp(d*a.default.RESISTANCE_COEF)-1:d>c&&(d=c+1-Math.exp((c-d)*a.default.RESISTANCE_COEF)):d<0?t=((d=0)-r)*u+l:d>c&&(t=((d=c)-r)*u+l);return{index:d,startX:t}};var o=r(n(2)),a=r(n(140))},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(2)),a=(r(n(14)),function(e){e.index;var t=e.children;o.default.Children.count(t)});t.default=a},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"checkIndexBounds",{enumerable:!0,get:function(){return o.default}}),Object.defineProperty(t,"computeIndex",{enumerable:!0,get:function(){return a.default}}),Object.defineProperty(t,"constant",{enumerable:!0,get:function(){return i.default}}),Object.defineProperty(t,"getDisplaySameSlide",{enumerable:!0,get:function(){return l.default}}),Object.defineProperty(t,"mod",{enumerable:!0,get:function(){return u.default}});var o=r(n(245)),a=r(n(244)),i=r(n(140)),l=r(n(243)),u=r(n(242))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=n(48);var a=function(){};((r=o)&&r.__esModule?r:{default:r}).default&&(a=document.addEventListener?function(e,t,n,r){return e.removeEventListener(t,n,r||!1)}:document.attachEvent?function(e,t,n){return e.detachEvent("on"+t,n)}:void 0),t.default=a,e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=n(48);var a=function(){};((r=o)&&r.__esModule?r:{default:r}).default&&(a=document.addEventListener?function(e,t,n,r){return e.addEventListener(t,n,r||!1)}:document.attachEvent?function(e,t,n){return e.attachEvent("on"+t,function(t){(t=t||window.event).target=t.target||t.srcElement,t.currentTarget=e,n.call(e,t)})}:void 0),t.default=a,e.exports=t.default},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.getDomTreeShapes=P,t.findNativeHandler=O,t.default=void 0;var o=r(n(4)),a=r(n(3)),i=r(n(9)),l=r(n(8)),u=r(n(11)),s=r(n(10)),c=r(n(2)),d=r(n(1)),f=(r(n(14)),r(n(189))),p=r(n(248)),h=r(n(247)),m=n(246);function v(e,t,n,r){return(0,p.default)(e,t,n,r),{remove:function(){(0,h.default)(e,t,n,r)}}}var y=!1;var g={direction:"ltr",display:"flex",willChange:"transform"},b={width:"100%",WebkitFlexShrink:0,flexShrink:0,overflow:"auto"},x={root:{x:{overflowX:"hidden"},"x-reverse":{overflowX:"hidden"},y:{overflowY:"hidden"},"y-reverse":{overflowY:"hidden"}},flexDirection:{x:"row","x-reverse":"row-reverse",y:"column","y-reverse":"column-reverse"},transform:{x:function(e){return"translate(".concat(-e,"%, 0)")},"x-reverse":function(e){return"translate(".concat(e,"%, 0)")},y:function(e){return"translate(0, ".concat(-e,"%)")},"y-reverse":function(e){return"translate(0, ".concat(e,"%)")}},length:{x:"width","x-reverse":"width",y:"height","y-reverse":"height"},rotationMatrix:{x:{x:[1,0],y:[0,1]},"x-reverse":{x:[-1,0],y:[0,1]},y:{x:[0,1],y:[1,0]},"y-reverse":{x:[0,-1],y:[1,0]}},scrollPosition:{x:"scrollLeft","x-reverse":"scrollLeft",y:"scrollTop","y-reverse":"scrollTop"},scrollLength:{x:"scrollWidth","x-reverse":"scrollWidth",y:"scrollHeight","y-reverse":"scrollHeight"},clientLength:{x:"clientWidth","x-reverse":"clientWidth",y:"clientHeight","y-reverse":"clientHeight"}};function w(e,t){var n=t.duration,r=t.easeFunction,o=t.delay;return"".concat(e," ").concat(n," ").concat(r," ").concat(o)}function _(e,t){var n=x.rotationMatrix[t];return{pageX:n.x[0]*e.pageX+n.x[1]*e.pageY,pageY:n.y[0]*e.pageX+n.y[1]*e.pageY}}function k(e){return e.touches=[{pageX:e.pageX,pageY:e.pageY}],e}function P(e,t){for(var n=[];e&&e!==t&&!e.hasAttribute("data-swipeable");){var r=window.getComputedStyle(e);"absolute"===r.getPropertyValue("position")||"hidden"===r.getPropertyValue("overflow-x")?n=[]:(e.clientWidth>0&&e.scrollWidth>e.clientWidth||e.clientHeight>0&&e.scrollHeight>e.clientHeight)&&n.push({element:e,scrollWidth:e.scrollWidth,scrollHeight:e.scrollHeight,clientWidth:e.clientWidth,clientHeight:e.clientHeight,scrollLeft:e.scrollLeft,scrollTop:e.scrollTop}),e=e.parentNode}return n}var E=null;function O(e){var t=e.domTreeShapes,n=e.pageX,r=e.startX,o=e.axis;return t.some(function(e){var t=n>=r;"x"!==o&&"y"!==o||(t=!t);var a=e[x.scrollPosition[o]],i=a>0,l=a+e[x.clientLength[o]]<e[x.scrollLength[o]];return!!(t&&l||!t&&i)&&(E=e.element,!0)})}var C=function(e){function t(e,n){var r;return(0,i.default)(this,t),(r=(0,u.default)(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,n))).rootNode=null,r.containerNode=null,r.ignoreNextScrollEvents=!1,r.viewLength=0,r.startX=0,r.lastX=0,r.vx=0,r.startY=0,r.isSwiping=void 0,r.started=!1,r.startIndex=0,r.transitionListener=null,r.touchMoveListener=null,r.activeSlide=null,r.indexCurrent=null,r.handleSwipeStart=function(e){var t=r.props.axis;if(null!==r.rootNode){var n=_(e.touches[0],t);r.viewLength=r.rootNode.getBoundingClientRect()[x.length[t]],r.startX=n.pageX,r.lastX=n.pageX,r.vx=0,r.startY=n.pageY,r.isSwiping=void 0,r.started=!0;var o=window.getComputedStyle(r.containerNode),a=o.getPropertyValue("-webkit-transform")||o.getPropertyValue("transform");if(a&&"none"!==a){var i=a.split("(")[1].split(")")[0].split(","),l=window.getComputedStyle(r.rootNode),u=_({pageX:parseInt(i[4],10),pageY:parseInt(i[5],10)},t);r.startIndex=-u.pageX/(r.viewLength-parseInt(l.paddingLeft,10)-parseInt(l.paddingRight,10))||0}}},r.handleSwipeMove=function(e){if(r.started){if(null!==r.rootNode&&(null===E||E===r.rootNode)){var t=r.props,n=t.axis,o=t.children,a=t.ignoreNativeScroll,i=t.onSwitching,l=t.resistance,u=_(e.touches[0],n);if(void 0===r.isSwiping){var s=Math.abs(u.pageX-r.startX),d=Math.abs(u.pageY-r.startY),f=s>d&&s>m.constant.UNCERTAINTY_THRESHOLD;if(!l&&("y"===n||"y-reverse"===n)&&(0===r.indexCurrent&&r.startX<u.pageX||r.indexCurrent===c.default.Children.count(r.props.children)-1&&r.startX>u.pageX))return void(r.isSwiping=!1);if(s>d&&e.preventDefault(),!0===f||d>m.constant.UNCERTAINTY_THRESHOLD)return r.isSwiping=f,void(r.startX=u.pageX)}if(!0===r.isSwiping){e.preventDefault(),r.vx=.5*r.vx+.5*(u.pageX-r.lastX),r.lastX=u.pageX;var p=(0,m.computeIndex)({children:o,resistance:l,pageX:u.pageX,startIndex:r.startIndex,startX:r.startX,viewLength:r.viewLength}),h=p.index,v=p.startX;if(null===E&&!a)if(O({domTreeShapes:P(e.target,r.rootNode),startX:r.startX,pageX:u.pageX,axis:n}))return;v?r.startX=v:null===E&&(E=r.rootNode),r.setIndexCurrent(h);var y=function(){i&&i(h,"move")};!r.state.displaySameSlide&&r.state.isDragging||r.setState({displaySameSlide:!1,isDragging:!0},y),y()}}}else r.handleTouchStart(e)},r.handleSwipeEnd=function(){if(E=null,r.started&&(r.started=!1,!0===r.isSwiping)){var e,t=r.state.indexLatest,n=r.indexCurrent,o=t-n;e=Math.abs(r.vx)>r.props.threshold?r.vx>0?Math.floor(n):Math.ceil(n):Math.abs(o)>r.props.hysteresis?o>0?Math.floor(n):Math.ceil(n):t;var a=c.default.Children.count(r.props.children)-1;e<0?e=0:e>a&&(e=a),r.setIndexCurrent(e),r.setState({indexLatest:e,isDragging:!1},function(){r.props.onSwitching&&r.props.onSwitching(e,"end"),r.props.onChangeIndex&&e!==t&&r.props.onChangeIndex(e,t,{reason:"swipe"}),n===t&&r.handleTransitionEnd()})}},r.handleTouchStart=function(e){r.props.onTouchStart&&r.props.onTouchStart(e),r.handleSwipeStart(e)},r.handleTouchEnd=function(e){r.props.onTouchEnd&&r.props.onTouchEnd(e),r.handleSwipeEnd(e)},r.handleMouseDown=function(e){r.props.onMouseDown&&r.props.onMouseDown(e),e.persist(),r.handleSwipeStart(k(e))},r.handleMouseUp=function(e){r.props.onMouseUp&&r.props.onMouseUp(e),r.handleSwipeEnd(k(e))},r.handleMouseLeave=function(e){r.props.onMouseLeave&&r.props.onMouseLeave(e),r.started&&r.handleSwipeEnd(k(e))},r.handleMouseMove=function(e){r.props.onMouseMove&&r.props.onMouseMove(e),r.started&&r.handleSwipeMove(k(e))},r.handleScroll=function(e){if(r.props.onScroll&&r.props.onScroll(e),e.target===r.rootNode)if(r.ignoreNextScrollEvents)r.ignoreNextScrollEvents=!1;else{var t=r.state.indexLatest,n=Math.ceil(e.target.scrollLeft/e.target.clientWidth)+t;r.ignoreNextScrollEvents=!0,e.target.scrollLeft=0,r.props.onChangeIndex&&n!==t&&r.props.onChangeIndex(n,t,{reason:"focus"})}},r.updateHeight=function(){if(null!==r.activeSlide){var e=r.activeSlide.children[0];void 0!==e&&void 0!==e.offsetHeight&&r.state.heightLatest!==e.offsetHeight&&r.setState({heightLatest:e.offsetHeight})}},r.setIndexCurrent(r.props.index),r.state={indexLatest:r.props.index,isDragging:!1,isFirstRender:!0,heightLatest:0,displaySameSlide:!0},r}return(0,s.default)(t,e),(0,l.default)(t,[{key:"getChildContext",value:function(){var e=this;return{swipeableViews:{slideUpdateHeight:function(){e.updateHeight()}}}}},{key:"componentDidMount",value:function(){var e=this;this.transitionListener=v(this.containerNode,f.default.end,function(t){t.target===e.containerNode&&e.handleTransitionEnd()}),this.touchMoveListener=v(this.rootNode,"touchmove",function(t){e.props.disabled||e.handleSwipeMove(t)},{passive:!1}),this.setState({isFirstRender:!1}),function(){if(!y){var e=document.createElement("style");e.innerHTML="\n      .react-swipeable-view-container {\n        display: -webkit-box;\n        display: -ms-flexbox;\n      }\n      .react-swipeable-view-container > div {\n        -ms-flex-negative: 0;\n      }\n    ",document.body&&document.body.appendChild(e),y=!0}}(),this.props.action&&this.props.action({updateHeight:this.updateHeight})}},{key:"componentWillReceiveProps",value:function(e){var t=e.index;"number"==typeof t&&t!==this.props.index&&(this.setIndexCurrent(t),this.setState({displaySameSlide:(0,m.getDisplaySameSlide)(this.props,e),indexLatest:t}))}},{key:"componentWillUnmount",value:function(){this.transitionListener.remove(),this.touchMoveListener.remove()}},{key:"setIndexCurrent",value:function(e){if(this.props.animateTransitions||this.indexCurrent===e||this.handleTransitionEnd(),this.indexCurrent=e,this.containerNode){var t=this.props.axis,n=x.transform[t](100*e);this.containerNode.style.WebkitTransform=n,this.containerNode.style.transform=n}}},{key:"handleTransitionEnd",value:function(){this.props.onTransitionEnd&&(this.state.displaySameSlide||this.state.isDragging||this.props.onTransitionEnd())}},{key:"render",value:function(){var e,t,n=this,r=this.props,i=(r.action,r.animateHeight),l=r.animateTransitions,u=r.axis,s=r.children,d=r.containerStyle,f=r.disabled,p=r.disableLazyLoading,h=r.enableMouseEvents,m=(r.hysteresis,r.ignoreNativeScroll,r.index,r.onChangeIndex,r.onSwitching,r.onTransitionEnd,r.resistance,r.slideStyle),v=r.slideClassName,y=r.springConfig,_=r.style,k=(r.threshold,(0,a.default)(r,["action","animateHeight","animateTransitions","axis","children","containerStyle","disabled","disableLazyLoading","enableMouseEvents","hysteresis","ignoreNativeScroll","index","onChangeIndex","onSwitching","onTransitionEnd","resistance","slideStyle","slideClassName","springConfig","style","threshold"])),P=this.state,E=P.displaySameSlide,O=P.heightLatest,C=P.isDragging,S=P.isFirstRender,T=P.indexLatest,M=f?{}:{onTouchStart:this.handleTouchStart,onTouchEnd:this.handleTouchEnd},j=!f&&h?{onMouseDown:this.handleMouseDown,onMouseUp:this.handleMouseUp,onMouseLeave:this.handleMouseLeave,onMouseMove:this.handleMouseMove}:{},N=(0,o.default)({},b,m);if(C||!l||E)e="all 0s ease 0s",t="all 0s ease 0s";else if(e=w("transform",y),t=w("-webkit-transform",y),0!==O){var L=", ".concat(w("height",y));e+=L,t+=L}var R={height:null,WebkitFlexDirection:x.flexDirection[u],flexDirection:x.flexDirection[u],WebkitTransition:t,transition:e};if(p||!S){var D=x.transform[u](100*this.indexCurrent);R.WebkitTransform=D,R.transform=D}return i&&(R.height=O),c.default.createElement("div",(0,o.default)({ref:function(e){n.rootNode=e},style:(0,o.default)({},x.root[u],_)},k,M,j,{onScroll:this.handleScroll}),c.default.createElement("div",{ref:function(e){n.containerNode=e},style:(0,o.default)({},R,g,d),className:"react-swipeable-view-container"},c.default.Children.map(s,function(e,t){if(!p&&S&&t!==T)return null;var r,o=!0;return t===T&&(o=!1,i&&(r=function(e){n.activeSlide=e,n.updateHeight()},N.overflowY="hidden")),c.default.createElement("div",{ref:r,style:N,className:v,"aria-hidden":o,"data-swipeable":"true"},e)})))}}]),t}(c.default.Component);C.displayName="ReactSwipableView",C.propTypes={},C.defaultProps={animateHeight:!1,animateTransitions:!0,axis:"x",disabled:!1,disableLazyLoading:!1,enableMouseEvents:!1,hysteresis:.6,ignoreNativeScroll:!1,index:0,threshold:5,springConfig:{duration:"0.35s",easeFunction:"cubic-bezier(0.15, 0.3, 0.25, 1)",delay:"0s"},resistance:!1},C.childContextTypes={swipeableViews:d.default.shape({slideUpdateHeight:d.default.func})};var S=C;t.default=S},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(249)).default;t.default=o},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(2)),a=(0,r(n(27)).default)(o.default.createElement("g",null,o.default.createElement("path",{d:"M18.92 6.01C18.72 5.42 18.16 5 17.5 5h-11c-.66 0-1.21.42-1.42 1.01L3 12v8c0 .55.45 1 1 1h1c.55 0 1-.45 1-1v-1h12v1c0 .55.45 1 1 1h1c.55 0 1-.45 1-1v-8l-2.08-5.99zM6.5 16c-.83 0-1.5-.67-1.5-1.5S5.67 13 6.5 13s1.5.67 1.5 1.5S7.33 16 6.5 16zm11 0c-.83 0-1.5-.67-1.5-1.5s.67-1.5 1.5-1.5 1.5.67 1.5 1.5-.67 1.5-1.5 1.5zM5 11l1.5-4.5h11L19 11H5z"})),"DirectionsCar");t.default=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(2),a=i(o);i(n(15)),i(n(24));function i(e){return e&&e.__esModule?e:{default:e}}var l=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.Component),r(t,[{key:"render",value:function(){return a.default.createElement("div",null,"PlaceHolder")}}]),t}();t.default=l},function(e,t){t=e.exports=window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||function(e){var t=(new Date).getTime(),r=Math.max(0,16-(t-n)),o=setTimeout(e,r);return n=t,o};var n=(new Date).getTime();var r=window.cancelAnimationFrame||window.webkitCancelAnimationFrame||window.mozCancelAnimationFrame||window.clearTimeout;t.cancel=function(e){r.call(window,e)}},function(e,t){t.linear=function(e){return e},t.inQuad=function(e){return e*e},t.outQuad=function(e){return e*(2-e)},t.inOutQuad=function(e){return(e*=2)<1?.5*e*e:-.5*(--e*(e-2)-1)},t.inCube=function(e){return e*e*e},t.outCube=function(e){return--e*e*e+1},t.inOutCube=function(e){return(e*=2)<1?.5*e*e*e:.5*((e-=2)*e*e+2)},t.inQuart=function(e){return e*e*e*e},t.outQuart=function(e){return 1- --e*e*e*e},t.inOutQuart=function(e){return(e*=2)<1?.5*e*e*e*e:-.5*((e-=2)*e*e*e-2)},t.inQuint=function(e){return e*e*e*e*e},t.outQuint=function(e){return--e*e*e*e*e+1},t.inOutQuint=function(e){return(e*=2)<1?.5*e*e*e*e*e:.5*((e-=2)*e*e*e*e+2)},t.inSine=function(e){return 1-Math.cos(e*Math.PI/2)},t.outSine=function(e){return Math.sin(e*Math.PI/2)},t.inOutSine=function(e){return.5*(1-Math.cos(Math.PI*e))},t.inExpo=function(e){return 0==e?0:Math.pow(1024,e-1)},t.outExpo=function(e){return 1==e?e:1-Math.pow(2,-10*e)},t.inOutExpo=function(e){return 0==e?0:1==e?1:(e*=2)<1?.5*Math.pow(1024,e-1):.5*(2-Math.pow(2,-10*(e-1)))},t.inCirc=function(e){return 1-Math.sqrt(1-e*e)},t.outCirc=function(e){return Math.sqrt(1- --e*e)},t.inOutCirc=function(e){return(e*=2)<1?-.5*(Math.sqrt(1-e*e)-1):.5*(Math.sqrt(1-(e-=2)*e)+1)},t.inBack=function(e){var t=1.70158;return e*e*((t+1)*e-t)},t.outBack=function(e){var t=1.70158;return--e*e*((t+1)*e+t)+1},t.inOutBack=function(e){var t=2.5949095;return(e*=2)<1?e*e*((t+1)*e-t)*.5:.5*((e-=2)*e*((t+1)*e+t)+2)},t.inBounce=function(e){return 1-t.outBounce(1-e)},t.outBounce=function(e){return e<1/2.75?7.5625*e*e:e<2/2.75?7.5625*(e-=1.5/2.75)*e+.75:e<2.5/2.75?7.5625*(e-=2.25/2.75)*e+.9375:7.5625*(e-=2.625/2.75)*e+.984375},t.inOutBounce=function(e){return e<.5?.5*t.inBounce(2*e):.5*t.outBounce(2*e-1)+.5},t["in-quad"]=t.inQuad,t["out-quad"]=t.outQuad,t["in-out-quad"]=t.inOutQuad,t["in-cube"]=t.inCube,t["out-cube"]=t.outCube,t["in-out-cube"]=t.inOutCube,t["in-quart"]=t.inQuart,t["out-quart"]=t.outQuart,t["in-out-quart"]=t.inOutQuart,t["in-quint"]=t.inQuint,t["out-quint"]=t.outQuint,t["in-out-quint"]=t.inOutQuint,t["in-sine"]=t.inSine,t["out-sine"]=t.outSine,t["in-out-sine"]=t.inOutSine,t["in-expo"]=t.inExpo,t["out-expo"]=t.outExpo,t["in-out-expo"]=t.inOutExpo,t["in-circ"]=t.inCirc,t["out-circ"]=t.outCirc,t["in-out-circ"]=t.inOutCirc,t["in-back"]=t.inBack,t["out-back"]=t.outBack,t["in-out-back"]=t.inOutBack,t["in-bounce"]=t.inBounce,t["out-bounce"]=t.outBounce,t["in-out-bounce"]=t.inOutBounce},function(e,t,n){var r;try{r=n(85)}catch(e){r=n(85)}e.exports=function e(t){switch(r(t)){case"object":var n={};for(var o in t)t.hasOwnProperty(o)&&(n[o]=e(t[o]));return n;case"array":for(var n=new Array(t.length),a=0,i=t.length;a<i;a++)n[a]=e(t[a]);return n;case"regexp":var l="";return l+=t.multiline?"m":"",l+=t.global?"g":"",l+=t.ignoreCase?"i":"",new RegExp(t.source,l);case"date":return new Date(t.getTime());default:return t}}},function(e,t){function n(e){if(e)return function(e){for(var t in n.prototype)e[t]=n.prototype[t];return e}(e)}e.exports=n,n.prototype.on=n.prototype.addEventListener=function(e,t){return this._callbacks=this._callbacks||{},(this._callbacks["$"+e]=this._callbacks["$"+e]||[]).push(t),this},n.prototype.once=function(e,t){function n(){this.off(e,n),t.apply(this,arguments)}return n.fn=t,this.on(e,n),this},n.prototype.off=n.prototype.removeListener=n.prototype.removeAllListeners=n.prototype.removeEventListener=function(e,t){if(this._callbacks=this._callbacks||{},0==arguments.length)return this._callbacks={},this;var n,r=this._callbacks["$"+e];if(!r)return this;if(1==arguments.length)return delete this._callbacks["$"+e],this;for(var o=0;o<r.length;o++)if((n=r[o])===t||n.fn===t){r.splice(o,1);break}return this},n.prototype.emit=function(e){this._callbacks=this._callbacks||{};var t=[].slice.call(arguments,1),n=this._callbacks["$"+e];if(n)for(var r=0,o=(n=n.slice(0)).length;r<o;++r)n[r].apply(this,t);return this},n.prototype.listeners=function(e){return this._callbacks=this._callbacks||{},this._callbacks["$"+e]||[]},n.prototype.hasListeners=function(e){return!!this.listeners(e).length}},function(e,t,n){var r=n(256),o=n(255),a=n(85),i=n(254);function l(e){if(!(this instanceof l))return new l(e);this._from=e,this.ease("linear"),this.duration(500)}e.exports=l,r(l.prototype),l.prototype.reset=function(){return this.isArray="array"===a(this._from),this._curr=o(this._from),this._done=!1,this._start=Date.now(),this},l.prototype.to=function(e){return this.reset(),this._to=e,this},l.prototype.duration=function(e){return this._duration=e,this},l.prototype.ease=function(e){if(!(e="function"==typeof e?e:i[e]))throw new TypeError("invalid easing function");return this._ease=e,this},l.prototype.stop=function(){return this.stopped=!0,this._done=!0,this.emit("stop"),this.emit("end"),this},l.prototype.step=function(){if(!this._done){var e=this._duration,t=Date.now();if(t-this._start>=e)return this._from=this._to,this._update(this._to),this._done=!0,this.emit("end"),this;var n=this._from,r=this._to,o=this._curr,a=(0,this._ease)((t-this._start)/e);if(this.isArray){for(var i=0;i<n.length;++i)o[i]=n[i]+(r[i]-n[i])*a;return this._update(o),this}for(var l in n)o[l]=n[l]+(r[l]-n[l])*a;return this._update(o),this}},l.prototype.update=function(e){return 0==arguments.length?this.step():(this._update=e,this)}},function(e,t,n){var r=n(257),o=n(253);e.exports=function(e,t,n){n=n||{};var a=function(){var e=window.pageYOffset||document.documentElement.scrollTop,t=window.pageXOffset||document.documentElement.scrollLeft;return{top:e,left:t}}(),i=r(a).ease(n.ease||"out-circ").to({top:t,left:e}).duration(n.duration||1e3);function l(){o(l),i.update()}return i.update(function(e){window.scrollTo(0|e.left,0|e.top)}),i.on("end",function(){l=function(){}}),l(),i}},function(e,t,n){var r=n(15),o=n(258);e.exports=function(e,t){t=t||{offset:0,align:"middle"};var n=r.findDOMNode(e);return null===n?0:o(0,function(e,t,n){var r,o=document.body,a=document.documentElement,i=e.getBoundingClientRect(),l=a.clientHeight,u=Math.max(o.scrollHeight,o.offsetHeight,a.clientHeight,a.scrollHeight,a.offsetHeight);switch(t=t||0,n){case"top":r=i.top;break;case"middle":r=i.bottom-l/2-i.height/2;break;case"bottom":r=i.bottom-l;break;default:r=i.bottom-l/2-i.height/2}var s=u-l;return Math.min(r+t+window.pageYOffset,s)}(n,t.offset,t.align),t)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(2),a=S(o),i=S(n(1)),l=n(17),u=S(n(259)),s=(S(n(252)),S(n(60)),S(n(34))),c=S(n(24)),d=S(n(112)),f=S(n(111)),p=S(n(18)),h=n(115),m=S(n(251)),v=S(n(114)),y=(S(n(16)),S(n(6))),g=S(n(250)),b=S(n(78)),x=S(n(88)),w=S(n(87)),_=(S(n(86)),S(n(241))),k=S(n(240)),P=S(n(239)),E=S(n(205)),O=S(n(102)),C=S(n(101));function S(e){return e&&e.__esModule?e:{default:e}}function T(e){var t=e.children,n=e.dir;return a.default.createElement(p.default,{component:"div",dir:n,style:{padding:24}},t)}T.propTypes={children:i.default.node.isRequired,dir:i.default.string.isRequired};var M=function(e){function t(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var e=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return e.handleChange=function(t,n){e.setState({value:n})},e.handleChangeIndex=function(t){e.setState({value:t})},e.requestRide=function(t,n,r){var o=e.props.deparLat,a=e.props.deparLng,i=e.props.destLat,l=e.props.destLng,u=e.props.deparAddr,s=e.props.destAddr,c=void 0;t&&o&&a&&i&&l&&("uber"==t?c="uber://?client_id=jOOUs484dDpd5ZtVxT5A8cp9CEknN5sz&action=setPickup&pickup[latitude]="+o+"&pickup[longitude]="+a+"&pickup[nickname]="+u+"&dropoff[latitude]="+i+"&dropoff[longitude]="+l+"&dropoff[nickname]="+s+"&product_id="+r:"lyft"==t&&(c="lyft://ridetype?id="+r+"&&partner=WX_vIhcHWEdwpickup[latitude]="+o+"&pickup[longitude]="+a+"&destination[latitude]="+i+"&destination[longitude]="+l)),console.log(n,c),window.location=c},e.cardFactory=function(t,n,r){console.log(r),r||(r=[]);var o=r.slice();return o.sort(function(e,t){return e.min_estimate-t.min_estimate}),console.log(o),o.map(function(n,r){return a.default.createElement(s.default,{item:!0,className:t.grid_item,key:r},a.default.createElement(d.default,{className:t.card},a.default.createElement(f.default,{className:t.icon},a.default.createElement(h.IconButton,{variant:"contained",color:"primary"},a.default.createElement(m.default,null))),a.default.createElement(f.default,{className:t.content},a.default.createElement(p.default,{variant:"headline",component:"p",className:t.price},"$",n.min_estimate," - $",n.max_estimate),a.default.createElement(p.default,{color:"textSecondary",className:t.name},n.display_name)),a.default.createElement(f.default,{className:t.request},a.default.createElement(c.default,{size:"small",color:"primary",onClick:function(){return e.requestRide(n.company,n.display_name,n.product_id)}},"Schedule"),a.default.createElement(p.default,{color:"textSecondary"},"ETA: ",n.distance))))})},e.tabFactory=function(t,n,r){var o=(r=r||[]).slice(),i=r.slice();o.sort(function(e,t){return e.min_estimate-t.min_estimate}),i.sort(function(e,t){return e.eta-t.eta});n.transitions.duration.enteringScreen,n.transitions.duration.leavingScreen,t.fab,a.default.createElement(_.default,null),t.fab,a.default.createElement(k.default,null),(0,y.default)(t.fab,t.fabGreen),a.default.createElement(P.default,null);return a.default.createElement("div",{className:t.root},a.default.createElement(b.default,{position:"static",color:"default"},a.default.createElement(x.default,{value:e.state.value,onChange:e.handleChange,indicatorColor:"primary",textColor:"primary",fullWidth:!0},a.default.createElement(w.default,{label:"Price"}),a.default.createElement(w.default,{label:"Time"}))),a.default.createElement(g.default,{axis:"rtl"===n.direction?"x-reverse":"x",index:e.state.value,onChangeIndex:e.handleChangeIndex},a.default.createElement(T,{dir:n.direction},a.default.createElement(O.default,{className:t.gridList,cols:1,cellHeight:"auto"},o.map(function(n){return a.default.createElement(C.default,{key:n.product_id},a.default.createElement(d.default,{className:t.card},a.default.createElement(f.default,{className:t.icon},a.default.createElement(v.default,{alt:"company",src:"uber"==n.company?"/static/images/uber_rides_api_icon_1x_64px.png":"/static/images/Lyft_Logo_Pink.png"})),a.default.createElement(f.default,{className:t.content},a.default.createElement(p.default,{variant:"headline",component:"p",className:t.price},"$",n.min_estimate," - $",n.max_estimate),a.default.createElement(p.default,{color:"textSecondary",className:t.name},n.display_name)),a.default.createElement(f.default,{className:t.request},a.default.createElement(c.default,{size:"small",color:"primary",onClick:function(){return e.requestRide(n.company,n.display_name,n.product_id)}},"Schedule"),a.default.createElement(p.default,{color:"textSecondary",noWrap:!0},n.eta/60," mins away"))))}))),a.default.createElement(T,{dir:n.direction},a.default.createElement(O.default,{className:t.gridList,cols:1,cellHeight:"auto"},i.map(function(n){return a.default.createElement(C.default,{key:n.product_id},a.default.createElement(d.default,{className:t.card},a.default.createElement(f.default,{className:t.icon},a.default.createElement(v.default,{alt:"company",src:"uber"==n.company?"/static/images/uber_rides_api_icon_1x_64px.png":"/static/images/Lyft_Logo_Pink.png"})),a.default.createElement(f.default,{className:t.content},a.default.createElement(p.default,{variant:"headline",component:"p",className:t.price},"$",n.min_estimate," - $",n.max_estimate),a.default.createElement(p.default,{color:"textSecondary",className:t.name},n.display_name)),a.default.createElement(f.default,{className:t.request},a.default.createElement(c.default,{size:"small",color:"primary",onClick:function(){return e.requestRide(n.company,n.display_name,n.product_id)}},"Schedule"),a.default.createElement(p.default,{color:"textSecondary",noWrap:!0},n.eta/60," mins away"))))})))))},e.state={value:0},e}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.Component),r(t,[{key:"componentDidMount",value:function(){console.log("CardTable mounted"),(0,u.default)(this.cardTable,{align:"top",offset:-100})}},{key:"render",value:function(){var e=this,t=this.props.estData,n=(this.props.loading,this.props),r=n.classes,o=n.theme;a.default.createElement(s.default,{item:!0,className:r.grid_item},a.default.createElement(d.default,{className:r.card},a.default.createElement(f.default,{className:r.icon},a.default.createElement(v.default,{alt:"Uber",src:"/static/images/uber_rides_api_icon_2x_70px.png",className:r.avatar})),a.default.createElement(f.default,{className:r.content},a.default.createElement(p.default,{variant:"headline",component:"p",className:r.price},"$8 ~ $9"),a.default.createElement(p.default,{color:"textSecondary",className:r.name},"Test Card")),a.default.createElement(f.default,{className:r.request},a.default.createElement(c.default,{size:"small",color:"primary",onClick:function(){return e.requestRide("Tag")}},"Schedule"),a.default.createElement(p.default,{color:"textSecondary"},"ETA: 3mins"))));return a.default.createElement(s.default,{item:!0,className:r.wrapper,ref:function(t){e.cardTable=t}},a.default.createElement(s.default,{container:!0,spacing:16},t&&this.tabFactory(r,o,t)))}}]),t}();M.propTypes={classes:i.default.object.isRequired},t.default=(0,l.withStyles)(function(e){return{wrapper:{height:"40%",width:"100%"},grid_item:{width:"100%",height:"90px"},card:{height:"100%",display:"flex",flexDirection:"row",alignContent:"center",alignItems:"center"},root:{backgroundColor:e.palette.background.paper,width:"100%",position:"relative",minHeight:"40%"},fab:{position:"absolute",bottom:2*e.spacing.unit,right:2*e.spacing.unit},fabGreen:{color:e.palette.common.white,backgroundColor:E.default[500]},gridList:{},icon:{width:"10%"},content:{width:"70%"},price:{fontSize:20},name:{fontSize:12,marginTop:8},request:{textAlign:"center"},avatar:{}}},{withTheme:!0})(M)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=s(n(2)),o=(s(n(30)),s(n(1))),a=n(17),i=s(n(34)),l=(s(n(24)),s(n(28))),u=(s(n(109)),s(n(141)));function s(e){return e&&e.__esModule?e:{default:e}}function c(e){var t=e.classes;return r.default.createElement(i.default,{item:!0,className:t.container},r.default.createElement(l.default,{variant:"contained",color:"primary",onClick:e.onClick},r.default.createElement(u.default,null)))}c.propTypes={classes:o.default.object.isRequired,onClick:o.default.func.isRequired},t.default=(0,a.withStyles)(function(e){return{container:{width:"100%",textAlign:"center"}}})(c)},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(2)),a=(0,r(n(27)).default)(o.default.createElement("g",null,o.default.createElement("path",{d:"M12 2C8.13 2 5 5.13 5 9c0 5.25 7 13 7 13s7-7.75 7-13c0-3.87-3.13-7-7-7zm0 9.5c-1.38 0-2.5-1.12-2.5-2.5s1.12-2.5 2.5-2.5 2.5 1.12 2.5 2.5-1.12 2.5-2.5 2.5z"})),"LocationOn");t.default=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(2),a=g(o),i=g(n(30)),l=g(n(1)),u=n(17),s=g(n(34)),c=g(n(60)),d=g(n(33)),f=g(n(99)),p=g(n(28)),h=g(n(262)),m=g(n(141)),v=g(n(64)),y=g(n(63));function g(e){return e&&e.__esModule?e:{default:e}}var b=function(e){function t(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var e=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return e.loadAutoComplete=function(){if(e.props&&e.props.google){var t=e.props.google.maps,n=document.getElementById("deparRef"),r=document.getElementById("destRef"),o=new t.places.Autocomplete(n),a=new t.places.Autocomplete(r);o.addListener("place_changed",function(){var t=o.getPlace();console.log(t),t.geometry?(e.props.updateLocation&&e.props.updateLocation("depar",t.geometry.location.toJSON(),t.formatted_address),e.setState({deparText:t.formatted_address})):alert("Details unavailable for input: "+t.name+".")}),a.addListener("place_changed",function(){var t=a.getPlace();console.log(t),t.geometry||alert("Details unavailable for input: "+t.name+"."),e.props.updateLocation&&(console.log("[dest]",t.geometry.location.toJSON()),e.props.updateLocation("dest",t.geometry.location.toJSON(),t.formatted_address)),e.setState({destText:t.formatted_address})})}},e.parsePlaceName=function(e){return e[0].long_name+" "+e[1].long_name+", "+e[3].long_name+", "+e[5].short_name+", "+e[6].short_name},e.handleChange=function(t){return function(n){var r,o,a;if(e.setState((r={},o=t,a=n.target.value,o in r?Object.defineProperty(r,o,{value:a,enumerable:!0,configurable:!0,writable:!0}):r[o]=a,r)),"deparText"==t&&e.setState({currentLoc:!1}),!n.target.value){var i=void 0;i="deparText"==t?"depar":"dest",e.props.updateLocation(i,void 0)}}},e.handleClick=function(e){e.target.select()},e.getCurrentLocation=function(){var t=e.props.handleCurrentLocation,n=new e.props.google.maps.Geocoder;t().then(function(t){if(t){var r={lat:t.coords.latitude,lng:t.coords.longitude};document.getElementById("deparRef"),document.getElementById("inputLabel");n.geocode({location:r},function(e,t){this.setState({deparText:e[0].formatted_address,currentLoc:!0})}.bind(e))}else alert("Location access denied.")})},e.componentDidMount=function(){e.loadAutoComplete(),e.getCurrentLocation()},e.deparAC=void 0,e.destAC=void 0,e.maps=void 0,e.state={currentLoc:!1,deparText:void 0,destText:void 0,parentDeparText:void 0,parentDestText:void 0},e}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.Component),r(t,[{key:"componentDidUpdate",value:function(e,t){var n=this.props,r=n.deparAddr,o=n.destAddr,a=!1,i=!1;t.parentDeparText!=r&&(a=!0),t.parentDestText!=o&&(i=!0),a&&i?this.setState({deparText:r,parentDeparText:r,destText:o,parentDestText:o}):a?this.setState({deparText:r,parentDeparText:r}):i&&this.setState({destText:o,parentDestText:o})}},{key:"render",value:function(){var e=this,t=this.props.classes,n=this.props,r=(n.handleCurrentLocation,n.handleSearch),o=this.props;o.deparAddr,o.destAddr;return a.default.createElement(s.default,{item:!0,className:t.wrapper},a.default.createElement(s.default,{container:!0,direction:"row",className:t.container},a.default.createElement(s.default,{item:!0,xs:12,sm:12,className:t.item},a.default.createElement(v.default,{margin:"normal",fullWidth:!0},this.state.currentLoc?a.default.createElement(y.default,{id:"inputLabel",shrink:!0},"Departure"):a.default.createElement(y.default,{id:"inputLabel"},"Departure"),a.default.createElement(d.default,{id:"deparRef",className:t.textField,label:"Departure",fullWidth:!0,autoFocus:!0,endAdornment:a.default.createElement(f.default,{position:"end"},a.default.createElement(p.default,{variant:"contained",color:"primary",onClick:this.getCurrentLocation},a.default.createElement(h.default,null))),value:this.state.deparText,onChange:this.handleChange("deparText"),onClick:function(t){return e.handleClick(t)}}))),a.default.createElement(s.default,{item:!0,xs:12,sm:12,className:t.item},a.default.createElement(c.default,{id:"destRef",className:t.textField,label:"Destination",margin:"normal",fullWidth:!0,InputProps:{endAdornment:a.default.createElement(f.default,{position:"end"},a.default.createElement(p.default,{variant:"contained",color:"primary",onClick:r},a.default.createElement(m.default,null)))},value:this.state.destText,onChange:this.handleChange("destText"),onClick:function(t){return e.handleClick(t)}}))))}}]),t}();b.propTypes={classes:l.default.object.isRequired},t.default=(0,i.default)()((0,u.withStyles)(function(e){return{wrapper:{height:"30%",width:"100%"}}})(b))},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(4)),a=r(n(12)),i=r(n(3)),l=r(n(9)),u=r(n(8)),s=r(n(11)),c=r(n(10)),d=r(n(2)),f=(r(n(1)),r(n(47))),p=n(25),h=r(n(31)),m=n(39),v={entering:{transform:"scale(1)"},entered:{transform:"scale(1)"}},y=function(e){function t(){var e,n,r;(0,l.default)(this,t);for(var o=arguments.length,a=new Array(o),i=0;i<o;i++)a[i]=arguments[i];return(0,s.default)(r,(n=r=(0,s.default)(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(a))),r.handleEnter=function(e){var t=r.props.theme;(0,m.reflow)(e);var n=(0,m.getTransitionProps)(r.props,{mode:"enter"});e.style.webkitTransition=t.transitions.create("transform",n),e.style.transition=t.transitions.create("transform",n),r.props.onEnter&&r.props.onEnter(e)},r.handleExit=function(e){var t=r.props.theme,n=(0,m.getTransitionProps)(r.props,{mode:"exit"});e.style.webkitTransition=t.transitions.create("transform",n),e.style.transition=t.transitions.create("transform",n),r.props.onExit&&r.props.onExit(e)},n))}return(0,c.default)(t,e),(0,u.default)(t,[{key:"render",value:function(){var e=this.props,t=e.children,n=(e.onEnter,e.onExit,e.style),r=(e.theme,(0,i.default)(e,["children","onEnter","onExit","style","theme"])),l=(0,a.default)({},n,d.default.isValidElement(t)?t.props.style:{});return d.default.createElement(f.default,(0,o.default)({appear:!0,onEnter:this.handleEnter,onExit:this.handleExit},r),function(e,n){return d.default.cloneElement(t,(0,a.default)({style:(0,a.default)({transform:"scale(0)",willChange:"transform"},v[e],l)},n))})}}]),t}(d.default.Component);y.propTypes={},y.defaultProps={timeout:{enter:p.duration.enteringScreen,exit:p.duration.leavingScreen}};var g=(0,h.default)()(y);t.default=g},function(e,t,n){"use strict";var r=n(58),o=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=o(n(4)),i=o(n(2)),l=(o(n(1)),r(n(30))),u=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return function(t){var n=e.breakpoint,r=void 0===n?"sm":n;function o(e){return i.default.createElement(t,(0,a.default)({fullScreen:(0,l.isWidthDown)(r,e.width)},e))}return o.propTypes={},(0,l.default)()(o)}};t.default=u},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.styles=void 0;var o=r(n(4)),a=r(n(12)),i=r(n(3)),l=r(n(9)),u=r(n(8)),s=r(n(11)),c=r(n(10)),d=r(n(7)),f=r(n(2)),p=(r(n(1)),r(n(23))),h=r(n(29)),m=(r(n(14)),r(n(6))),v=n(237),y=n(13),g=r(n(192)),b=r(n(66)),x=r(n(133)),w=r(n(5)),_=function(e){return{popper:{zIndex:e.zIndex.tooltip,pointerEvents:"none","&$open":{pointerEvents:"auto"}},open:{},tooltip:{backgroundColor:e.palette.grey[700],borderRadius:2,color:x.default.white,fontFamily:e.typography.fontFamily,opacity:0,transform:"scale(0)",transition:e.transitions.create(["opacity","transform"],{duration:e.transitions.duration.shortest,easing:e.transitions.easing.easeIn}),minHeight:0,padding:"".concat(e.spacing.unit/2,"px ").concat(e.spacing.unit,"px"),fontSize:e.typography.pxToRem(10),lineHeight:"".concat(e.typography.round(1.4),"em"),"&$open":{opacity:.9,transform:"scale(1)",transition:e.transitions.create(["opacity","transform"],{duration:e.transitions.duration.shortest,easing:e.transitions.easing.easeOut})}},touch:{padding:"".concat(e.spacing.unit,"px ").concat(2*e.spacing.unit,"px"),fontSize:e.typography.pxToRem(14),lineHeight:"".concat(e.typography.round(16/14),"em")},tooltipPlacementLeft:(0,d.default)({transformOrigin:"right center",margin:"0 ".concat(3*e.spacing.unit,"px")},e.breakpoints.up("sm"),{margin:"0 14px"}),tooltipPlacementRight:(0,d.default)({transformOrigin:"left center",margin:"0 ".concat(3*e.spacing.unit,"px")},e.breakpoints.up("sm"),{margin:"0 14px"}),tooltipPlacementTop:(0,d.default)({transformOrigin:"center bottom",margin:"".concat(3*e.spacing.unit,"px 0")},e.breakpoints.up("sm"),{margin:"14px 0"}),tooltipPlacementBottom:(0,d.default)({transformOrigin:"center top",margin:"".concat(3*e.spacing.unit,"px 0")},e.breakpoints.up("sm"),{margin:"14px 0"})}};t.styles=_;var k=function(e){function t(e){var n;return(0,l.default)(this,t),(n=(0,s.default)(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e))).state={},n.enterTimer=null,n.leaveTimer=null,n.touchTimer=null,n.closeTimer=null,n.isControlled=null,n.popper=null,n.children=null,n.ignoreNonTouchEvents=!1,n.handleResize=(0,h.default)(function(){n.popper&&n.popper._popper.scheduleUpdate()},166),n.handleEnter=function(e){var t=n.props,r=t.children,o=t.enterDelay,a=r.props;"focus"===e.type&&a.onFocus&&a.onFocus(e),"mouseover"===e.type&&a.onMouseOver&&a.onMouseOver(e),n.ignoreNonTouchEvents&&"touchstart"!==e.type||(clearTimeout(n.enterTimer),clearTimeout(n.leaveTimer),o?(e.persist(),n.enterTimer=setTimeout(function(){n.handleOpen(e)},o)):n.handleOpen(e))},n.handleOpen=function(e){n.isControlled||n.setState({open:!0}),n.props.onOpen&&n.props.onOpen(e,!0)},n.handleLeave=function(e){var t=n.props,r=t.children,o=t.leaveDelay,a=r.props;"blur"===e.type&&a.onBlur&&a.onBlur(e),"mouseleave"===e.type&&a.onMouseLeave&&a.onMouseLeave(e),clearTimeout(n.enterTimer),clearTimeout(n.leaveTimer),o?(e.persist(),n.leaveTimer=setTimeout(function(){n.handleClose(e)},o)):n.handleClose(e)},n.handleClose=function(e){n.isControlled||n.setState({open:!1}),n.props.onClose&&n.props.onClose(e,!1),clearTimeout(n.closeTimer),n.closeTimer=setTimeout(function(){n.ignoreNonTouchEvents=!1},n.props.theme.transitions.duration.shortest)},n.handleTouchStart=function(e){n.ignoreNonTouchEvents=!0;var t=n.props,r=t.children,o=t.enterTouchDelay,a=r.props;a.onTouchStart&&a.onTouchStart(e),clearTimeout(n.leaveTimer),clearTimeout(n.closeTimer),clearTimeout(n.touchTimer),e.persist(),n.touchTimer=setTimeout(function(){n.handleEnter(e)},o)},n.handleTouchEnd=function(e){var t=n.props,r=t.children,o=t.leaveTouchDelay,a=r.props;a.onTouchEnd&&a.onTouchEnd(e),clearTimeout(n.touchTimer),clearTimeout(n.leaveTimer),e.persist(),n.leaveTimer=setTimeout(function(){n.handleClose(e)},o)},n.isControlled=null!=e.open,n.isControlled||(n.state.open=!1),n}return(0,c.default)(t,e),(0,u.default)(t,[{key:"componentDidMount",value:function(){}},{key:"componentWillUnmount",value:function(){clearTimeout(this.enterTimer),clearTimeout(this.leaveTimer),clearTimeout(this.touchTimer),clearTimeout(this.closeTimer),this.handleResize.clear()}},{key:"render",value:function(){var e=this,t=this.props,n=t.children,r=t.classes,l=(t.className,t.disableFocusListener),u=t.disableHoverListener,s=t.disableTouchListener,c=(t.enterDelay,t.enterTouchDelay,t.id),h=(t.leaveDelay,t.leaveTouchDelay,t.onClose,t.onOpen,t.open),x=t.placement,w=t.PopperProps,_=(w=void 0===w?{}:w).className,k=(0,i.default)(w,["className"]),P=t.theme,E=t.title,O=(0,i.default)(t,["children","classes","className","disableFocusListener","disableHoverListener","disableTouchListener","enterDelay","enterTouchDelay","id","leaveDelay","leaveTouchDelay","onClose","onOpen","open","placement","PopperProps","theme","title"]),C="rtl"===P.direction?function(e){switch(e){case"bottom-end":return"bottom-start";case"bottom-start":return"bottom-end";case"top-end":return"top-start";case"top-start":return"top-end";default:return e}}(x):x,S=this.isControlled?h:this.state.open,T={"aria-describedby":c};return""===E&&(S=!1),s||(T.onTouchStart=this.handleTouchStart,T.onTouchEnd=this.handleTouchEnd),u||(T.onMouseOver=this.handleEnter,T.onMouseLeave=this.handleLeave),l||(T.onFocus=this.handleEnter,T.onBlur=this.handleLeave),f.default.createElement(v.Manager,(0,o.default)({tag:!1},O),f.default.createElement(p.default,{target:"window",onResize:this.handleResize}),f.default.createElement(v.Target,null,function(t){var r=t.targetProps;return f.default.createElement(g.default,{rootRef:function(t){e.children=t,r.ref(e.children)}},f.default.cloneElement(n,T))}),f.default.createElement(b.default,null,f.default.createElement(v.Popper,(0,o.default)({placement:C,eventsEnabled:S,className:(0,m.default)(r.popper,(0,d.default)({},r.open,S),_),ref:function(t){e.popper=t}},k),function(t){var n=t.popperProps,i=t.restProps,l=(n["data-placement"]||C).split("-")[0];return f.default.createElement("div",(0,o.default)({},n,i,{style:(0,a.default)({},n.style,{top:n.style.top||0,left:n.style.left||0},i.style)}),f.default.createElement("div",{id:c,role:"tooltip","aria-hidden":!S,className:(0,m.default)(r.tooltip,(0,d.default)({},r.open,S),(0,d.default)({},r.touch,e.ignoreNonTouchEvents),r["tooltipPlacement".concat((0,y.capitalize)(l))])},E))})))}}]),t}(f.default.Component);k.propTypes={},k.defaultProps={disableFocusListener:!1,disableHoverListener:!1,disableTouchListener:!1,enterDelay:0,enterTouchDelay:1e3,leaveDelay:0,leaveTouchDelay:1500,placement:"bottom"};var P=(0,w.default)(_,{name:"MuiTooltip",withTheme:!0})(k);t.default=P},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(4)),a=r(n(3)),i=r(n(2)),l=(r(n(14)),r(n(1)),r(n(33))),u=r(n(63)),s=r(n(64)),c=r(n(104)),d=r(n(61));function f(e){var t=e.autoComplete,n=e.autoFocus,r=e.children,f=e.className,p=e.defaultValue,h=e.disabled,m=e.error,v=e.FormHelperTextProps,y=e.fullWidth,g=e.helperText,b=e.id,x=e.InputLabelProps,w=e.inputProps,_=e.InputProps,k=e.inputRef,P=e.label,E=e.multiline,O=e.name,C=e.onBlur,S=e.onChange,T=e.onFocus,M=e.placeholder,j=e.required,N=e.rows,L=e.rowsMax,R=e.select,D=e.SelectProps,A=e.type,I=e.value,F=(0,a.default)(e,["autoComplete","autoFocus","children","className","defaultValue","disabled","error","FormHelperTextProps","fullWidth","helperText","id","InputLabelProps","inputProps","InputProps","inputRef","label","multiline","name","onBlur","onChange","onFocus","placeholder","required","rows","rowsMax","select","SelectProps","type","value"]),z=g&&b?"".concat(b,"-helper-text"):void 0,W=i.default.createElement(l.default,(0,o.default)({autoComplete:t,autoFocus:n,defaultValue:p,disabled:h,fullWidth:y,multiline:E,name:O,rows:N,rowsMax:L,type:A,value:I,id:b,inputRef:k,onBlur:C,onChange:S,onFocus:T,placeholder:M,inputProps:w},_));return i.default.createElement(s.default,(0,o.default)({"aria-describedby":z,className:f,error:m,fullWidth:y,required:j},F),P&&i.default.createElement(u.default,(0,o.default)({htmlFor:b},x),P),R?i.default.createElement(d.default,(0,o.default)({value:I,input:W},D),r):W,g&&i.default.createElement(c.default,(0,o.default)({id:z},v),g))}f.propTypes={},f.defaultProps={required:!1,select:!1};var p=f;t.default=p},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.styles=void 0;var o=r(n(4)),a=r(n(3)),i=r(n(9)),l=r(n(8)),u=r(n(11)),s=r(n(10)),c=r(n(7)),d=r(n(12)),f=r(n(2)),p=(r(n(1)),r(n(6))),h=r(n(5)),m=r(n(20)),v=n(13),y=function(e){return{root:(0,d.default)({},e.typography.button,(0,c.default)({maxWidth:264,position:"relative",minWidth:72,padding:0,minHeight:48,flexShrink:0,overflow:"hidden"},e.breakpoints.up("md"),{minWidth:160})),labelIcon:{minHeight:72},textColorInherit:{color:"inherit",opacity:.7,"&$selected":{opacity:1},"&$disabled":{opacity:.4}},textColorPrimary:{color:e.palette.text.secondary,"&$selected":{color:e.palette.primary.main},"&$disabled":{color:e.palette.text.disabled}},textColorSecondary:{color:e.palette.text.secondary,"&$selected":{color:e.palette.secondary.main},"&$disabled":{color:e.palette.text.disabled}},selected:{},disabled:{},fullWidth:{flexShrink:1,flexGrow:1},wrapper:{display:"inline-flex",alignItems:"center",justifyContent:"center",width:"100%",flexDirection:"column"},labelContainer:(0,c.default)({paddingTop:6,paddingBottom:6,paddingLeft:12,paddingRight:12},e.breakpoints.up("md"),{paddingLeft:3*e.spacing.unit,paddingRight:3*e.spacing.unit}),label:(0,c.default)({fontSize:e.typography.pxToRem(14),whiteSpace:"normal"},e.breakpoints.up("md"),{fontSize:e.typography.pxToRem(13)}),labelWrapped:(0,c.default)({},e.breakpoints.down("sm"),{fontSize:e.typography.pxToRem(12)})}};t.styles=y;var g=function(e){function t(){var e,n,r;(0,i.default)(this,t);for(var o=arguments.length,a=new Array(o),l=0;l<o;l++)a[l]=arguments[l];return(0,u.default)(r,(n=r=(0,u.default)(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(a))),r.state={labelWrapped:!1},r.handleChange=function(e){var t=r.props,n=t.onChange,o=t.value,a=t.onClick;n&&n(e,o),a&&a(e)},r.label=void 0,r.checkTextWrap=function(){if(r.label){var e=r.label.getClientRects().length>1;r.state.labelWrapped!==e&&r.setState({labelWrapped:e})}},n))}return(0,s.default)(t,e),(0,l.default)(t,[{key:"componentDidMount",value:function(){this.checkTextWrap()}},{key:"componentDidUpdate",value:function(e,t){this.state.labelWrapped===t.labelWrapped&&this.checkTextWrap()}},{key:"render",value:function(){var e,t,n=this,r=this.props,i=r.classes,l=r.className,u=r.disabled,s=r.fullWidth,d=r.icon,h=r.indicator,y=r.label,g=(r.onChange,r.selected),b=r.textColor,x=(r.value,(0,a.default)(r,["classes","className","disabled","fullWidth","icon","indicator","label","onChange","selected","textColor","value"]));void 0!==y&&(t=f.default.createElement("span",{className:i.labelContainer},f.default.createElement("span",{className:(0,p.default)(i.label,(0,c.default)({},i.labelWrapped,this.state.labelWrapped)),ref:function(e){n.label=e}},y)));var w=(0,p.default)(i.root,i["textColor".concat((0,v.capitalize)(b))],(e={},(0,c.default)(e,i.disabled,u),(0,c.default)(e,i.selected,g),(0,c.default)(e,i.labelIcon,d&&t),(0,c.default)(e,i.fullWidth,s),e),l);return f.default.createElement(m.default,(0,o.default)({focusRipple:!0,className:w,role:"tab","aria-selected":g,disabled:u},x,{onClick:this.handleChange}),f.default.createElement("span",{className:i.wrapper},d,t),h)}}]),t}(f.default.Component);g.propTypes={},g.defaultProps={disabled:!1,textColor:"inherit"};var b=(0,h.default)(y,{name:"MuiTab"})(g);t.default=b},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.styles=void 0;var o=r(n(4)),a=r(n(3)),i=r(n(2)),l=(r(n(1)),r(n(6))),u=r(n(147)),s=r(n(146)),c=r(n(5)),d=r(n(20)),f=function(e){return{root:{color:"inherit",flex:"0 0 ".concat(7*e.spacing.unit,"px")}}};t.styles=f;var p=i.default.createElement(u.default,null),h=i.default.createElement(s.default,null);function m(e){var t=e.classes,n=e.className,r=e.direction,u=e.onClick,s=e.visible,c=(0,a.default)(e,["classes","className","direction","onClick","visible"]),f=(0,l.default)(t.root,n);return s?i.default.createElement(d.default,(0,o.default)({className:f,onClick:u,tabIndex:-1},c),"left"===r?p:h):i.default.createElement("div",{className:f})}m.propTypes={},m.defaultProps={visible:!0};var v=(0,c.default)(f,{name:"MuiTabScrollButton"})(m);t.default=v},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.styles=void 0;var o=r(n(4)),a=r(n(3)),i=r(n(2)),l=(r(n(1)),r(n(6))),u=r(n(5)),s=n(13),c=function(e){return{root:{position:"absolute",height:2,bottom:0,width:"100%",transition:e.transitions.create(),willChange:"left, width"},colorPrimary:{backgroundColor:e.palette.primary.main},colorSecondary:{backgroundColor:e.palette.secondary.main}}};function d(e){var t=e.classes,n=e.className,r=e.color,u=(0,a.default)(e,["classes","className","color"]);return i.default.createElement("span",(0,o.default)({className:(0,l.default)(t.root,t["color".concat((0,s.capitalize)(r))],n)},u))}t.styles=c,d.propTypes={};var f=(0,u.default)(c)(d);t.default=f},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(9)),a=r(n(8)),i=r(n(11)),l=r(n(10)),u=r(n(2)),s=(r(n(1)),r(n(23))),c=r(n(29)),d={width:"100px",height:"100px",position:"absolute",top:"-10000px",overflow:"scroll",msOverflowStyle:"scrollbar"},f=function(e){function t(){var e,n,r;(0,o.default)(this,t);for(var a=arguments.length,l=new Array(a),u=0;u<a;u++)l[u]=arguments[u];return(0,i.default)(r,(n=r=(0,i.default)(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(l))),r.setMeasurements=function(){r.node&&(r.scrollbarHeight=r.node.offsetHeight-r.node.clientHeight,r.scrollbarWidth=r.node.offsetWidth-r.node.clientWidth)},r.handleResize=(0,c.default)(function(){var e=r.props.onChange,t=r.scrollbarHeight,n=r.scrollbarWidth;r.setMeasurements(),t===r.scrollbarHeight&&n===r.scrollbarWidth||e({scrollbarHeight:r.scrollbarHeight,scrollbarWidth:r.scrollbarWidth})},166),n))}return(0,l.default)(t,e),(0,a.default)(t,[{key:"componentDidMount",value:function(){this.setMeasurements(),this.props.onLoad({scrollbarHeight:this.scrollbarHeight,scrollbarWidth:this.scrollbarWidth})}},{key:"componentWillUnmount",value:function(){this.handleResize.clear()}},{key:"render",value:function(){var e=this,t=this.props.onChange;return u.default.createElement("div",null,t?u.default.createElement(s.default,{target:"window",onResize:this.handleResize}):null,u.default.createElement("div",{style:d,ref:function(t){e.node=t}}))}}]),t}(u.default.Component);f.propTypes={};var p=f;t.default=p},function(e,t,n){(function(t){var n;n="undefined"!=typeof window?window:void 0!==t?t:"undefined"!=typeof self?self:{},e.exports=n}).call(this,n(37))},function(e,t,n){var r=n(272),o=r.requestAnimationFrame||r.webkitRequestAnimationFrame||r.mozRequestAnimationFrame||function(e){var t=+new Date,n=Math.max(0,16-(t-a)),r=setTimeout(e,n);return a=t,r},a=+new Date;var i=r.cancelAnimationFrame||r.webkitCancelAnimationFrame||r.mozCancelAnimationFrame||clearTimeout;Function.prototype.bind&&(o=o.bind(r),i=i.bind(r)),(e.exports=o).cancel=i},function(e,t,n){var r=n(273),o=new Error("Element already at target scroll position"),a=new Error("Scroll cancelled"),i=Math.min;function l(e){return function(t,n,l,c){"function"==typeof(l=l||{})&&(c=l,l={}),"function"!=typeof c&&(c=s);var d=+new Date,f=t[e],p=l.ease||u,h=isNaN(l.duration)?350:+l.duration,m=!1;return f===n?c(o,t[e]):r(function o(l){if(m)return c(a,t[e]);var u=+new Date;var s=i(1,(u-d)/h);var v=p(s);t[e]=v*(n-f)+f;r(s<1?o:function(){c(null,t[e])})}),function(){m=!0}}}function u(e){return.5*(1-Math.cos(Math.PI*e))}function s(){}e.exports={left:l("scrollLeft"),top:l("scrollTop")}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=!("undefined"==typeof window||!window.document||!window.document.createElement);function a(){if(r)return r;if(!o||!window.document.body)return"indeterminate";var e=window.document.createElement("div");return e.appendChild(document.createTextNode("ABCD")),e.dir="rtl",e.style.fontSize="14px",e.style.width="4px",e.style.height="1px",e.style.position="absolute",e.style.top="-1000px",e.style.overflow="scroll",document.body.appendChild(e),r="reverse",e.scrollLeft>0?r="default":(e.scrollLeft=1,0===e.scrollLeft&&(r="negative")),document.body.removeChild(e),r}t._setScrollType=function(e){r=e},t.detectScrollType=a,t.getNormalizedScrollLeft=function(e,t){var n=e.scrollLeft;if("rtl"!==t)return n;var r=a();if("indeterminate"===r)return Number.NaN;switch(r){case"negative":return e.scrollWidth-e.clientWidth+n;case"reverse":return e.scrollWidth-e.clientWidth-n}return n},t.setNormalizedScrollLeft=function(e,t,n){if("rtl"===n){var r=a();if("indeterminate"!==r)switch(r){case"negative":e.scrollLeft=e.clientWidth-e.scrollWidth+t;break;case"reverse":e.scrollLeft=e.scrollWidth-e.clientWidth-t;break;default:e.scrollLeft=t}}else e.scrollLeft=t}},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.styles=void 0;var o=r(n(4)),a=r(n(12)),i=r(n(3)),l=r(n(9)),u=r(n(8)),s=r(n(11)),c=r(n(10)),d=r(n(7)),f=r(n(2)),p=(r(n(1)),r(n(14)),r(n(6))),h=r(n(23)),m=r(n(29)),v=n(275),y=r(n(274)),g=r(n(271)),b=r(n(5)),x=r(n(270)),w=r(n(269)),_=function(e){return{root:{overflow:"hidden",minHeight:48,WebkitOverflowScrolling:"touch"},flexContainer:{display:"flex"},scroller:{position:"relative",display:"inline-block",flex:"1 1 auto",whiteSpace:"nowrap"},fixed:{overflowX:"hidden",width:"100%"},scrollable:{overflowX:"scroll"},centered:{justifyContent:"center"},scrollButtons:{},scrollButtonsAuto:(0,d.default)({},e.breakpoints.down("xs"),{display:"none"}),indicator:{}}};t.styles=_;var k=function(e){function t(){var e,n,r;(0,l.default)(this,t);for(var o=arguments.length,a=new Array(o),i=0;i<o;i++)a[i]=arguments[i];return(0,s.default)(r,(n=r=(0,s.default)(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(a))),r.state={indicatorStyle:{},scrollerStyle:{marginBottom:0},showLeftScroll:!1,showRightScroll:!1,mounted:!1},r.getConditionalElements=function(){var e=r.props,t=e.classes,n=e.scrollable,o=e.ScrollButtonComponent,a=e.scrollButtons,i=e.theme,l={};l.scrollbarSizeListener=n?f.default.createElement(g.default,{onLoad:r.handleScrollbarSizeChange,onChange:r.handleScrollbarSizeChange}):null;var u=n&&("auto"===a||"on"===a);return l.scrollButtonLeft=u?f.default.createElement(o,{direction:i&&"rtl"===i.direction?"right":"left",onClick:r.handleLeftScrollClick,visible:r.state.showLeftScroll,className:(0,p.default)(t.scrollButtons,(0,d.default)({},t.scrollButtonsAuto,"auto"===a))}):null,l.scrollButtonRight=u?f.default.createElement(o,{direction:i&&"rtl"===i.direction?"left":"right",onClick:r.handleRightScrollClick,visible:r.state.showRightScroll,className:(0,p.default)(t.scrollButtons,(0,d.default)({},t.scrollButtonsAuto,"auto"===a))}):null,l},r.getTabsMeta=function(e,t){var n,o;if(r.tabs){var a=r.tabs.getBoundingClientRect();n={clientWidth:r.tabs?r.tabs.clientWidth:0,scrollLeft:r.tabs?r.tabs.scrollLeft:0,scrollLeftNormalized:r.tabs?(0,v.getNormalizedScrollLeft)(r.tabs,t):0,scrollWidth:r.tabs?r.tabs.scrollWidth:0,left:a.left,right:a.right}}if(r.tabs&&!1!==e){var i=r.tabs.children[0].children;if(i.length>0){var l=i[r.valueToIndex[e]];o=l?l.getBoundingClientRect():null}}return{tabsMeta:n,tabMeta:o}},r.tabs=void 0,r.valueToIndex={},r.handleResize=(0,m.default)(function(){r.updateIndicatorState(r.props),r.updateScrollButtonState()},166),r.handleLeftScrollClick=function(){r.tabs&&r.moveTabsScroll(-r.tabs.clientWidth)},r.handleRightScrollClick=function(){r.tabs&&r.moveTabsScroll(r.tabs.clientWidth)},r.handleScrollbarSizeChange=function(e){var t=e.scrollbarHeight;r.setState({scrollerStyle:{marginBottom:-t}})},r.handleTabsScroll=(0,m.default)(function(){r.updateScrollButtonState()},166),r.moveTabsScroll=function(e){var t=r.props.theme;if(r.tabs){var n="rtl"===t.direction?-1:1,o=r.tabs.scrollLeft+e*n,a="rtl"===t.direction&&"reverse"===(0,v.detectScrollType)()?-1:1;y.default.left(r.tabs,a*o)}},r.scrollSelectedIntoView=function(){var e=r.props,t=e.theme,n=e.value,o=r.getTabsMeta(n,t.direction),a=o.tabsMeta,i=o.tabMeta;if(i&&a)if(i.left<a.left){var l=a.scrollLeft+(i.left-a.left);y.default.left(r.tabs,l)}else if(i.right>a.right){var u=a.scrollLeft+(i.right-a.right);y.default.left(r.tabs,u)}},r.updateScrollButtonState=function(){var e=r.props,t=e.scrollable,n=e.scrollButtons,o=e.theme;if(r.tabs&&t&&"off"!==n){var a=r.tabs,i=a.scrollWidth,l=a.clientWidth,u=(0,v.getNormalizedScrollLeft)(r.tabs,o.direction),s="rtl"===o.direction?i>l+u:u>0,c="rtl"===o.direction?u>0:i>l+u;s===r.state.showLeftScroll&&c===r.state.showRightScroll||r.setState({showLeftScroll:s,showRightScroll:c})}},n))}return(0,c.default)(t,e),(0,u.default)(t,[{key:"componentDidMount",value:function(){this.setState({mounted:!0}),this.updateIndicatorState(this.props),this.updateScrollButtonState(),this.props.action&&this.props.action({updateIndicator:this.handleResize})}},{key:"componentDidUpdate",value:function(e,t){this.updateScrollButtonState(),this.updateIndicatorState(this.props),this.state.indicatorStyle!==t.indicatorStyle&&this.scrollSelectedIntoView()}},{key:"componentWillUnmount",value:function(){this.handleResize.clear(),this.handleTabsScroll.clear()}},{key:"updateIndicatorState",value:function(e){var t=e.theme,n=e.value,r=this.getTabsMeta(n,t.direction),o=r.tabsMeta,a=r.tabMeta,i=0;if(a&&o){var l="rtl"===t.direction?o.scrollLeftNormalized+o.clientWidth-o.scrollWidth:o.scrollLeft;i=a.left-o.left+l}var u={left:i,width:a?a.width:0};u.left===this.state.indicatorStyle.left&&u.width===this.state.indicatorStyle.width||Number.isNaN(u.left)||Number.isNaN(u.width)||this.setState({indicatorStyle:u})}},{key:"render",value:function(){var e,t=this,n=this.props,r=(n.action,n.centered),l=n.children,u=n.classes,s=n.className,c=n.fullWidth,m=n.indicatorColor,v=n.onChange,y=n.scrollable,g=(n.ScrollButtonComponent,n.scrollButtons,n.TabIndicatorProps),b=void 0===g?{}:g,w=n.textColor,_=(n.theme,n.value),k=(0,i.default)(n,["action","centered","children","classes","className","fullWidth","indicatorColor","onChange","scrollable","ScrollButtonComponent","scrollButtons","TabIndicatorProps","textColor","theme","value"]),P=(0,p.default)(u.root,s),E=(0,p.default)(u.scroller,(e={},(0,d.default)(e,u.fixed,!y),(0,d.default)(e,u.scrollable,y),e)),O=(0,p.default)(u.flexContainer,(0,d.default)({},u.centered,r&&!y)),C=f.default.createElement(x.default,(0,o.default)({className:u.indicator,color:m},b,{style:(0,a.default)({},this.state.indicatorStyle,b.style)}));this.valueToIndex={};var S=0,T=f.default.Children.map(l,function(e){if(!f.default.isValidElement(e))return null;var n=void 0===e.props.value?S:e.props.value;t.valueToIndex[n]=S;var r=n===_;return S+=1,f.default.cloneElement(e,{fullWidth:c,indicator:r&&!t.state.mounted&&C,selected:r,onChange:v,textColor:w,value:n})}),M=this.getConditionalElements();return f.default.createElement("div",(0,o.default)({className:P},k),f.default.createElement(h.default,{target:"window",onResize:this.handleResize}),M.scrollbarSizeListener,f.default.createElement("div",{className:u.flexContainer},M.scrollButtonLeft,f.default.createElement("div",{className:E,style:this.state.scrollerStyle,ref:function(e){t.tabs=e},role:"tablist",onScroll:this.handleTabsScroll},f.default.createElement("div",{className:O},T),this.state.mounted&&C),M.scrollButtonRight))}}]),t}(f.default.Component);k.propTypes={},k.defaultProps={centered:!1,fullWidth:!1,indicatorColor:"secondary",scrollable:!1,ScrollButtonComponent:w.default,scrollButtons:"auto",textColor:"inherit"};var P=(0,b.default)(_,{name:"MuiTabs",withTheme:!0})(k);t.default=P},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(2)),a=r(n(19)),i=r(n(16)),l=o.default.createElement("path",{d:"M20 12l-1.41-1.41L13 16.17V4h-2v12.17l-5.58-5.59L4 12l8 8 8-8z"}),u=function(e){return o.default.createElement(i.default,e,l)};(u=(0,a.default)(u)).muiName="SvgIcon";var s=u;t.default=s},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.styles=void 0;var o=r(n(4)),a=r(n(7)),i=r(n(3)),l=r(n(2)),u=(r(n(1)),r(n(6))),s=r(n(277)),c=r(n(5)),d=r(n(20)),f=n(13),p=function(e){return{root:{cursor:"pointer",display:"inline-flex",justifyContent:"flex-start",flexDirection:"inherit",alignItems:"center","&:hover":{color:e.palette.text.primary},"&:focus":{color:e.palette.text.primary}},active:{color:e.palette.text.primary,"& $icon":{opacity:1}},icon:{height:16,marginRight:4,marginLeft:4,opacity:0,transition:e.transitions.create(["opacity","transform"],{duration:e.transitions.duration.shorter}),userSelect:"none",width:16},iconDirectionDesc:{transform:"rotate(0deg)"},iconDirectionAsc:{transform:"rotate(180deg)"}}};function h(e){var t=e.active,n=e.classes,r=e.className,c=e.children,p=e.direction,h=(0,i.default)(e,["active","classes","className","children","direction"]);return l.default.createElement(d.default,(0,o.default)({className:(0,u.default)(n.root,(0,a.default)({},n.active,t),r),component:"span",disableRipple:!0},h),c,l.default.createElement(s.default,{className:(0,u.default)(n.icon,n["iconDirection".concat((0,f.capitalize)(p))])}))}t.styles=p,h.propTypes={},h.defaultProps={active:!1,direction:"desc"};var m=(0,c.default)(p,{name:"MuiTableSortLabel"})(h);t.default=m},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.styles=void 0;var o=r(n(4)),a=r(n(7)),i=r(n(3)),l=r(n(2)),u=r(n(1)),s=r(n(6)),c=r(n(5)),d=function(e){return{root:{color:"inherit",display:"table-row",height:48,verticalAlign:"middle",outline:"none","&$selected":{backgroundColor:"light"===e.palette.type?"rgba(0, 0, 0, 0.04)":"rgba(255, 255, 255, 0.08)"},"&$hover:hover":{backgroundColor:"light"===e.palette.type?"rgba(0, 0, 0, 0.07)":"rgba(255, 255, 255, 0.14)"}},selected:{},hover:{},head:{height:56},footer:{height:56}}};function f(e,t){var n,r=e.classes,u=e.className,c=e.component,d=e.hover,f=e.selected,p=(0,i.default)(e,["classes","className","component","hover","selected"]),h=t.table,m=(0,s.default)(r.root,(n={},(0,a.default)(n,r.head,h&&h.head),(0,a.default)(n,r.footer,h&&h.footer),(0,a.default)(n,r.hover,h&&d),(0,a.default)(n,r.selected,h&&f),n),u);return l.default.createElement(c,(0,o.default)({className:m},p))}t.styles=d,f.propTypes={},f.defaultProps={component:"tr",hover:!1,selected:!1},f.contextTypes={table:u.default.object};var p=(0,c.default)(d,{name:"MuiTableRow"})(f);t.default=p},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(4)),a=r(n(3)),i=r(n(9)),l=r(n(8)),u=r(n(11)),s=r(n(10)),c=r(n(2)),d=(r(n(1)),r(n(147))),f=r(n(146)),p=r(n(31)),h=r(n(28)),m=c.default.createElement(f.default,null),v=c.default.createElement(d.default,null),y=c.default.createElement(d.default,null),g=c.default.createElement(f.default,null),b=function(e){function t(){var e,n,r;(0,i.default)(this,t);for(var o=arguments.length,a=new Array(o),l=0;l<o;l++)a[l]=arguments[l];return(0,u.default)(r,(n=r=(0,u.default)(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(a))),r.handleBackButtonClick=function(e){r.props.onChangePage(e,r.props.page-1)},r.handleNextButtonClick=function(e){r.props.onChangePage(e,r.props.page+1)},n))}return(0,s.default)(t,e),(0,l.default)(t,[{key:"render",value:function(){var e=this.props,t=e.backIconButtonProps,n=e.count,r=e.nextIconButtonProps,i=(e.onChangePage,e.page),l=e.rowsPerPage,u=e.theme,s=(0,a.default)(e,["backIconButtonProps","count","nextIconButtonProps","onChangePage","page","rowsPerPage","theme"]);return c.default.createElement("div",s,c.default.createElement(h.default,(0,o.default)({onClick:this.handleBackButtonClick,disabled:0===i},t),"rtl"===u.direction?m:v),c.default.createElement(h.default,(0,o.default)({onClick:this.handleNextButtonClick,disabled:i>=Math.ceil(n/l)-1},r),"rtl"===u.direction?y:g))}}]),t}(c.default.Component);b.propTypes={};var x=(0,p.default)()(b);t.default=x},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(280))},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.styles=void 0;var o=r(n(4)),a=r(n(3)),i=r(n(9)),l=r(n(8)),u=r(n(11)),s=r(n(10)),c=r(n(2)),d=(r(n(1)),r(n(5))),f=r(n(33)),p=r(n(94)),h=r(n(61)),m=r(n(89)),v=r(n(77)),y=r(n(18)),g=r(n(281)),b=function(e){return{root:{fontSize:e.typography.pxToRem(12),"&:last-child":{padding:0}},toolbar:{height:56,minHeight:56,paddingRight:2},spacer:{flex:"1 1 100%"},menuItem:{},caption:{flexShrink:0},input:{fontSize:"inherit",flexShrink:0},selectRoot:{marginRight:4*e.spacing.unit,marginLeft:e.spacing.unit,color:e.palette.text.secondary},select:{paddingLeft:e.spacing.unit,paddingRight:2*e.spacing.unit},selectIcon:{top:1},actions:{flexShrink:0,color:e.palette.text.secondary,marginLeft:2.5*e.spacing.unit}}};t.styles=b;var x=function(e){function t(){return(0,i.default)(this,t),(0,u.default)(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return(0,s.default)(t,e),(0,l.default)(t,[{key:"componentDidUpdate",value:function(){var e=this.props,t=e.count,n=e.onChangePage,r=e.page,o=e.rowsPerPage,a=Math.max(0,Math.ceil(t/o)-1);r>a&&n(null,a)}},{key:"render",value:function(){var e,t=this.props,n=t.ActionsComponent,r=t.backIconButtonProps,i=t.classes,l=t.colSpan,u=t.component,s=t.count,d=t.labelDisplayedRows,g=t.labelRowsPerPage,b=t.nextIconButtonProps,x=t.onChangePage,w=t.onChangeRowsPerPage,_=t.page,k=t.rowsPerPage,P=t.rowsPerPageOptions,E=t.SelectProps,O=(0,a.default)(t,["ActionsComponent","backIconButtonProps","classes","colSpan","component","count","labelDisplayedRows","labelRowsPerPage","nextIconButtonProps","onChangePage","onChangeRowsPerPage","page","rowsPerPage","rowsPerPageOptions","SelectProps"]);return u!==m.default&&"td"!==u||(e=l||1e3),c.default.createElement(u,(0,o.default)({className:i.root,colSpan:e},O),c.default.createElement(v.default,{className:i.toolbar},c.default.createElement("div",{className:i.spacer}),P.length>1&&c.default.createElement(y.default,{variant:"caption",className:i.caption},g),P.length>1&&c.default.createElement(h.default,(0,o.default)({classes:{root:i.selectRoot,select:i.select,icon:i.selectIcon},input:c.default.createElement(f.default,{className:i.input,disableUnderline:!0}),value:k,onChange:w},E),P.map(function(e){return c.default.createElement(p.default,{className:i.menuItem,key:e,value:e},e)})),c.default.createElement(y.default,{variant:"caption",className:i.caption},d({from:0===s?0:_*k+1,to:Math.min(s,(_+1)*k),count:s,page:_})),c.default.createElement(n,{className:i.actions,backIconButtonProps:r,count:s,nextIconButtonProps:b,onChangePage:x,page:_,rowsPerPage:k})))}}]),t}(c.default.Component);x.propTypes={},x.defaultProps={ActionsComponent:g.default,component:m.default,labelDisplayedRows:function(e){var t=e.from,n=e.to,r=e.count;return"".concat(t,"-").concat(n," of ").concat(r)},labelRowsPerPage:"Rows per page:",rowsPerPageOptions:[5,10,25]};var w=(0,d.default)(b,{name:"MuiTablePagination"})(x);t.default=w},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(4)),a=r(n(3)),i=r(n(9)),l=r(n(8)),u=r(n(11)),s=r(n(10)),c=r(n(2)),d=r(n(1)),f=r(n(6)),p=r(n(5)),h=function(e){function t(){return(0,i.default)(this,t),(0,u.default)(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return(0,s.default)(t,e),(0,l.default)(t,[{key:"getChildContext",value:function(){return{table:{head:!0}}}},{key:"render",value:function(){var e=this.props,t=e.classes,n=e.className,r=e.component,i=(0,a.default)(e,["classes","className","component"]);return c.default.createElement(r,(0,o.default)({className:(0,f.default)(t.root,n)},i))}}]),t}(c.default.Component);h.propTypes={},h.defaultProps={component:"thead"},h.childContextTypes={table:d.default.object};var m=(0,p.default)({root:{display:"table-header-group"}},{name:"MuiTableHead"})(h);t.default=m},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(4)),a=r(n(3)),i=r(n(9)),l=r(n(8)),u=r(n(11)),s=r(n(10)),c=r(n(2)),d=r(n(1)),f=r(n(6)),p=r(n(5)),h=function(e){function t(){return(0,i.default)(this,t),(0,u.default)(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return(0,s.default)(t,e),(0,l.default)(t,[{key:"getChildContext",value:function(){return{table:{footer:!0}}}},{key:"render",value:function(){var e=this.props,t=e.classes,n=e.className,r=e.component,i=(0,a.default)(e,["classes","className","component"]);return c.default.createElement(r,(0,o.default)({className:(0,f.default)(t.root,n)},i))}}]),t}(c.default.Component);h.propTypes={},h.defaultProps={component:"tfoot"},h.childContextTypes={table:d.default.object};var m=(0,p.default)({root:{display:"table-footer-group"}},{name:"MuiTableFooter"})(h);t.default=m},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.styles=void 0;var o=r(n(4)),a=r(n(7)),i=r(n(3)),l=r(n(2)),u=r(n(1)),s=r(n(6)),c=r(n(5)),d=n(13),f=n(32),p=function(e){return{root:{display:"table-cell",verticalAlign:"inherit",borderBottom:"1px solid\n    ".concat("light"===e.palette.type?(0,f.lighten)((0,f.fade)(e.palette.divider,1),.88):(0,f.darken)((0,f.fade)(e.palette.divider,1),.8)),textAlign:"left",padding:"".concat(e.spacing.unit/2,"px ").concat(7*e.spacing.unit,"px ").concat(e.spacing.unit/2,"px ").concat(3*e.spacing.unit,"px"),"&:last-child":{paddingRight:3*e.spacing.unit}},head:{color:e.palette.text.secondary,fontSize:e.typography.pxToRem(12),fontWeight:e.typography.fontWeightMedium},body:{color:e.palette.text.primary,fontSize:e.typography.pxToRem(13),fontWeight:e.typography.fontWeightRegular},footer:{borderBottom:0,color:e.palette.text.secondary,fontSize:e.typography.pxToRem(12)},numeric:{textAlign:"right",flexDirection:"row-reverse"},paddingDense:{paddingRight:3*e.spacing.unit},paddingCheckbox:{padding:"0 12px","&:last-child":{paddingRight:12}},paddingNone:{padding:0,"&:last-child":{padding:0}}}};function h(e,t){var n,r,u=e.children,c=e.classes,f=e.className,p=e.component,h=e.sortDirection,m=e.numeric,v=e.padding,y=e.scope,g=e.variant,b=(0,i.default)(e,["children","classes","className","component","sortDirection","numeric","padding","scope","variant"]),x=t.table;r=p||(x&&x.head?"th":"td");var w=y;!w&&x&&x.head&&(w="col");var _=(0,s.default)(c.root,(n={},(0,a.default)(n,c.head,g?"head"===g:x&&x.head),(0,a.default)(n,c.body,g?"body"===g:x&&x.body),(0,a.default)(n,c.footer,g?"footer"===g:x&&x.footer),(0,a.default)(n,c.numeric,m),(0,a.default)(n,c["padding".concat((0,d.capitalize)(v))],"default"!==v),n),f),k=null;return h&&(k="asc"===h?"ascending":"descending"),l.default.createElement(r,(0,o.default)({className:_,"aria-sort":k,scope:w},b),u)}t.styles=p,h.propTypes={},h.defaultProps={numeric:!1,padding:"default"},h.contextTypes={table:u.default.object.isRequired};var m=(0,c.default)(p,{name:"MuiTableCell"})(h);t.default=m},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(4)),a=r(n(3)),i=r(n(9)),l=r(n(8)),u=r(n(11)),s=r(n(10)),c=r(n(2)),d=r(n(1)),f=r(n(6)),p=r(n(5)),h=function(e){function t(){return(0,i.default)(this,t),(0,u.default)(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return(0,s.default)(t,e),(0,l.default)(t,[{key:"getChildContext",value:function(){return{table:{body:!0}}}},{key:"render",value:function(){var e=this.props,t=e.classes,n=e.className,r=e.component,i=(0,a.default)(e,["classes","className","component"]);return c.default.createElement(r,(0,o.default)({className:(0,f.default)(t.root,n)},i))}}]),t}(c.default.Component);h.propTypes={},h.defaultProps={component:"tbody"},h.childContextTypes={table:d.default.object};var m=(0,p.default)({root:{display:"table-row-group"}},{name:"MuiTableBody"})(h);t.default=m},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.styles=void 0;var o=r(n(4)),a=r(n(3)),i=r(n(9)),l=r(n(8)),u=r(n(11)),s=r(n(10)),c=r(n(2)),d=r(n(1)),f=r(n(6)),p=r(n(5)),h=function(e){return{root:{display:"table",fontFamily:e.typography.fontFamily,width:"100%",borderCollapse:"collapse",borderSpacing:0}}};t.styles=h;var m=function(e){function t(){return(0,i.default)(this,t),(0,u.default)(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return(0,s.default)(t,e),(0,l.default)(t,[{key:"getChildContext",value:function(){return{table:{}}}},{key:"render",value:function(){var e=this.props,t=e.classes,n=e.className,r=e.component,i=(0,a.default)(e,["classes","className","component"]);return c.default.createElement(r,(0,o.default)({className:(0,f.default)(t.root,n)},i))}}]),t}(c.default.Component);m.propTypes={},m.defaultProps={component:"table"},m.childContextTypes={table:d.default.object};var v=(0,p.default)(h,{name:"MuiTable"})(m);t.default=v},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.styles=void 0;var o=r(n(4)),a=r(n(3)),i=r(n(2)),l=(r(n(1)),r(n(6))),u=r(n(5)),s=n(13),c=r(n(110)),d=function(e){return{root:{display:"inline-flex",width:62,position:"relative",flexShrink:0,verticalAlign:"middle"},icon:{boxShadow:e.shadows[1],backgroundColor:"currentColor",width:20,height:20,borderRadius:"50%"},iconChecked:{boxShadow:e.shadows[2]},switchBase:{zIndex:1,color:"light"===e.palette.type?e.palette.grey[50]:e.palette.grey[400],transition:e.transitions.create("transform",{duration:e.transitions.duration.shortest})},checked:{transform:"translateX(14px)","& + $bar":{opacity:.5}},colorPrimary:{"&$checked":{color:e.palette.primary.main,"& + $bar":{backgroundColor:e.palette.primary.main}}},colorSecondary:{"&$checked":{color:e.palette.secondary.main,"& + $bar":{backgroundColor:e.palette.secondary.main}}},disabled:{"& + $bar":{opacity:"light"===e.palette.type?.12:.1},"& $icon":{boxShadow:e.shadows[1]},"&$switchBase":{color:"light"===e.palette.type?e.palette.grey[400]:e.palette.grey[800],"& + $bar":{backgroundColor:"light"===e.palette.type?e.palette.common.black:e.palette.common.white}}},bar:{borderRadius:7,display:"block",position:"absolute",width:34,height:14,top:"50%",left:"50%",marginTop:-7,marginLeft:-17,transition:e.transitions.create(["opacity","background-color"],{duration:e.transitions.duration.shortest}),backgroundColor:"light"===e.palette.type?e.palette.common.black:e.palette.common.white,opacity:"light"===e.palette.type?.38:.3}}};function f(e){var t=e.classes,n=e.className,r=e.color,u=(0,a.default)(e,["classes","className","color"]);return i.default.createElement("span",{className:(0,l.default)(t.root,n)},i.default.createElement(c.default,(0,o.default)({icon:i.default.createElement("span",{className:t.icon}),classes:{root:(0,l.default)(t.switchBase,t["color".concat((0,s.capitalize)(r))]),checked:t.checked,disabled:t.disabled},checkedIcon:i.default.createElement("span",{className:(0,l.default)(t.icon,t.iconChecked)})},u)),i.default.createElement("span",{className:t.bar}))}t.styles=d,f.propTypes={},f.defaultProps={color:"secondary"};var p=(0,u.default)(d,{name:"MuiSwitch"})(f);t.default=p},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.styles=void 0;var o=r(n(4)),a=r(n(7)),i=r(n(3)),l=r(n(2)),u=(r(n(1)),r(n(6))),s=r(n(5)),c=n(13),d=n(107),f=function(e){return{root:{position:"fixed",top:0,left:0,height:"100vh",zIndex:e.zIndex.drawer-1},discoveryAnchorLeft:{right:"auto"},discoveryAnchorRight:{left:"auto",right:0},discoveryAnchorTop:{bottom:"auto",right:0},discoveryAnchorBottom:{top:"auto",bottom:0,right:0}}};function p(e){var t=e.anchor,n=e.classes,r=e.swipeAreaWidth,s=(0,i.default)(e,["anchor","classes","swipeAreaWidth"]);return l.default.createElement("div",(0,o.default)({className:(0,u.default)(n.root,n["discoveryAnchor".concat((0,c.capitalize)(t))]),style:(0,a.default)({},(0,d.isHorizontal)(e)?"width":"height",r)},s))}t.styles=f,p.propTypes={};var h=(0,s.default)(f)(p);t.default=h},function(e,t,n){"use strict";var r=n(58),o=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.reset=function(){w=null},t.default=void 0;var a=o(n(4)),i=o(n(12)),l=o(n(3)),u=o(n(9)),s=o(n(8)),c=o(n(11)),d=o(n(10)),f=o(n(52)),p=o(n(2)),h=(o(n(1)),o(n(15))),m=r(n(107)),v=n(25),y=o(n(31)),g=n(39),b=o(n(289)),x=3,w=null;var _=function(e){function t(){var e,n,r;(0,u.default)(this,t);for(var o=arguments.length,a=new Array(o),i=0;i<o;i++)a[i]=arguments[i];return(0,c.default)(r,(n=r=(0,c.default)(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(a))),r.state={},r.handleBodyTouchStart=function(e){if(null===w||w===(0,f.default)(r)){var t=r.props,n=t.disableDiscovery,o=t.disableSwipeToOpen,a=t.open,i=t.swipeAreaWidth,l=(0,m.getAnchor)(r.props),u="right"===l?document.body.offsetWidth-e.touches[0].pageX:e.touches[0].pageX,s="bottom"===l?window.innerHeight-e.touches[0].clientY:e.touches[0].clientY;if(!a){if(o)return;if((0,m.isHorizontal)(r.props)){if(u>i)return}else if(s>i)return}w=(0,f.default)(r),r.startX=u,r.startY=s,r.setState({maybeSwiping:!0}),!a&&r.paper&&r.setPosition(r.getMaxTranslate()+(n?20:-i),{changeTransition:!1}),document.body.addEventListener("touchmove",r.handleBodyTouchMove,{passive:!1}),document.body.addEventListener("touchend",r.handleBodyTouchEnd),document.body.addEventListener("touchcancel",r.handleBodyTouchEnd)}},r.handleBodyTouchMove=function(e){if(r.paper){var t=(0,m.getAnchor)(r.props),n=(0,m.isHorizontal)(r.props),o="right"===t?document.body.offsetWidth-e.touches[0].pageX:e.touches[0].pageX,a="bottom"===t?window.innerHeight-e.touches[0].clientY:e.touches[0].clientY;if(null==r.isSwiping){var i=Math.abs(o-r.startX),l=Math.abs(a-r.startY);i>l&&e.preventDefault();var u=n?i>l&&i>x:l>i&&l>x;if(!0===u||(n?l>x:i>x)){if(r.isSwiping=u,!u)return void r.handleBodyTouchEnd(e);r.startX=o,r.startY=a,r.props.disableDiscovery||r.props.open||(n?r.startX-=r.props.swipeAreaWidth:r.startY-=r.props.swipeAreaWidth)}}r.isSwiping&&(e.preventDefault(),r.setPosition(r.getTranslate(n?o:a)))}},r.handleBodyTouchEnd=function(e){if(w=null,r.removeBodyTouchListeners(),r.setState({maybeSwiping:!1}),r.isSwiping){var t,n=(0,m.getAnchor)(r.props);t=(0,m.isHorizontal)(r.props)?"right"===n?document.body.offsetWidth-e.changedTouches[0].pageX:e.changedTouches[0].pageX:"bottom"===n?window.innerHeight-e.changedTouches[0].clientY:e.changedTouches[0].clientY,r.getTranslate(t)/r.getMaxTranslate()>.5?r.isSwiping&&!r.props.open?r.setPosition(r.getMaxTranslate(),{mode:"enter"}):r.props.onClose():r.isSwiping&&!r.props.open?r.props.onOpen():r.setPosition(0,{mode:"exit"}),r.isSwiping=null}else r.isSwiping=null},r.backdrop=null,r.paper=null,r.isSwiping=null,r.startX=null,r.startY=null,r.handleBackdropRef=function(e){r.backdrop=e?h.default.findDOMNode(e):null},r.handlePaperRef=function(e){r.paper=e?h.default.findDOMNode(e):null},n))}return(0,d.default)(t,e),(0,s.default)(t,[{key:"componentDidMount",value:function(){"temporary"===this.props.variant&&this.listenTouchStart()}},{key:"componentDidUpdate",value:function(e){var t=this.props.variant,n=e.variant;t!==n&&("temporary"===t?this.listenTouchStart():"temporary"===n&&this.removeTouchStart())}},{key:"componentWillUnmount",value:function(){this.removeTouchStart(),this.removeBodyTouchListeners(),w===this&&(w=null)}},{key:"getMaxTranslate",value:function(){return(0,m.isHorizontal)(this.props)?this.paper.clientWidth:this.paper.clientHeight}},{key:"getTranslate",value:function(e){var t=(0,m.isHorizontal)(this.props)?this.startX:this.startY;return Math.min(Math.max(this.props.open?t-e:this.getMaxTranslate()+t-e,0),this.getMaxTranslate())}},{key:"setPosition",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.mode,r=void 0===n?null:n,o=t.changeTransition,a=void 0===o||o,i=(0,m.getAnchor)(this.props),l=-1!==["right","bottom"].indexOf(i)?1:-1,u=(0,m.isHorizontal)(this.props)?"translate(".concat(l*e,"px, 0)"):"translate(0, ".concat(l*e,"px)"),s=this.paper.style;s.webkitTransform=u,s.transform=u;var c="";if(r&&(c=this.props.theme.transitions.create("all",(0,g.getTransitionProps)({timeout:this.props.transitionDuration},{mode:r}))),a&&(s.webkitTransition=c,s.transition=c),!this.props.disableBackdropTransition){var d=this.backdrop.style;d.opacity=1-e/this.getMaxTranslate(),a&&(d.webkitTransition=c,d.transition=c)}}},{key:"listenTouchStart",value:function(){document.body.addEventListener("touchstart",this.handleBodyTouchStart)}},{key:"removeTouchStart",value:function(){document.body.removeEventListener("touchstart",this.handleBodyTouchStart)}},{key:"removeBodyTouchListeners",value:function(){document.body.removeEventListener("touchmove",this.handleBodyTouchMove,{passive:!1}),document.body.removeEventListener("touchend",this.handleBodyTouchEnd),document.body.removeEventListener("touchcancel",this.handleBodyTouchEnd)}},{key:"render",value:function(){var e=this.props,t=(e.disableBackdropTransition,e.disableDiscovery),n=e.disableSwipeToOpen,r=e.ModalProps,o=(r=void 0===r?{}:r).BackdropProps,u=(0,l.default)(r,["BackdropProps"]),s=(e.onOpen,e.open),c=e.PaperProps,d=e.swipeAreaWidth,f=e.variant,h=(0,l.default)(e,["disableBackdropTransition","disableDiscovery","disableSwipeToOpen","ModalProps","onOpen","open","PaperProps","swipeAreaWidth","variant"]),v=this.state.maybeSwiping;return p.default.createElement(p.default.Fragment,null,p.default.createElement(m.default,(0,a.default)({open:!("temporary"!==f||!v)||s,variant:f,ModalProps:(0,i.default)({BackdropProps:(0,i.default)({},o,{ref:this.handleBackdropRef})},u),PaperProps:(0,i.default)({},c,{style:{pointerEvents:"temporary"!==f||s?"":"none"},ref:this.handlePaperRef})},h)),!t&&!n&&"temporary"===f&&p.default.createElement(b.default,{anchor:h.anchor,swipeAreaWidth:d}))}}],[{key:"getDerivedStateFromProps",value:function(e,t){return void 0===t.maybeSwiping?{maybeSwiping:!1,open:e.open}:!e.open&&t.open?{maybeSwiping:!1,open:e.open}:{open:e.open}}}]),t}(p.default.Component);_.propTypes={},_.defaultProps={anchor:"left",disableBackdropTransition:!1,disableDiscovery:!1,disableSwipeToOpen:"undefined"!=typeof navigator&&/iPad|iPhone|iPod/.test(navigator.userAgent),swipeAreaWidth:20,transitionDuration:{enter:v.duration.enteringScreen,exit:v.duration.leavingScreen},variant:"temporary"};var k=(0,y.default)()(_);t.default=k},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.styles=void 0;var o=r(n(4)),a=r(n(12)),i=r(n(7)),l=r(n(3)),u=r(n(2)),s=(r(n(1)),r(n(6))),c=r(n(5)),d=r(n(21)),f=r(n(90)),p=function(e){return{root:{display:"flex",padding:3*e.spacing.unit},horizontal:{flexDirection:"row",alignItems:"center"},vertical:{flexDirection:"column"},alternativeLabel:{alignItems:"flex-start"}}};function h(e){var t=e.activeStep,n=e.alternativeLabel,r=e.children,c=e.classes,f=e.className,p=e.connector,h=e.nonLinear,m=e.orientation,v=(0,l.default)(e,["activeStep","alternativeLabel","children","classes","className","connector","nonLinear","orientation"]),y=(0,s.default)(c.root,c[m],(0,i.default)({},c.alternativeLabel,n),f),g=u.default.isValidElement(p)?u.default.cloneElement(p,{orientation:m}):null,b=u.default.Children.toArray(r),x=b.map(function(e,r){var o={index:r,orientation:m,active:!1,completed:!1,disabled:!1,last:r+1===b.length,alternativeLabel:n,connector:p};return t===r?o.active=!0:!h&&t>r?o.completed=!0:!h&&t<r&&(o.disabled=!0),[!n&&g&&r>0&&u.default.cloneElement(g,{key:r}),u.default.cloneElement(e,(0,a.default)({},o,e.props))]});return u.default.createElement(d.default,(0,o.default)({square:!0,elevation:0,className:y},v),x)}t.styles=p,h.propTypes={},h.defaultProps={activeStep:0,alternativeLabel:!1,connector:u.default.createElement(f.default,null),nonLinear:!1,orientation:"horizontal"},h.muiName="Stepper";var m=(0,c.default)(p,{name:"MuiStepper"})(h);t.default=m},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.styles=void 0;var o=r(n(4)),a=r(n(7)),i=r(n(3)),l=r(n(2)),u=(r(n(1)),r(n(14)),r(n(6))),s=r(n(67)),c=r(n(5)),d=function(e){return{root:{marginTop:e.spacing.unit,marginLeft:12,paddingLeft:e.spacing.unit+12,paddingRight:e.spacing.unit,borderLeft:"1px solid ".concat("light"===e.palette.type?e.palette.grey[400]:e.palette.grey[600])},last:{borderLeft:"none"},transition:{}}};function f(e){var t=e.active,n=(e.alternativeLabel,e.children),r=e.classes,s=e.className,c=(e.completed,e.last),d=(e.optional,e.orientation,e.TransitionComponent),f=e.transitionDuration,p=e.TransitionProps,h=(0,i.default)(e,["active","alternativeLabel","children","classes","className","completed","last","optional","orientation","TransitionComponent","transitionDuration","TransitionProps"]),m=f;return"auto"!==f||d.muiSupportAuto||(m=void 0),l.default.createElement("div",(0,o.default)({className:(0,u.default)(r.root,(0,a.default)({},r.last,c),s)},h),l.default.createElement(d,(0,o.default)({in:t,className:r.transition,timeout:m,unmountOnExit:!0},p),n))}t.styles=d,f.propTypes={},f.defaultProps={TransitionComponent:s.default,transitionDuration:"auto"};var p=(0,c.default)(d,{name:"MuiStepContent"})(f);t.default=p},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.styles=void 0;var o=r(n(4)),a=r(n(7)),i=r(n(3)),l=r(n(2)),u=(r(n(1)),r(n(6))),s=r(n(5)),c=function(e){return{root:{flex:"1 1 auto"},horizontal:{},vertical:{marginLeft:12,padding:"0 0 ".concat(e.spacing.unit,"px")},alternativeLabel:{position:"absolute",top:e.spacing.unit+4,left:"calc(50% + 20px)",right:"calc(-50% + 20px)"},line:{display:"block",borderColor:"light"===e.palette.type?e.palette.grey[400]:e.palette.grey[600]},lineHorizontal:{borderTopStyle:"solid",borderTopWidth:1},lineVertical:{borderLeftStyle:"solid",borderLeftWidth:1,minHeight:3*e.spacing.unit}}};function d(e){var t,n=e.alternativeLabel,r=e.className,s=e.classes,c=e.orientation,d=(0,i.default)(e,["alternativeLabel","className","classes","orientation"]),f=(0,u.default)(s.root,s[c],(0,a.default)({},s.alternativeLabel,n),r),p=(0,u.default)(s.line,(t={},(0,a.default)(t,s.lineHorizontal,"horizontal"===c),(0,a.default)(t,s.lineVertical,"vertical"===c),t));return l.default.createElement("div",(0,o.default)({className:f},d),l.default.createElement("span",{className:p}))}t.styles=c,d.propTypes={},d.defaultProps={alternativeLabel:!1,orientation:"horizontal"};var f=(0,s.default)(c,{name:"MuiStepConnector"})(d);t.default=f},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.styles=void 0;var o=r(n(2)),a=(r(n(1)),r(n(6))),i=r(n(5)),l=r(n(16)),u=function(e){return{root:{color:e.palette.text.disabled},text:{fill:e.palette.primary.contrastText,fontSize:e.typography.caption.fontSize,fontFamily:e.typography.fontFamily}}};t.styles=u;var s=o.default.createElement("circle",{cx:"12",cy:"12",r:"12"});function c(e){var t=e.position,n=e.classes,r=e.className;return o.default.createElement(l.default,{className:(0,a.default)(n.root,r)},s,o.default.createElement("text",{className:n.text,x:"12",y:"16",textAnchor:"middle"},t))}c.propTypes={};var d=(0,i.default)(u)(c);t.default=d},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(2)),a=r(n(19)),i=r(n(16)),l=o.default.createElement("path",{d:"M1 21h22L12 2 1 21zm12-3h-2v-2h2v2zm0-4h-2v-4h2v4z"}),u=function(e){return o.default.createElement(i.default,e,l)};(u=(0,a.default)(u)).muiName="SvgIcon";var s=u;t.default=s},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(2)),a=r(n(19)),i=r(n(16)),l=o.default.createElement("path",{d:"M12 0a12 12 0 1 0 0 24 12 12 0 0 0 0-24zm-2 17l-5-5 1.4-1.4 3.6 3.6 7.6-7.6L19 8l-9 9z"}),u=function(e){return o.default.createElement(i.default,e,l)};(u=(0,a.default)(u)).muiName="SvgIcon";var s=u;t.default=s},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.styles=void 0;var o=r(n(7)),a=r(n(2)),i=(r(n(1)),r(n(6))),l=r(n(296)),u=r(n(295)),s=r(n(5)),c=r(n(294)),d=function(e){return{root:{display:"block","&$active":{color:e.palette.primary.main},"&$completed":{color:e.palette.primary.main},"&$error":{color:e.palette.error.main}},active:{},completed:{},error:{}}};function f(e){var t=e.completed,n=e.icon,r=e.active,s=e.error,d=e.classes;return"number"==typeof n||"string"==typeof n?s?a.default.createElement(u.default,{className:(0,i.default)(d.root,d.error)}):t?a.default.createElement(l.default,{className:(0,i.default)(d.root,d.completed)}):a.default.createElement(c.default,{className:(0,i.default)(d.root,(0,o.default)({},d.active,r)),position:n}):n}t.styles=d,f.propTypes={},f.defaultProps={active:!1,completed:!1,error:!1};var p=(0,s.default)(d,{name:"MuiStepIcon"})(f);t.default=p},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.styles=void 0;var o=r(n(4)),a=r(n(7)),i=r(n(3)),l=r(n(2)),u=(r(n(1)),r(n(6))),s=r(n(5)),c=r(n(18)),d=r(n(91)),f=function(e){return{root:{display:"flex",alignItems:"center","&$alternativeLabel":{flexDirection:"column"},"&$disabled":{cursor:"default"}},horizontal:{},vertical:{},active:{},completed:{},alternativeLabel:{},error:{},disabled:{},label:{color:e.palette.text.secondary,"&$active":{color:e.palette.text.primary,fontWeight:500},"&$completed":{color:e.palette.text.primary,fontWeight:500},"&$alternativeLabel":{textAlign:"center",marginTop:2*e.spacing.unit},"&$error":{color:e.palette.error.main}},iconContainer:{paddingRight:e.spacing.unit,"&$alternativeLabel":{paddingRight:0}},labelContainer:{width:"100%"}}};function p(e){var t,n,r=e.active,s=e.alternativeLabel,f=e.children,p=e.classes,h=e.className,m=e.completed,v=e.disabled,y=e.error,g=e.icon,b=(e.last,e.optional),x=e.orientation,w=e.StepIconProps,_=(0,i.default)(e,["active","alternativeLabel","children","classes","className","completed","disabled","error","icon","last","optional","orientation","StepIconProps"]);return l.default.createElement("span",(0,o.default)({className:(0,u.default)(p.root,p[x],(t={},(0,a.default)(t,p.disabled,v),(0,a.default)(t,p.alternativeLabel,s),(0,a.default)(t,p.error,y),t),h)},_),g&&l.default.createElement("span",{className:(0,u.default)(p.iconContainer,(0,a.default)({},p.alternativeLabel,s))},l.default.createElement(d.default,(0,o.default)({completed:m,active:r,error:y,icon:g},w))),l.default.createElement("span",{className:p.labelContainer},l.default.createElement(c.default,{variant:"body1",component:"span",className:(0,u.default)(p.label,(n={},(0,a.default)(n,p.alternativeLabel,s),(0,a.default)(n,p.completed,m),(0,a.default)(n,p.active,r),(0,a.default)(n,p.error,y),n))},f),b))}t.styles=f,p.propTypes={},p.defaultProps={active:!1,alternativeLabel:!1,completed:!1,disabled:!1,error:!1,last:!1,orientation:"horizontal"},p.muiName="StepLabel";var h=(0,s.default)(f,{name:"MuiStepLabel"})(p);t.default=h},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.styles=void 0;var o=r(n(4)),a=r(n(7)),i=r(n(3)),l=r(n(2)),u=(r(n(1)),r(n(6))),s=r(n(5)),c=r(n(20)),d=r(n(92)),f=n(35),p=function(e){return{root:{width:"100%",padding:"".concat(3*e.spacing.unit,"px ").concat(2*e.spacing.unit,"px"),margin:"".concat(3*-e.spacing.unit,"px ").concat(2*-e.spacing.unit,"px"),boxSizing:"content-box"},vertical:{justifyContent:"left"},touchRipple:{color:"rgba(0, 0, 0, 0.3)"}}};function h(e){var t=e.active,n=e.alternativeLabel,r=e.children,s=e.classes,p=e.className,h=e.completed,m=e.disabled,v=e.icon,y=(e.last,e.optional),g=e.orientation,b=(0,i.default)(e,["active","alternativeLabel","children","classes","className","completed","disabled","icon","last","optional","orientation"]),x={active:t,alternativeLabel:n,completed:h,disabled:m,icon:v,optional:y,orientation:g},w=(0,f.isMuiElement)(r,["StepLabel"])?l.default.cloneElement(r,x):l.default.createElement(d.default,x,r);return l.default.createElement(c.default,(0,o.default)({disabled:m,TouchRippleProps:{className:s.touchRipple},className:(0,u.default)(s.root,(0,a.default)({},s.vertical,"vertical"===g),p)},b),w)}t.styles=p,h.propTypes={};var m=(0,s.default)(p,{name:"MuiStepButton"})(h);t.default=m},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.styles=void 0;var o=r(n(4)),a=r(n(12)),i=r(n(7)),l=r(n(3)),u=r(n(2)),s=(r(n(1)),r(n(6))),c=r(n(5)),d=function(e){return{root:{},horizontal:{paddingLeft:e.spacing.unit,paddingRight:e.spacing.unit,"&:first-child":{paddingLeft:0},"&:last-child":{paddingRight:0}},vertical:{},alternativeLabel:{flex:1,position:"relative"}}};function f(e){var t=e.active,n=e.alternativeLabel,r=e.children,c=e.classes,d=e.className,f=e.completed,p=e.connector,h=e.disabled,m=e.index,v=e.last,y=e.orientation,g=(0,l.default)(e,["active","alternativeLabel","children","classes","className","completed","connector","disabled","index","last","orientation"]),b=(0,s.default)(c.root,c[y],(0,i.default)({},c.alternativeLabel,n),d);return u.default.createElement("div",(0,o.default)({className:b},g),u.default.Children.map(r,function(e){return u.default.cloneElement(e,(0,a.default)({active:t,alternativeLabel:n,completed:f,disabled:h,icon:m+1,last:v,orientation:y},e.props))}),p&&n&&!v&&u.default.cloneElement(p,{orientation:y,alternativeLabel:n}))}t.styles=d,f.propTypes={},f.defaultProps={active:!1,completed:!1,disabled:!1};var p=(0,c.default)(d,{name:"MuiStep"})(f);t.default=p},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.styles=void 0;var o=r(n(4)),a=r(n(3)),i=r(n(7)),l=r(n(2)),u=(r(n(1)),r(n(6))),s=r(n(5)),c=r(n(21)),d=r(n(18)),f=n(32),p=function(e){var t,n="light"===e.palette.type?.8:.98,r=(0,f.emphasize)(e.palette.background.default,n);return{root:(t={pointerEvents:"initial",color:e.palette.getContrastText(r),backgroundColor:r,display:"flex",alignItems:"center",flexWrap:"wrap",padding:"6px ".concat(3*e.spacing.unit,"px")},(0,i.default)(t,e.breakpoints.up("md"),{minWidth:288,maxWidth:568,borderRadius:2}),(0,i.default)(t,e.breakpoints.down("sm"),{flexGrow:1}),t),message:{padding:"".concat(e.spacing.unit,"px 0")},action:{display:"flex",alignItems:"center",marginLeft:"auto",paddingLeft:3*e.spacing.unit,marginRight:-e.spacing.unit}}};function h(e){var t=e.action,n=e.classes,r=e.className,i=e.message,s=(0,a.default)(e,["action","classes","className","message"]);return l.default.createElement(c.default,(0,o.default)({component:d.default,headlineMapping:{body1:"div"},role:"alertdialog",square:!0,elevation:6,className:(0,u.default)(n.root,r)},s),l.default.createElement("div",{className:n.message},i),t?l.default.createElement("div",{className:n.action},t):null)}t.styles=p,h.propTypes={};var m=(0,s.default)(p,{name:"MuiSnackbarContent"})(h);t.default=m},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.styles=void 0;var o=r(n(4)),a=r(n(3)),i=r(n(9)),l=r(n(8)),u=r(n(11)),s=r(n(10)),c=r(n(7)),d=r(n(12)),f=r(n(2)),p=(r(n(1)),r(n(6))),h=r(n(23)),m=r(n(5)),v=n(25),y=r(n(108)),g=n(13),b=r(n(65)),x=r(n(93)),w=function(e){var t=3*e.spacing.unit,n={top:0},r={bottom:0},o={justifyContent:"flex-end"},a={justifyContent:"flex-start"},i={top:t},l={bottom:t},u={right:t},s={left:t},f={left:"50%",right:"auto",transform:"translateX(-50%)"};return{root:{zIndex:e.zIndex.snackbar,position:"fixed",display:"flex",left:0,right:0,justifyContent:"center",alignItems:"center"},anchorOriginTopCenter:(0,d.default)({},n,(0,c.default)({},e.breakpoints.up("md"),(0,d.default)({},f))),anchorOriginBottomCenter:(0,d.default)({},r,(0,c.default)({},e.breakpoints.up("md"),(0,d.default)({},f))),anchorOriginTopRight:(0,d.default)({},n,o,(0,c.default)({},e.breakpoints.up("md"),(0,d.default)({left:"auto"},i,u))),anchorOriginBottomRight:(0,d.default)({},r,o,(0,c.default)({},e.breakpoints.up("md"),(0,d.default)({left:"auto"},l,u))),anchorOriginTopLeft:(0,d.default)({},n,a,(0,c.default)({},e.breakpoints.up("md"),(0,d.default)({right:"auto"},i,s))),anchorOriginBottomLeft:(0,d.default)({},r,a,(0,c.default)({},e.breakpoints.up("md"),(0,d.default)({right:"auto"},l,s)))}};t.styles=w;var _=function(e){function t(){var e,n,r;(0,i.default)(this,t);for(var o=arguments.length,a=new Array(o),l=0;l<o;l++)a[l]=arguments[l];return(0,u.default)(r,(n=r=(0,u.default)(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(a))),r.state={},r.timerAutoHide=null,r.handleMouseEnter=function(e){r.props.onMouseEnter&&r.props.onMouseEnter(e),r.handlePause()},r.handleMouseLeave=function(e){r.props.onMouseLeave&&r.props.onMouseLeave(e),r.handleResume()},r.handleClickAway=function(e){r.props.onClose&&r.props.onClose(e,"clickaway")},r.handlePause=function(){clearTimeout(r.timerAutoHide)},r.handleResume=function(){if(null!=r.props.autoHideDuration){if(void 0!==r.props.resumeHideDuration)return void r.setAutoHideTimer(r.props.resumeHideDuration);r.setAutoHideTimer(.5*(r.props.autoHideDuration||0))}},r.handleExited=function(){r.setState({exited:!0})},n))}return(0,s.default)(t,e),(0,l.default)(t,[{key:"componentDidMount",value:function(){this.props.open&&this.setAutoHideTimer()}},{key:"componentDidUpdate",value:function(e){e.open!==this.props.open&&(this.props.open?this.setAutoHideTimer():clearTimeout(this.timerAutoHide))}},{key:"componentWillUnmount",value:function(){clearTimeout(this.timerAutoHide)}},{key:"setAutoHideTimer",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;this.props.onClose&&null!=this.props.autoHideDuration&&(clearTimeout(this.timerAutoHide),this.timerAutoHide=setTimeout(function(){e.props.onClose&&null!=e.props.autoHideDuration&&e.props.onClose(null,"timeout")},t||this.props.autoHideDuration||0))}},{key:"render",value:function(){var e=this.props,t=e.action,n=e.anchorOrigin,r=n.vertical,i=n.horizontal,l=(e.autoHideDuration,e.children),u=e.classes,s=e.className,c=e.ContentProps,d=e.disableWindowBlurListener,m=e.message,v=(e.onClose,e.onEnter),b=e.onEntered,w=e.onEntering,_=e.onExit,k=e.onExited,P=e.onExiting,E=(e.onMouseEnter,e.onMouseLeave,e.open),O=(e.resumeHideDuration,e.TransitionComponent),C=e.transitionDuration,S=e.TransitionProps,T=(0,a.default)(e,["action","anchorOrigin","autoHideDuration","children","classes","className","ContentProps","disableWindowBlurListener","message","onClose","onEnter","onEntered","onEntering","onExit","onExited","onExiting","onMouseEnter","onMouseLeave","open","resumeHideDuration","TransitionComponent","transitionDuration","TransitionProps"]);return!E&&this.state.exited?null:f.default.createElement(y.default,{onClickAway:this.handleClickAway},f.default.createElement("div",(0,o.default)({className:(0,p.default)(u.root,u["anchorOrigin".concat((0,g.capitalize)(r)).concat((0,g.capitalize)(i))],s),onMouseEnter:this.handleMouseEnter,onMouseLeave:this.handleMouseLeave},T),f.default.createElement(h.default,{target:"window",onFocus:d?void 0:this.handleResume,onBlur:d?void 0:this.handlePause}),f.default.createElement(O,(0,o.default)({appear:!0,in:E,onEnter:v,onEntered:b,onEntering:w,onExit:_,onExited:(0,g.createChainedFunction)(this.handleExited,k),onExiting:P,timeout:C,direction:"top"===r?"down":"up"},S),l||f.default.createElement(x.default,(0,o.default)({message:m,action:t},c)))))}}],[{key:"getDerivedStateFromProps",value:function(e,t){return void 0===t.exited?{exited:!e.open}:e.open?{exited:!1}:null}}]),t}(f.default.Component);_.propTypes={},_.defaultProps={anchorOrigin:{vertical:"bottom",horizontal:"center"},disableWindowBlurListener:!1,TransitionComponent:b.default,transitionDuration:{enter:v.duration.enteringScreen,exit:v.duration.leavingScreen}};var k=(0,m.default)(w,{flip:!1,name:"MuiSnackbar"})(_);t.default=k},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(4)),a=r(n(7)),i=r(n(3)),l=r(n(12)),u=r(n(74)),s=r(n(9)),c=r(n(8)),d=r(n(11)),f=r(n(10)),p=r(n(2)),h=(r(n(1)),r(n(6))),m=r(n(49)),v=r(n(167)),y=n(106),g=function(e){function t(){var e,n,r;(0,s.default)(this,t);for(var o=arguments.length,a=new Array(o),i=0;i<o;i++)a[i]=arguments[i];return(0,d.default)(r,(n=r=(0,d.default)(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(a))),r.state={open:!1},r.ignoreNextBlur=!1,r.displayNode=null,r.displayWidth=null,r.isOpenControlled=void 0!==r.props.open,r.updateDisplayWidth=function(){r.displayNode&&(r.displayWidth=r.displayNode.clientWidth)},r.update=r.isOpenControlled?function(e){var t=e.event;e.open?r.props.onOpen(t):r.props.onClose(t)}:function(e){var t=e.open;return r.setState({open:t})},r.handleClick=function(e){r.ignoreNextBlur=!0,r.update({open:!0,event:e})},r.handleClose=function(e){r.update({open:!1,event:e})},r.handleItemClick=function(e){return function(t){r.props.multiple||r.update({open:!1,event:t});var n=r.props,o=n.onChange,a=n.name;if(o){var i,s;if(t.target&&(s=t.target),r.props.multiple){var c=(i=Array.isArray(r.props.value)?(0,u.default)(r.props.value):[]).indexOf(e.props.value);-1===c?i.push(e.props.value):i.splice(c,1)}else i=e.props.value;t.persist(),t.target=(0,l.default)({},s,{value:i,name:a}),o(t,e)}}},r.handleBlur=function(e){if(!0===r.ignoreNextBlur)return e.stopPropagation(),void(r.ignoreNextBlur=!1);r.props.onBlur&&r.props.onBlur(e)},r.handleKeyDown=function(e){r.props.readOnly||-1!==["space","up","down"].indexOf((0,m.default)(e))&&(e.preventDefault(),r.ignoreNextBlur=!0,r.update({open:!0,event:e}))},r.handleDisplayRef=function(e){r.displayNode=e,r.updateDisplayWidth()},r.handleInputRef=function(e){var t=r.props.inputRef;if(t){var n={node:e,value:r.props.value};"function"==typeof t?t(n):t.current=n}},n))}return(0,f.default)(t,e),(0,c.default)(t,[{key:"componentDidMount",value:function(){this.isOpenControlled&&this.props.open&&(this.displayNode.focus(),this.forceUpdate()),this.props.autoFocus&&this.displayNode.focus()}},{key:"shouldComponentUpdate",value:function(){return this.updateDisplayWidth(),!0}},{key:"render",value:function(){var e,t=this,n=this.props,r=n.autoWidth,u=n.children,s=n.classes,c=n.className,d=n.disabled,f=n.displayEmpty,m=n.IconComponent,g=(n.inputRef,n.MenuProps),b=void 0===g?{}:g,x=n.multiple,w=n.name,_=(n.onBlur,n.onChange,n.onClose,n.onFocus),k=(n.onOpen,n.open),P=n.readOnly,E=n.renderValue,O=n.SelectDisplayProps,C=n.tabIndex,S=n.type,T=void 0===S?"hidden":S,M=n.value,j=(0,i.default)(n,["autoWidth","children","classes","className","disabled","displayEmpty","IconComponent","inputRef","MenuProps","multiple","name","onBlur","onChange","onClose","onFocus","onOpen","open","readOnly","renderValue","SelectDisplayProps","tabIndex","type","value"]),N=this.isOpenControlled&&this.displayNode?k:this.state.open,L="",R=[],D=!1;((0,y.isFilled)(this.props)||f)&&(E?e=E(M):D=!0);var A=p.default.Children.map(u,function(e){if(!p.default.isValidElement(e))return null;var n;if(x){if(!Array.isArray(M))throw new Error("Material-UI: the `value` property must be an array when using the `Select` component with `multiple`.");(n=-1!==M.indexOf(e.props.value))&&D&&R.push(e.props.children)}else(n=M===e.props.value)&&D&&(L=e.props.children);return p.default.cloneElement(e,{onClick:t.handleItemClick(e),role:"option",selected:n,value:void 0,"data-value":e.props.value})});D&&(e=x?R.join(", "):L);var I,F=this.displayNode&&!r?this.displayWidth:void 0;return I=void 0!==C?C:d?null:0,p.default.createElement("div",{className:s.root},p.default.createElement("div",(0,o.default)({className:(0,h.default)(s.select,s.selectMenu,(0,a.default)({},s.disabled,d),c),ref:this.handleDisplayRef,"aria-pressed":N?"true":"false",tabIndex:I,role:"button","aria-owns":N?"menu-".concat(w||""):null,"aria-haspopup":"true",onKeyDown:this.handleKeyDown,onBlur:this.handleBlur,onClick:d||P?null:this.handleClick,onFocus:_},O),e||p.default.createElement("span",{dangerouslySetInnerHTML:{__html:"&#8203;"}})),p.default.createElement("input",(0,o.default)({value:Array.isArray(M)?M.join(","):M,name:w,readOnly:P,ref:this.handleInputRef,type:T},j)),p.default.createElement(m,{className:s.icon}),p.default.createElement(v.default,(0,o.default)({id:"menu-".concat(w||""),anchorEl:this.displayNode,open:N,onClose:this.handleClose},b,{MenuListProps:(0,l.default)({role:"listbox"},b.MenuListProps),PaperProps:(0,l.default)({},b.PaperProps,{style:(0,l.default)({minWidth:F},null!=b.PaperProps?b.PaperProps.style:null)})}),A))}}]),t}(p.default.Component);g.propTypes={};var b=g;t.default=b},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.styles=void 0;var o=r(n(12)),a=r(n(3)),i=r(n(2)),l=(r(n(1)),r(n(303))),u=r(n(5)),s=r(n(162)),c=r(n(33)),d=n(164),f=r(n(163)),p=d.styles;function h(e){var t=e.autoWidth,n=e.children,r=e.classes,u=e.displayEmpty,s=e.IconComponent,c=e.input,d=e.inputProps,p=e.MenuProps,h=e.multiple,m=e.native,v=e.onClose,y=e.onOpen,g=e.open,b=e.renderValue,x=e.SelectDisplayProps,w=(0,a.default)(e,["autoWidth","children","classes","displayEmpty","IconComponent","input","inputProps","MenuProps","multiple","native","onClose","onOpen","open","renderValue","SelectDisplayProps"]),_=m?f.default:l.default,k={children:n,classes:r,IconComponent:s,type:void 0};return i.default.cloneElement(c,(0,o.default)({inputComponent:_,inputProps:(0,o.default)({},k,m?{}:{autoWidth:t,children:n,classes:r,displayEmpty:u,MenuProps:p,multiple:h,onClose:v,onOpen:y,open:g,renderValue:b,SelectDisplayProps:x},d,c?c.props.inputProps:{})},w))}t.styles=p,h.propTypes={},h.defaultProps={autoWidth:!1,displayEmpty:!1,IconComponent:s.default,input:i.default.createElement(c.default,null),multiple:!1,native:!1},h.muiName="Select";var m=(0,u.default)(d.styles,{name:"MuiSelect"})(h);t.default=m},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(4)),a=r(n(3)),i=r(n(9)),l=r(n(8)),u=r(n(11)),s=r(n(10)),c=r(n(2)),d=(r(n(1)),r(n(105))),f=n(13),p=function(e){function t(){var e,n,r;(0,i.default)(this,t);for(var o=arguments.length,a=new Array(o),l=0;l<o;l++)a[l]=arguments[l];return(0,u.default)(r,(n=r=(0,u.default)(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(a))),r.radios=[],r.focus=function(){if(r.radios&&r.radios.length){var e=r.radios.filter(function(e){return!e.disabled});if(e.length){var t=(0,f.find)(e,function(e){return e.checked});t?t.focus():e[0].focus()}}},r.handleRadioChange=function(e,t){t&&r.props.onChange&&r.props.onChange(e,e.target.value)},n))}return(0,s.default)(t,e),(0,l.default)(t,[{key:"render",value:function(){var e=this,t=this.props,n=t.children,r=t.name,i=t.value,l=(t.onChange,(0,a.default)(t,["children","name","value","onChange"]));return this.radios=[],c.default.createElement(d.default,(0,o.default)({role:"radiogroup"},l),c.default.Children.map(n,function(t,n){return c.default.isValidElement(t)?c.default.cloneElement(t,{key:n,name:r,inputRef:function(t){t&&e.radios.push(t)},checked:i===t.props.value,onChange:(0,f.createChainedFunction)(t.props.onChange,e.handleRadioChange)}):null}))}}]),t}(c.default.Component);p.propTypes={};var h=p;t.default=h},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(2)),a=r(n(19)),i=r(n(16)),l=o.default.createElement("path",{d:"M12 7c-2.76 0-5 2.24-5 5s2.24 5 5 5 5-2.24 5-5-2.24-5-5-5zm0-5C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z"}),u=function(e){return o.default.createElement(i.default,e,l)};(u=(0,a.default)(u)).muiName="SvgIcon";var s=u;t.default=s},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(2)),a=r(n(19)),i=r(n(16)),l=o.default.createElement("path",{d:"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z"}),u=function(e){return o.default.createElement(i.default,e,l)};(u=(0,a.default)(u)).muiName="SvgIcon";var s=u;t.default=s},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.styles=void 0;var o=r(n(4)),a=r(n(3)),i=r(n(2)),l=(r(n(1)),r(n(6))),u=r(n(110)),s=r(n(307)),c=r(n(306)),d=n(13),f=r(n(5)),p=function(e){return{root:{color:e.palette.text.secondary},checked:{},disabled:{},colorPrimary:{"&$checked":{color:e.palette.primary.main},"&$disabled":{color:e.palette.action.disabled}},colorSecondary:{"&$checked":{color:e.palette.secondary.main},"&$disabled":{color:e.palette.action.disabled}}}};t.styles=p;var h=i.default.createElement(s.default,null),m=i.default.createElement(c.default,null);function v(e){var t=e.classes,n=e.color,r=(0,a.default)(e,["classes","color"]);return i.default.createElement(u.default,(0,o.default)({type:"radio",icon:h,checkedIcon:m,classes:{root:(0,l.default)(t.root,t["color".concat((0,d.capitalize)(n))]),checked:t.checked,disabled:t.disabled}},r))}v.propTypes={},v.defaultProps={color:"secondary"};var y=(0,f.default)(p,{name:"MuiRadio"})(v);t.default=y},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.styles=void 0;var o=r(n(4)),a=r(n(7)),i=r(n(74)),l=r(n(3)),u=r(n(2)),s=(r(n(1)),r(n(6))),c=r(n(5)),d=r(n(21)),f=n(13),p=r(n(62)),h=function(e){return{root:{display:"flex",flexDirection:"row",justifyContent:"space-between",alignItems:"center",background:e.palette.background.default,padding:e.spacing.unit},positionBottom:{position:"fixed",bottom:0,left:0,right:0,zIndex:e.zIndex.mobileStepper},positionTop:{position:"fixed",top:0,left:0,right:0,zIndex:e.zIndex.mobileStepper},positionStatic:{},dots:{display:"flex",flexDirection:"row"},dot:{backgroundColor:e.palette.action.disabled,borderRadius:"50%",width:e.spacing.unit,height:e.spacing.unit,margin:"0 2px"},dotActive:{backgroundColor:e.palette.primary.main},progress:{width:"50%"}}};function m(e){var t=e.activeStep,n=e.backButton,r=e.classes,c=e.className,h=e.nextButton,m=e.position,v=e.steps,y=e.variant,g=(0,l.default)(e,["activeStep","backButton","classes","className","nextButton","position","steps","variant"]),b=(0,s.default)(r.root,r["position".concat((0,f.capitalize)(m))],c);return u.default.createElement(d.default,(0,o.default)({square:!0,elevation:0,className:b},g),n,"dots"===y&&u.default.createElement("div",{className:r.dots},(0,i.default)(new Array(v)).map(function(e,n){var o=(0,s.default)(r.dot,(0,a.default)({},r.dotActive,n===t));return u.default.createElement("div",{key:n,className:o})})),"progress"===y&&u.default.createElement(p.default,{className:r.progress,variant:"determinate",value:Math.ceil(t/(v-1)*100)}),h)}t.styles=h,m.propTypes={},m.defaultProps={activeStep:0,position:"bottom",variant:"dots"};var v=(0,c.default)(h,{name:"MuiMobileStepper"})(m);t.default=v},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.styles=void 0;var o=r(n(4)),a=r(n(7)),i=r(n(3)),l=r(n(12)),u=r(n(2)),s=(r(n(1)),r(n(6))),c=r(n(5)),d=r(n(97)),f=function(e){return{root:(0,l.default)({},e.typography.subheading,{height:3*e.spacing.unit,boxSizing:"content-box",width:"auto",overflow:"hidden",textOverflow:"ellipsis",whiteSpace:"nowrap",paddingLeft:2*e.spacing.unit,paddingRight:2*e.spacing.unit,"&$selected":{backgroundColor:e.palette.action.selected}}),selected:{}}};function p(e){var t=e.classes,n=e.className,r=e.component,l=e.selected,c=e.role,f=(0,i.default)(e,["classes","className","component","selected","role"]);return u.default.createElement(d.default,(0,o.default)({button:!0,role:c,tabIndex:-1,className:(0,s.default)(t.root,(0,a.default)({},t.selected,l),n),component:r},f))}t.styles=f,p.propTypes={},p.defaultProps={component:"li",role:"menuitem",selected:!1};var h=(0,c.default)(f,{name:"MuiMenuItem"})(p);t.default=h},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(4)),a=r(n(3)),i=r(n(9)),l=r(n(8)),u=r(n(11)),s=r(n(10)),c=r(n(2)),d=(r(n(1)),r(n(15))),f=r(n(49)),p=r(n(75)),h=r(n(193)),m=r(n(22)),v=r(n(98)),y=function(e){function t(){var e,n,r;(0,i.default)(this,t);for(var o=arguments.length,a=new Array(o),l=0;l<o;l++)a[l]=arguments[l];return(0,u.default)(r,(n=r=(0,u.default)(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(a))),r.state={currentTabIndex:void 0},r.list=void 0,r.selectedItem=void 0,r.blurTimer=void 0,r.handleBlur=function(e){r.blurTimer=setTimeout(function(){if(r.list){var e=d.default.findDOMNode(r.list),t=(0,h.default)((0,m.default)(e));(0,p.default)(e,t)||r.resetTabIndex()}},30),r.props.onBlur&&r.props.onBlur(e)},r.handleKeyDown=function(e){var t=d.default.findDOMNode(r.list),n=(0,f.default)(e),o=(0,h.default)((0,m.default)(t));"up"!==n&&"down"!==n||o&&(!o||(0,p.default)(t,o))?"down"===n?(e.preventDefault(),o.nextElementSibling&&o.nextElementSibling.focus()):"up"===n&&(e.preventDefault(),o.previousElementSibling&&o.previousElementSibling.focus()):r.selectedItem?d.default.findDOMNode(r.selectedItem).focus():t.firstChild.focus(),r.props.onKeyDown&&r.props.onKeyDown(e,n)},r.handleItemFocus=function(e){var t=d.default.findDOMNode(r.list);if(t)for(var n=0;n<t.children.length;n+=1)if(t.children[n]===e.currentTarget){r.setTabIndex(n);break}},n))}return(0,s.default)(t,e),(0,l.default)(t,[{key:"componentDidMount",value:function(){this.resetTabIndex()}},{key:"componentWillUnmount",value:function(){clearTimeout(this.blurTimer)}},{key:"setTabIndex",value:function(e){this.setState({currentTabIndex:e})}},{key:"focus",value:function(){var e=this.state.currentTabIndex,t=d.default.findDOMNode(this.list);t&&t.children&&t.firstChild&&(e&&e>=0?t.children[e].focus():t.firstChild.focus())}},{key:"resetTabIndex",value:function(){for(var e=d.default.findDOMNode(this.list),t=(0,h.default)((0,m.default)(e)),n=[],r=0;r<e.children.length;r+=1)n.push(e.children[r]);var o=n.indexOf(t);return-1!==o?this.setTabIndex(o):this.selectedItem?this.setTabIndex(n.indexOf(d.default.findDOMNode(this.selectedItem))):this.setTabIndex(0)}},{key:"render",value:function(){var e=this,t=this.props,n=t.children,r=t.className,i=(t.onBlur,t.onKeyDown,(0,a.default)(t,["children","className","onBlur","onKeyDown"]));return c.default.createElement(v.default,(0,o.default)({role:"menu",ref:function(t){e.list=t},className:r,onKeyDown:this.handleKeyDown,onBlur:this.handleBlur},i),c.default.Children.map(n,function(t,n){return c.default.isValidElement(t)?c.default.cloneElement(t,{tabIndex:n===e.state.currentTabIndex?0:-1,ref:t.props.selected?function(t){e.selectedItem=t}:void 0,onFocus:e.handleItemFocus}):null}))}}]),t}(c.default.Component);y.propTypes={};var g=y;t.default=g},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.styles=void 0;var o=r(n(4)),a=r(n(3)),i=r(n(9)),l=r(n(8)),u=r(n(11)),s=r(n(10)),c=r(n(2)),d=(r(n(1)),r(n(15))),f=(r(n(14)),r(n(75))),p=r(n(22)),h=r(n(29)),m=r(n(23)),v=r(n(76)),y=r(n(5)),g=r(n(38)),b=r(n(100)),x=r(n(21));function w(e,t){var n=0;return"number"==typeof t?n=t:"center"===t?n=e.height/2:"bottom"===t&&(n=e.height),n}function _(e,t){var n=0;return"number"==typeof t?n=t:"center"===t?n=e.width/2:"right"===t&&(n=e.width),n}function k(e){return[e.horizontal,e.vertical].map(function(e){return"number"==typeof e?"".concat(e,"px"):e}).join(" ")}function P(e){return"function"==typeof e?e():e}var E={paper:{position:"absolute",overflowY:"auto",overflowX:"hidden",minWidth:16,minHeight:16,maxWidth:"calc(100% - 32px)",maxHeight:"calc(100% - 32px)",outline:"none"}};t.styles=E;var O=function(e){function t(){var e,n,r;(0,i.default)(this,t);for(var o=arguments.length,a=new Array(o),l=0;l<o;l++)a[l]=arguments[l];return(0,u.default)(r,(n=r=(0,u.default)(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(a))),r.componentWillUnmount=function(){r.handleResize.clear()},r.setPositioningStyles=function(e){if(e&&e.style){var t=r.getPositioningStyle(e);null!==t.top&&(e.style.top=t.top),null!==t.left&&(e.style.left=t.left),e.style.transformOrigin=t.transformOrigin}},r.getPositioningStyle=function(e){var t=r.props,n=t.anchorEl,o=t.anchorReference,a=t.marginThreshold,i=r.getContentAnchorOffset(e),l={width:e.clientWidth,height:e.clientHeight},u=r.getTransformOrigin(l,i);if("none"===o)return{top:null,left:null,transformOrigin:k(u)};var s=r.getAnchorOffset(i),c=s.top-u.vertical,d=s.left-u.horizontal,f=c+l.height,p=d+l.width,h=(0,v.default)(P(n)),m=h.innerHeight-a,y=h.innerWidth-a;if(c<a){var g=c-a;c-=g,u.vertical+=g}else if(f>m){var b=f-m;c-=b,u.vertical+=b}if(d<a){var x=d-a;d-=x,u.horizontal+=x}else if(p>y){var w=p-y;d-=w,u.horizontal+=w}return{top:"".concat(c,"px"),left:"".concat(d,"px"),transformOrigin:k(u)}},r.transitionEl=void 0,r.handleGetOffsetTop=w,r.handleGetOffsetLeft=_,r.handleEnter=function(e){r.props.onEnter&&r.props.onEnter(e),r.setPositioningStyles(e)},r.handleResize=(0,h.default)(function(){var e=d.default.findDOMNode(r.transitionEl);r.setPositioningStyles(e)},166),n))}return(0,s.default)(t,e),(0,l.default)(t,[{key:"componentDidMount",value:function(){this.props.action&&this.props.action({updatePosition:this.handleResize})}},{key:"getAnchorOffset",value:function(e){var t=this.props,n=t.anchorEl,r=t.anchorOrigin,o=t.anchorReference,a=t.anchorPosition;if("anchorPosition"===o)return a;var i=(P(n)||(0,p.default)(d.default.findDOMNode(this.transitionEl)).body).getBoundingClientRect(),l=0===e?r.vertical:"center";return{top:i.top+this.handleGetOffsetTop(i,l),left:i.left+this.handleGetOffsetLeft(i,r.horizontal)}}},{key:"getContentAnchorOffset",value:function(e){var t=this.props,n=t.getContentAnchorEl,r=t.anchorReference,o=0;if(n&&"anchorEl"===r){var a=n(e);if(a&&(0,f.default)(e,a)){var i=function(e,t){for(var n=t,r=0;n&&n!==e;)r+=(n=n.parentNode).scrollTop;return r}(e,a);o=a.offsetTop+a.clientHeight/2-i||0}}return o}},{key:"getTransformOrigin",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=this.props.transformOrigin;return{vertical:this.handleGetOffsetTop(e,n.vertical)+t,horizontal:this.handleGetOffsetLeft(e,n.horizontal)}}},{key:"render",value:function(){var e=this,t=this.props,n=(t.action,t.anchorEl),r=(t.anchorOrigin,t.anchorPosition,t.anchorReference,t.children),i=t.classes,l=t.container,u=t.elevation,s=(t.getContentAnchorEl,t.marginThreshold,t.onEnter,t.onEntered),d=t.onEntering,f=t.onExit,h=t.onExited,v=t.onExiting,y=t.open,b=t.PaperProps,w=t.role,_=(t.transformOrigin,t.TransitionComponent),k=t.transitionDuration,E=t.TransitionProps,O=(0,a.default)(t,["action","anchorEl","anchorOrigin","anchorPosition","anchorReference","children","classes","container","elevation","getContentAnchorEl","marginThreshold","onEnter","onEntered","onEntering","onExit","onExited","onExiting","open","PaperProps","role","transformOrigin","TransitionComponent","transitionDuration","TransitionProps"]),C=k;"auto"!==k||_.muiSupportAuto||(C=void 0);var S=l||(n?(0,p.default)(P(n)).body:void 0);return c.default.createElement(g.default,(0,o.default)({container:S,open:y,BackdropProps:{invisible:!0}},O),c.default.createElement(_,(0,o.default)({appear:!0,in:y,onEnter:this.handleEnter,onEntered:s,onEntering:d,onExit:f,onExited:h,onExiting:v,role:w,ref:function(t){e.transitionEl=t},timeout:C},E),c.default.createElement(x.default,(0,o.default)({className:i.paper,elevation:u},b),c.default.createElement(m.default,{target:"window",onResize:this.handleResize}),r)))}}]),t}(c.default.Component);O.propTypes={},O.defaultProps={anchorReference:"anchorEl",anchorOrigin:{vertical:"top",horizontal:"left"},elevation:8,marginThreshold:16,transformOrigin:{vertical:"top",horizontal:"left"},TransitionComponent:b.default,transitionDuration:"auto"};var C=(0,y.default)(E,{name:"MuiPopover"})(O);t.default=C},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.styles=void 0;var o=r(n(4)),a=r(n(7)),i=r(n(3)),l=r(n(2)),u=(r(n(1)),r(n(6))),s=r(n(5)),c=n(13),d=function(e){return{root:e.mixins.gutters({boxSizing:"border-box",lineHeight:"48px",listStyle:"none",color:e.palette.text.secondary,fontFamily:e.typography.fontFamily,fontWeight:e.typography.fontWeightMedium,fontSize:e.typography.pxToRem(14)}),colorPrimary:{color:e.palette.primary.main},colorInherit:{color:"inherit"},inset:{paddingLeft:9*e.spacing.unit},sticky:{position:"sticky",top:0,zIndex:1,backgroundColor:"inherit"}}};function f(e){var t,n=e.classes,r=e.className,s=e.color,d=e.component,f=e.disableSticky,p=e.inset,h=(0,i.default)(e,["classes","className","color","component","disableSticky","inset"]);return l.default.createElement(d,(0,o.default)({className:(0,u.default)(n.root,(t={},(0,a.default)(t,n["color".concat((0,c.capitalize)(s))],"default"!==s),(0,a.default)(t,n.inset,p),(0,a.default)(t,n.sticky,!f),t),r)},h))}t.styles=d,f.propTypes={},f.defaultProps={color:"default",component:"li",disableSticky:!1,inset:!1},f.muiName="ListSubheader";var p=(0,s.default)(d,{name:"MuiListSubheader"})(f);t.default=p},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.styles=void 0;var o=r(n(4)),a=r(n(7)),i=r(n(3)),l=r(n(2)),u=r(n(1)),s=r(n(6)),c=r(n(5)),d=r(n(18)),f=function(e){return{root:{flex:"1 1 auto",minWidth:0,padding:"0 ".concat(2*e.spacing.unit,"px"),"&:first-child":{paddingLeft:0}},inset:{"&:first-child":{paddingLeft:7*e.spacing.unit}},dense:{fontSize:e.typography.pxToRem(13)},primary:{"&$textDense":{fontSize:"inherit"}},secondary:{"&$textDense":{fontSize:"inherit"}},textDense:{}}};function p(e,t){var n,r=e.children,u=e.classes,c=e.className,f=e.disableTypography,p=e.inset,h=e.primary,m=e.secondary,v=(0,i.default)(e,["children","classes","className","disableTypography","inset","primary","secondary"]),y=t.dense,g=null!=h?h:r;null==g||f||(g=l.default.createElement(d.default,{variant:"subheading",className:(0,s.default)(u.primary,(0,a.default)({},u.textDense,y)),component:"span"},g));var b=m;return null==b||f||(b=l.default.createElement(d.default,{variant:"body1",className:(0,s.default)(u.secondary,(0,a.default)({},u.textDense,y)),color:"textSecondary"},b)),l.default.createElement("div",(0,o.default)({className:(0,s.default)(u.root,(n={},(0,a.default)(n,u.dense,y),(0,a.default)(n,u.inset,p),n),c)},v),g,b)}t.styles=f,p.propTypes={},p.defaultProps={disableTypography:!1,inset:!1},p.contextTypes={dense:u.default.bool};var h=(0,c.default)(f,{name:"MuiListItemText"})(p);t.default=h},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.styles=void 0;var o=r(n(4)),a=r(n(3)),i=r(n(2)),l=(r(n(1)),r(n(6))),u=r(n(5)),s={root:{position:"absolute",right:4,top:"50%",transform:"translateY(-50%)"}};function c(e){var t=e.children,n=e.classes,r=e.className,u=(0,a.default)(e,["children","classes","className"]);return i.default.createElement("div",(0,o.default)({className:(0,l.default)(n.root,r)},u),t)}t.styles=s,c.propTypes={},c.muiName="ListItemSecondaryAction";var d=(0,u.default)(s,{name:"MuiListItemSecondaryAction"})(c);t.default=d},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.styles=void 0;var o=r(n(12)),a=r(n(3)),i=r(n(2)),l=(r(n(1)),r(n(6))),u=r(n(5)),s=function(e){return{root:{marginRight:2*e.spacing.unit,color:e.palette.action.active,flexShrink:0}}};function c(e){var t=e.children,n=e.classes,r=e.className,u=(0,a.default)(e,["children","classes","className"]);return i.default.cloneElement(t,(0,o.default)({className:(0,l.default)(n.root,r,t.props.className)},u))}t.styles=s,c.propTypes={};var d=(0,u.default)(s,{name:"MuiListItemIcon"})(c);t.default=d},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.styles=void 0;var o=r(n(7)),a=r(n(12)),i=r(n(3)),l=r(n(2)),u=r(n(1)),s=r(n(6)),c=(r(n(14)),r(n(5))),d=function(e){return{root:{width:36,height:36,fontSize:e.typography.pxToRem(18),marginRight:4},icon:{width:20,height:20,fontSize:e.typography.pxToRem(20)}}};function f(e,t){var n=e.children,r=e.classes,u=e.className,c=(0,i.default)(e,["children","classes","className"]);return void 0===t.dense?e.children:l.default.cloneElement(n,(0,a.default)({className:(0,s.default)((0,o.default)({},r.root,t.dense),u,n.props.className),childrenClassName:(0,s.default)((0,o.default)({},r.icon,t.dense),n.props.childrenClassName)},c))}t.styles=d,f.propTypes={},f.contextTypes={dense:u.default.bool},f.muiName="ListItemAvatar";var p=(0,c.default)(d,{name:"MuiListItemAvatar"})(f);t.default=p},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.styles=void 0;var o=r(n(4)),a=r(n(12)),i=r(n(7)),l=r(n(3)),u=r(n(9)),s=r(n(8)),c=r(n(11)),d=r(n(10)),f=r(n(2)),p=r(n(1)),h=r(n(6)),m=r(n(5)),v=r(n(20)),y=n(35),g=function(e){return{root:{display:"flex",justifyContent:"flex-start",alignItems:"center",position:"relative",textDecoration:"none",width:"100%",boxSizing:"border-box",textAlign:"left"},container:{position:"relative"},focusVisible:{backgroundColor:e.palette.action.hover},default:{paddingTop:12,paddingBottom:12},dense:{paddingTop:e.spacing.unit,paddingBottom:e.spacing.unit},disabled:{opacity:.5},divider:{borderBottom:"1px solid ".concat(e.palette.divider),backgroundClip:"padding-box"},gutters:e.mixins.gutters(),button:{transition:e.transitions.create("background-color",{duration:e.transitions.duration.shortest}),"&:hover":{textDecoration:"none",backgroundColor:e.palette.action.hover,"@media (hover: none)":{backgroundColor:"transparent"}}},secondaryAction:{paddingRight:4*e.spacing.unit}}};t.styles=g;var b=function(e){function t(){return(0,u.default)(this,t),(0,c.default)(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return(0,d.default)(t,e),(0,s.default)(t,[{key:"getChildContext",value:function(){return{dense:this.props.dense||this.context.dense||!1}}},{key:"render",value:function(){var e,t=this.props,n=t.button,r=t.children,u=t.classes,s=t.className,c=t.component,d=t.ContainerComponent,p=t.ContainerProps,m=(p=void 0===p?{}:p).className,g=(0,l.default)(p,["className"]),b=t.dense,x=t.disabled,w=t.disableGutters,_=t.divider,k=t.focusVisibleClassName,P=(0,l.default)(t,["button","children","classes","className","component","ContainerComponent","ContainerProps","dense","disabled","disableGutters","divider","focusVisibleClassName"]),E=b||this.context.dense||!1,O=f.default.Children.toArray(r),C=O.some(function(e){return(0,y.isMuiElement)(e,["ListItemAvatar"])}),S=O.length&&(0,y.isMuiElement)(O[O.length-1],["ListItemSecondaryAction"]),T=(0,h.default)(u.root,E||C?u.dense:u.default,(e={},(0,i.default)(e,u.gutters,!w),(0,i.default)(e,u.divider,_),(0,i.default)(e,u.disabled,x),(0,i.default)(e,u.button,n),(0,i.default)(e,u.secondaryAction,S),e),s),M=(0,a.default)({className:T,disabled:x},P),j=c||"li";return n&&(M.component=c||"div",M.focusVisibleClassName=(0,h.default)(u.focusVisible,k),j=v.default),S?(j=M.component||c?j:"div","li"===d&&("li"===j?j="div":"li"===M.component&&(M.component="div")),f.default.createElement(d,(0,o.default)({className:(0,h.default)(u.container,m)},g),f.default.createElement(j,M,O),O.pop())):f.default.createElement(j,M,O)}}]),t}(f.default.Component);b.propTypes={},b.defaultProps={button:!1,ContainerComponent:"li",dense:!1,disabled:!1,disableGutters:!1,divider:!1},b.contextTypes={dense:p.default.bool},b.childContextTypes={dense:p.default.bool};var x=(0,m.default)(g,{name:"MuiListItem"})(b);t.default=x},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.styles=void 0;var o=r(n(4)),a=r(n(7)),i=r(n(3)),l=r(n(9)),u=r(n(8)),s=r(n(11)),c=r(n(10)),d=r(n(2)),f=r(n(1)),p=r(n(6)),h=r(n(5)),m=function(e){return{root:{listStyle:"none",margin:0,padding:0,position:"relative"},padding:{paddingTop:e.spacing.unit,paddingBottom:e.spacing.unit},dense:{paddingTop:e.spacing.unit/2,paddingBottom:e.spacing.unit/2},subheader:{paddingTop:0}}};t.styles=m;var v=function(e){function t(){return(0,l.default)(this,t),(0,s.default)(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return(0,c.default)(t,e),(0,u.default)(t,[{key:"getChildContext",value:function(){return{dense:this.props.dense}}},{key:"render",value:function(){var e,t=this.props,n=t.children,r=t.classes,l=t.className,u=t.component,s=t.dense,c=t.disablePadding,f=t.subheader,h=(0,i.default)(t,["children","classes","className","component","dense","disablePadding","subheader"]),m=(0,p.default)(r.root,(e={},(0,a.default)(e,r.dense,s&&!c),(0,a.default)(e,r.padding,!c),(0,a.default)(e,r.subheader,f),e),l);return d.default.createElement(u,(0,o.default)({className:m},h),f,n)}}]),t}(d.default.Component);v.propTypes={},v.defaultProps={component:"ul",dense:!1,disablePadding:!1},v.childContextTypes={dense:f.default.bool};var y=(0,h.default)(m,{name:"MuiList"})(v);t.default=y},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.styles=void 0;var o=r(n(4)),a=r(n(7)),i=r(n(3)),l=r(n(2)),u=(r(n(1)),r(n(6))),s=(r(n(14)),r(n(5))),c=n(32),d=function(e){return{root:{position:"relative",overflow:"hidden",height:5},colorPrimary:{backgroundColor:(0,c.lighten)(e.palette.primary.light,.6)},colorSecondary:{backgroundColor:(0,c.lighten)(e.palette.secondary.light,.4)},buffer:{backgroundColor:"transparent"},query:{transform:"rotate(180deg)"},dashed:{position:"absolute",marginTop:0,height:"100%",width:"100%",animation:"buffer 3s infinite linear"},dashedColorPrimary:{backgroundImage:"radial-gradient(".concat((0,c.lighten)(e.palette.primary.light,.6)," 0%, ").concat((0,c.lighten)(e.palette.primary.light,.6)," 16%, transparent 42%)"),backgroundSize:"10px 10px",backgroundPosition:"0px -23px"},dashedColorSecondary:{backgroundImage:"radial-gradient(".concat((0,c.lighten)(e.palette.secondary.light,.4)," 0%, ").concat((0,c.lighten)(e.palette.secondary.light,.6)," 16%, transparent 42%)"),backgroundSize:"10px 10px",backgroundPosition:"0px -23px"},bar:{width:"100%",position:"absolute",left:0,bottom:0,top:0,transition:"transform 0.2s linear",transformOrigin:"left"},barColorPrimary:{backgroundColor:e.palette.primary.main},barColorSecondary:{backgroundColor:e.palette.secondary.main},bar1Indeterminate:{width:"auto",willChange:"left, right",animation:"mui-indeterminate1 2.1s cubic-bezier(0.65, 0.815, 0.735, 0.395) infinite"},bar2Indeterminate:{width:"auto",willChange:"left, right",animation:"mui-indeterminate2 2.1s cubic-bezier(0.165, 0.84, 0.44, 1) infinite",animationDelay:"1.15s"},bar1Determinate:{willChange:"transform",transition:"transform .".concat(4,"s linear")},bar1Buffer:{zIndex:1,transition:"transform .".concat(4,"s linear")},bar2Buffer:{transition:"transform .".concat(4,"s linear")},"@keyframes mui-indeterminate1":{"0%":{left:"-35%",right:"100%"},"60%":{left:"100%",right:"-90%"},"100%":{left:"100%",right:"-90%"}},"@keyframes mui-indeterminate2":{"0%":{left:"-200%",right:"100%"},"60%":{left:"107%",right:"-8%"},"100%":{left:"107%",right:"-8%"}},"@keyframes buffer":{"0%":{opacity:1,backgroundPosition:"0px -23px"},"50%":{opacity:0,backgroundPosition:"0px -23px"},"100%":{opacity:1,backgroundPosition:"-200px -23px"}}}};function f(e){var t,n,r,s,c=e.classes,d=e.className,f=e.color,p=e.value,h=e.valueBuffer,m=e.variant,v=(0,i.default)(e,["classes","className","color","value","valueBuffer","variant"]),y=(0,u.default)(c.root,(t={},(0,a.default)(t,c.colorPrimary,"primary"===f),(0,a.default)(t,c.colorSecondary,"secondary"===f),(0,a.default)(t,c.buffer,"buffer"===m),(0,a.default)(t,c.query,"query"===m),t),d),g=(0,u.default)(c.dashed,(n={},(0,a.default)(n,c.dashedColorPrimary,"primary"===f),(0,a.default)(n,c.dashedColorSecondary,"secondary"===f),n)),b=(0,u.default)(c.bar,(r={},(0,a.default)(r,c.barColorPrimary,"primary"===f),(0,a.default)(r,c.barColorSecondary,"secondary"===f),(0,a.default)(r,c.bar1Indeterminate,"indeterminate"===m||"query"===m),(0,a.default)(r,c.bar1Determinate,"determinate"===m),(0,a.default)(r,c.bar1Buffer,"buffer"===m),r)),x=(0,u.default)(c.bar,(s={},(0,a.default)(s,c.barColorPrimary,"primary"===f&&"buffer"!==m),(0,a.default)(s,c.colorPrimary,"primary"===f&&"buffer"===m),(0,a.default)(s,c.barColorSecondary,"secondary"===f&&"buffer"!==m),(0,a.default)(s,c.colorSecondary,"secondary"===f&&"buffer"===m),(0,a.default)(s,c.bar2Indeterminate,"indeterminate"===m||"query"===m),(0,a.default)(s,c.bar2Buffer,"buffer"===m),s)),w={},_={bar1:{},bar2:{}};return"determinate"!==m&&"buffer"!==m||void 0!==p&&(w["aria-valuenow"]=Math.round(p),_.bar1.transform="scaleX(".concat(p/100,")")),"buffer"===m&&void 0!==h&&(_.bar2.transform="scaleX(".concat((h||0)/100,")")),l.default.createElement("div",(0,o.default)({className:y,role:"progressbar"},w,v),"buffer"===m?l.default.createElement("div",{className:g}):null,l.default.createElement("div",{className:b,style:_.bar1}),"determinate"===m?null:l.default.createElement("div",{className:x,style:_.bar2}))}t.styles=d,f.propTypes={},f.defaultProps={color:"primary",variant:"indeterminate"};var p=(0,s.default)(d,{name:"MuiLinearProgress"})(f);t.default=p},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.styles=void 0;var o=r(n(4)),a=r(n(7)),i=r(n(3)),l=r(n(2)),u=r(n(1)),s=r(n(6)),c=r(n(5)),d=r(n(103)),f=function(e){return{root:{transformOrigin:"top left"},formControl:{position:"absolute",left:0,top:0,transform:"translate(0, ".concat(3*e.spacing.unit,"px) scale(1)")},marginDense:{transform:"translate(0, ".concat(2.5*e.spacing.unit+1,"px) scale(1)")},shrink:{transform:"translate(0, 1.5px) scale(0.75)",transformOrigin:"top left"},animated:{transition:e.transitions.create("transform",{duration:e.transitions.duration.shorter,easing:e.transitions.easing.easeOut})}}};function p(e,t){var n,r=e.children,u=e.classes,c=e.className,f=e.disableAnimation,p=e.FormLabelClasses,h=e.margin,m=e.shrink,v=(0,i.default)(e,["children","classes","className","disableAnimation","FormLabelClasses","margin","shrink"]),y=t.muiFormControl,g=m;void 0===g&&y&&(g=y.filled||y.focused||y.adornedStart);var b=h;void 0===b&&y&&(b=y.margin);var x=(0,s.default)(u.root,(n={},(0,a.default)(n,u.formControl,y),(0,a.default)(n,u.animated,!f),(0,a.default)(n,u.shrink,g),(0,a.default)(n,u.marginDense,"dense"===b),n),c);return l.default.createElement(d.default,(0,o.default)({"data-shrink":g,className:x,classes:p},v),r)}t.styles=f,p.propTypes={},p.defaultProps={disableAnimation:!1},p.contextTypes={muiFormControl:u.default.object};var h=(0,c.default)(f,{name:"MuiInputLabel"})(p);t.default=h},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.styles=void 0;var o=r(n(4)),a=r(n(7)),i=r(n(3)),l=r(n(2)),u=(r(n(1)),r(n(6))),s=r(n(18)),c=r(n(5)),d=function(e){return{root:{display:"flex",maxHeight:"2em",alignItems:"center"},positionStart:{marginRight:e.spacing.unit},positionEnd:{marginLeft:e.spacing.unit}}};function f(e){var t,n=e.children,r=e.component,c=e.classes,d=e.className,f=e.disableTypography,p=e.position,h=(0,i.default)(e,["children","component","classes","className","disableTypography","position"]);return l.default.createElement(r,(0,o.default)({className:(0,u.default)(c.root,(t={},(0,a.default)(t,c.positionStart,"start"===p),(0,a.default)(t,c.positionEnd,"end"===p),t),d)},h),"string"!=typeof n||f?n:l.default.createElement(s.default,{color:"textSecondary"},n))}t.styles=d,f.propTypes={},f.defaultProps={component:"div",disableTypography:!1};var p=(0,c.default)(d,{name:"MuiInputAdornment"})(f);t.default=p},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.styles=void 0;var o=r(n(4)),a=r(n(7)),i=r(n(3)),l=r(n(2)),u=(r(n(1)),r(n(6))),s=r(n(5)),c=n(13),d=function(e){return{root:{userSelect:"none",fontSize:24,width:"1em",height:"1em",overflow:"hidden",flexShrink:0},colorPrimary:{color:e.palette.primary.main},colorSecondary:{color:e.palette.secondary.main},colorAction:{color:e.palette.action.active},colorError:{color:e.palette.error.main},colorDisabled:{color:e.palette.action.disabled}}};function f(e){var t=e.children,n=e.classes,r=e.className,s=e.color,d=(0,i.default)(e,["children","classes","className","color"]);return l.default.createElement("span",(0,o.default)({className:(0,u.default)("material-icons",n.root,(0,a.default)({},n["color".concat((0,c.capitalize)(s))],"inherit"!==s),r),"aria-hidden":"true"},d),t)}t.styles=d,f.propTypes={},f.defaultProps={color:"inherit"},f.muiName="Icon";var p=(0,s.default)(d,{name:"MuiIcon"})(f);t.default=p},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(3)),a=r(n(7)),i=r(n(2)),l=(r(n(1)),r(n(14)),n(56)),u=n(13),s=r(n(5));function c(e){var t=e.children,n=e.classes,r=e.className,a=(e.lgDown,e.lgUp,e.mdDown,e.mdUp,e.only),s=(e.smDown,e.smUp,e.xlDown,e.xlUp,e.xsDown,e.xsUp,(0,o.default)(e,["children","classes","className","lgDown","lgUp","mdDown","mdUp","only","smDown","smUp","xlDown","xlUp","xsDown","xsUp"]),[]);r&&s.push(r);for(var c=0;c<l.keys.length;c+=1){var d=l.keys[c],f=e["".concat(d,"Up")],p=e["".concat(d,"Down")];f&&s.push(n["".concat(d,"Up")]),p&&s.push(n["".concat(d,"Down")])}a&&(Array.isArray(a)?a:[a]).forEach(function(e){s.push(n["only".concat((0,u.capitalize)(e))])});return i.default.createElement("div",{className:s.join(" ")},t)}c.propTypes={};var d=(0,s.default)(function(e){var t={display:"none"};return l.keys.reduce(function(n,r){return n["only".concat((0,u.capitalize)(r))]=(0,a.default)({},e.breakpoints.only(r),t),n["".concat(r,"Up")]=(0,a.default)({},e.breakpoints.up(r),t),n["".concat(r,"Down")]=(0,a.default)({},e.breakpoints.down(r),t),n},{})})(c);t.default=d},function(e,t,n){"use strict";var r=n(58),o=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=o(n(1)),i=n(56),l=r(n(30)),u=o(n(57));function s(e){var t=e.children,n=e.only,r=e.width,o=!0;if(n)if(Array.isArray(n))for(var a=0;a<n.length;a+=1){if(r===n[a]){o=!1;break}}else n&&r===n&&(o=!1);if(o)for(var u=0;u<i.keys.length;u+=1){var s=i.keys[u],c=e["".concat(s,"Up")],d=e["".concat(s,"Down")];if(c&&(0,l.isWidthUp)(s,r)||d&&(0,l.isWidthDown)(s,r)){o=!1;break}}return o?t:null}s.propTypes={children:a.default.node,className:a.default.string,implementation:a.default.oneOf(["js","css"]),initialWidth:a.default.oneOf(["xs","sm","md","lg","xl"]),lgDown:a.default.bool,lgUp:a.default.bool,mdDown:a.default.bool,mdUp:a.default.bool,only:a.default.oneOfType([a.default.oneOf(["xs","sm","md","lg","xl"]),a.default.arrayOf(a.default.oneOf(["xs","sm","md","lg","xl"]))]),smDown:a.default.bool,smUp:a.default.bool,width:a.default.string.isRequired,xlDown:a.default.bool,xlUp:a.default.bool,xsDown:a.default.bool,xsUp:a.default.bool},s.propTypes=(0,u.default)(s.propTypes,"HiddenJs");var c=(0,l.default)()(s);t.default=c},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(3)),a=r(n(2)),i=(r(n(1)),r(n(325))),l=r(n(324));function u(e){var t=e.implementation,n=(0,o.default)(e,["implementation"]);return"js"===t?a.default.createElement(i.default,n):a.default.createElement(l.default,n)}u.propTypes={},u.defaultProps={implementation:"js",lgDown:!1,lgUp:!1,mdDown:!1,mdUp:!1,smDown:!1,smUp:!1,xlDown:!1,xlUp:!1,xsDown:!1,xsUp:!1};var s=u;t.default=s},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(4)),a=r(n(12)),i=r(n(3)),l=r(n(9)),u=r(n(8)),s=r(n(11)),c=r(n(10)),d=r(n(2)),f=(r(n(1)),r(n(47))),p=r(n(31)),h=n(39);function m(e){return"scale(".concat(e,", ").concat(Math.pow(e,2),")")}var v={entering:{opacity:1,transform:m(1)},entered:{opacity:1,transform:m(1)}},y=function(e){function t(){var e,n,r;(0,l.default)(this,t);for(var o=arguments.length,a=new Array(o),i=0;i<o;i++)a[i]=arguments[i];return(0,s.default)(r,(n=r=(0,s.default)(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(a))),r.autoTimeout=void 0,r.timer=null,r.handleEnter=function(e){var t=r.props,n=t.theme,o=t.timeout;(0,h.reflow)(e);var a=(0,h.getTransitionProps)(r.props,{mode:"enter"}),i=a.duration,l=a.delay,u=0;"auto"===o?(u=n.transitions.getAutoHeightDuration(e.clientHeight),r.autoTimeout=u):u=i,e.style.transition=[n.transitions.create("opacity",{duration:u,delay:l}),n.transitions.create("transform",{duration:.666*u,delay:l})].join(","),r.props.onEnter&&r.props.onEnter(e)},r.handleExit=function(e){var t=r.props,n=t.theme,o=t.timeout,a=0,i=(0,h.getTransitionProps)(r.props,{mode:"exit"}),l=i.duration,u=i.delay;"auto"===o?(a=n.transitions.getAutoHeightDuration(e.clientHeight),r.autoTimeout=a):a=l,e.style.transition=[n.transitions.create("opacity",{duration:a,delay:u}),n.transitions.create("transform",{duration:.666*a,delay:u||.333*a})].join(","),e.style.opacity="0",e.style.transform=m(.75),r.props.onExit&&r.props.onExit(e)},r.addEndListener=function(e,t){"auto"===r.props.timeout&&(r.timer=setTimeout(t,r.autoTimeout||0))},n))}return(0,c.default)(t,e),(0,u.default)(t,[{key:"componentWillUnmount",value:function(){clearTimeout(this.timer)}},{key:"render",value:function(){var e=this.props,t=e.children,n=(e.onEnter,e.onExit,e.style),r=(e.theme,e.timeout),l=(0,i.default)(e,["children","onEnter","onExit","style","theme","timeout"]),u=(0,a.default)({},n,d.default.isValidElement(t)?t.props.style:{});return d.default.createElement(f.default,(0,o.default)({appear:!0,onEnter:this.handleEnter,onExit:this.handleExit,addEndListener:this.addEndListener,timeout:"auto"===r?null:r},l),function(e,n){return d.default.cloneElement(t,(0,a.default)({style:(0,a.default)({opacity:0,transform:m(.75)},v[e],u)},n))})}}]),t}(d.default.Component);y.propTypes={},y.defaultProps={timeout:"auto"},y.muiSupportAuto=!0;var g=(0,p.default)()(y);t.default=g},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.styles=void 0;var o=r(n(4)),a=r(n(7)),i=r(n(3)),l=r(n(2)),u=(r(n(1)),r(n(6))),s=r(n(5)),c=function(e){return{root:{position:"absolute",left:0,right:0,height:48,background:"rgba(0, 0, 0, 0.4)",display:"flex",alignItems:"center",fontFamily:e.typography.fontFamily},titlePositionBottom:{bottom:0},titlePositionTop:{top:0},rootSubtitle:{height:68},titleWrap:{flexGrow:1,marginLeft:e.mixins.gutters().paddingLeft,marginRight:e.mixins.gutters().paddingRight,color:e.palette.common.white,overflow:"hidden"},titleWrapActionPosLeft:{marginLeft:0},titleWrapActionPosRight:{marginRight:0},title:{fontSize:e.typography.pxToRem(16),lineHeight:"24px",textOverflow:"ellipsis",overflow:"hidden",whiteSpace:"nowrap"},subtitle:{fontSize:e.typography.pxToRem(12),lineHeight:1,textOverflow:"ellipsis",overflow:"hidden",whiteSpace:"nowrap"},actionIcon:{},actionIconActionPosLeft:{order:-1}}};function d(e){var t,n,r=e.actionIcon,s=e.actionPosition,c=e.classes,d=e.className,f=e.subtitle,p=e.title,h=e.titlePosition,m=(0,i.default)(e,["actionIcon","actionPosition","classes","className","subtitle","title","titlePosition"]),v=r&&s,y=(0,u.default)(c.root,(t={},(0,a.default)(t,c.titlePositionBottom,"bottom"===h),(0,a.default)(t,c.titlePositionTop,"top"===h),(0,a.default)(t,c.rootSubtitle,f),t),d),g=(0,u.default)(c.titleWrap,(n={},(0,a.default)(n,c.titleWrapActionPosLeft,"left"===v),(0,a.default)(n,c.titleWrapActionPosRight,"right"===v),n));return l.default.createElement("div",(0,o.default)({className:y},m),l.default.createElement("div",{className:g},l.default.createElement("div",{className:c.title},p),f?l.default.createElement("div",{className:c.subtitle},f):null),r?l.default.createElement("div",{className:(0,u.default)(c.actionIcon,(0,a.default)({},c.actionIconActionPosLeft,"left"===v))},r):null)}t.styles=c,d.propTypes={},d.defaultProps={actionPosition:"right",titlePosition:"bottom"};var f=(0,s.default)(c,{name:"MuiGridListTileBar"})(d);t.default=f},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.styles=void 0;var o=r(n(4)),a=r(n(3)),i=r(n(74)),l=r(n(9)),u=r(n(8)),s=r(n(11)),c=r(n(10)),d=r(n(2)),f=(r(n(1)),r(n(6))),p=r(n(23)),h=r(n(29)),m=r(n(5)),v={root:{boxSizing:"border-box",flexShrink:0},tile:{position:"relative",display:"block",height:"100%",overflow:"hidden"},imgFullHeight:{height:"100%",transform:"translateX(-50%)",position:"relative",left:"50%"},imgFullWidth:{width:"100%",position:"relative",transform:"translateY(-50%)",top:"50%"}};t.styles=v;var y=function(e){function t(){var e,n,r;(0,l.default)(this,t);for(var o=arguments.length,a=new Array(o),u=0;u<o;u++)a[u]=arguments[u];return(0,s.default)(r,(n=r=(0,s.default)(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(a))),r.imgElement=null,r.handleResize=(0,h.default)(function(){r.fit()},166),r.fit=function(){var e=r.imgElement;if(e&&e.complete){var t,n,o,a;if(e.width/e.height>e.parentNode.offsetWidth/e.parentNode.offsetHeight)(t=e.classList).remove.apply(t,(0,i.default)(r.props.classes.imgFullWidth.split(" "))),(n=e.classList).add.apply(n,(0,i.default)(r.props.classes.imgFullHeight.split(" ")));else(o=e.classList).remove.apply(o,(0,i.default)(r.props.classes.imgFullHeight.split(" "))),(a=e.classList).add.apply(a,(0,i.default)(r.props.classes.imgFullWidth.split(" ")));e.removeEventListener("load",r.fit)}},n))}return(0,c.default)(t,e),(0,u.default)(t,[{key:"componentDidMount",value:function(){this.ensureImageCover()}},{key:"componentDidUpdate",value:function(){this.ensureImageCover()}},{key:"componentWillUnmount",value:function(){this.handleResize.clear()}},{key:"ensureImageCover",value:function(){this.imgElement&&(this.imgElement.complete?this.fit():this.imgElement.addEventListener("load",this.fit))}},{key:"render",value:function(){var e=this,t=this.props,n=t.children,r=t.classes,i=t.className,l=(t.cols,t.component),u=(t.rows,(0,a.default)(t,["children","classes","className","cols","component","rows"]));return d.default.createElement(l,(0,o.default)({className:(0,f.default)(r.root,i)},u),d.default.createElement(p.default,{target:"window",onResize:this.handleResize}),d.default.createElement("div",{className:r.tile},d.default.Children.map(n,function(t){return t&&"img"===t.type?d.default.cloneElement(t,{key:"img",ref:function(t){e.imgElement=t}}):t})))}}]),t}(d.default.Component);y.propTypes={},y.defaultProps={cols:1,component:"li",rows:1};var g=(0,m.default)(v,{name:"MuiGridListTile"})(y);t.default=g},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.styles=void 0;var o=r(n(4)),a=r(n(12)),i=r(n(3)),l=r(n(2)),u=(r(n(1)),r(n(6))),s=r(n(5)),c={root:{display:"flex",flexWrap:"wrap",overflowY:"auto",listStyle:"none",padding:0,WebkitOverflowScrolling:"touch"}};function d(e){var t=e.cellHeight,n=e.children,r=e.classes,s=e.className,c=e.cols,d=e.component,f=e.spacing,p=e.style,h=(0,i.default)(e,["cellHeight","children","classes","className","cols","component","spacing","style"]);return l.default.createElement(d,(0,o.default)({className:(0,u.default)(r.root,s),style:(0,a.default)({margin:-f/2},p)},h),l.default.Children.map(n,function(e){if(!l.default.isValidElement(e))return null;var n=e.props.cols||1,r=e.props.rows||1;return l.default.cloneElement(e,{style:(0,o.default)({width:"".concat(100/c*n,"%"),height:"auto"===t?"auto":t*r+f,padding:f/2},e.props.style)})}))}t.styles=c,d.propTypes={},d.defaultProps={cellHeight:180,cols:2,component:"ul",spacing:4};var f=(0,s.default)(c,{name:"MuiGridList"})(d);t.default=f},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=function(e){return function(t){return function(n,r,o,a,i){var l=i||r;return void 0===n[r]||n[t]?null:new Error("The property `".concat(l,"` of ")+"`".concat(e,"` must be used on `").concat(t,"`."))}}};t.default=r},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.styles=void 0;var o=r(n(3)),a=r(n(12)),i=r(n(4)),l=r(n(7)),u=r(n(2)),s=(r(n(1)),r(n(6))),c=r(n(5)),d=n(56),f=(r(n(331)),[0,8,16,24,32,40]),p=[!0,1,2,3,4,5,6,7,8,9,10,11,12];var h=function(e){return(0,a.default)({container:{boxSizing:"border-box",display:"flex",flexWrap:"wrap",width:"100%"},item:{boxSizing:"border-box",margin:"0"},zeroMinWidth:{minWidth:0},"direction-xs-column":{flexDirection:"column"},"direction-xs-column-reverse":{flexDirection:"column-reverse"},"direction-xs-row-reverse":{flexDirection:"row-reverse"},"wrap-xs-nowrap":{flexWrap:"nowrap"},"wrap-xs-wrap-reverse":{flexWrap:"wrap-reverse"},"align-items-xs-center":{alignItems:"center"},"align-items-xs-flex-start":{alignItems:"flex-start"},"align-items-xs-flex-end":{alignItems:"flex-end"},"align-items-xs-baseline":{alignItems:"baseline"},"align-content-xs-center":{alignContent:"center"},"align-content-xs-flex-start":{alignContent:"flex-start"},"align-content-xs-flex-end":{alignContent:"flex-end"},"align-content-xs-space-between":{alignContent:"space-between"},"align-content-xs-space-around":{alignContent:"space-around"},"justify-xs-center":{justifyContent:"center"},"justify-xs-flex-end":{justifyContent:"flex-end"},"justify-xs-space-between":{justifyContent:"space-between"},"justify-xs-space-around":{justifyContent:"space-around"}},function(e,t){var n={};return f.forEach(function(e,r){0!==r&&(n["spacing-".concat(t,"-").concat(e)]={margin:-e/2,width:"calc(100% + ".concat(e,"px)"),"& > $item":{padding:e/2}})}),n}(0,"xs"),d.keys.reduce(function(t,n){return function(e,t,n){var r=(0,l.default)({},"grid-".concat(n),{flexBasis:0,flexGrow:1,maxWidth:"100%"});p.forEach(function(e){if("boolean"!=typeof e){var t="".concat(Math.round(e/12*1e7)/1e5,"%");r["grid-".concat(n,"-").concat(e)]={flexBasis:t,maxWidth:t}}}),"xs"===n?(0,i.default)(e,r):e[t.breakpoints.up(n)]=r}(t,e,n),t},{}))};function m(e){var t,n=e.alignContent,r=e.alignItems,a=e.classes,c=e.className,d=e.component,f=e.container,p=e.direction,h=e.item,v=e.justify,y=e.lg,g=e.md,b=e.sm,x=e.spacing,w=e.wrap,_=e.xl,k=e.xs,P=e.zeroMinWidth,E=(0,o.default)(e,["alignContent","alignItems","classes","className","component","container","direction","item","justify","lg","md","sm","spacing","wrap","xl","xs","zeroMinWidth"]),O=(0,s.default)((t={},(0,l.default)(t,a.container,f),(0,l.default)(t,a.item,h),(0,l.default)(t,a.zeroMinWidth,P),(0,l.default)(t,a["spacing-xs-".concat(String(x))],f&&0!==x),(0,l.default)(t,a["direction-xs-".concat(String(p))],p!==m.defaultProps.direction),(0,l.default)(t,a["wrap-xs-".concat(String(w))],w!==m.defaultProps.wrap),(0,l.default)(t,a["align-items-xs-".concat(String(r))],r!==m.defaultProps.alignItems),(0,l.default)(t,a["align-content-xs-".concat(String(n))],n!==m.defaultProps.alignContent),(0,l.default)(t,a["justify-xs-".concat(String(v))],v!==m.defaultProps.justify),(0,l.default)(t,a["grid-xs"],!0===k),(0,l.default)(t,a["grid-xs-".concat(String(k))],k&&!0!==k),(0,l.default)(t,a["grid-sm"],!0===b),(0,l.default)(t,a["grid-sm-".concat(String(b))],b&&!0!==b),(0,l.default)(t,a["grid-md"],!0===g),(0,l.default)(t,a["grid-md-".concat(String(g))],g&&!0!==g),(0,l.default)(t,a["grid-lg"],!0===y),(0,l.default)(t,a["grid-lg-".concat(String(y))],y&&!0!==y),(0,l.default)(t,a["grid-xl"],!0===_),(0,l.default)(t,a["grid-xl-".concat(String(_))],_&&!0!==_),t),c);return u.default.createElement(d,(0,i.default)({className:O},E))}t.styles=h,m.propTypes={},m.defaultProps={alignContent:"stretch",alignItems:"stretch",component:"div",container:!1,direction:"row",item:!1,justify:"flex-start",lg:!1,md:!1,sm:!1,spacing:0,wrap:"wrap",xl:!1,xs:!1,zeroMinWidth:!1};var v=(0,c.default)(h,{name:"MuiGrid"})(m);t.default=v},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.styles=void 0;var o=r(n(4)),a=r(n(7)),i=r(n(3)),l=r(n(2)),u=r(n(1)),s=r(n(6)),c=r(n(5)),d=function(e){return{root:{fontFamily:e.typography.fontFamily,color:e.palette.text.secondary,fontSize:e.typography.pxToRem(16),lineHeight:1,padding:0,"&$focused":{color:e.palette.primary["light"===e.palette.type?"dark":"light"]},"&$disabled":{color:e.palette.text.disabled},"&$error":{color:e.palette.error.main}},focused:{},disabled:{},error:{},asterisk:{"&$error":{color:e.palette.error.main}}}};function f(e,t){var n,r=e.children,u=e.classes,c=e.className,d=e.component,f=e.disabled,p=e.error,h=e.focused,m=e.required,v=(0,i.default)(e,["children","classes","className","component","disabled","error","focused","required"]),y=t.muiFormControl,g=m,b=h,x=f,w=p;y&&(void 0===g&&(g=y.required),void 0===b&&(b=y.focused),void 0===x&&(x=y.disabled),void 0===w&&(w=y.error));var _=(0,s.default)(u.root,(n={},(0,a.default)(n,u.focused,b),(0,a.default)(n,u.disabled,x),(0,a.default)(n,u.error,w),n),c);return l.default.createElement(d,(0,o.default)({className:_},v),r,g&&l.default.createElement("span",{className:(0,s.default)(u.asterisk,(0,a.default)({},u.error,w))}," *"))}t.styles=d,f.propTypes={},f.defaultProps={component:"label"},f.contextTypes={muiFormControl:u.default.object};var p=(0,c.default)(d,{name:"MuiFormLabel"})(f);t.default=p},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.styles=void 0;var o=r(n(4)),a=r(n(7)),i=r(n(3)),l=r(n(2)),u=r(n(1)),s=r(n(6)),c=r(n(5)),d=function(e){return{root:{color:e.palette.text.secondary,fontFamily:e.typography.fontFamily,fontSize:e.typography.pxToRem(12),textAlign:"left",marginTop:e.spacing.unit,lineHeight:"1em",minHeight:"1em",margin:0,"&$error":{color:e.palette.error.main},"&$disabled":{color:e.palette.text.disabled}},error:{},disabled:{},marginDense:{marginTop:e.spacing.unit/2}}};function f(e,t){var n,r=e.classes,u=e.className,c=e.disabled,d=e.error,f=e.margin,p=e.component,h=(0,i.default)(e,["classes","className","disabled","error","margin","component"]),m=t.muiFormControl,v=c,y=d,g=f;m&&(void 0===v&&(v=m.disabled),void 0===y&&(y=m.error),void 0===g&&(g=m.margin));var b=(0,s.default)(r.root,(n={},(0,a.default)(n,r.disabled,v),(0,a.default)(n,r.error,y),(0,a.default)(n,r.marginDense,"dense"===g),n),u);return l.default.createElement(p,(0,o.default)({className:b},h))}t.styles=d,f.propTypes={},f.defaultProps={component:"p"},f.contextTypes={muiFormControl:u.default.object};var p=(0,c.default)(d,{name:"MuiFormHelperText"})(f);t.default=p},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.styles=void 0;var o=r(n(4)),a=r(n(7)),i=r(n(3)),l=r(n(2)),u=(r(n(1)),r(n(6))),s=r(n(5)),c={root:{display:"flex",flexDirection:"column",flexWrap:"wrap"},row:{flexDirection:"row"}};function d(e){var t=e.classes,n=e.className,r=e.children,s=e.row,c=(0,i.default)(e,["classes","className","children","row"]);return l.default.createElement("div",(0,o.default)({className:(0,u.default)(t.root,(0,a.default)({},t.row,s),n)},c),r)}t.styles=c,d.propTypes={},d.defaultProps={row:!1};var f=(0,s.default)(c,{name:"MuiFormGroup"})(d);t.default=f},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.styles=void 0;var o=r(n(4)),a=r(n(7)),i=r(n(3)),l=r(n(2)),u=r(n(1)),s=r(n(6)),c=r(n(5)),d=r(n(18)),f=function(e){return{root:{display:"inline-flex",alignItems:"center",cursor:"pointer",verticalAlign:"middle",WebkitTapHighlightColor:"transparent",marginLeft:-14,marginRight:2*e.spacing.unit,"&$disabled":{cursor:"default"}},disabled:{},label:{"&$disabled":{color:e.palette.text.disabled}}}};function p(e,t){var n=e.checked,r=e.classes,u=e.className,c=e.control,f=e.disabled,p=e.inputRef,h=e.label,m=e.name,v=e.onChange,y=e.value,g=(0,i.default)(e,["checked","classes","className","control","disabled","inputRef","label","name","onChange","value"]),b=t.muiFormControl,x=f;void 0!==c.props.disabled&&void 0===x&&(x=c.props.disabled),b&&void 0===x&&(x=b.disabled);var w=(0,s.default)(r.root,(0,a.default)({},r.disabled,x),u);return l.default.createElement("label",(0,o.default)({className:w},g),l.default.cloneElement(c,{disabled:x,checked:void 0===c.props.checked?n:c.props.checked,name:c.props.name||m,onChange:c.props.onChange||v,value:c.props.value||y,inputRef:c.props.inputRef||p}),l.default.createElement(d.default,{component:"span",className:(0,s.default)(r.label,(0,a.default)({},r.disabled,x))},h))}t.styles=f,p.propTypes={},p.contextTypes={muiFormControl:u.default.object};var h=(0,c.default)(f,{name:"MuiFormControlLabel"})(p);t.default=h},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.styles=void 0;var o=r(n(4)),a=r(n(3)),i=r(n(9)),l=r(n(8)),u=r(n(11)),s=r(n(10)),c=r(n(2)),d=(r(n(1)),r(n(6))),f=r(n(29)),p=r(n(23)),h=r(n(5)),m=19,v={root:{position:"relative",width:"100%"},textarea:{width:"100%",height:"100%",resize:"none",font:"inherit",padding:0,cursor:"inherit",boxSizing:"border-box",lineHeight:"inherit",border:"none",outline:"none",background:"transparent"},shadow:{resize:"none",overflow:"hidden",visibility:"hidden",position:"absolute",height:"auto",whiteSpace:"pre-wrap"}};t.styles=v;var y=function(e){function t(e){var n;return(0,i.default)(this,t),(n=(0,u.default)(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e))).state={height:null},n.shadow=null,n.singlelineShadow=null,n.input=null,n.value=null,n.handleResize=(0,f.default)(function(){n.syncHeightWithShadow()},166),n.handleRefInput=function(e){n.input=e;var t=n.props.textareaRef;t&&("function"==typeof t?t(e):t.current=e)},n.handleRefSinglelineShadow=function(e){n.singlelineShadow=e},n.handleRefShadow=function(e){n.shadow=e},n.handleChange=function(e){n.value=e.target.value,void 0===n.props.value&&n.shadow&&(n.shadow.value=n.value,n.syncHeightWithShadow()),n.props.onChange&&n.props.onChange(e)},n.value=e.value||e.defaultValue||"",n.state={height:Number(e.rows)*m},n}return(0,s.default)(t,e),(0,l.default)(t,[{key:"componentDidMount",value:function(){this.syncHeightWithShadow()}},{key:"componentDidUpdate",value:function(){this.syncHeightWithShadow()}},{key:"componentWillUnmount",value:function(){this.handleResize.clear()}},{key:"syncHeightWithShadow",value:function(){var e=this.props;if(this.shadow&&this.singlelineShadow){void 0!==e.value&&(this.shadow.value=null==e.value?"":String(e.value));var t=this.singlelineShadow.scrollHeight,n=this.shadow.scrollHeight;void 0!==n&&(Number(e.rowsMax)>=Number(e.rows)&&(n=Math.min(Number(e.rowsMax)*t,n)),n=Math.max(n,t),Math.abs(this.state.height-n)>1&&this.setState({height:n}))}}},{key:"render",value:function(){var e=this.props,t=e.classes,n=e.className,r=e.defaultValue,i=(e.onChange,e.rows),l=(e.rowsMax,e.textareaRef,e.value),u=(0,a.default)(e,["classes","className","defaultValue","onChange","rows","rowsMax","textareaRef","value"]);return c.default.createElement("div",{className:t.root,style:{height:this.state.height}},c.default.createElement(p.default,{target:"window",onResize:this.handleResize}),c.default.createElement("textarea",{ref:this.handleRefSinglelineShadow,className:(0,d.default)(t.shadow,t.textarea),tabIndex:-1,rows:"1",readOnly:!0,"aria-hidden":"true",value:""}),c.default.createElement("textarea",{ref:this.handleRefShadow,className:(0,d.default)(t.shadow,t.textarea),tabIndex:-1,rows:i,"aria-hidden":"true",readOnly:!0,defaultValue:r,value:l}),c.default.createElement("textarea",(0,o.default)({rows:i,className:(0,d.default)(t.textarea,n),defaultValue:r,value:l,onChange:this.handleChange,ref:this.handleRefInput},u)))}}]),t}(c.default.Component);y.propTypes={},y.defaultProps={rows:1};var g=(0,h.default)(v)(y);t.default=g},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.styles=void 0;var o=r(n(4)),a=r(n(7)),i=r(n(3)),l=r(n(9)),u=r(n(8)),s=r(n(11)),c=r(n(10)),d=r(n(2)),f=r(n(1)),p=r(n(6)),h=r(n(5)),m=n(106),v=n(13),y=n(35),g=function(e){return{root:{display:"inline-flex",flexDirection:"column",position:"relative",minWidth:0,padding:0,margin:0,border:0},marginNormal:{marginTop:2*e.spacing.unit,marginBottom:e.spacing.unit},marginDense:{marginTop:e.spacing.unit,marginBottom:e.spacing.unit/2},fullWidth:{width:"100%"}}};t.styles=g;var b=function(e){function t(e){var n;(0,l.default)(this,t),(n=(0,s.default)(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e))).state={adornedStart:!1,filled:!1,focused:!1},n.handleFocus=function(){n.setState(function(e){return e.focused?null:{focused:!0}})},n.handleBlur=function(){n.setState(function(e){return e.focused?{focused:!1}:null})},n.handleDirty=function(){n.state.filled||n.setState({filled:!0})},n.handleClean=function(){n.state.filled&&n.setState({filled:!1})};var r=n.props.children;return r&&d.default.Children.forEach(r,function(e){if((0,y.isMuiElement)(e,["Input","Select","NativeSelect"])){(0,m.isFilled)(e.props,!0)&&(n.state.filled=!0);var t=(0,y.isMuiElement)(e,["Select","NativeSelect"])?e.props.input:e;t&&(0,m.isAdornedStart)(t.props)&&(n.state.adornedStart=!0)}}),n}return(0,c.default)(t,e),(0,u.default)(t,[{key:"getChildContext",value:function(){var e=this.props,t=e.disabled,n=e.error,r=e.required,o=e.margin,a=this.state;return{muiFormControl:{adornedStart:a.adornedStart,disabled:t,error:n,filled:a.filled,focused:a.focused,margin:o,onBlur:this.handleBlur,onEmpty:this.handleClean,onFilled:this.handleDirty,onFocus:this.handleFocus,required:r}}}},{key:"render",value:function(){var e,t=this.props,n=t.classes,r=t.className,l=t.component,u=(t.disabled,t.error,t.fullWidth),s=t.margin,c=(t.required,(0,i.default)(t,["classes","className","component","disabled","error","fullWidth","margin","required"]));return d.default.createElement(l,(0,o.default)({className:(0,p.default)(n.root,(e={},(0,a.default)(e,n["margin".concat((0,v.capitalize)(s))],"none"!==s),(0,a.default)(e,n.fullWidth,u),e),r)},c))}}]),t}(d.default.Component);b.propTypes={},b.defaultProps={component:"div",disabled:!1,error:!1,fullWidth:!1,margin:"none",required:!1},b.childContextTypes={muiFormControl:f.default.object};var x=(0,h.default)(g,{name:"MuiFormControl"})(b);t.default=x},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.styles=void 0;var o=r(n(4)),a=r(n(7)),i=r(n(3)),l=r(n(9)),u=r(n(8)),s=r(n(11)),c=r(n(10)),d=r(n(2)),f=(r(n(1)),r(n(6))),p=r(n(20)),h=r(n(28)),m=r(n(5)),v=function(e){var t={duration:e.transitions.duration.shortest};return{root:{display:"flex",minHeight:6*e.spacing.unit,transition:e.transitions.create(["min-height","background-color"],t),padding:"0 ".concat(3*e.spacing.unit,"px 0 ").concat(3*e.spacing.unit,"px"),"&:hover:not($disabled)":{cursor:"pointer"},"&$expanded":{minHeight:64},"&$focused":{backgroundColor:e.palette.grey[300]},"&$disabled":{opacity:.38}},expanded:{},focused:{},disabled:{},content:{display:"flex",flexGrow:1,transition:e.transitions.create(["margin"],t),margin:"12px 0","& > :last-child":{paddingRight:4*e.spacing.unit},"&$expanded":{margin:"20px 0"}},expandIcon:{position:"absolute",top:"50%",right:e.spacing.unit,transform:"translateY(-50%) rotate(0deg)",transition:e.transitions.create("transform",t),"&:hover":{backgroundColor:"transparent"},"&$expanded":{transform:"translateY(-50%) rotate(180deg)"}}}};t.styles=v;var y=function(e){function t(){var e,n,r;(0,l.default)(this,t);for(var o=arguments.length,a=new Array(o),i=0;i<o;i++)a[i]=arguments[i];return(0,s.default)(r,(n=r=(0,s.default)(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(a))),r.state={focused:!1},r.handleFocus=function(){r.setState({focused:!0})},r.handleBlur=function(){r.setState({focused:!1})},r.handleChange=function(e){var t=r.props,n=t.onChange,o=t.onClick;n&&n(e),o&&o(e)},n))}return(0,c.default)(t,e),(0,u.default)(t,[{key:"render",value:function(){var e,t=this.props,n=t.children,r=t.classes,l=t.className,u=t.disabled,s=t.expanded,c=t.expandIcon,m=(t.onChange,(0,i.default)(t,["children","classes","className","disabled","expanded","expandIcon","onChange"])),v=this.state.focused;return d.default.createElement(p.default,(0,o.default)({focusRipple:!1,disableRipple:!0,disabled:u,component:"div","aria-expanded":s,className:(0,f.default)(r.root,(e={},(0,a.default)(e,r.disabled,u),(0,a.default)(e,r.expanded,s),(0,a.default)(e,r.focused,v),e),l)},m,{onFocusVisible:this.handleFocus,onBlur:this.handleBlur,onClick:this.handleChange}),d.default.createElement("div",{className:(0,f.default)(r.content,(0,a.default)({},r.expanded,s))},n),c&&d.default.createElement(h.default,{disabled:u,className:(0,f.default)(r.expandIcon,(0,a.default)({},r.expanded,s)),component:"div",tabIndex:-1,"aria-hidden":"true"},c))}}]),t}(d.default.Component);y.propTypes={},y.defaultProps={disabled:!1},y.muiName="ExpansionPanelSummary";var g=(0,m.default)(v,{name:"MuiExpansionPanelSummary"})(y);t.default=g},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.styles=void 0;var o=r(n(4)),a=r(n(3)),i=r(n(2)),l=(r(n(1)),r(n(6))),u=r(n(5)),s=function(e){return{root:{display:"flex",padding:"".concat(e.spacing.unit,"px ").concat(3*e.spacing.unit,"px ").concat(3*e.spacing.unit,"px")}}};function c(e){var t=e.classes,n=e.children,r=e.className,u=(0,a.default)(e,["classes","children","className"]);return i.default.createElement("div",(0,o.default)({className:(0,l.default)(t.root,r)},u),n)}t.styles=s,c.propTypes={};var d=(0,u.default)(s,{name:"MuiExpansionPanelDetails"})(c);t.default=d},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.styles=void 0;var o=r(n(4)),a=r(n(3)),i=r(n(2)),l=(r(n(1)),r(n(6))),u=r(n(5)),s=n(35);n(24);var c=function(e){return{root:{display:"flex",alignItems:"center",justifyContent:"flex-end",padding:"".concat(2*e.spacing.unit,"px ").concat(e.spacing.unit,"px")},action:{marginLeft:e.spacing.unit}}};function d(e){var t=e.children,n=e.classes,r=e.className,u=(0,a.default)(e,["children","classes","className"]);return i.default.createElement("div",(0,o.default)({className:(0,l.default)(n.root,r)},u),(0,s.cloneChildrenWithClassName)(t,n.action))}t.styles=c,d.propTypes={};var f=(0,u.default)(c,{name:"MuiExpansionPanelActions"})(d);t.default=f},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.styles=void 0;var o=r(n(4)),a=r(n(7)),i=r(n(3)),l=r(n(9)),u=r(n(8)),s=r(n(11)),c=r(n(10)),d=r(n(12)),f=r(n(2)),p=(r(n(1)),r(n(6))),h=r(n(67)),m=r(n(21)),v=r(n(5)),y=n(35),g="undefined"!=typeof window&&/jsdom/.test(window.navigator.userAgent)?{}:{"@supports (-ms-ime-align: auto)":{borderBottomLeftRadius:0,borderBottomRightRadius:0}},b=function(e){var t={duration:e.transitions.duration.shortest};return{root:{position:"relative",transition:e.transitions.create(["margin"],t),"&:before":{position:"absolute",left:0,top:-1,right:0,height:1,content:'""',opacity:1,backgroundColor:e.palette.divider,transition:e.transitions.create(["opacity","background-color"],t)},"&:first-child":{borderTopLeftRadius:2,borderTopRightRadius:2,"&:before":{display:"none"}},"&:last-child":(0,d.default)({borderBottomLeftRadius:2,borderBottomRightRadius:2},g),"&$expanded + &":{"&:before":{display:"none"}}},expanded:{margin:"".concat(2*e.spacing.unit,"px 0"),"&:first-child":{marginTop:0},"&:last-child":{marginBottom:0},"&:before":{opacity:0}},disabled:{backgroundColor:e.palette.action.disabledBackground}}};t.styles=b;var x=function(e){function t(e){var n;return(0,l.default)(this,t),(n=(0,s.default)(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e))).state={},n.isControlled=null,n.handleChange=function(e){var t=n.isControlled?n.props.expanded:n.state.expanded;n.isControlled||n.setState({expanded:!t}),n.props.onChange&&n.props.onChange(e,!t)},n.isControlled=null!=e.expanded,n.isControlled||(n.state.expanded=void 0!==e.defaultExpanded&&e.defaultExpanded),n}return(0,c.default)(t,e),(0,u.default)(t,[{key:"render",value:function(){var e,t=this,n=this.props,r=n.children,l=n.classes,u=n.className,s=n.CollapseProps,c=(n.defaultExpanded,n.disabled),d=n.expanded,v=(n.onChange,(0,i.default)(n,["children","classes","className","CollapseProps","defaultExpanded","disabled","expanded","onChange"])),g=this.isControlled?d:this.state.expanded,b=(0,p.default)(l.root,(e={},(0,a.default)(e,l.expanded,g),(0,a.default)(e,l.disabled,c),e),u),x=null,w=f.default.Children.map(r,function(e){return f.default.isValidElement(e)?(0,y.isMuiElement)(e,["ExpansionPanelSummary"])?(x=f.default.cloneElement(e,{disabled:c,expanded:g,onChange:t.handleChange}),null):e:null}),_=g?null:{"aria-hidden":"true"};return f.default.createElement(m.default,(0,o.default)({className:b,elevation:1,square:!0},v),x,f.default.createElement(h.default,(0,o.default)({in:g,timeout:"auto"},_,s),w))}}]),t}(f.default.Component);x.propTypes={},x.defaultProps={defaultExpanded:!1,disabled:!1};var w=(0,v.default)(b,{name:"MuiExpansionPanel"})(x);t.default=w},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.setTranslateValue=w,t.default=void 0;var o=r(n(4)),a=r(n(3)),i=r(n(12)),l=r(n(9)),u=r(n(8)),s=r(n(11)),c=r(n(10)),d=r(n(2)),f=(r(n(1)),r(n(15))),p=r(n(23)),h=r(n(29)),m=r(n(47)),v=r(n(76)),y=r(n(31)),g=n(25),b=n(39),x=24;function w(e,t){var n=function(e,t){var n,r=e.direction,o=t.getBoundingClientRect();if(t.fakeTransform)n=t.fakeTransform;else{var a=(0,v.default)(t).getComputedStyle(t);n=a.getPropertyValue("-webkit-transform")||a.getPropertyValue("transform")}var i=0,l=0;if(n&&"none"!==n&&"string"==typeof n){var u=n.split("(")[1].split(")")[0].split(",");i=parseInt(u[4],10),l=parseInt(u[5],10)}return"left"===r?"translateX(100vw) translateX(-".concat(o.left-i,"px)"):"right"===r?"translateX(-".concat(o.left+o.width+x-i,"px)"):"up"===r?"translateY(100vh) translateY(-".concat(o.top-l,"px)"):"translateY(-".concat(o.top+o.height+x-l,"px)")}(e,t);n&&(t.style.webkitTransform=n,t.style.transform=n)}var _=function(e){function t(){var e,n,r;(0,l.default)(this,t);for(var o=arguments.length,a=new Array(o),u=0;u<o;u++)a[u]=arguments[u];return(0,s.default)(r,(n=r=(0,s.default)(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(a))),r.mounted=!1,r.transition=null,r.handleResize=(0,h.default)(function(){if(!r.props.in&&"down"!==r.props.direction&&"right"!==r.props.direction){var e=f.default.findDOMNode(r.transition);e&&w(r.props,e)}},166),r.handleEnter=function(e){w(r.props,e),(0,b.reflow)(e),r.props.onEnter&&r.props.onEnter(e)},r.handleEntering=function(e){var t=r.props.theme,n=(0,b.getTransitionProps)(r.props,{mode:"enter"});e.style.webkitTransition=t.transitions.create("-webkit-transform",(0,i.default)({},n,{easing:t.transitions.easing.easeOut})),e.style.transition=t.transitions.create("transform",(0,i.default)({},n,{easing:t.transitions.easing.easeOut})),e.style.webkitTransform="translate(0, 0)",e.style.transform="translate(0, 0)",r.props.onEntering&&r.props.onEntering(e)},r.handleExit=function(e){var t=r.props.theme,n=(0,b.getTransitionProps)(r.props,{mode:"exit"});e.style.webkitTransition=t.transitions.create("-webkit-transform",(0,i.default)({},n,{easing:t.transitions.easing.sharp})),e.style.transition=t.transitions.create("transform",(0,i.default)({},n,{easing:t.transitions.easing.sharp})),w(r.props,e),r.props.onExit&&r.props.onExit(e)},r.handleExited=function(e){e.style.webkitTransition="",e.style.transition="",r.props.onExited&&r.props.onExited(e)},n))}return(0,c.default)(t,e),(0,u.default)(t,[{key:"componentDidMount",value:function(){this.props.in||this.updatePosition(),this.mounted=!0}},{key:"componentDidUpdate",value:function(e){e.direction===this.props.direction||this.props.in||this.updatePosition()}},{key:"componentWillUnmount",value:function(){this.handleResize.clear()}},{key:"updatePosition",value:function(){var e=f.default.findDOMNode(this.transition);e&&(e.style.visibility="inherit",w(this.props,e))}},{key:"render",value:function(){var e=this,t=this.props,n=t.children,r=(t.onEnter,t.onEntering,t.onExit,t.onExited,t.style),l=(t.theme,(0,a.default)(t,["children","onEnter","onEntering","onExit","onExited","style","theme"])),u={};return this.props.in||this.mounted||(u.visibility="hidden"),u=(0,i.default)({},u,r,d.default.isValidElement(n)?n.props.style:{}),d.default.createElement(p.default,{target:"window",onResize:this.handleResize},d.default.createElement(m.default,(0,o.default)({onEnter:this.handleEnter,onEntering:this.handleEntering,onExit:this.handleExit,onExited:this.handleExited,appear:!0,style:u,ref:function(t){e.transition=t}},l),n))}}]),t}(d.default.Component);_.propTypes={},_.defaultProps={direction:"down",timeout:{enter:g.duration.enteringScreen,exit:g.duration.leavingScreen}};var k=(0,y.default)()(_);t.default=k},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.styles=void 0;var o=r(n(4)),a=r(n(7)),i=r(n(3)),l=r(n(2)),u=(r(n(1)),r(n(6))),s=r(n(5)),c=n(32),d=function(e){return{root:{height:1,margin:0,border:"none",flexShrink:0,backgroundColor:e.palette.divider},absolute:{position:"absolute",bottom:0,left:0,width:"100%"},inset:{marginLeft:9*e.spacing.unit},light:{backgroundColor:(0,c.fade)(e.palette.divider,.08)}}};function f(e){var t,n=e.absolute,r=e.classes,s=e.className,c=e.component,d=e.inset,f=e.light,p=(0,i.default)(e,["absolute","classes","className","component","inset","light"]),h=(0,u.default)(r.root,(t={},(0,a.default)(t,r.absolute,n),(0,a.default)(t,r.inset,d),(0,a.default)(t,r.light,f),t),s);return l.default.createElement(c,(0,o.default)({className:h},p))}t.styles=d,f.propTypes={},f.defaultProps={absolute:!1,component:"hr",inset:!1,light:!1};var p=(0,s.default)(d,{name:"MuiDivider"})(f);t.default=p},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.styles=void 0;var o=r(n(4)),a=r(n(3)),i=r(n(2)),l=(r(n(1)),r(n(6))),u=r(n(5)),s=r(n(18)),c=function(e){return{root:{margin:0,padding:"".concat(3*e.spacing.unit,"px ").concat(3*e.spacing.unit,"px       20px ").concat(3*e.spacing.unit,"px"),flex:"0 0 auto"}}};function d(e){var t=e.children,n=e.classes,r=e.className,u=e.disableTypography,c=(0,a.default)(e,["children","classes","className","disableTypography"]);return i.default.createElement("div",(0,o.default)({className:(0,l.default)(n.root,r)},c),u?t:i.default.createElement(s.default,{variant:"title"},t))}t.styles=c,d.propTypes={},d.defaultProps={disableTypography:!1};var f=(0,u.default)(c,{name:"MuiDialogTitle"})(d);t.default=f},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.styles=void 0;var o=r(n(4)),a=r(n(3)),i=r(n(2)),l=(r(n(1)),r(n(6))),u=r(n(5)),s=r(n(18)),c=function(e){return{root:{color:e.palette.text.secondary}}};function d(e){var t=e.children,n=e.classes,r=e.className,u=(0,a.default)(e,["children","classes","className"]);return i.default.createElement(s.default,(0,o.default)({component:"p",variant:"subheading",className:(0,l.default)(n.root,r)},u),t)}t.styles=c,d.propTypes={};var f=(0,u.default)(c,{name:"MuiDialogContentText"})(d);t.default=f},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.styles=void 0;var o=r(n(4)),a=r(n(3)),i=r(n(2)),l=(r(n(1)),r(n(6))),u=r(n(5)),s=function(e){var t=3*e.spacing.unit;return{root:{flex:"1 1 auto",overflowY:"auto",WebkitOverflowScrolling:"touch",padding:"0 ".concat(t,"px ").concat(t,"px ").concat(t,"px"),"&:first-child":{paddingTop:t}}}};function c(e){var t=e.classes,n=e.children,r=e.className,u=(0,a.default)(e,["classes","children","className"]);return i.default.createElement("div",(0,o.default)({className:(0,l.default)(t.root,r)},u),n)}t.styles=s,c.propTypes={};var d=(0,u.default)(s,{name:"MuiDialogContent"})(c);t.default=d},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.styles=void 0;var o=r(n(4)),a=r(n(3)),i=r(n(2)),l=(r(n(1)),r(n(6))),u=r(n(5)),s=n(35);n(24);var c=function(e){return{root:{display:"flex",alignItems:"center",justifyContent:"flex-end",flex:"0 0 auto",margin:"".concat(e.spacing.unit,"px ").concat(e.spacing.unit/2,"px")},action:{margin:"0 ".concat(e.spacing.unit/2,"px"),minWidth:64}}};function d(e){var t=e.disableActionSpacing,n=e.children,r=e.classes,u=e.className,c=(0,a.default)(e,["disableActionSpacing","children","classes","className"]);return i.default.createElement("div",(0,o.default)({className:(0,l.default)(r.root,u)},c),t?n:(0,s.cloneChildrenWithClassName)(n,r.action))}t.styles=c,d.propTypes={},d.defaultProps={disableActionSpacing:!1};var f=(0,u.default)(c,{name:"MuiDialogActions"})(d);t.default=f},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ariaHidden=a,t.hideSiblings=function(e,t){o(e,t,function(e){return a(!0,e)})},t.showSiblings=function(e,t){o(e,t,function(e){return a(!1,e)})};var r=["template","script","style"];function o(e,t,n){t=[].concat(t),[].forEach.call(e.children,function(e){-1===t.indexOf(e)&&function(e){return 1===e.nodeType&&-1===r.indexOf(e.tagName.toLowerCase())}(e)&&n(e)})}function a(e,t){t&&(e?t.setAttribute("aria-hidden","true"):t.removeAttribute("aria-hidden"))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return e===e.window?e:9===e.nodeType&&(e.defaultView||e.parentWindow)},e.exports=t.default},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.isBody=l,t.default=function(e){var t=(0,a.default)(e),n=(0,i.default)(t);if(!(0,o.default)(t)&&!l(e))return e.scrollHeight>e.clientHeight;var r=n.getComputedStyle(t.body),u=parseInt(r.getPropertyValue("margin-left"),10),s=parseInt(r.getPropertyValue("margin-right"),10);return u+t.body.clientWidth+s<n.innerWidth};var o=r(n(350)),a=r(n(22)),i=r(n(76));function l(e){return e&&"body"===e.tagName.toLowerCase()}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return!(!e||!r.test(e))};var r=/^((translate|rotate|scale)(X|Y|Z|3d)?|matrix(3d)?|perspective|skew(X|Y)?)$/i;e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){return"removeProperty"in e.style?e.style.removeProperty(t):e.style.removeAttribute(t)},e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){if(!e)throw new TypeError("No Element passed to `getComputedStyle()`");var t=e.ownerDocument;return"defaultView"in t?t.defaultView.opener?e.ownerDocument.defaultView.getComputedStyle(e,null):window.getComputedStyle(e,null):{getPropertyValue:function(t){var n=e.style;"float"==(t=(0,a.default)(t))&&(t="styleFloat");var r=e.currentStyle[t]||null;if(null==r&&n&&n[t]&&(r=n[t]),l.test(r)&&!i.test(t)){var o=n.left,u=e.runtimeStyle,s=u&&u.left;s&&(u.left=e.currentStyle.left),n.left="fontSize"===t?"1em":r,r=n.pixelLeft+"px",n.left=o,s&&(u.left=s)}return r}}};var r,o=n(190),a=(r=o)&&r.__esModule?r:{default:r};var i=/^(top|right|bottom|left)$/,l=/^([+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|))(?!px)[a-z%]+$/i;e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return e.replace(r,"-$1").toLowerCase()};var r=/([A-Z])/g;e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return(0,a.default)(e).replace(i,"-ms-")};var r,o=n(355),a=(r=o)&&r.__esModule?r:{default:r};var i=/^ms-/;e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return e.replace(r,function(e,t){return t.toUpperCase()})};var r=/-(.)/g;e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,n){var s="",c="",d=t;if("string"==typeof t){if(void 0===n)return e.style[(0,r.default)(t)]||(0,a.default)(e).getPropertyValue((0,o.default)(t));(d={})[t]=n}Object.keys(d).forEach(function(t){var n=d[t];n||0===n?(0,u.default)(t)?c+=t+"("+n+") ":s+=(0,o.default)(t)+": "+n+";":(0,i.default)(e,(0,o.default)(t))}),c&&(s+=l.transform+": "+c+";");e.style.cssText+=";"+s};var r=s(n(190)),o=s(n(356)),a=s(n(354)),i=s(n(353)),l=n(189),u=s(n(352));function s(e){return e&&e.__esModule?e:{default:e}}e.exports=t.default},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(9)),a=r(n(8)),i=r(n(11)),l=r(n(10)),u=r(n(2)),s=r(n(15)),c=(r(n(1)),r(n(22)));r(n(57));var d=function(e){function t(){var e,n,r;(0,o.default)(this,t);for(var a=arguments.length,l=new Array(a),u=0;u<a;u++)l[u]=arguments[u];return(0,i.default)(r,(n=r=(0,i.default)(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(l))),r.getMountNode=function(){return r.mountNode},n))}return(0,l.default)(t,e),(0,a.default)(t,[{key:"componentDidMount",value:function(){this.setContainer(this.props.container),this.forceUpdate(this.props.onRendered)}},{key:"componentDidUpdate",value:function(e){e.container!==this.props.container&&(this.setContainer(this.props.container),this.forceUpdate())}},{key:"componentWillUnmount",value:function(){this.mountNode=null}},{key:"setContainer",value:function(e){var t;this.mountNode=function(e,t){return e="function"==typeof e?e():e,s.default.findDOMNode(e)||t}(e,(t=this,(0,c.default)(s.default.findDOMNode(t))).body)}},{key:"render",value:function(){var e=this.props.children;return this.mountNode?s.default.createPortal(e,this.mountNode):null}}]),t}(u.default.Component);d.propTypes={},d.propTypes={};var f=d;t.default=f},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(9)),a=r(n(8)),i=r(n(11)),l=r(n(10)),u=r(n(2)),s=r(n(15)),c=(r(n(1)),r(n(57)),function(e){function t(){return(0,o.default)(this,t),(0,i.default)(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return(0,l.default)(t,e),(0,a.default)(t,[{key:"componentDidMount",value:function(){var e=this.props.rootRef,t=s.default.findDOMNode(this);"function"==typeof e?e(t):e&&(e.current=t)}},{key:"componentWillUnmount",value:function(){var e=this.props.rootRef;"function"==typeof e?e(null):e&&(e.current=null)}},{key:"render",value:function(){return this.props.children}}]),t}(u.default.Component));c.propTypes={},c.propTypes={};var d=c;t.default=d},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.styles=void 0;var o=r(n(4)),a=r(n(7)),i=r(n(3)),l=r(n(9)),u=r(n(8)),s=r(n(11)),c=r(n(10)),d=r(n(52)),f=r(n(2)),p=r(n(15)),h=(r(n(1)),r(n(6))),m=(r(n(14)),r(n(49))),v=r(n(193)),y=r(n(75)),g=r(n(48)),b=r(n(22)),x=r(n(192)),w=r(n(66)),_=n(13),k=r(n(5)),P=r(n(191)),E=r(n(113));function O(e){return!!e.children&&e.children.props.hasOwnProperty("in")}var C=function(e){return{root:{display:"flex",width:"100%",height:"100%",position:"fixed",zIndex:e.zIndex.modal,top:0,left:0},hidden:{visibility:"hidden"}}};t.styles=C;var S=function(e){function t(e){var n;return(0,l.default)(this,t),(n=(0,s.default)(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e))).dialogElement=null,n.mounted=!1,n.mountNode=null,n.handleRendered=function(){n.autoFocus(),n.props.onRendered&&n.props.onRendered()},n.handleOpen=function(){var e=(0,b.default)(n.mountNode),t=function(e,t){return e="function"==typeof e?e():e,p.default.findDOMNode(e)||t}(n.props.container,e.body);n.props.manager.add((0,d.default)(n),t),e.addEventListener("keydown",n.handleDocumentKeyDown),e.addEventListener("focus",n.enforceFocus,!0)},n.handleClose=function(){n.props.manager.remove((0,d.default)(n));var e=(0,b.default)(n.mountNode);e.removeEventListener("keydown",n.handleDocumentKeyDown),e.removeEventListener("focus",n.enforceFocus),n.restoreLastFocus()},n.handleExited=function(){n.setState({exited:!0}),n.handleClose()},n.handleBackdropClick=function(e){e.target===e.currentTarget&&(n.props.onBackdropClick&&n.props.onBackdropClick(e),!n.props.disableBackdropClick&&n.props.onClose&&n.props.onClose(e,"backdropClick"))},n.handleDocumentKeyDown=function(e){n.isTopModal()&&"esc"===(0,m.default)(e)&&(n.props.onEscapeKeyDown&&n.props.onEscapeKeyDown(e),!n.props.disableEscapeKeyDown&&n.props.onClose&&n.props.onClose(e,"escapeKeyDown"))},n.checkForFocus=function(){g.default&&(n.lastFocus=(0,v.default)())},n.enforceFocus=function(){if(!n.props.disableEnforceFocus&&n.mounted&&n.isTopModal()){var e=(0,v.default)((0,b.default)(n.mountNode));n.dialogElement&&!(0,y.default)(n.dialogElement,e)&&n.dialogElement.focus()}},n.state={exited:!n.props.open},n}return(0,c.default)(t,e),(0,u.default)(t,[{key:"componentDidMount",value:function(){this.mounted=!0,this.props.open&&this.handleOpen()}},{key:"componentDidUpdate",value:function(e){!e.open&&this.props.open&&this.checkForFocus(),!e.open||this.props.open||O(this.props)?!e.open&&this.props.open&&this.handleOpen():this.handleClose()}},{key:"componentWillUnmount",value:function(){this.mounted=!1,(this.props.open||O(this.props)&&!this.state.exited)&&this.handleClose()}},{key:"autoFocus",value:function(){if(!this.props.disableAutoFocus){var e=(0,v.default)((0,b.default)(this.mountNode));this.dialogElement&&!(0,y.default)(this.dialogElement,e)&&(this.lastFocus=e,this.dialogElement.hasAttribute("tabIndex")||this.dialogElement.setAttribute("tabIndex",-1),this.dialogElement.focus())}}},{key:"restoreLastFocus",value:function(){this.props.disableRestoreFocus||this.lastFocus&&(this.lastFocus.focus&&this.lastFocus.focus(),this.lastFocus=null)}},{key:"isTopModal",value:function(){return this.props.manager.isTopModal(this)}},{key:"render",value:function(){var e=this,t=this.props,n=t.BackdropComponent,r=t.BackdropProps,l=t.children,u=t.classes,s=t.className,c=t.container,d=(t.disableAutoFocus,t.disableBackdropClick,t.disableEnforceFocus,t.disableEscapeKeyDown,t.disableRestoreFocus,t.hideBackdrop),p=t.keepMounted,m=(t.onBackdropClick,t.onClose,t.onEscapeKeyDown,t.onRendered,t.open),v=(t.manager,(0,i.default)(t,["BackdropComponent","BackdropProps","children","classes","className","container","disableAutoFocus","disableBackdropClick","disableEnforceFocus","disableEscapeKeyDown","disableRestoreFocus","hideBackdrop","keepMounted","onBackdropClick","onClose","onEscapeKeyDown","onRendered","open","manager"])),y=this.state.exited,g=O(this.props),b={};return p||m||g&&!y?(g&&(b.onExited=(0,_.createChainedFunction)(this.handleExited,l.props.onExited)),void 0===l.props.role&&(b.role=l.props.role||"document"),void 0===l.props.tabIndex&&(b.tabIndex=l.props.tabIndex||"-1"),f.default.createElement(w.default,{ref:function(t){e.mountNode=t?t.getMountNode():t},container:c,onRendered:this.handleRendered},f.default.createElement("div",(0,o.default)({className:(0,h.default)(u.root,s,(0,a.default)({},u.hidden,y))},v),d?null:f.default.createElement(n,(0,o.default)({open:m,onClick:this.handleBackdropClick},r)),f.default.createElement(x.default,{rootRef:function(t){e.dialogElement=t}},f.default.cloneElement(l,b))))):null}}],[{key:"getDerivedStateFromProps",value:function(e){return e.open?{exited:!1}:O(e)?null:{exited:!0}}}]),t}(f.default.Component);S.propTypes={},S.defaultProps={disableAutoFocus:!1,disableBackdropClick:!1,disableEnforceFocus:!1,disableEscapeKeyDown:!1,disableRestoreFocus:!1,hideBackdrop:!1,keepMounted:!1,manager:new P.default,BackdropComponent:E.default};var T=(0,k.default)(C,{flip:!1,name:"MuiModal"})(S);t.default=T},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.styles=void 0;var o=r(n(4)),a=r(n(7)),i=r(n(12)),l=r(n(3)),u=r(n(2)),s=(r(n(1)),r(n(6))),c=r(n(5)),d=n(13),f=r(n(38)),p=r(n(68)),h=n(25),m=r(n(21)),v=function(e){return{root:{justifyContent:"center",alignItems:"center"},paper:{display:"flex",margin:4*e.spacing.unit,flexDirection:"column",flex:"0 1 auto",position:"relative",maxHeight:"90vh",overflowY:"auto",outline:"none"},paperWidthXs:{maxWidth:Math.max(e.breakpoints.values.xs,360)},paperWidthSm:{maxWidth:e.breakpoints.values.sm},paperWidthMd:{maxWidth:e.breakpoints.values.md},paperFullWidth:{width:"100%"},paperFullScreen:{margin:0,width:"100%",maxWidth:"100%",height:"100%",maxHeight:"100%",borderRadius:0}}};function y(e){var t,n=e.BackdropProps,r=e.children,c=e.classes,p=e.className,h=e.disableBackdropClick,v=e.disableEscapeKeyDown,y=e.fullScreen,g=e.fullWidth,b=e.maxWidth,x=e.onBackdropClick,w=e.onClose,_=e.onEnter,k=e.onEntered,P=e.onEntering,E=e.onEscapeKeyDown,O=e.onExit,C=e.onExited,S=e.onExiting,T=e.open,M=e.PaperProps,j=e.TransitionComponent,N=e.transitionDuration,L=e.TransitionProps,R=(0,l.default)(e,["BackdropProps","children","classes","className","disableBackdropClick","disableEscapeKeyDown","fullScreen","fullWidth","maxWidth","onBackdropClick","onClose","onEnter","onEntered","onEntering","onEscapeKeyDown","onExit","onExited","onExiting","open","PaperProps","TransitionComponent","transitionDuration","TransitionProps"]);return u.default.createElement(f.default,(0,o.default)({className:(0,s.default)(c.root,p),BackdropProps:(0,i.default)({transitionDuration:N},n),disableBackdropClick:h,disableEscapeKeyDown:v,onBackdropClick:x,onEscapeKeyDown:E,onClose:w,open:T,role:"dialog"},R),u.default.createElement(j,(0,o.default)({appear:!0,in:T,timeout:N,onEnter:_,onEntering:P,onEntered:k,onExit:O,onExiting:S,onExited:C},L),u.default.createElement(m.default,(0,o.default)({elevation:24,className:(0,s.default)(c.paper,(t={},(0,a.default)(t,c["paperWidth".concat(b?(0,d.capitalize)(b):"")],b),(0,a.default)(t,c.paperFullScreen,y),(0,a.default)(t,c.paperFullWidth,g),t))},M),r)))}t.styles=v,y.propTypes={},y.defaultProps={disableBackdropClick:!1,disableEscapeKeyDown:!1,fullScreen:!1,fullWidth:!1,maxWidth:"sm",TransitionComponent:p.default,transitionDuration:{enter:h.duration.enteringScreen,exit:h.duration.leavingScreen}};var g=(0,c.default)(v,{name:"MuiDialog"})(y);t.default=g},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(9)),a=r(n(8)),i=r(n(11)),l=r(n(10)),u=r(n(2)),s=(r(n(1)),n(17)),c=(r(n(57)),function(e){function t(){return(0,o.default)(this,t),(0,i.default)(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return(0,l.default)(t,e),(0,a.default)(t,[{key:"render",value:function(){return this.props.children}}]),t}(u.default.Component));c.propTypes={},c.propTypes={},c.defaultProps={children:null};var d=(0,s.withStyles)(function(e){return{"@global":{html:{WebkitFontSmoothing:"antialiased",MozOsxFontSmoothing:"grayscale",boxSizing:"border-box"},"*, *::before, *::after":{boxSizing:"inherit"},body:{margin:0,backgroundColor:e.palette.background.default,"@media print":{backgroundColor:e.palette.common.white}}}}},{name:"MuiCssBaseline"})(c);t.default=d},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.styles=void 0;var o=r(n(4)),a=r(n(12)),i=r(n(7)),l=r(n(3)),u=r(n(9)),s=r(n(8)),c=r(n(11)),d=r(n(10)),f=r(n(2)),p=r(n(6)),h=(r(n(1)),r(n(47))),m=r(n(5)),v=n(25),y=n(39),g=function(e){return{container:{height:0,overflow:"hidden",transition:e.transitions.create("height")},entered:{height:"auto"},wrapper:{display:"flex"},wrapperInner:{width:"100%"}}};t.styles=g;var b=function(e){function t(){var e,n,r;(0,u.default)(this,t);for(var o=arguments.length,a=new Array(o),i=0;i<o;i++)a[i]=arguments[i];return(0,c.default)(r,(n=r=(0,c.default)(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(a))),r.wrapper=null,r.autoTransitionDuration=void 0,r.timer=null,r.handleEnter=function(e){e.style.height=r.props.collapsedHeight,r.props.onEnter&&r.props.onEnter(e)},r.handleEntering=function(e){var t=r.props,n=t.timeout,o=t.theme,a=r.wrapper?r.wrapper.clientHeight:0,i=(0,y.getTransitionProps)(r.props,{mode:"enter"}).duration;if("auto"===n){var l=o.transitions.getAutoHeightDuration(a);e.style.transitionDuration="".concat(l,"ms"),r.autoTransitionDuration=l}else e.style.transitionDuration="string"==typeof i?i:"".concat(i,"ms");e.style.height="".concat(a,"px"),r.props.onEntering&&r.props.onEntering(e)},r.handleEntered=function(e){e.style.height="auto",r.props.onEntered&&r.props.onEntered(e)},r.handleExit=function(e){var t=r.wrapper?r.wrapper.clientHeight:0;e.style.height="".concat(t,"px"),r.props.onExit&&r.props.onExit(e)},r.handleExiting=function(e){var t=r.props,n=t.timeout,o=t.theme,a=r.wrapper?r.wrapper.clientHeight:0,i=(0,y.getTransitionProps)(r.props,{mode:"exit"}).duration;if("auto"===n){var l=o.transitions.getAutoHeightDuration(a);e.style.transitionDuration="".concat(l,"ms"),r.autoTransitionDuration=l}else e.style.transitionDuration="string"==typeof i?i:"".concat(i,"ms");e.style.height=r.props.collapsedHeight,r.props.onExiting&&r.props.onExiting(e)},r.addEndListener=function(e,t){"auto"===r.props.timeout&&(r.timer=setTimeout(t,r.autoTransitionDuration||0))},n))}return(0,d.default)(t,e),(0,s.default)(t,[{key:"componentWillUnmount",value:function(){clearTimeout(this.timer)}},{key:"render",value:function(){var e=this,t=this.props,n=t.children,r=t.classes,u=t.className,s=t.collapsedHeight,c=t.component,d=(t.onEnter,t.onEntered,t.onEntering,t.onExit,t.onExiting,t.style),m=(t.theme,t.timeout),v=(0,l.default)(t,["children","classes","className","collapsedHeight","component","onEnter","onEntered","onEntering","onExit","onExiting","style","theme","timeout"]);return f.default.createElement(h.default,(0,o.default)({onEnter:this.handleEnter,onEntered:this.handleEntered,onEntering:this.handleEntering,onExit:this.handleExit,onExiting:this.handleExiting,addEndListener:this.addEndListener,timeout:"auto"===m?null:m},v),function(t,l){return f.default.createElement(c,(0,o.default)({className:(0,p.default)(r.container,(0,i.default)({},r.entered,"entered"===t),u),style:(0,a.default)({},d,{minHeight:s})},l),f.default.createElement("div",{className:r.wrapper,ref:function(t){e.wrapper=t}},f.default.createElement("div",{className:r.wrapperInner},n)))})}}]),t}(f.default.Component);b.propTypes={},b.defaultProps={collapsedHeight:"0px",component:"div",timeout:v.duration.standard},b.muiSupportAuto=!0;var x=(0,m.default)(g,{withTheme:!0,name:"MuiCollapse"})(b);t.default=x},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(4)),a=r(n(3)),i=r(n(9)),l=r(n(8)),u=r(n(11)),s=r(n(10)),c=r(n(52)),d=r(n(2)),f=(r(n(1)),r(n(15))),p=r(n(23)),h=r(n(22)),m=function e(t,n){return!(null===n||!n.parentNode)&&(t===n||e(t,n.parentNode))},v=function(e){function t(){var e,n,r;(0,i.default)(this,t);for(var o=arguments.length,a=new Array(o),l=0;l<o;l++)a[l]=arguments[l];return(0,u.default)(r,(n=r=(0,u.default)(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(a))),r.mounted=!1,r.handleClickAway=function(e){if(!e.defaultPrevented&&r.mounted){var t=f.default.findDOMNode((0,c.default)(r)),n=(0,h.default)(t);n.documentElement&&n.documentElement.contains(e.target)&&!m(t,e.target)&&r.props.onClickAway(e)}},n))}return(0,s.default)(t,e),(0,l.default)(t,[{key:"componentDidMount",value:function(){this.mounted=!0}},{key:"componentWillUnmount",value:function(){this.mounted=!1}},{key:"render",value:function(){var e=this.props,t=e.children,n=e.mouseEvent,r=e.touchEvent,i=(e.onClickAway,(0,a.default)(e,["children","mouseEvent","touchEvent","onClickAway"])),l={};return!1!==n&&(l[n]=this.handleClickAway),!1!==r&&(l[r]=this.handleClickAway),d.default.createElement(p.default,(0,o.default)({target:"document"},l,i),t)}}]),t}(d.default.Component);v.propTypes={},v.defaultProps={mouseEvent:"onMouseUp",touchEvent:"onTouchEnd"};var y=v;t.default=y},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.styles=void 0;var o=r(n(4)),a=r(n(12)),i=r(n(7)),l=r(n(3)),u=r(n(2)),s=(r(n(1)),r(n(6))),c=r(n(5)),d=n(13),f=50;function p(e){var t,n,r;return t=e,n=0,r=1,e=(Math.min(Math.max(n,t),r)-n)/(r-n),e=(e-=1)*e*e+1}var h=function(e){return{root:{display:"inline-block",lineHeight:1},static:{transition:e.transitions.create("transform")},indeterminate:{animation:"mui-progress-circular-rotate 1.4s linear infinite"},colorPrimary:{color:e.palette.primary.main},colorSecondary:{color:e.palette.secondary.main},svg:{},circle:{stroke:"currentColor",strokeLinecap:"round"},circleStatic:{transition:e.transitions.create("stroke-dashoffset")},circleIndeterminate:{animation:"mui-progress-circular-dash 1.4s ease-in-out infinite",strokeDasharray:"80px, 200px",strokeDashoffset:"0px"},"@keyframes mui-progress-circular-rotate":{"100%":{transform:"rotate(360deg)"}},"@keyframes mui-progress-circular-dash":{"0%":{strokeDasharray:"1px, 200px",strokeDashoffset:"0px"},"50%":{strokeDasharray:"100px, 200px",strokeDashoffset:"-15px"},"100%":{strokeDasharray:"100px, 200px",strokeDashoffset:"-120px"}}}};function m(e){var t,n,r,c=e.classes,h=e.className,m=e.color,v=e.size,y=e.style,g=e.thickness,b=e.value,x=e.variant,w=(0,l.default)(e,["classes","className","color","size","style","thickness","value","variant"]),_={},k={},P={};if("determinate"===x||"static"===x){var E=2*Math.PI*(f/2-5);_.strokeDasharray=E.toFixed(3),P["aria-valuenow"]=Math.round(b),"static"===x?(_.strokeDashoffset="".concat(((100-b)/100*E).toFixed(3),"px"),k.transform="rotate(-90deg)"):(_.strokeDashoffset="".concat((r=(100-b)/100,r*r*E).toFixed(3),"px"),k.transform="rotate(".concat((270*p(b/70)).toFixed(3),"deg)"))}return u.default.createElement("div",(0,o.default)({className:(0,s.default)(c.root,(t={},(0,i.default)(t,c["color".concat((0,d.capitalize)(m))],"inherit"!==m),(0,i.default)(t,c.indeterminate,"indeterminate"===x),(0,i.default)(t,c.static,"static"===x),t),h),style:(0,a.default)({width:v,height:v},k,y),role:"progressbar"},P,w),u.default.createElement("svg",{className:c.svg,viewBox:"0 0 ".concat(f," ").concat(f)},u.default.createElement("circle",{className:(0,s.default)(c.circle,(n={},(0,i.default)(n,c.circleIndeterminate,"indeterminate"===x),(0,i.default)(n,c.circleStatic,"static"===x),n)),style:_,cx:f/2,cy:f/2,r:f/2-5,fill:"none",strokeWidth:g})))}t.styles=h,m.propTypes={},m.defaultProps={color:"primary",size:40,thickness:3.6,value:0,variant:"indeterminate"};var v=(0,c.default)(h,{name:"MuiCircularProgress",flip:!1})(m);t.default=v},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(2)),a=r(n(19)),i=r(n(16)),l=o.default.createElement("path",{d:"M12 2C6.47 2 2 6.47 2 12s4.47 10 10 10 10-4.47 10-10S17.53 2 12 2zm5 13.59L15.59 17 12 13.41 8.41 17 7 15.59 10.59 12 7 8.41 8.41 7 12 10.59 15.59 7 17 8.41 13.41 12 17 15.59z"}),u=function(e){return o.default.createElement(i.default,e,l)};(u=(0,a.default)(u)).muiName="SvgIcon";var s=u;t.default=s},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.styles=void 0;var o=r(n(4)),a=r(n(7)),i=r(n(3)),l=r(n(9)),u=r(n(8)),s=r(n(11)),c=r(n(10)),d=r(n(2)),f=(r(n(1)),r(n(6))),p=r(n(49)),h=r(n(367)),m=r(n(5)),v=n(32);n(204);var y=function(e){var t="light"===e.palette.type?e.palette.grey[300]:e.palette.grey[700],n=(0,v.fade)(e.palette.text.primary,.26);return{root:{fontFamily:e.typography.fontFamily,fontSize:e.typography.pxToRem(13),display:"inline-flex",alignItems:"center",justifyContent:"center",height:32,color:e.palette.getContrastText(t),backgroundColor:t,borderRadius:16,whiteSpace:"nowrap",transition:e.transitions.create(["background-color","box-shadow"]),cursor:"default",outline:"none",textDecoration:"none",border:"none",padding:0},clickable:{WebkitTapHighlightColor:"transparent",cursor:"pointer","&:hover, &:focus":{backgroundColor:(0,v.emphasize)(t,.08)},"&:active":{boxShadow:e.shadows[1],backgroundColor:(0,v.emphasize)(t,.12)}},deletable:{"&:focus":{backgroundColor:(0,v.emphasize)(t,.08)}},avatar:{marginRight:-4,width:32,height:32,color:"light"===e.palette.type?e.palette.grey[700]:e.palette.grey[300],fontSize:e.typography.pxToRem(16)},avatarChildren:{width:19,height:19},label:{display:"flex",alignItems:"center",paddingLeft:12,paddingRight:12,userSelect:"none",whiteSpace:"nowrap",cursor:"inherit"},deleteIcon:{WebkitTapHighlightColor:"transparent",color:n,cursor:"pointer",height:"auto",margin:"0 4px 0 -8px","&:hover":{color:(0,v.fade)(n,.4)}}}};t.styles=y;var g=function(e){function t(){var e,n,r;(0,l.default)(this,t);for(var o=arguments.length,a=new Array(o),i=0;i<o;i++)a[i]=arguments[i];return(0,s.default)(r,(n=r=(0,s.default)(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(a))),r.chipRef=null,r.handleDeleteIconClick=function(e){e.stopPropagation();var t=r.props.onDelete;t&&t(e)},r.handleKeyDown=function(e){if(e.currentTarget===e.target){var t=r.props,n=t.onClick,o=t.onDelete,a=t.onKeyDown,i=(0,p.default)(e);!n||"space"!==i&&"enter"!==i?o&&"backspace"===i?(e.preventDefault(),o(e)):"esc"===i&&(e.preventDefault(),r.chipRef&&r.chipRef.blur()):(e.preventDefault(),n(e)),a&&a(e)}},n))}return(0,c.default)(t,e),(0,u.default)(t,[{key:"render",value:function(){var e=this,t=this.props,n=t.avatar,r=t.classes,l=t.className,u=t.clickable,s=t.component,c=t.deleteIcon,p=t.label,m=t.onClick,v=t.onDelete,y=(t.onKeyDown,t.tabIndex),g=(0,i.default)(t,["avatar","classes","className","clickable","component","deleteIcon","label","onClick","onDelete","onKeyDown","tabIndex"]),b=(0,f.default)(r.root,(0,a.default)({},r.clickable,m||u),(0,a.default)({},r.deletable,v),l),x=null;v&&(x=c&&d.default.isValidElement(c)?d.default.cloneElement(c,{className:(0,f.default)(c.props.className,r.deleteIcon),onClick:this.handleDeleteIconClick}):d.default.createElement(h.default,{className:r.deleteIcon,onClick:this.handleDeleteIconClick}));var w=null;n&&d.default.isValidElement(n)&&(w=d.default.cloneElement(n,{className:(0,f.default)(r.avatar,n.props.className),childrenClassName:(0,f.default)(r.avatarChildren,n.props.childrenClassName)}));var _=y;return _||(_=m||v||u?0:-1),d.default.createElement(s,(0,o.default)({role:"button",className:b,tabIndex:_,onClick:m,onKeyDown:this.handleKeyDown,ref:function(t){e.chipRef=t}},g),w,d.default.createElement("span",{className:r.label},p),x)}}]),t}(d.default.Component);g.propTypes={},g.defaultProps={clickable:!1,component:"div"};var b=(0,m.default)(y,{name:"MuiChip"})(g);t.default=b},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(2)),a=r(n(19)),i=r(n(16)),l=o.default.createElement("path",{d:"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-2 10H7v-2h10v2z"}),u=function(e){return o.default.createElement(i.default,e,l)};(u=(0,a.default)(u)).muiName="SvgIcon";var s=u;t.default=s},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(2)),a=r(n(19)),i=r(n(16)),l=o.default.createElement("path",{d:"M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.11 0 2-.9 2-2V5c0-1.1-.89-2-2-2zm-9 14l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"}),u=function(e){return o.default.createElement(i.default,e,l)};(u=(0,a.default)(u)).muiName="SvgIcon";var s=u;t.default=s},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(2)),a=r(n(19)),i=r(n(16)),l=o.default.createElement("path",{d:"M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z"}),u=function(e){return o.default.createElement(i.default,e,l)};(u=(0,a.default)(u)).muiName="SvgIcon";var s=u;t.default=s},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.styles=void 0;var o=r(n(4)),a=r(n(3)),i=r(n(2)),l=(r(n(1)),r(n(6))),u=r(n(110)),s=r(n(371)),c=r(n(370)),d=r(n(369)),f=n(13),p=r(n(5)),h=function(e){return{root:{color:e.palette.text.secondary},checked:{},disabled:{},colorPrimary:{"&$checked":{color:e.palette.primary.main},"&$disabled":{color:e.palette.action.disabled}},colorSecondary:{"&$checked":{color:e.palette.secondary.main},"&$disabled":{color:e.palette.action.disabled}}}};function m(e){var t=e.checkedIcon,n=e.classes,r=e.color,s=e.icon,c=e.indeterminate,d=e.indeterminateIcon,p=(0,a.default)(e,["checkedIcon","classes","color","icon","indeterminate","indeterminateIcon"]);return i.default.createElement(u.default,(0,o.default)({checkedIcon:c?d:t,classes:{root:(0,l.default)(n.root,n["color".concat((0,f.capitalize)(r))]),checked:n.checked,disabled:n.disabled},icon:c?d:s},p))}t.styles=h,m.propTypes={},m.defaultProps={checkedIcon:i.default.createElement(c.default,null),color:"secondary",icon:i.default.createElement(s.default,null),indeterminate:!1,indeterminateIcon:i.default.createElement(d.default,null)};var v=(0,p.default)(h,{name:"MuiCheckbox"})(m);t.default=v},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.styles=void 0;var o=r(n(4)),a=r(n(7)),i=r(n(12)),l=r(n(3)),u=r(n(2)),s=(r(n(1)),r(n(6))),c=(r(n(14)),r(n(5))),d={root:{display:"block",backgroundSize:"cover",backgroundRepeat:"no-repeat",backgroundPosition:"center"},media:{width:"100%"}};t.styles=d;var f=["video","audio","picture","iframe","img"];function p(e){var t=e.classes,n=e.className,r=e.component,c=e.image,d=e.src,p=e.style,h=(0,l.default)(e,["classes","className","component","image","src","style"]),m=-1!==f.indexOf(r),v=!m&&c?(0,i.default)({backgroundImage:'url("'.concat(c,'")')},p):p;return u.default.createElement(r,(0,o.default)({className:(0,s.default)(t.root,(0,a.default)({},t.media,m),n),style:v,src:m?c||d:void 0},h))}p.propTypes={},p.defaultProps={component:"div"};var h=(0,c.default)(d,{name:"MuiCardMedia"})(p);t.default=h},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.styles=void 0;var o=r(n(4)),a=r(n(3)),i=r(n(2)),l=(r(n(1)),r(n(6))),u=r(n(5)),s=r(n(18)),c=function(e){return{root:e.mixins.gutters({display:"flex",alignItems:"center",paddingTop:2*e.spacing.unit,paddingBottom:2*e.spacing.unit}),avatar:{flex:"0 0 auto",marginRight:2*e.spacing.unit},action:{flex:"0 0 auto",alignSelf:"flex-start",marginTop:-1*e.spacing.unit,marginRight:-2*e.spacing.unit},content:{flex:"1 1 auto"},title:{},subheader:{}}};function d(e){var t=e.action,n=e.avatar,r=e.classes,u=e.className,c=e.component,d=e.subheader,f=e.title,p=(0,a.default)(e,["action","avatar","classes","className","component","subheader","title"]);return i.default.createElement(c,(0,o.default)({className:(0,l.default)(r.root,u)},p),n&&i.default.createElement("div",{className:r.avatar},n),i.default.createElement("div",{className:r.content},i.default.createElement(s.default,{variant:n?"body2":"headline",component:"span",className:r.title},f),d&&i.default.createElement(s.default,{variant:n?"body2":"body1",component:"span",color:"textSecondary",className:r.subheader},d)),t&&i.default.createElement("div",{className:r.action},t))}t.styles=c,d.propTypes={},d.defaultProps={component:"div"};var f=(0,u.default)(c,{name:"MuiCardHeader"})(d);t.default=f},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.styles=void 0;var o=r(n(4)),a=r(n(3)),i=r(n(2)),l=(r(n(1)),r(n(6))),u=r(n(5)),s=function(e){return{root:e.mixins.gutters({paddingTop:2*e.spacing.unit,paddingBottom:2*e.spacing.unit,"&:last-child":{paddingBottom:3*e.spacing.unit}})}};function c(e){var t=e.classes,n=e.className,r=e.component,u=(0,a.default)(e,["classes","className","component"]);return i.default.createElement(r,(0,o.default)({className:(0,l.default)(t.root,n)},u))}t.styles=s,c.propTypes={},c.defaultProps={component:"div"};var d=(0,u.default)(s,{name:"MuiCardContent"})(c);t.default=d},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.styles=void 0;var o=r(n(4)),a=r(n(3)),i=r(n(7)),l=r(n(2)),u=(r(n(1)),r(n(6))),s=r(n(5)),c=n(35);n(24);var d=function(e){return{root:(0,i.default)({display:"flex",alignItems:"center",boxSizing:"border-box",padding:"".concat(e.spacing.unit,"px ").concat(e.spacing.unit/2,"px")},e.breakpoints.up("sm"),{padding:"".concat(e.spacing.unit,"px ").concat(1.5*e.spacing.unit,"px")}),action:{margin:"0 ".concat(e.spacing.unit/2,"px")}}};function f(e){var t=e.disableActionSpacing,n=e.children,r=e.classes,i=e.className,s=(0,a.default)(e,["disableActionSpacing","children","classes","className"]);return l.default.createElement("div",(0,o.default)({className:(0,u.default)(r.root,i)},s),t?n:(0,c.cloneChildrenWithClassName)(n,r.action))}t.styles=d,f.propTypes={},f.defaultProps={disableActionSpacing:!1};var p=(0,s.default)(d,{name:"MuiCardActions"})(f);t.default=p},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.styles=void 0;var o=r(n(4)),a=r(n(3)),i=r(n(2)),l=(r(n(1)),r(n(6))),u=r(n(21)),s=r(n(5)),c={root:{overflow:"hidden"}};function d(e){var t=e.classes,n=e.className,r=e.raised,s=(0,a.default)(e,["classes","className","raised"]);return i.default.createElement(u.default,(0,o.default)({className:(0,l.default)(t.root,n),elevation:r?8:2},s))}t.styles=c,d.propTypes={},d.defaultProps={raised:!1};var f=(0,s.default)(c,{name:"MuiCard"})(d);t.default=f},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.styles=void 0;var o=r(n(4)),a=r(n(7)),i=r(n(3)),l=r(n(9)),u=r(n(8)),s=r(n(11)),c=r(n(10)),d=r(n(2)),f=(r(n(1)),r(n(6))),p=r(n(5)),h=r(n(20)),m=function(e){return{root:{transition:e.transitions.create(["color","padding-top"],{duration:e.transitions.duration.short}),paddingTop:e.spacing.unit,paddingBottom:10,paddingLeft:12,paddingRight:12,minWidth:80,maxWidth:168,color:e.palette.text.secondary,flex:"1","&$iconOnly":{paddingTop:2*e.spacing.unit},"&$selected":{paddingTop:6,color:e.palette.primary.main}},selected:{},iconOnly:{},wrapper:{display:"inline-flex",alignItems:"center",justifyContent:"center",width:"100%",flexDirection:"column"},label:{fontFamily:e.typography.fontFamily,fontSize:e.typography.pxToRem(12),opacity:1,transition:"font-size 0.2s, opacity 0.2s",transitionDelay:"0.1s","&$iconOnly":{opacity:0,transitionDelay:"0s"},"&$selected":{fontSize:e.typography.pxToRem(14)}}}};t.styles=m;var v=function(e){function t(){var e,n,r;(0,l.default)(this,t);for(var o=arguments.length,a=new Array(o),i=0;i<o;i++)a[i]=arguments[i];return(0,s.default)(r,(n=r=(0,s.default)(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(a))),r.handleChange=function(e){var t=r.props,n=t.onChange,o=t.value,a=t.onClick;n&&n(e,o),a&&a(e)},n))}return(0,c.default)(t,e),(0,u.default)(t,[{key:"render",value:function(){var e,t,n=this.props,r=n.classes,l=n.className,u=n.icon,s=n.label,c=(n.onChange,n.onClick,n.selected),p=n.showLabel,m=(n.value,(0,i.default)(n,["classes","className","icon","label","onChange","onClick","selected","showLabel","value"])),v=(0,f.default)(r.root,(e={},(0,a.default)(e,r.selected,c),(0,a.default)(e,r.iconOnly,!p&&!c),e),l),y=(0,f.default)(r.label,(t={},(0,a.default)(t,r.selected,c),(0,a.default)(t,r.iconOnly,!p&&!c),t));return d.default.createElement(h.default,(0,o.default)({className:v,focusRipple:!0,onClick:this.handleChange},m),d.default.createElement("span",{className:r.wrapper},u,d.default.createElement("span",{className:y},s)))}}]),t}(d.default.Component);v.propTypes={};var y=(0,p.default)(m,{name:"MuiBottomNavigationAction"})(v);t.default=y},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.styles=void 0;var o=r(n(4)),a=r(n(3)),i=r(n(2)),l=(r(n(1)),r(n(6))),u=r(n(5)),s=function(e){return{root:{display:"flex",justifyContent:"center",height:56,backgroundColor:e.palette.background.paper}}};function c(e){var t=e.children,n=e.classes,r=e.className,u=e.onChange,s=e.showLabels,c=e.value,d=(0,a.default)(e,["children","classes","className","onChange","showLabels","value"]),f=(0,l.default)(n.root,r),p=i.default.Children.map(t,function(e,t){if(!i.default.isValidElement(e))return null;var n=void 0===e.props.value?t:e.props.value;return i.default.cloneElement(e,{selected:n===c,showLabel:void 0!==e.props.showLabel?e.props.showLabel:s,value:n,onChange:u})});return i.default.createElement("div",(0,o.default)({className:f},d),p)}t.styles=s,c.propTypes={},c.defaultProps={showLabels:!1};var d=(0,u.default)(s,{name:"MuiBottomNavigation"})(c);t.default=d},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.styles=void 0;var o=r(n(4)),a=r(n(7)),i=r(n(3)),l=r(n(2)),u=(r(n(1)),r(n(6))),s=r(n(5)),c=n(13),d=function(e){return{root:{position:"relative",display:"inline-flex",verticalAlign:"middle"},badge:{display:"flex",flexDirection:"row",flexWrap:"wrap",justifyContent:"center",alignContent:"center",alignItems:"center",position:"absolute",top:-12,right:-12,fontFamily:e.typography.fontFamily,fontWeight:e.typography.fontWeight,fontSize:e.typography.pxToRem(12),width:24,height:24,borderRadius:"50%",backgroundColor:e.palette.color,color:e.palette.textColor,zIndex:1},colorPrimary:{backgroundColor:e.palette.primary.main,color:e.palette.primary.contrastText},colorSecondary:{backgroundColor:e.palette.secondary.main,color:e.palette.secondary.contrastText},colorError:{backgroundColor:e.palette.error.main,color:e.palette.error.contrastText}}};function f(e){var t=e.badgeContent,n=e.children,r=e.classes,s=e.className,d=e.color,f=e.component,p=(0,i.default)(e,["badgeContent","children","classes","className","color","component"]),h=(0,u.default)(r.badge,(0,a.default)({},r["color".concat((0,c.capitalize)(d))],"default"!==d));return l.default.createElement(f,(0,o.default)({className:(0,u.default)(r.root,s)},p),n,l.default.createElement("span",{className:h},t))}t.styles=d,f.propTypes={},f.defaultProps={color:"default",component:"span"};var p=(0,s.default)(d,{name:"MuiBadge"})(f);t.default=p},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(4)),a=r(n(12)),i=r(n(3)),l=r(n(9)),u=r(n(8)),s=r(n(11)),c=r(n(10)),d=r(n(2)),f=(r(n(1)),r(n(47))),p=n(25),h=r(n(31)),m=n(39),v={entering:{opacity:1},entered:{opacity:1}},y=function(e){function t(){var e,n,r;(0,l.default)(this,t);for(var o=arguments.length,a=new Array(o),i=0;i<o;i++)a[i]=arguments[i];return(0,s.default)(r,(n=r=(0,s.default)(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(a))),r.handleEnter=function(e){var t=r.props.theme;(0,m.reflow)(e);var n=(0,m.getTransitionProps)(r.props,{mode:"enter"});e.style.webkitTransition=t.transitions.create("opacity",n),e.style.transition=t.transitions.create("opacity",n),r.props.onEnter&&r.props.onEnter(e)},r.handleExit=function(e){var t=r.props.theme,n=(0,m.getTransitionProps)(r.props,{mode:"exit"});e.style.webkitTransition=t.transitions.create("opacity",n),e.style.transition=t.transitions.create("opacity",n),r.props.onExit&&r.props.onExit(e)},n))}return(0,c.default)(t,e),(0,u.default)(t,[{key:"render",value:function(){var e=this.props,t=e.children,n=(e.onEnter,e.onExit,e.style),r=(e.theme,(0,i.default)(e,["children","onEnter","onExit","style","theme"])),l=(0,a.default)({},n,d.default.isValidElement(t)?t.props.style:{});return d.default.createElement(f.default,(0,o.default)({appear:!0,onEnter:this.handleEnter,onExit:this.handleExit},r),function(e,n){return d.default.cloneElement(t,(0,a.default)({style:(0,a.default)({opacity:0,willChange:"opacity"},v[e],l)},n))})}}]),t}(d.default.Component);y.propTypes={},y.defaultProps={timeout:{enter:p.duration.enteringScreen,exit:p.duration.leavingScreen}};var g=(0,h.default)()(y);t.default=g},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.styles=void 0;var o=r(n(4)),a=r(n(7)),i=r(n(3)),l=r(n(2)),u=(r(n(1)),r(n(6))),s=r(n(5)),c=r(n(68)),d={root:{zIndex:-1,width:"100%",height:"100%",position:"fixed",top:0,left:0,WebkitTapHighlightColor:"transparent",backgroundColor:"rgba(0, 0, 0, 0.5)"},invisible:{backgroundColor:"transparent"}};function f(e){var t=e.classes,n=e.className,r=e.invisible,s=e.open,d=e.transitionDuration,f=(0,i.default)(e,["classes","className","invisible","open","transitionDuration"]);return l.default.createElement(c.default,(0,o.default)({appear:!0,in:s,timeout:d},f),l.default.createElement("div",{className:(0,u.default)(t.root,(0,a.default)({},t.invisible,r),n),"aria-hidden":"true"}))}t.styles=d,f.propTypes={},f.defaultProps={invisible:!1};var p=(0,s.default)(d,{name:"MuiBackdrop"})(f);t.default=p},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r={50:"#eceff1",100:"#cfd8dc",200:"#b0bec5",300:"#90a4ae",400:"#78909c",500:"#607d8b",600:"#546e7a",700:"#455a64",800:"#37474f",900:"#263238",A100:"#cfd8dc",A200:"#b0bec5",A400:"#78909c",A700:"#455a64"};t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r={50:"#efebe9",100:"#d7ccc8",200:"#bcaaa4",300:"#a1887f",400:"#8d6e63",500:"#795548",600:"#6d4c41",700:"#5d4037",800:"#4e342e",900:"#3e2723",A100:"#d7ccc8",A200:"#bcaaa4",A400:"#8d6e63",A700:"#5d4037"};t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r={50:"#fbe9e7",100:"#ffccbc",200:"#ffab91",300:"#ff8a65",400:"#ff7043",500:"#ff5722",600:"#f4511e",700:"#e64a19",800:"#d84315",900:"#bf360c",A100:"#ff9e80",A200:"#ff6e40",A400:"#ff3d00",A700:"#dd2c00"};t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r={50:"#fff3e0",100:"#ffe0b2",200:"#ffcc80",300:"#ffb74d",400:"#ffa726",500:"#ff9800",600:"#fb8c00",700:"#f57c00",800:"#ef6c00",900:"#e65100",A100:"#ffd180",A200:"#ffab40",A400:"#ff9100",A700:"#ff6d00"};t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r={50:"#fff8e1",100:"#ffecb3",200:"#ffe082",300:"#ffd54f",400:"#ffca28",500:"#ffc107",600:"#ffb300",700:"#ffa000",800:"#ff8f00",900:"#ff6f00",A100:"#ffe57f",A200:"#ffd740",A400:"#ffc400",A700:"#ffab00"};t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r={50:"#fffde7",100:"#fff9c4",200:"#fff59d",300:"#fff176",400:"#ffee58",500:"#ffeb3b",600:"#fdd835",700:"#fbc02d",800:"#f9a825",900:"#f57f17",A100:"#ffff8d",A200:"#ffff00",A400:"#ffea00",A700:"#ffd600"};t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r={50:"#f9fbe7",100:"#f0f4c3",200:"#e6ee9c",300:"#dce775",400:"#d4e157",500:"#cddc39",600:"#c0ca33",700:"#afb42b",800:"#9e9d24",900:"#827717",A100:"#f4ff81",A200:"#eeff41",A400:"#c6ff00",A700:"#aeea00"};t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r={50:"#f1f8e9",100:"#dcedc8",200:"#c5e1a5",300:"#aed581",400:"#9ccc65",500:"#8bc34a",600:"#7cb342",700:"#689f38",800:"#558b2f",900:"#33691e",A100:"#ccff90",A200:"#b2ff59",A400:"#76ff03",A700:"#64dd17"};t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r={50:"#e0f2f1",100:"#b2dfdb",200:"#80cbc4",300:"#4db6ac",400:"#26a69a",500:"#009688",600:"#00897b",700:"#00796b",800:"#00695c",900:"#004d40",A100:"#a7ffeb",A200:"#64ffda",A400:"#1de9b6",A700:"#00bfa5"};t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r={50:"#e0f7fa",100:"#b2ebf2",200:"#80deea",300:"#4dd0e1",400:"#26c6da",500:"#00bcd4",600:"#00acc1",700:"#0097a7",800:"#00838f",900:"#006064",A100:"#84ffff",A200:"#18ffff",A400:"#00e5ff",A700:"#00b8d4"};t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r={50:"#e1f5fe",100:"#b3e5fc",200:"#81d4fa",300:"#4fc3f7",400:"#29b6f6",500:"#03a9f4",600:"#039be5",700:"#0288d1",800:"#0277bd",900:"#01579b",A100:"#80d8ff",A200:"#40c4ff",A400:"#00b0ff",A700:"#0091ea"};t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r={50:"#e3f2fd",100:"#bbdefb",200:"#90caf9",300:"#64b5f6",400:"#42a5f5",500:"#2196f3",600:"#1e88e5",700:"#1976d2",800:"#1565c0",900:"#0d47a1",A100:"#82b1ff",A200:"#448aff",A400:"#2979ff",A700:"#2962ff"};t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r={50:"#ede7f6",100:"#d1c4e9",200:"#b39ddb",300:"#9575cd",400:"#7e57c2",500:"#673ab7",600:"#5e35b1",700:"#512da8",800:"#4527a0",900:"#311b92",A100:"#b388ff",A200:"#7c4dff",A400:"#651fff",A700:"#6200ea"};t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r={50:"#f3e5f5",100:"#e1bee7",200:"#ce93d8",300:"#ba68c8",400:"#ab47bc",500:"#9c27b0",600:"#8e24aa",700:"#7b1fa2",800:"#6a1b9a",900:"#4a148c",A100:"#ea80fc",A200:"#e040fb",A400:"#d500f9",A700:"#aa00ff"};t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(2),a=c(o),i=(n(115),c(n(30))),l=c(n(1)),u=n(17),s=c(n(34));function c(e){return e&&e.__esModule?e:{default:e}}var d=function(e){function t(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var e=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return e.loadMap=function(){if(e.props&&e.props.google){var t=e.props.google.maps;e.maps=t;var n=document.getElementById("mapRef");e.map=new t.Map(n,{center:{lat:29.721482,lng:-95.396827},zoom:13}),e.directionsService=new t.DirectionsService,e.directionsDisplay=new t.DirectionsRenderer,e.locMarker=new t.Marker({map:e.map,anchorPoing:new t.Point(0,0),title:"Current Location",icon:"https://www.materialui.co/materialIcons/maps/my_location_black_24x24.png"}),e.deparMarker=new t.Marker({map:e.map,anchorPoint:new t.Point(0,0),title:"Departure",draggable:!0,icon:"https://www.materialui.co/materialIcons/communication/location_on_black_48x48.png",animation:t.Animation.DROP}),e.destMarker=new t.Marker({map:e.map,anchorPoint:new t.Point(0,0),title:"Destination",draggable:!0,icon:"https://www.materialui.co/materialIcons/communication/location_on_black_48x48.png",animation:t.Animation.DROP}),navigator.geolocation.getCurrentPosition(function(t){var n={lat:t.coords.latitude,lng:t.coords.longitude};e.locMarker.setPosition(n),e.locMarker.setVisible(!0)}),e.deparMarker.addListener("click",function(){e.map.panTo(e.deparMarker.getPosition()),e.map.setZoom(16)}),e.destMarker.addListener("click",function(){e.map.panTo(e.destMarker.getPosition()),e.map.setZoom(16)}),e.deparMarker.addListener("dragend",function(){var t=e.deparMarker.getPosition().toJSON();(0,e.props.updateLocation)("depar",t)}),e.destMarker.addListener("dragend",function(){var t=e.destMarker.getPosition().toJSON();(0,e.props.updateLocation)("dest",t)})}},e.updateMarker=function(t,n,r,o,a,i){a=a||void 0,i=i||void 0;var l=e.maps;if(t&&n){var u=new l.LatLng({lat:t,lng:n});e.deparMarker.setVisible(!1),e.deparMarker.setPosition(u),e.deparMarker.setVisible(!0),a?e.map.fitBounds(a):(e.map.setZoom(15.5),e.map.panTo(u))}else e.deparMarker&&e.deparMarker.setVisible(!1);if(r&&o){u=new l.LatLng({lat:r,lng:o});e.destMarker.setVisible(!1),e.destMarker.setPosition(u),e.destMarker.setVisible(!0),i?e.map.fitBounds(i):(e.map.setZoom(15.5),e.map.panTo(u))}else e.destMarker&&e.destMarker.setVisible(!1);if(t&&n&&r&&o){var s=new l.LatLngBounds;s.extend({lat:t,lng:n});var c=new l.LatLngBounds;c.extend({lat:r,lng:o});var d=s.union(c);e.map.fitBounds(d)}},e.drawRoute=function(t,n,r,o){var a=e.props.google,i=(a.maps,e.map),l=e.directionsDisplay,u=e.directionsService;if(t&&n&&r&&o){l.setMap(i),l.setOptions({dragable:!0,markerOptions:{icon:"https://www.materialui.co/materialIcons/communication/location_on_black_48x48.png"}}),e.deparMarker.setVisible(!1),e.destMarker.setVisible(!1);var s={origin:e.deparMarker.getPosition(),destination:e.destMarker.getPosition(),travelMode:a.maps.TravelMode.DRIVING};u.route(s,function(e,t){t==a.maps.DirectionsStatus.OK?(l.setDirections(e),l.setMap(i)):alert("Directions Request from "+start.toUrlValue(6)+" to "+end.toUrlValue(6)+" failed: "+t)})}else l&&l.setMap(null)},e.componentDidMount=function(){e.loadMap()},e.map=void 0,e.deparMarker=void 0,e.destMarker=void 0,e.maps=void 0,e.locMarker=void 0,e.directionsService=void 0,e.directionsDisplay=void 0,e}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.Component),r(t,[{key:"render",value:function(){var e=this.props.classes,t=this.props,n=t.deparLat,r=t.deparLng,o=t.destLat,i=t.destLng,l=t.deparViewPort,u=t.destViewPort;return this.updateMarker(n,r,o,i,l,u),a.default.createElement(s.default,{item:!0,className:e.container},a.default.createElement("div",{id:"mapRef",className:e.map}))}}]),t}();d.propTypes={classes:l.default.object.isRequired},t.default=(0,i.default)()((0,u.withStyles)(function(e){return{container:{marginTop:"65px",height:"50%",width:"100%",boxShadow:"0px 5px 10px -5px rgba(0,0,0,0.75)"},map:{width:"100%",height:"100%"}}})(d))},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(2)),a=(0,r(n(27)).default)(o.default.createElement("g",null,o.default.createElement("path",{d:"M3 5v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2H5c-1.11 0-2 .9-2 2zm12 4c0 1.66-1.34 3-3 3s-3-1.34-3-3 1.34-3 3-3 3 1.34 3 3zm-9 8c0-2 4-3.1 6-3.1s6 1.1 6 3.1v1H6v-1z"})),"AccountBox");t.default=a},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.styles=void 0;var o=r(n(4)),a=r(n(7)),i=r(n(3)),l=r(n(2)),u=(r(n(1)),r(n(6))),s=r(n(5)),c=n(13),d=function(e){return{root:{userSelect:"none",fontSize:24,width:"1em",height:"1em",display:"inline-block",fill:"currentColor",flexShrink:0,transition:e.transitions.create("fill",{duration:e.transitions.duration.shorter})},colorPrimary:{color:e.palette.primary.main},colorSecondary:{color:e.palette.secondary.main},colorAction:{color:e.palette.action.active},colorError:{color:e.palette.error.main},colorDisabled:{color:e.palette.action.disabled}}};function f(e){var t=e.children,n=e.classes,r=e.className,s=e.color,d=e.nativeColor,f=e.titleAccess,p=e.viewBox,h=(0,i.default)(e,["children","classes","className","color","nativeColor","titleAccess","viewBox"]),m=(0,u.default)(n.root,(0,a.default)({},n["color".concat((0,c.capitalize)(s))],"inherit"!==s),r);return l.default.createElement("svg",(0,o.default)({className:m,focusable:"false",viewBox:p,color:d,"aria-hidden":f?"false":"true"},h),f?l.default.createElement("title",null,f):null,t)}t.styles=d,f.propTypes={},f.defaultProps={color:"inherit",viewBox:"0 0 24 24"},f.muiName="SvgIcon";var p=(0,s.default)(d,{name:"MuiSvgIcon"})(f);t.default=p},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=n(235),a=(r=o)&&r.__esModule?r:{default:r};t.default=a.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function(e,t){return function(n){return n[e]=t,n}}},function(e,t,n){var r=n(72);r(r.S,"Object",{create:n(124)})},function(e,t,n){n(402);var r=n(46).Object;e.exports=function(e,t){return r.create(e,t)}},function(e,t,n){e.exports={default:n(403),__esModule:!0}},function(e,t,n){var r=n(43),o=n(53),a=function(e,t){if(o(e),!r(t)&&null!==t)throw TypeError(t+": can't set as prototype!")};e.exports={set:Object.setPrototypeOf||("__proto__"in{}?function(e,t,r){try{(r=n(216)(Function.call,n(208).f(Object.prototype,"__proto__").set,2))(e,[]),t=!(e instanceof Array)}catch(e){t=!0}return function(e,n){return a(e,n),t?e.__proto__=n:r(e,n),e}}({},!1):void 0),check:a}},function(e,t,n){var r=n(72);r(r.S,"Object",{setPrototypeOf:n(405).set})},function(e,t,n){n(406),e.exports=n(46).Object.setPrototypeOf},function(e,t,n){e.exports={default:n(407),__esModule:!0}},function(e,t,n){"use strict";t.__esModule=!0;var r=i(n(408)),o=i(n(404)),a=i(n(218));function i(e){return e&&e.__esModule?e:{default:e}}t.default=function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+(void 0===t?"undefined":(0,a.default)(t)));e.prototype=(0,o.default)(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(r.default?(0,r.default)(e,t):e.__proto__=t)}},function(e,t,n){n(117)("observable")},function(e,t,n){n(117)("asyncIterator")},function(e,t){},function(e,t,n){var r=n(41),o=n(209).f,a={}.toString,i="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];e.exports.f=function(e){return i&&"[object Window]"==a.call(e)?function(e){try{return o(e)}catch(e){return i.slice()}}(e):o(r(e))}},function(e,t,n){var r=n(211);e.exports=Array.isArray||function(e){return"Array"==r(e)}},function(e,t,n){var r=n(123),o=n(210),a=n(116);e.exports=function(e){var t=r(e),n=o.f;if(n)for(var i,l=n(e),u=a.f,s=0;l.length>s;)u.call(e,i=l[s++])&&t.push(i);return t}},function(e,t,n){var r=n(69)("meta"),o=n(43),a=n(36),i=n(44).f,l=0,u=Object.isExtensible||function(){return!0},s=!n(71)(function(){return u(Object.preventExtensions({}))}),c=function(e){i(e,r,{value:{i:"O"+ ++l,w:{}}})},d=e.exports={KEY:r,NEED:!1,fastKey:function(e,t){if(!o(e))return"symbol"==typeof e?e:("string"==typeof e?"S":"P")+e;if(!a(e,r)){if(!u(e))return"F";if(!t)return"E";c(e)}return e[r].i},getWeak:function(e,t){if(!a(e,r)){if(!u(e))return!0;if(!t)return!1;c(e)}return e[r].w},onFreeze:function(e){return s&&d.NEED&&u(e)&&!a(e,r)&&c(e),e}}},function(e,t,n){"use strict";var r=n(26),o=n(36),a=n(42),i=n(72),l=n(213),u=n(416).KEY,s=n(71),c=n(121),d=n(119),f=n(69),p=n(40),h=n(118),m=n(117),v=n(415),y=n(414),g=n(53),b=n(43),x=n(41),w=n(126),_=n(70),k=n(124),P=n(413),E=n(208),O=n(44),C=n(123),S=E.f,T=O.f,M=P.f,j=r.Symbol,N=r.JSON,L=N&&N.stringify,R=p("_hidden"),D=p("toPrimitive"),A={}.propertyIsEnumerable,I=c("symbol-registry"),F=c("symbols"),z=c("op-symbols"),W=Object.prototype,B="function"==typeof j,U=r.QObject,H=!U||!U.prototype||!U.prototype.findChild,V=a&&s(function(){return 7!=k(T({},"a",{get:function(){return T(this,"a",{value:7}).a}})).a})?function(e,t,n){var r=S(W,t);r&&delete W[t],T(e,t,n),r&&e!==W&&T(W,t,r)}:T,$=function(e){var t=F[e]=k(j.prototype);return t._k=e,t},q=B&&"symbol"==typeof j.iterator?function(e){return"symbol"==typeof e}:function(e){return e instanceof j},K=function(e,t,n){return e===W&&K(z,t,n),g(e),t=w(t,!0),g(n),o(F,t)?(n.enumerable?(o(e,R)&&e[R][t]&&(e[R][t]=!1),n=k(n,{enumerable:_(0,!1)})):(o(e,R)||T(e,R,_(1,{})),e[R][t]=!0),V(e,t,n)):T(e,t,n)},G=function(e,t){g(e);for(var n,r=v(t=x(t)),o=0,a=r.length;a>o;)K(e,n=r[o++],t[n]);return e},X=function(e){var t=A.call(this,e=w(e,!0));return!(this===W&&o(F,e)&&!o(z,e))&&(!(t||!o(this,e)||!o(F,e)||o(this,R)&&this[R][e])||t)},Y=function(e,t){if(e=x(e),t=w(t,!0),e!==W||!o(F,t)||o(z,t)){var n=S(e,t);return!n||!o(F,t)||o(e,R)&&e[R][t]||(n.enumerable=!0),n}},Q=function(e){for(var t,n=M(x(e)),r=[],a=0;n.length>a;)o(F,t=n[a++])||t==R||t==u||r.push(t);return r},J=function(e){for(var t,n=e===W,r=M(n?z:x(e)),a=[],i=0;r.length>i;)!o(F,t=r[i++])||n&&!o(W,t)||a.push(F[t]);return a};B||(l((j=function(){if(this instanceof j)throw TypeError("Symbol is not a constructor!");var e=f(arguments.length>0?arguments[0]:void 0),t=function(n){this===W&&t.call(z,n),o(this,R)&&o(this[R],e)&&(this[R][e]=!1),V(this,e,_(1,n))};return a&&H&&V(W,e,{configurable:!0,set:t}),$(e)}).prototype,"toString",function(){return this._k}),E.f=Y,O.f=K,n(209).f=P.f=Q,n(116).f=X,n(210).f=J,a&&!n(73)&&l(W,"propertyIsEnumerable",X,!0),h.f=function(e){return $(p(e))}),i(i.G+i.W+i.F*!B,{Symbol:j});for(var Z="hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),ee=0;Z.length>ee;)p(Z[ee++]);for(var te=C(p.store),ne=0;te.length>ne;)m(te[ne++]);i(i.S+i.F*!B,"Symbol",{for:function(e){return o(I,e+="")?I[e]:I[e]=j(e)},keyFor:function(e){if(!q(e))throw TypeError(e+" is not a symbol!");for(var t in I)if(I[t]===e)return t},useSetter:function(){H=!0},useSimple:function(){H=!1}}),i(i.S+i.F*!B,"Object",{create:function(e,t){return void 0===t?k(e):G(k(e),t)},defineProperty:K,defineProperties:G,getOwnPropertyDescriptor:Y,getOwnPropertyNames:Q,getOwnPropertySymbols:J}),N&&i(i.S+i.F*(!B||s(function(){var e=j();return"[null]"!=L([e])||"{}"!=L({a:e})||"{}"!=L(Object(e))})),"JSON",{stringify:function(e){for(var t,n,r=[e],o=1;arguments.length>o;)r.push(arguments[o++]);if(n=t=r[1],(b(t)||void 0!==e)&&!q(e))return y(t)||(t=function(e,t){if("function"==typeof n&&(t=n.call(this,e,t)),!q(t))return t}),r[1]=t,L.apply(N,r)}}),j.prototype[D]||n(45)(j.prototype,D,j.prototype.valueOf),d(j,"Symbol"),d(Math,"Math",!0),d(r.JSON,"JSON",!0)},function(e,t,n){n(417),n(412),n(411),n(410),e.exports=n(46).Symbol},function(e,t,n){e.exports={default:n(418),__esModule:!0}},function(e,t){e.exports=function(e,t){return{value:t,done:!!e}}},function(e,t){e.exports=function(){}},function(e,t,n){"use strict";var r=n(421),o=n(420),a=n(125),i=n(41);e.exports=n(217)(Array,"Array",function(e,t){this._t=i(e),this._i=0,this._k=t},function(){var e=this._t,t=this._k,n=this._i++;return!e||n>=e.length?(this._t=void 0,o(1)):o(0,"keys"==t?n:"values"==t?e[n]:[n,e[n]])},"values"),a.Arguments=a.Array,r("keys"),r("values"),r("entries")},function(e,t,n){n(422);for(var r=n(26),o=n(45),a=n(125),i=n(40)("toStringTag"),l="CSSRuleList,CSSStyleDeclaration,CSSValueList,ClientRectList,DOMRectList,DOMStringList,DOMTokenList,DataTransferItemList,FileList,HTMLAllCollection,HTMLCollection,HTMLFormElement,HTMLSelectElement,MediaList,MimeTypeArray,NamedNodeMap,NodeList,PaintRequestList,Plugin,PluginArray,SVGLengthList,SVGNumberList,SVGPathSegList,SVGPointList,SVGStringList,SVGTransformList,SourceBufferList,StyleSheetList,TextTrackCueList,TextTrackList,TouchList".split(","),u=0;u<l.length;u++){var s=l[u],c=r[s],d=c&&c.prototype;d&&!d[i]&&o(d,i,s),a[s]=a.Array}},function(e,t,n){var r=n(127);e.exports=function(e){return Object(r(e))}},function(e,t,n){var r=n(36),o=n(424),a=n(122)("IE_PROTO"),i=Object.prototype;e.exports=Object.getPrototypeOf||function(e){return e=o(e),r(e,a)?e[a]:"function"==typeof e.constructor&&e instanceof e.constructor?e.constructor.prototype:e instanceof Object?i:null}},function(e,t,n){var r=n(26).document;e.exports=r&&r.documentElement},function(e,t,n){var r=n(128),o=Math.max,a=Math.min;e.exports=function(e,t){return(e=r(e))<0?o(e+t,0):a(e,t)}},function(e,t,n){var r=n(128),o=Math.min;e.exports=function(e){return e>0?o(r(e),9007199254740991):0}},function(e,t,n){var r=n(41),o=n(428),a=n(427);e.exports=function(e){return function(t,n,i){var l,u=r(t),s=o(u.length),c=a(i,s);if(e&&n!=n){for(;s>c;)if((l=u[c++])!=l)return!0}else for(;s>c;c++)if((e||c in u)&&u[c]===n)return e||c||0;return!e&&-1}}},function(e,t,n){var r=n(211);e.exports=Object("z").propertyIsEnumerable(0)?Object:function(e){return"String"==r(e)?e.split(""):Object(e)}},function(e,t,n){var r=n(44),o=n(53),a=n(123);e.exports=n(42)?Object.defineProperties:function(e,t){o(e);for(var n,i=a(t),l=i.length,u=0;l>u;)r.f(e,n=i[u++],t[n]);return e}},function(e,t,n){"use strict";var r=n(124),o=n(70),a=n(119),i={};n(45)(i,n(40)("iterator"),function(){return this}),e.exports=function(e,t,n){e.prototype=r(i,{next:o(1,n)}),a(e,t+" Iterator")}},function(e,t){e.exports=function(e){if("function"!=typeof e)throw TypeError(e+" is not a function!");return e}},function(e,t,n){var r=n(128),o=n(127);e.exports=function(e){return function(t,n){var a,i,l=String(o(t)),u=r(n),s=l.length;return u<0||u>=s?e?"":void 0:(a=l.charCodeAt(u))<55296||a>56319||u+1===s||(i=l.charCodeAt(u+1))<56320||i>57343?e?l.charAt(u):a:e?l.slice(u,u+2):i-56320+(a-55296<<10)+65536}}},function(e,t,n){"use strict";var r=n(434)(!0);n(217)(String,"String",function(e){this._t=String(e),this._i=0},function(){var e,t=this._t,n=this._i;return n>=t.length?{value:void 0,done:!0}:(e=r(t,n),this._i+=e.length,{value:e,done:!1})})},function(e,t,n){n(435),n(423),e.exports=n(118).f("iterator")},function(e,t,n){e.exports={default:n(436),__esModule:!0}},function(e,t,n){"use strict";t.__esModule=!0;var r,o=n(218),a=(r=o)&&r.__esModule?r:{default:r};t.default=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==(void 0===t?"undefined":(0,a.default)(t))&&"function"!=typeof t?e:t}},function(e,t,n){"use strict";t.__esModule=!0,t.default=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=l(n(439)),o=l(n(438)),a=l(n(409)),i=n(2);l(n(207)),l(n(54));function l(e){return e&&e.__esModule?e:{default:e}}t.default=function(e){return function(t){var n=(0,i.createFactory)(t);return function(t){function i(){return(0,r.default)(this,i),(0,o.default)(this,t.apply(this,arguments))}return(0,a.default)(i,t),i.prototype.shouldComponentUpdate=function(t){return e(this.props,t)},i.prototype.render=function(){return n(this.props)},i}(i.Component)}}},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(2)),a=(0,r(n(27)).default)(o.default.createElement("g",null,o.default.createElement("path",{d:"M3 18h18v-2H3v2zm0-5h18v-2H3v2zm0-7v2h18V6H3z"})),"Menu");t.default=a},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.styles=void 0;var o=r(n(4)),a=r(n(7)),i=r(n(3)),l=r(n(2)),u=(r(n(1)),r(n(6))),s=r(n(5)),c=n(32),d=r(n(20)),f=n(13),p=function(e){return{root:{textAlign:"center",flex:"0 0 auto",fontSize:e.typography.pxToRem(24),width:48,height:48,padding:0,borderRadius:"50%",color:e.palette.action.active,transition:e.transitions.create("background-color",{duration:e.transitions.duration.shortest}),"&:hover":{backgroundColor:(0,c.fade)(e.palette.action.active,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"},"&$disabled":{backgroundColor:"transparent"}},"&$disabled":{color:e.palette.action.disabled}},colorInherit:{color:"inherit"},colorPrimary:{color:e.palette.primary.main,"&:hover":{backgroundColor:(0,c.fade)(e.palette.primary.main,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}}},colorSecondary:{color:e.palette.secondary.main,"&:hover":{backgroundColor:(0,c.fade)(e.palette.secondary.main,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}}},disabled:{},label:{width:"100%",display:"flex",alignItems:"inherit",justifyContent:"inherit"}}};function h(e){var t,n=e.children,r=e.classes,s=e.className,c=e.color,p=e.disabled,h=(0,i.default)(e,["children","classes","className","color","disabled"]);return l.default.createElement(d.default,(0,o.default)({className:(0,u.default)(r.root,(t={},(0,a.default)(t,r["color".concat((0,f.capitalize)(c))],"default"!==c),(0,a.default)(t,r.disabled,p),t),s),centerRipple:!0,focusRipple:!0,disabled:p},h),l.default.createElement("span",{className:r.label},n))}t.styles=p,h.propTypes={},h.defaultProps={color:"default",disabled:!1};var m=(0,s.default)(p,{name:"MuiIconButton"})(h);t.default=m},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=function(e,t,n,r){return function(o){return r&&r.call(e,o),!o.defaultPrevented&&(e.ripple&&e.ripple[n](o),e.props&&"function"==typeof e.props["on".concat(t)]&&e.props["on".concat(t)](o),!0)}};t.default=r},function(e,t,n){"use strict";t.__esModule=!0,t.classNamesShape=t.timeoutsShape=void 0,t.transitionTimeout=function(e){var t="transition"+e+"Timeout",n="transition"+e;return function(e){if(e[n]){if(null==e[t])return new Error(t+" wasn't supplied to CSSTransitionGroup: this can cause unreliable animations and won't be supported in a future version of React. See https://fb.me/react-animation-transition-group-timeout for more information.");if("number"!=typeof e[t])return new Error(t+" must be a number (in milliseconds)")}return null}};var r,o=n(1),a=(r=o)&&r.__esModule?r:{default:r};t.timeoutsShape=a.default.oneOfType([a.default.number,a.default.shape({enter:a.default.number,exit:a.default.number}).isRequired]),t.classNamesShape=a.default.oneOfType([a.default.string,a.default.shape({enter:a.default.string,exit:a.default.string,active:a.default.string}),a.default.shape({enter:a.default.string,enterDone:a.default.string,enterActive:a.default.string,exit:a.default.string,exitDone:a.default.string,exitActive:a.default.string})])},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(4)),a=r(n(7)),i=r(n(3)),l=r(n(9)),u=r(n(8)),s=r(n(11)),c=r(n(10)),d=r(n(2)),f=(r(n(1)),r(n(6))),p=r(n(47)),h=function(e){function t(){var e,n,r;(0,l.default)(this,t);for(var o=arguments.length,a=new Array(o),i=0;i<o;i++)a[i]=arguments[i];return(0,s.default)(r,(n=r=(0,s.default)(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(a))),r.state={visible:!1,leaving:!1},r.handleEnter=function(){r.setState({visible:!0})},r.handleExit=function(){r.setState({leaving:!0})},n))}return(0,c.default)(t,e),(0,u.default)(t,[{key:"render",value:function(){var e,t,n=this.props,r=n.classes,l=n.className,u=n.pulsate,s=n.rippleX,c=n.rippleY,h=n.rippleSize,m=(0,i.default)(n,["classes","className","pulsate","rippleX","rippleY","rippleSize"]),v=this.state,y=v.visible,g=v.leaving,b=(0,f.default)(r.ripple,(e={},(0,a.default)(e,r.rippleVisible,y),(0,a.default)(e,r.ripplePulsate,u),e),l),x={width:h,height:h,top:-h/2+c,left:-h/2+s},w=(0,f.default)(r.child,(t={},(0,a.default)(t,r.childLeaving,g),(0,a.default)(t,r.childPulsate,u),t));return d.default.createElement(p.default,(0,o.default)({onEnter:this.handleEnter,onExit:this.handleExit},m),d.default.createElement("span",{className:b,style:x},d.default.createElement("span",{className:w})))}}]),t}(d.default.Component);h.propTypes={},h.defaultProps={pulsate:!1};var m=h;t.default=m},function(e,t,n){"use strict";t.__esModule=!0,t.getChildMapping=function(e,t){var n=Object.create(null);e&&r.Children.map(e,function(e){return e}).forEach(function(e){n[e.key]=function(e){return t&&(0,r.isValidElement)(e)?t(e):e}(e)});return n},t.mergeChildMappings=function(e,t){function n(n){return n in t?t[n]:e[n]}e=e||{},t=t||{};var r=Object.create(null),o=[];for(var a in e)a in t?o.length&&(r[a]=o,o=[]):o.push(a);var i=void 0,l={};for(var u in t){if(r[u])for(i=0;i<r[u].length;i++){var s=r[u][i];l[r[u][i]]=n(s)}l[u]=n(u)}for(i=0;i<o.length;i++)l[o[i]]=n(o[i]);return l};var r=n(2)},function(e,t,n){"use strict";t.__esModule=!0;var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=u(n(1)),a=n(2),i=u(a),l=n(446);function u(e){return e&&e.__esModule?e:{default:e}}var s=Object.values||function(e){return Object.keys(e).map(function(t){return e[t]})},c=(o.default.any,o.default.node,o.default.bool,o.default.bool,o.default.bool,o.default.func,function(e){function t(n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var o=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,e.call(this,n,r));return o.state={children:(0,l.getChildMapping)(n.children,function(e){return(0,a.cloneElement)(e,{onExited:o.handleExited.bind(o,e),in:!0,appear:o.getProp(e,"appear"),enter:o.getProp(e,"enter"),exit:o.getProp(e,"exit")})})},o}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.getChildContext=function(){return{transitionGroup:{isMounting:!this.appeared}}},t.prototype.getProp=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:this.props;return null!=n[t]?n[t]:e.props[t]},t.prototype.componentDidMount=function(){this.appeared=!0},t.prototype.componentWillReceiveProps=function(e){var t=this,n=this.state.children,r=(0,l.getChildMapping)(e.children),o=(0,l.mergeChildMappings)(n,r);Object.keys(o).forEach(function(i){var l=o[i];if((0,a.isValidElement)(l)){var u=i in n,s=i in r,c=n[i],d=(0,a.isValidElement)(c)&&!c.props.in;!s||u&&!d?s||!u||d?s&&u&&(0,a.isValidElement)(c)&&(o[i]=(0,a.cloneElement)(l,{onExited:t.handleExited.bind(t,l),in:c.props.in,exit:t.getProp(l,"exit",e),enter:t.getProp(l,"enter",e)})):o[i]=(0,a.cloneElement)(l,{in:!1}):o[i]=(0,a.cloneElement)(l,{onExited:t.handleExited.bind(t,l),in:!0,exit:t.getProp(l,"exit",e),enter:t.getProp(l,"enter",e)})}}),this.setState({children:o})},t.prototype.handleExited=function(e,t){var n=(0,l.getChildMapping)(this.props.children);e.key in n||(e.props.onExited&&e.props.onExited(t),this.setState(function(t){var n=r({},t.children);return delete n[e.key],{children:n}}))},t.prototype.render=function(){var e=this.props,t=e.component,n=e.childFactory,r=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(e,["component","childFactory"]),o=s(this.state.children).map(n);return delete r.appear,delete r.enter,delete r.exit,null===t?o:i.default.createElement(t,r,o)},t}(i.default.Component));c.childContextTypes={transitionGroup:o.default.object.isRequired},c.propTypes={},c.defaultProps={component:"div",childFactory:function(e){return e}},t.default=c,e.exports=t.default},function(e,t){e.exports=function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}},function(e,t){e.exports=function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}},function(e,t){e.exports=function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.styles=t.DELAY_RIPPLE=void 0;var o=r(n(4)),a=r(n(3)),i=r(n(74)),l=r(n(9)),u=r(n(8)),s=r(n(11)),c=r(n(10)),d=r(n(52)),f=r(n(2)),p=(r(n(1)),r(n(15))),h=r(n(447)),m=r(n(6)),v=r(n(5)),y=r(n(445)),g=550,b=80;t.DELAY_RIPPLE=b;var x=function(e){return{root:{display:"block",position:"absolute",overflow:"hidden",borderRadius:"inherit",width:"100%",height:"100%",left:0,top:0,pointerEvents:"none",zIndex:0},ripple:{width:50,height:50,left:0,top:0,opacity:0,position:"absolute"},rippleVisible:{opacity:.3,transform:"scale(1)",animation:"mui-ripple-enter ".concat(g,"ms ").concat(e.transitions.easing.easeInOut)},ripplePulsate:{animationDuration:"".concat(e.transitions.duration.shorter,"ms")},child:{opacity:1,display:"block",width:"100%",height:"100%",borderRadius:"50%",backgroundColor:"currentColor"},childLeaving:{opacity:0,animation:"mui-ripple-exit ".concat(g,"ms ").concat(e.transitions.easing.easeInOut)},childPulsate:{position:"absolute",left:0,top:0,animation:"mui-ripple-pulsate 2500ms ".concat(e.transitions.easing.easeInOut," 200ms infinite")},"@keyframes mui-ripple-enter":{"0%":{transform:"scale(0)",opacity:.1},"100%":{transform:"scale(1)",opacity:.3}},"@keyframes mui-ripple-exit":{"0%":{opacity:1},"100%":{opacity:0}},"@keyframes mui-ripple-pulsate":{"0%":{transform:"scale(1)"},"50%":{transform:"scale(0.92)"},"100%":{transform:"scale(1)"}}}};t.styles=x;var w=function(e){function t(){var e,n,r;(0,l.default)(this,t);for(var o=arguments.length,a=new Array(o),u=0;u<o;u++)a[u]=arguments[u];return(0,s.default)(r,(n=r=(0,s.default)(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(a))),r.state={nextKey:0,ripples:[]},r.ignoringMouseDown=!1,r.startTimer=null,r.startTimerCommit=null,r.pulsate=function(){r.start({},{pulsate:!0})},r.start=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments.length>2?arguments[2]:void 0,o=t.pulsate,a=void 0!==o&&o,i=t.center,l=void 0===i?r.props.center||t.pulsate:i,u=t.fakeElement,s=void 0!==u&&u;if("mousedown"===e.type&&r.ignoringMouseDown)r.ignoringMouseDown=!1;else{"touchstart"===e.type&&(r.ignoringMouseDown=!0);var c,f,h,m=s?null:p.default.findDOMNode((0,d.default)(r)),v=m?m.getBoundingClientRect():{width:0,height:0,left:0,top:0};if(l||0===e.clientX&&0===e.clientY||!e.clientX&&!e.touches)c=Math.round(v.width/2),f=Math.round(v.height/2);else{var y=e.clientX?e.clientX:e.touches[0].clientX,g=e.clientY?e.clientY:e.touches[0].clientY;c=Math.round(y-v.left),f=Math.round(g-v.top)}if(l)(h=Math.sqrt((2*Math.pow(v.width,2)+Math.pow(v.height,2))/3))%2==0&&(h+=1);else{var x=2*Math.max(Math.abs((m?m.clientWidth:0)-c),c)+2,w=2*Math.max(Math.abs((m?m.clientHeight:0)-f),f)+2;h=Math.sqrt(Math.pow(x,2)+Math.pow(w,2))}e.touches?(r.startTimerCommit=function(){r.startCommit({pulsate:a,rippleX:c,rippleY:f,rippleSize:h,cb:n})},r.startTimer=setTimeout(function(){r.startTimerCommit(),r.startTimerCommit=null},b)):r.startCommit({pulsate:a,rippleX:c,rippleY:f,rippleSize:h,cb:n})}},r.startCommit=function(e){var t=e.pulsate,n=e.rippleX,o=e.rippleY,a=e.rippleSize,l=e.cb,u=r.state.ripples;u=(0,i.default)(u).concat([f.default.createElement(y.default,{key:r.state.nextKey,classes:r.props.classes,timeout:{exit:g,enter:g},pulsate:t,rippleX:n,rippleY:o,rippleSize:a})]),r.setState({nextKey:r.state.nextKey+1,ripples:u},l)},r.stop=function(e,t){clearTimeout(r.startTimer);var n=r.state.ripples;if("touchend"===e.type&&r.startTimerCommit)return e.persist(),r.startTimerCommit(),r.startTimerCommit=null,void(r.startTimer=setTimeout(function(){r.stop(e,t)},0));r.startTimerCommit=null,n&&n.length&&r.setState({ripples:n.slice(1)},t)},n))}return(0,c.default)(t,e),(0,u.default)(t,[{key:"componentWillUnmount",value:function(){clearTimeout(this.startTimer)}},{key:"render",value:function(){var e=this.props,t=(e.center,e.classes),n=e.className,r=(0,a.default)(e,["center","classes","className"]);return f.default.createElement(h.default,(0,o.default)({component:"span",enter:!0,exit:!0,className:(0,m.default)(t.root,n)},r),this.state.ripples)}}]),t}(f.default.PureComponent);w.propTypes={},w.defaultProps={center:!1};var _=(0,v.default)(x,{flip:!1,name:"MuiTouchRipple"})(w);t.default=_},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.detectFocusVisible=function e(t,n,r){var o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:1;t.focusVisibleTimeout=setTimeout(function(){var u=(0,i.default)(n);l.focusKeyPressed&&(u.activeElement===n||(0,a.default)(n,u.activeElement))?r():o<t.focusVisibleMaxCheckTimes&&e(t,n,r,o+1)},t.focusVisibleCheckTime)},t.listenForFocusKeys=function(e){e.addEventListener("keyup",s)};var o=r(n(49)),a=(r(n(14)),r(n(75))),i=r(n(22)),l={focusKeyPressed:!1,keyUpEventTimeout:-1};var u=["tab","enter","space","esc","up","down","left","right"];var s=function(e){(function(e){return u.indexOf((0,o.default)(e))>-1})(e)&&(l.focusKeyPressed=!0,clearTimeout(l.keyUpEventTimeout),l.keyUpEventTimeout=setTimeout(function(){l.focusKeyPressed=!1},1e3))}},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.styles=void 0;var o=r(n(4)),a=r(n(7)),i=r(n(3)),l=r(n(9)),u=r(n(8)),s=r(n(11)),c=r(n(10)),d=r(n(52)),f=r(n(2)),p=(r(n(1)),r(n(15))),h=r(n(6)),m=r(n(49)),v=r(n(76)),y=r(n(5)),g=n(452),b=r(n(451)),x=r(n(443)),w={root:{display:"inline-flex",alignItems:"center",justifyContent:"center",position:"relative",WebkitTapHighlightColor:"transparent",backgroundColor:"transparent",outline:"none",border:0,margin:0,borderRadius:0,padding:0,cursor:"pointer",userSelect:"none",verticalAlign:"middle","-moz-appearance":"none","-webkit-appearance":"none",textDecoration:"none",color:"inherit","&::-moz-focus-inner":{borderStyle:"none"},"&$disabled":{pointerEvents:"none",cursor:"default"}},disabled:{},focusVisible:{}};t.styles=w;var _=function(e){function t(){var e,n,r;(0,l.default)(this,t);for(var o=arguments.length,a=new Array(o),i=0;i<o;i++)a[i]=arguments[i];return(0,s.default)(r,(n=r=(0,s.default)(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(a))),r.state={},r.onFocusVisibleHandler=function(e){r.keyDown=!1,r.setState({focusVisible:!0}),r.props.onFocusVisible&&r.props.onFocusVisible(e)},r.onRippleRef=function(e){r.ripple=e},r.ripple=null,r.keyDown=!1,r.button=null,r.focusVisibleTimeout=null,r.focusVisibleCheckTime=50,r.focusVisibleMaxCheckTimes=5,r.handleKeyDown=function(e){var t=r.props,n=t.component,o=t.focusRipple,a=t.onKeyDown,i=t.onClick,l=(0,m.default)(e);o&&!r.keyDown&&r.state.focusVisible&&r.ripple&&"space"===l&&(r.keyDown=!0,e.persist(),r.ripple.stop(e,function(){r.ripple.start(e)})),a&&a(e),e.target!==e.currentTarget||!n||"button"===n||"space"!==l&&"enter"!==l||"A"===r.button.tagName&&r.button.href||(e.preventDefault(),i&&i(e))},r.handleKeyUp=function(e){r.props.focusRipple&&"space"===(0,m.default)(e)&&r.ripple&&r.state.focusVisible&&(r.keyDown=!1,e.persist(),r.ripple.stop(e,function(){r.ripple.pulsate(e)})),r.props.onKeyUp&&r.props.onKeyUp(e)},r.handleMouseDown=(0,x.default)((0,d.default)(r),"MouseDown","start",function(){clearTimeout(r.focusVisibleTimeout),r.state.focusVisible&&r.setState({focusVisible:!1})}),r.handleMouseUp=(0,x.default)((0,d.default)(r),"MouseUp","stop"),r.handleMouseLeave=(0,x.default)((0,d.default)(r),"MouseLeave","stop",function(e){r.state.focusVisible&&e.preventDefault()}),r.handleTouchStart=(0,x.default)((0,d.default)(r),"TouchStart","start"),r.handleTouchEnd=(0,x.default)((0,d.default)(r),"TouchEnd","stop"),r.handleTouchMove=(0,x.default)((0,d.default)(r),"TouchMove","stop"),r.handleBlur=(0,x.default)((0,d.default)(r),"Blur","stop",function(){clearTimeout(r.focusVisibleTimeout),r.state.focusVisible&&r.setState({focusVisible:!1})}),r.handleFocus=function(e){r.props.disabled||(r.button||(r.button=e.currentTarget),e.persist(),(0,g.detectFocusVisible)((0,d.default)(r),r.button,function(){r.onFocusVisibleHandler(e)}),r.props.onFocus&&r.props.onFocus(e))},n))}return(0,c.default)(t,e),(0,u.default)(t,[{key:"componentDidMount",value:function(){var e=this;this.button=p.default.findDOMNode(this),(0,g.listenForFocusKeys)((0,v.default)(this.button)),this.props.action&&this.props.action({focusVisible:function(){e.setState({focusVisible:!0}),e.button.focus()}})}},{key:"componentDidUpdate",value:function(e,t){this.props.focusRipple&&!this.props.disableRipple&&!t.focusVisible&&this.state.focusVisible&&this.ripple.pulsate()}},{key:"componentWillUnmount",value:function(){this.button=null,clearTimeout(this.focusVisibleTimeout)}},{key:"render",value:function(){var e,t=this.props,n=(t.action,t.buttonRef),r=t.centerRipple,l=t.children,u=t.classes,s=t.className,c=t.component,d=t.disabled,p=t.disableRipple,m=(t.focusRipple,t.focusVisibleClassName),v=(t.onBlur,t.onFocus,t.onFocusVisible,t.onKeyDown,t.onKeyUp,t.onMouseDown,t.onMouseLeave,t.onMouseUp,t.onTouchEnd,t.onTouchMove,t.onTouchStart,t.tabIndex),y=t.TouchRippleProps,g=t.type,x=(0,i.default)(t,["action","buttonRef","centerRipple","children","classes","className","component","disabled","disableRipple","focusRipple","focusVisibleClassName","onBlur","onFocus","onFocusVisible","onKeyDown","onKeyUp","onMouseDown","onMouseLeave","onMouseUp","onTouchEnd","onTouchMove","onTouchStart","tabIndex","TouchRippleProps","type"]),w=(0,h.default)(u.root,(e={},(0,a.default)(e,u.disabled,d),(0,a.default)(e,u.focusVisible,this.state.focusVisible),(0,a.default)(e,m,this.state.focusVisible),e),s),_={},k=c;return"button"===k&&x.href&&(k="a"),"button"===k?(_.type=g||"button",_.disabled=d):_.role="button",f.default.createElement(k,(0,o.default)({onBlur:this.handleBlur,onFocus:this.handleFocus,onKeyDown:this.handleKeyDown,onKeyUp:this.handleKeyUp,onMouseDown:this.handleMouseDown,onMouseLeave:this.handleMouseLeave,onMouseUp:this.handleMouseUp,onTouchEnd:this.handleTouchEnd,onTouchMove:this.handleTouchMove,onTouchStart:this.handleTouchStart,tabIndex:d?"-1":v,className:w,ref:n},_,x),l,p||d?null:f.default.createElement(b.default,(0,o.default)({innerRef:this.onRippleRef,center:r},y)))}}],[{key:"getDerivedStateFromProps",value:function(e,t){return void 0===t.focusVisible?{focusVisible:!1,lastDisabled:e.disabled}:!t.prevState&&e.disabled&&t.focusVisible?{focusVisible:!1,lastDisabled:e.disabled}:{lastDisabled:e.disabled}}}]),t}(f.default.Component);_.propTypes={},_.defaultProps={centerRipple:!1,component:"button",disableRipple:!1,focusRipple:!1,tabIndex:"0",type:"button"};var k=(0,y.default)(w,{name:"MuiButtonBase"})(_);t.default=k},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.styles=void 0;var o=r(n(4)),a=r(n(7)),i=r(n(3)),l=r(n(12)),u=r(n(2)),s=(r(n(1)),r(n(6))),c=r(n(5)),d=n(32),f=r(n(20)),p=n(13),h=function(e){return{root:(0,l.default)({},e.typography.button,{lineHeight:"1.4em",boxSizing:"border-box",minWidth:11*e.spacing.unit,minHeight:36,padding:"".concat(e.spacing.unit,"px ").concat(2*e.spacing.unit,"px"),borderRadius:4,color:e.palette.text.primary,transition:e.transitions.create(["background-color","box-shadow"],{duration:e.transitions.duration.short}),"&:hover":{textDecoration:"none",backgroundColor:(0,d.fade)(e.palette.text.primary,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"},"&$disabled":{backgroundColor:"transparent"}},"&$disabled":{color:e.palette.action.disabled}}),label:{width:"100%",display:"inherit",alignItems:"inherit",justifyContent:"inherit"},textPrimary:{color:e.palette.primary.main,"&:hover":{backgroundColor:(0,d.fade)(e.palette.primary.main,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}}},textSecondary:{color:e.palette.secondary.main,"&:hover":{backgroundColor:(0,d.fade)(e.palette.secondary.main,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}}},flat:{},flatPrimary:{},flatSecondary:{},outlined:{border:"1px solid ".concat("light"===e.palette.type?"rgba(0, 0, 0, 0.23)":"rgba(255, 255, 255, 0.23)")},colorInherit:{color:"inherit"},contained:{color:e.palette.getContrastText(e.palette.grey[300]),backgroundColor:e.palette.grey[300],boxShadow:e.shadows[2],"&$focusVisible":{boxShadow:e.shadows[6]},"&:active":{boxShadow:e.shadows[8]},"&$disabled":{color:e.palette.action.disabled,boxShadow:e.shadows[0],backgroundColor:e.palette.action.disabledBackground},"&:hover":{backgroundColor:e.palette.grey.A100,"@media (hover: none)":{backgroundColor:e.palette.grey[300]},"&$disabled":{backgroundColor:e.palette.action.disabledBackground}}},containedPrimary:{color:e.palette.primary.contrastText,backgroundColor:e.palette.primary.main,"&:hover":{backgroundColor:e.palette.primary.dark,"@media (hover: none)":{backgroundColor:e.palette.primary.main}}},containedSecondary:{color:e.palette.secondary.contrastText,backgroundColor:e.palette.secondary.main,"&:hover":{backgroundColor:e.palette.secondary.dark,"@media (hover: none)":{backgroundColor:e.palette.secondary.main}}},raised:{},raisedPrimary:{},raisedSecondary:{},focusVisible:{},disabled:{},fab:{borderRadius:"50%",padding:0,minWidth:0,width:56,fontSize:24,height:56,boxShadow:e.shadows[6],"&:active":{boxShadow:e.shadows[12]}},mini:{width:40,height:40},sizeSmall:{padding:"".concat(e.spacing.unit-1,"px ").concat(e.spacing.unit,"px"),minWidth:8*e.spacing.unit,minHeight:32,fontSize:e.typography.pxToRem(13)},sizeLarge:{padding:"".concat(e.spacing.unit,"px ").concat(3*e.spacing.unit,"px"),minWidth:14*e.spacing.unit,minHeight:40,fontSize:e.typography.pxToRem(15)},fullWidth:{width:"100%"}}};function m(e){var t,n=e.children,r=e.classes,l=e.className,c=e.color,d=e.disabled,h=e.disableFocusRipple,m=e.fullWidth,v=e.focusVisibleClassName,y=e.mini,g=e.size,b=e.variant,x=(0,i.default)(e,["children","classes","className","color","disabled","disableFocusRipple","fullWidth","focusVisibleClassName","mini","size","variant"]),w="fab"===b,_="contained"===b||"raised"===b,k=!_&&!w,P=(0,s.default)(r.root,(t={},(0,a.default)(t,r.contained,_||w),(0,a.default)(t,r.fab,w),(0,a.default)(t,r.mini,w&&y),(0,a.default)(t,r.colorInherit,"inherit"===c),(0,a.default)(t,r.textPrimary,k&&"primary"===c),(0,a.default)(t,r.textSecondary,k&&"secondary"===c),(0,a.default)(t,r.flat,k),(0,a.default)(t,r.flatPrimary,k&&"primary"===c),(0,a.default)(t,r.flatSecondary,k&&"secondary"===c),(0,a.default)(t,r.containedPrimary,!k&&"primary"===c),(0,a.default)(t,r.containedSecondary,!k&&"secondary"===c),(0,a.default)(t,r.raised,_||w),(0,a.default)(t,r.raisedPrimary,(_||w)&&"primary"===c),(0,a.default)(t,r.raisedSecondary,(_||w)&&"secondary"===c),(0,a.default)(t,r.text,"text"===b),(0,a.default)(t,r.outlined,"outlined"===b),(0,a.default)(t,r["size".concat((0,p.capitalize)(g))],"medium"!==g),(0,a.default)(t,r.disabled,d),(0,a.default)(t,r.fullWidth,m),t),l);return u.default.createElement(f.default,(0,o.default)({className:P,disabled:d,focusRipple:!h,focusVisibleClassName:(0,s.default)(r.focusVisible,v)},x),u.default.createElement("span",{className:r.label},n))}t.styles=h,m.propTypes={},m.defaultProps={color:"default",component:"button",disabled:!1,disableFocusRipple:!1,fullWidth:!1,mini:!1,size:"medium",type:"button",variant:"text"};var v=(0,c.default)(h,{name:"MuiButton"})(m);t.default=v},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.styles=void 0;var o=r(n(4)),a=r(n(7)),i=r(n(3)),l=r(n(12)),u=r(n(2)),s=(r(n(1)),r(n(6))),c=r(n(5)),d=function(e){return{root:(0,l.default)({},e.mixins.toolbar,{position:"relative",display:"flex",alignItems:"center"}),gutters:e.mixins.gutters()}};function f(e){var t=e.children,n=e.classes,r=e.className,l=e.disableGutters,c=(0,i.default)(e,["children","classes","className","disableGutters"]),d=(0,s.default)(n.root,(0,a.default)({},n.gutters,!l),r);return u.default.createElement("div",(0,o.default)({className:d},c),t)}t.styles=d,f.propTypes={},f.defaultProps={disableGutters:!1};var p=(0,c.default)(d,{name:"MuiToolbar"})(f);t.default=p},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.styles=void 0;var o=r(n(4)),a=r(n(7)),i=r(n(3)),l=r(n(12)),u=r(n(2)),s=(r(n(1)),r(n(6))),c=(r(n(14)),r(n(5))),d=function(e){var t={};return e.shadows.forEach(function(e,n){t["elevation".concat(n)]={boxShadow:e}}),(0,l.default)({root:{backgroundColor:e.palette.background.paper},rounded:{borderRadius:2}},t)};function f(e){var t=e.classes,n=e.className,r=e.component,l=e.square,c=e.elevation,d=(0,i.default)(e,["classes","className","component","square","elevation"]),f=(0,s.default)(t.root,t["elevation".concat(c)],(0,a.default)({},t.rounded,!l),n);return u.default.createElement(r,(0,o.default)({className:f},d))}t.styles=d,f.propTypes={},f.defaultProps={component:"div",elevation:2,square:!1};var p=(0,c.default)(d,{name:"MuiPaper"})(f);t.default=p},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.styles=void 0;var o=r(n(4)),a=r(n(7)),i=r(n(3)),l=r(n(2)),u=(r(n(1)),r(n(6))),s=r(n(5)),c=n(13),d=r(n(21)),f=function(e){var t="light"===e.palette.type?e.palette.grey[100]:e.palette.grey[900];return{root:{display:"flex",flexDirection:"column",width:"100%",boxSizing:"border-box",zIndex:e.zIndex.appBar,flexShrink:0},positionFixed:{position:"fixed",top:0,left:"auto",right:0},positionAbsolute:{position:"absolute",top:0,left:"auto",right:0},positionSticky:{position:"sticky",top:0,left:"auto",right:0},positionStatic:{position:"static"},colorDefault:{backgroundColor:t,color:e.palette.getContrastText(t)},colorPrimary:{backgroundColor:e.palette.primary.main,color:e.palette.primary.contrastText},colorSecondary:{backgroundColor:e.palette.secondary.main,color:e.palette.secondary.contrastText}}};function p(e){var t,n=e.children,r=e.classes,s=e.className,f=e.color,p=e.position,h=(0,i.default)(e,["children","classes","className","color","position"]),m=(0,u.default)(r.root,r["position".concat((0,c.capitalize)(p))],(t={},(0,a.default)(t,r["color".concat((0,c.capitalize)(f))],"inherit"!==f),(0,a.default)(t,"mui-fixed","fixed"===p),t),s);return l.default.createElement(d.default,(0,o.default)({square:!0,component:"header",elevation:4,className:m},h),n)}t.styles=f,p.propTypes={},p.defaultProps={color:"primary",position:"fixed"};var h=(0,s.default)(f,{name:"MuiAppBar"})(p);t.default=h},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(2),a=h(o),i=h(n(1)),l=n(17),u=h(n(78)),s=h(n(77)),c=h(n(18)),d=(h(n(24)),h(n(28))),f=h(n(441)),p=h(n(398));function h(e){return e&&e.__esModule?e:{default:e}}var m=function(e){function t(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var e=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return e.handleLogIn=function(){window.location="https://lyber-server.herokuapp.com/auth/login"},e}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.Component),r(t,[{key:"render",value:function(){var e=this.props.classes;return a.default.createElement("div",{className:e.root},a.default.createElement(u.default,{position:"fixed"},a.default.createElement(s.default,null,a.default.createElement(d.default,{className:e.menuButton,color:"inherit","aria-label":"Menu"},a.default.createElement(f.default,null)),a.default.createElement(c.default,{variant:"title",color:"inherit",className:e.flex},"Lyber"),a.default.createElement(d.default,{className:e.acountButton,color:"inherit","aria-label":"Menu",onClick:this.handleLogIn},a.default.createElement(p.default,null)))))}}]),t}();m.propTypes={classes:i.default.object.isRequired},t.default=(0,l.withStyles)({root:{flexGrow:1},flex:{flex:1,textAlign:"center"},menuButton:{marginLeft:-12,marginRight:20},acountButton:{marginRight:-12,marginLeft:20}})(m)},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.styles=void 0;var o=r(n(4)),a=r(n(7)),i=r(n(3)),l=r(n(2)),u=(r(n(1)),r(n(6))),s=r(n(5)),c=n(13),d=function(e){return{root:{display:"block",margin:0},display4:e.typography.display4,display3:e.typography.display3,display2:e.typography.display2,display1:e.typography.display1,headline:e.typography.headline,title:e.typography.title,subheading:e.typography.subheading,body2:e.typography.body2,body1:e.typography.body1,caption:e.typography.caption,button:e.typography.button,alignLeft:{textAlign:"left"},alignCenter:{textAlign:"center"},alignRight:{textAlign:"right"},alignJustify:{textAlign:"justify"},noWrap:{overflow:"hidden",textOverflow:"ellipsis",whiteSpace:"nowrap"},gutterBottom:{marginBottom:"0.35em"},paragraph:{marginBottom:2*e.spacing.unit},colorInherit:{color:"inherit"},colorPrimary:{color:e.palette.primary.main},colorSecondary:{color:e.palette.secondary.main},colorTextSecondary:{color:e.palette.text.secondary},colorError:{color:e.palette.error.main}}};function f(e){var t,n=e.align,r=e.classes,s=e.className,d=e.component,f=e.color,p=e.gutterBottom,h=e.headlineMapping,m=e.noWrap,v=e.paragraph,y=e.variant,g=(0,i.default)(e,["align","classes","className","component","color","gutterBottom","headlineMapping","noWrap","paragraph","variant"]),b=(0,u.default)(r.root,r[y],(t={},(0,a.default)(t,r["color".concat((0,c.capitalize)(f))],"default"!==f),(0,a.default)(t,r.noWrap,m),(0,a.default)(t,r.gutterBottom,p),(0,a.default)(t,r.paragraph,v),(0,a.default)(t,r["align".concat((0,c.capitalize)(n))],"inherit"!==n),t),s),x=d||(v?"p":h[y])||"span";return l.default.createElement(x,(0,o.default)({className:b},g))}t.styles=d,f.propTypes={},f.defaultProps={align:"inherit",color:"default",gutterBottom:!1,headlineMapping:{display4:"h1",display3:"h1",display2:"h1",display1:"h1",headline:"h1",title:"h2",subheading:"h3",body2:"aside",body1:"p"},noWrap:!1,paragraph:!1,variant:"body1"};var p=(0,s.default)(d,{name:"MuiTypography"})(f);t.default=p},function(e,t,n){"use strict";e.exports=function(){}},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.isWidthDown=t.isWidthUp=void 0;var o=r(n(4)),a=r(n(12)),i=r(n(3)),l=r(n(9)),u=r(n(8)),s=r(n(11)),c=r(n(10)),d=r(n(2)),f=(r(n(1)),r(n(23))),p=r(n(29)),h=(r(n(54)),r(n(129))),m=r(n(31)),v=n(56);t.isWidthUp=function(e,t){return arguments.length>2&&void 0!==arguments[2]&&!arguments[2]?v.keys.indexOf(e)<v.keys.indexOf(t):v.keys.indexOf(e)<=v.keys.indexOf(t)};t.isWidthDown=function(e,t){return arguments.length>2&&void 0!==arguments[2]&&!arguments[2]?v.keys.indexOf(t)<v.keys.indexOf(e):v.keys.indexOf(t)<=v.keys.indexOf(e)};var y=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return function(t){var n=e.withTheme,r=void 0!==n&&n,y=e.noSSR,g=void 0!==y&&y,b=e.initialWidth,x=e.resizeInterval,w=void 0===x?166:x,_=function(e){function n(e){var t;return(0,l.default)(this,n),(t=(0,s.default)(this,(n.__proto__||Object.getPrototypeOf(n)).call(this,e))).state={width:void 0},t.handleResize=(0,p.default)(function(){var e=t.getWidth();e!==t.state.width&&t.setState({width:e})},w),g&&(t.state.width=t.getWidth()),t}return(0,c.default)(n,e),(0,u.default)(n,[{key:"componentDidMount",value:function(){var e=this.getWidth();e!==this.state.width&&this.setState({width:e})}},{key:"componentWillUnmount",value:function(){this.handleResize.clear()}},{key:"getWidth",value:function(){for(var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:window.innerWidth,t=this.props.theme.breakpoints,n=null,r=1;null===n&&r<v.keys.length;){var o=v.keys[r];if(e<t.values[o]){n=v.keys[r-1];break}r+=1}return n=n||"xl"}},{key:"render",value:function(){var e=this.props,n=e.initialWidth,l=e.theme,u=e.width,s=(0,i.default)(e,["initialWidth","theme","width"]),c=(0,a.default)({width:u||this.state.width||n||b},s),p={};return r&&(p.theme=l),void 0===c.width?null:d.default.createElement(f.default,{target:"window",onResize:this.handleResize},d.default.createElement(t,(0,o.default)({},p,c)))}}]),n}(d.default.Component);return _.propTypes={},(0,h.default)(_,t),(0,m.default)()(_)}};t.default=y},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=function(e){var t=e.theme,n=e.name;return n&&t.props&&t.props[n]?t.props[n]:{}};t.default=r},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(12)),a=(r(n(14)),r(n(82)));function i(e,t){return t}var l=function(e){var t="function"==typeof e;return{create:function(n,r){var l=t?e(n):e;if(!r||!n.overrides||!n.overrides[r])return l;var u=n.overrides[r],s=(0,o.default)({},l);return Object.keys(u).forEach(function(e){s[e]=(0,a.default)(s[e],u[e],{arrayMerge:i})}),s},options:{},themingEnabled:t}};t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(1);t.default={jss:(0,r.shape)({options:(0,r.shape)({createGenerateClassName:r.func.isRequired}).isRequired,createStyleSheet:r.func.isRequired,removeStyleSheet:r.func.isRequired}),registry:(0,r.shape)({add:r.func.isRequired,toString:r.func.isRequired})}},function(e,t,n){"use strict";var r;Object.defineProperty(t,"__esModule",{value:!0});var o,a=n(1),i=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(219)),l=n(464),u=(o=l)&&o.__esModule?o:{default:o};function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}t.default=(s(r={},i.jss,u.default.jss),s(r,i.sheetOptions,a.object),s(r,i.sheetsRegistry,u.default.registry),s(r,i.managers,a.object),r)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return e}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){function e(e,t){return e.length-t.length}return{onProcessStyle:function(t,n){if("style"!==n.type)return t;var r={},o=Object.keys(t).sort(e);for(var a in o)r[o[a]]=t[o[a]];return r}}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if(!l)return t;if("string"!=typeof t||!isNaN(parseInt(t,10)))return t;var n=e+t;if(null!=i[n])return i[n];try{l.style[e]=t}catch(e){return i[n]=!1,!1}""!==l.style[e]?i[n]=t:("-ms-flex"===(t=o.default.css+t)&&(t="-ms-flexbox"),l.style[e]=t,""!==l.style[e]&&(i[n]=t));i[n]||(i[n]=!1);return l.style[e]="",i[n]};var r=a(n(79)),o=a(n(130));function a(e){return e&&e.__esModule?e:{default:e}}var i={},l=void 0;r.default&&(l=document.createElement("p"))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return e.replace(r,o)};var r=/[-\s]+(.)?/g;function o(e,t){return t?t.toUpperCase():""}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){if(!l)return e;if(null!=u[e])return u[e];(0,a.default)(e)in l.style?u[e]=e:o.default.js+(0,a.default)("-"+e)in l.style?u[e]=o.default.css+e:u[e]=!1;return u[e]};var r=i(n(79)),o=i(n(130)),a=i(n(469));function i(e){return e&&e.__esModule?e:{default:e}}var l=void 0,u={};if(r.default){l=document.createElement("p");var s=window.getComputedStyle(document.documentElement,"");for(var c in s)isNaN(c)||(u[s[c]]=s[c])}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.supportedValue=t.supportedProperty=t.prefix=void 0;var r=i(n(130)),o=i(n(470)),a=i(n(468));function i(e){return e&&e.__esModule?e:{default:e}}t.default={prefix:r.default,supportedProperty:o.default,supportedValue:a.default},
/**
    * CSS Vendor prefix detection and property feature testing.
    *
    * @copyright Oleg Slobodskoi 2015
    * @website https://github.com/jsstyles/css-vendor
    * @license MIT
    */
t.prefix=r.default,t.supportedProperty=o.default,t.supportedValue=a.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){return{onProcessRule:function(e){"keyframes"===e.type&&(e.key="@"+r.prefix.css+e.key.substr(1))},onProcessStyle:function(e,t){if("style"!==t.type)return e;for(var n in e){var o=e[n],a=!1,i=r.supportedProperty(n);i&&i!==n&&(a=!0);var l=!1,u=r.supportedValue(i,o);u&&u!==o&&(l=!0),(a||l)&&(a&&delete e[n],e[i||n]=u||o)}return e},onChangeValue:function(e,t){return r.supportedValue(t,e)}}};var r=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(471))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={"animation-delay":"ms","animation-duration":"ms","background-position":"px","background-position-x":"px","background-position-y":"px","background-size":"px",border:"px","border-bottom":"px","border-bottom-left-radius":"px","border-bottom-right-radius":"px","border-bottom-width":"px","border-left":"px","border-left-width":"px","border-radius":"px","border-right":"px","border-right-width":"px","border-spacing":"px","border-top":"px","border-top-left-radius":"px","border-top-right-radius":"px","border-top-width":"px","border-width":"px","border-after-width":"px","border-before-width":"px","border-end-width":"px","border-horizontal-spacing":"px","border-start-width":"px","border-vertical-spacing":"px",bottom:"px","box-shadow":"px","column-gap":"px","column-rule":"px","column-rule-width":"px","column-width":"px","flex-basis":"px","font-size":"px","font-size-delta":"px",height:"px",left:"px","letter-spacing":"px","logical-height":"px","logical-width":"px",margin:"px","margin-after":"px","margin-before":"px","margin-bottom":"px","margin-left":"px","margin-right":"px","margin-top":"px","max-height":"px","max-width":"px","margin-end":"px","margin-start":"px","mask-position-x":"px","mask-position-y":"px","mask-size":"px","max-logical-height":"px","max-logical-width":"px","min-height":"px","min-width":"px","min-logical-height":"px","min-logical-width":"px",motion:"px","motion-offset":"px",outline:"px","outline-offset":"px","outline-width":"px",padding:"px","padding-bottom":"px","padding-left":"px","padding-right":"px","padding-top":"px","padding-after":"px","padding-before":"px","padding-end":"px","padding-start":"px","perspective-origin-x":"%","perspective-origin-y":"%",perspective:"px",right:"px","shape-margin":"px",size:"px","text-indent":"px","text-stroke":"px","text-stroke-width":"px",top:"px","transform-origin":"%","transform-origin-x":"%","transform-origin-y":"%","transform-origin-z":"%","transition-delay":"ms","transition-duration":"ms","vertical-align":"px",width:"px","word-spacing":"px","box-shadow-x":"px","box-shadow-y":"px","box-shadow-blur":"px","box-shadow-spread":"px","font-line-height":"px","text-shadow-x":"px","text-shadow-y":"px","text-shadow-blur":"px"}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};t.default=function(){var e=i(arguments.length>0&&void 0!==arguments[0]?arguments[0]:{});return{onProcessStyle:function(t,n){if("style"!==n.type)return t;for(var r in t)t[r]=u(r,t[r],e);return t},onChangeValue:function(t,n){return u(n,t,e)}}};var o,a=n(473);function i(e){var t=/(-[a-z])/g,n=function(e){return e[1].toUpperCase()},r={};for(var o in e)r[o]=e[o],r[o.replace(t,n)]=e[o];return r}var l=i(((o=a)&&o.__esModule?o:{default:o}).default);function u(e,t,n){if(!t)return t;var o=t,a=void 0===t?"undefined":r(t);switch("object"===a&&Array.isArray(t)&&(a="array"),a){case"object":if("fallbacks"===e){for(var i in t)t[i]=u(i,t[i],n);break}for(var s in t)t[s]=u(e+"-"+s,t[s],n);break;case"array":for(var c=0;c<t.length;c++)t[c]=u(e,t[c],n);break;case"number":0!==t&&(o=t+(n[e]||l[e]||""))}return o}},function(e,t,n){"use strict";var r=/[A-Z]/g,o=/^ms-/,a={};e.exports=function(e){return e in a?a[e]:a[e]=e.replace(r,"-$&").toLowerCase().replace(o,"-ms-")}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){return{onProcessStyle:function(e){if(Array.isArray(e)){for(var t=0;t<e.length;t++)e[t]=i(e[t]);return e}return i(e)},onChangeValue:function(e,t,n){var r=(0,a.default)(t);return t===r?e:(n.prop(r,e),null)}}};var r,o=n(475),a=(r=o)&&r.__esModule?r:{default:r};function i(e){var t={};for(var n in e)t[(0,a.default)(n)]=e[n];return e.fallbacks&&(Array.isArray(e.fallbacks)?t.fallbacks=e.fallbacks.map(i):t.fallbacks=i(e.fallbacks)),t}},function(e,t,n){"use strict";e.exports=function(){}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};t.default=function(){function e(e){return function(t,n){var r=e.getRule(n);return r?r.selector:((0,i.default)(!1,"[JSS] Could not find the referenced rule %s in %s.",n,e.options.meta||e),n)}}var t=function(e){return-1!==e.indexOf("&")};function n(e,n){for(var r=n.split(l),o=e.split(l),a="",i=0;i<r.length;i++)for(var s=r[i],c=0;c<o.length;c++){var d=o[c];a&&(a+=", "),a+=t(d)?d.replace(u,s):s+" "+d}return a}function o(e,t,n){if(n)return r({},n,{index:n.index+1});var o=e.options.nestingLevel;return o=void 0===o?1:o+1,r({},e.options,{nestingLevel:o,index:t.indexOf(e)+1})}return{onProcessStyle:function(a,i){if("style"!==i.type)return a;var l=i.options.parent,u=void 0,c=void 0;for(var d in a){var f=t(d),p="@"===d[0];if(f||p){if(u=o(i,l,u),f){var h=n(d,i.selector);c||(c=e(l)),h=h.replace(s,c),l.addRule(h,a[d],r({},u,{selector:h}))}else p&&l.addRule(d,null,u).addRule(i.key,a[d],{selector:i.selector});delete a[d]}}return a}}};var o,a=n(477),i=(o=a)&&o.__esModule?o:{default:o};var l=/\s*,\s*/g,u=/&/g,s=/\$([\w-]+)/g},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();var o=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}return r(e,[{key:"setProperty",value:function(){return!0}},{key:"getPropertyValue",value:function(){return""}},{key:"removeProperty",value:function(){}},{key:"setSelector",value:function(){return!0}},{key:"getKey",value:function(){return""}},{key:"attach",value:function(){}},{key:"detach",value:function(){}},{key:"deploy",value:function(){}},{key:"insertRule",value:function(){return!1}},{key:"deleteRule",value:function(){return!0}},{key:"replaceRule",value:function(){return!1}},{key:"getRules",value:function(){}},{key:"indexOf",value:function(){return-1}}]),e}();t.default=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=u(n(51)),a=u(n(131)),i=u(n(50)),l=u(n(81));function u(e){return e&&e.__esModule?e:{default:e}}var s=function(e){var t=void 0;return function(){return t||(t=e()),t}};function c(e,t){try{return e.style.getPropertyValue(t)}catch(e){return""}}function d(e,t,n){try{var r=n;if(Array.isArray(n)&&(r=(0,l.default)(n,!0),"!important"===n[n.length-1]))return e.style.setProperty(t,r,"important"),!0;e.style.setProperty(t,r)}catch(e){return!1}return!0}function f(e,t){try{e.style.removeProperty(t)}catch(e){(0,o.default)(!1,'[JSS] DOMException "%s" was thrown. Tried to remove property "%s".',e.message,t)}}var p,h=1,m=7,v=(p=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;return e.substr(t,e.indexOf("{")-1)},function(e){if(e.type===h)return e.selectorText;if(e.type===m){var t=e.name;if(t)return"@keyframes "+t;var n=e.cssText;return"@"+p(n,n.indexOf("keyframes"))}return p(e.cssText)});function y(e,t){return e.selectorText=t,e.selectorText===t}var g,b,x=s(function(){return document.head||document.getElementsByTagName("head")[0]}),w=(g=void 0,b=!1,function(e){var t={};g||(g=document.createElement("style"));for(var n=0;n<e.length;n++){var r=e[n];if(r instanceof i.default){var o=r.selector;if(o&&-1!==o.indexOf("\\")){b||(x().appendChild(g),b=!0),g.textContent=o+" {}";var a=g.sheet;if(a){var l=a.cssRules;l&&(t[l[0].selectorText]=r.key)}}}}return b&&(x().removeChild(g),b=!1),t});function _(e){var t=a.default.registry;if(t.length>0){var n=function(e,t){for(var n=0;n<e.length;n++){var r=e[n];if(r.attached&&r.options.index>t.index&&r.options.insertionPoint===t.insertionPoint)return r}return null}(t,e);if(n)return n.renderer.element;if(n=function(e,t){for(var n=e.length-1;n>=0;n--){var r=e[n];if(r.attached&&r.options.insertionPoint===t.insertionPoint)return r}return null}(t,e))return n.renderer.element.nextElementSibling}var r=e.insertionPoint;if(r&&"string"==typeof r){var i=function(e){for(var t=x(),n=0;n<t.childNodes.length;n++){var r=t.childNodes[n];if(8===r.nodeType&&r.nodeValue.trim()===e)return r}return null}(r);if(i)return i.nextSibling;(0,o.default)("jss"===r,'[JSS] Insertion point "%s" not found.',r)}return null}var k=s(function(){var e=document.querySelector('meta[property="csp-nonce"]');return e?e.getAttribute("content"):null}),P=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.getPropertyValue=c,this.setProperty=d,this.removeProperty=f,this.setSelector=y,this.getKey=v,this.getUnescapedKeysMap=w,this.hasInsertedRules=!1,t&&a.default.add(t),this.sheet=t;var n=this.sheet?this.sheet.options:{},r=n.media,o=n.meta,i=n.element;this.element=i||document.createElement("style"),this.element.type="text/css",this.element.setAttribute("data-jss",""),r&&this.element.setAttribute("media",r),o&&this.element.setAttribute("data-meta",o);var l=k();l&&this.element.setAttribute("nonce",l)}return r(e,[{key:"attach",value:function(){!this.element.parentNode&&this.sheet&&(this.hasInsertedRules&&(this.deploy(),this.hasInsertedRules=!1),function(e,t){var n=t.insertionPoint,r=_(t);if(r){var a=r.parentNode;a&&a.insertBefore(e,r)}else if(n&&"number"==typeof n.nodeType){var i=n,l=i.parentNode;l?l.insertBefore(e,i.nextSibling):(0,o.default)(!1,"[JSS] Insertion point is not in the DOM.")}else x().insertBefore(e,r)}(this.element,this.sheet.options))}},{key:"detach",value:function(){this.element.parentNode.removeChild(this.element)}},{key:"deploy",value:function(){this.sheet&&(this.element.textContent="\n"+this.sheet.toString()+"\n")}},{key:"insertRule",value:function(e,t){var n=this.element.sheet,r=n.cssRules,a=e.toString();if(t||(t=r.length),!a)return!1;try{n.insertRule(a,t)}catch(t){return(0,o.default)(!1,"[JSS] Can not insert an unsupported rule \n\r%s",e),!1}return this.hasInsertedRules=!0,r[t]}},{key:"deleteRule",value:function(e){var t=this.element.sheet,n=this.indexOf(e);return-1!==n&&(t.deleteRule(n),!0)}},{key:"indexOf",value:function(e){for(var t=this.element.sheet.cssRules,n=0;n<t.length;n++)if(e===t[n])return n;return-1}},{key:"replaceRule",value:function(e,t){var n=this.indexOf(e),r=this.insertRule(t,n);return this.element.sheet.deleteRule(n),r}},{key:"getRules",value:function(){return this.element.sheet.cssRules}}]),e}();t.default=P},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=i(n(55)),o=i(n(50)),a=i(n(80));function i(e){return e&&e.__esModule?e:{default:e}}var l=Date.now(),u="fnValues"+l,s="fnStyle"+ ++l;t.default={onCreateRule:function(e,t,n){if("function"!=typeof t)return null;var r=(0,a.default)(e,{},n);return r[s]=t,r},onProcessStyle:function(e,t){var n={};for(var r in e){var o=e[r];"function"==typeof o&&(delete e[r],n[r]=o)}return(t=t)[u]=n,e},onUpdate:function(e,t){if(t.rules instanceof r.default)t.rules.update(e);else if(t instanceof o.default){if((t=t)[u])for(var n in t[u])t.prop(n,t[u][n](e));var a=(t=t)[s];if(a){var i=a(e);for(var l in i)t.prop(l,i[l])}}}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=i(n(50)),o=i(n(80)),a=i(n(224));function i(e){return e&&e.__esModule?e:{default:e}}t.default={onCreateRule:function(e,t,n){if(!(0,a.default)(t))return null;var r=t,i=(0,o.default)(e,{},n);return r.subscribe(function(e){for(var t in e)i.prop(t,e[t])}),i},onProcessRule:function(e){if(e instanceof r.default){var t=e,n=t.style,o=function(e){var r=n[e];if(!(0,a.default)(r))return"continue";delete n[e],r.subscribe({next:function(n){t.prop(e,n)}})};for(var i in n)o(i)}}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n(132),i=(r=a)&&r.__esModule?r:{default:r};var l=function(){function e(t,n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.type="viewport",this.isProcessed=!1,this.key=t,this.style=n,this.options=r}return o(e,[{key:"toString",value:function(e){return(0,i.default)(this.key,this.style,e)}}]),e}();t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n(132),i=(r=a)&&r.__esModule?r:{default:r};var l=function(){function e(t,n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.type="font-face",this.isProcessed=!1,this.key=t,this.style=n,this.options=r}return o(e,[{key:"toString",value:function(e){if(Array.isArray(this.style)){for(var t="",n=0;n<this.style.length;n++)t+=(0,i.default)(this.key,this.style[n]),this.style[n+1]&&(t+="\n");return t}return(0,i.default)(this.key,this.style,e)}}]),e}();t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(55),l=(r=i)&&r.__esModule?r:{default:r};var u=function(){function e(t,n,r){for(var a in function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.type="conditional",this.isProcessed=!1,this.key=t,this.options=r,this.rules=new l.default(o({},r,{parent:this})),n)this.rules.add(a,n[a]);this.rules.process()}return a(e,[{key:"getRule",value:function(e){return this.rules.get(e)}},{key:"indexOf",value:function(e){return this.rules.indexOf(e)}},{key:"addRule",value:function(e,t,n){var r=this.rules.add(e,t,n);return this.options.jss.plugins.onProcessRule(r),r}},{key:"toString",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{indent:1},t=this.rules.toString(e);return t?this.key+" {\n"+t+"\n}":""}}]),e}();t.default=u},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(55),l=(r=i)&&r.__esModule?r:{default:r};var u=function(){function e(t,n,r){for(var a in function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.type="keyframes",this.isProcessed=!1,this.key=t,this.options=r,this.rules=new l.default(o({},r,{parent:this})),n)this.rules.add(a,n[a],o({},this.options,{parent:this,selector:a}));this.rules.process()}return a(e,[{key:"toString",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{indent:1},t=this.rules.toString(e);return t&&(t+="\n"),this.key+" {\n"+t+"}"}}]),e}();t.default=u},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();var o=function(){function e(t,n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.type="simple",this.isProcessed=!1,this.key=t,this.value=n,this.options=r}return r(e,[{key:"toString",value:function(e){if(Array.isArray(this.value)){for(var t="",n=0;n<this.value.length;n++)t+=this.key+" "+this.value[n]+";",this.value[n+1]&&(t+="\n");return t}return this.key+" "+this.value+";"}}]),e}();t.default=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=u(n(487)),o=u(n(486)),a=u(n(485)),i=u(n(484)),l=u(n(483));function u(e){return e&&e.__esModule?e:{default:e}}var s={"@charset":r.default,"@import":r.default,"@namespace":r.default,"@keyframes":o.default,"@media":a.default,"@supports":a.default,"@font-face":i.default,"@viewport":l.default,"@-ms-viewport":l.default},c=Object.keys(s).map(function(e){var t=new RegExp("^"+e),n=s[e];return{onCreateRule:function(e,r,o){return t.test(e)?new n(e,r,o):null}}});t.default=c},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n(51),i=(r=a)&&r.__esModule?r:{default:r};var l=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.hooks={onCreateRule:[],onProcessRule:[],onProcessStyle:[],onProcessSheet:[],onChangeValue:[],onUpdate:[]}}return o(e,[{key:"onCreateRule",value:function(e,t,n){for(var r=0;r<this.hooks.onCreateRule.length;r++){var o=this.hooks.onCreateRule[r](e,t,n);if(o)return o}return null}},{key:"onProcessRule",value:function(e){if(!e.isProcessed){for(var t=e.options.sheet,n=0;n<this.hooks.onProcessRule.length;n++)this.hooks.onProcessRule[n](e,t);e.style&&this.onProcessStyle(e.style,e,t),e.isProcessed=!0}}},{key:"onProcessStyle",value:function(e,t,n){for(var r=e,o=0;o<this.hooks.onProcessStyle.length;o++)r=this.hooks.onProcessStyle[o](r,t,n),t.style=r}},{key:"onProcessSheet",value:function(e){for(var t=0;t<this.hooks.onProcessSheet.length;t++)this.hooks.onProcessSheet[t](e)}},{key:"onUpdate",value:function(e,t,n){for(var r=0;r<this.hooks.onUpdate.length;r++)this.hooks.onUpdate[r](e,t,n)}},{key:"onChangeValue",value:function(e,t,n){for(var r=e,o=0;o<this.hooks.onChangeValue.length;o++)r=this.hooks.onChangeValue[o](r,t,n);return r}},{key:"use",value:function(e){for(var t in e)this.hooks[t]?this.hooks[t].push(e[t]):(0,i.default)(!1,'[JSS] Unknown hook "%s".',t)}}]),e}();t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=g(n(79)),l=g(n(221)),u=g(n(489)),s=g(n(488)),c=g(n(482)),d=g(n(481)),f=g(n(131)),p=g(n(50)),h=g(n(222)),m=g(n(80)),v=g(n(480)),y=g(n(479));function g(e){return e&&e.__esModule?e:{default:e}}var b=s.default.concat([c.default,d.default]),x=0,w=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.id=x++,this.version="9.8.3",this.plugins=new u.default,this.options={createGenerateClassName:h.default,Renderer:i.default?v.default:y.default,plugins:[]},this.generateClassName=(0,h.default)(),this.use.apply(this,b),this.setup(t)}return a(e,[{key:"setup",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return e.createGenerateClassName&&(this.options.createGenerateClassName=e.createGenerateClassName,this.generateClassName=e.createGenerateClassName()),null!=e.insertionPoint&&(this.options.insertionPoint=e.insertionPoint),(e.virtual||e.Renderer)&&(this.options.Renderer=e.Renderer||(e.virtual?y.default:v.default)),e.plugins&&this.use.apply(this,e.plugins),this}},{key:"createStyleSheet",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.index;"number"!=typeof n&&(n=0===f.default.index?0:f.default.index+1);var r=new l.default(e,o({},t,{jss:this,generateClassName:t.generateClassName||this.generateClassName,insertionPoint:this.options.insertionPoint,Renderer:this.options.Renderer,index:n}));return this.plugins.onProcessSheet(r),r}},{key:"removeStyleSheet",value:function(e){return e.detach(),f.default.remove(e),this}},{key:"createRule",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};"object"===(void 0===e?"undefined":r(e))&&(n=t,t=e,e=void 0);var o=n;o.jss=this,o.Renderer=this.options.Renderer,o.generateClassName||(o.generateClassName=this.generateClassName),o.classes||(o.classes={});var a=(0,m.default)(e,t,o);return!o.selector&&a instanceof p.default&&(a.selector="."+o.generateClassName(a)),this.plugins.onProcessRule(a),a}},{key:"use",value:function(){for(var e=this,t=arguments.length,n=Array(t),r=0;r<t;r++)n[r]=arguments[r];return n.forEach(function(t){-1===e.options.plugins.indexOf(t)&&(e.options.plugins.push(t),e.plugins.use(t))}),this}}]),e}();t.default=w},function(e,t,n){"use strict";(function(e){Object.defineProperty(t,"__esModule",{value:!0});var n="2f1acc6c3a606b082e5eef5e54414ffb";null==e[n]&&(e[n]=0),t.default=e[n]++}).call(this,n(37))},function(e,t,n){"use strict";(function(e){Object.defineProperty(t,"__esModule",{value:!0});e.CSS;t.default=function(e){return e}}).call(this,n(37))},function(e,t){e.exports=function(e){if(!e.webpackPolyfill){var t=Object.create(e);t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),Object.defineProperty(t,"exports",{enumerable:!0}),t.webpackPolyfill=1}return t}},function(e,t,n){"use strict";n.r(t),function(e,r){var o,a=n(236);o="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==e?e:r;var i=Object(a.a)(o);t.default=i}.call(this,n(37),n(493)(e))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};t.default=function e(t){if(null==t)return t;var n=void 0===t?"undefined":r(t);if("string"===n||"number"===n||"function"===n)return t;if(l(t))return t.map(e);if((0,i.default)(t))return t;var o={};for(var a in t){var u=t[a];"object"!==(void 0===u?"undefined":r(u))?o[a]=u:o[a]=e(u)}return o};var o,a=n(224),i=(o=a)&&o.__esModule?o:{default:o};var l=Array.isArray},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n(51),i=(r=a)&&r.__esModule?r:{default:r};var l=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.sheets=[],this.refs=[],this.keys=[]}return o(e,[{key:"get",value:function(e){var t=this.keys.indexOf(e);return this.sheets[t]}},{key:"add",value:function(e,t){var n=this.sheets,r=this.refs,o=this.keys,a=n.indexOf(t);return-1!==a?a:(n.push(t),r.push(0),o.push(e),n.length-1)}},{key:"manage",value:function(e){var t=this.keys.indexOf(e),n=this.sheets[t];return 0===this.refs[t]&&n.attach(),this.refs[t]++,this.keys[t]||this.keys.splice(t,0,e),n}},{key:"unmanage",value:function(e){var t=this.keys.indexOf(e);-1!==t?this.refs[t]>0&&(this.refs[t]--,0===this.refs[t]&&this.sheets[t].detach()):(0,i.default)(!1,"SheetsManager: can't find sheet to unmanage")}},{key:"size",get:function(){return this.keys.length}}]),e}();t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};t.default=function e(t){var n=null;for(var o in t){var a=t[o],i=void 0===a?"undefined":r(a);if("function"===i)n||(n={}),n[o]=a;else if("object"===i&&null!==a&&!Array.isArray(a)){var l=e(a);l&&(n||(n={}),n[o]=l)}}return n}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();t.default=function(){return{onCreateRule:function(e,t,n){if(e===l)return new s(e,t,n);if("@"===e[0]&&e.substr(0,u.length)===u)return new c(e,t,n);var r=n.parent;r&&("global"!==r.type&&"global"!==r.options.parent.type||(n.global=!0));n.global&&(n.selector=e);return null},onProcessRule:function(e){if("style"!==e.type)return;(function(e){var t=e.options,n=e.style,o=n[l];if(!o)return;for(var a in o)t.sheet.addRule(a,o[a],r({},t,{selector:f(a,e.selector)}));delete n[l]})(e),function(e){var t=e.options,n=e.style;for(var o in n)if(o.substr(0,l.length)===l){var a=f(o.substr(l.length),e.selector);t.sheet.addRule(a,n[o],r({},t,{selector:a})),delete n[o]}}(e)}}};var a=n(226);function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var l="@global",u="@global ",s=function(){function e(t,n,o){for(var l in i(this,e),this.type="global",this.key=t,this.options=o,this.rules=new a.RuleList(r({},o,{parent:this})),n)this.rules.add(l,n[l],{selector:l});this.rules.process()}return o(e,[{key:"getRule",value:function(e){return this.rules.get(e)}},{key:"addRule",value:function(e,t,n){var r=this.rules.add(e,t,n);return this.options.jss.plugins.onProcessRule(r),r}},{key:"indexOf",value:function(e){return this.rules.indexOf(e)}},{key:"toString",value:function(){return this.rules.toString()}}]),e}(),c=function(){function e(t,n,o){i(this,e),this.name=t,this.options=o;var a=t.substr(u.length);this.rule=o.jss.createRule(a,n,r({},o,{parent:this,selector:a}))}return o(e,[{key:"toString",value:function(e){return this.rule.toString(e)}}]),e}(),d=/\s*,\s*/g;function f(e,t){for(var n=e.split(d),r="",o=0;o<n.length;o++)r+=t+" "+n[o].trim(),n[o+1]&&(r+=", ");return r}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;t.default={unit:8}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r={mobileStepper:1e3,appBar:1100,drawer:1200,modal:1300,snackbar:1400,tooltip:1500};t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=.2,o=.14,a=.12;function i(){return["".concat(arguments.length<=0?void 0:arguments[0],"px ").concat(arguments.length<=1?void 0:arguments[1],"px ").concat(arguments.length<=2?void 0:arguments[2],"px ").concat(arguments.length<=3?void 0:arguments[3],"px rgba(0, 0, 0, ").concat(r,")"),"".concat(arguments.length<=4?void 0:arguments[4],"px ").concat(arguments.length<=5?void 0:arguments[5],"px ").concat(arguments.length<=6?void 0:arguments[6],"px ").concat(arguments.length<=7?void 0:arguments[7],"px rgba(0, 0, 0, ").concat(o,")"),"".concat(arguments.length<=8?void 0:arguments[8],"px ").concat(arguments.length<=9?void 0:arguments[9],"px ").concat(arguments.length<=10?void 0:arguments[10],"px ").concat(arguments.length<=11?void 0:arguments[11],"px rgba(0, 0, 0, ").concat(a,")")].join(",")}var l=["none",i(0,1,3,0,0,1,1,0,0,2,1,-1),i(0,1,5,0,0,2,2,0,0,3,1,-2),i(0,1,8,0,0,3,4,0,0,3,3,-2),i(0,2,4,-1,0,4,5,0,0,1,10,0),i(0,3,5,-1,0,5,8,0,0,1,14,0),i(0,3,5,-1,0,6,10,0,0,1,18,0),i(0,4,5,-2,0,7,10,1,0,2,16,1),i(0,5,5,-3,0,8,10,1,0,3,14,2),i(0,5,6,-3,0,9,12,1,0,3,16,2),i(0,6,6,-3,0,10,14,1,0,4,18,3),i(0,6,7,-4,0,11,15,1,0,4,20,3),i(0,7,8,-4,0,12,17,2,0,5,22,4),i(0,7,8,-4,0,13,19,2,0,5,24,4),i(0,7,9,-4,0,14,21,2,0,5,26,4),i(0,8,9,-5,0,15,22,2,0,6,28,5),i(0,8,10,-5,0,16,24,2,0,6,30,5),i(0,8,11,-5,0,17,26,2,0,6,32,5),i(0,9,11,-5,0,18,28,2,0,7,34,6),i(0,9,12,-6,0,19,29,2,0,7,36,6),i(0,10,13,-6,0,20,31,3,0,8,38,7),i(0,10,13,-6,0,21,33,3,0,8,40,7),i(0,10,14,-6,0,22,35,3,0,8,42,7),i(0,11,14,-7,0,23,36,3,0,9,44,8),i(0,11,15,-7,0,24,38,3,0,9,46,8)];t.default=l},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,n){var r;return(0,a.default)({gutters:function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return(0,a.default)({paddingLeft:2*t.unit,paddingRight:2*t.unit},n,(0,o.default)({},e.up("sm"),(0,a.default)({paddingLeft:3*t.unit,paddingRight:3*t.unit},n[e.up("sm")])))},toolbar:(r={minHeight:56},(0,o.default)(r,"".concat(e.up("xs")," and (orientation: landscape)"),{minHeight:48}),(0,o.default)(r,e.up("sm"),{minHeight:64}),r)},n)};var o=r(n(7)),a=r(n(12))},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){var t=e.primary,n=void 0===t?{light:l.default[300],main:l.default[500],dark:l.default[700]}:t,r=e.secondary,v=void 0===r?{light:u.default.A200,main:u.default.A400,dark:u.default.A700}:r,y=e.error,g=void 0===y?{light:c.default[300],main:c.default[500],dark:c.default[700]}:y,b=e.type,x=void 0===b?"light":b,w=e.contrastThreshold,_=void 0===w?3:w,k=e.tonalOffset,P=void 0===k?.2:k,E=(0,a.default)(e,["primary","secondary","error","type","contrastThreshold","tonalOffset"]);function O(e){var t=(0,f.getContrastRatio)(e,h.text.primary)>=_?h.text.primary:p.text.primary;return t}function C(e,t,n,r){!e.main&&e[t]&&(e.main=e[t]),m(e,"light",n,P),m(e,"dark",r,P),e.contrastText||(e.contrastText=O(e.main))}C(n,500,300,700),C(v,"A400","A200","A700"),C(g,500,300,700);var S={dark:h,light:p};return(0,i.default)((0,o.default)({common:d.default,type:x,primary:n,secondary:v,error:g,grey:s.default,contrastThreshold:_,getContrastText:O,augmentColor:C,tonalOffset:P},S[x]),E,{clone:!1})},t.dark=t.light=void 0;var o=r(n(12)),a=r(n(3)),i=(r(n(14)),r(n(82))),l=r(n(231)),u=r(n(230)),s=r(n(229)),c=r(n(228)),d=r(n(133)),f=n(32),p={text:{primary:"rgba(0, 0, 0, 0.87)",secondary:"rgba(0, 0, 0, 0.54)",disabled:"rgba(0, 0, 0, 0.38)",hint:"rgba(0, 0, 0, 0.38)"},divider:"rgba(0, 0, 0, 0.12)",background:{paper:d.default.white,default:s.default[50]},action:{active:"rgba(0, 0, 0, 0.54)",hover:"rgba(0, 0, 0, 0.08)",hoverOpacity:.08,selected:"rgba(0, 0, 0, 0.14)",disabled:"rgba(0, 0, 0, 0.26)",disabledBackground:"rgba(0, 0, 0, 0.12)"}};t.light=p;var h={text:{primary:d.default.white,secondary:"rgba(255, 255, 255, 0.7)",disabled:"rgba(255, 255, 255, 0.5)",hint:"rgba(255, 255, 255, 0.5)",icon:"rgba(255, 255, 255, 0.5)"},divider:"rgba(255, 255, 255, 0.12)",background:{paper:s.default[800],default:"#303030"},action:{active:d.default.white,hover:"rgba(255, 255, 255, 0.1)",hoverOpacity:.1,selected:"rgba(255, 255, 255, 0.2)",disabled:"rgba(255, 255, 255, 0.3)",disabledBackground:"rgba(255, 255, 255, 0.12)"}};function m(e,t,n,r){e[t]||(e.hasOwnProperty(n)?e[t]=e[n]:"light"===t?e.light=(0,f.lighten)(e.main,r):"dark"===t&&(e.dark=(0,f.darken)(e.main,1.5*r)))}t.dark=h},function(e,t,n){"use strict";var r=n(0);Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){var n="function"==typeof t?t(e):t,r=n.fontFamily,l=void 0===r?'"Roboto", "Helvetica", "Arial", sans-serif':r,u=n.fontSize,s=void 0===u?14:u,c=n.fontWeightLight,d=void 0===c?300:c,f=n.fontWeightRegular,p=void 0===f?400:f,h=n.fontWeightMedium,m=void 0===h?500:h,v=n.htmlFontSize,y=void 0===v?16:v,g=(0,o.default)(n,["fontFamily","fontSize","fontWeightLight","fontWeightRegular","fontWeightMedium","htmlFontSize"]),b=s/14;function x(e){return"".concat(e/y*b,"rem")}return(0,a.default)({pxToRem:x,round:i,fontFamily:l,fontSize:s,fontWeightLight:d,fontWeightRegular:p,fontWeightMedium:m,display4:{fontSize:x(112),fontWeight:d,fontFamily:l,letterSpacing:"-.04em",lineHeight:"".concat(i(128/112),"em"),marginLeft:"-.04em",color:e.text.secondary},display3:{fontSize:x(56),fontWeight:p,fontFamily:l,letterSpacing:"-.02em",lineHeight:"".concat(i(73/56),"em"),marginLeft:"-.02em",color:e.text.secondary},display2:{fontSize:x(45),fontWeight:p,fontFamily:l,lineHeight:"".concat(i(48/45),"em"),marginLeft:"-.02em",color:e.text.secondary},display1:{fontSize:x(34),fontWeight:p,fontFamily:l,lineHeight:"".concat(i(41/34),"em"),color:e.text.secondary},headline:{fontSize:x(24),fontWeight:p,fontFamily:l,lineHeight:"".concat(i(32.5/24),"em"),color:e.text.primary},title:{fontSize:x(21),fontWeight:m,fontFamily:l,lineHeight:"".concat(i(24.5/21),"em"),color:e.text.primary},subheading:{fontSize:x(16),fontWeight:p,fontFamily:l,lineHeight:"".concat(i(1.5),"em"),color:e.text.primary},body2:{fontSize:x(14),fontWeight:m,fontFamily:l,lineHeight:"".concat(i(24/14),"em"),color:e.text.primary},body1:{fontSize:x(14),fontWeight:p,fontFamily:l,lineHeight:"".concat(i(20.5/14),"em"),color:e.text.primary},caption:{fontSize:x(12),fontWeight:p,fontFamily:l,lineHeight:"".concat(i(1.375),"em"),color:e.text.secondary},button:{fontSize:x(14),textTransform:"uppercase",fontWeight:m,fontFamily:l,color:e.text.primary}},g,{clone:!1})};var o=r(n(3)),a=r(n(82));function i(e){return Math.round(1e5*e)/1e5}},function(e,t,n){"use strict";n.r(t),t.default=function(e){var t={},n=1,r=e;return{getState:function(){return r},setState:function(e){r=e;for(var n=Object.keys(t),o=0,a=n.length;o<a;o++)t[n[o]]&&t[n[o]](e)},subscribe:function(e){if("function"!=typeof e)throw new Error("listener must be a function.");var r=n;return t[r]=e,n+=1,r},unsubscribe:function(e){t[e]=void 0}}}},function(e,t){function n(t,r){return e.exports=n=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},n(t,r)}e.exports=n},function(e,t,n){var r,o,a;o=[t,n(2),n(1),n(234),n(59)],void 0===(a="function"==typeof(r=function(e,t,n,r,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Polygon=void 0;var a=l(t),i=l(n);function l(e){return e&&e.__esModule?e:{default:e}}var u=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},s=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),c=["click","mouseout","mouseover"],d=e.Polygon=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),s(t,[{key:"componentDidMount",value:function(){this.polygonPromise=function(){var e={},t=new Promise(function(t,n){e.resolve=t,e.reject=n});return e.then=t.then.bind(t),e.catch=t.catch.bind(t),e.promise=t,e}(),this.renderPolygon()}},{key:"componentDidUpdate",value:function(e){this.props.map===e.map&&(0,r.arePathsEqual)(this.props.paths,e.paths)||(this.polygon&&this.polygon.setMap(null),this.renderPolygon())}},{key:"componentWillUnmount",value:function(){this.polygon&&this.polygon.setMap(null)}},{key:"renderPolygon",value:function(){var e=this,t=this.props,n=t.map,r=t.google,o=t.paths,a=t.strokeColor,i=t.strokeOpacity,l=t.strokeWeight,s=t.fillColor,d=t.fillOpacity,f=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(t,["map","google","paths","strokeColor","strokeOpacity","strokeWeight","fillColor","fillOpacity"]);if(!r)return null;var p=u({map:n,paths:o,strokeColor:a,strokeOpacity:i,strokeWeight:l,fillColor:s,fillOpacity:d},f);this.polygon=new r.maps.Polygon(p),c.forEach(function(t){e.polygon.addListener(t,e.handleEvent(t))}),this.polygonPromise.resolve(this.polygon)}},{key:"getPolygon",value:function(){return this.polygonPromise}},{key:"handleEvent",value:function(e){var t=this;return function(n){var r="on"+(0,o.camelize)(e);t.props[r]&&t.props[r](t.props,t.polygon,n)}}},{key:"render",value:function(){return null}}]),t}(a.default.Component);d.propTypes={paths:i.default.array,strokeColor:i.default.string,strokeOpacity:i.default.number,strokeWeight:i.default.number,fillColor:i.default.string,fillOpacity:i.default.number},c.forEach(function(e){return d.propTypes[e]=i.default.func}),d.defaultProps={name:"Polygon"},e.default=d})?r.apply(t,o):r)||(e.exports=a)},function(e,t,n){var r,o,a;o=[t,n(2),n(1),n(234),n(59)],void 0===(a="function"==typeof(r=function(e,t,n,r,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Polyline=void 0;var a=l(t),i=l(n);function l(e){return e&&e.__esModule?e:{default:e}}var u=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},s=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),c=["click","mouseout","mouseover"],d=e.Polyline=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),s(t,[{key:"componentDidMount",value:function(){this.polylinePromise=function(){var e={},t=new Promise(function(t,n){e.resolve=t,e.reject=n});return e.then=t.then.bind(t),e.catch=t.catch.bind(t),e.promise=t,e}(),this.renderPolyline()}},{key:"componentDidUpdate",value:function(e){this.props.map===e.map&&(0,r.arePathsEqual)(this.props.path,e.path)||(this.polyline&&this.polyline.setMap(null),this.renderPolyline())}},{key:"componentWillUnmount",value:function(){this.polyline&&this.polyline.setMap(null)}},{key:"renderPolyline",value:function(){var e=this,t=this.props,n=t.map,r=t.google,o=t.path,a=t.strokeColor,i=t.strokeOpacity,l=t.strokeWeight,s=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(t,["map","google","path","strokeColor","strokeOpacity","strokeWeight"]);if(!r)return null;var d=u({map:n,path:o,strokeColor:a,strokeOpacity:i,strokeWeight:l},s);this.polyline=new r.maps.Polyline(d),c.forEach(function(t){e.polyline.addListener(t,e.handleEvent(t))}),this.polylinePromise.resolve(this.polyline)}},{key:"getPolyline",value:function(){return this.polylinePromise}},{key:"handleEvent",value:function(e){var t=this;return function(n){var r="on"+(0,o.camelize)(e);t.props[r]&&t.props[r](t.props,t.polyline,n)}}},{key:"render",value:function(){return null}}]),t}(a.default.Component);d.propTypes={path:i.default.array,strokeColor:i.default.string,strokeOpacity:i.default.number,strokeWeight:i.default.number},c.forEach(function(e){return d.propTypes[e]=i.default.func}),d.defaultProps={name:"Polyline"},e.default=d})?r.apply(t,o):r)||(e.exports=a)},function(e,t,n){var r,o,a;o=[t],void 0===(a="function"==typeof(r=function(e){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.makeCancelable=function(e){var t=!1,n=new Promise(function(n,r){e.then(function(e){return t?r({isCanceled:!0}):n(e)}),e.catch(function(e){return r(t?{isCanceled:!0}:e)})});return{promise:n,cancel:function(){t=!0}}}})?r.apply(t,o):r)||(e.exports=a)},function(e,t,n){var r,o,a;o=[t,n(2),n(1),n(59)],void 0===(a="function"==typeof(r=function(e,t,n,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.HeatMap=void 0;var o=i(t),a=i(n);function i(e){return e&&e.__esModule?e:{default:e}}var l=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},u=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),s=["click","mouseover","recenter"],c=e.HeatMap=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),u(t,[{key:"componentDidMount",value:function(){this.heatMapPromise=function(){var e={},t=new Promise(function(t,n){e.resolve=t,e.reject=n});return e.then=t.then.bind(t),e.catch=t.catch.bind(t),e.promise=t,e}(),this.renderHeatMap()}},{key:"componentDidUpdate",value:function(e){this.props.map===e.map&&this.props.position===e.position||this.heatMap&&(this.heatMap.setMap(null),this.renderHeatMap())}},{key:"componentWillUnmount",value:function(){this.heatMap&&this.heatMap.setMap(null)}},{key:"renderHeatMap",value:function(){var e=this,t=this.props,n=t.map,r=t.google,o=t.positions,a=(t.mapCenter,t.icon,t.gradient),i=t.radius,u=void 0===i?20:i,c=t.opacity,d=void 0===c?.2:c,f=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(t,["map","google","positions","mapCenter","icon","gradient","radius","opacity"]);if(!r)return null;var p=o.map(function(e){return new r.maps.LatLng(e.lat,e.lng)}),h=l({map:n,gradient:a,radius:u,opacity:d,data:p},f);this.heatMap=new r.maps.visualization.HeatmapLayer(h),this.heatMap.set("radius",void 0===u?20:u),this.heatMap.set("opacity",void 0===d?.2:d),s.forEach(function(t){e.heatMap.addListener(t,e.handleEvent(t))}),this.heatMapPromise.resolve(this.heatMap)}},{key:"getHeatMap",value:function(){return this.heatMapPromise}},{key:"handleEvent",value:function(e){var t=this;return function(n){var o="on"+(0,r.camelize)(e);t.props[o]&&t.props[o](t.props,t.heatMap,n)}}},{key:"render",value:function(){return null}}]),t}(o.default.Component);c.propTypes={position:a.default.object,map:a.default.object,icon:a.default.string},s.forEach(function(e){return c.propTypes[e]=a.default.func}),c.defaultProps={name:"HeatMap"},e.default=c})?r.apply(t,o):r)||(e.exports=a)},function(e,t,n){"use strict";e.exports=function(e){var t={};return function(n){return t.hasOwnProperty(n)||(t[n]=e.call(this,n)),t[n]}}},function(e,t,n){"use strict";var r=/([A-Z])/g;e.exports=function(e){return e.replace(r,"-$1").toLowerCase()}},function(e,t,n){"use strict";var r=n(512),o=/^ms-/;e.exports=function(e){return r(e).replace(o,"-ms-")}},function(e,t,n){"use strict";
/** @license React v16.4.0
 * react-dom-server.browser.production.min.js
 *
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(84),o=n(138),a=n(2),i=n(83),l=n(137),u=n(513),s=n(511);function c(e){for(var t=arguments.length-1,n="https://reactjs.org/docs/error-decoder.html?invariant="+e,o=0;o<t;o++)n+="&args[]="+encodeURIComponent(arguments[o+1]);r(!1,"Minified React error #"+e+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",n)}var d="function"==typeof Symbol&&Symbol.for,f=d?Symbol.for("react.portal"):60106,p=d?Symbol.for("react.fragment"):60107,h=d?Symbol.for("react.strict_mode"):60108,m=d?Symbol.for("react.profiler"):60114,v=d?Symbol.for("react.provider"):60109,y=d?Symbol.for("react.context"):60110,g=d?Symbol.for("react.async_mode"):60111,b=d?Symbol.for("react.forward_ref"):60112,x=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,w={},_={};function k(e){return!!_.hasOwnProperty(e)||!w.hasOwnProperty(e)&&(x.test(e)?_[e]=!0:(w[e]=!0,!1))}function P(e,t,n,r){if(null===t||void 0===t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}function E(e,t,n,r,o){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t}var O={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(e){O[e]=new E(e,0,!1,e,null)}),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(e){var t=e[0];O[t]=new E(t,1,!1,e[1],null)}),["contentEditable","draggable","spellCheck","value"].forEach(function(e){O[e]=new E(e,2,!1,e.toLowerCase(),null)}),["autoReverse","externalResourcesRequired","preserveAlpha"].forEach(function(e){O[e]=new E(e,2,!1,e,null)}),"allowFullScreen async autoFocus autoPlay controls default defer disabled formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(e){O[e]=new E(e,3,!1,e.toLowerCase(),null)}),["checked","multiple","muted","selected"].forEach(function(e){O[e]=new E(e,3,!0,e.toLowerCase(),null)}),["capture","download"].forEach(function(e){O[e]=new E(e,4,!1,e.toLowerCase(),null)}),["cols","rows","size","span"].forEach(function(e){O[e]=new E(e,6,!1,e.toLowerCase(),null)}),["rowSpan","start"].forEach(function(e){O[e]=new E(e,5,!1,e.toLowerCase(),null)});var C=/[\-:]([a-z])/g;function S(e){return e[1].toUpperCase()}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(e){var t=e.replace(C,S);O[t]=new E(t,1,!1,e,null)}),"xlink:actuate xlink:arcrole xlink:href xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(e){var t=e.replace(C,S);O[t]=new E(t,1,!1,e,"http://www.w3.org/1999/xlink")}),["xml:base","xml:lang","xml:space"].forEach(function(e){var t=e.replace(C,S);O[t]=new E(t,1,!1,e,"http://www.w3.org/XML/1998/namespace")}),O.tabIndex=new E("tabIndex",1,!1,"tabindex",null);var T=/["'&<>]/;function M(e){if("boolean"==typeof e||"number"==typeof e)return""+e;e=""+e;var t=T.exec(e);if(t){var n,r="",o=0;for(n=t.index;n<e.length;n++){switch(e.charCodeAt(n)){case 34:t="&quot;";break;case 38:t="&amp;";break;case 39:t="&#x27;";break;case 60:t="&lt;";break;case 62:t="&gt;";break;default:continue}o!==n&&(r+=e.substring(o,n)),o=n+1,r+=t}e=o!==n?r+e.substring(o,n):r}return e}var j={html:"http://www.w3.org/1999/xhtml",mathml:"http://www.w3.org/1998/Math/MathML",svg:"http://www.w3.org/2000/svg"};function N(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}var L={area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0},R=o({menuitem:!0},L),D={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},A=["Webkit","ms","Moz","O"];Object.keys(D).forEach(function(e){A.forEach(function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),D[t]=D[e]})});var I=a.Children.toArray,F=i.thatReturns("");i.thatReturns("");var z={listing:!0,pre:!0,textarea:!0};function W(e){return"string"==typeof e?e:"function"==typeof e?e.displayName||e.name:null}var B=/^[a-zA-Z][a-zA-Z:_\.\-\d]*$/,U={},H=s(function(e){return u(e)});var V={children:null,dangerouslySetInnerHTML:null,suppressContentEditableWarning:null,suppressHydrationWarning:null};function $(e,t){void 0===e&&c("152",W(t)||"Component")}function q(e,t){function n(n,r){var a=function(e,t){if(e=e.contextTypes){var n,r={};for(n in e)r[n]=t[n];t=r}else t=l;return t}(r,t),i=[],u=!1,s={isMounted:function(){return!1},enqueueForceUpdate:function(){if(null===i)return null},enqueueReplaceState:function(e,t){u=!0,i=[t]},enqueueSetState:function(e,t){if(null===i)return null;i.push(t)}},d=void 0;if(r.prototype&&r.prototype.isReactComponent){if(d=new r(n.props,a,s),"function"==typeof r.getDerivedStateFromProps){var f=r.getDerivedStateFromProps.call(null,n.props,d.state);null!=f&&(d.state=o({},d.state,f))}}else if(null==(d=r(n.props,a,s))||null==d.render)return void $(e=d,r);if(d.props=n.props,d.context=a,d.updater=s,void 0===(s=d.state)&&(d.state=s=null),"function"==typeof d.UNSAFE_componentWillMount||"function"==typeof d.componentWillMount)if("function"==typeof d.componentWillMount&&"function"!=typeof r.getDerivedStateFromProps&&d.componentWillMount(),"function"==typeof d.UNSAFE_componentWillMount&&"function"!=typeof r.getDerivedStateFromProps&&d.UNSAFE_componentWillMount(),i.length){s=i;var p=u;if(i=null,u=!1,p&&1===s.length)d.state=s[0];else{f=p?s[0]:d.state;var h=!0;for(p=p?1:0;p<s.length;p++){var m=s[p];null!=(m="function"==typeof m?m.call(d,f,n.props,a):m)&&(h?(h=!1,f=o({},f,m)):o(f,m))}d.state=f}}else i=null;if($(e=d.render(),r),n=void 0,"function"==typeof d.getChildContext&&"object"==typeof(a=r.childContextTypes))for(var v in n=d.getChildContext())v in a||c("108",W(r)||"Unknown",v);n&&(t=o({},t,n))}for(;a.isValidElement(e);){var r=e,i=r.type;if("function"!=typeof i)break;n(r,i)}return{child:e,context:t}}var K=function(){function e(t,n){if(!(this instanceof e))throw new TypeError("Cannot call a class as a function");a.isValidElement(t)?t.type!==p?t=[t]:(t=t.props.children,t=a.isValidElement(t)?[t]:I(t)):t=I(t),this.stack=[{type:null,domNamespace:j.html,children:t,childIndex:0,context:l,footer:""}],this.exhausted=!1,this.currentSelectValue=null,this.previousWasTextNode=!1,this.makeStaticMarkup=n,this.providerStack=[],this.providerIndex=-1}return e.prototype.pushProvider=function(e){this.providerIndex+=1,this.providerStack[this.providerIndex]=e,e.type._context._currentValue=e.props.value},e.prototype.popProvider=function(e){this.providerStack[this.providerIndex]=null,--this.providerIndex,(e=e.type._context)._currentValue=0>this.providerIndex?e._defaultValue:this.providerStack[this.providerIndex].props.value},e.prototype.read=function(e){if(this.exhausted)return null;for(var t="";t.length<e;){if(0===this.stack.length){this.exhausted=!0;break}var n=this.stack[this.stack.length-1];if(n.childIndex>=n.children.length){var r=n.footer;t+=r,""!==r&&(this.previousWasTextNode=!1),this.stack.pop(),"select"===n.type?this.currentSelectValue=null:null!=n.type&&null!=n.type.type&&n.type.type.$$typeof===v&&this.popProvider(n.type)}else r=n.children[n.childIndex++],t+=this.render(r,n.context,n.domNamespace)}return t},e.prototype.render=function(e,t,n){if("string"==typeof e||"number"==typeof e)return""===(n=""+e)?"":this.makeStaticMarkup?M(n):this.previousWasTextNode?"\x3c!-- --\x3e"+M(n):(this.previousWasTextNode=!0,M(n));if(e=(t=q(e,t)).child,t=t.context,null===e||!1===e)return"";if(!a.isValidElement(e)){if(null!=e&&null!=e.$$typeof){var r=e.$$typeof;r===f&&c("257"),c("258",r.toString())}return e=I(e),this.stack.push({type:null,domNamespace:n,children:e,childIndex:0,context:t,footer:""}),""}if("string"==typeof(r=e.type))return this.renderDOM(e,t,n);switch(r){case h:case g:case m:case p:return e=I(e.props.children),this.stack.push({type:null,domNamespace:n,children:e,childIndex:0,context:t,footer:""}),""}if("object"==typeof r&&null!==r)switch(r.$$typeof){case b:return e=I(r.render(e.props,e.ref)),this.stack.push({type:null,domNamespace:n,children:e,childIndex:0,context:t,footer:""}),"";case v:return n={type:e,domNamespace:n,children:r=I(e.props.children),childIndex:0,context:t,footer:""},this.pushProvider(e),this.stack.push(n),"";case y:return r=I(e.props.children(e.type._currentValue)),this.stack.push({type:e,domNamespace:n,children:r,childIndex:0,context:t,footer:""}),""}c("130",null==r?r:typeof r,"")},e.prototype.renderDOM=function(e,t,n){var r=e.type.toLowerCase();n===j.html&&N(r),U.hasOwnProperty(r)||(B.test(r)||c("65",r),U[r]=!0);var i=e.props;if("input"===r)i=o({type:void 0},i,{defaultChecked:void 0,defaultValue:void 0,value:null!=i.value?i.value:i.defaultValue,checked:null!=i.checked?i.checked:i.defaultChecked});else if("textarea"===r){var l=i.value;if(null==l){l=i.defaultValue;var u=i.children;null!=u&&(null!=l&&c("92"),Array.isArray(u)&&(1>=u.length||c("93"),u=u[0]),l=""+u),null==l&&(l="")}i=o({},i,{value:void 0,children:""+l})}else if("select"===r)this.currentSelectValue=null!=i.value?i.value:i.defaultValue,i=o({},i,{value:void 0});else if("option"===r){u=this.currentSelectValue;var s=function(e){var t="";return a.Children.forEach(e,function(e){null==e||"string"!=typeof e&&"number"!=typeof e||(t+=e)}),t}(i.children);if(null!=u){var d=null!=i.value?i.value+"":s;if(l=!1,Array.isArray(u)){for(var f=0;f<u.length;f++)if(""+u[f]===d){l=!0;break}}else l=""+u===d;i=o({selected:void 0,children:void 0},i,{selected:l,children:s})}}for(g in(l=i)&&(R[r]&&(null!=l.children||null!=l.dangerouslySetInnerHTML)&&c("137",r,F()),null!=l.dangerouslySetInnerHTML&&(null!=l.children&&c("60"),"object"==typeof l.dangerouslySetInnerHTML&&"__html"in l.dangerouslySetInnerHTML||c("61")),null!=l.style&&"object"!=typeof l.style&&c("62",F())),l=i,u=this.makeStaticMarkup,s=1===this.stack.length,d="<"+e.type,l)if(l.hasOwnProperty(g)){var p=l[g];if(null!=p){if("style"===g){f=void 0;var h="",m="";for(f in p)if(p.hasOwnProperty(f)){var v=0===f.indexOf("--"),y=p[f];null!=y&&(h+=m+H(f)+":",m=f,h+=v=null==y||"boolean"==typeof y||""===y?"":v||"number"!=typeof y||0===y||D.hasOwnProperty(m)&&D[m]?(""+y).trim():y+"px",m=";")}p=h||null}f=null;e:if(v=r,y=l,-1===v.indexOf("-"))v="string"==typeof y.is;else switch(v){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":v=!1;break e;default:v=!0}v?V.hasOwnProperty(g)||(f=k(f=g)&&null!=p?f+'="'+M(p)+'"':""):(v=g,f=p,p=O.hasOwnProperty(v)?O[v]:null,(y="style"!==v)&&(y=null!==p?0===p.type:2<v.length&&("o"===v[0]||"O"===v[0])&&("n"===v[1]||"N"===v[1])),y||P(v,f,p,!1)?f="":null!==p?(v=p.attributeName,f=3===(p=p.type)||4===p&&!0===f?v+'=""':v+'="'+M(f)+'"'):f=v+'="'+M(f)+'"'),f&&(d+=" "+f)}}u||s&&(d+=' data-reactroot=""');var g=d;l="",L.hasOwnProperty(r)?g+="/>":(g+=">",l="</"+e.type+">");e:{if(null!=(u=i.dangerouslySetInnerHTML)){if(null!=u.__html){u=u.__html;break e}}else if("string"==typeof(u=i.children)||"number"==typeof u){u=M(u);break e}u=null}return null!=u?(i=[],z[r]&&"\n"===u.charAt(0)&&(g+="\n"),g+=u):i=I(i.children),e=e.type,n=null==n||"http://www.w3.org/1999/xhtml"===n?N(e):"http://www.w3.org/2000/svg"===n&&"foreignObject"===e?"http://www.w3.org/1999/xhtml":n,this.stack.push({domNamespace:n,type:r,children:i,childIndex:0,context:t,footer:l}),this.previousWasTextNode=!1,g},e}(),G={renderToString:function(e){return new K(e,!1).read(1/0)},renderToStaticMarkup:function(e){return new K(e,!0).read(1/0)},renderToNodeStream:function(){c("207")},renderToStaticNodeStream:function(){c("208")},version:"16.4.0"},X={default:G},Y=X&&G||X;e.exports=Y.default?Y.default:Y},function(e,t,n){"use strict";e.exports=n(514)},function(e,t,n){var r,o,a;o=[t,n(2),n(1),n(15),n(515)],void 0===(a="function"==typeof(r=function(e,t,n,r,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.InfoWindow=void 0;var a=u(t),i=u(n),l=(u(r),u(o));function u(e){return e&&e.__esModule?e:{default:e}}var s=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},c=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),d=e.InfoWindow=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),c(t,[{key:"componentDidMount",value:function(){this.renderInfoWindow()}},{key:"componentDidUpdate",value:function(e){var t=this.props,n=t.google,r=t.map;n&&r&&(r!==e.map&&this.renderInfoWindow(),this.props.position!==e.position&&this.updatePosition(),this.props.children!==e.children&&this.updateContent(),this.props.visible===e.visible&&this.props.marker===e.marker&&this.props.position===e.position||(this.props.visible?this.openWindow():this.closeWindow()))}},{key:"renderInfoWindow",value:function(){var e=this.props,t=(e.map,e.google),n=(e.mapCenter,function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(e,["map","google","mapCenter"]));if(t&&t.maps){var r=this.infowindow=new t.maps.InfoWindow(s({content:""},n));t.maps.event.addListener(r,"closeclick",this.onClose.bind(this)),t.maps.event.addListener(r,"domready",this.onOpen.bind(this))}}},{key:"onOpen",value:function(){this.props.onOpen&&this.props.onOpen()}},{key:"onClose",value:function(){this.props.onClose&&this.props.onClose()}},{key:"openWindow",value:function(){this.infowindow.open(this.props.map,this.props.marker)}},{key:"updatePosition",value:function(){var e=this.props.position;e instanceof google.maps.LatLng||(e=e&&new google.maps.LatLng(e.lat,e.lng)),this.infowindow.setPosition(e)}},{key:"updateContent",value:function(){var e=this.renderChildren();this.infowindow.setContent(e)}},{key:"closeWindow",value:function(){this.infowindow.close()}},{key:"renderChildren",value:function(){var e=this.props.children;return l.default.renderToString(e)}},{key:"render",value:function(){return null}}]),t}(a.default.Component);d.propTypes={children:i.default.element.isRequired,map:i.default.object,marker:i.default.object,position:i.default.object,visible:i.default.bool,onClose:i.default.func,onOpen:i.default.func},d.defaultProps={visible:!1},e.default=d})?r.apply(t,o):r)||(e.exports=a)},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t,n){"use strict";var r=n(83),o=n(84),a=n(517);e.exports=function(){function e(e,t,n,r,i,l){l!==a&&o(!1,"Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types")}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t};return n.checkPropTypes=r,n.PropTypes=n,n}},function(e,t,n){var r,o,a;o=[t,n(2),n(1),n(59)],void 0===(a="function"==typeof(r=function(e,t,n,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Marker=void 0;var o=i(t),a=i(n);function i(e){return e&&e.__esModule?e:{default:e}}var l=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},u=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),s=["click","dblclick","dragend","mousedown","mouseout","mouseover","mouseup","recenter"],c=e.Marker=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),u(t,[{key:"componentDidMount",value:function(){this.markerPromise=function(){var e={},t=new Promise(function(t,n){e.resolve=t,e.reject=n});return e.then=t.then.bind(t),e.catch=t.catch.bind(t),e.promise=t,e}(),this.renderMarker()}},{key:"componentDidUpdate",value:function(e){this.props.map===e.map&&this.props.position===e.position&&this.props.icon===e.icon||(this.marker&&this.marker.setMap(null),this.renderMarker())}},{key:"componentWillUnmount",value:function(){this.marker&&this.marker.setMap(null)}},{key:"renderMarker",value:function(){var e=this,t=this.props,n=t.map,r=t.google,o=t.position,a=t.mapCenter,i=t.icon,u=t.label,c=t.draggable,d=t.title,f=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(t,["map","google","position","mapCenter","icon","label","draggable","title"]);if(!r)return null;var p=o||a;p instanceof r.maps.LatLng||(p=new r.maps.LatLng(p.lat,p.lng));var h=l({map:n,position:p,icon:i,label:u,title:d,draggable:c},f);this.marker=new r.maps.Marker(h),s.forEach(function(t){e.marker.addListener(t,e.handleEvent(t))}),this.markerPromise.resolve(this.marker)}},{key:"getMarker",value:function(){return this.markerPromise}},{key:"handleEvent",value:function(e){var t=this;return function(n){var o="on"+(0,r.camelize)(e);t.props[o]&&t.props[o](t.props,t.marker,n)}}},{key:"render",value:function(){return null}}]),t}(o.default.Component);c.propTypes={position:a.default.object,map:a.default.object},s.forEach(function(e){return c.propTypes[e]=a.default.func}),c.defaultProps={name:"Marker"},e.default=c})?r.apply(t,o):r)||(e.exports=a)},function(e,t,n){var r,o,a;o=[t],void 0===(a="function"==typeof(r=function(e){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var t=e.GoogleApi=function(e){if(!(e=e||{}).hasOwnProperty("apiKey"))throw new Error("You must pass an apiKey to use GoogleApi");var t=e.apiKey,n=e.libraries||["places"],r=e.client,o=e.url||"https://maps.googleapis.com/maps/api/js",a=e.version||"3.31",i=("undefined"!=typeof window&&window.google,e.language),l=e.region||null;return function(){var e=o,u={key:t,callback:"CALLBACK_NAME",libraries:n.join(","),client:r,v:a,channel:null,language:i,region:l},s=Object.keys(u).filter(function(e){return!!u[e]}).map(function(e){return e+"="+u[e]}).join("&");return e+"?"+s}()};e.default=t})?r.apply(t,o):r)||(e.exports=a)},function(e,t,n){(function(n){var r,o,a,i;i=function(e){"use strict";var t="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};e.exports="object"===("undefined"==typeof self?"undefined":t(self))&&self.self===self&&self||"object"===(void 0===n?"undefined":t(n))&&n.global===n&&n||void 0},o=[e],void 0===(a="function"==typeof(r=i)?r.apply(t,o):r)||(e.exports=a)}).call(this,n(37))},function(e,t,n){var r,o,a;o=[t,n(521)],void 0===(a="function"==typeof(r=function(e,t){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n,r=0,o=void 0!==t&&t._scriptMap||new Map,a=e.ScriptCache=((n=t)._scriptMap=n._scriptMap||o,function(e){var a={_onLoad:function(e){return function(t){var n=!0,r=o.get(e);return r&&r.promise.then(function(){return n&&(r.error?t(r.error):t(null,r)),r}),function(){n=!1}}},_scriptTag:function(e,a){if(!o.has(e)){if("undefined"==typeof document)return null;var i=document.createElement("script"),l=new Promise(function(l,u){var s=document.getElementsByTagName("body")[0];i.type="text/javascript",i.async=!1;var c="loaderCB"+r+++Date.now(),d=function(t){return function(n){var r=o.get(e);"loaded"===t?(r.resolved=!0,l(a)):"error"===t&&(r.errored=!0,u(n)),r.loaded=!0,f()}},f=function(){n[c]&&"function"==typeof n[c]&&(n[c]=null,delete n[c])};return i.onload=d("loaded"),i.onerror=d("error"),i.onreadystatechange=function(){d(i.readyState)},a.match(/callback=CALLBACK_NAME/)?(a=a.replace(/(callback=)[^\&]+/,"$1"+c),t[c]=i.onload):i.addEventListener("load",i.onload),i.addEventListener("error",i.onerror),i.src=a,s.appendChild(i),i}),u={loaded:!1,error:!1,promise:l,tag:i};o.set(e,u)}return o.get(e)}};return Object.keys(e).forEach(function(n){var r=e[n],o=t._scriptMap.has(n)?t._scriptMap.get(n).tag:a._scriptTag(n,r);a[n]={tag:o,onLoad:a._onLoad(n)}}),a});e.default=a})?r.apply(t,o):r)||(e.exports=a)},function(e,t,n){var r,o,a;o=[t,n(2),n(15),n(522),n(520)],void 0===(a="function"==typeof(r=function(e,t,n,r,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.wrapper=void 0;var a=l(t),i=(l(n),l(o));function l(e){return e&&e.__esModule?e:{default:e}}var u=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),s=function(e){return JSON.stringify(e)},c=function(e){var t=(e=e||{}).apiKey,n=e.libraries||["places"],o=e.version||"3",a=e.language||"en",l=e.url,u=e.client;return(0,r.ScriptCache)({google:(0,i.default)({apiKey:t,language:a,libraries:n,version:o,url:l,client:u})})},d=function(e){return a.default.createElement("div",null,"Loading...")},f=e.wrapper=function(e){return function(t){var n=function(n){function r(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,r);var o=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(r.__proto__||Object.getPrototypeOf(r)).call(this,t,n)),a="function"==typeof e?e(t):e;return o.initialize(a),o.state={loaded:!1,map:null,google:null,options:a},o}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(r,n),u(r,[{key:"componentWillReceiveProps",value:function(t){if("function"==typeof e){var n,r,o=this.state.options,a="function"==typeof e?e(t):e;(n=a)!==(r=o)&&s(n)!==s(r)&&(this.initialize(a),this.setState({options:a,loaded:!1,google:null}))}}},{key:"initialize",value:function(e){this.unregisterLoadHandler&&(this.unregisterLoadHandler(),this.unregisterLoadHandler=null);var t=e.createCache||c;this.scriptCache=t(e),this.unregisterLoadHandler=this.scriptCache.google.onLoad(this.onLoad.bind(this)),this.LoadingContainer=e.LoadingContainer||d}},{key:"onLoad",value:function(e,t){this._gapi=window.google,this.setState({loaded:!0,google:this._gapi})}},{key:"render",value:function(){var e=this.LoadingContainer;if(!this.state.loaded)return a.default.createElement(e,null);var n=Object.assign({},this.props,{loaded:this.state.loaded,google:window.google});return a.default.createElement("div",null,a.default.createElement(t,n),a.default.createElement("div",{ref:"map"}))}}]),r}(a.default.Component);return n}};e.default=f})?r.apply(t,o):r)||(e.exports=a)},function(e,t,n){var r,o,a;o=[t,n(523),n(519),n(516),n(510),n(507),n(508),n(2),n(1),n(15),n(59),n(509)],void 0===(a="function"==typeof(r=function(e,t,n,r,o,a,i,l,u,s,c,d){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Map=e.Polyline=e.Polygon=e.HeatMap=e.InfoWindow=e.Marker=e.GoogleApiWrapper=void 0,Object.defineProperty(e,"GoogleApiWrapper",{enumerable:!0,get:function(){return t.wrapper}}),Object.defineProperty(e,"Marker",{enumerable:!0,get:function(){return n.Marker}}),Object.defineProperty(e,"InfoWindow",{enumerable:!0,get:function(){return r.InfoWindow}}),Object.defineProperty(e,"HeatMap",{enumerable:!0,get:function(){return o.HeatMap}}),Object.defineProperty(e,"Polygon",{enumerable:!0,get:function(){return a.Polygon}}),Object.defineProperty(e,"Polyline",{enumerable:!0,get:function(){return i.Polyline}});var f=m(l),p=m(u),h=m(s);function m(e){return e&&e.__esModule?e:{default:e}}var v=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),y={container:{position:"absolute",width:"100%",height:"100%"},map:{position:"absolute",left:0,right:0,bottom:0,top:0}},g=["ready","click","dragend","recenter","bounds_changed","center_changed","dblclick","dragstart","heading_change","idle","maptypeid_changed","mousemove","mouseout","mouseover","projection_changed","resize","rightclick","tilesloaded","tilt_changed","zoom_changed"],b=e.Map=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));if(!e.hasOwnProperty("google"))throw new Error("You must include a `google` prop");return n.listeners={},n.state={currentLocation:{lat:n.props.initialCenter.lat,lng:n.props.initialCenter.lng}},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),v(t,[{key:"componentDidMount",value:function(){var e=this;this.props.centerAroundCurrentLocation&&navigator&&navigator.geolocation&&(this.geoPromise=(0,d.makeCancelable)(new Promise(function(e,t){navigator.geolocation.getCurrentPosition(e,t)})),this.geoPromise.promise.then(function(t){var n=t.coords;e.setState({currentLocation:{lat:n.latitude,lng:n.longitude}})}).catch(function(e){return e})),this.loadMap()}},{key:"componentDidUpdate",value:function(e,t){e.google!==this.props.google&&this.loadMap(),this.props.visible!==e.visible&&this.restyleMap(),this.props.zoom!==e.zoom&&this.map.setZoom(this.props.zoom),this.props.center!==e.center&&this.setState({currentLocation:this.props.center}),t.currentLocation!==this.state.currentLocation&&this.recenterMap(),this.props.bounds!==e.bounds&&this.map.fitBounds(this.props.bounds)}},{key:"componentWillUnmount",value:function(){var e=this,t=this.props.google;this.geoPromise&&this.geoPromise.cancel(),Object.keys(this.listeners).forEach(function(n){t.maps.event.removeListener(e.listeners[n])})}},{key:"loadMap",value:function(){var e=this;if(this.props&&this.props.google){var t=this.props.google,n=t.maps,r=this.refs.map,o=h.default.findDOMNode(r),a=this.state.currentLocation,i=new n.LatLng(a.lat,a.lng),l=this.props.google.maps.MapTypeId||{},u=String(this.props.mapType).toUpperCase(),s=Object.assign({},{mapTypeId:l[u],center:i,zoom:this.props.zoom,maxZoom:this.props.maxZoom,minZoom:this.props.minZoom,clickableIcons:!!this.props.clickableIcons,disableDefaultUI:this.props.disableDefaultUI,zoomControl:this.props.zoomControl,mapTypeControl:this.props.mapTypeControl,scaleControl:this.props.scaleControl,streetViewControl:this.props.streetViewControl,panControl:this.props.panControl,rotateControl:this.props.rotateControl,fullscreenControl:this.props.fullscreenControl,scrollwheel:this.props.scrollwheel,draggable:this.props.draggable,keyboardShortcuts:this.props.keyboardShortcuts,disableDoubleClickZoom:this.props.disableDoubleClickZoom,noClear:this.props.noClear,styles:this.props.styles,gestureHandling:this.props.gestureHandling});Object.keys(s).forEach(function(e){null===s[e]&&delete s[e]}),this.map=new n.Map(o,s),g.forEach(function(t){e.listeners[t]=e.map.addListener(t,e.handleEvent(t))}),n.event.trigger(this.map,"ready"),this.forceUpdate()}}},{key:"handleEvent",value:function(e){var t=this,n=void 0,r="on"+(0,c.camelize)(e);return function(e){n&&(clearTimeout(n),n=null),n=setTimeout(function(){t.props[r]&&t.props[r](t.props,t.map,e)},0)}}},{key:"recenterMap",value:function(){var e=this.map,t=this.props.google;if(t){var n=t.maps;if(e){var r=this.state.currentLocation;r instanceof t.maps.LatLng||(r=new t.maps.LatLng(r.lat,r.lng)),e.setCenter(r),n.event.trigger(e,"recenter")}}}},{key:"restyleMap",value:function(){if(this.map){var e=this.props.google;e.maps.event.trigger(this.map,"resize")}}},{key:"renderChildren",value:function(){var e=this,t=this.props.children;if(t)return f.default.Children.map(t,function(t){if(t)return f.default.cloneElement(t,{map:e.map,google:e.props.google,mapCenter:e.state.currentLocation})})}},{key:"render",value:function(){var e=Object.assign({},y.map,this.props.style,{display:this.props.visible?"inherit":"none"}),t=Object.assign({},y.container,this.props.containerStyle);return f.default.createElement("div",{style:t,className:this.props.className},f.default.createElement("div",{style:e,ref:"map"},"Loading map..."),this.renderChildren())}}]),t}(f.default.Component);b.propTypes={google:p.default.object,zoom:p.default.number,centerAroundCurrentLocation:p.default.bool,center:p.default.object,initialCenter:p.default.object,className:p.default.string,style:p.default.object,containerStyle:p.default.object,visible:p.default.bool,mapType:p.default.string,maxZoom:p.default.number,minZoom:p.default.number,clickableIcons:p.default.bool,disableDefaultUI:p.default.bool,zoomControl:p.default.bool,mapTypeControl:p.default.bool,scaleControl:p.default.bool,streetViewControl:p.default.bool,panControl:p.default.bool,rotateControl:p.default.bool,fullscreenControl:p.default.bool,scrollwheel:p.default.bool,draggable:p.default.bool,keyboardShortcuts:p.default.bool,disableDoubleClickZoom:p.default.bool,noClear:p.default.bool,styles:p.default.array,gestureHandling:p.default.string,bounds:p.default.object},g.forEach(function(e){return b.propTypes[(0,c.camelize)(e)]=p.default.func}),b.defaultProps={zoom:14,initialCenter:{lat:37.774929,lng:-122.419416},center:{},centerAroundCurrentLocation:!1,style:{},containerStyle:{},visible:!0},e.default=b})?r.apply(t,o):r)||(e.exports=a)},function(e,t,n){"use strict";var r=new RegExp("%[a-f0-9]{2}","gi"),o=new RegExp("(%[a-f0-9]{2})+","gi");function a(e,t){try{return decodeURIComponent(e.join(""))}catch(e){}if(1===e.length)return e;t=t||1;var n=e.slice(0,t),r=e.slice(t);return Array.prototype.concat.call([],a(n),a(r))}function i(e){try{return decodeURIComponent(e)}catch(o){for(var t=e.match(r),n=1;n<t.length;n++)t=(e=a(t,n).join("")).match(r);return e}}e.exports=function(e){if("string"!=typeof e)throw new TypeError("Expected `encodedURI` to be of type `string`, got `"+typeof e+"`");try{return e=e.replace(/\+/g," "),decodeURIComponent(e)}catch(t){return function(e){for(var t={"%FE%FF":"��","%FF%FE":"��"},n=o.exec(e);n;){try{t[n[0]]=decodeURIComponent(n[0])}catch(e){var r=i(n[0]);r!==n[0]&&(t[n[0]]=r)}n=o.exec(e)}t["%C2"]="�";for(var a=Object.keys(t),l=0;l<a.length;l++){var u=a[l];e=e.replace(new RegExp(u,"g"),t[u])}return e}(e)}}},function(e,t,n){"use strict";e.exports=(e=>encodeURIComponent(e).replace(/[!'()*]/g,e=>`%${e.charCodeAt(0).toString(16).toUpperCase()}`))},function(e,t,n){"use strict";const r=n(526),o=n(525);function a(e,t){return t.encode?t.strict?r(e):encodeURIComponent(e):e}function i(e,t){return t.decode?o(e):e}function l(e){const t=e.indexOf("?");return-1===t?"":e.slice(t+1)}function u(e,t){const n=function(e){let t;switch(e.arrayFormat){case"index":return(e,n,r)=>{t=/\[(\d*)\]$/.exec(e),e=e.replace(/\[\d*\]$/,""),t?(void 0===r[e]&&(r[e]={}),r[e][t[1]]=n):r[e]=n};case"bracket":return(e,n,r)=>{t=/(\[\])$/.exec(e),e=e.replace(/\[\]$/,""),t?void 0!==r[e]?r[e]=[].concat(r[e],n):r[e]=[n]:r[e]=n};default:return(e,t,n)=>{void 0!==n[e]?n[e]=[].concat(n[e],t):n[e]=t}}}(t=Object.assign({decode:!0,arrayFormat:"none"},t)),r=Object.create(null);if("string"!=typeof e)return r;if(!(e=e.trim().replace(/^[?#&]/,"")))return r;for(const o of e.split("&")){let[e,a]=o.replace(/\+/g," ").split("=");a=void 0===a?null:i(a,t),n(i(e,t),a,r)}return Object.keys(r).sort().reduce((e,t)=>{const n=r[t];return Boolean(n)&&"object"==typeof n&&!Array.isArray(n)?e[t]=function e(t){return Array.isArray(t)?t.sort():"object"==typeof t?e(Object.keys(t)).sort((e,t)=>Number(e)-Number(t)).map(e=>t[e]):t}(n):e[t]=n,e},Object.create(null))}t.extract=l,t.parse=u,t.stringify=((e,t)=>{!1===(t=Object.assign({encode:!0,strict:!0,arrayFormat:"none"},t)).sort&&(t.sort=(()=>{}));const n=function(e){switch(e.arrayFormat){case"index":return(t,n,r)=>null===n?[a(t,e),"[",r,"]"].join(""):[a(t,e),"[",a(r,e),"]=",a(n,e)].join("");case"bracket":return(t,n)=>null===n?[a(t,e),"[]"].join(""):[a(t,e),"[]=",a(n,e)].join("");default:return(t,n)=>null===n?a(t,e):[a(t,e),"=",a(n,e)].join("")}}(t);return e?Object.keys(e).sort(t.sort).map(r=>{const o=e[r];if(void 0===o)return"";if(null===o)return a(r,t);if(Array.isArray(o)){const e=[];for(const t of o.slice())void 0!==t&&e.push(n(r,t,e.length));return e.join("&")}return a(r,t)+"="+a(o,t)}).filter(e=>e.length>0).join("&"):""}),t.parseUrl=((e,t)=>({url:e.split("?")[0]||"",query:u(l(e),t)}))},function(e,t){var n,r,o=e.exports={};function a(){throw new Error("setTimeout has not been defined")}function i(){throw new Error("clearTimeout has not been defined")}function l(e){if(n===setTimeout)return setTimeout(e,0);if((n===a||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:a}catch(e){n=a}try{r="function"==typeof clearTimeout?clearTimeout:i}catch(e){r=i}}();var u,s=[],c=!1,d=-1;function f(){c&&u&&(c=!1,u.length?s=u.concat(s):d=-1,s.length&&p())}function p(){if(!c){var e=l(f);c=!0;for(var t=s.length;t;){for(u=s,s=[];++d<t;)u&&u[d].run();d=-1,t=s.length}u=null,c=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===i||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function h(e,t){this.fun=e,this.array=t}function m(){}o.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];s.push(new h(e,t)),1!==s.length||c||l(p)},h.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=m,o.addListener=m,o.once=m,o.off=m,o.removeListener=m,o.removeAllListeners=m,o.emit=m,o.prependListener=m,o.prependOnceListener=m,o.listeners=function(e){return[]},o.binding=function(e){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(e){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(e,t,n){"use strict";(function(e){Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(2),a=v(o),i=(v(n(527)),n(524)),l=v(n(233)),u=n(17),s=(v(n(30)),v(n(1)),v(n(18))),c=v(n(458)),d=v(n(397)),f=v(n(263)),p=(v(n(261)),v(n(260))),h=v(n(34)),m=(n(115),v(n(62)));function v(e){return e&&e.__esModule?e:{default:e}}function y(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var g=(0,u.createMuiTheme)({palette:{type:"light"}}),b=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return n.updateLocation=function(e,t,r){r=r||void 0,"depar"==e?t?r?n.setState({deparLat:t.lat,deparLng:t.lng,deparAddr:r}):(n.geocodeLatLng("deparAddr",t),n.setState({deparLat:t.lat,deparLng:t.lng})):n.setState({deparLat:void 0,deparLng:void 0,deparAddr:void 0}):"dest"==e?t?r?n.setState({destLat:t.lat,destLng:t.lng,destAddr:r}):(n.geocodeLatLng("destAddr",t),n.setState({destLat:t.lat,destLng:t.lng})):n.setState({destLat:void 0,destLng:void 0,destAddr:void 0}):console.log("[Err] Undefined tag/place")},n.searchFare=function(){if(n.state.deparLat&&n.state.deparLng&&n.state.destLat&&n.state.destLng){n.setState({loading:!0});var e=n.state.deparLat,t=n.state.deparLng,r=n.state.destLat,o=n.state.destLng;fetch("https://lyber-server.herokuapp.com/api/estimate"+("?depar_lat="+e+"&depar_lng="+t+"&dest_lat="+r+"&dest_lng="+o),{method:"GET"}).then(function(e){return e.json()}).then(function(e){n.setState({estData:e.prices,loading:!1})})}else alert("Please set both departure address and destination address.")},n.state=(y(e={deparLat:void 0,deparLng:void 0,deparAddr:void 0,destLat:void 0,destLng:void 0},"deparAddr",void 0),y(e,"estData",void 0),y(e,"loading",!1),y(e,"userProfile",void 0),e),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.Component),r(t,[{key:"geocodeLatLng",value:function(e,t){(new this.props.google.maps.Geocoder).geocode({location:t},function(t,n){"OK"===n?this.setState(y({},e,t[0].formatted_address)):console.log("Failed to retrieve information")}.bind(this))}},{key:"setCurrentLocation",value:function(){var e=this;return navigator.geolocation?new Promise(function(e,t){navigator.geolocation.getCurrentPosition(e,t)}).then(function(t){return e.updateLocation("depar",{lat:t.coords.latitude,lng:t.coords.longitude}),t},function(e){}):""}},{key:"componentDidUpdate",value:function(e,t){this.state.deparLat||this.state.deparLng||this.state.destLat||this.state.destLng}},{key:"componentDidMount",value:function(){}},{key:"render",value:function(){var e=this.props.classes;return a.default.createElement("div",{className:"appContainer"},a.default.createElement(l.default,{theme:g},a.default.createElement(c.default,{disableGutters:"true"}),this.state.userProfile&&a.default.createElement(s.default,{variant:"body1",color:"inherit",className:e.flex},"Hello, ",this.state.userProfile.first_name," ",this.state.userProfile.last_name),a.default.createElement("div",{className:e.wrapper},a.default.createElement(h.default,{container:!0,direction:"row",className:e.container},a.default.createElement(d.default,{google:this.props.google,deparLat:this.state.deparLat,deparLng:this.state.deparLng,destLat:this.state.destLat,destLng:this.state.destLng,deparViewPort:this.state.deparPlace?this.state.deparPlace.geometry.viewport:void 0,destViewPort:this.state.destPlac?this.state.destPlace.geometry.viewport:void 0,updateLocation:this.updateLocation}),a.default.createElement("div",{className:e.padding}),a.default.createElement(f.default,{className:e.inputField,google:this.props.google,updateLocation:this.updateLocation,handleCurrentLocation:this.setCurrentLocation.bind(this),handleSearch:this.searchFare.bind(this),deparAddr:this.state.deparAddr,destAddr:this.state.destAddr}),this.state.loading?a.default.createElement(h.default,{item:!0,style:{width:"100%"}},a.default.createElement(m.default,null)):a.default.createElement(p.default,{estData:this.state.estData,deparLat:this.state.deparLat,deparLng:this.state.deparLng,destLat:this.state.destLat,destLng:this.state.destLng,deparAddr:this.state.deparAddr,destAddr:this.state.destAddr})))))}}]),t}(),x=void 0;x=e.env.googleToken?e.env.googleToken:n(238).googleToken,t.default=(0,i.GoogleApiWrapper)({apiKey:x})((0,u.withStyles)(function(e){return{wrapper:{height:"100vh",display:"flex",justifyContent:"center",alignItems:"center",alignContent:"center",marginTop:"10px"},container:{height:"100%",width:"90vw",alignItems:"flex-start",alignContent:"flex-start",justifyContent:"flex-start"},padding:{height:"15px",width:"100%"}}})(b))}).call(this,n(528))},function(e,t){e.exports=function(e){var t="undefined"!=typeof window&&window.location;if(!t)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var n=t.protocol+"//"+t.host,r=n+t.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(e,t){var o,a=t.trim().replace(/^"(.*)"$/,function(e,t){return t}).replace(/^'(.*)'$/,function(e,t){return t});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(a)?e:(o=0===a.indexOf("//")?a:0===a.indexOf("/")?n+a:r+a.replace(/^\.\//,""),"url("+JSON.stringify(o)+")")})}},function(e,t,n){var r,o,a={},i=(r=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===o&&(o=r.apply(this,arguments)),o}),l=function(e){var t={};return function(e){if("function"==typeof e)return e();if(void 0===t[e]){var n=function(e){return document.querySelector(e)}.call(this,e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}}(),u=null,s=0,c=[],d=n(530);function f(e,t){for(var n=0;n<e.length;n++){var r=e[n],o=a[r.id];if(o){o.refs++;for(var i=0;i<o.parts.length;i++)o.parts[i](r.parts[i]);for(;i<r.parts.length;i++)o.parts.push(g(r.parts[i],t))}else{var l=[];for(i=0;i<r.parts.length;i++)l.push(g(r.parts[i],t));a[r.id]={id:r.id,refs:1,parts:l}}}}function p(e,t){for(var n=[],r={},o=0;o<e.length;o++){var a=e[o],i=t.base?a[0]+t.base:a[0],l={css:a[1],media:a[2],sourceMap:a[3]};r[i]?r[i].parts.push(l):n.push(r[i]={id:i,parts:[l]})}return n}function h(e,t){var n=l(e.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=c[c.length-1];if("top"===e.insertAt)r?r.nextSibling?n.insertBefore(t,r.nextSibling):n.appendChild(t):n.insertBefore(t,n.firstChild),c.push(t);else if("bottom"===e.insertAt)n.appendChild(t);else{if("object"!=typeof e.insertAt||!e.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var o=l(e.insertInto+" "+e.insertAt.before);n.insertBefore(t,o)}}function m(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var t=c.indexOf(e);t>=0&&c.splice(t,1)}function v(e){var t=document.createElement("style");return void 0===e.attrs.type&&(e.attrs.type="text/css"),y(t,e.attrs),h(e,t),t}function y(e,t){Object.keys(t).forEach(function(n){e.setAttribute(n,t[n])})}function g(e,t){var n,r,o,a;if(t.transform&&e.css){if(!(a=t.transform(e.css)))return function(){};e.css=a}if(t.singleton){var i=s++;n=u||(u=v(t)),r=w.bind(null,n,i,!1),o=w.bind(null,n,i,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(e){var t=document.createElement("link");return void 0===e.attrs.type&&(e.attrs.type="text/css"),e.attrs.rel="stylesheet",y(t,e.attrs),h(e,t),t}(t),r=function(e,t,n){var r=n.css,o=n.sourceMap,a=void 0===t.convertToAbsoluteUrls&&o;(t.convertToAbsoluteUrls||a)&&(r=d(r));o&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */");var i=new Blob([r],{type:"text/css"}),l=e.href;e.href=URL.createObjectURL(i),l&&URL.revokeObjectURL(l)}.bind(null,n,t),o=function(){m(n),n.href&&URL.revokeObjectURL(n.href)}):(n=v(t),r=function(e,t){var n=t.css,r=t.media;r&&e.setAttribute("media",r);if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}.bind(null,n),o=function(){m(n)});return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else o()}}e.exports=function(e,t){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(t=t||{}).attrs="object"==typeof t.attrs?t.attrs:{},t.singleton||"boolean"==typeof t.singleton||(t.singleton=i()),t.insertInto||(t.insertInto="head"),t.insertAt||(t.insertAt="bottom");var n=p(e,t);return f(n,t),function(e){for(var r=[],o=0;o<n.length;o++){var i=n[o];(l=a[i.id]).refs--,r.push(l)}e&&f(p(e,t),t);for(o=0;o<r.length;o++){var l;if(0===(l=r[o]).refs){for(var u=0;u<l.parts.length;u++)l.parts[u]();delete a[l.id]}}}};var b,x=(b=[],function(e,t){return b[e]=t,b.filter(Boolean).join("\n")});function w(e,t,n,r){var o=n?"":r.css;if(e.styleSheet)e.styleSheet.cssText=x(t,o);else{var a=document.createTextNode(o),i=e.childNodes;i[t]&&e.removeChild(i[t]),i.length?e.insertBefore(a,i[t]):e.appendChild(a)}}},function(e,t){e.exports=function(e){var t=[];return t.toString=function(){return this.map(function(t){var n=function(e,t){var n=e[1]||"",r=e[3];if(!r)return n;if(t&&"function"==typeof btoa){var o=(i=r,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(i))))+" */"),a=r.sources.map(function(e){return"/*# sourceURL="+r.sourceRoot+e+" */"});return[n].concat(a).concat([o]).join("\n")}var i;return[n].join("\n")}(t,e);return t[2]?"@media "+t[2]+"{"+n+"}":n}).join("")},t.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var r={},o=0;o<this.length;o++){var a=this[o][0];"number"==typeof a&&(r[a]=!0)}for(o=0;o<e.length;o++){var i=e[o];"number"==typeof i[0]&&r[i[0]]||(n&&!i[2]?i[2]=n:n&&(i[2]="("+i[2]+") and ("+n+")"),t.push(i))}},t}},function(e,t,n){(e.exports=n(532)(!0)).push([e.i,"","",{version:3,sources:[],names:[],mappings:"",file:"App.css",sourceRoot:""}])},function(e,t,n){var r=n(533);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(531)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){"use strict";e.exports=function(e){var t=(e?e.ownerDocument||e:document).defaultView||window;return!(!e||!("function"==typeof t.Node?e instanceof t.Node:"object"==typeof e&&"number"==typeof e.nodeType&&"string"==typeof e.nodeName))}},function(e,t,n){"use strict";var r=n(535);e.exports=function(e){return r(e)&&3==e.nodeType}},function(e,t,n){"use strict";var r=n(536);e.exports=function e(t,n){return!(!t||!n)&&(t===n||!r(t)&&(r(n)?e(t,n.parentNode):"contains"in t?t.contains(n):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(n))))}},function(e,t,n){"use strict";e.exports=function(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}},function(e,t,n){"use strict";var r=!("undefined"==typeof window||!window.document||!window.document.createElement),o={canUseDOM:r,canUseWorkers:"undefined"!=typeof Worker,canUseEventListeners:r&&!(!window.addEventListener&&!window.attachEvent),canUseViewport:r&&!!window.screen,isInWorker:!r};e.exports=o},function(e,t,n){"use strict";
/** @license React v16.4.0
 * react-dom.production.min.js
 *
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(84),o=n(2),a=n(539),i=n(138),l=n(83),u=n(538),s=n(235),c=n(537),d=n(137);function f(e){for(var t=arguments.length-1,n="https://reactjs.org/docs/error-decoder.html?invariant="+e,o=0;o<t;o++)n+="&args[]="+encodeURIComponent(arguments[o+1]);r(!1,"Minified React error #"+e+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",n)}o||f("227");var p={_caughtError:null,_hasCaughtError:!1,_rethrowError:null,_hasRethrowError:!1,invokeGuardedCallback:function(e,t,n,r,o,a,i,l,u){(function(e,t,n,r,o,a,i,l,u){this._hasCaughtError=!1,this._caughtError=null;var s=Array.prototype.slice.call(arguments,3);try{t.apply(n,s)}catch(e){this._caughtError=e,this._hasCaughtError=!0}}).apply(p,arguments)},invokeGuardedCallbackAndCatchFirstError:function(e,t,n,r,o,a,i,l,u){if(p.invokeGuardedCallback.apply(this,arguments),p.hasCaughtError()){var s=p.clearCaughtError();p._hasRethrowError||(p._hasRethrowError=!0,p._rethrowError=s)}},rethrowCaughtError:function(){return function(){if(p._hasRethrowError){var e=p._rethrowError;throw p._rethrowError=null,p._hasRethrowError=!1,e}}.apply(p,arguments)},hasCaughtError:function(){return p._hasCaughtError},clearCaughtError:function(){if(p._hasCaughtError){var e=p._caughtError;return p._caughtError=null,p._hasCaughtError=!1,e}f("198")}};var h=null,m={};function v(){if(h)for(var e in m){var t=m[e],n=h.indexOf(e);if(-1<n||f("96",e),!g[n])for(var r in t.extractEvents||f("97",e),g[n]=t,n=t.eventTypes){var o=void 0,a=n[r],i=t,l=r;b.hasOwnProperty(l)&&f("99",l),b[l]=a;var u=a.phasedRegistrationNames;if(u){for(o in u)u.hasOwnProperty(o)&&y(u[o],i,l);o=!0}else a.registrationName?(y(a.registrationName,i,l),o=!0):o=!1;o||f("98",r,e)}}}function y(e,t,n){x[e]&&f("100",e),x[e]=t,w[e]=t.eventTypes[n].dependencies}var g=[],b={},x={},w={};function _(e){h&&f("101"),h=Array.prototype.slice.call(e),v()}function k(e){var t,n=!1;for(t in e)if(e.hasOwnProperty(t)){var r=e[t];m.hasOwnProperty(t)&&m[t]===r||(m[t]&&f("102",t),m[t]=r,n=!0)}n&&v()}var P={plugins:g,eventNameDispatchConfigs:b,registrationNameModules:x,registrationNameDependencies:w,possibleRegistrationNames:null,injectEventPluginOrder:_,injectEventPluginsByName:k},E=null,O=null,C=null;function S(e,t,n,r){t=e.type||"unknown-event",e.currentTarget=C(r),p.invokeGuardedCallbackAndCatchFirstError(t,n,void 0,e),e.currentTarget=null}function T(e,t){return null==t&&f("30"),null==e?t:Array.isArray(e)?Array.isArray(t)?(e.push.apply(e,t),e):(e.push(t),e):Array.isArray(t)?[e].concat(t):[e,t]}function M(e,t,n){Array.isArray(e)?e.forEach(t,n):e&&t.call(n,e)}var j=null;function N(e,t){if(e){var n=e._dispatchListeners,r=e._dispatchInstances;if(Array.isArray(n))for(var o=0;o<n.length&&!e.isPropagationStopped();o++)S(e,t,n[o],r[o]);else n&&S(e,t,n,r);e._dispatchListeners=null,e._dispatchInstances=null,e.isPersistent()||e.constructor.release(e)}}function L(e){return N(e,!0)}function R(e){return N(e,!1)}var D={injectEventPluginOrder:_,injectEventPluginsByName:k};function A(e,t){var n=e.stateNode;if(!n)return null;var r=E(n);if(!r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}return e?null:(n&&"function"!=typeof n&&f("231",t,typeof n),n)}function I(e,t){null!==e&&(j=T(j,e)),e=j,j=null,e&&(M(e,t?L:R),j&&f("95"),p.rethrowCaughtError())}function F(e,t,n,r){for(var o=null,a=0;a<g.length;a++){var i=g[a];i&&(i=i.extractEvents(e,t,n,r))&&(o=T(o,i))}I(o,!1)}var z={injection:D,getListener:A,runEventsInBatch:I,runExtractedEventsInBatch:F},W=Math.random().toString(36).slice(2),B="__reactInternalInstance$"+W,U="__reactEventHandlers$"+W;function H(e){if(e[B])return e[B];for(;!e[B];){if(!e.parentNode)return null;e=e.parentNode}return 5===(e=e[B]).tag||6===e.tag?e:null}function V(e){if(5===e.tag||6===e.tag)return e.stateNode;f("33")}function $(e){return e[U]||null}var q={precacheFiberNode:function(e,t){t[B]=e},getClosestInstanceFromNode:H,getInstanceFromNode:function(e){return!(e=e[B])||5!==e.tag&&6!==e.tag?null:e},getNodeFromInstance:V,getFiberCurrentPropsFromNode:$,updateFiberProps:function(e,t){e[U]=t}};function K(e){do{e=e.return}while(e&&5!==e.tag);return e||null}function G(e,t,n){for(var r=[];e;)r.push(e),e=K(e);for(e=r.length;0<e--;)t(r[e],"captured",n);for(e=0;e<r.length;e++)t(r[e],"bubbled",n)}function X(e,t,n){(t=A(e,n.dispatchConfig.phasedRegistrationNames[t]))&&(n._dispatchListeners=T(n._dispatchListeners,t),n._dispatchInstances=T(n._dispatchInstances,e))}function Y(e){e&&e.dispatchConfig.phasedRegistrationNames&&G(e._targetInst,X,e)}function Q(e){if(e&&e.dispatchConfig.phasedRegistrationNames){var t=e._targetInst;G(t=t?K(t):null,X,e)}}function J(e,t,n){e&&n&&n.dispatchConfig.registrationName&&(t=A(e,n.dispatchConfig.registrationName))&&(n._dispatchListeners=T(n._dispatchListeners,t),n._dispatchInstances=T(n._dispatchInstances,e))}function Z(e){e&&e.dispatchConfig.registrationName&&J(e._targetInst,null,e)}function ee(e){M(e,Y)}function te(e,t,n,r){if(n&&r)e:{for(var o=n,a=r,i=0,l=o;l;l=K(l))i++;l=0;for(var u=a;u;u=K(u))l++;for(;0<i-l;)o=K(o),i--;for(;0<l-i;)a=K(a),l--;for(;i--;){if(o===a||o===a.alternate)break e;o=K(o),a=K(a)}o=null}else o=null;for(a=o,o=[];n&&n!==a&&(null===(i=n.alternate)||i!==a);)o.push(n),n=K(n);for(n=[];r&&r!==a&&(null===(i=r.alternate)||i!==a);)n.push(r),r=K(r);for(r=0;r<o.length;r++)J(o[r],"bubbled",e);for(e=n.length;0<e--;)J(n[e],"captured",t)}var ne={accumulateTwoPhaseDispatches:ee,accumulateTwoPhaseDispatchesSkipTarget:function(e){M(e,Q)},accumulateEnterLeaveDispatches:te,accumulateDirectDispatches:function(e){M(e,Z)}};function re(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n["ms"+e]="MS"+t,n["O"+e]="o"+t.toLowerCase(),n}var oe={animationend:re("Animation","AnimationEnd"),animationiteration:re("Animation","AnimationIteration"),animationstart:re("Animation","AnimationStart"),transitionend:re("Transition","TransitionEnd")},ae={},ie={};function le(e){if(ae[e])return ae[e];if(!oe[e])return e;var t,n=oe[e];for(t in n)if(n.hasOwnProperty(t)&&t in ie)return ae[e]=n[t];return e}a.canUseDOM&&(ie=document.createElement("div").style,"AnimationEvent"in window||(delete oe.animationend.animation,delete oe.animationiteration.animation,delete oe.animationstart.animation),"TransitionEvent"in window||delete oe.transitionend.transition);var ue=le("animationend"),se=le("animationiteration"),ce=le("animationstart"),de=le("transitionend"),fe="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),pe=null;function he(){return!pe&&a.canUseDOM&&(pe="textContent"in document.documentElement?"textContent":"innerText"),pe}var me={_root:null,_startText:null,_fallbackText:null};function ve(){if(me._fallbackText)return me._fallbackText;var e,t,n=me._startText,r=n.length,o=ye(),a=o.length;for(e=0;e<r&&n[e]===o[e];e++);var i=r-e;for(t=1;t<=i&&n[r-t]===o[a-t];t++);return me._fallbackText=o.slice(e,1<t?1-t:void 0),me._fallbackText}function ye(){return"value"in me._root?me._root.value:me._root[he()]}var ge="dispatchConfig _targetInst nativeEvent isDefaultPrevented isPropagationStopped _dispatchListeners _dispatchInstances".split(" "),be={type:null,target:null,currentTarget:l.thatReturnsNull,eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null};function xe(e,t,n,r){for(var o in this.dispatchConfig=e,this._targetInst=t,this.nativeEvent=n,e=this.constructor.Interface)e.hasOwnProperty(o)&&((t=e[o])?this[o]=t(n):"target"===o?this.target=r:this[o]=n[o]);return this.isDefaultPrevented=(null!=n.defaultPrevented?n.defaultPrevented:!1===n.returnValue)?l.thatReturnsTrue:l.thatReturnsFalse,this.isPropagationStopped=l.thatReturnsFalse,this}function we(e,t,n,r){if(this.eventPool.length){var o=this.eventPool.pop();return this.call(o,e,t,n,r),o}return new this(e,t,n,r)}function _e(e){e instanceof this||f("223"),e.destructor(),10>this.eventPool.length&&this.eventPool.push(e)}function ke(e){e.eventPool=[],e.getPooled=we,e.release=_e}i(xe.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=l.thatReturnsTrue)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=l.thatReturnsTrue)},persist:function(){this.isPersistent=l.thatReturnsTrue},isPersistent:l.thatReturnsFalse,destructor:function(){var e,t=this.constructor.Interface;for(e in t)this[e]=null;for(t=0;t<ge.length;t++)this[ge[t]]=null}}),xe.Interface=be,xe.extend=function(e){function t(){}function n(){return r.apply(this,arguments)}var r=this;t.prototype=r.prototype;var o=new t;return i(o,n.prototype),n.prototype=o,n.prototype.constructor=n,n.Interface=i({},r.Interface,e),n.extend=r.extend,ke(n),n},ke(xe);var Pe=xe.extend({data:null}),Ee=xe.extend({data:null}),Oe=[9,13,27,32],Ce=a.canUseDOM&&"CompositionEvent"in window,Se=null;a.canUseDOM&&"documentMode"in document&&(Se=document.documentMode);var Te=a.canUseDOM&&"TextEvent"in window&&!Se,Me=a.canUseDOM&&(!Ce||Se&&8<Se&&11>=Se),je=String.fromCharCode(32),Ne={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["compositionend","keypress","textInput","paste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"blur compositionend keydown keypress keyup mousedown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:"blur compositionstart keydown keypress keyup mousedown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"blur compositionupdate keydown keypress keyup mousedown".split(" ")}},Le=!1;function Re(e,t){switch(e){case"keyup":return-1!==Oe.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"blur":return!0;default:return!1}}function De(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Ae=!1;var Ie={eventTypes:Ne,extractEvents:function(e,t,n,r){var o=void 0,a=void 0;if(Ce)e:{switch(e){case"compositionstart":o=Ne.compositionStart;break e;case"compositionend":o=Ne.compositionEnd;break e;case"compositionupdate":o=Ne.compositionUpdate;break e}o=void 0}else Ae?Re(e,n)&&(o=Ne.compositionEnd):"keydown"===e&&229===n.keyCode&&(o=Ne.compositionStart);return o?(Me&&(Ae||o!==Ne.compositionStart?o===Ne.compositionEnd&&Ae&&(a=ve()):(me._root=r,me._startText=ye(),Ae=!0)),o=Pe.getPooled(o,t,n,r),a?o.data=a:null!==(a=De(n))&&(o.data=a),ee(o),a=o):a=null,(e=Te?function(e,t){switch(e){case"compositionend":return De(t);case"keypress":return 32!==t.which?null:(Le=!0,je);case"textInput":return(e=t.data)===je&&Le?null:e;default:return null}}(e,n):function(e,t){if(Ae)return"compositionend"===e||!Ce&&Re(e,t)?(e=ve(),me._root=null,me._startText=null,me._fallbackText=null,Ae=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Me?null:t.data;default:return null}}(e,n))?((t=Ee.getPooled(Ne.beforeInput,t,n,r)).data=e,ee(t)):t=null,null===a?t:null===t?a:[a,t]}},Fe=null,ze={injectFiberControlledHostComponent:function(e){Fe=e}},We=null,Be=null;function Ue(e){if(e=O(e)){Fe&&"function"==typeof Fe.restoreControlledState||f("194");var t=E(e.stateNode);Fe.restoreControlledState(e.stateNode,e.type,t)}}function He(e){We?Be?Be.push(e):Be=[e]:We=e}function Ve(){return null!==We||null!==Be}function $e(){if(We){var e=We,t=Be;if(Be=We=null,Ue(e),t)for(e=0;e<t.length;e++)Ue(t[e])}}var qe={injection:ze,enqueueStateRestore:He,needsStateRestore:Ve,restoreStateIfNeeded:$e};function Ke(e,t){return e(t)}function Ge(e,t,n){return e(t,n)}function Xe(){}var Ye=!1;function Qe(e,t){if(Ye)return e(t);Ye=!0;try{return Ke(e,t)}finally{Ye=!1,Ve()&&(Xe(),$e())}}var Je={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Ze(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Je[e.type]:"textarea"===t}function et(e){return(e=e.target||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}function tt(e,t){return!(!a.canUseDOM||t&&!("addEventListener"in document))&&((t=(e="on"+e)in document)||((t=document.createElement("div")).setAttribute(e,"return;"),t="function"==typeof t[e]),t)}function nt(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function rt(e){e._valueTracker||(e._valueTracker=function(e){var t=nt(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,a=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,a.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function ot(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=nt(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}var at=o.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,it="function"==typeof Symbol&&Symbol.for,lt=it?Symbol.for("react.element"):60103,ut=it?Symbol.for("react.portal"):60106,st=it?Symbol.for("react.fragment"):60107,ct=it?Symbol.for("react.strict_mode"):60108,dt=it?Symbol.for("react.profiler"):60114,ft=it?Symbol.for("react.provider"):60109,pt=it?Symbol.for("react.context"):60110,ht=it?Symbol.for("react.async_mode"):60111,mt=it?Symbol.for("react.forward_ref"):60112,vt=it?Symbol.for("react.timeout"):60113,yt="function"==typeof Symbol&&Symbol.iterator;function gt(e){return null===e||void 0===e?null:"function"==typeof(e=yt&&e[yt]||e["@@iterator"])?e:null}function bt(e){var t=e.type;if("function"==typeof t)return t.displayName||t.name;if("string"==typeof t)return t;switch(t){case ht:return"AsyncMode";case pt:return"Context.Consumer";case st:return"ReactFragment";case ut:return"ReactPortal";case dt:return"Profiler("+e.pendingProps.id+")";case ft:return"Context.Provider";case ct:return"StrictMode";case vt:return"Timeout"}if("object"==typeof t&&null!==t)switch(t.$$typeof){case mt:return""!==(e=t.render.displayName||t.render.name||"")?"ForwardRef("+e+")":"ForwardRef"}return null}function xt(e){var t="";do{e:switch(e.tag){case 0:case 1:case 2:case 5:var n=e._debugOwner,r=e._debugSource,o=bt(e),a=null;n&&(a=bt(n)),n=r,o="\n    in "+(o||"Unknown")+(n?" (at "+n.fileName.replace(/^.*[\\\/]/,"")+":"+n.lineNumber+")":a?" (created by "+a+")":"");break e;default:o=""}t+=o,e=e.return}while(e);return t}var wt=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,_t={},kt={};function Pt(e,t,n,r,o){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t}var Et={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(e){Et[e]=new Pt(e,0,!1,e,null)}),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(e){var t=e[0];Et[t]=new Pt(t,1,!1,e[1],null)}),["contentEditable","draggable","spellCheck","value"].forEach(function(e){Et[e]=new Pt(e,2,!1,e.toLowerCase(),null)}),["autoReverse","externalResourcesRequired","preserveAlpha"].forEach(function(e){Et[e]=new Pt(e,2,!1,e,null)}),"allowFullScreen async autoFocus autoPlay controls default defer disabled formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(e){Et[e]=new Pt(e,3,!1,e.toLowerCase(),null)}),["checked","multiple","muted","selected"].forEach(function(e){Et[e]=new Pt(e,3,!0,e.toLowerCase(),null)}),["capture","download"].forEach(function(e){Et[e]=new Pt(e,4,!1,e.toLowerCase(),null)}),["cols","rows","size","span"].forEach(function(e){Et[e]=new Pt(e,6,!1,e.toLowerCase(),null)}),["rowSpan","start"].forEach(function(e){Et[e]=new Pt(e,5,!1,e.toLowerCase(),null)});var Ot=/[\-:]([a-z])/g;function Ct(e){return e[1].toUpperCase()}function St(e,t,n,r){var o=Et.hasOwnProperty(t)?Et[t]:null;(null!==o?0===o.type:!r&&(2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1])))||(function(e,t,n,r){if(null===t||void 0===t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!kt.hasOwnProperty(e)||!_t.hasOwnProperty(e)&&(wt.test(e)?kt[e]=!0:(_t[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}function Tt(e,t){var n=t.checked;return i({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function Mt(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=Dt(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function jt(e,t){null!=(t=t.checked)&&St(e,"checked",t,!1)}function Nt(e,t){jt(e,t);var n=Dt(t.value);null!=n&&("number"===t.type?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n)),t.hasOwnProperty("value")?Rt(e,t.type,n):t.hasOwnProperty("defaultValue")&&Rt(e,t.type,Dt(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function Lt(e,t){(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue"))&&(""===e.value&&(e.value=""+e._wrapperState.initialValue),e.defaultValue=""+e._wrapperState.initialValue),""!==(t=e.name)&&(e.name=""),e.defaultChecked=!e.defaultChecked,e.defaultChecked=!e.defaultChecked,""!==t&&(e.name=t)}function Rt(e,t,n){"number"===t&&e.ownerDocument.activeElement===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function Dt(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(e){var t=e.replace(Ot,Ct);Et[t]=new Pt(t,1,!1,e,null)}),"xlink:actuate xlink:arcrole xlink:href xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(e){var t=e.replace(Ot,Ct);Et[t]=new Pt(t,1,!1,e,"http://www.w3.org/1999/xlink")}),["xml:base","xml:lang","xml:space"].forEach(function(e){var t=e.replace(Ot,Ct);Et[t]=new Pt(t,1,!1,e,"http://www.w3.org/XML/1998/namespace")}),Et.tabIndex=new Pt("tabIndex",1,!1,"tabindex",null);var At={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"blur change click focus input keydown keyup selectionchange".split(" ")}};function It(e,t,n){return(e=xe.getPooled(At.change,e,t,n)).type="change",He(n),ee(e),e}var Ft=null,zt=null;function Wt(e){I(e,!1)}function Bt(e){if(ot(V(e)))return e}function Ut(e,t){if("change"===e)return t}var Ht=!1;function Vt(){Ft&&(Ft.detachEvent("onpropertychange",$t),zt=Ft=null)}function $t(e){"value"===e.propertyName&&Bt(zt)&&Qe(Wt,e=It(zt,e,et(e)))}function qt(e,t,n){"focus"===e?(Vt(),zt=n,(Ft=t).attachEvent("onpropertychange",$t)):"blur"===e&&Vt()}function Kt(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Bt(zt)}function Gt(e,t){if("click"===e)return Bt(t)}function Xt(e,t){if("input"===e||"change"===e)return Bt(t)}a.canUseDOM&&(Ht=tt("input")&&(!document.documentMode||9<document.documentMode));var Yt={eventTypes:At,_isInputEventSupported:Ht,extractEvents:function(e,t,n,r){var o=t?V(t):window,a=void 0,i=void 0,l=o.nodeName&&o.nodeName.toLowerCase();if("select"===l||"input"===l&&"file"===o.type?a=Ut:Ze(o)?Ht?a=Xt:(a=Kt,i=qt):(l=o.nodeName)&&"input"===l.toLowerCase()&&("checkbox"===o.type||"radio"===o.type)&&(a=Gt),a&&(a=a(e,t)))return It(a,n,r);i&&i(e,o,t),"blur"===e&&null!=t&&(e=t._wrapperState||o._wrapperState)&&e.controlled&&"number"===o.type&&Rt(o,"number",o.value)}},Qt=xe.extend({view:null,detail:null}),Jt={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Zt(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Jt[e])&&!!t[e]}function en(){return Zt}var tn=Qt.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:en,button:null,buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)}}),nn=tn.extend({pointerId:null,width:null,height:null,pressure:null,tiltX:null,tiltY:null,pointerType:null,isPrimary:null}),rn={mouseEnter:{registrationName:"onMouseEnter",dependencies:["mouseout","mouseover"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["mouseout","mouseover"]},pointerEnter:{registrationName:"onPointerEnter",dependencies:["pointerout","pointerover"]},pointerLeave:{registrationName:"onPointerLeave",dependencies:["pointerout","pointerover"]}},on={eventTypes:rn,extractEvents:function(e,t,n,r){var o="mouseover"===e||"pointerover"===e,a="mouseout"===e||"pointerout"===e;if(o&&(n.relatedTarget||n.fromElement)||!a&&!o)return null;if(o=r.window===r?r:(o=r.ownerDocument)?o.defaultView||o.parentWindow:window,a?(a=t,t=(t=n.relatedTarget||n.toElement)?H(t):null):a=null,a===t)return null;var i=void 0,l=void 0,u=void 0,s=void 0;return"mouseout"===e||"mouseover"===e?(i=tn,l=rn.mouseLeave,u=rn.mouseEnter,s="mouse"):"pointerout"!==e&&"pointerover"!==e||(i=nn,l=rn.pointerLeave,u=rn.pointerEnter,s="pointer"),e=null==a?o:V(a),o=null==t?o:V(t),(l=i.getPooled(l,a,n,r)).type=s+"leave",l.target=e,l.relatedTarget=o,(n=i.getPooled(u,t,n,r)).type=s+"enter",n.target=o,n.relatedTarget=e,te(l,n,a,t),[l,n]}};function an(e){var t=e;if(e.alternate)for(;t.return;)t=t.return;else{if(0!=(2&t.effectTag))return 1;for(;t.return;)if(0!=(2&(t=t.return).effectTag))return 1}return 3===t.tag?2:3}function ln(e){2!==an(e)&&f("188")}function un(e){var t=e.alternate;if(!t)return 3===(t=an(e))&&f("188"),1===t?null:e;for(var n=e,r=t;;){var o=n.return,a=o?o.alternate:null;if(!o||!a)break;if(o.child===a.child){for(var i=o.child;i;){if(i===n)return ln(o),e;if(i===r)return ln(o),t;i=i.sibling}f("188")}if(n.return!==r.return)n=o,r=a;else{i=!1;for(var l=o.child;l;){if(l===n){i=!0,n=o,r=a;break}if(l===r){i=!0,r=o,n=a;break}l=l.sibling}if(!i){for(l=a.child;l;){if(l===n){i=!0,n=a,r=o;break}if(l===r){i=!0,r=a,n=o;break}l=l.sibling}i||f("189")}}n.alternate!==r&&f("190")}return 3!==n.tag&&f("188"),n.stateNode.current===n?e:t}function sn(e){if(!(e=un(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}var cn=xe.extend({animationName:null,elapsedTime:null,pseudoElement:null}),dn=xe.extend({clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),fn=Qt.extend({relatedTarget:null});function pn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}var hn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},mn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},vn=Qt.extend({key:function(e){if(e.key){var t=hn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=pn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?mn[e.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:en,charCode:function(e){return"keypress"===e.type?pn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?pn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),yn=tn.extend({dataTransfer:null}),gn=Qt.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:en}),bn=xe.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),xn=tn.extend({deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null}),wn=[["abort","abort"],[ue,"animationEnd"],[se,"animationIteration"],[ce,"animationStart"],["canplay","canPlay"],["canplaythrough","canPlayThrough"],["drag","drag"],["dragenter","dragEnter"],["dragexit","dragExit"],["dragleave","dragLeave"],["dragover","dragOver"],["durationchange","durationChange"],["emptied","emptied"],["encrypted","encrypted"],["ended","ended"],["error","error"],["gotpointercapture","gotPointerCapture"],["load","load"],["loadeddata","loadedData"],["loadedmetadata","loadedMetadata"],["loadstart","loadStart"],["lostpointercapture","lostPointerCapture"],["mousemove","mouseMove"],["mouseout","mouseOut"],["mouseover","mouseOver"],["playing","playing"],["pointermove","pointerMove"],["pointerout","pointerOut"],["pointerover","pointerOver"],["progress","progress"],["scroll","scroll"],["seeking","seeking"],["stalled","stalled"],["suspend","suspend"],["timeupdate","timeUpdate"],["toggle","toggle"],["touchmove","touchMove"],[de,"transitionEnd"],["waiting","waiting"],["wheel","wheel"]],_n={},kn={};function Pn(e,t){var n=e[0],r="on"+((e=e[1])[0].toUpperCase()+e.slice(1));t={phasedRegistrationNames:{bubbled:r,captured:r+"Capture"},dependencies:[n],isInteractive:t},_n[e]=t,kn[n]=t}[["blur","blur"],["cancel","cancel"],["click","click"],["close","close"],["contextmenu","contextMenu"],["copy","copy"],["cut","cut"],["dblclick","doubleClick"],["dragend","dragEnd"],["dragstart","dragStart"],["drop","drop"],["focus","focus"],["input","input"],["invalid","invalid"],["keydown","keyDown"],["keypress","keyPress"],["keyup","keyUp"],["mousedown","mouseDown"],["mouseup","mouseUp"],["paste","paste"],["pause","pause"],["play","play"],["pointercancel","pointerCancel"],["pointerdown","pointerDown"],["pointerup","pointerUp"],["ratechange","rateChange"],["reset","reset"],["seeked","seeked"],["submit","submit"],["touchcancel","touchCancel"],["touchend","touchEnd"],["touchstart","touchStart"],["volumechange","volumeChange"]].forEach(function(e){Pn(e,!0)}),wn.forEach(function(e){Pn(e,!1)});var En={eventTypes:_n,isInteractiveTopLevelEventType:function(e){return void 0!==(e=kn[e])&&!0===e.isInteractive},extractEvents:function(e,t,n,r){var o=kn[e];if(!o)return null;switch(e){case"keypress":if(0===pn(n))return null;case"keydown":case"keyup":e=vn;break;case"blur":case"focus":e=fn;break;case"click":if(2===n.button)return null;case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":e=tn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":e=yn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":e=gn;break;case ue:case se:case ce:e=cn;break;case de:e=bn;break;case"scroll":e=Qt;break;case"wheel":e=xn;break;case"copy":case"cut":case"paste":e=dn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":e=nn;break;default:e=xe}return ee(t=e.getPooled(o,t,n,r)),t}},On=En.isInteractiveTopLevelEventType,Cn=[];function Sn(e){var t=e.targetInst;do{if(!t){e.ancestors.push(t);break}var n;for(n=t;n.return;)n=n.return;if(!(n=3!==n.tag?null:n.stateNode.containerInfo))break;e.ancestors.push(t),t=H(n)}while(t);for(n=0;n<e.ancestors.length;n++)t=e.ancestors[n],F(e.topLevelType,t,e.nativeEvent,et(e.nativeEvent))}var Tn=!0;function Mn(e){Tn=!!e}function jn(e,t){if(!t)return null;var n=(On(e)?Ln:Rn).bind(null,e);t.addEventListener(e,n,!1)}function Nn(e,t){if(!t)return null;var n=(On(e)?Ln:Rn).bind(null,e);t.addEventListener(e,n,!0)}function Ln(e,t){Ge(Rn,e,t)}function Rn(e,t){if(Tn){var n=et(t);if(null===(n=H(n))||"number"!=typeof n.tag||2===an(n)||(n=null),Cn.length){var r=Cn.pop();r.topLevelType=e,r.nativeEvent=t,r.targetInst=n,e=r}else e={topLevelType:e,nativeEvent:t,targetInst:n,ancestors:[]};try{Qe(Sn,e)}finally{e.topLevelType=null,e.nativeEvent=null,e.targetInst=null,e.ancestors.length=0,10>Cn.length&&Cn.push(e)}}}var Dn={get _enabled(){return Tn},setEnabled:Mn,isEnabled:function(){return Tn},trapBubbledEvent:jn,trapCapturedEvent:Nn,dispatchEvent:Rn},An={},In=0,Fn="_reactListenersID"+(""+Math.random()).slice(2);function zn(e){return Object.prototype.hasOwnProperty.call(e,Fn)||(e[Fn]=In++,An[e[Fn]]={}),An[e[Fn]]}function Wn(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function Bn(e,t){var n,r=Wn(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=Wn(r)}}function Un(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&"text"===e.type||"textarea"===t||"true"===e.contentEditable)}var Hn=a.canUseDOM&&"documentMode"in document&&11>=document.documentMode,Vn={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"blur contextmenu focus keydown keyup mousedown mouseup selectionchange".split(" ")}},$n=null,qn=null,Kn=null,Gn=!1;function Xn(e,t){if(Gn||null==$n||$n!==u())return null;var n=$n;return"selectionStart"in n&&Un(n)?n={start:n.selectionStart,end:n.selectionEnd}:window.getSelection?n={anchorNode:(n=window.getSelection()).anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset}:n=void 0,Kn&&s(Kn,n)?null:(Kn=n,(e=xe.getPooled(Vn.select,qn,e,t)).type="select",e.target=$n,ee(e),e)}var Yn={eventTypes:Vn,extractEvents:function(e,t,n,r){var o,a=r.window===r?r.document:9===r.nodeType?r:r.ownerDocument;if(!(o=!a)){e:{a=zn(a),o=w.onSelect;for(var i=0;i<o.length;i++){var l=o[i];if(!a.hasOwnProperty(l)||!a[l]){a=!1;break e}}a=!0}o=!a}if(o)return null;switch(a=t?V(t):window,e){case"focus":(Ze(a)||"true"===a.contentEditable)&&($n=a,qn=t,Kn=null);break;case"blur":Kn=qn=$n=null;break;case"mousedown":Gn=!0;break;case"contextmenu":case"mouseup":return Gn=!1,Xn(n,r);case"selectionchange":if(Hn)break;case"keydown":case"keyup":return Xn(n,r)}return null}};D.injectEventPluginOrder("ResponderEventPlugin SimpleEventPlugin TapEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" ")),E=q.getFiberCurrentPropsFromNode,O=q.getInstanceFromNode,C=q.getNodeFromInstance,D.injectEventPluginsByName({SimpleEventPlugin:En,EnterLeaveEventPlugin:on,ChangeEventPlugin:Yt,SelectEventPlugin:Yn,BeforeInputEventPlugin:Ie});var Qn=void 0;Qn="object"==typeof performance&&"function"==typeof performance.now?function(){return performance.now()}:function(){return Date.now()};var Jn=void 0,Zn=void 0;if(a.canUseDOM){var er=[],tr=0,nr={},rr=-1,or=!1,ar=!1,ir=0,lr=33,ur=33,sr={didTimeout:!1,timeRemaining:function(){var e=ir-Qn();return 0<e?e:0}},cr=function(e,t){if(nr[t])try{e(sr)}finally{delete nr[t]}},dr="__reactIdleCallback$"+Math.random().toString(36).slice(2);window.addEventListener("message",function(e){if(e.source===window&&e.data===dr&&(or=!1,0!==er.length)){if(0!==er.length&&(e=Qn(),!(-1===rr||rr>e))){rr=-1,sr.didTimeout=!0;for(var t=0,n=er.length;t<n;t++){var r=er[t],o=r.timeoutTime;-1!==o&&o<=e?cr(r.scheduledCallback,r.callbackId):-1!==o&&(-1===rr||o<rr)&&(rr=o)}}for(e=Qn();0<ir-e&&0<er.length;)e=er.shift(),sr.didTimeout=!1,cr(e.scheduledCallback,e.callbackId),e=Qn();0<er.length&&!ar&&(ar=!0,requestAnimationFrame(fr))}},!1);var fr=function(e){ar=!1;var t=e-ir+ur;t<ur&&lr<ur?(8>t&&(t=8),ur=t<lr?lr:t):lr=t,ir=e+ur,or||(or=!0,window.postMessage(dr,"*"))};Jn=function(e,t){var n=-1;return null!=t&&"number"==typeof t.timeout&&(n=Qn()+t.timeout),(-1===rr||-1!==n&&n<rr)&&(rr=n),t=++tr,er.push({scheduledCallback:e,callbackId:t,timeoutTime:n}),nr[t]=!0,ar||(ar=!0,requestAnimationFrame(fr)),t},Zn=function(e){delete nr[e]}}else{var pr=0,hr={};Jn=function(e){var t=pr++,n=setTimeout(function(){e({timeRemaining:function(){return 1/0},didTimeout:!1})});return hr[t]=n,t},Zn=function(e){var t=hr[e];delete hr[e],clearTimeout(t)}}function mr(e,t){return e=i({children:void 0},t),(t=function(e){var t="";return o.Children.forEach(e,function(e){null==e||"string"!=typeof e&&"number"!=typeof e||(t+=e)}),t}(t.children))&&(e.children=t),e}function vr(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+n,t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function yr(e,t){var n=t.value;e._wrapperState={initialValue:null!=n?n:t.defaultValue,wasMultiple:!!t.multiple}}function gr(e,t){return null!=t.dangerouslySetInnerHTML&&f("91"),i({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function br(e,t){var n=t.value;null==n&&(n=t.defaultValue,null!=(t=t.children)&&(null!=n&&f("92"),Array.isArray(t)&&(1>=t.length||f("93"),t=t[0]),n=""+t),null==n&&(n="")),e._wrapperState={initialValue:""+n}}function xr(e,t){var n=t.value;null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&(e.defaultValue=n)),null!=t.defaultValue&&(e.defaultValue=t.defaultValue)}function wr(e){var t=e.textContent;t===e._wrapperState.initialValue&&(e.value=t)}var _r={html:"http://www.w3.org/1999/xhtml",mathml:"http://www.w3.org/1998/Math/MathML",svg:"http://www.w3.org/2000/svg"};function kr(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function Pr(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?kr(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var Er,Or=void 0,Cr=(Er=function(e,t){if(e.namespaceURI!==_r.svg||"innerHTML"in e)e.innerHTML=t;else{for((Or=Or||document.createElement("div")).innerHTML="<svg>"+t+"</svg>",t=Or.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction(function(){return Er(e,t)})}:Er);function Sr(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var Tr={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},Mr=["Webkit","ms","Moz","O"];function jr(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=n,a=t[n];o=null==a||"boolean"==typeof a||""===a?"":r||"number"!=typeof a||0===a||Tr.hasOwnProperty(o)&&Tr[o]?(""+a).trim():a+"px","float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(Tr).forEach(function(e){Mr.forEach(function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),Tr[t]=Tr[e]})});var Nr=i({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function Lr(e,t,n){t&&(Nr[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML)&&f("137",e,n()),null!=t.dangerouslySetInnerHTML&&(null!=t.children&&f("60"),"object"==typeof t.dangerouslySetInnerHTML&&"__html"in t.dangerouslySetInnerHTML||f("61")),null!=t.style&&"object"!=typeof t.style&&f("62",n()))}function Rr(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var Dr=l.thatReturns("");function Ar(e,t){var n=zn(e=9===e.nodeType||11===e.nodeType?e:e.ownerDocument);t=w[t];for(var r=0;r<t.length;r++){var o=t[r];if(!n.hasOwnProperty(o)||!n[o]){switch(o){case"scroll":Nn("scroll",e);break;case"focus":case"blur":Nn("focus",e),Nn("blur",e),n.blur=!0,n.focus=!0;break;case"cancel":case"close":tt(o,!0)&&Nn(o,e);break;case"invalid":case"submit":case"reset":break;default:-1===fe.indexOf(o)&&jn(o,e)}n[o]=!0}}}function Ir(e,t,n,r){return n=9===n.nodeType?n:n.ownerDocument,r===_r.html&&(r=kr(e)),r===_r.html?"script"===e?((e=n.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):e="string"==typeof t.is?n.createElement(e,{is:t.is}):n.createElement(e):e=n.createElementNS(r,e),e}function Fr(e,t){return(9===t.nodeType?t:t.ownerDocument).createTextNode(e)}function zr(e,t,n,r){var o=Rr(t,n);switch(t){case"iframe":case"object":jn("load",e);var a=n;break;case"video":case"audio":for(a=0;a<fe.length;a++)jn(fe[a],e);a=n;break;case"source":jn("error",e),a=n;break;case"img":case"image":case"link":jn("error",e),jn("load",e),a=n;break;case"form":jn("reset",e),jn("submit",e),a=n;break;case"details":jn("toggle",e),a=n;break;case"input":Mt(e,n),a=Tt(e,n),jn("invalid",e),Ar(r,"onChange");break;case"option":a=mr(e,n);break;case"select":yr(e,n),a=i({},n,{value:void 0}),jn("invalid",e),Ar(r,"onChange");break;case"textarea":br(e,n),a=gr(e,n),jn("invalid",e),Ar(r,"onChange");break;default:a=n}Lr(t,a,Dr);var u,s=a;for(u in s)if(s.hasOwnProperty(u)){var c=s[u];"style"===u?jr(e,c):"dangerouslySetInnerHTML"===u?null!=(c=c?c.__html:void 0)&&Cr(e,c):"children"===u?"string"==typeof c?("textarea"!==t||""!==c)&&Sr(e,c):"number"==typeof c&&Sr(e,""+c):"suppressContentEditableWarning"!==u&&"suppressHydrationWarning"!==u&&"autoFocus"!==u&&(x.hasOwnProperty(u)?null!=c&&Ar(r,u):null!=c&&St(e,u,c,o))}switch(t){case"input":rt(e),Lt(e,n);break;case"textarea":rt(e),wr(e);break;case"option":null!=n.value&&e.setAttribute("value",n.value);break;case"select":e.multiple=!!n.multiple,null!=(t=n.value)?vr(e,!!n.multiple,t,!1):null!=n.defaultValue&&vr(e,!!n.multiple,n.defaultValue,!0);break;default:"function"==typeof a.onClick&&(e.onclick=l)}}function Wr(e,t,n,r,o){var a=null;switch(t){case"input":n=Tt(e,n),r=Tt(e,r),a=[];break;case"option":n=mr(e,n),r=mr(e,r),a=[];break;case"select":n=i({},n,{value:void 0}),r=i({},r,{value:void 0}),a=[];break;case"textarea":n=gr(e,n),r=gr(e,r),a=[];break;default:"function"!=typeof n.onClick&&"function"==typeof r.onClick&&(e.onclick=l)}Lr(t,r,Dr),t=e=void 0;var u=null;for(e in n)if(!r.hasOwnProperty(e)&&n.hasOwnProperty(e)&&null!=n[e])if("style"===e){var s=n[e];for(t in s)s.hasOwnProperty(t)&&(u||(u={}),u[t]="")}else"dangerouslySetInnerHTML"!==e&&"children"!==e&&"suppressContentEditableWarning"!==e&&"suppressHydrationWarning"!==e&&"autoFocus"!==e&&(x.hasOwnProperty(e)?a||(a=[]):(a=a||[]).push(e,null));for(e in r){var c=r[e];if(s=null!=n?n[e]:void 0,r.hasOwnProperty(e)&&c!==s&&(null!=c||null!=s))if("style"===e)if(s){for(t in s)!s.hasOwnProperty(t)||c&&c.hasOwnProperty(t)||(u||(u={}),u[t]="");for(t in c)c.hasOwnProperty(t)&&s[t]!==c[t]&&(u||(u={}),u[t]=c[t])}else u||(a||(a=[]),a.push(e,u)),u=c;else"dangerouslySetInnerHTML"===e?(c=c?c.__html:void 0,s=s?s.__html:void 0,null!=c&&s!==c&&(a=a||[]).push(e,""+c)):"children"===e?s===c||"string"!=typeof c&&"number"!=typeof c||(a=a||[]).push(e,""+c):"suppressContentEditableWarning"!==e&&"suppressHydrationWarning"!==e&&(x.hasOwnProperty(e)?(null!=c&&Ar(o,e),a||s===c||(a=[])):(a=a||[]).push(e,c))}return u&&(a=a||[]).push("style",u),a}function Br(e,t,n,r,o){"input"===n&&"radio"===o.type&&null!=o.name&&jt(e,o),Rr(n,r),r=Rr(n,o);for(var a=0;a<t.length;a+=2){var i=t[a],l=t[a+1];"style"===i?jr(e,l):"dangerouslySetInnerHTML"===i?Cr(e,l):"children"===i?Sr(e,l):St(e,i,l,r)}switch(n){case"input":Nt(e,o);break;case"textarea":xr(e,o);break;case"select":e._wrapperState.initialValue=void 0,t=e._wrapperState.wasMultiple,e._wrapperState.wasMultiple=!!o.multiple,null!=(n=o.value)?vr(e,!!o.multiple,n,!1):t!==!!o.multiple&&(null!=o.defaultValue?vr(e,!!o.multiple,o.defaultValue,!0):vr(e,!!o.multiple,o.multiple?[]:"",!1))}}function Ur(e,t,n,r,o){switch(t){case"iframe":case"object":jn("load",e);break;case"video":case"audio":for(r=0;r<fe.length;r++)jn(fe[r],e);break;case"source":jn("error",e);break;case"img":case"image":case"link":jn("error",e),jn("load",e);break;case"form":jn("reset",e),jn("submit",e);break;case"details":jn("toggle",e);break;case"input":Mt(e,n),jn("invalid",e),Ar(o,"onChange");break;case"select":yr(e,n),jn("invalid",e),Ar(o,"onChange");break;case"textarea":br(e,n),jn("invalid",e),Ar(o,"onChange")}for(var a in Lr(t,n,Dr),r=null,n)if(n.hasOwnProperty(a)){var i=n[a];"children"===a?"string"==typeof i?e.textContent!==i&&(r=["children",i]):"number"==typeof i&&e.textContent!==""+i&&(r=["children",""+i]):x.hasOwnProperty(a)&&null!=i&&Ar(o,a)}switch(t){case"input":rt(e),Lt(e,n);break;case"textarea":rt(e),wr(e);break;case"select":case"option":break;default:"function"==typeof n.onClick&&(e.onclick=l)}return r}function Hr(e,t){return e.nodeValue!==t}var Vr={createElement:Ir,createTextNode:Fr,setInitialProperties:zr,diffProperties:Wr,updateProperties:Br,diffHydratedProperties:Ur,diffHydratedText:Hr,warnForUnmatchedText:function(){},warnForDeletedHydratableElement:function(){},warnForDeletedHydratableText:function(){},warnForInsertedHydratedElement:function(){},warnForInsertedHydratedText:function(){},restoreControlledState:function(e,t,n){switch(t){case"input":if(Nt(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=$(r);o||f("90"),ot(r),Nt(r,o)}}}break;case"textarea":xr(e,n);break;case"select":null!=(t=n.value)&&vr(e,!!n.multiple,t,!1)}}},$r=null,qr=null;function Kr(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function Gr(e,t){return"textarea"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&"string"==typeof t.dangerouslySetInnerHTML.__html}var Xr=Qn,Yr=Jn,Qr=Zn;function Jr(e){for(e=e.nextSibling;e&&1!==e.nodeType&&3!==e.nodeType;)e=e.nextSibling;return e}function Zr(e){for(e=e.firstChild;e&&1!==e.nodeType&&3!==e.nodeType;)e=e.nextSibling;return e}new Set;var eo=[],to=-1;function no(e){return{current:e}}function ro(e){0>to||(e.current=eo[to],eo[to]=null,to--)}function oo(e,t){eo[++to]=e.current,e.current=t}var ao=no(d),io=no(!1),lo=d;function uo(e){return co(e)?lo:ao.current}function so(e,t){var n=e.type.contextTypes;if(!n)return d;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o,a={};for(o in n)a[o]=t[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=a),a}function co(e){return 2===e.tag&&null!=e.type.childContextTypes}function fo(e){co(e)&&(ro(io),ro(ao))}function po(e){ro(io),ro(ao)}function ho(e,t,n){ao.current!==d&&f("168"),oo(ao,t),oo(io,n)}function mo(e,t){var n=e.stateNode,r=e.type.childContextTypes;if("function"!=typeof n.getChildContext)return t;for(var o in n=n.getChildContext())o in r||f("108",bt(e)||"Unknown",o);return i({},t,n)}function vo(e){if(!co(e))return!1;var t=e.stateNode;return t=t&&t.__reactInternalMemoizedMergedChildContext||d,lo=ao.current,oo(ao,t),oo(io,io.current),!0}function yo(e,t){var n=e.stateNode;if(n||f("169"),t){var r=mo(e,lo);n.__reactInternalMemoizedMergedChildContext=r,ro(io),ro(ao),oo(ao,r)}else ro(io);oo(io,t)}function go(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=null,this.index=0,this.ref=null,this.pendingProps=t,this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.effectTag=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.expirationTime=0,this.alternate=null}function bo(e,t,n){var r=e.alternate;return null===r?((r=new go(e.tag,t,e.key,e.mode)).type=e.type,r.stateNode=e.stateNode,r.alternate=e,e.alternate=r):(r.pendingProps=t,r.effectTag=0,r.nextEffect=null,r.firstEffect=null,r.lastEffect=null),r.expirationTime=n,r.child=e.child,r.memoizedProps=e.memoizedProps,r.memoizedState=e.memoizedState,r.updateQueue=e.updateQueue,r.sibling=e.sibling,r.index=e.index,r.ref=e.ref,r}function xo(e,t,n){var r=e.type,o=e.key;if(e=e.props,"function"==typeof r)var a=r.prototype&&r.prototype.isReactComponent?2:0;else if("string"==typeof r)a=5;else switch(r){case st:return wo(e.children,t,n,o);case ht:a=11,t|=3;break;case ct:a=11,t|=2;break;case dt:return(r=new go(15,e,o,4|t)).type=dt,r.expirationTime=n,r;case vt:a=16,t|=2;break;default:e:{switch("object"==typeof r&&null!==r?r.$$typeof:null){case ft:a=13;break e;case pt:a=12;break e;case mt:a=14;break e;default:f("130",null==r?r:typeof r,"")}a=void 0}}return(t=new go(a,e,o,t)).type=r,t.expirationTime=n,t}function wo(e,t,n,r){return(e=new go(10,e,r,t)).expirationTime=n,e}function _o(e,t,n){return(e=new go(6,e,null,t)).expirationTime=n,e}function ko(e,t,n){return(t=new go(4,null!==e.children?e.children:[],e.key,t)).expirationTime=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Po(e,t,n){return e={current:t=new go(3,null,null,t?3:0),containerInfo:e,pendingChildren:null,earliestPendingTime:0,latestPendingTime:0,earliestSuspendedTime:0,latestSuspendedTime:0,latestPingedTime:0,pendingCommitExpirationTime:0,finishedWork:null,context:null,pendingContext:null,hydrate:n,remainingExpirationTime:0,firstBatch:null,nextScheduledRoot:null},t.stateNode=e}var Eo=null,Oo=null;function Co(e){return function(t){try{return e(t)}catch(e){}}}function So(e){"function"==typeof Eo&&Eo(e)}function To(e){"function"==typeof Oo&&Oo(e)}var Mo=!1;function jo(e){return{expirationTime:0,baseState:e,firstUpdate:null,lastUpdate:null,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function No(e){return{expirationTime:e.expirationTime,baseState:e.baseState,firstUpdate:e.firstUpdate,lastUpdate:e.lastUpdate,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function Lo(e){return{expirationTime:e,tag:0,payload:null,callback:null,next:null,nextEffect:null}}function Ro(e,t,n){null===e.lastUpdate?e.firstUpdate=e.lastUpdate=t:(e.lastUpdate.next=t,e.lastUpdate=t),(0===e.expirationTime||e.expirationTime>n)&&(e.expirationTime=n)}function Do(e,t,n){var r=e.alternate;if(null===r){var o=e.updateQueue,a=null;null===o&&(o=e.updateQueue=jo(e.memoizedState))}else o=e.updateQueue,a=r.updateQueue,null===o?null===a?(o=e.updateQueue=jo(e.memoizedState),a=r.updateQueue=jo(r.memoizedState)):o=e.updateQueue=No(a):null===a&&(a=r.updateQueue=No(o));null===a||o===a?Ro(o,t,n):null===o.lastUpdate||null===a.lastUpdate?(Ro(o,t,n),Ro(a,t,n)):(Ro(o,t,n),a.lastUpdate=t)}function Ao(e,t,n){var r=e.updateQueue;null===(r=null===r?e.updateQueue=jo(e.memoizedState):Io(e,r)).lastCapturedUpdate?r.firstCapturedUpdate=r.lastCapturedUpdate=t:(r.lastCapturedUpdate.next=t,r.lastCapturedUpdate=t),(0===r.expirationTime||r.expirationTime>n)&&(r.expirationTime=n)}function Io(e,t){var n=e.alternate;return null!==n&&t===n.updateQueue&&(t=e.updateQueue=No(t)),t}function Fo(e,t,n,r,o,a){switch(n.tag){case 1:return"function"==typeof(e=n.payload)?e.call(a,r,o):e;case 3:e.effectTag=-1025&e.effectTag|64;case 0:if(null===(o="function"==typeof(e=n.payload)?e.call(a,r,o):e)||void 0===o)break;return i({},r,o);case 2:Mo=!0}return r}function zo(e,t,n,r,o){if(Mo=!1,!(0===t.expirationTime||t.expirationTime>o)){for(var a=(t=Io(e,t)).baseState,i=null,l=0,u=t.firstUpdate,s=a;null!==u;){var c=u.expirationTime;c>o?(null===i&&(i=u,a=s),(0===l||l>c)&&(l=c)):(s=Fo(e,0,u,s,n,r),null!==u.callback&&(e.effectTag|=32,u.nextEffect=null,null===t.lastEffect?t.firstEffect=t.lastEffect=u:(t.lastEffect.nextEffect=u,t.lastEffect=u))),u=u.next}for(c=null,u=t.firstCapturedUpdate;null!==u;){var d=u.expirationTime;d>o?(null===c&&(c=u,null===i&&(a=s)),(0===l||l>d)&&(l=d)):(s=Fo(e,0,u,s,n,r),null!==u.callback&&(e.effectTag|=32,u.nextEffect=null,null===t.lastCapturedEffect?t.firstCapturedEffect=t.lastCapturedEffect=u:(t.lastCapturedEffect.nextEffect=u,t.lastCapturedEffect=u))),u=u.next}null===i&&(t.lastUpdate=null),null===c?t.lastCapturedUpdate=null:e.effectTag|=32,null===i&&null===c&&(a=s),t.baseState=a,t.firstUpdate=i,t.firstCapturedUpdate=c,t.expirationTime=l,e.memoizedState=s}}function Wo(e,t){"function"!=typeof e&&f("191",e),e.call(t)}function Bo(e,t,n){for(null!==t.firstCapturedUpdate&&(null!==t.lastUpdate&&(t.lastUpdate.next=t.firstCapturedUpdate,t.lastUpdate=t.lastCapturedUpdate),t.firstCapturedUpdate=t.lastCapturedUpdate=null),e=t.firstEffect,t.firstEffect=t.lastEffect=null;null!==e;){var r=e.callback;null!==r&&(e.callback=null,Wo(r,n)),e=e.nextEffect}for(e=t.firstCapturedEffect,t.firstCapturedEffect=t.lastCapturedEffect=null;null!==e;)null!==(t=e.callback)&&(e.callback=null,Wo(t,n)),e=e.nextEffect}function Uo(e,t){return{value:e,source:t,stack:xt(t)}}var Ho=no(null),Vo=no(null),$o=no(0);function qo(e){var t=e.type._context;oo($o,t._changedBits),oo(Vo,t._currentValue),oo(Ho,e),t._currentValue=e.pendingProps.value,t._changedBits=e.stateNode}function Ko(e){var t=$o.current,n=Vo.current;ro(Ho),ro(Vo),ro($o),(e=e.type._context)._currentValue=n,e._changedBits=t}var Go={},Xo=no(Go),Yo=no(Go),Qo=no(Go);function Jo(e){return e===Go&&f("174"),e}function Zo(e,t){oo(Qo,t),oo(Yo,e),oo(Xo,Go);var n=t.nodeType;switch(n){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:Pr(null,"");break;default:t=Pr(t=(n=8===n?t.parentNode:t).namespaceURI||null,n=n.tagName)}ro(Xo),oo(Xo,t)}function ea(e){ro(Xo),ro(Yo),ro(Qo)}function ta(e){Yo.current===e&&(ro(Xo),ro(Yo))}function na(e,t,n){var r=e.memoizedState;r=null===(t=t(n,r))||void 0===t?r:i({},r,t),e.memoizedState=r,null!==(e=e.updateQueue)&&0===e.expirationTime&&(e.baseState=r)}var ra={isMounted:function(e){return!!(e=e._reactInternalFiber)&&2===an(e)},enqueueSetState:function(e,t,n){e=e._reactInternalFiber;var r=mi(),o=Lo(r=pi(r,e));o.payload=t,void 0!==n&&null!==n&&(o.callback=n),Do(e,o,r),hi(e,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternalFiber;var r=mi(),o=Lo(r=pi(r,e));o.tag=1,o.payload=t,void 0!==n&&null!==n&&(o.callback=n),Do(e,o,r),hi(e,r)},enqueueForceUpdate:function(e,t){e=e._reactInternalFiber;var n=mi(),r=Lo(n=pi(n,e));r.tag=2,void 0!==t&&null!==t&&(r.callback=t),Do(e,r,n),hi(e,n)}};function oa(e,t,n,r,o,a){var i=e.stateNode;return e=e.type,"function"==typeof i.shouldComponentUpdate?i.shouldComponentUpdate(n,o,a):!e.prototype||!e.prototype.isPureReactComponent||(!s(t,n)||!s(r,o))}function aa(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&ra.enqueueReplaceState(t,t.state,null)}function ia(e,t){var n=e.type,r=e.stateNode,o=e.pendingProps,a=uo(e);r.props=o,r.state=e.memoizedState,r.refs=d,r.context=so(e,a),null!==(a=e.updateQueue)&&(zo(e,a,o,r,t),r.state=e.memoizedState),"function"==typeof(a=e.type.getDerivedStateFromProps)&&(na(e,a,o),r.state=e.memoizedState),"function"==typeof n.getDerivedStateFromProps||"function"==typeof r.getSnapshotBeforeUpdate||"function"!=typeof r.UNSAFE_componentWillMount&&"function"!=typeof r.componentWillMount||(n=r.state,"function"==typeof r.componentWillMount&&r.componentWillMount(),"function"==typeof r.UNSAFE_componentWillMount&&r.UNSAFE_componentWillMount(),n!==r.state&&ra.enqueueReplaceState(r,r.state,null),null!==(a=e.updateQueue)&&(zo(e,a,o,r,t),r.state=e.memoizedState)),"function"==typeof r.componentDidMount&&(e.effectTag|=4)}var la=Array.isArray;function ua(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){var r=void 0;(n=n._owner)&&(2!==n.tag&&f("110"),r=n.stateNode),r||f("147",e);var o=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===o?t.ref:((t=function(e){var t=r.refs===d?r.refs={}:r.refs;null===e?delete t[o]:t[o]=e})._stringRef=o,t)}"string"!=typeof e&&f("148"),n._owner||f("254",e)}return e}function sa(e,t){"textarea"!==e.type&&f("31","[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t,"")}function ca(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.effectTag=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t,n){return(e=bo(e,t,n)).index=0,e.sibling=null,e}function a(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.effectTag=2,n):r:(t.effectTag=2,n):n}function i(t){return e&&null===t.alternate&&(t.effectTag=2),t}function l(e,t,n,r){return null===t||6!==t.tag?((t=_o(n,e.mode,r)).return=e,t):((t=o(t,n,r)).return=e,t)}function u(e,t,n,r){return null!==t&&t.type===n.type?((r=o(t,n.props,r)).ref=ua(e,t,n),r.return=e,r):((r=xo(n,e.mode,r)).ref=ua(e,t,n),r.return=e,r)}function s(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=ko(n,e.mode,r)).return=e,t):((t=o(t,n.children||[],r)).return=e,t)}function c(e,t,n,r,a){return null===t||10!==t.tag?((t=wo(n,e.mode,r,a)).return=e,t):((t=o(t,n,r)).return=e,t)}function d(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=_o(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case lt:return(n=xo(t,e.mode,n)).ref=ua(e,null,t),n.return=e,n;case ut:return(t=ko(t,e.mode,n)).return=e,t}if(la(t)||gt(t))return(t=wo(t,e.mode,n,null)).return=e,t;sa(e,t)}return null}function p(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==o?null:l(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case lt:return n.key===o?n.type===st?c(e,t,n.props.children,r,o):u(e,t,n,r):null;case ut:return n.key===o?s(e,t,n,r):null}if(la(n)||gt(n))return null!==o?null:c(e,t,n,r,null);sa(e,n)}return null}function h(e,t,n,r,o){if("string"==typeof r||"number"==typeof r)return l(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case lt:return e=e.get(null===r.key?n:r.key)||null,r.type===st?c(t,e,r.props.children,o,r.key):u(t,e,r,o);case ut:return s(t,e=e.get(null===r.key?n:r.key)||null,r,o)}if(la(r)||gt(r))return c(t,e=e.get(n)||null,r,o,null);sa(t,r)}return null}function m(o,i,l,u){for(var s=null,c=null,f=i,m=i=0,v=null;null!==f&&m<l.length;m++){f.index>m?(v=f,f=null):v=f.sibling;var y=p(o,f,l[m],u);if(null===y){null===f&&(f=v);break}e&&f&&null===y.alternate&&t(o,f),i=a(y,i,m),null===c?s=y:c.sibling=y,c=y,f=v}if(m===l.length)return n(o,f),s;if(null===f){for(;m<l.length;m++)(f=d(o,l[m],u))&&(i=a(f,i,m),null===c?s=f:c.sibling=f,c=f);return s}for(f=r(o,f);m<l.length;m++)(v=h(f,o,m,l[m],u))&&(e&&null!==v.alternate&&f.delete(null===v.key?m:v.key),i=a(v,i,m),null===c?s=v:c.sibling=v,c=v);return e&&f.forEach(function(e){return t(o,e)}),s}function v(o,i,l,u){var s=gt(l);"function"!=typeof s&&f("150"),null==(l=s.call(l))&&f("151");for(var c=s=null,m=i,v=i=0,y=null,g=l.next();null!==m&&!g.done;v++,g=l.next()){m.index>v?(y=m,m=null):y=m.sibling;var b=p(o,m,g.value,u);if(null===b){m||(m=y);break}e&&m&&null===b.alternate&&t(o,m),i=a(b,i,v),null===c?s=b:c.sibling=b,c=b,m=y}if(g.done)return n(o,m),s;if(null===m){for(;!g.done;v++,g=l.next())null!==(g=d(o,g.value,u))&&(i=a(g,i,v),null===c?s=g:c.sibling=g,c=g);return s}for(m=r(o,m);!g.done;v++,g=l.next())null!==(g=h(m,o,v,g.value,u))&&(e&&null!==g.alternate&&m.delete(null===g.key?v:g.key),i=a(g,i,v),null===c?s=g:c.sibling=g,c=g);return e&&m.forEach(function(e){return t(o,e)}),s}return function(e,r,a,l){"object"==typeof a&&null!==a&&a.type===st&&null===a.key&&(a=a.props.children);var u="object"==typeof a&&null!==a;if(u)switch(a.$$typeof){case lt:e:{var s=a.key;for(u=r;null!==u;){if(u.key===s){if(10===u.tag?a.type===st:u.type===a.type){n(e,u.sibling),(r=o(u,a.type===st?a.props.children:a.props,l)).ref=ua(e,u,a),r.return=e,e=r;break e}n(e,u);break}t(e,u),u=u.sibling}a.type===st?((r=wo(a.props.children,e.mode,l,a.key)).return=e,e=r):((l=xo(a,e.mode,l)).ref=ua(e,r,a),l.return=e,e=l)}return i(e);case ut:e:{for(u=a.key;null!==r;){if(r.key===u){if(4===r.tag&&r.stateNode.containerInfo===a.containerInfo&&r.stateNode.implementation===a.implementation){n(e,r.sibling),(r=o(r,a.children||[],l)).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=ko(a,e.mode,l)).return=e,e=r}return i(e)}if("string"==typeof a||"number"==typeof a)return a=""+a,null!==r&&6===r.tag?(n(e,r.sibling),(r=o(r,a,l)).return=e,e=r):(n(e,r),(r=_o(a,e.mode,l)).return=e,e=r),i(e);if(la(a))return m(e,r,a,l);if(gt(a))return v(e,r,a,l);if(u&&sa(e,a),void 0===a)switch(e.tag){case 2:case 1:f("152",(l=e.type).displayName||l.name||"Component")}return n(e,r)}}var da=ca(!0),fa=ca(!1),pa=null,ha=null,ma=!1;function va(e,t){var n=new go(5,null,null,0);n.type="DELETED",n.stateNode=t,n.return=e,n.effectTag=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function ya(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);default:return!1}}function ga(e){if(ma){var t=ha;if(t){var n=t;if(!ya(e,t)){if(!(t=Jr(n))||!ya(e,t))return e.effectTag|=2,ma=!1,void(pa=e);va(pa,n)}pa=e,ha=Zr(t)}else e.effectTag|=2,ma=!1,pa=e}}function ba(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag;)e=e.return;pa=e}function xa(e){if(e!==pa)return!1;if(!ma)return ba(e),ma=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!Gr(t,e.memoizedProps))for(t=ha;t;)va(e,t),t=Jr(t);return ba(e),ha=pa?Jr(e.stateNode):null,!0}function wa(){ha=pa=null,ma=!1}function _a(e,t,n){ka(e,t,n,t.expirationTime)}function ka(e,t,n,r){t.child=null===e?fa(t,null,n,r):da(t,e.child,n,r)}function Pa(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.effectTag|=128)}function Ea(e,t,n,r,o){Pa(e,t);var a=0!=(64&t.effectTag);if(!n&&!a)return r&&yo(t,!1),Sa(e,t);n=t.stateNode,at.current=t;var i=a?null:n.render();return t.effectTag|=1,a&&(ka(e,t,null,o),t.child=null),ka(e,t,i,o),t.memoizedState=n.state,t.memoizedProps=n.props,r&&yo(t,!0),t.child}function Oa(e){var t=e.stateNode;t.pendingContext?ho(0,t.pendingContext,t.pendingContext!==t.context):t.context&&ho(0,t.context,!1),Zo(e,t.containerInfo)}function Ca(e,t,n,r){var o=e.child;for(null!==o&&(o.return=e);null!==o;){switch(o.tag){case 12:var a=0|o.stateNode;if(o.type===t&&0!=(a&n)){for(a=o;null!==a;){var i=a.alternate;if(0===a.expirationTime||a.expirationTime>r)a.expirationTime=r,null!==i&&(0===i.expirationTime||i.expirationTime>r)&&(i.expirationTime=r);else{if(null===i||!(0===i.expirationTime||i.expirationTime>r))break;i.expirationTime=r}a=a.return}a=null}else a=o.child;break;case 13:a=o.type===e.type?null:o.child;break;default:a=o.child}if(null!==a)a.return=o;else for(a=o;null!==a;){if(a===e){a=null;break}if(null!==(o=a.sibling)){o.return=a.return,a=o;break}a=a.return}o=a}}function Sa(e,t){if(null!==e&&t.child!==e.child&&f("153"),null!==t.child){var n=bo(e=t.child,e.pendingProps,e.expirationTime);for(t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=bo(e,e.pendingProps,e.expirationTime)).return=t;n.sibling=null}return t.child}function Ta(e,t,n){if(0===t.expirationTime||t.expirationTime>n){switch(t.tag){case 3:Oa(t);break;case 2:vo(t);break;case 4:Zo(t,t.stateNode.containerInfo);break;case 13:qo(t)}return null}switch(t.tag){case 0:null!==e&&f("155");var r=t.type,o=t.pendingProps,a=uo(t);return r=r(o,a=so(t,a)),t.effectTag|=1,"object"==typeof r&&null!==r&&"function"==typeof r.render&&void 0===r.$$typeof?(a=t.type,t.tag=2,t.memoizedState=null!==r.state&&void 0!==r.state?r.state:null,"function"==typeof(a=a.getDerivedStateFromProps)&&na(t,a,o),o=vo(t),r.updater=ra,t.stateNode=r,r._reactInternalFiber=t,ia(t,n),e=Ea(e,t,!0,o,n)):(t.tag=1,_a(e,t,r),t.memoizedProps=o,e=t.child),e;case 1:return o=t.type,n=t.pendingProps,io.current||t.memoizedProps!==n?(o=o(n,r=so(t,r=uo(t))),t.effectTag|=1,_a(e,t,o),t.memoizedProps=n,e=t.child):e=Sa(e,t),e;case 2:if(o=vo(t),null===e)if(null===t.stateNode){var i=t.pendingProps,l=t.type;r=uo(t);var u=2===t.tag&&null!=t.type.contextTypes;i=new l(i,a=u?so(t,r):d),t.memoizedState=null!==i.state&&void 0!==i.state?i.state:null,i.updater=ra,t.stateNode=i,i._reactInternalFiber=t,u&&((u=t.stateNode).__reactInternalMemoizedUnmaskedChildContext=r,u.__reactInternalMemoizedMaskedChildContext=a),ia(t,n),r=!0}else{l=t.type,r=t.stateNode,u=t.memoizedProps,a=t.pendingProps,r.props=u;var s=r.context;i=so(t,i=uo(t));var c=l.getDerivedStateFromProps;(l="function"==typeof c||"function"==typeof r.getSnapshotBeforeUpdate)||"function"!=typeof r.UNSAFE_componentWillReceiveProps&&"function"!=typeof r.componentWillReceiveProps||(u!==a||s!==i)&&aa(t,r,a,i),Mo=!1;var p=t.memoizedState;s=r.state=p;var h=t.updateQueue;null!==h&&(zo(t,h,a,r,n),s=t.memoizedState),u!==a||p!==s||io.current||Mo?("function"==typeof c&&(na(t,c,a),s=t.memoizedState),(u=Mo||oa(t,u,a,p,s,i))?(l||"function"!=typeof r.UNSAFE_componentWillMount&&"function"!=typeof r.componentWillMount||("function"==typeof r.componentWillMount&&r.componentWillMount(),"function"==typeof r.UNSAFE_componentWillMount&&r.UNSAFE_componentWillMount()),"function"==typeof r.componentDidMount&&(t.effectTag|=4)):("function"==typeof r.componentDidMount&&(t.effectTag|=4),t.memoizedProps=a,t.memoizedState=s),r.props=a,r.state=s,r.context=i,r=u):("function"==typeof r.componentDidMount&&(t.effectTag|=4),r=!1)}else l=t.type,r=t.stateNode,a=t.memoizedProps,u=t.pendingProps,r.props=a,s=r.context,i=so(t,i=uo(t)),(l="function"==typeof(c=l.getDerivedStateFromProps)||"function"==typeof r.getSnapshotBeforeUpdate)||"function"!=typeof r.UNSAFE_componentWillReceiveProps&&"function"!=typeof r.componentWillReceiveProps||(a!==u||s!==i)&&aa(t,r,u,i),Mo=!1,s=t.memoizedState,p=r.state=s,null!==(h=t.updateQueue)&&(zo(t,h,u,r,n),p=t.memoizedState),a!==u||s!==p||io.current||Mo?("function"==typeof c&&(na(t,c,u),p=t.memoizedState),(c=Mo||oa(t,a,u,s,p,i))?(l||"function"!=typeof r.UNSAFE_componentWillUpdate&&"function"!=typeof r.componentWillUpdate||("function"==typeof r.componentWillUpdate&&r.componentWillUpdate(u,p,i),"function"==typeof r.UNSAFE_componentWillUpdate&&r.UNSAFE_componentWillUpdate(u,p,i)),"function"==typeof r.componentDidUpdate&&(t.effectTag|=4),"function"==typeof r.getSnapshotBeforeUpdate&&(t.effectTag|=256)):("function"!=typeof r.componentDidUpdate||a===e.memoizedProps&&s===e.memoizedState||(t.effectTag|=4),"function"!=typeof r.getSnapshotBeforeUpdate||a===e.memoizedProps&&s===e.memoizedState||(t.effectTag|=256),t.memoizedProps=u,t.memoizedState=p),r.props=u,r.state=p,r.context=i,r=c):("function"!=typeof r.componentDidUpdate||a===e.memoizedProps&&s===e.memoizedState||(t.effectTag|=4),"function"!=typeof r.getSnapshotBeforeUpdate||a===e.memoizedProps&&s===e.memoizedState||(t.effectTag|=256),r=!1);return Ea(e,t,r,o,n);case 3:return Oa(t),null!==(o=t.updateQueue)?(r=null!==(r=t.memoizedState)?r.element:null,zo(t,o,t.pendingProps,null,n),(o=t.memoizedState.element)===r?(wa(),e=Sa(e,t)):(r=t.stateNode,(r=(null===e||null===e.child)&&r.hydrate)&&(ha=Zr(t.stateNode.containerInfo),pa=t,r=ma=!0),r?(t.effectTag|=2,t.child=fa(t,null,o,n)):(wa(),_a(e,t,o)),e=t.child)):(wa(),e=Sa(e,t)),e;case 5:return Jo(Qo.current),(o=Jo(Xo.current))!==(r=Pr(o,t.type))&&(oo(Yo,t),oo(Xo,r)),null===e&&ga(t),o=t.type,u=t.memoizedProps,r=t.pendingProps,a=null!==e?e.memoizedProps:null,io.current||u!==r||((u=1&t.mode&&!!r.hidden)&&(t.expirationTime=1073741823),u&&1073741823===n)?(u=r.children,Gr(o,r)?u=null:a&&Gr(o,a)&&(t.effectTag|=16),Pa(e,t),1073741823!==n&&1&t.mode&&r.hidden?(t.expirationTime=1073741823,t.memoizedProps=r,e=null):(_a(e,t,u),t.memoizedProps=r,e=t.child)):e=Sa(e,t),e;case 6:return null===e&&ga(t),t.memoizedProps=t.pendingProps,null;case 16:return null;case 4:return Zo(t,t.stateNode.containerInfo),o=t.pendingProps,io.current||t.memoizedProps!==o?(null===e?t.child=da(t,null,o,n):_a(e,t,o),t.memoizedProps=o,e=t.child):e=Sa(e,t),e;case 14:return o=t.type.render,n=t.pendingProps,r=t.ref,io.current||t.memoizedProps!==n||r!==(null!==e?e.ref:null)?(_a(e,t,o=o(n,r)),t.memoizedProps=n,e=t.child):e=Sa(e,t),e;case 10:return n=t.pendingProps,io.current||t.memoizedProps!==n?(_a(e,t,n),t.memoizedProps=n,e=t.child):e=Sa(e,t),e;case 11:return n=t.pendingProps.children,io.current||null!==n&&t.memoizedProps!==n?(_a(e,t,n),t.memoizedProps=n,e=t.child):e=Sa(e,t),e;case 15:return n=t.pendingProps,t.memoizedProps===n?e=Sa(e,t):(_a(e,t,n.children),t.memoizedProps=n,e=t.child),e;case 13:return function(e,t,n){var r=t.type._context,o=t.pendingProps,a=t.memoizedProps,i=!0;if(io.current)i=!1;else if(a===o)return t.stateNode=0,qo(t),Sa(e,t);var l=o.value;if(t.memoizedProps=o,null===a)l=1073741823;else if(a.value===o.value){if(a.children===o.children&&i)return t.stateNode=0,qo(t),Sa(e,t);l=0}else{var u=a.value;if(u===l&&(0!==u||1/u==1/l)||u!=u&&l!=l){if(a.children===o.children&&i)return t.stateNode=0,qo(t),Sa(e,t);l=0}else if(l="function"==typeof r._calculateChangedBits?r._calculateChangedBits(u,l):1073741823,0==(l|=0)){if(a.children===o.children&&i)return t.stateNode=0,qo(t),Sa(e,t)}else Ca(t,r,l,n)}return t.stateNode=l,qo(t),_a(e,t,o.children),t.child}(e,t,n);case 12:e:if(r=t.type,a=t.pendingProps,u=t.memoizedProps,o=r._currentValue,i=r._changedBits,io.current||0!==i||u!==a){if(t.memoizedProps=a,void 0!==(l=a.unstable_observedBits)&&null!==l||(l=1073741823),t.stateNode=l,0!=(i&l))Ca(t,r,i,n);else if(u===a){e=Sa(e,t);break e}n=(n=a.children)(o),t.effectTag|=1,_a(e,t,n),e=t.child}else e=Sa(e,t);return e;default:f("156")}}function Ma(e){e.effectTag|=4}var ja=void 0,Na=void 0,La=void 0;function Ra(e,t){var n=t.pendingProps;switch(t.tag){case 1:return null;case 2:return fo(t),null;case 3:ea(),po();var r=t.stateNode;return r.pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(xa(t),t.effectTag&=-3),ja(t),null;case 5:ta(t),r=Jo(Qo.current);var o=t.type;if(null!==e&&null!=t.stateNode){var a=e.memoizedProps,i=t.stateNode,l=Jo(Xo.current);i=Wr(i,o,a,n,r),Na(e,t,i,o,a,n,r,l),e.ref!==t.ref&&(t.effectTag|=128)}else{if(!n)return null===t.stateNode&&f("166"),null;if(e=Jo(Xo.current),xa(t))n=t.stateNode,o=t.type,a=t.memoizedProps,n[B]=t,n[U]=a,r=Ur(n,o,a,e,r),t.updateQueue=r,null!==r&&Ma(t);else{(e=Ir(o,n,r,e))[B]=t,e[U]=n;e:for(a=t.child;null!==a;){if(5===a.tag||6===a.tag)e.appendChild(a.stateNode);else if(4!==a.tag&&null!==a.child){a.child.return=a,a=a.child;continue}if(a===t)break;for(;null===a.sibling;){if(null===a.return||a.return===t)break e;a=a.return}a.sibling.return=a.return,a=a.sibling}zr(e,o,n,r),Kr(o,n)&&Ma(t),t.stateNode=e}null!==t.ref&&(t.effectTag|=128)}return null;case 6:if(e&&null!=t.stateNode)La(e,t,e.memoizedProps,n);else{if("string"!=typeof n)return null===t.stateNode&&f("166"),null;r=Jo(Qo.current),Jo(Xo.current),xa(t)?(r=t.stateNode,n=t.memoizedProps,r[B]=t,Hr(r,n)&&Ma(t)):((r=Fr(n,r))[B]=t,t.stateNode=r)}return null;case 14:case 16:case 10:case 11:case 15:return null;case 4:return ea(),ja(t),null;case 13:return Ko(t),null;case 12:return null;case 0:f("167");default:f("156")}}function Da(e,t){var n=t.source;null===t.stack&&null!==n&&xt(n),null!==n&&bt(n),t=t.value,null!==e&&2===e.tag&&bt(e);try{t&&t.suppressReactErrorLogging||console.error(t)}catch(e){e&&e.suppressReactErrorLogging||console.error(e)}}function Aa(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){di(e,t)}else t.current=null}function Ia(e){switch(To(e),e.tag){case 2:Aa(e);var t=e.stateNode;if("function"==typeof t.componentWillUnmount)try{t.props=e.memoizedProps,t.state=e.memoizedState,t.componentWillUnmount()}catch(t){di(e,t)}break;case 5:Aa(e);break;case 4:Wa(e)}}function Fa(e){return 5===e.tag||3===e.tag||4===e.tag}function za(e){e:{for(var t=e.return;null!==t;){if(Fa(t)){var n=t;break e}t=t.return}f("160"),n=void 0}var r=t=void 0;switch(n.tag){case 5:t=n.stateNode,r=!1;break;case 3:case 4:t=n.stateNode.containerInfo,r=!0;break;default:f("161")}16&n.effectTag&&(Sr(t,""),n.effectTag&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||Fa(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag;){if(2&n.effectTag)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.effectTag)){n=n.stateNode;break e}}for(var o=e;;){if(5===o.tag||6===o.tag)if(n)if(r){var a=t,i=o.stateNode,l=n;8===a.nodeType?a.parentNode.insertBefore(i,l):a.insertBefore(i,l)}else t.insertBefore(o.stateNode,n);else r?(a=t,i=o.stateNode,8===a.nodeType?a.parentNode.insertBefore(i,a):a.appendChild(i)):t.appendChild(o.stateNode);else if(4!==o.tag&&null!==o.child){o.child.return=o,o=o.child;continue}if(o===e)break;for(;null===o.sibling;){if(null===o.return||o.return===e)return;o=o.return}o.sibling.return=o.return,o=o.sibling}}function Wa(e){for(var t=e,n=!1,r=void 0,o=void 0;;){if(!n){n=t.return;e:for(;;){switch(null===n&&f("160"),n.tag){case 5:r=n.stateNode,o=!1;break e;case 3:case 4:r=n.stateNode.containerInfo,o=!0;break e}n=n.return}n=!0}if(5===t.tag||6===t.tag){e:for(var a=t,i=a;;)if(Ia(i),null!==i.child&&4!==i.tag)i.child.return=i,i=i.child;else{if(i===a)break;for(;null===i.sibling;){if(null===i.return||i.return===a)break e;i=i.return}i.sibling.return=i.return,i=i.sibling}o?(a=r,i=t.stateNode,8===a.nodeType?a.parentNode.removeChild(i):a.removeChild(i)):r.removeChild(t.stateNode)}else if(4===t.tag?r=t.stateNode.containerInfo:Ia(t),null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return;4===(t=t.return).tag&&(n=!1)}t.sibling.return=t.return,t=t.sibling}}function Ba(e,t){switch(t.tag){case 2:break;case 5:var n=t.stateNode;if(null!=n){var r=t.memoizedProps;e=null!==e?e.memoizedProps:r;var o=t.type,a=t.updateQueue;t.updateQueue=null,null!==a&&(n[U]=r,Br(n,a,o,e,r))}break;case 6:null===t.stateNode&&f("162"),t.stateNode.nodeValue=t.memoizedProps;break;case 3:case 15:case 16:break;default:f("163")}}function Ua(e,t,n){(n=Lo(n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Gi(r),Da(e,t)},n}function Ha(e,t,n){(n=Lo(n)).tag=3;var r=e.stateNode;return null!==r&&"function"==typeof r.componentDidCatch&&(n.callback=function(){null===ii?ii=new Set([this]):ii.add(this);var n=t.value,r=t.stack;Da(e,t),this.componentDidCatch(n,{componentStack:null!==r?r:""})}),n}function Va(e,t,n,r,o,a){n.effectTag|=512,n.firstEffect=n.lastEffect=null,r=Uo(r,n),e=t;do{switch(e.tag){case 3:return e.effectTag|=1024,void Ao(e,r=Ua(e,r,a),a);case 2:if(t=r,n=e.stateNode,0==(64&e.effectTag)&&null!==n&&"function"==typeof n.componentDidCatch&&(null===ii||!ii.has(n)))return e.effectTag|=1024,void Ao(e,r=Ha(e,t,a),a)}e=e.return}while(null!==e)}function $a(e){switch(e.tag){case 2:fo(e);var t=e.effectTag;return 1024&t?(e.effectTag=-1025&t|64,e):null;case 3:return ea(),po(),1024&(t=e.effectTag)?(e.effectTag=-1025&t|64,e):null;case 5:return ta(e),null;case 16:return 1024&(t=e.effectTag)?(e.effectTag=-1025&t|64,e):null;case 4:return ea(),null;case 13:return Ko(e),null;default:return null}}ja=function(){},Na=function(e,t,n){(t.updateQueue=n)&&Ma(t)},La=function(e,t,n,r){n!==r&&Ma(t)};var qa=Xr(),Ka=2,Ga=qa,Xa=0,Ya=0,Qa=!1,Ja=null,Za=null,ei=0,ti=-1,ni=!1,ri=null,oi=!1,ai=!1,ii=null;function li(){if(null!==Ja)for(var e=Ja.return;null!==e;){var t=e;switch(t.tag){case 2:fo(t);break;case 3:ea(),po();break;case 5:ta(t);break;case 4:ea();break;case 13:Ko(t)}e=e.return}Za=null,ei=0,ti=-1,ni=!1,Ja=null,ai=!1}function ui(e){for(;;){var t=e.alternate,n=e.return,r=e.sibling;if(0==(512&e.effectTag)){t=Ra(t,e);var o=e;if(1073741823===ei||1073741823!==o.expirationTime){var a=0;switch(o.tag){case 3:case 2:var i=o.updateQueue;null!==i&&(a=i.expirationTime)}for(i=o.child;null!==i;)0!==i.expirationTime&&(0===a||a>i.expirationTime)&&(a=i.expirationTime),i=i.sibling;o.expirationTime=a}if(null!==t)return t;if(null!==n&&0==(512&n.effectTag)&&(null===n.firstEffect&&(n.firstEffect=e.firstEffect),null!==e.lastEffect&&(null!==n.lastEffect&&(n.lastEffect.nextEffect=e.firstEffect),n.lastEffect=e.lastEffect),1<e.effectTag&&(null!==n.lastEffect?n.lastEffect.nextEffect=e:n.firstEffect=e,n.lastEffect=e)),null!==r)return r;if(null===n){ai=!0;break}e=n}else{if(null!==(e=$a(e)))return e.effectTag&=511,e;if(null!==n&&(n.firstEffect=n.lastEffect=null,n.effectTag|=512),null!==r)return r;if(null===n)break;e=n}}return null}function si(e){var t=Ta(e.alternate,e,ei);return null===t&&(t=ui(e)),at.current=null,t}function ci(e,t,n){Qa&&f("243"),Qa=!0,t===ei&&e===Za&&null!==Ja||(li(),ei=t,ti=-1,Ja=bo((Za=e).current,null,ei),e.pendingCommitExpirationTime=0);var r=!1;for(ni=!n||ei<=Ka;;){try{if(n)for(;null!==Ja&&!Ki();)Ja=si(Ja);else for(;null!==Ja;)Ja=si(Ja)}catch(t){if(null===Ja)r=!0,Gi(t);else{null===Ja&&f("271");var o=(n=Ja).return;if(null===o){r=!0,Gi(t);break}Va(e,o,n,t,0,ei),Ja=ui(n)}}break}if(Qa=!1,r)return null;if(null===Ja){if(ai)return e.pendingCommitExpirationTime=t,e.current.alternate;ni&&f("262"),0<=ti&&setTimeout(function(){var t=e.current.expirationTime;0!==t&&(0===e.remainingExpirationTime||e.remainingExpirationTime<t)&&Fi(e,t)},ti),function(e){null===ki&&f("246"),ki.remainingExpirationTime=e}(e.current.expirationTime)}return null}function di(e,t){var n;e:{for(Qa&&!oi&&f("263"),n=e.return;null!==n;){switch(n.tag){case 2:var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromCatch||"function"==typeof r.componentDidCatch&&(null===ii||!ii.has(r))){Do(n,e=Ha(n,e=Uo(t,e),1),1),hi(n,1),n=void 0;break e}break;case 3:Do(n,e=Ua(n,e=Uo(t,e),1),1),hi(n,1),n=void 0;break e}n=n.return}3===e.tag&&(Do(e,n=Ua(e,n=Uo(t,e),1),1),hi(e,1)),n=void 0}return n}function fi(){var e=2+25*(1+((mi()-2+500)/25|0));return e<=Xa&&(e=Xa+1),Xa=e}function pi(e,t){return e=0!==Ya?Ya:Qa?oi?1:ei:1&t.mode?Ni?2+10*(1+((e-2+15)/10|0)):2+25*(1+((e-2+500)/25|0)):1,Ni&&(0===Ei||e>Ei)&&(Ei=e),e}function hi(e,t){for(;null!==e;){if((0===e.expirationTime||e.expirationTime>t)&&(e.expirationTime=t),null!==e.alternate&&(0===e.alternate.expirationTime||e.alternate.expirationTime>t)&&(e.alternate.expirationTime=t),null===e.return){if(3!==e.tag)break;var n=e.stateNode;!Qa&&0!==ei&&t<ei&&li();var r=n.current.expirationTime;Qa&&!oi&&Za===n||Fi(n,r),Di>Ri&&f("185")}e=e.return}}function mi(){return Ga=Xr()-qa,Ka=2+(Ga/10|0)}function vi(e){var t=Ya;Ya=2+25*(1+((mi()-2+500)/25|0));try{return e()}finally{Ya=t}}function yi(e,t,n,r,o){var a=Ya;Ya=1;try{return e(t,n,r,o)}finally{Ya=a}}var gi=null,bi=null,xi=0,wi=-1,_i=!1,ki=null,Pi=0,Ei=0,Oi=!1,Ci=!1,Si=null,Ti=null,Mi=!1,ji=!1,Ni=!1,Li=null,Ri=1e3,Di=0,Ai=1;function Ii(e){if(0!==xi){if(e>xi)return;Qr(wi)}var t=Xr()-qa;xi=e,wi=Yr(Wi,{timeout:10*(e-2)-t})}function Fi(e,t){if(null===e.nextScheduledRoot)e.remainingExpirationTime=t,null===bi?(gi=bi=e,e.nextScheduledRoot=e):(bi=bi.nextScheduledRoot=e).nextScheduledRoot=gi;else{var n=e.remainingExpirationTime;(0===n||t<n)&&(e.remainingExpirationTime=t)}_i||(Mi?ji&&(ki=e,Pi=1,$i(e,1,!1)):1===t?Bi():Ii(t))}function zi(){var e=0,t=null;if(null!==bi)for(var n=bi,r=gi;null!==r;){var o=r.remainingExpirationTime;if(0===o){if((null===n||null===bi)&&f("244"),r===r.nextScheduledRoot){gi=bi=r.nextScheduledRoot=null;break}if(r===gi)gi=o=r.nextScheduledRoot,bi.nextScheduledRoot=o,r.nextScheduledRoot=null;else{if(r===bi){(bi=n).nextScheduledRoot=gi,r.nextScheduledRoot=null;break}n.nextScheduledRoot=r.nextScheduledRoot,r.nextScheduledRoot=null}r=n.nextScheduledRoot}else{if((0===e||o<e)&&(e=o,t=r),r===bi)break;n=r,r=r.nextScheduledRoot}}null!==(n=ki)&&n===t&&1===e?Di++:Di=0,ki=t,Pi=e}function Wi(e){Ui(0,!0,e)}function Bi(){Ui(1,!1,null)}function Ui(e,t,n){if(Ti=n,zi(),t)for(;null!==ki&&0!==Pi&&(0===e||e>=Pi)&&(!Oi||mi()>=Pi);)mi(),$i(ki,Pi,!Oi),zi();else for(;null!==ki&&0!==Pi&&(0===e||e>=Pi);)$i(ki,Pi,!1),zi();null!==Ti&&(xi=0,wi=-1),0!==Pi&&Ii(Pi),Ti=null,Oi=!1,Vi()}function Hi(e,t){_i&&f("253"),ki=e,Pi=t,$i(e,t,!1),Bi(),Vi()}function Vi(){if(Di=0,null!==Li){var e=Li;Li=null;for(var t=0;t<e.length;t++){var n=e[t];try{n._onComplete()}catch(e){Ci||(Ci=!0,Si=e)}}}if(Ci)throw e=Si,Si=null,Ci=!1,e}function $i(e,t,n){_i&&f("245"),_i=!0,n?null!==(n=e.finishedWork)?qi(e,n,t):(e.finishedWork=null,null!==(n=ci(e,t,!0))&&(Ki()?e.finishedWork=n:qi(e,n,t))):null!==(n=e.finishedWork)?qi(e,n,t):(e.finishedWork=null,null!==(n=ci(e,t,!1))&&qi(e,n,t)),_i=!1}function qi(e,t,n){var r=e.firstBatch;if(null!==r&&r._expirationTime<=n&&(null===Li?Li=[r]:Li.push(r),r._defer))return e.finishedWork=t,void(e.remainingExpirationTime=0);if(e.finishedWork=null,oi=Qa=!0,(n=t.stateNode).current===t&&f("177"),0===(r=n.pendingCommitExpirationTime)&&f("261"),n.pendingCommitExpirationTime=0,mi(),at.current=null,1<t.effectTag)if(null!==t.lastEffect){t.lastEffect.nextEffect=t;var o=t.firstEffect}else o=t;else o=t.firstEffect;$r=Tn;var a=u();if(Un(a)){if("selectionStart"in a)var i={start:a.selectionStart,end:a.selectionEnd};else e:{var l=window.getSelection&&window.getSelection();if(l&&0!==l.rangeCount){i=l.anchorNode;var s=l.anchorOffset,d=l.focusNode;l=l.focusOffset;try{i.nodeType,d.nodeType}catch(e){i=null;break e}var p=0,h=-1,m=-1,v=0,y=0,g=a,b=null;t:for(;;){for(var x;g!==i||0!==s&&3!==g.nodeType||(h=p+s),g!==d||0!==l&&3!==g.nodeType||(m=p+l),3===g.nodeType&&(p+=g.nodeValue.length),null!==(x=g.firstChild);)b=g,g=x;for(;;){if(g===a)break t;if(b===i&&++v===s&&(h=p),b===d&&++y===l&&(m=p),null!==(x=g.nextSibling))break;b=(g=b).parentNode}g=x}i=-1===h||-1===m?null:{start:h,end:m}}else i=null}i=i||{start:0,end:0}}else i=null;for(qr={focusedElem:a,selectionRange:i},Mn(!1),ri=o;null!==ri;){a=!1,i=void 0;try{for(;null!==ri;){if(256&ri.effectTag){var w=ri.alternate;switch((s=ri).tag){case 2:if(256&s.effectTag&&null!==w){var _=w.memoizedProps,k=w.memoizedState,P=s.stateNode;P.props=s.memoizedProps,P.state=s.memoizedState;var E=P.getSnapshotBeforeUpdate(_,k);P.__reactInternalSnapshotBeforeUpdate=E}break;case 3:case 5:case 6:case 4:break;default:f("163")}}ri=ri.nextEffect}}catch(e){a=!0,i=e}a&&(null===ri&&f("178"),di(ri,i),null!==ri&&(ri=ri.nextEffect))}for(ri=o;null!==ri;){w=!1,_=void 0;try{for(;null!==ri;){var O=ri.effectTag;if(16&O&&Sr(ri.stateNode,""),128&O){var C=ri.alternate;if(null!==C){var S=C.ref;null!==S&&("function"==typeof S?S(null):S.current=null)}}switch(14&O){case 2:za(ri),ri.effectTag&=-3;break;case 6:za(ri),ri.effectTag&=-3,Ba(ri.alternate,ri);break;case 4:Ba(ri.alternate,ri);break;case 8:Wa(k=ri),k.return=null,k.child=null,k.alternate&&(k.alternate.child=null,k.alternate.return=null)}ri=ri.nextEffect}}catch(e){w=!0,_=e}w&&(null===ri&&f("178"),di(ri,_),null!==ri&&(ri=ri.nextEffect))}if(S=qr,C=u(),O=S.focusedElem,w=S.selectionRange,C!==O&&c(document.documentElement,O)){Un(O)&&(C=w.start,void 0===(S=w.end)&&(S=C),"selectionStart"in O?(O.selectionStart=C,O.selectionEnd=Math.min(S,O.value.length)):window.getSelection&&(C=window.getSelection(),_=O[he()].length,S=Math.min(w.start,_),w=void 0===w.end?S:Math.min(w.end,_),!C.extend&&S>w&&(_=w,w=S,S=_),_=Bn(O,S),k=Bn(O,w),_&&k&&(1!==C.rangeCount||C.anchorNode!==_.node||C.anchorOffset!==_.offset||C.focusNode!==k.node||C.focusOffset!==k.offset)&&((P=document.createRange()).setStart(_.node,_.offset),C.removeAllRanges(),S>w?(C.addRange(P),C.extend(k.node,k.offset)):(P.setEnd(k.node,k.offset),C.addRange(P))))),C=[];for(S=O;S=S.parentNode;)1===S.nodeType&&C.push({element:S,left:S.scrollLeft,top:S.scrollTop});for(O.focus(),O=0;O<C.length;O++)(S=C[O]).element.scrollLeft=S.left,S.element.scrollTop=S.top}for(qr=null,Mn($r),$r=null,n.current=t,ri=o;null!==ri;){o=!1,O=void 0;try{for(C=r;null!==ri;){var T=ri.effectTag;if(36&T){var M=ri.alternate;switch(w=C,(S=ri).tag){case 2:var j=S.stateNode;if(4&S.effectTag)if(null===M)j.props=S.memoizedProps,j.state=S.memoizedState,j.componentDidMount();else{var N=M.memoizedProps,L=M.memoizedState;j.props=S.memoizedProps,j.state=S.memoizedState,j.componentDidUpdate(N,L,j.__reactInternalSnapshotBeforeUpdate)}var R=S.updateQueue;null!==R&&(j.props=S.memoizedProps,j.state=S.memoizedState,Bo(S,R,j));break;case 3:var D=S.updateQueue;if(null!==D){if(_=null,null!==S.child)switch(S.child.tag){case 5:_=S.child.stateNode;break;case 2:_=S.child.stateNode}Bo(S,D,_)}break;case 5:var A=S.stateNode;null===M&&4&S.effectTag&&Kr(S.type,S.memoizedProps)&&A.focus();break;case 6:case 4:case 15:case 16:break;default:f("163")}}if(128&T){S=void 0;var I=ri.ref;if(null!==I){var F=ri.stateNode;switch(ri.tag){case 5:S=F;break;default:S=F}"function"==typeof I?I(S):I.current=S}}var z=ri.nextEffect;ri.nextEffect=null,ri=z}}catch(e){o=!0,O=e}o&&(null===ri&&f("178"),di(ri,O),null!==ri&&(ri=ri.nextEffect))}Qa=oi=!1,So(t.stateNode),0===(t=n.current.expirationTime)&&(ii=null),e.remainingExpirationTime=t}function Ki(){return!(null===Ti||Ti.timeRemaining()>Ai)&&(Oi=!0)}function Gi(e){null===ki&&f("246"),ki.remainingExpirationTime=0,Ci||(Ci=!0,Si=e)}function Xi(e,t){var n=Mi;Mi=!0;try{return e(t)}finally{(Mi=n)||_i||Bi()}}function Yi(e,t){if(Mi&&!ji){ji=!0;try{return e(t)}finally{ji=!1}}return e(t)}function Qi(e,t){_i&&f("187");var n=Mi;Mi=!0;try{return yi(e,t)}finally{Mi=n,Bi()}}function Ji(e){var t=Mi;Mi=!0;try{yi(e)}finally{(Mi=t)||_i||Ui(1,!1,null)}}function Zi(e,t,n,r,o){var a=t.current;if(n){var i;n=n._reactInternalFiber;e:{for(2===an(n)&&2===n.tag||f("170"),i=n;3!==i.tag;){if(co(i)){i=i.stateNode.__reactInternalMemoizedMergedChildContext;break e}(i=i.return)||f("171")}i=i.stateNode.context}n=co(n)?mo(n,i):i}else n=d;return null===t.context?t.context=n:t.pendingContext=n,t=o,(o=Lo(r)).payload={element:e},null!==(t=void 0===t?null:t)&&(o.callback=t),Do(a,o,r),hi(a,r),r}function el(e){var t=e._reactInternalFiber;return void 0===t&&("function"==typeof e.render?f("188"):f("268",Object.keys(e))),null===(e=sn(t))?null:e.stateNode}function tl(e,t,n,r){var o=t.current;return Zi(e,t,n,o=pi(mi(),o),r)}function nl(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function rl(e){var t=e.findFiberByHostInstance;return function(e){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(t.isDisabled||!t.supportsFiber)return!0;try{var n=t.inject(e);Eo=Co(function(e){return t.onCommitFiberRoot(n,e)}),Oo=Co(function(e){return t.onCommitFiberUnmount(n,e)})}catch(e){}return!0}(i({},e,{findHostInstanceByFiber:function(e){return null===(e=sn(e))?null:e.stateNode},findFiberByHostInstance:function(e){return t?t(e):null}}))}var ol=Xi,al=function(e,t,n){if(Ni)return e(t,n);Mi||_i||0===Ei||(Ui(Ei,!1,null),Ei=0);var r=Ni,o=Mi;Mi=Ni=!0;try{return e(t,n)}finally{Ni=r,(Mi=o)||_i||Bi()}},il=function(){_i||0===Ei||(Ui(Ei,!1,null),Ei=0)};function ll(e){this._expirationTime=fi(),this._root=e,this._callbacks=this._next=null,this._hasChildren=this._didComplete=!1,this._children=null,this._defer=!0}function ul(){this._callbacks=null,this._didCommit=!1,this._onCommit=this._onCommit.bind(this)}function sl(e,t,n){this._internalRoot=Po(e,t,n)}function cl(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function dl(e,t,n,r,o){cl(n)||f("200");var a=n._reactRootContainer;if(a){if("function"==typeof o){var i=o;o=function(){var e=nl(a._internalRoot);i.call(e)}}null!=e?a.legacy_renderSubtreeIntoContainer(e,t,o):a.render(t,o)}else{if(a=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new sl(e,!1,t)}(n,r),"function"==typeof o){var l=o;o=function(){var e=nl(a._internalRoot);l.call(e)}}Yi(function(){null!=e?a.legacy_renderSubtreeIntoContainer(e,t,o):a.render(t,o)})}return nl(a._internalRoot)}function fl(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;return cl(t)||f("200"),function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:ut,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)}ze.injectFiberControlledHostComponent(Vr),ll.prototype.render=function(e){this._defer||f("250"),this._hasChildren=!0,this._children=e;var t=this._root._internalRoot,n=this._expirationTime,r=new ul;return Zi(e,t,null,n,r._onCommit),r},ll.prototype.then=function(e){if(this._didComplete)e();else{var t=this._callbacks;null===t&&(t=this._callbacks=[]),t.push(e)}},ll.prototype.commit=function(){var e=this._root._internalRoot,t=e.firstBatch;if(this._defer&&null!==t||f("251"),this._hasChildren){var n=this._expirationTime;if(t!==this){this._hasChildren&&(n=this._expirationTime=t._expirationTime,this.render(this._children));for(var r=null,o=t;o!==this;)r=o,o=o._next;null===r&&f("251"),r._next=o._next,this._next=t,e.firstBatch=this}this._defer=!1,Hi(e,n),t=this._next,this._next=null,null!==(t=e.firstBatch=t)&&t._hasChildren&&t.render(t._children)}else this._next=null,this._defer=!1},ll.prototype._onComplete=function(){if(!this._didComplete){this._didComplete=!0;var e=this._callbacks;if(null!==e)for(var t=0;t<e.length;t++)(0,e[t])()}},ul.prototype.then=function(e){if(this._didCommit)e();else{var t=this._callbacks;null===t&&(t=this._callbacks=[]),t.push(e)}},ul.prototype._onCommit=function(){if(!this._didCommit){this._didCommit=!0;var e=this._callbacks;if(null!==e)for(var t=0;t<e.length;t++){var n=e[t];"function"!=typeof n&&f("191",n),n()}}},sl.prototype.render=function(e,t){var n=this._internalRoot,r=new ul;return null!==(t=void 0===t?null:t)&&r.then(t),tl(e,n,null,r._onCommit),r},sl.prototype.unmount=function(e){var t=this._internalRoot,n=new ul;return null!==(e=void 0===e?null:e)&&n.then(e),tl(null,t,null,n._onCommit),n},sl.prototype.legacy_renderSubtreeIntoContainer=function(e,t,n){var r=this._internalRoot,o=new ul;return null!==(n=void 0===n?null:n)&&o.then(n),tl(t,r,e,o._onCommit),o},sl.prototype.createBatch=function(){var e=new ll(this),t=e._expirationTime,n=this._internalRoot,r=n.firstBatch;if(null===r)n.firstBatch=e,e._next=null;else{for(n=null;null!==r&&r._expirationTime<=t;)n=r,r=r._next;e._next=r,null!==n&&(n._next=e)}return e},Ke=ol,Ge=al,Xe=il;var pl={createPortal:fl,findDOMNode:function(e){return null==e?null:1===e.nodeType?e:el(e)},hydrate:function(e,t,n){return dl(null,e,t,!0,n)},render:function(e,t,n){return dl(null,e,t,!1,n)},unstable_renderSubtreeIntoContainer:function(e,t,n,r){return(null==e||void 0===e._reactInternalFiber)&&f("38"),dl(e,t,n,!1,r)},unmountComponentAtNode:function(e){return cl(e)||f("40"),!!e._reactRootContainer&&(Yi(function(){dl(null,null,e,!1,function(){e._reactRootContainer=null})}),!0)},unstable_createPortal:function(){return fl.apply(void 0,arguments)},unstable_batchedUpdates:Xi,unstable_deferredUpdates:vi,flushSync:Qi,unstable_flushControlled:Ji,__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{EventPluginHub:z,EventPluginRegistry:P,EventPropagators:ne,ReactControlledComponent:qe,ReactDOMComponentTree:q,ReactDOMEventListener:Dn},unstable_createRoot:function(e,t){return new sl(e,!0,null!=t&&!0===t.hydrate)}};rl({findFiberByHostInstance:H,bundleType:0,version:"16.4.0",rendererPackageName:"react-dom"});var hl={default:pl},ml=hl&&pl||hl;e.exports=ml.default?ml.default:ml},function(e,t,n){"use strict";
/** @license React v16.4.0
 * react.production.min.js
 *
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(138),o=n(84),a=n(137),i=n(83),l="function"==typeof Symbol&&Symbol.for,u=l?Symbol.for("react.element"):60103,s=l?Symbol.for("react.portal"):60106,c=l?Symbol.for("react.fragment"):60107,d=l?Symbol.for("react.strict_mode"):60108,f=l?Symbol.for("react.profiler"):60114,p=l?Symbol.for("react.provider"):60109,h=l?Symbol.for("react.context"):60110,m=l?Symbol.for("react.async_mode"):60111,v=l?Symbol.for("react.forward_ref"):60112;l&&Symbol.for("react.timeout");var y="function"==typeof Symbol&&Symbol.iterator;function g(e){for(var t=arguments.length-1,n="https://reactjs.org/docs/error-decoder.html?invariant="+e,r=0;r<t;r++)n+="&args[]="+encodeURIComponent(arguments[r+1]);o(!1,"Minified React error #"+e+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",n)}var b={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}};function x(e,t,n){this.props=e,this.context=t,this.refs=a,this.updater=n||b}function w(){}function _(e,t,n){this.props=e,this.context=t,this.refs=a,this.updater=n||b}x.prototype.isReactComponent={},x.prototype.setState=function(e,t){"object"!=typeof e&&"function"!=typeof e&&null!=e&&g("85"),this.updater.enqueueSetState(this,e,t,"setState")},x.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},w.prototype=x.prototype;var k=_.prototype=new w;k.constructor=_,r(k,x.prototype),k.isPureReactComponent=!0;var P={current:null},E=Object.prototype.hasOwnProperty,O={key:!0,ref:!0,__self:!0,__source:!0};function C(e,t,n){var r=void 0,o={},a=null,i=null;if(null!=t)for(r in void 0!==t.ref&&(i=t.ref),void 0!==t.key&&(a=""+t.key),t)E.call(t,r)&&!O.hasOwnProperty(r)&&(o[r]=t[r]);var l=arguments.length-2;if(1===l)o.children=n;else if(1<l){for(var s=Array(l),c=0;c<l;c++)s[c]=arguments[c+2];o.children=s}if(e&&e.defaultProps)for(r in l=e.defaultProps)void 0===o[r]&&(o[r]=l[r]);return{$$typeof:u,type:e,key:a,ref:i,props:o,_owner:P.current}}function S(e){return"object"==typeof e&&null!==e&&e.$$typeof===u}var T=/\/+/g,M=[];function j(e,t,n,r){if(M.length){var o=M.pop();return o.result=e,o.keyPrefix=t,o.func=n,o.context=r,o.count=0,o}return{result:e,keyPrefix:t,func:n,context:r,count:0}}function N(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>M.length&&M.push(e)}function L(e,t,n,r){var o=typeof e;"undefined"!==o&&"boolean"!==o||(e=null);var a=!1;if(null===e)a=!0;else switch(o){case"string":case"number":a=!0;break;case"object":switch(e.$$typeof){case u:case s:a=!0}}if(a)return n(r,e,""===t?"."+R(e,0):t),1;if(a=0,t=""===t?".":t+":",Array.isArray(e))for(var i=0;i<e.length;i++){var l=t+R(o=e[i],i);a+=L(o,l,n,r)}else if(null===e||void 0===e?l=null:l="function"==typeof(l=y&&e[y]||e["@@iterator"])?l:null,"function"==typeof l)for(e=l.call(e),i=0;!(o=e.next()).done;)a+=L(o=o.value,l=t+R(o,i++),n,r);else"object"===o&&g("31","[object Object]"===(n=""+e)?"object with keys {"+Object.keys(e).join(", ")+"}":n,"");return a}function R(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,function(e){return t[e]})}(e.key):t.toString(36)}function D(e,t){e.func.call(e.context,t,e.count++)}function A(e,t,n){var r=e.result,o=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?I(e,r,n,i.thatReturnsArgument):null!=e&&(S(e)&&(t=o+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(T,"$&/")+"/")+n,e={$$typeof:u,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}),r.push(e))}function I(e,t,n,r,o){var a="";null!=n&&(a=(""+n).replace(T,"$&/")+"/"),t=j(t,a,r,o),null==e||L(e,"",A,t),N(t)}var F={Children:{map:function(e,t,n){if(null==e)return e;var r=[];return I(e,r,null,t,n),r},forEach:function(e,t,n){if(null==e)return e;t=j(null,null,t,n),null==e||L(e,"",D,t),N(t)},count:function(e){return null==e?0:L(e,"",i.thatReturnsNull,null)},toArray:function(e){var t=[];return I(e,t,null,i.thatReturnsArgument),t},only:function(e){return S(e)||g("143"),e}},createRef:function(){return{current:null}},Component:x,PureComponent:_,createContext:function(e,t){return void 0===t&&(t=null),(e={$$typeof:h,_calculateChangedBits:t,_defaultValue:e,_currentValue:e,_currentValue2:e,_changedBits:0,_changedBits2:0,Provider:null,Consumer:null}).Provider={$$typeof:p,_context:e},e.Consumer=e},forwardRef:function(e){return{$$typeof:v,render:e}},Fragment:c,StrictMode:d,unstable_AsyncMode:m,unstable_Profiler:f,createElement:C,cloneElement:function(e,t,n){(null===e||void 0===e)&&g("267",e);var o=void 0,a=r({},e.props),i=e.key,l=e.ref,s=e._owner;if(null!=t){void 0!==t.ref&&(l=t.ref,s=P.current),void 0!==t.key&&(i=""+t.key);var c=void 0;for(o in e.type&&e.type.defaultProps&&(c=e.type.defaultProps),t)E.call(t,o)&&!O.hasOwnProperty(o)&&(a[o]=void 0===t[o]&&void 0!==c?c[o]:t[o])}if(1===(o=arguments.length-2))a.children=n;else if(1<o){c=Array(o);for(var d=0;d<o;d++)c[d]=arguments[d+2];a.children=c}return{$$typeof:u,type:e.type,key:i,ref:l,props:a,_owner:s}},createFactory:function(e){var t=C.bind(null,e);return t.type=e,t},isValidElement:S,version:"16.4.0",__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{ReactCurrentOwner:P,assign:r}},z={default:F},W=z&&F||z;e.exports=W.default?W.default:W},function(e,t,n){"use strict";var r=i(n(2)),o=i(n(15));n(534);var a=i(n(529));function i(e){return e&&e.__esModule?e:{default:e}}o.default.render(r.default.createElement(a.default,null),document.getElementById("index"))},function(e,t,n){e.exports=n(542)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9pbnRlcm9wUmVxdWlyZURlZmF1bHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vb2JqZWN0V2l0aG91dFByb3BlcnRpZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9leHRlbmRzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9zdHlsZXMvd2l0aFN0eWxlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY2xhc3NuYW1lcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2RlZmluZVByb3BlcnR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vY3JlYXRlQ2xhc3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9jbGFzc0NhbGxDaGVjay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2luaGVyaXRzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vcG9zc2libGVDb25zdHJ1Y3RvclJldHVybi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL29iamVjdFNwcmVhZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvdXRpbHMvaGVscGVycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvd2FybmluZy93YXJuaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL1N2Z0ljb24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL3N0eWxlcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvVHlwb2dyYXBoeS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVjb21wb3NlL3B1cmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL0J1dHRvbkJhc2UvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL1BhcGVyL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kb20taGVscGVycy9vd25lckRvY3VtZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ldmVudC1saXN0ZW5lci9kaXN0L3JlYWN0LWV2ZW50LWxpc3RlbmVyLmNqcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvQnV0dG9uL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9zdHlsZXMvdHJhbnNpdGlvbnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9pY29ucy91dGlscy9jcmVhdGVTdmdJY29uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9JY29uQnV0dG9uL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kZWJvdW5jZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvd2l0aFdpZHRoL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9zdHlsZXMvd2l0aFRoZW1lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9zdHlsZXMvY29sb3JNYW5pcHVsYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvSW5wdXQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL0dyaWQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL3V0aWxzL3JlYWN0SGVscGVycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2hhcy5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9Nb2RhbC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvdHJhbnNpdGlvbnMvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL193a3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL190by1pb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZGVzY3JpcHRvcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pcy1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtZHAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19oaWRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fY29yZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtdHJhbnNpdGlvbi1ncm91cC9UcmFuc2l0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kb20taGVscGVycy91dGlsL2luRE9NLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9rZXljb2RlL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qc3MvbGliL3J1bGVzL1N0eWxlUnVsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanNzL25vZGVfbW9kdWxlcy93YXJuaW5nL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19hbi1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlY29tcG9zZS93cmFwRGlzcGxheU5hbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pzcy9saWIvUnVsZUxpc3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL3N0eWxlcy9jcmVhdGVCcmVha3BvaW50cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvdXRpbHMvZXhhY3RQcm9wLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vaW50ZXJvcFJlcXVpcmVXaWxkY2FyZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZ29vZ2xlLW1hcHMtcmVhY3QvZGlzdC9saWIvU3RyaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9UZXh0RmllbGQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL1NlbGVjdC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvTGluZWFyUHJvZ3Jlc3MvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL0lucHV0TGFiZWwvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL0Zvcm1Db250cm9sL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9TbGlkZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvUG9ydGFsL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9Db2xsYXBzZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvRmFkZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3VpZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3Byb3BlcnR5LWRlc2MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19mYWlscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2V4cG9ydC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2xpYnJhcnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi90b0NvbnN1bWFibGVBcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZG9tLWhlbHBlcnMvcXVlcnkvY29udGFpbnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL3V0aWxzL293bmVyV2luZG93LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9Ub29sYmFyL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9BcHBCYXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2lzLWluLWJyb3dzZXIvZGlzdC9tb2R1bGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pzcy9saWIvdXRpbHMvY3JlYXRlUnVsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanNzL2xpYi91dGlscy90b0Nzc1ZhbHVlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kZWVwbWVyZ2UvZGlzdC9lcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvZW1wdHlGdW5jdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvaW52YXJpYW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb21wb25lbnQtdHlwZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvWm9vbS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvVGFiL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9UYWJzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9UYWJsZUNlbGwvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL1N0ZXBDb25uZWN0b3IvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL1N0ZXBJY29uL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9TdGVwTGFiZWwvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL1NuYWNrYmFyQ29udGVudC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvTWVudUl0ZW0vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL01lbnVMaXN0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9Qb3BvdmVyL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9MaXN0SXRlbS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvTGlzdC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvSW5wdXRBZG9ybm1lbnQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL0dyb3cvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL0dyaWRMaXN0VGlsZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvR3JpZExpc3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL0Zvcm1MYWJlbC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvRm9ybUhlbHBlclRleHQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL0Zvcm1Hcm91cC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvSW5wdXQvSW5wdXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL0RyYXdlci9EcmF3ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL0NsaWNrQXdheUxpc3RlbmVyL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9DaXJjdWxhclByb2dyZXNzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9pbnRlcm5hbC9Td2l0Y2hCYXNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9DYXJkQ29udGVudC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvQ2FyZC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvQmFja2Ryb3AvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL0F2YXRhci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvaW5kZXguZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtcGllLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fd2tzLWRlZmluZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3drcy1leHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19zZXQtdG8tc3RyaW5nLXRhZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2VudW0tYnVnLWtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19zaGFyZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19zaGFyZWQta2V5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtY3JlYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faXRlcmF0b3JzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fdG8tcHJpbWl0aXZlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZGVmaW5lZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3RvLWludGVnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jc3MtdmVuZG9yL2xpYi9wcmVmaXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pzcy9saWIvc2hlZXRzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qc3MvbGliL3V0aWxzL3RvQ3NzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9jb2xvcnMvY29tbW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9zdHlsZXMvY3JlYXRlTXVpVGhlbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL3N0eWxlcy90aGVtZUxpc3RlbmVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vdHlwZW9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9lbXB0eU9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvb2JqZWN0LWFzc2lnbi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcG9wcGVyLmpzL2Rpc3QvZXNtL3BvcHBlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtc3dpcGVhYmxlLXZpZXdzLWNvcmUvbGliL2NvbnN0YW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvaWNvbnMvU2VhcmNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS93aXRoTW9iaWxlRGlhbG9nL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9Ub29sdGlwL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9UYWJsZVNvcnRMYWJlbC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvVGFibGVSb3cvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2ludGVybmFsL3N2Zy1pY29ucy9LZXlib2FyZEFycm93UmlnaHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2ludGVybmFsL3N2Zy1pY29ucy9LZXlib2FyZEFycm93TGVmdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvVGFibGVQYWdpbmF0aW9uL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9UYWJsZUhlYWQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL1RhYmxlRm9vdGVyL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9UYWJsZUJvZHkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL1RhYmxlL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9Td2l0Y2gvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL1N3aXBlYWJsZURyYXdlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvU3RlcHBlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvU3RlcENvbnRlbnQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL1N0ZXBCdXR0b24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL1N0ZXAvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL1NuYWNrYmFyL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9SYWRpb0dyb3VwL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9SYWRpby9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvaW50ZXJuYWwvc3ZnLWljb25zL0Fycm93RHJvcERvd24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL05hdGl2ZVNlbGVjdC9OYXRpdmVTZWxlY3RJbnB1dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvTmF0aXZlU2VsZWN0L05hdGl2ZVNlbGVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvTmF0aXZlU2VsZWN0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9Nb2JpbGVTdGVwcGVyL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9NZW51L01lbnUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL01lbnUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL0xpc3RTdWJoZWFkZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL0xpc3RJdGVtVGV4dC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvTGlzdEl0ZW1TZWNvbmRhcnlBY3Rpb24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL0xpc3RJdGVtSWNvbi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvTGlzdEl0ZW1BdmF0YXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL0ljb24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL0hpZGRlbi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvR3JpZExpc3RUaWxlQmFyL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9Gb3JtQ29udHJvbExhYmVsL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9FeHBhbnNpb25QYW5lbFN1bW1hcnkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL0V4cGFuc2lvblBhbmVsRGV0YWlscy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvRXhwYW5zaW9uUGFuZWxBY3Rpb25zL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9FeHBhbnNpb25QYW5lbC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvRHJhd2VyL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9EaXZpZGVyL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9EaWFsb2dUaXRsZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvRGlhbG9nQ29udGVudFRleHQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL0RpYWxvZ0NvbnRlbnQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL0RpYWxvZ0FjdGlvbnMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RvbS1oZWxwZXJzL3V0aWwvc2Nyb2xsYmFyU2l6ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZG9tLWhlbHBlcnMvdHJhbnNpdGlvbi9wcm9wZXJ0aWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kb20taGVscGVycy91dGlsL2NhbWVsaXplU3R5bGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL01vZGFsL01vZGFsTWFuYWdlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvUm9vdFJlZi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZG9tLWhlbHBlcnMvYWN0aXZlRWxlbWVudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvRGlhbG9nL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9Dc3NCYXNlbGluZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvQ2hpcC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvQ2hlY2tib3gvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL0NhcmRNZWRpYS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvQ2FyZEhlYWRlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvQ2FyZEFjdGlvbnMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL0JvdHRvbU5hdmlnYXRpb25BY3Rpb24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL0JvdHRvbU5hdmlnYXRpb24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL0JhZGdlL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9BdmF0YXIvQXZhdGFyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9jb2xvcnMvZ3JlZW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2NvbG9ycy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVjb21wb3NlL3NldERpc3BsYXlOYW1lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWdvcGQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtZ29wbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1nb3BzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fY29mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWtleXMtaW50ZXJuYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19yZWRlZmluZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2RvbS1jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pZTgtZG9tLWRlZmluZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2N0eC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2l0ZXItZGVmaW5lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2hlbHBlcnMvdHlwZW9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1qc3MvbGliL25zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWNvbXBvc2UvZ2V0RGlzcGxheU5hbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pzcy9saWIvU3R5bGVTaGVldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanNzL2xpYi91dGlscy9jcmVhdGVHZW5lcmF0ZUNsYXNzTmFtZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanNzL2xpYi91dGlscy9saW5rUnVsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanNzL2xpYi91dGlscy9pc09ic2VydmFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pzcy9saWIvU2hlZXRzUmVnaXN0cnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pzcy9saWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL3N0eWxlcy9qc3NQcmVzZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2NvbG9ycy9yZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2NvbG9ycy9ncmV5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9jb2xvcnMvcGluay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvY29sb3JzL2luZGlnby5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvc3R5bGVzL2NyZWF0ZUdlbmVyYXRlQ2xhc3NOYW1lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9zdHlsZXMvTXVpVGhlbWVQcm92aWRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZ29vZ2xlLW1hcHMtcmVhY3QvZGlzdC9saWIvYXJlUGF0aHNFcXVhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvc2hhbGxvd0VxdWFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qc3Mvbm9kZV9tb2R1bGVzL3N5bWJvbC1vYnNlcnZhYmxlL2VzL3BvbnlmaWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1wb3BwZXIvbGliL01hbmFnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXBvcHBlci9saWIvVGFyZ2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1wb3BwZXIvbGliL1BvcHBlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcG9wcGVyL2xpYi9BcnJvdy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2ljb25zL0tleWJvYXJkQXJyb3dVcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2ljb25zL01vZGVFZGl0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvaWNvbnMvQWRkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1zd2lwZWFibGUtdmlld3MtY29yZS9saWIvbW9kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1zd2lwZWFibGUtdmlld3MtY29yZS9saWIvZ2V0RGlzcGxheVNhbWVTbGlkZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtc3dpcGVhYmxlLXZpZXdzLWNvcmUvbGliL2NvbXB1dGVJbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtc3dpcGVhYmxlLXZpZXdzLWNvcmUvbGliL2NoZWNrSW5kZXhCb3VuZHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXN3aXBlYWJsZS12aWV3cy1jb3JlL2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZG9tLWhlbHBlcnMvZXZlbnRzL29mZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZG9tLWhlbHBlcnMvZXZlbnRzL29uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1zd2lwZWFibGUtdmlld3MvbGliL1N3aXBlYWJsZVZpZXdzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1zd2lwZWFibGUtdmlld3MvbGliL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvaWNvbnMvRGlyZWN0aW9uc0Nhci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9SZXFSaWRlQnV0dG9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb21wb25lbnQtcmFmL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lYXNlLWNvbXBvbmVudC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50LWNsb25lL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb21wb25lbnQtdHdlZW4vbm9kZV9tb2R1bGVzL2NvbXBvbmVudC1lbWl0dGVyL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb21wb25lbnQtdHdlZW4vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Njcm9sbC10by9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtc2Nyb2xsLXRvLWNvbXBvbmVudC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9DYXJkVGFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvU2VhcmNoQnV0dG9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvaWNvbnMvTG9jYXRpb25Pbi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9JbnB1dEZpZWxkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9ab29tL1pvb20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL3dpdGhNb2JpbGVEaWFsb2cvd2l0aE1vYmlsZURpYWxvZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvVG9vbHRpcC9Ub29sdGlwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9UZXh0RmllbGQvVGV4dEZpZWxkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9UYWIvVGFiLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9UYWJzL1RhYlNjcm9sbEJ1dHRvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvVGFicy9UYWJJbmRpY2F0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL1RhYnMvU2Nyb2xsYmFyU2l6ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZ2xvYmFsL3dpbmRvdy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmFmbC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2Nyb2xsL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9ub3JtYWxpemUtc2Nyb2xsLWxlZnQvbGliL21haW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL1RhYnMvVGFicy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvaW50ZXJuYWwvc3ZnLWljb25zL0Fycm93RG93bndhcmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL1RhYmxlU29ydExhYmVsL1RhYmxlU29ydExhYmVsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9UYWJsZVJvdy9UYWJsZVJvdy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvVGFibGVQYWdpbmF0aW9uQWN0aW9ucy9UYWJsZVBhZ2luYXRpb25BY3Rpb25zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9UYWJsZVBhZ2luYXRpb25BY3Rpb25zL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9UYWJsZVBhZ2luYXRpb24vVGFibGVQYWdpbmF0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9UYWJsZUhlYWQvVGFibGVIZWFkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9UYWJsZUZvb3Rlci9UYWJsZUZvb3Rlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvVGFibGVDZWxsL1RhYmxlQ2VsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvVGFibGVCb2R5L1RhYmxlQm9keS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvVGFibGUvVGFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL1N3aXRjaC9Td2l0Y2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL1N3aXBlYWJsZURyYXdlci9Td2lwZUFyZWEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL1N3aXBlYWJsZURyYXdlci9Td2lwZWFibGVEcmF3ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL1N0ZXBwZXIvU3RlcHBlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvU3RlcENvbnRlbnQvU3RlcENvbnRlbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL1N0ZXBDb25uZWN0b3IvU3RlcENvbm5lY3Rvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvU3RlcEljb24vU3RlcFBvc2l0aW9uSWNvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvaW50ZXJuYWwvc3ZnLWljb25zL1dhcm5pbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2ludGVybmFsL3N2Zy1pY29ucy9DaGVja0NpcmNsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvU3RlcEljb24vU3RlcEljb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL1N0ZXBMYWJlbC9TdGVwTGFiZWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL1N0ZXBCdXR0b24vU3RlcEJ1dHRvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvU3RlcC9TdGVwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9TbmFja2JhckNvbnRlbnQvU25hY2tiYXJDb250ZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9TbmFja2Jhci9TbmFja2Jhci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvU2VsZWN0L1NlbGVjdElucHV0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9TZWxlY3QvU2VsZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9SYWRpb0dyb3VwL1JhZGlvR3JvdXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2ludGVybmFsL3N2Zy1pY29ucy9SYWRpb0J1dHRvbkNoZWNrZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2ludGVybmFsL3N2Zy1pY29ucy9SYWRpb0J1dHRvblVuY2hlY2tlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvUmFkaW8vUmFkaW8uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL01vYmlsZVN0ZXBwZXIvTW9iaWxlU3RlcHBlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvTWVudUl0ZW0vTWVudUl0ZW0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL01lbnVMaXN0L01lbnVMaXN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9Qb3BvdmVyL1BvcG92ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL0xpc3RTdWJoZWFkZXIvTGlzdFN1YmhlYWRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvTGlzdEl0ZW1UZXh0L0xpc3RJdGVtVGV4dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvTGlzdEl0ZW1TZWNvbmRhcnlBY3Rpb24vTGlzdEl0ZW1TZWNvbmRhcnlBY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL0xpc3RJdGVtSWNvbi9MaXN0SXRlbUljb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL0xpc3RJdGVtQXZhdGFyL0xpc3RJdGVtQXZhdGFyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9MaXN0SXRlbS9MaXN0SXRlbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvTGlzdC9MaXN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9MaW5lYXJQcm9ncmVzcy9MaW5lYXJQcm9ncmVzcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvSW5wdXRMYWJlbC9JbnB1dExhYmVsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9JbnB1dEFkb3JubWVudC9JbnB1dEFkb3JubWVudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvSWNvbi9JY29uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9IaWRkZW4vSGlkZGVuQ3NzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9IaWRkZW4vSGlkZGVuSnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL0hpZGRlbi9IaWRkZW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL0dyb3cvR3Jvdy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvR3JpZExpc3RUaWxlQmFyL0dyaWRMaXN0VGlsZUJhci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvR3JpZExpc3RUaWxlL0dyaWRMaXN0VGlsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvR3JpZExpc3QvR3JpZExpc3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL3V0aWxzL3JlcXVpcmVQcm9wRmFjdG9yeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvR3JpZC9HcmlkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9Gb3JtTGFiZWwvRm9ybUxhYmVsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9Gb3JtSGVscGVyVGV4dC9Gb3JtSGVscGVyVGV4dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvRm9ybUdyb3VwL0Zvcm1Hcm91cC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvRm9ybUNvbnRyb2xMYWJlbC9Gb3JtQ29udHJvbExhYmVsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9JbnB1dC9UZXh0YXJlYS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvRm9ybUNvbnRyb2wvRm9ybUNvbnRyb2wuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL0V4cGFuc2lvblBhbmVsU3VtbWFyeS9FeHBhbnNpb25QYW5lbFN1bW1hcnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL0V4cGFuc2lvblBhbmVsRGV0YWlscy9FeHBhbnNpb25QYW5lbERldGFpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL0V4cGFuc2lvblBhbmVsQWN0aW9ucy9FeHBhbnNpb25QYW5lbEFjdGlvbnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL0V4cGFuc2lvblBhbmVsL0V4cGFuc2lvblBhbmVsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9TbGlkZS9TbGlkZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvRGl2aWRlci9EaXZpZGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9EaWFsb2dUaXRsZS9EaWFsb2dUaXRsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvRGlhbG9nQ29udGVudFRleHQvRGlhbG9nQ29udGVudFRleHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL0RpYWxvZ0NvbnRlbnQvRGlhbG9nQ29udGVudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvRGlhbG9nQWN0aW9ucy9EaWFsb2dBY3Rpb25zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9Nb2RhbC9tYW5hZ2VBcmlhSGlkZGVuLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kb20taGVscGVycy9xdWVyeS9pc1dpbmRvdy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvTW9kYWwvaXNPdmVyZmxvd2luZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZG9tLWhlbHBlcnMvdHJhbnNpdGlvbi9pc1RyYW5zZm9ybS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZG9tLWhlbHBlcnMvc3R5bGUvcmVtb3ZlU3R5bGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RvbS1oZWxwZXJzL3N0eWxlL2dldENvbXB1dGVkU3R5bGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RvbS1oZWxwZXJzL3V0aWwvaHlwaGVuYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kb20taGVscGVycy91dGlsL2h5cGhlbmF0ZVN0eWxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kb20taGVscGVycy91dGlsL2NhbWVsaXplLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kb20taGVscGVycy9zdHlsZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvUG9ydGFsL1BvcnRhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvUm9vdFJlZi9Sb290UmVmLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9Nb2RhbC9Nb2RhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvRGlhbG9nL0RpYWxvZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvQ3NzQmFzZWxpbmUvQ3NzQmFzZWxpbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL0NvbGxhcHNlL0NvbGxhcHNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9DbGlja0F3YXlMaXN0ZW5lci9DbGlja0F3YXlMaXN0ZW5lci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvQ2lyY3VsYXJQcm9ncmVzcy9DaXJjdWxhclByb2dyZXNzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9pbnRlcm5hbC9zdmctaWNvbnMvQ2FuY2VsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9DaGlwL0NoaXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2ludGVybmFsL3N2Zy1pY29ucy9JbmRldGVybWluYXRlQ2hlY2tCb3guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2ludGVybmFsL3N2Zy1pY29ucy9DaGVja0JveC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvaW50ZXJuYWwvc3ZnLWljb25zL0NoZWNrQm94T3V0bGluZUJsYW5rLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9DaGVja2JveC9DaGVja2JveC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvQ2FyZE1lZGlhL0NhcmRNZWRpYS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvQ2FyZEhlYWRlci9DYXJkSGVhZGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9DYXJkQ29udGVudC9DYXJkQ29udGVudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvQ2FyZEFjdGlvbnMvQ2FyZEFjdGlvbnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL0NhcmQvQ2FyZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvQm90dG9tTmF2aWdhdGlvbkFjdGlvbi9Cb3R0b21OYXZpZ2F0aW9uQWN0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9Cb3R0b21OYXZpZ2F0aW9uL0JvdHRvbU5hdmlnYXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL0JhZGdlL0JhZGdlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9GYWRlL0ZhZGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL0JhY2tkcm9wL0JhY2tkcm9wLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9jb2xvcnMvYmx1ZUdyZXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2NvbG9ycy9icm93bi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvY29sb3JzL2RlZXBPcmFuZ2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2NvbG9ycy9vcmFuZ2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2NvbG9ycy9hbWJlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvY29sb3JzL3llbGxvdy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvY29sb3JzL2xpbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2NvbG9ycy9saWdodEdyZWVuLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9jb2xvcnMvdGVhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvY29sb3JzL2N5YW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2NvbG9ycy9saWdodEJsdWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2NvbG9ycy9ibHVlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9jb2xvcnMvZGVlcFB1cnBsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvY29sb3JzL3B1cnBsZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9NYXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9pY29ucy9BY2NvdW50Qm94LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9TdmdJY29uL1N2Z0ljb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlY29tcG9zZS9zaGFsbG93RXF1YWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlY29tcG9zZS9zZXRTdGF0aWMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5vYmplY3QuY3JlYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2NyZWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19zZXQtcHJvdG8uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5vYmplY3Quc2V0LXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9zZXQtcHJvdG90eXBlLW9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L3NldC1wcm90b3R5cGUtb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM3LnN5bWJvbC5vYnNlcnZhYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczcuc3ltYm9sLmFzeW5jLWl0ZXJhdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWdvcG4tZXh0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faXMtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19lbnVtLWtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19tZXRhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYuc3ltYm9sLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvZm4vc3ltYm9sL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2NvcmUtanMvc3ltYm9sLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faXRlci1zdGVwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fYWRkLXRvLXVuc2NvcGFibGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYuYXJyYXkuaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL3dlYi5kb20uaXRlcmFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL190by1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtZ3BvLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faHRtbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3RvLWFic29sdXRlLWluZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fdG8tbGVuZ3RoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fYXJyYXktaW5jbHVkZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWRwcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2l0ZXItY3JlYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fYS1mdW5jdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3N0cmluZy1hdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM2LnN0cmluZy5pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L2ZuL3N5bWJvbC9pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9jb3JlLWpzL3N5bWJvbC9pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVjb21wb3NlL3Nob3VsZFVwZGF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2ljb25zL01lbnUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL0ljb25CdXR0b24vSWNvbkJ1dHRvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvQnV0dG9uQmFzZS9jcmVhdGVSaXBwbGVIYW5kbGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwL3V0aWxzL1Byb3BUeXBlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvQnV0dG9uQmFzZS9SaXBwbGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAvdXRpbHMvQ2hpbGRNYXBwaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwL1RyYW5zaXRpb25Hcm91cC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL25vbkl0ZXJhYmxlU3ByZWFkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vaXRlcmFibGVUb0FycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vYXJyYXlXaXRob3V0SG9sZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL0J1dHRvbkJhc2UvVG91Y2hSaXBwbGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL0J1dHRvbkJhc2UvZm9jdXNWaXNpYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9CdXR0b25CYXNlL0J1dHRvbkJhc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL0J1dHRvbi9CdXR0b24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL1Rvb2xiYXIvVG9vbGJhci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvUGFwZXIvUGFwZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL0FwcEJhci9BcHBCYXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvVG9vbEJhci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvVHlwb2dyYXBoeS9UeXBvZ3JhcGh5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ldmVudC1saXN0ZW5lci9ub2RlX21vZHVsZXMvd2FybmluZy9icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS93aXRoV2lkdGgvd2l0aFdpZHRoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9zdHlsZXMvZ2V0VGhlbWVQcm9wcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvc3R5bGVzL2dldFN0eWxlc0NyZWF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWpzcy9saWIvcHJvcFR5cGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1qc3MvbGliL2NvbnRleHRUeXBlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvc3R5bGVzL2NyZWF0ZVN0eWxlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanNzLXByb3BzLXNvcnQvbGliL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jc3MtdmVuZG9yL2xpYi9zdXBwb3J0ZWQtdmFsdWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Nzcy12ZW5kb3IvbGliL2NhbWVsaXplLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jc3MtdmVuZG9yL2xpYi9zdXBwb3J0ZWQtcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Nzcy12ZW5kb3IvbGliL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qc3MtdmVuZG9yLXByZWZpeGVyL2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanNzLWRlZmF1bHQtdW5pdC9saWIvZGVmYXVsdFVuaXRzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qc3MtZGVmYXVsdC11bml0L2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaHlwaGVuYXRlLXN0eWxlLW5hbWUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pzcy1jYW1lbC1jYXNlL2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanNzLW5lc3RlZC9ub2RlX21vZHVsZXMvd2FybmluZy9icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qc3MtbmVzdGVkL2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanNzL2xpYi9yZW5kZXJlcnMvVmlydHVhbFJlbmRlcmVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qc3MvbGliL3JlbmRlcmVycy9Eb21SZW5kZXJlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanNzL2xpYi9wbHVnaW5zL2Z1bmN0aW9ucy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanNzL2xpYi9wbHVnaW5zL29ic2VydmFibGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qc3MvbGliL3J1bGVzL1ZpZXdwb3J0UnVsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanNzL2xpYi9ydWxlcy9Gb250RmFjZVJ1bGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pzcy9saWIvcnVsZXMvQ29uZGl0aW9uYWxSdWxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qc3MvbGliL3J1bGVzL0tleWZyYW1lc1J1bGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pzcy9saWIvcnVsZXMvU2ltcGxlUnVsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanNzL2xpYi9wbHVnaW5zL3J1bGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qc3MvbGliL1BsdWdpbnNSZWdpc3RyeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanNzL2xpYi9Kc3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pzcy9saWIvdXRpbHMvbW9kdWxlSWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pzcy9saWIvdXRpbHMvZXNjYXBlLmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9oYXJtb255LW1vZHVsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanNzL25vZGVfbW9kdWxlcy9zeW1ib2wtb2JzZXJ2YWJsZS9lcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanNzL2xpYi91dGlscy9jbG9uZVN0eWxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qc3MvbGliL1NoZWV0c01hbmFnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pzcy9saWIvdXRpbHMvZ2V0RHluYW1pY1N0eWxlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanNzLWdsb2JhbC9saWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL3N0eWxlcy9zcGFjaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9zdHlsZXMvekluZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9zdHlsZXMvc2hhZG93cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvc3R5bGVzL2NyZWF0ZU1peGlucy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvc3R5bGVzL2NyZWF0ZVBhbGV0dGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL3N0eWxlcy9jcmVhdGVUeXBvZ3JhcGh5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9icmNhc3QvZGlzdC9icmNhc3QuZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9zZXRQcm90b3R5cGVPZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZ29vZ2xlLW1hcHMtcmVhY3QvZGlzdC9jb21wb25lbnRzL1BvbHlnb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2dvb2dsZS1tYXBzLXJlYWN0L2Rpc3QvY29tcG9uZW50cy9Qb2x5bGluZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZ29vZ2xlLW1hcHMtcmVhY3QvZGlzdC9saWIvY2FuY2VsYWJsZVByb21pc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2dvb2dsZS1tYXBzLXJlYWN0L2Rpc3QvY29tcG9uZW50cy9IZWF0TWFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9tZW1vaXplU3RyaW5nT25seS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvaHlwaGVuYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9oeXBoZW5hdGVTdHlsZU5hbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9janMvcmVhY3QtZG9tLXNlcnZlci5icm93c2VyLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vc2VydmVyLmJyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2dvb2dsZS1tYXBzLXJlYWN0L2Rpc3QvY29tcG9uZW50cy9JbmZvV2luZG93LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2xpYi9SZWFjdFByb3BUeXBlc1NlY3JldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9mYWN0b3J5V2l0aFRocm93aW5nU2hpbXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2dvb2dsZS1tYXBzLXJlYWN0L2Rpc3QvY29tcG9uZW50cy9NYXJrZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2dvb2dsZS1tYXBzLXJlYWN0L2Rpc3QvbGliL0dvb2dsZUFwaS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZ29vZ2xlLW1hcHMtcmVhY3QvZGlzdC9saWIvd2luZG93T3JHbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2dvb2dsZS1tYXBzLXJlYWN0L2Rpc3QvbGliL1NjcmlwdENhY2hlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9nb29nbGUtbWFwcy1yZWFjdC9kaXN0L0dvb2dsZUFwaUNvbXBvbmVudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZ29vZ2xlLW1hcHMtcmVhY3QvZGlzdC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGVjb2RlLXVyaS1jb21wb25lbnQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N0cmljdC11cmktZW5jb2RlL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9xdWVyeS1zdHJpbmcvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb2Nlc3MvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvQXBwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL3VybHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvQXBwLmNzcyIsIndlYnBhY2s6Ly8vLi9zcmMvQXBwLmNzcz80MmFiIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9pc05vZGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZianMvbGliL2lzVGV4dE5vZGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZianMvbGliL2NvbnRhaW5zTm9kZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvZ2V0QWN0aXZlRWxlbWVudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvRXhlY3V0aW9uRW52aXJvbm1lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9janMvcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC9janMvcmVhY3QucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2luZGV4LmpzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwib2JqIiwiZGVmYXVsdCIsInNvdXJjZSIsImV4Y2x1ZGVkIiwidGFyZ2V0Iiwic291cmNlS2V5cyIsImtleXMiLCJsZW5ndGgiLCJpbmRleE9mIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwic291cmNlU3ltYm9sS2V5cyIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwiX2V4dGVuZHMiLCJhc3NpZ24iLCJhcmd1bWVudHMiLCJhcHBseSIsInRoaXMiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJzaGVldHNNYW5hZ2VyIiwiX2V4dGVuZHMyIiwiX29iamVjdFNwcmVhZDIiLCJfY2xhc3NDYWxsQ2hlY2syIiwiX2NyZWF0ZUNsYXNzMiIsIl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMiIsIl9pbmhlcml0czIiLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyIiwiX3JlYWN0IiwiX3Byb3BUeXBlcyIsIl9ob2lzdE5vblJlYWN0U3RhdGljcyIsIl9jb250ZXh0VHlwZXMiLCJfanNzIiwiX2pzc1ByZXNldCIsIl9jcmVhdGVNdWlUaGVtZSIsIl90aGVtZUxpc3RlbmVyIiwiX2NyZWF0ZUdlbmVyYXRlQ2xhc3NOYW1lIiwiX2dldFN0eWxlc0NyZWF0b3IiLCJfZ2V0VGhlbWVQcm9wcyIsImpzcyIsImdlbmVyYXRlQ2xhc3NOYW1lIiwiaW5kZXhDb3VudGVyIiwiTWFwIiwiZGVmYXVsdFRoZW1lIiwibm9vcFRoZW1lIiwiX2RlZmF1bHQiLCJzdHlsZXNPckNyZWF0b3IiLCJvcHRpb25zIiwidW5kZWZpbmVkIiwiQ29tcG9uZW50IiwiX29wdGlvbnMkd2l0aFRoZW1lIiwid2l0aFRoZW1lIiwiX29wdGlvbnMkZmxpcCIsImZsaXAiLCJzdHlsZVNoZWV0T3B0aW9ucyIsInN0eWxlc0NyZWF0b3IiLCJsaXN0ZW5Ub1RoZW1lIiwidGhlbWluZ0VuYWJsZWQiLCJpbmRleCIsIldpdGhTdHlsZXMiLCJfUmVhY3QkQ29tcG9uZW50IiwicHJvcHMiLCJjb250ZXh0IiwiX3RoaXMiLCJfX3Byb3RvX18iLCJnZXRQcm90b3R5cGVPZiIsInN0YXRlIiwiZGlzYWJsZVN0eWxlc0dlbmVyYXRpb24iLCJzaGVldE9wdGlvbnMiLCJzdHlsZXNDcmVhdG9yU2F2ZWQiLCJ0aGVtZSIsInVuc3Vic2NyaWJlSWQiLCJtdWlUaGVtZVByb3ZpZGVyT3B0aW9ucyIsImluaXRpYWwiLCJhdHRhY2giLCJjYWNoZUNsYXNzZXMiLCJsYXN0UHJvcCIsImxhc3RKU1MiLCJfdGhpczIiLCJzdWJzY3JpYmUiLCJvbGRUaGVtZSIsInNldFN0YXRlIiwiZGV0YWNoIiwidW5zdWJzY3JpYmUiLCJfdGhpczMiLCJnZW5lcmF0ZSIsInNoZWV0c01hbmFnZXJUaGVtZSIsInNoZWV0IiwiY2xhc3NlcyIsInJlZHVjZSIsImFjY3VtdWxhdG9yIiwiY29uY2F0Iiwic2hlZXRNYW5hZ2VyIiwic2V0Iiwic2hlZXRNYW5hZ2VyVGhlbWUiLCJyZWZzIiwic3R5bGVzIiwibWV0YSIsImNyZWF0ZVN0eWxlU2hlZXQiLCJjbGFzc05hbWVQcmVmaXgiLCJkaXJlY3Rpb24iLCJsaW5rIiwic2hlZXRzUmVnaXN0cnkiLCJhZGQiLCJkZWxldGUiLCJyZW1vdmVTdHlsZVNoZWV0IiwicmVtb3ZlIiwiX3Byb3BzIiwiaW5uZXJSZWYiLCJvdGhlciIsIm1vcmUiLCJjcmVhdGVFbGVtZW50IiwiZ2V0Q2xhc3NlcyIsInJlZiIsInByb3BUeXBlcyIsImNvbnRleHRUeXBlcyIsIl9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fIiwiaGFzT3duIiwiY2xhc3NOYW1lcyIsImFyZyIsImFyZ1R5cGUiLCJwdXNoIiwiQXJyYXkiLCJpc0FycmF5IiwiaW5uZXIiLCJqb2luIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJfZGVmaW5lUHJvcGVydGllcyIsImRlc2NyaXB0b3IiLCJDb25zdHJ1Y3RvciIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsImluc3RhbmNlIiwiVHlwZUVycm9yIiwic2V0UHJvdG90eXBlT2YiLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJjb25zdHJ1Y3RvciIsIl90eXBlb2YiLCJhc3NlcnRUaGlzSW5pdGlhbGl6ZWQiLCJzZWxmIiwib3duS2V5cyIsImZpbHRlciIsInN5bSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImZvckVhY2giLCJjYXBpdGFsaXplIiwic3RyaW5nIiwiY2hhckF0IiwidG9VcHBlckNhc2UiLCJzbGljZSIsImNvbnRhaW5zIiwiZmluZEluZGV4IiwiZmluZCIsImFyciIsInByZWQiLCJjcmVhdGVDaGFpbmVkRnVuY3Rpb24iLCJfbGVuIiwiZnVuY3MiLCJfa2V5IiwiYWNjIiwiZnVuYyIsIl9sZW4yIiwiYXJncyIsIl9rZXkyIiwiX3R5cGVvZjIiLCJldmVyeSIsInByZWRUeXBlIiwid2FybmluZyIsImNoZWNrRENFIiwiX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fIiwiZXJyIiwiY29uc29sZSIsImVycm9yIiwiX1N2Z0ljb24iLCJfTXVpVGhlbWVQcm92aWRlciIsIl9jcmVhdGVTdHlsZXMiLCJfd2l0aFN0eWxlcyIsIl93aXRoVGhlbWUiLCJfVHlwb2dyYXBoeSIsIl9zaG91bGRVcGRhdGUyIiwiX3NoYWxsb3dFcXVhbDIiLCJCYXNlQ29tcG9uZW50IiwibmV4dFByb3BzIiwiaG9jIiwiX0J1dHRvbkJhc2UiLCJfUGFwZXIiLCJub2RlIiwib3duZXJEb2N1bWVudCIsImRvY3VtZW50IiwiX2ludGVyb3BEZWZhdWx0IiwiZXgiLCJfY2xhc3NDYWxsQ2hlY2siLCJfY3JlYXRlQ2xhc3MiLCJfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsIl9pbmhlcml0cyIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllcyIsIl9vYmplY3RTcHJlYWQiLCJSZWFjdCIsImNhY2hlIiwicGFzc2l2ZU9wdGlvbiIsImF0dHIiLCJzdXBwb3J0c1Bhc3NpdmVPcHRpb24iLCJ3aW5kb3ciLCJhZGRFdmVudExpc3RlbmVyIiwiZGVmYXVsdEV2ZW50T3B0aW9ucyIsImNhcHR1cmUiLCJwYXNzaXZlIiwibWVyZ2VEZWZhdWx0RXZlbnRPcHRpb25zIiwiZ2V0RXZlbnRMaXN0ZW5lckFyZ3MiLCJldmVudE5hbWUiLCJjYWxsYmFjayIsIm9uIiwib2ZmIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsIkV2ZW50TGlzdGVuZXIiLCJfUmVhY3QkUHVyZUNvbXBvbmVudCIsImFwcGx5TGlzdGVuZXJzIiwicHJldlByb3BzIiwib25Pck9mZiIsImVsZW1lbnQiLCJpdGVyYXRlZSIsImNoaWxkcmVuIiwiZXZlbnRQcm9wcyIsInN1YnN0cmluZyIsInByb3AiLCJ0eXBlIiwiaXNPYmplY3QiLCJzdWJzdHIiLCJ0b0xvd2VyQ2FzZSIsImhhbmRsZXIiLCJmb3JFYWNoTGlzdGVuZXIiLCJQdXJlQ29tcG9uZW50Iiwid2l0aE9wdGlvbnMiLCJfQnV0dG9uIiwiaXNOdW1iZXIiLCJpc1N0cmluZyIsImZvcm1hdE1zIiwiZHVyYXRpb24iLCJlYXNpbmciLCJlYXNlSW5PdXQiLCJlYXNlT3V0IiwiZWFzZUluIiwic2hhcnAiLCJzaG9ydGVzdCIsInNob3J0ZXIiLCJzaG9ydCIsInN0YW5kYXJkIiwiY29tcGxleCIsImVudGVyaW5nU2NyZWVuIiwibGVhdmluZ1NjcmVlbiIsIm1pbGxpc2Vjb25kcyIsIk1hdGgiLCJyb3VuZCIsImlzTmFOIiwicGFyc2VGbG9hdCIsIl9vcHRpb25zJGR1cmF0aW9uIiwiZHVyYXRpb25PcHRpb24iLCJfb3B0aW9ucyRlYXNpbmciLCJlYXNpbmdPcHRpb24iLCJfb3B0aW9ucyRkZWxheSIsImRlbGF5IiwibWFwIiwiYW5pbWF0ZWRQcm9wIiwiZ2V0QXV0b0hlaWdodER1cmF0aW9uIiwiaGVpZ2h0IiwiY29uc3RhbnQiLCJwb3ciLCJnbG9iYWwiLCJGdW5jdGlvbiIsIl9fZyIsIl9wdXJlIiwicGF0aCIsImRpc3BsYXlOYW1lIiwiSWNvbiIsIm11aU5hbWUiLCJfSWNvbkJ1dHRvbiIsIndhaXQiLCJpbW1lZGlhdGUiLCJ0aW1lb3V0IiwidGltZXN0YW1wIiwicmVzdWx0IiwibGF0ZXIiLCJsYXN0IiwiRGF0ZSIsIm5vdyIsInNldFRpbWVvdXQiLCJkZWJvdW5jZWQiLCJjYWxsTm93IiwiY2xlYXIiLCJjbGVhclRpbWVvdXQiLCJmbHVzaCIsIl9leHBvcnROYW1lcyIsIl93aXRoV2lkdGgiLCJXaXRoVGhlbWUiLCJjb252ZXJ0SGV4VG9SR0IiLCJkZWNvbXBvc2VDb2xvciIsInJlY29tcG9zZUNvbG9yIiwiZ2V0Q29udHJhc3RSYXRpbyIsImZvcmVncm91bmQiLCJiYWNrZ3JvdW5kIiwibHVtQSIsImdldEx1bWluYW5jZSIsImx1bUIiLCJtYXgiLCJtaW4iLCJlbXBoYXNpemUiLCJjb2xvciIsImNvZWZmaWNpZW50IiwiZGFya2VuIiwibGlnaHRlbiIsImZhZGUiLCJjbGFtcCIsInZhbHVlcyIsInJlIiwiUmVnRXhwIiwiY29sb3JzIiwibWF0Y2giLCJwYXJzZUludCIsIm1hcmtlciIsInNwbGl0IiwiZGVjb21wb3NlZENvbG9yIiwicmdiIiwidmFsIiwiTnVtYmVyIiwidG9GaXhlZCIsIl9JbnB1dCIsIl9HcmlkIiwiY2xvbmVFbGVtZW50V2l0aENsYXNzTmFtZSIsImNsb25lQ2hpbGRyZW5XaXRoQ2xhc3NOYW1lIiwiY2xhc3NOYW1lIiwiQ2hpbGRyZW4iLCJjaGlsZCIsImlzVmFsaWRFbGVtZW50IiwiaXNNdWlFbGVtZW50IiwibXVpTmFtZXMiLCJpc011aUNvbXBvbmVudCIsIl9jbGFzc25hbWVzIiwiY2xvbmVFbGVtZW50IiwiaXQiLCJnIiwiZXZhbCIsImUiLCJfTW9kYWwiLCJfTW9kYWxNYW5hZ2VyIiwiZ2V0VHJhbnNpdGlvblByb3BzIiwiX3Byb3BzJHN0eWxlIiwic3R5bGUiLCJ0cmFuc2l0aW9uRHVyYXRpb24iLCJ0cmFuc2l0aW9uRGVsYXkiLCJyZWZsb3ciLCJzY3JvbGxUb3AiLCJzdG9yZSIsInVpZCIsIlVTRV9TWU1CT0wiLCJJT2JqZWN0IiwiZGVmaW5lZCIsImEiLCJhbk9iamVjdCIsIklFOF9ET01fREVGSU5FIiwidG9QcmltaXRpdmUiLCJkUCIsImYiLCJPIiwiUCIsIkF0dHJpYnV0ZXMiLCJjcmVhdGVEZXNjIiwiY29yZSIsInZlcnNpb24iLCJfX2UiLCJFWElUSU5HIiwiRU5URVJFRCIsIkVOVEVSSU5HIiwiRVhJVEVEIiwiVU5NT1VOVEVEIiwiUHJvcFR5cGVzIiwibmV3T2JqIiwiX3JlYWN0MiIsIl9yZWFjdERvbTIiLCJUcmFuc2l0aW9uIiwiUmVmZXJlbmNlRXJyb3IiLCJwYXJlbnRHcm91cCIsInRyYW5zaXRpb25Hcm91cCIsImFwcGVhciIsImlzTW91bnRpbmciLCJlbnRlciIsImluaXRpYWxTdGF0dXMiLCJuZXh0U3RhdHVzIiwiaW4iLCJ1bm1vdW50T25FeGl0IiwibW91bnRPbkVudGVyIiwic3RhdHVzIiwibmV4dENhbGxiYWNrIiwiZ2V0Q2hpbGRDb250ZXh0IiwiY29tcG9uZW50RGlkTW91bnQiLCJ1cGRhdGVTdGF0dXMiLCJjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwicGVuZGluZ1N0YXRlIiwiY29tcG9uZW50RGlkVXBkYXRlIiwiY29tcG9uZW50V2lsbFVubW91bnQiLCJjYW5jZWxOZXh0Q2FsbGJhY2siLCJnZXRUaW1lb3V0cyIsImV4aXQiLCJtb3VudGluZyIsImZpbmRET01Ob2RlIiwicGVyZm9ybUVudGVyIiwicGVyZm9ybUV4aXQiLCJhcHBlYXJpbmciLCJ0aW1lb3V0cyIsIm9uRW50ZXIiLCJzYWZlU2V0U3RhdGUiLCJvbkVudGVyaW5nIiwib25UcmFuc2l0aW9uRW5kIiwib25FbnRlcmVkIiwib25FeGl0Iiwib25FeGl0aW5nIiwib25FeGl0ZWQiLCJjYW5jZWwiLCJuZXh0U3RhdGUiLCJfdGhpczQiLCJzZXROZXh0Q2FsbGJhY2siLCJfdGhpczUiLCJhY3RpdmUiLCJldmVudCIsImFkZEVuZExpc3RlbmVyIiwicmVuZGVyIiwiY2hpbGRQcm9wcyIsIm9ubHkiLCJub29wIiwiY2hpbGRDb250ZXh0VHlwZXMiLCJkZWZhdWx0UHJvcHMiLCJrZXlDb2RlIiwic2VhcmNoSW5wdXQiLCJoYXNLZXlDb2RlIiwid2hpY2giLCJjaGFyQ29kZSIsIm5hbWVzIiwiZm91bmROYW1lZEtleSIsInNlYXJjaCIsIlN0cmluZyIsImNvZGVzIiwiYWxpYXNlcyIsImNoYXJDb2RlQXQiLCJpc0V2ZW50S2V5IiwibmFtZU9yQ29kZSIsImNvZGUiLCJiYWNrc3BhY2UiLCJ0YWIiLCJzaGlmdCIsImN0cmwiLCJhbHQiLCJwYXVzZS9icmVhayIsImNhcHMgbG9jayIsImVzYyIsInNwYWNlIiwicGFnZSB1cCIsInBhZ2UgZG93biIsImVuZCIsImhvbWUiLCJsZWZ0IiwidXAiLCJyaWdodCIsImRvd24iLCJpbnNlcnQiLCJjb21tYW5kIiwibGVmdCBjb21tYW5kIiwicmlnaHQgY29tbWFuZCIsIm51bXBhZCAqIiwibnVtcGFkICsiLCJudW1wYWQgLSIsIm51bXBhZCAuIiwibnVtcGFkIC8iLCJudW0gbG9jayIsInNjcm9sbCBsb2NrIiwibXkgY29tcHV0ZXIiLCJteSBjYWxjdWxhdG9yIiwiOyIsIj0iLCIsIiwiLSIsIi4iLCIvIiwiYCIsIlsiLCJcXCIsIl0iLCInIiwid2luZG93cyIsIuKHpyIsIuKMpSIsIuKMgyIsIuKMmCIsImN0bCIsImNvbnRyb2wiLCJvcHRpb24iLCJwYXVzZSIsImJyZWFrIiwiY2FwcyIsInJldHVybiIsImVzY2FwZSIsInNwYyIsInNwYWNlYmFyIiwicGd1cCIsInBnZG4iLCJpbnMiLCJkZWwiLCJjbWQiLCJmcm9tQ2hhckNvZGUiLCJ0aXRsZSIsImFsaWFzIiwiaXRlcmF0b3IiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiX3dhcm5pbmcyIiwiX3RvQ3NzMiIsIl90b0Nzc1ZhbHVlMiIsIlN0eWxlUnVsZSIsImlzUHJvY2Vzc2VkIiwiUmVuZGVyZXIiLCJzZWxlY3RvciIsInNlbGVjdG9yVGV4dCIsInJlbmRlcmVyIiwiaXNFbXB0eSIsInBsdWdpbnMiLCJvbkNoYW5nZVZhbHVlIiwiaXNEZWZpbmVkIiwicmVuZGVyYWJsZSIsInJlbW92ZVByb3BlcnR5Iiwic2V0UHJvcGVydHkiLCJhdHRhY2hlZCIsImpzb24iLCJ0b0pTT04iLCJvcHRzIiwiYWxsb3dFbXB0eSIsInNldFNlbGVjdG9yIiwicmVwbGFjZVJ1bGUiLCJfZ2V0RGlzcGxheU5hbWUiLCJfZ2V0RGlzcGxheU5hbWUyIiwiaG9jTmFtZSIsIl9jcmVhdGVSdWxlMiIsIl9saW5rUnVsZTIiLCJfU3R5bGVSdWxlMiIsIl9lc2NhcGUyIiwiUnVsZUxpc3QiLCJyYXciLCJ1cGRhdGUiLCJkYXRhIiwiX29wdGlvbnMiLCJvblVwZGF0ZSIsImRlY2wiLCJfb3B0aW9uczIiLCJwYXJlbnQiLCJydWxlIiwicmVnaXN0ZXIiLCJzcGxpY2UiLCJ1bnJlZ2lzdGVyIiwib25Qcm9jZXNzUnVsZSIsImNzc1J1bGVzIiwiZ2V0VW5lc2NhcGVkS2V5c01hcCIsImNzc1J1bGUiLCJnZXRLZXkiLCJzdHIiLCJjc3MiLCJ0b1N0cmluZyIsImJyZWFrcG9pbnRzIiwiX2JyZWFrcG9pbnRzJHZhbHVlcyIsInhzIiwic20iLCJtZCIsImxnIiwieGwiLCJfYnJlYWtwb2ludHMkdW5pdCIsInVuaXQiLCJfYnJlYWtwb2ludHMkc3RlcCIsInN0ZXAiLCJiZXR3ZWVuIiwic3RhcnQiLCJlbmRJbmRleCIsInVwcGVyYm91bmQiLCJ3aWR0aCIsImNvbXBvbmVudE5hbWVJbkVycm9yIiwiX29iamVjdFNwcmVhZDMiLCJfZGVmaW5lUHJvcGVydHkyIiwic3BlY2lhbFByb3BlcnR5IiwidW5rbm93blByb3BzIiwiZGVzYyIsIl9fV0VCUEFDS19BTURfREVGSU5FX0ZBQ1RPUllfXyIsIl9fV0VCUEFDS19BTURfREVGSU5FX0FSUkFZX18iLCJjYW1lbGl6ZSIsIndvcmQiLCJfVGV4dEZpZWxkIiwiX1NlbGVjdCIsIl9MaW5lYXJQcm9ncmVzcyIsIl9JbnB1dExhYmVsIiwiX0Zvcm1Db250cm9sIiwiX1NsaWRlIiwiX1BvcnRhbCIsIl9Db2xsYXBzZSIsIl9GYWRlIiwiaWQiLCJweCIsInJhbmRvbSIsImJpdG1hcCIsImV4ZWMiLCJjdHgiLCJoaWRlIiwiaGFzIiwiJGV4cG9ydCIsIm93biIsIm91dCIsIklTX0ZPUkNFRCIsIkYiLCJJU19HTE9CQUwiLCJHIiwiSVNfU1RBVElDIiwiUyIsIklTX1BST1RPIiwiSVNfQklORCIsIkIiLCJJU19XUkFQIiwiVyIsImV4cFByb3RvIiwiQyIsImIiLCJ2aXJ0dWFsIiwiUiIsIlUiLCJhcnJheVdpdGhvdXRIb2xlcyIsIml0ZXJhYmxlVG9BcnJheSIsIm5vbkl0ZXJhYmxlU3ByZWFkIiwiX2luRE9NIiwiX2luRE9NMiIsImZhbGxiYWNrIiwicGFyZW50Tm9kZSIsImNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIiwiX293bmVyRG9jdW1lbnQiLCJkb2MiLCJkZWZhdWx0VmlldyIsInBhcmVudFZpZXciLCJfVG9vbGJhciIsIl9BcHBCYXIiLCJfX3dlYnBhY2tfZXhwb3J0c19fIiwiaXNCcm93c2VyIiwibm9kZVR5cGUiLCJkZWNsQ29weSIsIl9jbG9uZVN0eWxlMiIsIm9uQ3JlYXRlUnVsZSIsImlnbm9yZUltcG9ydGFudCIsImNzc1ZhbHVlIiwiYnkiLCJpc01lcmdlYWJsZU9iamVjdCIsImlzTm9uTnVsbE9iamVjdCIsInN0cmluZ1ZhbHVlIiwiJCR0eXBlb2YiLCJSRUFDVF9FTEVNRU5UX1RZUEUiLCJpc1JlYWN0RWxlbWVudCIsImlzU3BlY2lhbCIsImZvciIsImNsb25lVW5sZXNzT3RoZXJ3aXNlU3BlY2lmaWVkIiwiY2xvbmUiLCJkZWVwbWVyZ2UiLCJkZWZhdWx0QXJyYXlNZXJnZSIsImFycmF5TWVyZ2UiLCJzb3VyY2VJc0FycmF5IiwiZGVzdGluYXRpb24iLCJtZXJnZU9iamVjdCIsImFsbCIsImFycmF5IiwiRXJyb3IiLCJwcmV2IiwibmV4dCIsImRlZXBtZXJnZV8xIiwibWFrZUVtcHR5RnVuY3Rpb24iLCJlbXB0eUZ1bmN0aW9uIiwidGhhdFJldHVybnMiLCJ0aGF0UmV0dXJuc0ZhbHNlIiwidGhhdFJldHVybnNUcnVlIiwidGhhdFJldHVybnNOdWxsIiwidGhhdFJldHVybnNUaGlzIiwidGhhdFJldHVybnNBcmd1bWVudCIsInZhbGlkYXRlRm9ybWF0IiwiZm9ybWF0IiwiY29uZGl0aW9uIiwiYXJnSW5kZXgiLCJyZXBsYWNlIiwiZnJhbWVzVG9Qb3AiLCJ2YWx1ZU9mIiwiX1pvb20iLCJfVGFiIiwiX1RhYnMiLCJfVGFibGVDZWxsIiwiX1N0ZXBDb25uZWN0b3IiLCJfU3RlcEljb24iLCJfU3RlcExhYmVsIiwiX1NuYWNrYmFyQ29udGVudCIsIl9NZW51SXRlbSIsIl9NZW51TGlzdCIsIl9Qb3BvdmVyIiwiX0xpc3RJdGVtIiwiX0xpc3QiLCJfSW5wdXRBZG9ybm1lbnQiLCJfR3JvdyIsIl9HcmlkTGlzdFRpbGUiLCJfR3JpZExpc3QiLCJfRm9ybUxhYmVsIiwiX0Zvcm1IZWxwZXJUZXh0IiwiX0Zvcm1Hcm91cCIsImhhc1ZhbHVlIiwiaXNGaWxsZWQiLCJpc0Fkb3JuZWRTdGFydCIsInN0YXJ0QWRvcm5tZW50IiwiX1RleHRhcmVhIiwiU1NSIiwiZGVmYXVsdFZhbHVlIiwibGlnaHQiLCJwYWxldHRlIiwicGxhY2Vob2xkZXIiLCJvcGFjaXR5IiwidHJhbnNpdGlvbiIsInRyYW5zaXRpb25zIiwicGxhY2Vob2xkZXJIaWRkZW4iLCJwbGFjZWhvbGRlclZpc2libGUiLCJib3R0b21MaW5lQ29sb3IiLCJyb290IiwiZGlzcGxheSIsInBvc2l0aW9uIiwiZm9udEZhbWlseSIsInR5cG9ncmFwaHkiLCJjb21tb24iLCJ3aGl0ZSIsImZvbnRTaXplIiwicHhUb1JlbSIsImxpbmVIZWlnaHQiLCImJGRpc2FibGVkIiwidGV4dCIsImRpc2FibGVkIiwiZm9ybUNvbnRyb2wiLCJsYWJlbCArICYiLCJtYXJnaW5Ub3AiLCJzcGFjaW5nIiwiZm9jdXNlZCIsInVuZGVybGluZSIsIiY6YWZ0ZXIiLCJib3JkZXJCb3R0b20iLCJwcmltYXJ5IiwiYm90dG9tIiwiY29udGVudCIsInRyYW5zZm9ybSIsInBvaW50ZXJFdmVudHMiLCImJGZvY3VzZWQ6YWZ0ZXIiLCImJGVycm9yOmFmdGVyIiwiYm9yZGVyQm90dG9tQ29sb3IiLCJtYWluIiwiJjpiZWZvcmUiLCImOmhvdmVyOm5vdCgkZGlzYWJsZWQpOm5vdCgkZm9jdXNlZCk6bm90KCRlcnJvcik6YmVmb3JlIiwiJiRkaXNhYmxlZDpiZWZvcmUiLCJtdWx0aWxpbmUiLCJwYWRkaW5nIiwiZnVsbFdpZHRoIiwiaW5wdXQiLCJmb250IiwiYm9yZGVyIiwiYm94U2l6aW5nIiwidmVydGljYWxBbGlnbiIsIm1hcmdpbiIsIldlYmtpdFRhcEhpZ2hsaWdodENvbG9yIiwibWluV2lkdGgiLCJmbGV4R3JvdyIsIiY6Oi13ZWJraXQtaW5wdXQtcGxhY2Vob2xkZXIiLCImOjotbW96LXBsYWNlaG9sZGVyIiwiJjotbXMtaW5wdXQtcGxhY2Vob2xkZXIiLCImOjotbXMtaW5wdXQtcGxhY2Vob2xkZXIiLCImOmZvY3VzIiwib3V0bGluZSIsIiY6aW52YWxpZCIsImJveFNoYWRvdyIsIiY6Oi13ZWJraXQtc2VhcmNoLWRlY29yYXRpb24iLCItd2Via2l0LWFwcGVhcmFuY2UiLCJsYWJlbFtkYXRhLXNocmluaz1mYWxzZV0gKyAkZm9ybUNvbnRyb2wgJiIsIiY6Zm9jdXM6Oi13ZWJraXQtaW5wdXQtcGxhY2Vob2xkZXIiLCImOmZvY3VzOjotbW96LXBsYWNlaG9sZGVyIiwiJjpmb2N1czotbXMtaW5wdXQtcGxhY2Vob2xkZXIiLCImOmZvY3VzOjotbXMtaW5wdXQtcGxhY2Vob2xkZXIiLCJpbnB1dE1hcmdpbkRlbnNlIiwicGFkZGluZ1RvcCIsImlucHV0TXVsdGlsaW5lIiwicmVzaXplIiwiaW5wdXRUeXBlIiwiaW5wdXRUeXBlU2VhcmNoIiwiLW1vei1hcHBlYXJhbmNlIiwiZm9ybUNvbnRyb2xTdGF0ZSIsIm11aUZvcm1Db250cm9sIiwiSW5wdXQiLCJpc0NvbnRyb2xsZWQiLCJoYW5kbGVGb2N1cyIsInN0b3BQcm9wYWdhdGlvbiIsIm9uRm9jdXMiLCJoYW5kbGVCbHVyIiwib25CbHVyIiwiaGFuZGxlQ2hhbmdlIiwiY2hlY2tEaXJ0eSIsIm9uQ2hhbmdlIiwiaGFuZGxlUmVmSW5wdXQiLCJpbnB1dFJlZiIsImlucHV0UHJvcHMiLCJjdXJyZW50IiwibmV4dENvbnRleHQiLCJjb21wb25lbnRXaWxsVXBkYXRlIiwiY3JlYXRlQ29udGV4dCIsIlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUiLCJvbkZpbGxlZCIsIm9uRW1wdHkiLCJfY2xhc3NOYW1lcyIsIl9jbGFzc05hbWVzMiIsImF1dG9Db21wbGV0ZSIsImF1dG9Gb2N1cyIsImNsYXNzTmFtZVByb3AiLCJkaXNhYmxlVW5kZXJsaW5lIiwiZW5kQWRvcm5tZW50IiwiaW5wdXRDb21wb25lbnQiLCJfcHJvcHMkaW5wdXRQcm9wcyIsImlucHV0UHJvcHNDbGFzc05hbWUiLCJpbnB1dFByb3BzUHJvcCIsIm9uS2V5RG93biIsIm9uS2V5VXAiLCJyZWFkT25seSIsInJvd3MiLCJyb3dzTWF4IiwiX2Zvcm1Db250cm9sU3RhdGUiLCJpbnB1dENsYXNzTmFtZSIsInJlcXVpcmVkIiwiSW5wdXRDb21wb25lbnQiLCJ0ZXh0YXJlYVJlZiIsImFyaWEtaW52YWxpZCIsImFyaWEtcmVxdWlyZWQiLCJpc0hvcml6b250YWwiLCJnZXRBbmNob3IiLCJfaGVscGVycyIsIl90cmFuc2l0aW9ucyIsIm9wcG9zaXRlRGlyZWN0aW9uIiwidG9wIiwiYW5jaG9yIiwiZG9ja2VkIiwiZmxleCIsInBhcGVyIiwib3ZlcmZsb3dZIiwiZmxleERpcmVjdGlvbiIsInpJbmRleCIsImRyYXdlciIsIldlYmtpdE92ZXJmbG93U2Nyb2xsaW5nIiwicGFwZXJBbmNob3JMZWZ0IiwicGFwZXJBbmNob3JSaWdodCIsInBhcGVyQW5jaG9yVG9wIiwibWF4SGVpZ2h0IiwicGFwZXJBbmNob3JCb3R0b20iLCJwYXBlckFuY2hvckRvY2tlZExlZnQiLCJib3JkZXJSaWdodCIsImRpdmlkZXIiLCJwYXBlckFuY2hvckRvY2tlZFRvcCIsInBhcGVyQW5jaG9yRG9ja2VkUmlnaHQiLCJib3JkZXJMZWZ0IiwicGFwZXJBbmNob3JEb2NrZWRCb3R0b20iLCJib3JkZXJUb3AiLCJtb2RhbCIsIkRyYXdlciIsIl9yZWYiLCJfdGVtcCIsIm1vdW50ZWQiLCJlbGV2YXRpb24iLCJfcHJvcHMkTW9kYWxQcm9wcyIsIk1vZGFsUHJvcHMiLCJCYWNrZHJvcFByb3BzUHJvcCIsIkJhY2tkcm9wUHJvcHMiLCJvbkNsb3NlIiwib3BlbiIsIlBhcGVyUHJvcHMiLCJTbGlkZVByb3BzIiwidmFyaWFudCIsInNxdWFyZSIsInNsaWRpbmdEcmF3ZXIiLCJfQ2xpY2tBd2F5TGlzdGVuZXIiLCJfQ2lyY3VsYXJQcm9ncmVzcyIsImFsaWduSXRlbXMiLCImOmhvdmVyIiwiYmFja2dyb3VuZENvbG9yIiwiY2hlY2tlZCIsImN1cnNvciIsIlN3aXRjaEJhc2UiLCJoYW5kbGVJbnB1dENoYW5nZSIsImRlZmF1bHRDaGVja2VkIiwiY2hlY2tlZFByb3AiLCJjaGVja2VkSWNvbiIsImRpc2FibGVkUHJvcCIsImljb24iLCJ0YWJJbmRleCIsImhhc0xhYmVsRm9yIiwiY29tcG9uZW50Iiwicm9sZSIsIl9DYXJkQ29udGVudCIsIl9DYXJkIiwiX0JhY2tkcm9wIiwiX0F2YXRhciIsIl9ab29tX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV85OF9fX2RlZmF1bHQiLCJMSUJSQVJZIiwid2tzRXh0IiwiJFN5bWJvbCIsImRlZiIsIlRBRyIsInRhZyIsInN0YXQiLCJjb3B5cmlnaHQiLCJzaGFyZWQiLCIka2V5cyIsImVudW1CdWdLZXlzIiwiZFBzIiwiSUVfUFJPVE8iLCJFbXB0eSIsImNyZWF0ZURpY3QiLCJpZnJhbWVEb2N1bWVudCIsImlmcmFtZSIsImFwcGVuZENoaWxkIiwic3JjIiwiY29udGVudFdpbmRvdyIsIndyaXRlIiwibHQiLCJjbG9zZSIsIlByb3BlcnRpZXMiLCJmbiIsImNlaWwiLCJmbG9vciIsIlJFQUNUX1NUQVRJQ1MiLCJnZXREZWZhdWx0UHJvcHMiLCJnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMiLCJtaXhpbnMiLCJLTk9XTl9TVEFUSUNTIiwiY2FsbGVyIiwiY2FsbGVlIiwiYXJpdHkiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwib2JqZWN0UHJvdG90eXBlIiwiaG9pc3ROb25SZWFjdFN0YXRpY3MiLCJ0YXJnZXRDb21wb25lbnQiLCJzb3VyY2VDb21wb25lbnQiLCJibGFja2xpc3QiLCJpbmhlcml0ZWRDb21wb25lbnQiLCJmYWN0b3J5IiwiX2lzSW5Ccm93c2VyIiwianMiLCJqc0Nzc01hcCIsIk1veiIsIm1zIiwiV2Via2l0IiwiX1NoZWV0c1JlZ2lzdHJ5IiwiX1NoZWV0c1JlZ2lzdHJ5MiIsIl9vcHRpb25zJGluZGVudCIsImluZGVudCIsImZhbGxiYWNrcyIsImluZGVudFN0ciIsIl9wcm9wIiwiX3ZhbHVlIiwiX3Byb3AyIiwiX3ZhbHVlMiIsIl90b0Nzc1ZhbHVlIiwiYmxhY2siLCJfZGVlcG1lcmdlIiwiX2NyZWF0ZVR5cG9ncmFwaHkiLCJfY3JlYXRlQnJlYWtwb2ludHMiLCJfY3JlYXRlUGFsZXR0ZSIsIl9jcmVhdGVNaXhpbnMiLCJfc2hhZG93cyIsIl96SW5kZXgiLCJfc3BhY2luZyIsIl9vcHRpb25zJHBhbGV0dGUiLCJwYWxldHRlSW5wdXQiLCJfb3B0aW9ucyRicmVha3BvaW50cyIsImJyZWFrcG9pbnRzSW5wdXQiLCJfb3B0aW9ucyRtaXhpbnMiLCJtaXhpbnNJbnB1dCIsIl9vcHRpb25zJHR5cG9ncmFwaHkiLCJ0eXBvZ3JhcGh5SW5wdXQiLCJzaGFkb3dzSW5wdXQiLCJzaGFkb3dzIiwib3ZlcnJpZGVzIiwiQ0hBTk5FTCIsImdldFN0YXRlIiwiY2IiLCJzdWJzY3JpcHRpb25JZCIsInByb3BJc0VudW1lcmFibGUiLCJ0ZXN0MSIsInRlc3QyIiwidGVzdDMiLCJsZXR0ZXIiLCJzaG91bGRVc2VOYXRpdmUiLCJmcm9tIiwic3ltYm9scyIsInRvIiwidG9PYmplY3QiLCJsb25nZXJUaW1lb3V0QnJvd3NlcnMiLCJ0aW1lb3V0RHVyYXRpb24iLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJkZWJvdW5jZSIsIlByb21pc2UiLCJjYWxsZWQiLCJyZXNvbHZlIiwidGhlbiIsInNjaGVkdWxlZCIsImlzRnVuY3Rpb24iLCJmdW5jdGlvblRvQ2hlY2siLCJnZXRTdHlsZUNvbXB1dGVkUHJvcGVydHkiLCJnZXRDb21wdXRlZFN0eWxlIiwiZ2V0UGFyZW50Tm9kZSIsIm5vZGVOYW1lIiwiaG9zdCIsImdldFNjcm9sbFBhcmVudCIsImJvZHkiLCJfZ2V0U3R5bGVDb21wdXRlZFByb3AiLCJvdmVyZmxvdyIsIm92ZXJmbG93WCIsInRlc3QiLCJpc0lFMTEiLCJNU0lucHV0TWV0aG9kQ29udGV4dCIsImRvY3VtZW50TW9kZSIsImlzSUUxMCIsImlzSUUiLCJnZXRPZmZzZXRQYXJlbnQiLCJkb2N1bWVudEVsZW1lbnQiLCJub09mZnNldFBhcmVudCIsIm9mZnNldFBhcmVudCIsIm5leHRFbGVtZW50U2libGluZyIsImdldFJvb3QiLCJmaW5kQ29tbW9uT2Zmc2V0UGFyZW50IiwiZWxlbWVudDEiLCJlbGVtZW50MiIsIm9yZGVyIiwiTm9kZSIsIkRPQ1VNRU5UX1BPU0lUSU9OX0ZPTExPV0lORyIsInJhbmdlIiwiY3JlYXRlUmFuZ2UiLCJzZXRTdGFydCIsInNldEVuZCIsImNvbW1vbkFuY2VzdG9yQ29udGFpbmVyIiwiZmlyc3RFbGVtZW50Q2hpbGQiLCJlbGVtZW50MXJvb3QiLCJnZXRTY3JvbGwiLCJ1cHBlclNpZGUiLCJodG1sIiwic2Nyb2xsaW5nRWxlbWVudCIsImdldEJvcmRlcnNTaXplIiwiYXhpcyIsInNpZGVBIiwic2lkZUIiLCJnZXRTaXplIiwiY29tcHV0ZWRTdHlsZSIsImdldFdpbmRvd1NpemVzIiwiY2xhc3NDYWxsQ2hlY2siLCJjcmVhdGVDbGFzcyIsImdldENsaWVudFJlY3QiLCJvZmZzZXRzIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwicmVjdCIsInNjcm9sbExlZnQiLCJzaXplcyIsImNsaWVudFdpZHRoIiwiY2xpZW50SGVpZ2h0IiwiaG9yaXpTY3JvbGxiYXIiLCJvZmZzZXRXaWR0aCIsInZlcnRTY3JvbGxiYXIiLCJvZmZzZXRIZWlnaHQiLCJnZXRPZmZzZXRSZWN0UmVsYXRpdmVUb0FyYml0cmFyeU5vZGUiLCJmaXhlZFBvc2l0aW9uIiwiaXNIVE1MIiwiY2hpbGRyZW5SZWN0IiwicGFyZW50UmVjdCIsInNjcm9sbFBhcmVudCIsImJvcmRlclRvcFdpZHRoIiwiYm9yZGVyTGVmdFdpZHRoIiwibWFyZ2luTGVmdCIsInN1YnRyYWN0IiwibW9kaWZpZXIiLCJpbmNsdWRlU2Nyb2xsIiwiZ2V0Rml4ZWRQb3NpdGlvbk9mZnNldFBhcmVudCIsInBhcmVudEVsZW1lbnQiLCJlbCIsImdldEJvdW5kYXJpZXMiLCJwb3BwZXIiLCJyZWZlcmVuY2UiLCJib3VuZGFyaWVzRWxlbWVudCIsImJvdW5kYXJpZXMiLCJleGNsdWRlU2Nyb2xsIiwicmVsYXRpdmVPZmZzZXQiLCJpbm5lcldpZHRoIiwiaW5uZXJIZWlnaHQiLCJnZXRWaWV3cG9ydE9mZnNldFJlY3RSZWxhdGl2ZVRvQXJ0Yml0cmFyeU5vZGUiLCJib3VuZGFyaWVzTm9kZSIsImlzRml4ZWQiLCJfZ2V0V2luZG93U2l6ZXMiLCJjb21wdXRlQXV0b1BsYWNlbWVudCIsInBsYWNlbWVudCIsInJlZlJlY3QiLCJyZWN0cyIsInNvcnRlZEFyZWFzIiwiYXJlYSIsInNvcnQiLCJmaWx0ZXJlZEFyZWFzIiwiX3JlZjIiLCJjb21wdXRlZFBsYWNlbWVudCIsInZhcmlhdGlvbiIsImdldFJlZmVyZW5jZU9mZnNldHMiLCJnZXRPdXRlclNpemVzIiwieCIsIm1hcmdpbkJvdHRvbSIsInkiLCJtYXJnaW5SaWdodCIsImdldE9wcG9zaXRlUGxhY2VtZW50IiwiaGFzaCIsIm1hdGNoZWQiLCJnZXRQb3BwZXJPZmZzZXRzIiwicmVmZXJlbmNlT2Zmc2V0cyIsInBvcHBlclJlY3QiLCJwb3BwZXJPZmZzZXRzIiwiaXNIb3JpeiIsIm1haW5TaWRlIiwic2Vjb25kYXJ5U2lkZSIsIm1lYXN1cmVtZW50Iiwic2Vjb25kYXJ5TWVhc3VyZW1lbnQiLCJjaGVjayIsInJ1bk1vZGlmaWVycyIsIm1vZGlmaWVycyIsImVuZHMiLCJjdXIiLCJ3YXJuIiwiZW5hYmxlZCIsImlzTW9kaWZpZXJFbmFibGVkIiwibW9kaWZpZXJOYW1lIiwic29tZSIsImdldFN1cHBvcnRlZFByb3BlcnR5TmFtZSIsInByZWZpeGVzIiwidXBwZXJQcm9wIiwicHJlZml4IiwidG9DaGVjayIsImdldFdpbmRvdyIsInNldHVwRXZlbnRMaXN0ZW5lcnMiLCJ1cGRhdGVCb3VuZCIsInNjcm9sbEVsZW1lbnQiLCJhdHRhY2hUb1Njcm9sbFBhcmVudHMiLCJzY3JvbGxQYXJlbnRzIiwiaXNCb2R5IiwiZXZlbnRzRW5hYmxlZCIsImRpc2FibGVFdmVudExpc3RlbmVycyIsImNhbmNlbEFuaW1hdGlvbkZyYW1lIiwic2NoZWR1bGVVcGRhdGUiLCJpc051bWVyaWMiLCJpc0Zpbml0ZSIsInNldFN0eWxlcyIsImlzTW9kaWZpZXJSZXF1aXJlZCIsInJlcXVlc3RpbmdOYW1lIiwicmVxdWVzdGVkTmFtZSIsInJlcXVlc3RpbmciLCJpc1JlcXVpcmVkIiwiX3JlcXVlc3RpbmciLCJyZXF1ZXN0ZWQiLCJwbGFjZW1lbnRzIiwidmFsaWRQbGFjZW1lbnRzIiwiY2xvY2t3aXNlIiwiY291bnRlciIsInJldmVyc2UiLCJCRUhBVklPUlMiLCJGTElQIiwiQ0xPQ0tXSVNFIiwiQ09VTlRFUkNMT0NLV0lTRSIsInBhcnNlT2Zmc2V0Iiwib2Zmc2V0IiwiYmFzZVBsYWNlbWVudCIsInVzZUhlaWdodCIsImZyYWdtZW50cyIsImZyYWciLCJ0cmltIiwic3BsaXRSZWdleCIsIm9wcyIsIm9wIiwibWVyZ2VXaXRoUHJldmlvdXMiLCJ0b1ZhbHVlIiwiaW5kZXgyIiwiRGVmYXVsdHMiLCJwb3NpdGlvbkZpeGVkIiwicmVtb3ZlT25EZXN0cm95Iiwib25DcmVhdGUiLCJzaGlmdHZhcmlhdGlvbiIsIl9kYXRhJG9mZnNldHMiLCJpc1ZlcnRpY2FsIiwic2lkZSIsInNoaWZ0T2Zmc2V0cyIsInByZXZlbnRPdmVyZmxvdyIsInRyYW5zZm9ybVByb3AiLCJwb3BwZXJTdHlsZXMiLCJwcmlvcml0eSIsImVzY2FwZVdpdGhSZWZlcmVuY2UiLCJzZWNvbmRhcnkiLCJrZWVwVG9nZXRoZXIiLCJvcFNpZGUiLCJhcnJvdyIsIl9kYXRhJG9mZnNldHMkYXJyb3ciLCJhcnJvd0VsZW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwibGVuIiwic2lkZUNhcGl0YWxpemVkIiwiYWx0U2lkZSIsImFycm93RWxlbWVudFNpemUiLCJjZW50ZXIiLCJwb3BwZXJNYXJnaW5TaWRlIiwicG9wcGVyQm9yZGVyU2lkZSIsInNpZGVWYWx1ZSIsImZsaXBwZWQiLCJvcmlnaW5hbFBsYWNlbWVudCIsInBsYWNlbWVudE9wcG9zaXRlIiwiZmxpcE9yZGVyIiwiYmVoYXZpb3IiLCJyZWZPZmZzZXRzIiwib3ZlcmxhcHNSZWYiLCJvdmVyZmxvd3NMZWZ0Iiwib3ZlcmZsb3dzUmlnaHQiLCJvdmVyZmxvd3NUb3AiLCJvdmVyZmxvd3NCb3R0b20iLCJvdmVyZmxvd3NCb3VuZGFyaWVzIiwiZmxpcHBlZFZhcmlhdGlvbiIsImZsaXBWYXJpYXRpb25zIiwiZ2V0T3Bwb3NpdGVWYXJpYXRpb24iLCJzdWJ0cmFjdExlbmd0aCIsImJvdW5kIiwiYXR0cmlidXRlcyIsImNvbXB1dGVTdHlsZSIsImxlZ2FjeUdwdUFjY2VsZXJhdGlvbk9wdGlvbiIsImdwdUFjY2VsZXJhdGlvbiIsIm9mZnNldFBhcmVudFJlY3QiLCJwcmVmaXhlZFByb3BlcnR5Iiwid2lsbENoYW5nZSIsImludmVydFRvcCIsImludmVydExlZnQiLCJ4LXBsYWNlbWVudCIsImFycm93U3R5bGVzIiwiYXBwbHlTdHlsZSIsInNldEF0dHJpYnV0ZSIsInJlbW92ZUF0dHJpYnV0ZSIsIm9uTG9hZCIsIm1vZGlmaWVyT3B0aW9ucyIsIlBvcHBlciIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImlzRGVzdHJveWVkIiwiaXNDcmVhdGVkIiwianF1ZXJ5IiwiZW5hYmxlRXZlbnRMaXN0ZW5lcnMiLCJyZW1vdmVDaGlsZCIsIlV0aWxzIiwiUG9wcGVyVXRpbHMiLCJSRVNJU1RBTkNFX0NPRUYiLCJVTkNFUlRBSU5UWV9USFJFU0hPTEQiLCJfd2l0aE1vYmlsZURpYWxvZyIsIl9Ub29sdGlwIiwiX1RhYmxlU29ydExhYmVsIiwiX1RhYmxlUm93IiwiS2V5Ym9hcmRBcnJvd1JpZ2h0IiwiS2V5Ym9hcmRBcnJvd0xlZnQiLCJfVGFibGVQYWdpbmF0aW9uIiwiX1RhYmxlSGVhZCIsIl9UYWJsZUZvb3RlciIsIl9UYWJsZUJvZHkiLCJfVGFibGUiLCJfU3dpdGNoIiwiX1N3aXBlYWJsZURyYXdlciIsIl9TdGVwcGVyIiwiX1N0ZXBDb250ZW50IiwiX1N0ZXBCdXR0b24iLCJfU3RlcCIsIl9TbmFja2JhciIsIl9SYWRpb0dyb3VwIiwiX1JhZGlvIiwiQXJyb3dEcm9wRG93biIsIk5hdGl2ZVNlbGVjdElucHV0IiwiSWNvbkNvbXBvbmVudCIsInNlbGVjdCIsIl9OYXRpdmVTZWxlY3RJbnB1dCIsIl9BcnJvd0Ryb3BEb3duIiwidXNlclNlbGVjdCIsInBhZGRpbmdSaWdodCIsImJvcmRlclJhZGl1cyIsIiY6LW1vei1mb2N1c3JpbmciLCJ0ZXh0U2hhZG93IiwiJjo6LW1zLWV4cGFuZCIsInNlbGVjdE1lbnUiLCJ0ZXh0T3ZlcmZsb3ciLCJ3aGl0ZVNwYWNlIiwibWluSGVpZ2h0IiwiYWN0aW9uIiwicG9pbnRlci1ldmVudHMiLCJOYXRpdmVTZWxlY3QiLCJfTmF0aXZlU2VsZWN0IiwiX01vYmlsZVN0ZXBwZXIiLCJfcmVhY3REb20iLCJfc2Nyb2xsYmFyU2l6ZSIsIlJUTF9PUklHSU4iLCJ2ZXJ0aWNhbCIsImhvcml6b250YWwiLCJMVFJfT1JJR0lOIiwiTWVudSIsImdldENvbnRlbnRBbmNob3JFbCIsIm1lbnVMaXN0Iiwic2VsZWN0ZWRJdGVtIiwiZmlyc3RDaGlsZCIsImZvY3VzIiwiaGFuZGxlRW50ZXIiLCJzaXplIiwiaGFuZGxlTGlzdEtleURvd24iLCJwcmV2ZW50RGVmYXVsdCIsIk1lbnVMaXN0UHJvcHMiLCJfcHJvcHMkUGFwZXJQcm9wcyIsIlBvcG92ZXJDbGFzc2VzIiwiYW5jaG9yT3JpZ2luIiwidHJhbnNmb3JtT3JpZ2luIiwiX01lbnUiLCJfTGlzdFN1YmhlYWRlciIsIl9MaXN0SXRlbVRleHQiLCJfTGlzdEl0ZW1TZWNvbmRhcnlBY3Rpb24iLCJfTGlzdEl0ZW1JY29uIiwiX0xpc3RJdGVtQXZhdGFyIiwiX0ljb24iLCJfSGlkZGVuIiwiX0dyaWRMaXN0VGlsZUJhciIsIl9Gb3JtQ29udHJvbExhYmVsIiwiX0V4cGFuc2lvblBhbmVsU3VtbWFyeSIsIl9FeHBhbnNpb25QYW5lbERldGFpbHMiLCJfRXhwYW5zaW9uUGFuZWxBY3Rpb25zIiwiX0V4cGFuc2lvblBhbmVsIiwiX0RyYXdlciIsIl9EaXZpZGVyIiwiX0RpYWxvZ1RpdGxlIiwiX0RpYWxvZ0NvbnRlbnRUZXh0IiwiX0RpYWxvZ0NvbnRlbnQiLCJfRGlhbG9nQWN0aW9ucyIsInJlY2FsYyIsInNjcm9sbERpdiIsImFuaW1hdGlvbkVuZCIsImFuaW1hdGlvbkRlbGF5IiwiYW5pbWF0aW9uVGltaW5nIiwiYW5pbWF0aW9uRHVyYXRpb24iLCJhbmltYXRpb25OYW1lIiwidHJhbnNpdGlvbkVuZCIsInRyYW5zaXRpb25UaW1pbmciLCJ0cmFuc2l0aW9uUHJvcGVydHkiLCJfZ2V0VHJhbnNpdGlvblByb3BlcnQiLCJ2ZW5kb3JNYXAiLCJ2ZW5kb3JzIiwidmVuZG9yIiwiZ2V0VHJhbnNpdGlvblByb3BlcnRpZXMiLCJ0aW1pbmciLCJfY2FtZWxpemUyIiwibXNQYXR0ZXJuIiwiX2NhbWVsaXplIiwiX3N0eWxlIiwiX2lzT3ZlcmZsb3dpbmciLCJfbWFuYWdlQXJpYUhpZGRlbiIsImdldFBhZGRpbmdSaWdodCIsIk1vZGFsTWFuYWdlciIsIl9vcHRpb25zJGhpZGVTaWJsaW5nTiIsImhpZGVTaWJsaW5nTm9kZXMiLCJfb3B0aW9ucyRoYW5kbGVDb250YWkiLCJoYW5kbGVDb250YWluZXJPdmVyZmxvdyIsIm1vZGFscyIsImNvbnRhaW5lcnMiLCJjb250YWluZXIiLCJtb2RhbElkeCIsImhpZGVTaWJsaW5ncyIsIm1vdW50Tm9kZSIsImNvbnRhaW5lcklkeCIsIm92ZXJmbG93aW5nIiwicHJldlBhZGRpbmdzIiwic2Nyb2xsYmFyU2l6ZSIsImZpeGVkTm9kZXMiLCJxdWVyeVNlbGVjdG9yQWxsIiwic2V0Q29udGFpbmVyU3R5bGUiLCJpZHgiLCJpdGVtIiwiZmluZEluZGV4T2YiLCJyZW1vdmVDb250YWluZXJTdHlsZSIsInNob3dTaWJsaW5ncyIsImFyaWFIaWRkZW4iLCJfUm9vdFJlZiIsIl9vd25lckRvY3VtZW50MiIsImFjdGl2ZUVsZW1lbnQiLCJfRGlhbG9nIiwiX0Nzc0Jhc2VsaW5lIiwiX0NoaXAiLCJfQ2hlY2tib3giLCJfQ2FyZE1lZGlhIiwiX0NhcmRIZWFkZXIiLCJfQ2FyZEFjdGlvbnMiLCJfQm90dG9tTmF2aWdhdGlvbkFjdGlvbiIsIl9Cb3R0b21OYXZpZ2F0aW9uIiwiX0JhZGdlIiwianVzdGlmeUNvbnRlbnQiLCJmbGV4U2hyaW5rIiwiY29sb3JEZWZhdWx0IiwiZ3JleSIsImltZyIsInRleHRBbGlnbiIsIm9iamVjdEZpdCIsIkF2YXRhciIsImNoaWxkcmVuUHJvcCIsImNoaWxkcmVuQ2xhc3NOYW1lUHJvcCIsImNoaWxkcmVuQ2xhc3NOYW1lIiwiaW1nUHJvcHMiLCJzcmNTZXQiLCI1MCIsIjEwMCIsIjIwMCIsIjMwMCIsIjQwMCIsIjUwMCIsIjYwMCIsIjcwMCIsIjgwMCIsIjkwMCIsIkExMDAiLCJBMjAwIiwiQTQwMCIsIkE3MDAiLCJfY29tbW9uIiwiX3JlZCIsIl9waW5rIiwiX3B1cnBsZSIsIl9kZWVwUHVycGxlIiwiX2luZGlnbyIsIl9ibHVlIiwiX2xpZ2h0Qmx1ZSIsIl9jeWFuIiwiX3RlYWwiLCJfZ3JlZW4iLCJfbGlnaHRHcmVlbiIsIl9saW1lIiwiX3llbGxvdyIsIl9hbWJlciIsIl9vcmFuZ2UiLCJfZGVlcE9yYW5nZSIsIl9icm93biIsIl9ncmV5IiwiX2JsdWVHcmV5IiwiX3NldFN0YXRpYyIsIl9zZXRTdGF0aWMyIiwicElFIiwidG9JT2JqZWN0IiwiZ09QRCIsImhpZGRlbktleXMiLCJhcnJheUluZGV4T2YiLCJpcyIsImFGdW5jdGlvbiIsInRoYXQiLCJyZWRlZmluZSIsIkl0ZXJhdG9ycyIsIiRpdGVyQ3JlYXRlIiwic2V0VG9TdHJpbmdUYWciLCJJVEVSQVRPUiIsIkJVR0dZIiwicmV0dXJuVGhpcyIsIkJhc2UiLCJOQU1FIiwiREVGQVVMVCIsIklTX1NFVCIsIkZPUkNFRCIsIm1ldGhvZHMiLCJJdGVyYXRvclByb3RvdHlwZSIsImdldE1ldGhvZCIsImtpbmQiLCJwcm90byIsIkRFRl9WQUxVRVMiLCJWQUxVRVNfQlVHIiwiJG5hdGl2ZSIsIiRkZWZhdWx0IiwiJGVudHJpZXMiLCIkYW55TmF0aXZlIiwiZW50cmllcyIsIl9pdGVyYXRvcjIiLCJfc3ltYm9sMiIsIm1hbmFnZXJzIiwiX1J1bGVMaXN0MiIsIlN0eWxlU2hlZXQiLCJfbmFtZSIsInJ1bGVzIiwiZGVwbG95ZWQiLCJsaW5rZWQiLCJwcm9jZXNzIiwiZGVwbG95IiwicXVldWUiLCJpbnNlcnRSdWxlIiwiYWRkZWQiLCJfbmFtZTIiLCJhZGRSdWxlIiwiZGVsZXRlUnVsZSIsImdldFJ1bGVzIiwiX21vZHVsZUlkMiIsInJ1bGVDb3VudGVyIiwianNzSWQiLCJfc3ltYm9sT2JzZXJ2YWJsZSIsIl9zeW1ib2xPYnNlcnZhYmxlMiIsIlNoZWV0c1JlZ2lzdHJ5IiwicmVnaXN0cnkiLCJjcmVhdGVHZW5lcmF0ZUNsYXNzTmFtZSIsInNoZWV0cyIsIlNoZWV0c01hbmFnZXIiLCJ0b0Nzc1ZhbHVlIiwiZ2V0RHluYW1pY1N0eWxlcyIsIl9nZXREeW5hbWljU3R5bGVzIiwiX1NoZWV0c01hbmFnZXIiLCJfUnVsZUxpc3QiLCJfc2hlZXRzIiwiX0pzczIiLCJfanNzR2xvYmFsIiwiX2pzc05lc3RlZCIsIl9qc3NDYW1lbENhc2UiLCJfanNzRGVmYXVsdFVuaXQiLCJfanNzVmVuZG9yUHJlZml4ZXIiLCJfanNzUHJvcHNTb3J0IiwiX29wdGlvbnMkZGFuZ2Vyb3VzbHlVIiwiZGFuZ2Vyb3VzbHlVc2VHbG9iYWxDU1MiLCJfb3B0aW9ucyRwcm9kdWN0aW9uUHIiLCJwcm9kdWN0aW9uUHJlZml4IiwiZXNjYXBlUmVnZXgiLCJfX01VSV9HRU5FUkFUT1JfQ09VTlRFUl9fIiwic3R5bGVTaGVldCIsIl9icmNhc3QiLCJNdWlUaGVtZVByb3ZpZGVyIiwiYnJvYWRjYXN0Iiwib3V0ZXJUaGVtZSIsIm1lcmdlT3V0ZXJMb2NhbFRoZW1lIiwibG9jYWxUaGVtZSIsImlzVmFsaWRMYXRMbmciLCJhcmVQYXRoc0VxdWFsIiwicGF0aEEiLCJwYXRoQiIsImxhdCIsImxuZyIsImVsZW0iLCJvYmpBIiwib2JqQiIsImtleXNBIiwia2V5c0IiLCJzeW1ib2xPYnNlcnZhYmxlUG9ueWZpbGwiLCJvYnNlcnZhYmxlIiwiTWFuYWdlcl9NYW5hZ2VyIiwiX0NvbXBvbmVudCIsIk1hbmFnZXIiLCJfc2V0VGFyZ2V0Tm9kZSIsIl90YXJnZXROb2RlIiwiX2dldFRhcmdldE5vZGUiLCJyZWFjdCIsInBvcHBlck1hbmFnZXIiLCJzZXRUYXJnZXROb2RlIiwiZ2V0VGFyZ2V0Tm9kZSIsInJlc3RQcm9wcyIsInByb3BfdHlwZXNfZGVmYXVsdCIsIm9uZU9mVHlwZSIsImJvb2wiLCJsaWJfTWFuYWdlciIsIlRhcmdldF9UYXJnZXQiLCJfcHJvcHMkY29tcG9uZW50IiwiVGFyZ2V0X29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIiwidGFyZ2V0UmVmIiwidGFyZ2V0UHJvcHMiLCJjb21wb25lbnRQcm9wcyIsImxpYl9UYXJnZXQiLCJQb3BwZXJfZXh0ZW5kcyIsIlBvcHBlcl9jcmVhdGVDbGFzcyIsIlBvcHBlcl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiZXNtX3BvcHBlciIsIlBvcHBlcl9Qb3BwZXIiLCJQb3BwZXJfY2xhc3NDYWxsQ2hlY2siLCJfc2V0QXJyb3dOb2RlIiwiX2Fycm93Tm9kZSIsIl9nZXRPZmZzZXRzIiwiX2lzRGF0YURpcnR5IiwiSlNPTiIsInN0cmluZ2lmeSIsIl91cGRhdGVTdGF0ZU1vZGlmaWVyIiwiX2dldFBvcHBlclN0eWxlIiwiX3BvcHBlciIsIl9nZXRQb3BwZXJQbGFjZW1lbnQiLCJfZ2V0UG9wcGVySGlkZSIsIl9nZXRBcnJvd1N0eWxlIiwiX3RoaXMkc3RhdGUkZGF0YSRvZmZzIiwiX2hhbmRsZVBvcHBlclJlZiIsIl9wb3BwZXJOb2RlIiwiX2NyZWF0ZVBvcHBlciIsIl9kZXN0cm95UG9wcGVyIiwiX3NjaGVkdWxlVXBkYXRlIiwiUG9wcGVyX2luaGVyaXRzIiwic2V0QXJyb3dOb2RlIiwiZ2V0QXJyb3dTdHlsZSIsImxhc3RQcm9wcyIsInVwZGF0ZVN0YXRlIiwiZGVzdHJveSIsIl9wcm9wczIiLCJQb3BwZXJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMiLCJwb3BwZXJTdHlsZSIsInBvcHBlclBsYWNlbWVudCIsInBvcHBlckhpZGUiLCJwb3BwZXJQcm9wcyIsImRhdGEtcGxhY2VtZW50IiwiZGF0YS14LW91dC1vZi1ib3VuZGFyaWVzIiwib25lT2YiLCJpbnN0YW5jZU9mIiwiRWxlbWVudCIsInNoYXBlIiwibnVtYmVyIiwibGliX1BvcHBlciIsIkFycm93X2V4dGVuZHMiLCJBcnJvd19BcnJvdyIsIkFycm93X29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIiwiYXJyb3dSZWYiLCJhcnJvd1N0eWxlIiwiYXJyb3dQcm9wcyIsImxpYl9BcnJvdyIsInEiLCJkaXNwbGF5U2FtZVNsaWRlIiwib2xkQ2hpbGRyZW4iLCJvbGRLZXkiLCJuZXdDaGlsZHJlbiIsInBhcmFtcyIsIm5ld1N0YXJ0WCIsInN0YXJ0SW5kZXgiLCJzdGFydFgiLCJwYWdlWCIsInZpZXdMZW5ndGgiLCJyZXNpc3RhbmNlIiwiaW5kZXhNYXgiLCJjb3VudCIsImV4cCIsIl9jb25zdGFudCIsIl9jaGVja0luZGV4Qm91bmRzIiwiX2NvbXB1dGVJbmRleCIsIl9nZXREaXNwbGF5U2FtZVNsaWRlIiwiX21vZCIsImF0dGFjaEV2ZW50IiwiZGV0YWNoRXZlbnQiLCJzcmNFbGVtZW50IiwiY3VycmVudFRhcmdldCIsImdldERvbVRyZWVTaGFwZXMiLCJmaW5kTmF0aXZlSGFuZGxlciIsIl9wcm9wZXJ0aWVzIiwiX29uIiwiX29mZiIsIl9yZWFjdFN3aXBlYWJsZVZpZXdzQ29yZSIsImFkZEV2ZW50TGlzdGVuZXJFbmhhbmNlZCIsInN0eWxlSW5qZWN0ZWQiLCJXZWJraXRGbGV4U2hyaW5rIiwiYXhpc1Byb3BlcnRpZXMiLCJ4LXJldmVyc2UiLCJ5LXJldmVyc2UiLCJ0cmFuc2xhdGUiLCJyb3RhdGlvbk1hdHJpeCIsInNjcm9sbFBvc2l0aW9uIiwic2Nyb2xsTGVuZ3RoIiwiY2xpZW50TGVuZ3RoIiwiY3JlYXRlVHJhbnNpdGlvbiIsImVhc2VGdW5jdGlvbiIsImFwcGx5Um90YXRpb25NYXRyaXgiLCJ0b3VjaCIsInBhZ2VZIiwiYWRhcHRNb3VzZSIsInRvdWNoZXMiLCJyb290Tm9kZSIsImRvbVRyZWVTaGFwZXMiLCJoYXNBdHRyaWJ1dGUiLCJnZXRQcm9wZXJ0eVZhbHVlIiwic2Nyb2xsV2lkdGgiLCJzY3JvbGxIZWlnaHQiLCJub2RlV2hvQ2xhaW1lZFRoZVNjcm9sbCIsImdvaW5nRm9yd2FyZCIsImFyZU5vdEF0U3RhcnQiLCJhcmVOb3RBdEVuZCIsIlN3aXBlYWJsZVZpZXdzIiwiY29udGFpbmVyTm9kZSIsImlnbm9yZU5leHRTY3JvbGxFdmVudHMiLCJsYXN0WCIsInZ4Iiwic3RhcnRZIiwiaXNTd2lwaW5nIiwic3RhcnRlZCIsInRyYW5zaXRpb25MaXN0ZW5lciIsInRvdWNoTW92ZUxpc3RlbmVyIiwiYWN0aXZlU2xpZGUiLCJpbmRleEN1cnJlbnQiLCJoYW5kbGVTd2lwZVN0YXJ0IiwidHJhbnNmb3JtVmFsdWVzIiwicm9vdFN0eWxlIiwidHJhbmZvcm1Ob3JtYWxpemVkIiwicGFkZGluZ0xlZnQiLCJoYW5kbGVTd2lwZU1vdmUiLCJfdGhpcyRwcm9wcyIsImlnbm9yZU5hdGl2ZVNjcm9sbCIsIm9uU3dpdGNoaW5nIiwiZHgiLCJhYnMiLCJkeSIsImNvbXB1dGVJbmRleCIsInNldEluZGV4Q3VycmVudCIsImlzRHJhZ2dpbmciLCJoYW5kbGVUb3VjaFN0YXJ0IiwiaGFuZGxlU3dpcGVFbmQiLCJpbmRleE5ldyIsImluZGV4TGF0ZXN0IiwiZGVsdGEiLCJ0aHJlc2hvbGQiLCJoeXN0ZXJlc2lzIiwib25DaGFuZ2VJbmRleCIsInJlYXNvbiIsImhhbmRsZVRyYW5zaXRpb25FbmQiLCJvblRvdWNoU3RhcnQiLCJoYW5kbGVUb3VjaEVuZCIsIm9uVG91Y2hFbmQiLCJoYW5kbGVNb3VzZURvd24iLCJvbk1vdXNlRG93biIsInBlcnNpc3QiLCJoYW5kbGVNb3VzZVVwIiwib25Nb3VzZVVwIiwiaGFuZGxlTW91c2VMZWF2ZSIsIm9uTW91c2VMZWF2ZSIsImhhbmRsZU1vdXNlTW92ZSIsIm9uTW91c2VNb3ZlIiwiaGFuZGxlU2Nyb2xsIiwib25TY3JvbGwiLCJ1cGRhdGVIZWlnaHQiLCJoZWlnaHRMYXRlc3QiLCJpc0ZpcnN0UmVuZGVyIiwic3dpcGVhYmxlVmlld3MiLCJzbGlkZVVwZGF0ZUhlaWdodCIsImlubmVySFRNTCIsImluamVjdFN0eWxlIiwiZ2V0RGlzcGxheVNhbWVTbGlkZSIsImFuaW1hdGVUcmFuc2l0aW9ucyIsIldlYmtpdFRyYW5zZm9ybSIsIldlYmtpdFRyYW5zaXRpb24iLCJhbmltYXRlSGVpZ2h0IiwiY29udGFpbmVyU3R5bGVQcm9wIiwiY29udGFpbmVyU3R5bGUiLCJkaXNhYmxlTGF6eUxvYWRpbmciLCJlbmFibGVNb3VzZUV2ZW50cyIsInNsaWRlU3R5bGVQcm9wIiwic2xpZGVTdHlsZSIsInNsaWRlQ2xhc3NOYW1lIiwic3ByaW5nQ29uZmlnIiwiX3N0YXRlIiwidG91Y2hFdmVudHMiLCJtb3VzZUV2ZW50cyIsImFkZGl0aW9uYWxUcmFuc3Rpb24iLCJXZWJraXRGbGV4RGlyZWN0aW9uIiwiaW5kZXhDaGlsZCIsImhpZGRlbiIsImFyaWEtaGlkZGVuIiwiZGF0YS1zd2lwZWFibGUiLCJSZXFSaWRlQnV0dG9uIiwid2Via2l0UmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwibW96UmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiY3VyciIsImdldFRpbWUiLCJyZXEiLCJ3ZWJraXRDYW5jZWxBbmltYXRpb25GcmFtZSIsIm1vekNhbmNlbEFuaW1hdGlvbkZyYW1lIiwibGluZWFyIiwiaW5RdWFkIiwib3V0UXVhZCIsImluT3V0UXVhZCIsImluQ3ViZSIsIm91dEN1YmUiLCJpbk91dEN1YmUiLCJpblF1YXJ0Iiwib3V0UXVhcnQiLCJpbk91dFF1YXJ0IiwiaW5RdWludCIsIm91dFF1aW50IiwiaW5PdXRRdWludCIsImluU2luZSIsImNvcyIsIlBJIiwib3V0U2luZSIsInNpbiIsImluT3V0U2luZSIsImluRXhwbyIsIm91dEV4cG8iLCJpbk91dEV4cG8iLCJpbkNpcmMiLCJzcXJ0Iiwib3V0Q2lyYyIsImluT3V0Q2lyYyIsImluQmFjayIsIm91dEJhY2siLCJpbk91dEJhY2siLCJpbkJvdW5jZSIsIm91dEJvdW5jZSIsImluT3V0Qm91bmNlIiwiXyIsImNvcHkiLCJmbGFncyIsImlnbm9yZUNhc2UiLCJFbWl0dGVyIiwibWl4aW4iLCJfY2FsbGJhY2tzIiwib25jZSIsInJlbW92ZUxpc3RlbmVyIiwicmVtb3ZlQWxsTGlzdGVuZXJzIiwiY2FsbGJhY2tzIiwiZW1pdCIsImxpc3RlbmVycyIsImhhc0xpc3RlbmVycyIsImVhc2UiLCJUd2VlbiIsIl9mcm9tIiwicmVzZXQiLCJfY3VyciIsIl9kb25lIiwiX3N0YXJ0IiwiX3RvIiwiX2R1cmF0aW9uIiwiX2Vhc2UiLCJzdG9wIiwic3RvcHBlZCIsIl91cGRhdGUiLCJrIiwicmFmIiwicGFnZVlPZmZzZXQiLCJwYWdlWE9mZnNldCIsInNjcm9sbCIsInR3ZWVuIiwiYW5pbWF0ZSIsInNjcm9sbFRvIiwiUmVhY3RET00iLCJhbGlnbiIsImFsaWdubWVudCIsImVsZW1lbnRSZWN0IiwiZG9jdW1lbnRIZWlnaHQiLCJtYXhTY3JvbGxQb3NpdGlvbiIsImNhbGN1bGF0ZVNjcm9sbE9mZnNldCIsIl9zdHlsZXMiLCJfY29yZSIsIlRhYkNvbnRhaW5lciIsImRpciIsIl9UeXBvZ3JhcGh5MiIsIkNhcmRUYWJsZSIsImhhbmRsZUNoYW5nZUluZGV4IiwicmVxdWVzdFJpZGUiLCJjb21wYW55IiwicHJvZHVjdF9uYW1lIiwicHJvZHVjdF9pZCIsImRlcGFyTGF0IiwiZGVwYXJMbmciLCJkZXN0TGF0IiwiZGVzdExuZyIsImRlcGFyQWRkciIsImRlc3RBZGRyIiwiZGVlcExpbmsiLCJsb2ciLCJsb2NhdGlvbiIsImNhcmRGYWN0b3J5IiwicHJpY2VEYXRhIiwibWluX2VzdGltYXRlIiwiX0dyaWQyIiwiZ3JpZF9pdGVtIiwiX0NhcmQyIiwiY2FyZCIsIl9DYXJkQ29udGVudDIiLCJJY29uQnV0dG9uIiwiX0RpcmVjdGlvbnNDYXIyIiwicHJpY2UiLCJtYXhfZXN0aW1hdGUiLCJkaXNwbGF5X25hbWUiLCJyZXF1ZXN0IiwiX0J1dHRvbjIiLCJvbkNsaWNrIiwiZGlzdGFuY2UiLCJ0YWJGYWN0b3J5IiwidGltZURhdGEiLCJldGEiLCJmYWIiLCJfQWRkMiIsIl9Nb2RlRWRpdDIiLCJfY2xhc3NuYW1lczIiLCJmYWJHcmVlbiIsIl9LZXlib2FyZEFycm93VXAyIiwiX0FwcEJhcjIiLCJfVGFiczIiLCJpbmRpY2F0b3JDb2xvciIsInRleHRDb2xvciIsIl9UYWIyIiwibGFiZWwiLCJfcmVhY3RTd2lwZWFibGVWaWV3czIiLCJfR3JpZExpc3QyIiwiZ3JpZExpc3QiLCJjb2xzIiwiY2VsbEhlaWdodCIsIl9HcmlkTGlzdFRpbGUyIiwiX0F2YXRhcjIiLCJub1dyYXAiLCJfcmVhY3RTY3JvbGxUb0NvbXBvbmVudDIiLCJjYXJkVGFibGUiLCJlc3REYXRhIiwibG9hZGluZyIsImF2YXRhciIsIndyYXBwZXIiLCJzZWN0aW9uIiwid2l0aFN0eWxlcyIsImFsaWduQ29udGVudCIsImdyZWVuIiwiU2VhcmNoQnV0dG9uIiwiX0ljb25CdXR0b24yIiwiX1NlYXJjaDIiLCJJbnB1dEZpZWxkIiwibG9hZEF1dG9Db21wbGV0ZSIsImdvb2dsZSIsIm1hcHMiLCJkZXBhck5vZGUiLCJnZXRFbGVtZW50QnlJZCIsImRlc3ROb2RlIiwiZGVwYXJBQyIsInBsYWNlcyIsIkF1dG9jb21wbGV0ZSIsImRlc3RBQyIsImFkZExpc3RlbmVyIiwicGxhY2UiLCJnZXRQbGFjZSIsImdlb21ldHJ5IiwidXBkYXRlTG9jYXRpb24iLCJmb3JtYXR0ZWRfYWRkcmVzcyIsImRlcGFyVGV4dCIsImFsZXJ0IiwiZGVzdFRleHQiLCJwYXJzZVBsYWNlTmFtZSIsImxvbmdfbmFtZSIsInNob3J0X25hbWUiLCJjdXJyZW50TG9jIiwiaGFuZGxlQ2xpY2siLCJnZXRDdXJyZW50TG9jYXRpb24iLCJoYW5kbGVDdXJyZW50TG9jYXRpb24iLCJnZW9jb2RlciIsIkdlb2NvZGVyIiwibGF0bG5nIiwiY29vcmRzIiwibGF0aXR1ZGUiLCJsb25naXR1ZGUiLCJnZW9jb2RlIiwicmVzdWx0cyIsInBhcmVudERlcGFyVGV4dCIsInBhcmVudERlc3RUZXh0IiwicHJldlN0YXRlcyIsImRlcGFyRmxhZyIsImRlc3RGbGFnIiwiaGFuZGxlU2VhcmNoIiwiX3Byb3BzMyIsIl9Gb3JtQ29udHJvbDIiLCJfSW5wdXRMYWJlbDIiLCJzaHJpbmsiLCJfSW5wdXQyIiwidGV4dEZpZWxkIiwiX0lucHV0QWRvcm5tZW50MiIsIl9Mb2NhdGlvbk9uMiIsIl9UZXh0RmllbGQyIiwiSW5wdXRQcm9wcyIsIl93aXRoV2lkdGgyIiwiX1RyYW5zaXRpb24iLCJfdXRpbHMiLCJlbnRlcmluZyIsImVudGVyZWQiLCJab29tIiwidHJhbnNpdGlvblByb3BzIiwid2Via2l0VHJhbnNpdGlvbiIsImhhbmRsZUV4aXQiLCJzdHlsZVByb3AiLCJfb3B0aW9ucyRicmVha3BvaW50IiwiYnJlYWtwb2ludCIsIldpdGhNb2JpbGVEaWFsb2ciLCJmdWxsU2NyZWVuIiwiaXNXaWR0aERvd24iLCJfcmVhY3RFdmVudExpc3RlbmVyIiwiX2RlYm91bmNlIiwiX3JlYWN0UG9wcGVyIiwidG9vbHRpcCIsIiYkb3BlbiIsInRvb2x0aXBQbGFjZW1lbnRMZWZ0IiwidG9vbHRpcFBsYWNlbWVudFJpZ2h0IiwidG9vbHRpcFBsYWNlbWVudFRvcCIsInRvb2x0aXBQbGFjZW1lbnRCb3R0b20iLCJUb29sdGlwIiwiZW50ZXJUaW1lciIsImxlYXZlVGltZXIiLCJ0b3VjaFRpbWVyIiwiY2xvc2VUaW1lciIsImlnbm9yZU5vblRvdWNoRXZlbnRzIiwiaGFuZGxlUmVzaXplIiwiZW50ZXJEZWxheSIsImNoaWxkcmVuUHJvcHMiLCJvbk1vdXNlT3ZlciIsImhhbmRsZU9wZW4iLCJvbk9wZW4iLCJoYW5kbGVMZWF2ZSIsIl90aGlzJHByb3BzMiIsImxlYXZlRGVsYXkiLCJoYW5kbGVDbG9zZSIsIl90aGlzJHByb3BzMyIsImVudGVyVG91Y2hEZWxheSIsIl90aGlzJHByb3BzNCIsImxlYXZlVG91Y2hEZWxheSIsImRpc2FibGVGb2N1c0xpc3RlbmVyIiwiZGlzYWJsZUhvdmVyTGlzdGVuZXIiLCJkaXNhYmxlVG91Y2hMaXN0ZW5lciIsIm9wZW5Qcm9wIiwicGxhY2VtZW50UHJvcCIsIl9wcm9wcyRQb3BwZXJQcm9wcyIsIlBvcHBlclByb3BzIiwiUG9wcGVyQ2xhc3NOYW1lIiwiZmxpcFBsYWNlbWVudCIsImFyaWEtZGVzY3JpYmVkYnkiLCJvblJlc2l6ZSIsIlRhcmdldCIsInJvb3RSZWYiLCJhY3R1YWxQbGFjZW1lbnQiLCJUZXh0RmllbGQiLCJGb3JtSGVscGVyVGV4dFByb3BzIiwiaGVscGVyVGV4dCIsIklucHV0TGFiZWxQcm9wcyIsIlNlbGVjdFByb3BzIiwiaGVscGVyVGV4dElkIiwiSW5wdXRFbGVtZW50IiwiaHRtbEZvciIsImJ1dHRvbiIsIm1heFdpZHRoIiwibGFiZWxJY29uIiwidGV4dENvbG9ySW5oZXJpdCIsIiYkc2VsZWN0ZWQiLCJ0ZXh0Q29sb3JQcmltYXJ5IiwidGV4dENvbG9yU2Vjb25kYXJ5Iiwic2VsZWN0ZWQiLCJsYWJlbENvbnRhaW5lciIsInBhZGRpbmdCb3R0b20iLCJsYWJlbFdyYXBwZWQiLCJUYWIiLCJjaGVja1RleHRXcmFwIiwiZ2V0Q2xpZW50UmVjdHMiLCJwcmV2U3RhdGUiLCJpbmRpY2F0b3IiLCJsYWJlbFByb3AiLCJmb2N1c1JpcHBsZSIsImFyaWEtc2VsZWN0ZWQiLCJfS2V5Ym9hcmRBcnJvd0xlZnQiLCJfS2V5Ym9hcmRBcnJvd1JpZ2h0IiwiVGFiU2Nyb2xsQnV0dG9uIiwidmlzaWJsZSIsImNvbG9yUHJpbWFyeSIsImNvbG9yU2Vjb25kYXJ5IiwiVGFiSW5kaWNhdG9yIiwibXNPdmVyZmxvd1N0eWxlIiwiU2Nyb2xsYmFyU2l6ZSIsInNldE1lYXN1cmVtZW50cyIsInNjcm9sbGJhckhlaWdodCIsInNjcm9sbGJhcldpZHRoIiwicHJldkhlaWdodCIsInByZXZXaWR0aCIsIndpbiIsIkVfTk9TQ1JPTEwiLCJFX0NBTkNFTExFRCIsIm1ha2UiLCJjYW5jZWxsZWQiLCJ0aW1lIiwiZWFzZWQiLCJjYWNoZWRUeXBlIiwiaW5ET00iLCJkZXRlY3RTY3JvbGxUeXBlIiwiZHVtbXkiLCJjcmVhdGVUZXh0Tm9kZSIsIl9zZXRTY3JvbGxUeXBlIiwiZ2V0Tm9ybWFsaXplZFNjcm9sbExlZnQiLCJOYU4iLCJzZXROb3JtYWxpemVkU2Nyb2xsTGVmdCIsIl9ub3JtYWxpemVTY3JvbGxMZWZ0IiwiX3Njcm9sbCIsIl9TY3JvbGxiYXJTaXplIiwiX1RhYkluZGljYXRvciIsIl9UYWJTY3JvbGxCdXR0b24iLCJmbGV4Q29udGFpbmVyIiwic2Nyb2xsZXIiLCJmaXhlZCIsInNjcm9sbGFibGUiLCJjZW50ZXJlZCIsInNjcm9sbEJ1dHRvbnMiLCJzY3JvbGxCdXR0b25zQXV0byIsIlRhYnMiLCJpbmRpY2F0b3JTdHlsZSIsInNjcm9sbGVyU3R5bGUiLCJzaG93TGVmdFNjcm9sbCIsInNob3dSaWdodFNjcm9sbCIsImdldENvbmRpdGlvbmFsRWxlbWVudHMiLCJTY3JvbGxCdXR0b25Db21wb25lbnQiLCJjb25kaXRpb25hbEVsZW1lbnRzIiwic2Nyb2xsYmFyU2l6ZUxpc3RlbmVyIiwiaGFuZGxlU2Nyb2xsYmFyU2l6ZUNoYW5nZSIsInNob3dTY3JvbGxCdXR0b25zIiwic2Nyb2xsQnV0dG9uTGVmdCIsImhhbmRsZUxlZnRTY3JvbGxDbGljayIsInNjcm9sbEJ1dHRvblJpZ2h0IiwiaGFuZGxlUmlnaHRTY3JvbGxDbGljayIsImdldFRhYnNNZXRhIiwidGFic01ldGEiLCJ0YWJNZXRhIiwidGFicyIsInNjcm9sbExlZnROb3JtYWxpemVkIiwidmFsdWVUb0luZGV4IiwidXBkYXRlSW5kaWNhdG9yU3RhdGUiLCJ1cGRhdGVTY3JvbGxCdXR0b25TdGF0ZSIsIm1vdmVUYWJzU2Nyb2xsIiwiaGFuZGxlVGFic1Njcm9sbCIsIm11bHRpcGxpZXIiLCJuZXh0U2Nyb2xsTGVmdCIsImludmVydCIsInNjcm9sbFNlbGVjdGVkSW50b1ZpZXciLCJfdGhpcyRnZXRUYWJzTWV0YSIsIl9uZXh0U2Nyb2xsTGVmdCIsIl90aGlzJHRhYnMiLCJ1cGRhdGVJbmRpY2F0b3IiLCJfZ2V0VGFic01ldGEiLCJjb3JyZWN0aW9uIiwiX2NsYXNzTmFtZXMzIiwiX3Byb3BzJFRhYkluZGljYXRvclByIiwiVGFiSW5kaWNhdG9yUHJvcHMiLCJzY3JvbGxlckNsYXNzTmFtZSIsImZsZXhDb250YWluZXJDbGFzc05hbWUiLCJjaGlsZEluZGV4IiwiY2hpbGRWYWx1ZSIsIkFycm93RG93bndhcmQiLCJfQXJyb3dEb3dud2FyZCIsIiYgJGljb24iLCJpY29uRGlyZWN0aW9uRGVzYyIsImljb25EaXJlY3Rpb25Bc2MiLCJUYWJsZVNvcnRMYWJlbCIsImRpc2FibGVSaXBwbGUiLCImJGhvdmVyOmhvdmVyIiwiaG92ZXIiLCJoZWFkIiwiZm9vdGVyIiwiVGFibGVSb3ciLCJ0YWJsZSIsIl9yZWYzIiwiX3JlZjQiLCJfcmVmNSIsIlRhYmxlUGFnaW5hdGlvbkFjdGlvbnMiLCJoYW5kbGVCYWNrQnV0dG9uQ2xpY2siLCJvbkNoYW5nZVBhZ2UiLCJwYWdlIiwiaGFuZGxlTmV4dEJ1dHRvbkNsaWNrIiwiYmFja0ljb25CdXR0b25Qcm9wcyIsIm5leHRJY29uQnV0dG9uUHJvcHMiLCJyb3dzUGVyUGFnZSIsIl9UYWJsZVBhZ2luYXRpb25BY3Rpb25zIiwiJjpsYXN0LWNoaWxkIiwidG9vbGJhciIsInNwYWNlciIsIm1lbnVJdGVtIiwiY2FwdGlvbiIsInNlbGVjdFJvb3QiLCJzZWxlY3RJY29uIiwiYWN0aW9ucyIsIlRhYmxlUGFnaW5hdGlvbiIsIm5ld0xhc3RQYWdlIiwiY29sU3BhbiIsIkFjdGlvbnNDb21wb25lbnQiLCJjb2xTcGFuUHJvcCIsImxhYmVsRGlzcGxheWVkUm93cyIsImxhYmVsUm93c1BlclBhZ2UiLCJvbkNoYW5nZVJvd3NQZXJQYWdlIiwicm93c1BlclBhZ2VPcHRpb25zIiwicm93c1BlclBhZ2VPcHRpb24iLCJUYWJsZUhlYWQiLCJUYWJsZUZvb3RlciIsIl9jb2xvck1hbmlwdWxhdG9yIiwiZm9udFdlaWdodCIsImZvbnRXZWlnaHRNZWRpdW0iLCJmb250V2VpZ2h0UmVndWxhciIsIm51bWVyaWMiLCJwYWRkaW5nRGVuc2UiLCJwYWRkaW5nQ2hlY2tib3giLCJwYWRkaW5nTm9uZSIsIlRhYmxlQ2VsbCIsInNvcnREaXJlY3Rpb24iLCJzY29wZVByb3AiLCJzY29wZSIsImFyaWFTb3J0IiwiYXJpYS1zb3J0IiwiVGFibGVCb2R5IiwiYm9yZGVyQ29sbGFwc2UiLCJib3JkZXJTcGFjaW5nIiwiVGFibGUiLCJfU3dpdGNoQmFzZSIsImljb25DaGVja2VkIiwic3dpdGNoQmFzZSIsIiYgKyAkYmFyIiwiJiRjaGVja2VkIiwiJiRzd2l0Y2hCYXNlIiwiYmFyIiwiU3dpdGNoIiwiZGlzY292ZXJ5QW5jaG9yTGVmdCIsImRpc2NvdmVyeUFuY2hvclJpZ2h0IiwiZGlzY292ZXJ5QW5jaG9yVG9wIiwiZGlzY292ZXJ5QW5jaG9yQm90dG9tIiwiU3dpcGVBcmVhIiwic3dpcGVBcmVhV2lkdGgiLCJub2RlVGhhdENsYWltZWRUaGVTd2lwZSIsIl9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyIiwiX1N3aXBlQXJlYSIsIlN3aXBlYWJsZURyYXdlciIsImhhbmRsZUJvZHlUb3VjaFN0YXJ0IiwiZGlzYWJsZURpc2NvdmVyeSIsImRpc2FibGVTd2lwZVRvT3BlbiIsImN1cnJlbnRYIiwiY3VycmVudFkiLCJjbGllbnRZIiwibWF5YmVTd2lwaW5nIiwic2V0UG9zaXRpb24iLCJnZXRNYXhUcmFuc2xhdGUiLCJjaGFuZ2VUcmFuc2l0aW9uIiwiaGFuZGxlQm9keVRvdWNoTW92ZSIsImhhbmRsZUJvZHlUb3VjaEVuZCIsImhvcml6b250YWxTd2lwZSIsImdldFRyYW5zbGF0ZSIsInJlbW92ZUJvZHlUb3VjaExpc3RlbmVycyIsImNoYW5nZWRUb3VjaGVzIiwiYmFja2Ryb3AiLCJoYW5kbGVCYWNrZHJvcFJlZiIsImhhbmRsZVBhcGVyUmVmIiwibGlzdGVuVG91Y2hTdGFydCIsInByZXZWYXJpYW50IiwicmVtb3ZlVG91Y2hTdGFydCIsIl9vcHRpb25zJG1vZGUiLCJfb3B0aW9ucyRjaGFuZ2VUcmFuc2kiLCJydGxUcmFuc2xhdGVNdWx0aXBsaWVyIiwiZHJhd2VyU3R5bGUiLCJ3ZWJraXRUcmFuc2Zvcm0iLCJkaXNhYmxlQmFja2Ryb3BUcmFuc2l0aW9uIiwiYmFja2Ryb3BTdHlsZSIsIk1vZGFsUHJvcHNQcm9wIiwiRnJhZ21lbnQiLCJhbHRlcm5hdGl2ZUxhYmVsIiwiU3RlcHBlciIsImFjdGl2ZVN0ZXAiLCJjb25uZWN0b3JQcm9wIiwiY29ubmVjdG9yIiwibm9uTGluZWFyIiwib3JpZW50YXRpb24iLCJjaGlsZHJlbkFycmF5IiwidG9BcnJheSIsInN0ZXBzIiwiY29udHJvbFByb3BzIiwiY29tcGxldGVkIiwiU3RlcENvbnRlbnQiLCJUcmFuc2l0aW9uQ29tcG9uZW50Iiwib3B0aW9uYWwiLCJ0cmFuc2l0aW9uRHVyYXRpb25Qcm9wIiwiVHJhbnNpdGlvblByb3BzIiwibXVpU3VwcG9ydEF1dG8iLCJsaW5lIiwiYm9yZGVyQ29sb3IiLCJsaW5lSG9yaXpvbnRhbCIsImJvcmRlclRvcFN0eWxlIiwibGluZVZlcnRpY2FsIiwiYm9yZGVyTGVmdFN0eWxlIiwiU3RlcENvbm5lY3RvciIsImxpbmVDbGFzc05hbWUiLCJmaWxsIiwiY29udHJhc3RUZXh0IiwiY3giLCJjeSIsIlN0ZXBQb3NpdGlvbkljb24iLCJ0ZXh0QW5jaG9yIiwiV2FybmluZyIsIkNoZWNrQ2lyY2xlIiwiX0NoZWNrQ2lyY2xlIiwiX1dhcm5pbmciLCJfU3RlcFBvc2l0aW9uSWNvbiIsIiYkYWN0aXZlIiwiJiRjb21wbGV0ZWQiLCImJGVycm9yIiwiU3RlcEljb24iLCImJGFsdGVybmF0aXZlTGFiZWwiLCJpY29uQ29udGFpbmVyIiwiU3RlcExhYmVsIiwiU3RlcEljb25Qcm9wcyIsIl9yZWFjdEhlbHBlcnMiLCJ0b3VjaFJpcHBsZSIsIlN0ZXBCdXR0b24iLCJUb3VjaFJpcHBsZVByb3BzIiwiJjpmaXJzdC1jaGlsZCIsIlN0ZXAiLCJfcm9vdCIsImVtcGhhc2lzIiwiZ2V0Q29udHJhc3RUZXh0IiwiZmxleFdyYXAiLCJtZXNzYWdlIiwiU25hY2tiYXJDb250ZW50IiwiaGVhZGxpbmVNYXBwaW5nIiwiYm9keTEiLCJfb2JqZWN0U3ByZWFkOCIsImd1dHRlciIsInRvcFNwYWNlIiwiYm90dG9tU3BhY2UiLCJyaWdodFNwYWNlIiwibGVmdFNwYWNlIiwic25hY2tiYXIiLCJhbmNob3JPcmlnaW5Ub3BDZW50ZXIiLCJhbmNob3JPcmlnaW5Cb3R0b21DZW50ZXIiLCJhbmNob3JPcmlnaW5Ub3BSaWdodCIsImFuY2hvck9yaWdpbkJvdHRvbVJpZ2h0IiwiYW5jaG9yT3JpZ2luVG9wTGVmdCIsImFuY2hvck9yaWdpbkJvdHRvbUxlZnQiLCJTbmFja2JhciIsInRpbWVyQXV0b0hpZGUiLCJoYW5kbGVNb3VzZUVudGVyIiwib25Nb3VzZUVudGVyIiwiaGFuZGxlUGF1c2UiLCJoYW5kbGVSZXN1bWUiLCJoYW5kbGVDbGlja0F3YXkiLCJhdXRvSGlkZUR1cmF0aW9uIiwicmVzdW1lSGlkZUR1cmF0aW9uIiwic2V0QXV0b0hpZGVUaW1lciIsImhhbmRsZUV4aXRlZCIsImV4aXRlZCIsIl9wcm9wcyRhbmNob3JPcmlnaW4iLCJDb250ZW50UHJvcHMiLCJkaXNhYmxlV2luZG93Qmx1ckxpc3RlbmVyIiwib25DbGlja0F3YXkiLCJfdG9Db25zdW1hYmxlQXJyYXkyIiwiX2tleWNvZGUiLCJTZWxlY3RJbnB1dCIsImlnbm9yZU5leHRCbHVyIiwiZGlzcGxheU5vZGUiLCJkaXNwbGF5V2lkdGgiLCJpc09wZW5Db250cm9sbGVkIiwidXBkYXRlRGlzcGxheVdpZHRoIiwiaGFuZGxlSXRlbUNsaWNrIiwibXVsdGlwbGUiLCJpdGVtSW5kZXgiLCJoYW5kbGVLZXlEb3duIiwiaGFuZGxlRGlzcGxheVJlZiIsImhhbmRsZUlucHV0UmVmIiwibm9kZVByb3h5IiwiZm9yY2VVcGRhdGUiLCJhdXRvV2lkdGgiLCJkaXNwbGF5RW1wdHkiLCJfcHJvcHMkTWVudVByb3BzIiwiTWVudVByb3BzIiwicmVuZGVyVmFsdWUiLCJTZWxlY3REaXNwbGF5UHJvcHMiLCJ0YWJJbmRleFByb3AiLCJfcHJvcHMkdHlwZSIsImRpc3BsYXlTaW5nbGUiLCJkaXNwbGF5TXVsdGlwbGUiLCJjb21wdXRlRGlzcGxheSIsIml0ZW1zIiwiZGF0YS12YWx1ZSIsIk1lbnVNaW5XaWR0aCIsImFyaWEtcHJlc3NlZCIsImFyaWEtb3ducyIsImFyaWEtaGFzcG9wdXAiLCJkYW5nZXJvdXNseVNldElubmVySFRNTCIsIl9faHRtbCIsImFuY2hvckVsIiwiX1NlbGVjdElucHV0IiwiU2VsZWN0IiwibmF0aXZlIiwiaW5wdXROYXRpdmVQcm9wcyIsIlJhZGlvR3JvdXAiLCJyYWRpb3MiLCJmb2N1c1JhZGlvcyIsInNlbGVjdGVkUmFkaW8iLCJoYW5kbGVSYWRpb0NoYW5nZSIsIlJhZGlvQnV0dG9uQ2hlY2tlZCIsIlJhZGlvQnV0dG9uVW5jaGVja2VkIiwiX1JhZGlvQnV0dG9uVW5jaGVja2VkIiwiX1JhZGlvQnV0dG9uQ2hlY2tlZCIsIlJhZGlvIiwicG9zaXRpb25Cb3R0b20iLCJtb2JpbGVTdGVwcGVyIiwicG9zaXRpb25Ub3AiLCJwb3NpdGlvblN0YXRpYyIsImRvdHMiLCJkb3QiLCJkb3RBY3RpdmUiLCJwcm9ncmVzcyIsIk1vYmlsZVN0ZXBwZXIiLCJiYWNrQnV0dG9uIiwibmV4dEJ1dHRvbiIsImRvdENsYXNzTmFtZSIsInN1YmhlYWRpbmciLCJNZW51SXRlbSIsIl9jb250YWlucyIsIl9hY3RpdmVFbGVtZW50IiwiTWVudUxpc3QiLCJjdXJyZW50VGFiSW5kZXgiLCJsaXN0IiwiYmx1clRpbWVyIiwiY3VycmVudEZvY3VzIiwicmVzZXRUYWJJbmRleCIsInByZXZpb3VzRWxlbWVudFNpYmxpbmciLCJoYW5kbGVJdGVtRm9jdXMiLCJzZXRUYWJJbmRleCIsImN1cnJlbnRGb2N1c0luZGV4IiwiX293bmVyV2luZG93IiwiZ2V0T2Zmc2V0VG9wIiwiZ2V0T2Zmc2V0TGVmdCIsImdldFRyYW5zZm9ybU9yaWdpblZhbHVlIiwiZ2V0QW5jaG9yRWwiLCJQb3BvdmVyIiwic2V0UG9zaXRpb25pbmdTdHlsZXMiLCJwb3NpdGlvbmluZyIsImdldFBvc2l0aW9uaW5nU3R5bGUiLCJhbmNob3JSZWZlcmVuY2UiLCJtYXJnaW5UaHJlc2hvbGQiLCJjb250ZW50QW5jaG9yT2Zmc2V0IiwiZ2V0Q29udGVudEFuY2hvck9mZnNldCIsImVsZW1SZWN0IiwiZ2V0VHJhbnNmb3JtT3JpZ2luIiwiYW5jaG9yT2Zmc2V0IiwiZ2V0QW5jaG9yT2Zmc2V0IiwiY29udGFpbmVyV2luZG93IiwiaGVpZ2h0VGhyZXNob2xkIiwid2lkdGhUaHJlc2hvbGQiLCJkaWZmIiwiX2RpZmYiLCJfZGlmZjIiLCJfZGlmZjMiLCJ0cmFuc2l0aW9uRWwiLCJoYW5kbGVHZXRPZmZzZXRUb3AiLCJoYW5kbGVHZXRPZmZzZXRMZWZ0IiwidXBkYXRlUG9zaXRpb24iLCJhbmNob3JQb3NpdGlvbiIsImFuY2hvclJlY3QiLCJhbmNob3JWZXJ0aWNhbCIsImNvbnRlbnRBbmNob3JFbCIsIm9mZnNldFRvcCIsImNvbnRhaW5lclByb3AiLCJpbnZpc2libGUiLCJndXR0ZXJzIiwibGlzdFN0eWxlIiwiY29sb3JJbmhlcml0IiwiaW5zZXQiLCJzdGlja3kiLCJMaXN0U3ViaGVhZGVyIiwiZGlzYWJsZVN0aWNreSIsImRlbnNlIiwiJiR0ZXh0RGVuc2UiLCJ0ZXh0RGVuc2UiLCJMaXN0SXRlbVRleHQiLCJkaXNhYmxlVHlwb2dyYXBoeSIsInByaW1hcnlQcm9wIiwic2Vjb25kYXJ5UHJvcCIsIkxpc3RJdGVtU2Vjb25kYXJ5QWN0aW9uIiwiTGlzdEl0ZW1JY29uIiwiTGlzdEl0ZW1BdmF0YXIiLCJ0ZXh0RGVjb3JhdGlvbiIsImZvY3VzVmlzaWJsZSIsImJhY2tncm91bmRDbGlwIiwiQG1lZGlhIChob3Zlcjogbm9uZSkiLCJzZWNvbmRhcnlBY3Rpb24iLCJMaXN0SXRlbSIsImNvbXBvbmVudFByb3AiLCJDb250YWluZXJDb21wb25lbnQiLCJfcHJvcHMkQ29udGFpbmVyUHJvcHMiLCJDb250YWluZXJQcm9wcyIsIkNvbnRhaW5lckNsYXNzTmFtZSIsImRpc2FibGVHdXR0ZXJzIiwiZm9jdXNWaXNpYmxlQ2xhc3NOYW1lIiwiaXNEZW5zZSIsImhhc0F2YXRhciIsImhhc1NlY29uZGFyeUFjdGlvbiIsInBvcCIsInN1YmhlYWRlciIsIkxpc3QiLCJkaXNhYmxlUGFkZGluZyIsImJ1ZmZlciIsInF1ZXJ5IiwiZGFzaGVkIiwiYW5pbWF0aW9uIiwiZGFzaGVkQ29sb3JQcmltYXJ5IiwiYmFja2dyb3VuZEltYWdlIiwiYmFja2dyb3VuZFNpemUiLCJiYWNrZ3JvdW5kUG9zaXRpb24iLCJkYXNoZWRDb2xvclNlY29uZGFyeSIsImJhckNvbG9yUHJpbWFyeSIsImJhckNvbG9yU2Vjb25kYXJ5IiwiYmFyMUluZGV0ZXJtaW5hdGUiLCJiYXIySW5kZXRlcm1pbmF0ZSIsImJhcjFEZXRlcm1pbmF0ZSIsImJhcjFCdWZmZXIiLCJiYXIyQnVmZmVyIiwiQGtleWZyYW1lcyBtdWktaW5kZXRlcm1pbmF0ZTEiLCIwJSIsIjYwJSIsIjEwMCUiLCJAa2V5ZnJhbWVzIG11aS1pbmRldGVybWluYXRlMiIsIkBrZXlmcmFtZXMgYnVmZmVyIiwiNTAlIiwiTGluZWFyUHJvZ3Jlc3MiLCJfY2xhc3NOYW1lczQiLCJ2YWx1ZUJ1ZmZlciIsImRhc2hlZENsYXNzIiwiYmFyMUNsYXNzTmFtZSIsImJhcjJDbGFzc05hbWUiLCJyb290UHJvcHMiLCJpbmxpbmVTdHlsZXMiLCJiYXIxIiwiYmFyMiIsIm1hcmdpbkRlbnNlIiwiYW5pbWF0ZWQiLCJJbnB1dExhYmVsIiwiZGlzYWJsZUFuaW1hdGlvbiIsIkZvcm1MYWJlbENsYXNzZXMiLCJtYXJnaW5Qcm9wIiwic2hyaW5rUHJvcCIsImZpbGxlZCIsImFkb3JuZWRTdGFydCIsImRhdGEtc2hyaW5rIiwicG9zaXRpb25TdGFydCIsInBvc2l0aW9uRW5kIiwiSW5wdXRBZG9ybm1lbnQiLCJjb2xvckFjdGlvbiIsImNvbG9yRXJyb3IiLCJjb2xvckRpc2FibGVkIiwiSGlkZGVuQ3NzIiwibGdEb3duIiwibGdVcCIsIm1kRG93biIsIm1kVXAiLCJzbURvd24iLCJzbVVwIiwieGxEb3duIiwieGxVcCIsInhzRG93biIsInhzVXAiLCJicmVha3BvaW50VXAiLCJicmVha3BvaW50RG93biIsIl9leGFjdFByb3AiLCJIaWRkZW5KcyIsIl9pIiwiX2JyZWFrcG9pbnQiLCJpc1dpZHRoVXAiLCJpbXBsZW1lbnRhdGlvbiIsImluaXRpYWxXaWR0aCIsImFycmF5T2YiLCJfSGlkZGVuSnMiLCJfSGlkZGVuQ3NzIiwiSGlkZGVuIiwiZ2V0U2NhbGUiLCJHcm93IiwiYXV0b1RpbWVvdXQiLCJ0aW1lciIsIl9nZXRUcmFuc2l0aW9uUHJvcHMiLCJfZ2V0VHJhbnNpdGlvblByb3BzMiIsInRpdGxlUG9zaXRpb25Cb3R0b20iLCJ0aXRsZVBvc2l0aW9uVG9wIiwicm9vdFN1YnRpdGxlIiwidGl0bGVXcmFwIiwidGl0bGVXcmFwQWN0aW9uUG9zTGVmdCIsInRpdGxlV3JhcEFjdGlvblBvc1JpZ2h0Iiwic3VidGl0bGUiLCJhY3Rpb25JY29uIiwiYWN0aW9uSWNvbkFjdGlvblBvc0xlZnQiLCJHcmlkTGlzdFRpbGVCYXIiLCJhY3Rpb25Qb3NpdGlvbiIsInRpdGxlUG9zaXRpb24iLCJhY3Rpb25Qb3MiLCJ0aXRsZVdyYXBDbGFzc05hbWUiLCJ0aWxlIiwiaW1nRnVsbEhlaWdodCIsImltZ0Z1bGxXaWR0aCIsIkdyaWRMaXN0VGlsZSIsImltZ0VsZW1lbnQiLCJmaXQiLCJjb21wbGV0ZSIsIl9pbWdFbGVtZW50JGNsYXNzTGlzdCIsIl9pbWdFbGVtZW50JGNsYXNzTGlzdDIiLCJfaW1nRWxlbWVudCRjbGFzc0xpc3QzIiwiX2ltZ0VsZW1lbnQkY2xhc3NMaXN0NCIsImNsYXNzTGlzdCIsImVuc3VyZUltYWdlQ292ZXIiLCJHcmlkTGlzdCIsImN1cnJlbnRDaGlsZCIsImNoaWxkQ29scyIsImNoaWxkUm93cyIsInJlcXVpcmVkUHJvcCIsInByb3BOYW1lIiwiY29tcG9uZW50TmFtZSIsInByb3BGdWxsTmFtZSIsInByb3BGdWxsTmFtZVNhZmUiLCJHVVRURVJTIiwiR1JJRF9TSVpFUyIsInplcm9NaW5XaWR0aCIsImRpcmVjdGlvbi14cy1jb2x1bW4iLCJkaXJlY3Rpb24teHMtY29sdW1uLXJldmVyc2UiLCJkaXJlY3Rpb24teHMtcm93LXJldmVyc2UiLCJ3cmFwLXhzLW5vd3JhcCIsIndyYXAteHMtd3JhcC1yZXZlcnNlIiwiYWxpZ24taXRlbXMteHMtY2VudGVyIiwiYWxpZ24taXRlbXMteHMtZmxleC1zdGFydCIsImFsaWduLWl0ZW1zLXhzLWZsZXgtZW5kIiwiYWxpZ24taXRlbXMteHMtYmFzZWxpbmUiLCJhbGlnbi1jb250ZW50LXhzLWNlbnRlciIsImFsaWduLWNvbnRlbnQteHMtZmxleC1zdGFydCIsImFsaWduLWNvbnRlbnQteHMtZmxleC1lbmQiLCJhbGlnbi1jb250ZW50LXhzLXNwYWNlLWJldHdlZW4iLCJhbGlnbi1jb250ZW50LXhzLXNwYWNlLWFyb3VuZCIsImp1c3RpZnkteHMtY2VudGVyIiwianVzdGlmeS14cy1mbGV4LWVuZCIsImp1c3RpZnkteHMtc3BhY2UtYmV0d2VlbiIsImp1c3RpZnkteHMtc3BhY2UtYXJvdW5kIiwiJiA+ICRpdGVtIiwiZ2VuZXJhdGVHdXR0ZXIiLCJnbG9iYWxTdHlsZXMiLCJmbGV4QmFzaXMiLCJnZW5lcmF0ZUdyaWQiLCJHcmlkIiwianVzdGlmeSIsIndyYXAiLCImJGZvY3VzZWQiLCJhc3RlcmlzayIsIkZvcm1MYWJlbCIsImVycm9yUHJvcCIsImZvY3VzZWRQcm9wIiwiRm9ybUhlbHBlclRleHQiLCJyb3ciLCJGb3JtR3JvdXAiLCJGb3JtQ29udHJvbExhYmVsIiwiUk9XU19IRUlHSFQiLCJ0ZXh0YXJlYSIsInNoYWRvdyIsInZpc2liaWxpdHkiLCJUZXh0YXJlYSIsInNpbmdsZWxpbmVTaGFkb3ciLCJzeW5jSGVpZ2h0V2l0aFNoYWRvdyIsImhhbmRsZVJlZlNpbmdsZWxpbmVTaGFkb3ciLCJoYW5kbGVSZWZTaGFkb3ciLCJuZXdIZWlnaHQiLCJtYXJnaW5Ob3JtYWwiLCJGb3JtQ29udHJvbCIsImhhbmRsZURpcnR5IiwiaGFuZGxlQ2xlYW4iLCImOmhvdmVyOm5vdCgkZGlzYWJsZWQpIiwiJiRleHBhbmRlZCIsImV4cGFuZGVkIiwiJiA+IDpsYXN0LWNoaWxkIiwiZXhwYW5kSWNvbiIsIkV4cGFuc2lvblBhbmVsU3VtbWFyeSIsImFyaWEtZXhwYW5kZWQiLCJvbkZvY3VzVmlzaWJsZSIsIkV4cGFuc2lvblBhbmVsRGV0YWlscyIsIkV4cGFuc2lvblBhbmVsQWN0aW9ucyIsImVkZ2VGaXgiLCJAc3VwcG9ydHMgKC1tcy1pbWUtYWxpZ246IGF1dG8pIiwiYm9yZGVyQm90dG9tTGVmdFJhZGl1cyIsImJvcmRlckJvdHRvbVJpZ2h0UmFkaXVzIiwiYm9yZGVyVG9wTGVmdFJhZGl1cyIsImJvcmRlclRvcFJpZ2h0UmFkaXVzIiwiJiRleHBhbmRlZCArICYiLCJkaXNhYmxlZEJhY2tncm91bmQiLCJFeHBhbnNpb25QYW5lbCIsImRlZmF1bHRFeHBhbmRlZCIsIkNvbGxhcHNlUHJvcHNQcm9wIiwiQ29sbGFwc2VQcm9wcyIsImV4cGFuZGVkUHJvcCIsInN1bW1hcnkiLCJzZXRUcmFuc2xhdGVWYWx1ZSIsIkdVVFRFUiIsImZha2VUcmFuc2Zvcm0iLCJvZmZzZXRYIiwib2Zmc2V0WSIsImdldFRyYW5zbGF0ZVZhbHVlIiwiU2xpZGUiLCJoYW5kbGVFbnRlcmluZyIsImFic29sdXRlIiwiRGl2aWRlciIsIkRpYWxvZ1RpdGxlIiwiRGlhbG9nQ29udGVudFRleHQiLCJEaWFsb2dDb250ZW50IiwiRGlhbG9nQWN0aW9ucyIsImRpc2FibGVBY3Rpb25TcGFjaW5nIiwic2libGluZ3MiLCJCTEFDS0xJU1QiLCJtb3VudCIsInRhZ05hbWUiLCJpc0hpZGFibGUiLCJzaG93IiwicGFyZW50V2luZG93IiwiX2lzV2luZG93Iiwic3VwcG9ydGVkVHJhbnNmb3JtcyIsIm9wZW5lciIsIl9jYW1lbGl6ZVN0eWxlMiIsImN1cnJlbnRTdHlsZSIsInJudW1ub25weCIsInJwb3NpdGlvbiIsInJ1blN0eWxlIiwicnVudGltZVN0eWxlIiwicnNMZWZ0IiwicGl4ZWxMZWZ0IiwiX2NhbWVsaXplU3R5bGUiLCJyVXBwZXIiLCJfaHlwaGVuYXRlMiIsIl9oeXBoZW5hdGUiLCJySHlwaGVuIiwiY2hyIiwidHJhbnNmb3JtcyIsIl9nZXRDb21wdXRlZFN0eWxlMyIsIl9oeXBoZW5hdGVTdHlsZTIiLCJfaXNUcmFuc2Zvcm0yIiwiX3JlbW92ZVN0eWxlMiIsImNzc1RleHQiLCJQb3J0YWwiLCJnZXRNb3VudE5vZGUiLCJzZXRDb250YWluZXIiLCJvblJlbmRlcmVkIiwiZGVmYXVsdENvbnRhaW5lciIsImdldENvbnRhaW5lciIsImNyZWF0ZVBvcnRhbCIsIlJvb3RSZWYiLCJnZXRIYXNUcmFuc2l0aW9uIiwiTW9kYWwiLCJkaWFsb2dFbGVtZW50IiwiaGFuZGxlUmVuZGVyZWQiLCJtYW5hZ2VyIiwiaGFuZGxlRG9jdW1lbnRLZXlEb3duIiwiZW5mb3JjZUZvY3VzIiwicmVzdG9yZUxhc3RGb2N1cyIsImhhbmRsZUJhY2tkcm9wQ2xpY2siLCJvbkJhY2tkcm9wQ2xpY2siLCJkaXNhYmxlQmFja2Ryb3BDbGljayIsImlzVG9wTW9kYWwiLCJvbkVzY2FwZUtleURvd24iLCJkaXNhYmxlRXNjYXBlS2V5RG93biIsImNoZWNrRm9yRm9jdXMiLCJsYXN0Rm9jdXMiLCJkaXNhYmxlRW5mb3JjZUZvY3VzIiwiY3VycmVudEFjdGl2ZUVsZW1lbnQiLCJkaXNhYmxlQXV0b0ZvY3VzIiwiZGlzYWJsZVJlc3RvcmVGb2N1cyIsIkJhY2tkcm9wQ29tcG9uZW50IiwiaGlkZUJhY2tkcm9wIiwia2VlcE1vdW50ZWQiLCJoYXNUcmFuc2l0aW9uIiwicGFwZXJXaWR0aFhzIiwicGFwZXJXaWR0aFNtIiwicGFwZXJXaWR0aE1kIiwicGFwZXJGdWxsV2lkdGgiLCJwYXBlckZ1bGxTY3JlZW4iLCJEaWFsb2ciLCJDc3NCYXNlbGluZSIsIkBnbG9iYWwiLCJXZWJraXRGb250U21vb3RoaW5nIiwiTW96T3N4Rm9udFNtb290aGluZyIsIiosICo6OmJlZm9yZSwgKjo6YWZ0ZXIiLCJAbWVkaWEgcHJpbnQiLCJ3cmFwcGVySW5uZXIiLCJDb2xsYXBzZSIsImF1dG9UcmFuc2l0aW9uRHVyYXRpb24iLCJjb2xsYXBzZWRIZWlnaHQiLCJ3cmFwcGVySGVpZ2h0IiwiZHVyYXRpb24yIiwiaGFuZGxlRW50ZXJlZCIsImhhbmRsZUV4aXRpbmciLCJpc0Rlc2NlbmRhbnQiLCJDbGlja0F3YXlMaXN0ZW5lciIsImRlZmF1bHRQcmV2ZW50ZWQiLCJtb3VzZUV2ZW50IiwidG91Y2hFdmVudCIsImxpc3RlbmVyUHJvcHMiLCJTSVpFIiwic3RhdGljIiwiaW5kZXRlcm1pbmF0ZSIsInN2ZyIsImNpcmNsZSIsInN0cm9rZSIsInN0cm9rZUxpbmVjYXAiLCJjaXJjbGVTdGF0aWMiLCJjaXJjbGVJbmRldGVybWluYXRlIiwic3Ryb2tlRGFzaGFycmF5Iiwic3Ryb2tlRGFzaG9mZnNldCIsIkBrZXlmcmFtZXMgbXVpLXByb2dyZXNzLWNpcmN1bGFyLXJvdGF0ZSIsIkBrZXlmcmFtZXMgbXVpLXByb2dyZXNzLWNpcmN1bGFyLWRhc2giLCJDaXJjdWxhclByb2dyZXNzIiwidGhpY2tuZXNzIiwiY2lyY2xlU3R5bGUiLCJjaXJjdW1mZXJlbmNlIiwidmlld0JveCIsInN0cm9rZVdpZHRoIiwiQ2FuY2VsIiwiX0NhbmNlbCIsImRlbGV0ZUljb25Db2xvciIsImNsaWNrYWJsZSIsIiY6aG92ZXIsICY6Zm9jdXMiLCImOmFjdGl2ZSIsImRlbGV0YWJsZSIsImF2YXRhckNoaWxkcmVuIiwiZGVsZXRlSWNvbiIsIkNoaXAiLCJjaGlwUmVmIiwiaGFuZGxlRGVsZXRlSWNvbkNsaWNrIiwib25EZWxldGUiLCJibHVyIiwiYXZhdGFyUHJvcCIsImRlbGV0ZUljb25Qcm9wIiwiSW5kZXRlcm1pbmF0ZUNoZWNrQm94IiwiQ2hlY2tCb3giLCJDaGVja0JveE91dGxpbmVCbGFuayIsIl9DaGVja0JveE91dGxpbmVCbGFuayIsIl9DaGVja0JveCIsIl9JbmRldGVybWluYXRlQ2hlY2tCb3giLCJDaGVja2JveCIsImluZGV0ZXJtaW5hdGVJY29uIiwiYmFja2dyb3VuZFJlcGVhdCIsIm1lZGlhIiwiTUVESUFfQ09NUE9ORU5UUyIsIkNhcmRNZWRpYSIsImltYWdlIiwiaXNNZWRpYUNvbXBvbmVudCIsImNvbXBvc2VkU3R5bGUiLCJhbGlnblNlbGYiLCJDYXJkSGVhZGVyIiwiQ2FyZENvbnRlbnQiLCJDYXJkQWN0aW9ucyIsIkNhcmQiLCJyYWlzZWQiLCImJGljb25Pbmx5IiwiaWNvbk9ubHkiLCJCb3R0b21OYXZpZ2F0aW9uQWN0aW9uIiwic2hvd0xhYmVsUHJvcCIsInNob3dMYWJlbCIsImxhYmVsQ2xhc3NOYW1lIiwiQm90dG9tTmF2aWdhdGlvbiIsInNob3dMYWJlbHMiLCJiYWRnZSIsIlJBRElVUyIsIkJhZGdlIiwiYmFkZ2VDb250ZW50IiwiQ29tcG9uZW50UHJvcCIsImJhZGdlQ2xhc3NOYW1lIiwiRmFkZSIsIkJhY2tkcm9wIiwibG9hZE1hcCIsIm1hcE5vZGUiLCJ6b29tIiwiZGlyZWN0aW9uc1NlcnZpY2UiLCJEaXJlY3Rpb25zU2VydmljZSIsImRpcmVjdGlvbnNEaXNwbGF5IiwiRGlyZWN0aW9uc1JlbmRlcmVyIiwibG9jTWFya2VyIiwiTWFya2VyIiwiYW5jaG9yUG9pbmciLCJQb2ludCIsImRlcGFyTWFya2VyIiwiYW5jaG9yUG9pbnQiLCJkcmFnZ2FibGUiLCJBbmltYXRpb24iLCJEUk9QIiwiZGVzdE1hcmtlciIsImdlb2xvY2F0aW9uIiwiZ2V0Q3VycmVudFBvc2l0aW9uIiwiY3VycmVudFBvc2l0aW9uIiwic2V0VmlzaWJsZSIsInBhblRvIiwiZ2V0UG9zaXRpb24iLCJzZXRab29tIiwibmV3UG9zaXRpb24iLCJ1cGRhdGVNYXJrZXIiLCJkZXBhclZpZXdQb3J0IiwiZGVzdFZpZXdQb3J0IiwibGF0TG5nIiwiTGF0TG5nIiwiZml0Qm91bmRzIiwiZGVwYXJCb3VuZHMiLCJMYXRMbmdCb3VuZHMiLCJleHRlbmQiLCJkZXN0Qm91bmRzIiwiYm91bmRzIiwidW5pb24iLCJkcmF3Um91dGUiLCJzZXRNYXAiLCJzZXRPcHRpb25zIiwiZHJhZ2FibGUiLCJtYXJrZXJPcHRpb25zIiwib3JpZ2luIiwidHJhdmVsTW9kZSIsIlRyYXZlbE1vZGUiLCJEUklWSU5HIiwicm91dGUiLCJyZXNwb25zZSIsIkRpcmVjdGlvbnNTdGF0dXMiLCJPSyIsInNldERpcmVjdGlvbnMiLCJ0b1VybFZhbHVlIiwiU3ZnSWNvbiIsIm5hdGl2ZUNvbG9yIiwidGl0bGVBY2Nlc3MiLCJmb2N1c2FibGUiLCJfc2hhbGxvd0VxdWFsIiwiJE9iamVjdCIsIkQiLCJidWdneSIsIl9zZXRQcm90b3R5cGVPZjIiLCJfY3JlYXRlMiIsIl90eXBlb2YzIiwiZ09QTiIsIndpbmRvd05hbWVzIiwiZ2V0V2luZG93TmFtZXMiLCJjb2YiLCJnZXRLZXlzIiwiZ09QUyIsImdldFN5bWJvbHMiLCJpc0VudW0iLCJNRVRBIiwic2V0RGVzYyIsImlzRXh0ZW5zaWJsZSIsIkZSRUVaRSIsInByZXZlbnRFeHRlbnNpb25zIiwic2V0TWV0YSIsInciLCJLRVkiLCJORUVEIiwiZmFzdEtleSIsImdldFdlYWsiLCJvbkZyZWV6ZSIsIkRFU0NSSVBUT1JTIiwiJGZhaWxzIiwid2tzIiwid2tzRGVmaW5lIiwiZW51bUtleXMiLCJfY3JlYXRlIiwiZ09QTkV4dCIsIiRHT1BEIiwiJERQIiwiJEpTT04iLCJfc3RyaW5naWZ5IiwiSElEREVOIiwiVE9fUFJJTUlUSVZFIiwiU3ltYm9sUmVnaXN0cnkiLCJBbGxTeW1ib2xzIiwiT1BTeW1ib2xzIiwiT2JqZWN0UHJvdG8iLCJVU0VfTkFUSVZFIiwiUU9iamVjdCIsInNldHRlciIsImZpbmRDaGlsZCIsInNldFN5bWJvbERlc2MiLCJwcm90b0Rlc2MiLCJfayIsImlzU3ltYm9sIiwiJGRlZmluZVByb3BlcnR5IiwiJGRlZmluZVByb3BlcnRpZXMiLCIkcHJvcGVydHlJc0VudW1lcmFibGUiLCJFIiwiJGdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIiRnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiJGdldE93blByb3BlcnR5U3ltYm9scyIsIklTX09QIiwiJHNldCIsImVzNlN5bWJvbHMiLCJqIiwid2VsbEtub3duU3ltYm9scyIsImtleUZvciIsInVzZVNldHRlciIsInVzZVNpbXBsZSIsInJlcGxhY2VyIiwiJHJlcGxhY2VyIiwiZG9uZSIsImFkZFRvVW5zY29wYWJsZXMiLCJpdGVyYXRlZCIsIl90IiwiQXJndW1lbnRzIiwiVE9fU1RSSU5HX1RBRyIsIkRPTUl0ZXJhYmxlcyIsIkNvbGxlY3Rpb24iLCJ0b0ludGVnZXIiLCJ0b0xlbmd0aCIsInRvQWJzb2x1dGVJbmRleCIsIklTX0lOQ0xVREVTIiwiJHRoaXMiLCJmcm9tSW5kZXgiLCJUT19TVFJJTkciLCJwb3MiLCIkYXQiLCJwb2ludCIsIl9jbGFzc0NhbGxDaGVjazMiLCJfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjMiLCJfaW5oZXJpdHMzIiwiY3JlYXRlRmFjdG9yeSIsIlNob3VsZFVwZGF0ZSIsInNob3VsZENvbXBvbmVudFVwZGF0ZSIsImhvdmVyT3BhY2l0eSIsImNlbnRlclJpcHBsZSIsInJpcHBsZSIsImNsYXNzTmFtZXNTaGFwZSIsInRpbWVvdXRzU2hhcGUiLCJ0cmFuc2l0aW9uVGltZW91dCIsInRyYW5zaXRpb25UeXBlIiwidGltZW91dFByb3BOYW1lIiwiZW5hYmxlZFByb3BOYW1lIiwiX3Byb3BUeXBlczIiLCJlbnRlckRvbmUiLCJlbnRlckFjdGl2ZSIsImV4aXREb25lIiwiZXhpdEFjdGl2ZSIsIlJpcHBsZSIsImxlYXZpbmciLCJwdWxzYXRlIiwicmlwcGxlWCIsInJpcHBsZVkiLCJyaXBwbGVTaXplIiwicmlwcGxlQ2xhc3NOYW1lIiwicmlwcGxlVmlzaWJsZSIsInJpcHBsZVB1bHNhdGUiLCJyaXBwbGVTdHlsZXMiLCJjaGlsZENsYXNzTmFtZSIsImNoaWxkTGVhdmluZyIsImNoaWxkUHVsc2F0ZSIsImdldENoaWxkTWFwcGluZyIsIm1hcEZuIiwibWFwcGVyIiwibWVyZ2VDaGlsZE1hcHBpbmdzIiwiZ2V0VmFsdWVGb3JLZXkiLCJuZXh0S2V5c1BlbmRpbmciLCJwZW5kaW5nS2V5cyIsInByZXZLZXkiLCJjaGlsZE1hcHBpbmciLCJuZXh0S2V5IiwicGVuZGluZ05leHRLZXkiLCJfQ2hpbGRNYXBwaW5nIiwiVHJhbnNpdGlvbkdyb3VwIiwiYW55IiwiZ2V0UHJvcCIsImFwcGVhcmVkIiwicHJldkNoaWxkTWFwcGluZyIsIm5leHRDaGlsZE1hcHBpbmciLCJoYXNQcmV2IiwiaGFzTmV4dCIsInByZXZDaGlsZCIsImlzTGVhdmluZyIsImN1cnJlbnRDaGlsZE1hcHBpbmciLCJjaGlsZEZhY3RvcnkiLCJpdGVyIiwiYXJyMiIsIkRFTEFZX1JJUFBMRSIsIl9UcmFuc2l0aW9uR3JvdXAiLCJfUmlwcGxlIiwiRFVSQVRJT04iLCJAa2V5ZnJhbWVzIG11aS1yaXBwbGUtZW50ZXIiLCJAa2V5ZnJhbWVzIG11aS1yaXBwbGUtZXhpdCIsIkBrZXlmcmFtZXMgbXVpLXJpcHBsZS1wdWxzYXRlIiwiVG91Y2hSaXBwbGUiLCJyaXBwbGVzIiwiaWdub3JpbmdNb3VzZURvd24iLCJzdGFydFRpbWVyIiwic3RhcnRUaW1lckNvbW1pdCIsIl9vcHRpb25zJHB1bHNhdGUiLCJfb3B0aW9ucyRjZW50ZXIiLCJfb3B0aW9ucyRmYWtlRWxlbWVudCIsImZha2VFbGVtZW50IiwiY2xpZW50WCIsInNpemVYIiwic2l6ZVkiLCJzdGFydENvbW1pdCIsImRldGVjdEZvY3VzVmlzaWJsZSIsImF0dGVtcHQiLCJmb2N1c1Zpc2libGVUaW1lb3V0IiwiaW50ZXJuYWwiLCJmb2N1c0tleVByZXNzZWQiLCJmb2N1c1Zpc2libGVNYXhDaGVja1RpbWVzIiwiZm9jdXNWaXNpYmxlQ2hlY2tUaW1lIiwibGlzdGVuRm9yRm9jdXNLZXlzIiwiaGFuZGxlS2V5VXBFdmVudCIsImtleVVwRXZlbnRUaW1lb3V0IiwiRk9DVVNfS0VZUyIsImlzRm9jdXNLZXkiLCJfZm9jdXNWaXNpYmxlIiwiX1RvdWNoUmlwcGxlIiwiX2NyZWF0ZVJpcHBsZUhhbmRsZXIiLCImOjotbW96LWZvY3VzLWlubmVyIiwiYm9yZGVyU3R5bGUiLCJCdXR0b25CYXNlIiwib25Gb2N1c1Zpc2libGVIYW5kbGVyIiwia2V5RG93biIsIm9uUmlwcGxlUmVmIiwiaHJlZiIsImhhbmRsZUtleVVwIiwiaGFuZGxlVG91Y2hNb3ZlIiwiYnV0dG9uUmVmIiwib25Ub3VjaE1vdmUiLCJidXR0b25Qcm9wcyIsImxhc3REaXNhYmxlZCIsInRleHRQcmltYXJ5IiwidGV4dFNlY29uZGFyeSIsImZsYXQiLCJmbGF0UHJpbWFyeSIsImZsYXRTZWNvbmRhcnkiLCJvdXRsaW5lZCIsImNvbnRhaW5lZCIsIiYkZm9jdXNWaXNpYmxlIiwiY29udGFpbmVkUHJpbWFyeSIsImRhcmsiLCJjb250YWluZWRTZWNvbmRhcnkiLCJyYWlzZWRQcmltYXJ5IiwicmFpc2VkU2Vjb25kYXJ5IiwibWluaSIsInNpemVTbWFsbCIsInNpemVMYXJnZSIsIkJ1dHRvbiIsImRpc2FibGVGb2N1c1JpcHBsZSIsIlRvb2xiYXIiLCJlbGV2YXRpb25zIiwicm91bmRlZCIsIlBhcGVyIiwiYmFja2dyb3VuZENvbG9yRGVmYXVsdCIsImFwcEJhciIsInBvc2l0aW9uQWJzb2x1dGUiLCJwb3NpdGlvblN0aWNreSIsIkFwcEJhciIsIkJ1dHRvbkFwcEJhciIsImhhbmRsZUxvZ0luIiwiX1Rvb2xiYXIyIiwibWVudUJ1dHRvbiIsImFyaWEtbGFiZWwiLCJfTWVudTIiLCJhY291bnRCdXR0b24iLCJfQWNjb3VudEJveDIiLCJkaXNwbGF5NCIsImRpc3BsYXkzIiwiZGlzcGxheTIiLCJkaXNwbGF5MSIsImhlYWRsaW5lIiwiYm9keTIiLCJhbGlnbkxlZnQiLCJhbGlnbkNlbnRlciIsImFsaWduUmlnaHQiLCJhbGlnbkp1c3RpZnkiLCJndXR0ZXJCb3R0b20iLCJwYXJhZ3JhcGgiLCJjb2xvclRleHRTZWNvbmRhcnkiLCJUeXBvZ3JhcGh5Iiwid2l0aFRoZW1lT3B0aW9uIiwiX29wdGlvbnMkbm9TU1IiLCJub1NTUiIsImluaXRpYWxXaWR0aE9wdGlvbiIsIl9vcHRpb25zJHJlc2l6ZUludGVydiIsInJlc2l6ZUludGVydmFsIiwiV2l0aFdpZHRoIiwiZ2V0V2lkdGgiLCJjdXJyZW50V2lkdGgiLCJzdHlsZXNXaXRoT3ZlcnJpZGVzIiwiX25zJGpzcyRucyRzaGVldE9wdGlvIiwiX3Byb3BUeXBlczMiLCJfZGVmaW5lUHJvcGVydHkiLCJwcm9wMCIsInByb3AxIiwib25Qcm9jZXNzU3R5bGUiLCJuZXdTdHlsZSIsImNhY2hlS2V5IiwiX3ByZWZpeDIiLCJfaXNJbkJyb3dzZXIyIiwicmVnRXhwIiwidG9VcHBlciIsImNvbXB1dGVkIiwic3VwcG9ydGVkVmFsdWUiLCJzdXBwb3J0ZWRQcm9wZXJ0eSIsIl9zdXBwb3J0ZWRQcm9wZXJ0eTIiLCJfc3VwcG9ydGVkVmFsdWUyIiwiY2hhbmdlUHJvcCIsInN1cHBvcnRlZFByb3AiLCJjaGFuZ2VWYWx1ZSIsImFuaW1hdGlvbi1kZWxheSIsImFuaW1hdGlvbi1kdXJhdGlvbiIsImJhY2tncm91bmQtcG9zaXRpb24iLCJiYWNrZ3JvdW5kLXBvc2l0aW9uLXgiLCJiYWNrZ3JvdW5kLXBvc2l0aW9uLXkiLCJiYWNrZ3JvdW5kLXNpemUiLCJib3JkZXItYm90dG9tIiwiYm9yZGVyLWJvdHRvbS1sZWZ0LXJhZGl1cyIsImJvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzIiwiYm9yZGVyLWJvdHRvbS13aWR0aCIsImJvcmRlci1sZWZ0IiwiYm9yZGVyLWxlZnQtd2lkdGgiLCJib3JkZXItcmFkaXVzIiwiYm9yZGVyLXJpZ2h0IiwiYm9yZGVyLXJpZ2h0LXdpZHRoIiwiYm9yZGVyLXNwYWNpbmciLCJib3JkZXItdG9wIiwiYm9yZGVyLXRvcC1sZWZ0LXJhZGl1cyIsImJvcmRlci10b3AtcmlnaHQtcmFkaXVzIiwiYm9yZGVyLXRvcC13aWR0aCIsImJvcmRlci13aWR0aCIsImJvcmRlci1hZnRlci13aWR0aCIsImJvcmRlci1iZWZvcmUtd2lkdGgiLCJib3JkZXItZW5kLXdpZHRoIiwiYm9yZGVyLWhvcml6b250YWwtc3BhY2luZyIsImJvcmRlci1zdGFydC13aWR0aCIsImJvcmRlci12ZXJ0aWNhbC1zcGFjaW5nIiwiYm94LXNoYWRvdyIsImNvbHVtbi1nYXAiLCJjb2x1bW4tcnVsZSIsImNvbHVtbi1ydWxlLXdpZHRoIiwiY29sdW1uLXdpZHRoIiwiZmxleC1iYXNpcyIsImZvbnQtc2l6ZSIsImZvbnQtc2l6ZS1kZWx0YSIsImxldHRlci1zcGFjaW5nIiwibG9naWNhbC1oZWlnaHQiLCJsb2dpY2FsLXdpZHRoIiwibWFyZ2luLWFmdGVyIiwibWFyZ2luLWJlZm9yZSIsIm1hcmdpbi1ib3R0b20iLCJtYXJnaW4tbGVmdCIsIm1hcmdpbi1yaWdodCIsIm1hcmdpbi10b3AiLCJtYXgtaGVpZ2h0IiwibWF4LXdpZHRoIiwibWFyZ2luLWVuZCIsIm1hcmdpbi1zdGFydCIsIm1hc2stcG9zaXRpb24teCIsIm1hc2stcG9zaXRpb24teSIsIm1hc2stc2l6ZSIsIm1heC1sb2dpY2FsLWhlaWdodCIsIm1heC1sb2dpY2FsLXdpZHRoIiwibWluLWhlaWdodCIsIm1pbi13aWR0aCIsIm1pbi1sb2dpY2FsLWhlaWdodCIsIm1pbi1sb2dpY2FsLXdpZHRoIiwibW90aW9uIiwibW90aW9uLW9mZnNldCIsIm91dGxpbmUtb2Zmc2V0Iiwib3V0bGluZS13aWR0aCIsInBhZGRpbmctYm90dG9tIiwicGFkZGluZy1sZWZ0IiwicGFkZGluZy1yaWdodCIsInBhZGRpbmctdG9wIiwicGFkZGluZy1hZnRlciIsInBhZGRpbmctYmVmb3JlIiwicGFkZGluZy1lbmQiLCJwYWRkaW5nLXN0YXJ0IiwicGVyc3BlY3RpdmUtb3JpZ2luLXgiLCJwZXJzcGVjdGl2ZS1vcmlnaW4teSIsInBlcnNwZWN0aXZlIiwic2hhcGUtbWFyZ2luIiwidGV4dC1pbmRlbnQiLCJ0ZXh0LXN0cm9rZSIsInRleHQtc3Ryb2tlLXdpZHRoIiwidHJhbnNmb3JtLW9yaWdpbiIsInRyYW5zZm9ybS1vcmlnaW4teCIsInRyYW5zZm9ybS1vcmlnaW4teSIsInRyYW5zZm9ybS1vcmlnaW4teiIsInRyYW5zaXRpb24tZGVsYXkiLCJ0cmFuc2l0aW9uLWR1cmF0aW9uIiwidmVydGljYWwtYWxpZ24iLCJ3b3JkLXNwYWNpbmciLCJib3gtc2hhZG93LXgiLCJib3gtc2hhZG93LXkiLCJib3gtc2hhZG93LWJsdXIiLCJib3gtc2hhZG93LXNwcmVhZCIsImZvbnQtbGluZS1oZWlnaHQiLCJ0ZXh0LXNoYWRvdy14IiwidGV4dC1zaGFkb3cteSIsInRleHQtc2hhZG93LWJsdXIiLCJjYW1lbENhc2VkT3B0aW9ucyIsImFkZENhbWVsQ2FzZWRWZXJzaW9uIiwiaXRlcmF0ZSIsIl9kZWZhdWx0VW5pdHMiLCJ1bml0cyIsImNvbnZlcnRlZFZhbHVlIiwiaW5uZXJQcm9wIiwiX2lubmVyUHJvcCIsInVwcGVyY2FzZVBhdHRlcm4iLCJjb252ZXJ0Q2FzZSIsImh5cGhlbmF0ZWRQcm9wIiwiX2h5cGhlbmF0ZVN0eWxlTmFtZTIiLCJfaHlwaGVuYXRlU3R5bGVOYW1lIiwiY29udmVydGVkIiwiZ2V0UmVwbGFjZVJlZiIsImdldFJ1bGUiLCJoYXNBbmQiLCJyZXBsYWNlUGFyZW50UmVmcyIsIm5lc3RlZFByb3AiLCJwYXJlbnRQcm9wIiwicGFyZW50U2VsZWN0b3JzIiwic2VwYXJhdG9yUmVnRXhwIiwibmVzdGVkU2VsZWN0b3JzIiwibmVzdGVkIiwicGFyZW50UmVnRXhwIiwiZ2V0T3B0aW9ucyIsIm5lc3RpbmdMZXZlbCIsInJlcGxhY2VSZWYiLCJpc05lc3RlZCIsImlzTmVzdGVkQ29uZGl0aW9uYWwiLCJyZWZSZWdFeHAiLCJfd2FybmluZyIsIlZpcnR1YWxSZW5kZXJlciIsIl9zaGVldHMyIiwibWVtb2l6ZSIsImV4dHJhY3RLZXkiLCJDU1NSdWxlVHlwZXMiLCJpc0F0dGFjaGVkIiwiZ2V0SGVhZCIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwidGV4dENvbnRlbnQiLCJmaW5kUHJldk5vZGUiLCJpbnNlcnRpb25Qb2ludCIsImZpbmRIaWdoZXJTaGVldCIsImZpbmRIaWdoZXN0U2hlZXQiLCJjb21tZW50IiwiY2hpbGROb2RlcyIsIm5vZGVWYWx1ZSIsImZpbmRDb21tZW50Tm9kZSIsIm5leHRTaWJsaW5nIiwiZ2V0Tm9uY2UiLCJnZXRBdHRyaWJ1dGUiLCJEb21SZW5kZXJlciIsImhhc0luc2VydGVkUnVsZXMiLCJub25jZSIsInByZXZOb2RlIiwiaW5zZXJ0QmVmb3JlIiwiaW5zZXJ0aW9uUG9pbnRFbGVtZW50IiwiX3BhcmVudE5vZGUiLCJpbnNlcnRTdHlsZSIsIl9pbmRleCIsIm5ld0Nzc1J1bGUiLCJmblZhbHVlc05zIiwiZm5TdHlsZU5zIiwiZm5TdHlsZSIsIl9pc09ic2VydmFibGUyIiwic3R5bGUkIiwic3R5bGVSdWxlIiwiX2xvb3AiLCJuZXh0VmFsdWUiLCJfdG9Dc3MiLCJWaWV3cG9ydFJ1bGUiLCJGb250RmFjZVJ1bGUiLCJDb25kaXRpb25hbFJ1bGUiLCJLZXlmcmFtZXNSdWxlIiwiZnJhbWVzIiwiU2ltcGxlUnVsZSIsIl9TaW1wbGVSdWxlMiIsIl9LZXlmcmFtZXNSdWxlMiIsIl9Db25kaXRpb25hbFJ1bGUyIiwiX0ZvbnRGYWNlUnVsZTIiLCJfVmlld3BvcnRSdWxlMiIsIkBjaGFyc2V0IiwiQGltcG9ydCIsIkBuYW1lc3BhY2UiLCJAa2V5ZnJhbWVzIiwiQG1lZGlhIiwiQHN1cHBvcnRzIiwiQGZvbnQtZmFjZSIsIkB2aWV3cG9ydCIsIkAtbXMtdmlld3BvcnQiLCJSdWxlQ2xhc3MiLCJQbHVnaW5zUmVnaXN0cnkiLCJob29rcyIsIm9uUHJvY2Vzc1NoZWV0IiwibmV4dFN0eWxlIiwicHJvY2Vzc2VkVmFsdWUiLCJwbHVnaW4iLCJfU3R5bGVTaGVldDIiLCJfUGx1Z2luc1JlZ2lzdHJ5MiIsIl9ydWxlczIiLCJfb2JzZXJ2YWJsZXMyIiwiX2Z1bmN0aW9uczIiLCJfY3JlYXRlR2VuZXJhdGVDbGFzc05hbWUyIiwiX2NyZWF0ZVJ1bGUzIiwiX0RvbVJlbmRlcmVyMiIsIl9WaXJ0dWFsUmVuZGVyZXIyIiwiZGVmYXVsdFBsdWdpbnMiLCJpbnN0YW5jZUNvdW50ZXIiLCJKc3MiLCJ1c2UiLCJzZXR1cCIsInJ1bGVPcHRpb25zIiwiQ1NTIiwib3JpZ2luYWxNb2R1bGUiLCJ3ZWJwYWNrUG9seWZpbGwiLCJfcG9ueWZpbGxfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyIsImNsb25lU3R5bGUiLCJ0eXBlT2ZTdHlsZSIsIl9pc09ic2VydmFibGUiLCJleHRyYWN0ZWQiLCJwcm9wS2V5IiwiR2xvYmFsQ29udGFpbmVyUnVsZSIsInByZWZpeEtleSIsIkdsb2JhbFByZWZpeGVkUnVsZSIsImFkZFNjb3BlIiwiaGFuZGxlTmVzdGVkR2xvYmFsQ29udGFpbmVyUnVsZSIsImhhbmRsZVByZWZpeGVkR2xvYmFsUnVsZSIsImNyZWF0ZVJ1bGUiLCJwYXJ0cyIsInNjb3BlZCIsInNoYWRvd0tleVVtYnJhT3BhY2l0eSIsInNoYWRvd0tleVBlbnVtYnJhT3BhY2l0eSIsInNoYWRvd0FtYmllbnRTaGFkb3dPcGFjaXR5IiwiY3JlYXRlU2hhZG93IiwiX3Rvb2xiYXIiLCJfcGFsZXR0ZSRwcmltYXJ5IiwiX3BhbGV0dGUkc2Vjb25kYXJ5IiwiX3BhbGV0dGUkZXJyb3IiLCJfcGFsZXR0ZSR0eXBlIiwiX3BhbGV0dGUkY29udHJhc3RUaHJlIiwiY29udHJhc3RUaHJlc2hvbGQiLCJfcGFsZXR0ZSR0b25hbE9mZnNldCIsInRvbmFsT2Zmc2V0IiwiYXVnbWVudENvbG9yIiwibWFpblNoYWRlIiwibGlnaHRTaGFkZSIsImRhcmtTaGFkZSIsImFkZExpZ2h0T3JEYXJrIiwidHlwZXMiLCJoaW50IiwiaW50ZW50Iiwic2hhZGUiLCJfcmVmJGZvbnRGYW1pbHkiLCJfcmVmJGZvbnRTaXplIiwiX3JlZiRmb250V2VpZ2h0TGlnaHQiLCJmb250V2VpZ2h0TGlnaHQiLCJfcmVmJGZvbnRXZWlnaHRSZWd1bGEiLCJfcmVmJGZvbnRXZWlnaHRNZWRpdW0iLCJfcmVmJGh0bWxGb250U2l6ZSIsImh0bWxGb250U2l6ZSIsImNvZWYiLCJsZXR0ZXJTcGFjaW5nIiwidGV4dFRyYW5zZm9ybSIsImluaXRpYWxTdGF0ZSIsImxpc3RlbmVyIiwiY3VycmVudElkIiwiX3NldFByb3RvdHlwZU9mIiwiX2FyZVBhdGhzRXF1YWwiLCJfU3RyaW5nIiwiUG9seWdvbiIsImV2dE5hbWVzIiwicG9seWdvblByb21pc2UiLCJ3cmFwcGVkUHJvbWlzZSIsInByb21pc2UiLCJyZWplY3QiLCJjYXRjaCIsInJlbmRlclBvbHlnb24iLCJwYXRocyIsInBvbHlnb24iLCJzdHJva2VDb2xvciIsInN0cm9rZU9wYWNpdHkiLCJzdHJva2VXZWlnaHQiLCJmaWxsQ29sb3IiLCJmaWxsT3BhY2l0eSIsImhhbmRsZUV2ZW50IiwiZXZ0IiwiZXZ0TmFtZSIsIlBvbHlsaW5lIiwicG9seWxpbmVQcm9taXNlIiwicmVuZGVyUG9seWxpbmUiLCJwb2x5bGluZSIsIm1ha2VDYW5jZWxhYmxlIiwiaGFzQ2FuY2VsZWRfIiwiaXNDYW5jZWxlZCIsIkhlYXRNYXAiLCJoZWF0TWFwUHJvbWlzZSIsInJlbmRlckhlYXRNYXAiLCJoZWF0TWFwIiwicG9zaXRpb25zIiwiZ3JhZGllbnQiLCJtYXBDZW50ZXIiLCJfcHJvcHMkcmFkaXVzIiwicmFkaXVzIiwiX3Byb3BzJG9wYWNpdHkiLCJwcmVmIiwidmlzdWFsaXphdGlvbiIsIkhlYXRtYXBMYXllciIsIl91cHBlcmNhc2VQYXR0ZXJuIiwiaHlwaGVuYXRlIiwieiIsIkEiLCJlbmNvZGVVUklDb21wb25lbnQiLCJhYSIsImJhIiwiY2EiLCJkYSIsImVhIiwiZmEiLCJoYSIsIkgiLCJpYSIsImthIiwiYWNjZXB0c0Jvb2xlYW5zIiwiamEiLCJJIiwiYXR0cmlidXRlTmFtZSIsImF0dHJpYnV0ZU5hbWVzcGFjZSIsIm11c3RVc2VQcm9wZXJ0eSIsInByb3BlcnR5TmFtZSIsIkoiLCJLIiwiTCIsImxhIiwiTSIsIk4iLCJtYXRobWwiLCJiYXNlIiwiYnIiLCJjb2wiLCJlbWJlZCIsImhyIiwia2V5Z2VuIiwicGFyYW0iLCJ0cmFjayIsIndiciIsIm1hIiwibWVudWl0ZW0iLCJRIiwiYW5pbWF0aW9uSXRlcmF0aW9uQ291bnQiLCJib3JkZXJJbWFnZU91dHNldCIsImJvcmRlckltYWdlU2xpY2UiLCJib3JkZXJJbWFnZVdpZHRoIiwiYm94RmxleCIsImJveEZsZXhHcm91cCIsImJveE9yZGluYWxHcm91cCIsImNvbHVtbkNvdW50IiwiY29sdW1ucyIsImZsZXhQb3NpdGl2ZSIsImZsZXhOZWdhdGl2ZSIsImZsZXhPcmRlciIsImdyaWRSb3ciLCJncmlkUm93RW5kIiwiZ3JpZFJvd1NwYW4iLCJncmlkUm93U3RhcnQiLCJncmlkQ29sdW1uIiwiZ3JpZENvbHVtbkVuZCIsImdyaWRDb2x1bW5TcGFuIiwiZ3JpZENvbHVtblN0YXJ0IiwibGluZUNsYW1wIiwib3JwaGFucyIsInRhYlNpemUiLCJ3aWRvd3MiLCJmbG9vZE9wYWNpdHkiLCJzdG9wT3BhY2l0eSIsInN0cm9rZU1pdGVybGltaXQiLCJuYSIsIm9hIiwibGlzdGluZyIsInByZSIsIlQiLCJwYSIsInFhIiwidGEiLCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmciLCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmciLCJWIiwidWEiLCJzYSIsImgiLCJpc01vdW50ZWQiLCJlbnF1ZXVlRm9yY2VVcGRhdGUiLCJlbnF1ZXVlUmVwbGFjZVN0YXRlIiwiZW5xdWV1ZVNldFN0YXRlIiwiaXNSZWFjdENvbXBvbmVudCIsInYiLCJ1cGRhdGVyIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCIsImNvbXBvbmVudFdpbGxNb3VudCIsInUiLCJzdGFjayIsImRvbU5hbWVzcGFjZSIsImV4aGF1c3RlZCIsImN1cnJlbnRTZWxlY3RWYWx1ZSIsInByZXZpb3VzV2FzVGV4dE5vZGUiLCJtYWtlU3RhdGljTWFya3VwIiwicHJvdmlkZXJTdGFjayIsInByb3ZpZGVySW5kZXgiLCJwdXNoUHJvdmlkZXIiLCJfY29udGV4dCIsIl9jdXJyZW50VmFsdWUiLCJwb3BQcm92aWRlciIsIl9kZWZhdWx0VmFsdWUiLCJyZWFkIiwicmVuZGVyRE9NIiwicmEiLCJYIiwicmVuZGVyVG9TdHJpbmciLCJJbmZpbml0eSIsInJlbmRlclRvU3RhdGljTWFya3VwIiwicmVuZGVyVG9Ob2RlU3RyZWFtIiwicmVuZGVyVG9TdGF0aWNOb2RlU3RyZWFtIiwiWSIsIloiLCJfc2VydmVyIiwiSW5mb1dpbmRvdyIsIl9zZXJ2ZXIyIiwicmVuZGVySW5mb1dpbmRvdyIsInVwZGF0ZUNvbnRlbnQiLCJvcGVuV2luZG93IiwiY2xvc2VXaW5kb3ciLCJpdyIsImluZm93aW5kb3ciLCJyZW5kZXJDaGlsZHJlbiIsInNldENvbnRlbnQiLCJpbnZhcmlhbnQiLCJSZWFjdFByb3BUeXBlc1NlY3JldCIsInNoaW0iLCJzZWNyZXQiLCJnZXRTaGltIiwiUmVhY3RQcm9wVHlwZXMiLCJzeW1ib2wiLCJvYmplY3RPZiIsImV4YWN0IiwiY2hlY2tQcm9wVHlwZXMiLCJtYXJrZXJQcm9taXNlIiwicmVuZGVyTWFya2VyIiwiR29vZ2xlQXBpIiwiYXBpS2V5IiwibGlicmFyaWVzIiwiY2xpZW50IiwiVVJMIiwidXJsIiwiZ29vZ2xlVmVyc2lvbiIsImxhbmd1YWdlIiwicmVnaW9uIiwiY2hhbm5lbCIsInBhcmFtU3RyIiwic2NyaXB0TWFwIiwiX3NjcmlwdE1hcCIsIlNjcmlwdENhY2hlIiwic2NyaXB0cyIsIkNhY2hlIiwiX29uTG9hZCIsInJlZ2lzdGVyZWQiLCJzdG9yZWQiLCJfc2NyaXB0VGFnIiwiYXN5bmMiLCJjYk5hbWUiLCJoYW5kbGVSZXN1bHQiLCJyZXNvbHZlZCIsImVycm9yZWQiLCJsb2FkZWQiLCJjbGVhbnVwIiwib25sb2FkIiwib25lcnJvciIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsInJlYWR5U3RhdGUiLCJzY3JpcHQiLCJfU2NyaXB0Q2FjaGUiLCJfR29vZ2xlQXBpIiwiX0dvb2dsZUFwaTIiLCJzZXJpYWxpemUiLCJkZWZhdWx0Q3JlYXRlQ2FjaGUiLCJEZWZhdWx0TG9hZGluZ0NvbnRhaW5lciIsIldyYXBwZWRDb21wb25lbnQiLCJXcmFwcGVyIiwiaW5pdGlhbGl6ZSIsIm9iajEiLCJvYmoyIiwicHJldk9wdGlvbnMiLCJ1bnJlZ2lzdGVyTG9hZEhhbmRsZXIiLCJjcmVhdGVDYWNoZSIsInNjcmlwdENhY2hlIiwiTG9hZGluZ0NvbnRhaW5lciIsIl9nYXBpIiwiX0dvb2dsZUFwaUNvbXBvbmVudCIsIl9NYXJrZXIiLCJfSW5mb1dpbmRvdyIsIl9IZWF0TWFwIiwiX1BvbHlnb24iLCJfUG9seWxpbmUiLCJfY2FuY2VsYWJsZVByb21pc2UiLCJHb29nbGVBcGlXcmFwcGVyIiwibWFwU3R5bGVzIiwiY3VycmVudExvY2F0aW9uIiwiaW5pdGlhbENlbnRlciIsImNlbnRlckFyb3VuZEN1cnJlbnRMb2NhdGlvbiIsImdlb1Byb21pc2UiLCJyZXN0eWxlTWFwIiwicmVjZW50ZXJNYXAiLCJtYXBSZWYiLCJtYXBUeXBlSWRzIiwiTWFwVHlwZUlkIiwibWFwVHlwZUZyb21Qcm9wcyIsIm1hcFR5cGUiLCJtYXBDb25maWciLCJtYXBUeXBlSWQiLCJtYXhab29tIiwibWluWm9vbSIsImNsaWNrYWJsZUljb25zIiwiZGlzYWJsZURlZmF1bHRVSSIsInpvb21Db250cm9sIiwibWFwVHlwZUNvbnRyb2wiLCJzY2FsZUNvbnRyb2wiLCJzdHJlZXRWaWV3Q29udHJvbCIsInBhbkNvbnRyb2wiLCJyb3RhdGVDb250cm9sIiwiZnVsbHNjcmVlbkNvbnRyb2wiLCJzY3JvbGx3aGVlbCIsImtleWJvYXJkU2hvcnRjdXRzIiwiZGlzYWJsZURvdWJsZUNsaWNrWm9vbSIsIm5vQ2xlYXIiLCJnZXN0dXJlSGFuZGxpbmciLCJ0cmlnZ2VyIiwiaGFuZGxlck5hbWUiLCJzZXRDZW50ZXIiLCJfdGhpczYiLCJjb250YWluZXJTdHlsZXMiLCJzaW5nbGVNYXRjaGVyIiwibXVsdGlNYXRjaGVyIiwiZGVjb2RlQ29tcG9uZW50cyIsImNvbXBvbmVudHMiLCJkZWNvZGVVUklDb21wb25lbnQiLCJkZWNvZGUiLCJ0b2tlbnMiLCJlbmNvZGVkVVJJIiwicmVwbGFjZU1hcCIsIiVGRSVGRiIsIiVGRiVGRSIsImN1c3RvbURlY29kZVVSSUNvbXBvbmVudCIsInN0cmljdFVyaUVuY29kZSIsImRlY29kZUNvbXBvbmVudCIsImVuY29kZSIsInN0cmljdCIsImV4dHJhY3QiLCJxdWVyeVN0YXJ0IiwicGFyc2UiLCJmb3JtYXR0ZXIiLCJhcnJheUZvcm1hdCIsInBhcnNlckZvckFycmF5Rm9ybWF0IiwicmV0IiwiQm9vbGVhbiIsImtleXNTb3J0ZXIiLCJlbmNvZGVyRm9yQXJyYXlGb3JtYXQiLCJ2YWx1ZTIiLCJwYXJzZVVybCIsImNhY2hlZFNldFRpbWVvdXQiLCJjYWNoZWRDbGVhclRpbWVvdXQiLCJkZWZhdWx0U2V0VGltb3V0IiwiZGVmYXVsdENsZWFyVGltZW91dCIsInJ1blRpbWVvdXQiLCJmdW4iLCJjdXJyZW50UXVldWUiLCJkcmFpbmluZyIsInF1ZXVlSW5kZXgiLCJjbGVhblVwTmV4dFRpY2siLCJkcmFpblF1ZXVlIiwicnVuIiwicnVuQ2xlYXJUaW1lb3V0IiwiSXRlbSIsIm5leHRUaWNrIiwiYnJvd3NlciIsImVudiIsImFyZ3YiLCJ2ZXJzaW9ucyIsInByZXBlbmRMaXN0ZW5lciIsInByZXBlbmRPbmNlTGlzdGVuZXIiLCJiaW5kaW5nIiwiY3dkIiwiY2hkaXIiLCJ1bWFzayIsIl9nb29nbGVNYXBzUmVhY3QiLCJjcmVhdGVNdWlUaGVtZSIsIkFwcCIsIl90aGlzJHN0YXRlIiwiZ2VvY29kZUxhdExuZyIsInNlYXJjaEZhcmUiLCJmZXRjaCIsInF1ZXJ5UGFyYW0iLCJtZXRob2QiLCJwcmljZXMiLCJfTXVpVGhlbWVQcm92aWRlcjIiLCJfVG9vbEJhcjIiLCJ1c2VyUHJvZmlsZSIsImZpcnN0X25hbWUiLCJsYXN0X25hbWUiLCJfTWFwMiIsImRlcGFyUGxhY2UiLCJ2aWV3cG9ydCIsImRlc3RQbGFjIiwiZGVzdFBsYWNlIiwiX0lucHV0RmllbGQyIiwiaW5wdXRGaWVsZCIsInNldEN1cnJlbnRMb2NhdGlvbiIsIl9MaW5lYXJQcm9ncmVzczIiLCJfQ2FyZFRhYmxlMiIsImdvb2dsZVRva2VuIiwiYmFzZVVybCIsInByb3RvY29sIiwiY3VycmVudERpciIsInBhdGhuYW1lIiwiZnVsbE1hdGNoIiwib3JpZ1VybCIsIm5ld1VybCIsInVucXVvdGVkT3JpZ1VybCIsIiQxIiwibWVtbyIsInN0eWxlc0luRG9tIiwiaXNPbGRJRSIsImF0b2IiLCJnZXRFbGVtZW50Iiwic3R5bGVUYXJnZXQiLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnREb2N1bWVudCIsInNpbmdsZXRvbiIsInNpbmdsZXRvbkNvdW50ZXIiLCJzdHlsZXNJbnNlcnRlZEF0VG9wIiwiZml4VXJscyIsImFkZFN0eWxlc1RvRG9tIiwiZG9tU3R5bGUiLCJhZGRTdHlsZSIsImxpc3RUb1N0eWxlcyIsIm5ld1N0eWxlcyIsInBhcnQiLCJzb3VyY2VNYXAiLCJpbnNlcnRTdHlsZUVsZW1lbnQiLCJpbnNlcnRJbnRvIiwibGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3AiLCJpbnNlcnRBdCIsImJlZm9yZSIsInJlbW92ZVN0eWxlRWxlbWVudCIsImNyZWF0ZVN0eWxlRWxlbWVudCIsImF0dHJzIiwiYWRkQXR0cnMiLCJzdHlsZUluZGV4IiwiYXBwbHlUb1NpbmdsZXRvblRhZyIsImNyZWF0ZU9iamVjdFVSTCIsInJldm9rZU9iamVjdFVSTCIsIkJsb2IiLCJidG9hIiwicmVsIiwiY3JlYXRlTGlua0VsZW1lbnQiLCJhdXRvRml4VXJscyIsImNvbnZlcnRUb0Fic29sdXRlVXJscyIsInVuZXNjYXBlIiwiYmxvYiIsIm9sZFNyYyIsIkRFQlVHIiwibmV3TGlzdCIsIm1heVJlbW92ZSIsInRleHRTdG9yZSIsInJlcGxhY2VUZXh0IiwicmVwbGFjZW1lbnQiLCJjc3NOb2RlIiwidXNlU291cmNlTWFwIiwiY3NzTWFwcGluZyIsInNvdXJjZU1hcHBpbmciLCJzb3VyY2VVUkxzIiwic291cmNlcyIsInNvdXJjZVJvb3QiLCJjc3NXaXRoTWFwcGluZ1RvU3RyaW5nIiwibWVkaWFRdWVyeSIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJtYXBwaW5ncyIsImZpbGUiLCJobXIiLCJsb2NhbHMiLCJpc05vZGUiLCJpc1RleHROb2RlIiwiY29udGFpbnNOb2RlIiwib3V0ZXJOb2RlIiwiaW5uZXJOb2RlIiwiY2FuVXNlRE9NIiwiRXhlY3V0aW9uRW52aXJvbm1lbnQiLCJjYW5Vc2VXb3JrZXJzIiwiV29ya2VyIiwiY2FuVXNlRXZlbnRMaXN0ZW5lcnMiLCJjYW5Vc2VWaWV3cG9ydCIsInNjcmVlbiIsImlzSW5Xb3JrZXIiLCJfY2F1Z2h0RXJyb3IiLCJfaGFzQ2F1Z2h0RXJyb3IiLCJfcmV0aHJvd0Vycm9yIiwiX2hhc1JldGhyb3dFcnJvciIsImludm9rZUd1YXJkZWRDYWxsYmFjayIsImludm9rZUd1YXJkZWRDYWxsYmFja0FuZENhdGNoRmlyc3RFcnJvciIsImhhc0NhdWdodEVycm9yIiwiY2xlYXJDYXVnaHRFcnJvciIsInJldGhyb3dDYXVnaHRFcnJvciIsImV4dHJhY3RFdmVudHMiLCJldmVudFR5cGVzIiwicGhhc2VkUmVnaXN0cmF0aW9uTmFtZXMiLCJyZWdpc3RyYXRpb25OYW1lIiwiZGVwZW5kZW5jaWVzIiwidmEiLCJldmVudE5hbWVEaXNwYXRjaENvbmZpZ3MiLCJyZWdpc3RyYXRpb25OYW1lTW9kdWxlcyIsInJlZ2lzdHJhdGlvbk5hbWVEZXBlbmRlbmNpZXMiLCJwb3NzaWJsZVJlZ2lzdHJhdGlvbk5hbWVzIiwiaW5qZWN0RXZlbnRQbHVnaW5PcmRlciIsImluamVjdEV2ZW50UGx1Z2luc0J5TmFtZSIsIndhIiwieGEiLCJ5YSIsInphIiwiQWEiLCJCYSIsIkNhIiwiRGEiLCJfZGlzcGF0Y2hMaXN0ZW5lcnMiLCJfZGlzcGF0Y2hJbnN0YW5jZXMiLCJpc1Byb3BhZ2F0aW9uU3RvcHBlZCIsImlzUGVyc2lzdGVudCIsInJlbGVhc2UiLCJFYSIsIkZhIiwiR2EiLCJIYSIsInN0YXRlTm9kZSIsIklhIiwiSmEiLCJLYSIsImluamVjdGlvbiIsImdldExpc3RlbmVyIiwicnVuRXZlbnRzSW5CYXRjaCIsInJ1bkV4dHJhY3RlZEV2ZW50c0luQmF0Y2giLCJMYSIsIk1hIiwiTmEiLCJPYSIsIlBhIiwiUWEiLCJwcmVjYWNoZUZpYmVyTm9kZSIsImdldENsb3Nlc3RJbnN0YW5jZUZyb21Ob2RlIiwiZ2V0SW5zdGFuY2VGcm9tTm9kZSIsImdldE5vZGVGcm9tSW5zdGFuY2UiLCJnZXRGaWJlckN1cnJlbnRQcm9wc0Zyb21Ob2RlIiwidXBkYXRlRmliZXJQcm9wcyIsIlJhIiwiU2EiLCJkaXNwYXRjaENvbmZpZyIsIlRhIiwiX3RhcmdldEluc3QiLCJVYSIsIlZhIiwiWGEiLCJZYSIsIlphIiwiYWx0ZXJuYXRlIiwiJGEiLCJhY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzIiwiYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlc1NraXBUYXJnZXQiLCJhY2N1bXVsYXRlRW50ZXJMZWF2ZURpc3BhdGNoZXMiLCJhY2N1bXVsYXRlRGlyZWN0RGlzcGF0Y2hlcyIsImFiIiwiYmIiLCJhbmltYXRpb25lbmQiLCJhbmltYXRpb25pdGVyYXRpb24iLCJhbmltYXRpb25zdGFydCIsInRyYW5zaXRpb25lbmQiLCJkYiIsImViIiwiZmIiLCJnYiIsImhiIiwiaWIiLCJqYiIsImtiIiwibGIiLCJfc3RhcnRUZXh0IiwiX2ZhbGxiYWNrVGV4dCIsIm1iIiwibmIiLCJvYiIsInBiIiwiZXZlbnRQaGFzZSIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwidGltZVN0YW1wIiwiaXNUcnVzdGVkIiwibmF0aXZlRXZlbnQiLCJJbnRlcmZhY2UiLCJpc0RlZmF1bHRQcmV2ZW50ZWQiLCJyZXR1cm5WYWx1ZSIsInJiIiwiZXZlbnRQb29sIiwic2IiLCJkZXN0cnVjdG9yIiwicWIiLCJnZXRQb29sZWQiLCJjYW5jZWxCdWJibGUiLCJ0YiIsInViIiwidmIiLCJ3YiIsInhiIiwieWIiLCJ6YiIsIkFiIiwiQmIiLCJiZWZvcmVJbnB1dCIsImJ1YmJsZWQiLCJjYXB0dXJlZCIsImNvbXBvc2l0aW9uRW5kIiwiY29tcG9zaXRpb25TdGFydCIsImNvbXBvc2l0aW9uVXBkYXRlIiwiQ2IiLCJEYiIsIkViIiwiZGV0YWlsIiwiRmIiLCJJYiIsIkdiIiwiY3RybEtleSIsImFsdEtleSIsIm1ldGFLZXkiLCJjaGFyIiwiSGIiLCJKYiIsIktiIiwiaW5qZWN0RmliZXJDb250cm9sbGVkSG9zdENvbXBvbmVudCIsIkxiIiwiTWIiLCJOYiIsInJlc3RvcmVDb250cm9sbGVkU3RhdGUiLCJPYiIsIlBiIiwiUWIiLCJSYiIsImVucXVldWVTdGF0ZVJlc3RvcmUiLCJuZWVkc1N0YXRlUmVzdG9yZSIsInJlc3RvcmVTdGF0ZUlmTmVlZGVkIiwiU2IiLCJUYiIsIlViIiwiVmIiLCJXYiIsIlhiIiwiZGF0ZSIsImRhdGV0aW1lIiwiZGF0ZXRpbWUtbG9jYWwiLCJlbWFpbCIsIm1vbnRoIiwicGFzc3dvcmQiLCJ0ZWwiLCJ3ZWVrIiwiWWIiLCJaYiIsImNvcnJlc3BvbmRpbmdVc2VFbGVtZW50IiwiJGIiLCJhYyIsImNjIiwiX3ZhbHVlVHJhY2tlciIsImdldFZhbHVlIiwic2V0VmFsdWUiLCJzdG9wVHJhY2tpbmciLCJiYyIsImRjIiwiZWMiLCJfX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRCIsIlJlYWN0Q3VycmVudE93bmVyIiwiZmMiLCJnYyIsImhjIiwiaWMiLCJqYyIsIm1jIiwibmMiLCJvYyIsInBjIiwicWMiLCJyYyIsInNjIiwidGMiLCJwZW5kaW5nUHJvcHMiLCJ2YyIsIl9kZWJ1Z093bmVyIiwiX2RlYnVnU291cmNlIiwiZmlsZU5hbWUiLCJsaW5lTnVtYmVyIiwid2MiLCJ4YyIsInljIiwiQ2MiLCJEYyIsIkVjIiwiQWMiLCJCYyIsInpjIiwic2V0QXR0cmlidXRlTlMiLCJGYyIsIl93cmFwcGVyU3RhdGUiLCJpbml0aWFsQ2hlY2tlZCIsIkdjIiwiSGMiLCJpbml0aWFsVmFsdWUiLCJjb250cm9sbGVkIiwiSWMiLCJKYyIsIktjIiwiTGMiLCJNYyIsImNoYW5nZSIsIk5jIiwiT2MiLCJQYyIsIlFjIiwiUmMiLCJTYyIsIlRjIiwiVWMiLCJWYyIsIldjIiwiWGMiLCJZYyIsIlpjIiwiJGMiLCJfaXNJbnB1dEV2ZW50U3VwcG9ydGVkIiwiYWQiLCJ2aWV3IiwiYmQiLCJBbHQiLCJDb250cm9sIiwiTWV0YSIsIlNoaWZ0IiwiY2QiLCJnZXRNb2RpZmllclN0YXRlIiwiZGQiLCJlZCIsInNjcmVlblgiLCJzY3JlZW5ZIiwic2hpZnRLZXkiLCJidXR0b25zIiwicmVsYXRlZFRhcmdldCIsImZyb21FbGVtZW50IiwidG9FbGVtZW50IiwiZmQiLCJwb2ludGVySWQiLCJwcmVzc3VyZSIsInRpbHRYIiwidGlsdFkiLCJwb2ludGVyVHlwZSIsImlzUHJpbWFyeSIsImdkIiwibW91c2VFbnRlciIsIm1vdXNlTGVhdmUiLCJwb2ludGVyRW50ZXIiLCJwb2ludGVyTGVhdmUiLCJoZCIsImVmZmVjdFRhZyIsImpkIiwia2QiLCJzaWJsaW5nIiwibGQiLCJuZCIsImVsYXBzZWRUaW1lIiwicHNldWRvRWxlbWVudCIsIm9kIiwiY2xpcGJvYXJkRGF0YSIsInBkIiwicWQiLCJyZCIsIkVzYyIsIlNwYWNlYmFyIiwiTGVmdCIsIlVwIiwiUmlnaHQiLCJEb3duIiwiRGVsIiwiV2luIiwiQXBwcyIsIlNjcm9sbCIsIk1velByaW50YWJsZUtleSIsInNkIiwiOCIsIjkiLCIxMiIsIjEzIiwiMTYiLCIxNyIsIjE4IiwiMTkiLCIyMCIsIjI3IiwiMzIiLCIzMyIsIjM0IiwiMzUiLCIzNiIsIjM3IiwiMzgiLCIzOSIsIjQwIiwiNDUiLCI0NiIsIjExMiIsIjExMyIsIjExNCIsIjExNSIsIjExNiIsIjExNyIsIjExOCIsIjExOSIsIjEyMCIsIjEyMSIsIjEyMiIsIjEyMyIsIjE0NCIsIjE0NSIsIjIyNCIsInRkIiwicmVwZWF0IiwibG9jYWxlIiwidWQiLCJkYXRhVHJhbnNmZXIiLCJ2ZCIsInRhcmdldFRvdWNoZXMiLCJ3ZCIsInhkIiwiZGVsdGFYIiwid2hlZWxEZWx0YVgiLCJkZWx0YVkiLCJ3aGVlbERlbHRhWSIsIndoZWVsRGVsdGEiLCJkZWx0YVoiLCJkZWx0YU1vZGUiLCJ5ZCIsInpkIiwiQWQiLCJCZCIsImlzSW50ZXJhY3RpdmUiLCJDZCIsImlzSW50ZXJhY3RpdmVUb3BMZXZlbEV2ZW50VHlwZSIsIkRkIiwiRWQiLCJGZCIsInRhcmdldEluc3QiLCJhbmNlc3RvcnMiLCJjb250YWluZXJJbmZvIiwidG9wTGV2ZWxUeXBlIiwiR2QiLCJJZCIsIkpkIiwiS2QiLCJMZCIsIk1kIiwiX2VuYWJsZWQiLCJzZXRFbmFibGVkIiwiaXNFbmFibGVkIiwidHJhcEJ1YmJsZWRFdmVudCIsInRyYXBDYXB0dXJlZEV2ZW50IiwiZGlzcGF0Y2hFdmVudCIsIk5kIiwiT2QiLCJQZCIsIlFkIiwiUmQiLCJTZCIsIlRkIiwiY29udGVudEVkaXRhYmxlIiwiVWQiLCJWZCIsIldkIiwiWGQiLCJZZCIsIlpkIiwiJGQiLCJzZWxlY3Rpb25TdGFydCIsInNlbGVjdGlvbkVuZCIsImdldFNlbGVjdGlvbiIsImFuY2hvck5vZGUiLCJmb2N1c05vZGUiLCJmb2N1c09mZnNldCIsImFlIiwib25TZWxlY3QiLCJTaW1wbGVFdmVudFBsdWdpbiIsIkVudGVyTGVhdmVFdmVudFBsdWdpbiIsIkNoYW5nZUV2ZW50UGx1Z2luIiwiU2VsZWN0RXZlbnRQbHVnaW4iLCJCZWZvcmVJbnB1dEV2ZW50UGx1Z2luIiwiYmUiLCJwZXJmb3JtYW5jZSIsImNlIiwiZGUiLCJlZSIsImZlIiwiZ2UiLCJoZSIsImllIiwiamUiLCJrZSIsImxlIiwibWUiLCJuZSIsImRpZFRpbWVvdXQiLCJ0aW1lUmVtYWluaW5nIiwib2UiLCJwZSIsInRpbWVvdXRUaW1lIiwic2NoZWR1bGVkQ2FsbGJhY2siLCJjYWxsYmFja0lkIiwicWUiLCJwb3N0TWVzc2FnZSIsInNlIiwidWUiLCJ0ZSIsInZlIiwiZGVmYXVsdFNlbGVjdGVkIiwid2UiLCJ3YXNNdWx0aXBsZSIsInhlIiwieWUiLCJ6ZSIsIkFlIiwiQmUiLCJDZSIsIkRlIiwiRWUiLCJGZSIsIm5hbWVzcGFjZVVSSSIsIk1TQXBwIiwiZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24iLCJHZSIsImxhc3RDaGlsZCIsIkhlIiwiSWUiLCJKZSIsIktlIiwiTGUiLCJNZSIsIk5lIiwiT2UiLCJQZSIsImNyZWF0ZUVsZW1lbnROUyIsIlFlIiwiUmUiLCJvbmNsaWNrIiwiU2UiLCJUZSIsIlVlIiwiVmUiLCJXZSIsInNldEluaXRpYWxQcm9wZXJ0aWVzIiwiZGlmZlByb3BlcnRpZXMiLCJ1cGRhdGVQcm9wZXJ0aWVzIiwiZGlmZkh5ZHJhdGVkUHJvcGVydGllcyIsImRpZmZIeWRyYXRlZFRleHQiLCJ3YXJuRm9yVW5tYXRjaGVkVGV4dCIsIndhcm5Gb3JEZWxldGVkSHlkcmF0YWJsZUVsZW1lbnQiLCJ3YXJuRm9yRGVsZXRlZEh5ZHJhdGFibGVUZXh0Iiwid2FybkZvckluc2VydGVkSHlkcmF0ZWRFbGVtZW50Iiwid2FybkZvckluc2VydGVkSHlkcmF0ZWRUZXh0IiwiZm9ybSIsIlhlIiwiWWUiLCJaZSIsIiRlIiwiYWYiLCJiZiIsImNmIiwiZGYiLCJlZiIsIlNldCIsImZmIiwiZ2YiLCJoZiIsImpmIiwia2YiLCJsZiIsIm1mIiwibmYiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0IiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQiLCJvZiIsInBmIiwicWYiLCJyZiIsInNmIiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQiLCJ0ZiIsInVmIiwibWVtb2l6ZWRTdGF0ZSIsInVwZGF0ZVF1ZXVlIiwibWVtb2l6ZWRQcm9wcyIsImxhc3RFZmZlY3QiLCJmaXJzdEVmZmVjdCIsIm5leHRFZmZlY3QiLCJleHBpcmF0aW9uVGltZSIsInZmIiwid2YiLCJ4ZiIsInlmIiwiemYiLCJwZW5kaW5nQ2hpbGRyZW4iLCJBZiIsImVhcmxpZXN0UGVuZGluZ1RpbWUiLCJsYXRlc3RQZW5kaW5nVGltZSIsImVhcmxpZXN0U3VzcGVuZGVkVGltZSIsImxhdGVzdFN1c3BlbmRlZFRpbWUiLCJsYXRlc3RQaW5nZWRUaW1lIiwicGVuZGluZ0NvbW1pdEV4cGlyYXRpb25UaW1lIiwiZmluaXNoZWRXb3JrIiwicGVuZGluZ0NvbnRleHQiLCJoeWRyYXRlIiwicmVtYWluaW5nRXhwaXJhdGlvblRpbWUiLCJmaXJzdEJhdGNoIiwibmV4dFNjaGVkdWxlZFJvb3QiLCJCZiIsIkNmIiwiRGYiLCJGZiIsIkdmIiwiSGYiLCJJZiIsImJhc2VTdGF0ZSIsImZpcnN0VXBkYXRlIiwibGFzdFVwZGF0ZSIsImZpcnN0Q2FwdHVyZWRVcGRhdGUiLCJsYXN0Q2FwdHVyZWRVcGRhdGUiLCJmaXJzdENhcHR1cmVkRWZmZWN0IiwibGFzdENhcHR1cmVkRWZmZWN0IiwiSmYiLCJLZiIsInBheWxvYWQiLCJMZiIsIk1mIiwiTmYiLCJPZiIsIlBmIiwiUWYiLCJSZiIsIlNmIiwiVGYiLCJVZiIsIlZmIiwiV2YiLCJYZiIsIl9jaGFuZ2VkQml0cyIsIllmIiwiWmYiLCIkZiIsImFnIiwiYmciLCJjZyIsImRnIiwiZWciLCJmZyIsImhnIiwiX3JlYWN0SW50ZXJuYWxGaWJlciIsImlnIiwiamciLCJrZyIsIm1nIiwiaXNQdXJlUmVhY3RDb21wb25lbnQiLCJuZyIsIm9nIiwiZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUiLCJwZyIsInFnIiwiX293bmVyIiwiX3N0cmluZ1JlZiIsInJnIiwic2ciLCJrYyIsIkhkIiwidGciLCJ1ZyIsInZnIiwid2ciLCJ4ZyIsInlnIiwiemciLCJBZyIsIkJnIiwiQ2ciLCJEZyIsIkVnIiwiRmciLCJHZyIsIkhnIiwiSWciLCJLZyIsIl9jYWxjdWxhdGVDaGFuZ2VkQml0cyIsIkpnIiwidW5zdGFibGVfb2JzZXJ2ZWRCaXRzIiwiTGciLCJQZyIsIlFnIiwiUmciLCJTZyIsIlRnIiwic3VwcHJlc3NSZWFjdEVycm9yTG9nZ2luZyIsIlVnIiwiVmciLCJXZyIsIlhnIiwiWWciLCJaZyIsIiRnIiwiYWgiLCJiaCIsImNoIiwiY29tcG9uZW50RGlkQ2F0Y2giLCJkaCIsImNvbXBvbmVudFN0YWNrIiwiZWgiLCJmaCIsImdoIiwiaGgiLCJpaCIsImpoIiwia2giLCJsaCIsIm1oIiwibmgiLCJvaCIsInBoIiwicWgiLCJyaCIsInNoIiwidGgiLCJ1aCIsInZoIiwid2giLCJ4aCIsImdldERlcml2ZWRTdGF0ZUZyb21DYXRjaCIsInloIiwiemgiLCJBaCIsIkJoIiwiQ2giLCJEaCIsIkVoIiwiRmgiLCJHaCIsIkhoIiwiSWgiLCJKaCIsIktoIiwiTGgiLCJNaCIsIk5oIiwiT2giLCJQaCIsIlFoIiwiUmgiLCJTaCIsIlRoIiwiVWgiLCJWaCIsIldoIiwiX29uQ29tcGxldGUiLCJYaCIsIl9leHBpcmF0aW9uVGltZSIsIl9kZWZlciIsInJhbmdlQ291bnQiLCJXYSIsImZvY3VzZWRFbGVtIiwic2VsZWN0aW9uUmFuZ2UiLCJoaSIsIl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlIiwicmVtb3ZlQWxsUmFuZ2VzIiwiYWRkUmFuZ2UiLCJnZyIsImxjIiwicmkiLCJzaSIsIk1nIiwiTmciLCJ0aSIsInVjIiwiT2ciLCJ1aSIsIlloIiwiWmgiLCIkaCIsImFpIiwiYmkiLCJjaSIsImRpIiwiZWkiLCJmaSIsImZpbmRGaWJlckJ5SG9zdEluc3RhbmNlIiwiaXNEaXNhYmxlZCIsInN1cHBvcnRzRmliZXIiLCJpbmplY3QiLCJvbkNvbW1pdEZpYmVyUm9vdCIsIm9uQ29tbWl0RmliZXJVbm1vdW50IiwiRWYiLCJmaW5kSG9zdEluc3RhbmNlQnlGaWJlciIsImdpIiwiamkiLCJfbmV4dCIsIl9oYXNDaGlsZHJlbiIsIl9kaWRDb21wbGV0ZSIsIl9jaGlsZHJlbiIsImtpIiwiX2RpZENvbW1pdCIsIl9vbkNvbW1pdCIsImxpIiwiX2ludGVybmFsUm9vdCIsIm1pIiwib2kiLCJfcmVhY3RSb290Q29udGFpbmVyIiwibGVnYWN5X3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyIiwibmkiLCJwaSIsImlpIiwiY29tbWl0IiwidW5tb3VudCIsImNyZWF0ZUJhdGNoIiwicWkiLCJ1bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lciIsInVubW91bnRDb21wb25lbnRBdE5vZGUiLCJ1bnN0YWJsZV9jcmVhdGVQb3J0YWwiLCJ1bnN0YWJsZV9iYXRjaGVkVXBkYXRlcyIsInVuc3RhYmxlX2RlZmVycmVkVXBkYXRlcyIsImZsdXNoU3luYyIsInVuc3RhYmxlX2ZsdXNoQ29udHJvbGxlZCIsIkV2ZW50UGx1Z2luSHViIiwiRXZlbnRQbHVnaW5SZWdpc3RyeSIsIkV2ZW50UHJvcGFnYXRvcnMiLCJSZWFjdENvbnRyb2xsZWRDb21wb25lbnQiLCJSZWFjdERPTUNvbXBvbmVudFRyZWUiLCJSZWFjdERPTUV2ZW50TGlzdGVuZXIiLCJ1bnN0YWJsZV9jcmVhdGVSb290IiwiYnVuZGxlVHlwZSIsInJlbmRlcmVyUGFja2FnZU5hbWUiLCJ2aSIsIndpIiwiX19zZWxmIiwiX19zb3VyY2UiLCJrZXlQcmVmaXgiLCI6IiwiY3JlYXRlUmVmIiwiX2N1cnJlbnRWYWx1ZTIiLCJfY2hhbmdlZEJpdHMyIiwiUHJvdmlkZXIiLCJDb25zdW1lciIsImZvcndhcmRSZWYiLCJTdHJpY3RNb2RlIiwidW5zdGFibGVfQXN5bmNNb2RlIiwidW5zdGFibGVfUHJvZmlsZXIiLCJfQXBwMiJdLCJtYXBwaW5ncyI6ImFBQ0EsSUFBQUEsS0FHQSxTQUFBQyxFQUFBQyxHQUdBLEdBQUFGLEVBQUFFLEdBQ0EsT0FBQUYsRUFBQUUsR0FBQUMsUUFHQSxJQUFBQyxFQUFBSixFQUFBRSxJQUNBRyxFQUFB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aXNELGVBQWUiLCJmaWxlIjoiLi9kaXN0L21haW4uYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDU0Myk7XG4iLCJmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikge1xuICByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDoge1xuICAgIGRlZmF1bHQ6IG9ialxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQ7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgUkVBQ1RfRUxFTUVOVF9UWVBFID0gKHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiZcbiAgICBTeW1ib2wuZm9yICYmXG4gICAgU3ltYm9sLmZvcigncmVhY3QuZWxlbWVudCcpKSB8fFxuICAgIDB4ZWFjNztcblxuICB2YXIgaXNWYWxpZEVsZW1lbnQgPSBmdW5jdGlvbihvYmplY3QpIHtcbiAgICByZXR1cm4gdHlwZW9mIG9iamVjdCA9PT0gJ29iamVjdCcgJiZcbiAgICAgIG9iamVjdCAhPT0gbnVsbCAmJlxuICAgICAgb2JqZWN0LiQkdHlwZW9mID09PSBSRUFDVF9FTEVNRU5UX1RZUEU7XG4gIH07XG5cbiAgLy8gQnkgZXhwbGljaXRseSB1c2luZyBgcHJvcC10eXBlc2AgeW91IGFyZSBvcHRpbmcgaW50byBuZXcgZGV2ZWxvcG1lbnQgYmVoYXZpb3IuXG4gIC8vIGh0dHA6Ly9mYi5tZS9wcm9wLXR5cGVzLWluLXByb2RcbiAgdmFyIHRocm93T25EaXJlY3RBY2Nlc3MgPSB0cnVlO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZmFjdG9yeVdpdGhUeXBlQ2hlY2tlcnMnKShpc1ZhbGlkRWxlbWVudCwgdGhyb3dPbkRpcmVjdEFjY2Vzcyk7XG59IGVsc2Uge1xuICAvLyBCeSBleHBsaWNpdGx5IHVzaW5nIGBwcm9wLXR5cGVzYCB5b3UgYXJlIG9wdGluZyBpbnRvIG5ldyBwcm9kdWN0aW9uIGJlaGF2aW9yLlxuICAvLyBodHRwOi8vZmIubWUvcHJvcC10eXBlcy1pbi1wcm9kXG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9mYWN0b3J5V2l0aFRocm93aW5nU2hpbXMnKSgpO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCJmdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoc291cmNlLCBleGNsdWRlZCkge1xuICBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTtcbiAgdmFyIHRhcmdldCA9IHt9O1xuICB2YXIgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7XG4gIHZhciBrZXksIGk7XG5cbiAgZm9yIChpID0gMDsgaSA8IHNvdXJjZUtleXMubGVuZ3RoOyBpKyspIHtcbiAgICBrZXkgPSBzb3VyY2VLZXlzW2ldO1xuICAgIGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7XG4gICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgfVxuXG4gIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgdmFyIHNvdXJjZVN5bWJvbEtleXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZSk7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgc291cmNlU3ltYm9sS2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAga2V5ID0gc291cmNlU3ltYm9sS2V5c1tpXTtcbiAgICAgIGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7XG4gICAgICBpZiAoIU9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzb3VyY2UsIGtleSkpIGNvbnRpbnVlO1xuICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllczsiLCJmdW5jdGlvbiBfZXh0ZW5kcygpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuXG4gICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXQ7XG4gIH07XG5cbiAgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2V4dGVuZHM7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vaW50ZXJvcFJlcXVpcmVXaWxkY2FyZFwiKTtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuc2hlZXRzTWFuYWdlciA9IHZvaWQgMDtcblxudmFyIF9leHRlbmRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9leHRlbmRzXCIpKTtcblxudmFyIF9vYmplY3RTcHJlYWQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL29iamVjdFNwcmVhZFwiKSk7XG5cbnZhciBfY2xhc3NDYWxsQ2hlY2syID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2NsYXNzQ2FsbENoZWNrXCIpKTtcblxudmFyIF9jcmVhdGVDbGFzczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vY3JlYXRlQ2xhc3NcIikpO1xuXG52YXIgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5cIikpO1xuXG52YXIgX2luaGVyaXRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9pbmhlcml0c1wiKSk7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCIpKTtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKTtcblxudmFyIF93YXJuaW5nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwid2FybmluZ1wiKSk7XG5cbnZhciBfaG9pc3ROb25SZWFjdFN0YXRpY3MgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJob2lzdC1ub24tcmVhY3Qtc3RhdGljc1wiKSk7XG5cbnZhciBfZ2V0RGlzcGxheU5hbWUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWNvbXBvc2UvZ2V0RGlzcGxheU5hbWVcIikpO1xuXG52YXIgX3dyYXBEaXNwbGF5TmFtZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlY29tcG9zZS93cmFwRGlzcGxheU5hbWVcIikpO1xuXG52YXIgX2NvbnRleHRUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0LWpzcy9saWIvY29udGV4dFR5cGVzXCIpKTtcblxudmFyIF9qc3MgPSByZXF1aXJlKFwianNzXCIpO1xuXG52YXIgbnMgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwicmVhY3QtanNzL2xpYi9uc1wiKSk7XG5cbnZhciBfanNzUHJlc2V0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9qc3NQcmVzZXRcIikpO1xuXG52YXIgX2NyZWF0ZU11aVRoZW1lID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9jcmVhdGVNdWlUaGVtZVwiKSk7XG5cbnZhciBfdGhlbWVMaXN0ZW5lciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdGhlbWVMaXN0ZW5lclwiKSk7XG5cbnZhciBfY3JlYXRlR2VuZXJhdGVDbGFzc05hbWUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2NyZWF0ZUdlbmVyYXRlQ2xhc3NOYW1lXCIpKTtcblxudmFyIF9nZXRTdHlsZXNDcmVhdG9yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9nZXRTdHlsZXNDcmVhdG9yXCIpKTtcblxudmFyIF9nZXRUaGVtZVByb3BzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9nZXRUaGVtZVByb3BzXCIpKTtcblxuLy8gRGVmYXVsdCBKU1MgaW5zdGFuY2UuXG52YXIganNzID0gKDAsIF9qc3MuY3JlYXRlKSgoMCwgX2pzc1ByZXNldC5kZWZhdWx0KSgpKTsgLy8gVXNlIGEgc2luZ2xldG9uIG9yIHRoZSBwcm92aWRlZCBvbmUgYnkgdGhlIGNvbnRleHQuXG5cbnZhciBnZW5lcmF0ZUNsYXNzTmFtZSA9ICgwLCBfY3JlYXRlR2VuZXJhdGVDbGFzc05hbWUuZGVmYXVsdCkoKTsgLy8gR2xvYmFsIGluZGV4IGNvdW50ZXIgdG8gcHJlc2VydmUgc291cmNlIG9yZGVyLlxuLy8gV2UgY3JlYXRlIHRoZSBzdHlsZSBzaGVldCBkdXJpbmcgYXQgdGhlIGNyZWF0aW9uIG9mIHRoZSBjb21wb25lbnQsXG4vLyBjaGlsZHJlbiBhcmUgaGFuZGxlZCBhZnRlciB0aGUgcGFyZW50cywgc28gdGhlIG9yZGVyIG9mIHN0eWxlIGVsZW1lbnRzIHdvdWxkIGJlIHBhcmVudC0+Y2hpbGQuXG4vLyBJdCBpcyBhIHByb2JsZW0gdGhvdWdoIHdoZW4gYSBwYXJlbnQgcGFzc2VzIGEgY2xhc3NOYW1lXG4vLyB3aGljaCBuZWVkcyB0byBvdmVycmlkZSBhbnkgY2hpbGRzIHN0eWxlcy5cbi8vIFN0eWxlU2hlZXQgb2YgdGhlIGNoaWxkIGhhcyBhIGhpZ2hlciBzcGVjaWZpY2l0eSwgYmVjYXVzZSBvZiB0aGUgc291cmNlIG9yZGVyLlxuLy8gU28gb3VyIHNvbHV0aW9uIGlzIHRvIHJlbmRlciBzaGVldHMgdGhlbSBpbiB0aGUgcmV2ZXJzZSBvcmRlciBjaGlsZC0+c2hlZXQsIHNvXG4vLyB0aGF0IHBhcmVudCBoYXMgYSBoaWdoZXIgc3BlY2lmaWNpdHkuXG5cbnZhciBpbmRleENvdW50ZXIgPSAtMTBlMTA7IC8vIEV4cG9ydGVkIGZvciB0ZXN0IHB1cnBvc2VzXG5cbnZhciBzaGVldHNNYW5hZ2VyID0gbmV3IE1hcCgpOyAvLyBXZSB1c2UgdGhlIHNhbWUgZW1wdHkgb2JqZWN0IHRvIHJlZiBjb3VudCB0aGUgc3R5bGVzIHRoYXQgZG9uJ3QgbmVlZCBhIHRoZW1lIG9iamVjdC5cblxuZXhwb3J0cy5zaGVldHNNYW5hZ2VyID0gc2hlZXRzTWFuYWdlcjtcbnZhciBub29wVGhlbWUgPSB7fTsgLy8gSW4gb3JkZXIgdG8gaGF2ZSBzZWxmLXN1cHBvcnRpbmcgY29tcG9uZW50cywgd2UgcmVseSBvbiBkZWZhdWx0IHRoZW1lIHdoZW4gbm90IHByb3ZpZGVkLlxuXG52YXIgZGVmYXVsdFRoZW1lO1xuXG5mdW5jdGlvbiBnZXREZWZhdWx0VGhlbWUoKSB7XG4gIGlmIChkZWZhdWx0VGhlbWUpIHtcbiAgICByZXR1cm4gZGVmYXVsdFRoZW1lO1xuICB9XG5cbiAgZGVmYXVsdFRoZW1lID0gKDAsIF9jcmVhdGVNdWlUaGVtZS5kZWZhdWx0KSgpO1xuICByZXR1cm4gZGVmYXVsdFRoZW1lO1xufSAvLyBMaW5rIGEgc3R5bGUgc2hlZXQgd2l0aCBhIGNvbXBvbmVudC5cbi8vIEl0IGRvZXMgbm90IG1vZGlmeSB0aGUgY29tcG9uZW50IHBhc3NlZCB0byBpdDtcbi8vIGluc3RlYWQsIGl0IHJldHVybnMgYSBuZXcgY29tcG9uZW50LCB3aXRoIGEgYGNsYXNzZXNgIHByb3BlcnR5LlxuXG5cbnZhciB3aXRoU3R5bGVzID0gZnVuY3Rpb24gd2l0aFN0eWxlcyhzdHlsZXNPckNyZWF0b3IpIHtcbiAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICByZXR1cm4gZnVuY3Rpb24gKENvbXBvbmVudCkge1xuICAgIHZhciBfb3B0aW9ucyR3aXRoVGhlbWUgPSBvcHRpb25zLndpdGhUaGVtZSxcbiAgICAgICAgd2l0aFRoZW1lID0gX29wdGlvbnMkd2l0aFRoZW1lID09PSB2b2lkIDAgPyBmYWxzZSA6IF9vcHRpb25zJHdpdGhUaGVtZSxcbiAgICAgICAgX29wdGlvbnMkZmxpcCA9IG9wdGlvbnMuZmxpcCxcbiAgICAgICAgZmxpcCA9IF9vcHRpb25zJGZsaXAgPT09IHZvaWQgMCA/IG51bGwgOiBfb3B0aW9ucyRmbGlwLFxuICAgICAgICBuYW1lID0gb3B0aW9ucy5uYW1lLFxuICAgICAgICBzdHlsZVNoZWV0T3B0aW9ucyA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyLmRlZmF1bHQpKG9wdGlvbnMsIFtcIndpdGhUaGVtZVwiLCBcImZsaXBcIiwgXCJuYW1lXCJdKTtcbiAgICB2YXIgc3R5bGVzQ3JlYXRvciA9ICgwLCBfZ2V0U3R5bGVzQ3JlYXRvci5kZWZhdWx0KShzdHlsZXNPckNyZWF0b3IpO1xuICAgIHZhciBsaXN0ZW5Ub1RoZW1lID0gc3R5bGVzQ3JlYXRvci50aGVtaW5nRW5hYmxlZCB8fCB3aXRoVGhlbWUgfHwgdHlwZW9mIG5hbWUgPT09ICdzdHJpbmcnO1xuICAgIGluZGV4Q291bnRlciArPSAxO1xuICAgIHN0eWxlc0NyZWF0b3Iub3B0aW9ucy5pbmRleCA9IGluZGV4Q291bnRlcjtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyAoMCwgX3dhcm5pbmcuZGVmYXVsdCkoaW5kZXhDb3VudGVyIDwgMCwgWydNYXRlcmlhbC1VSTogeW91IG1pZ2h0IGhhdmUgYSBtZW1vcnkgbGVhay4nLCAnVGhlIGluZGV4Q291bnRlciBpcyBub3Qgc3VwcG9zZWQgdG8gZ3JvdyB0aGF0IG11Y2guJ10uam9pbignICcpKSA6IHZvaWQgMDtcblxuICAgIHZhciBXaXRoU3R5bGVzID1cbiAgICAvKiNfX1BVUkVfXyovXG4gICAgZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgICAgICgwLCBfaW5oZXJpdHMyLmRlZmF1bHQpKFdpdGhTdHlsZXMsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gICAgICBmdW5jdGlvbiBXaXRoU3R5bGVzKHByb3BzLCBjb250ZXh0KSB7XG4gICAgICAgIHZhciBfdGhpcztcblxuICAgICAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMi5kZWZhdWx0KSh0aGlzLCBXaXRoU3R5bGVzKTtcbiAgICAgICAgX3RoaXMgPSAoMCwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yLmRlZmF1bHQpKHRoaXMsIChXaXRoU3R5bGVzLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoV2l0aFN0eWxlcykpLmNhbGwodGhpcywgcHJvcHMsIGNvbnRleHQpKTtcbiAgICAgICAgX3RoaXMuc3RhdGUgPSB7fTtcbiAgICAgICAgX3RoaXMuZGlzYWJsZVN0eWxlc0dlbmVyYXRpb24gPSBmYWxzZTtcbiAgICAgICAgX3RoaXMuanNzID0gbnVsbDtcbiAgICAgICAgX3RoaXMuc2hlZXRPcHRpb25zID0gbnVsbDtcbiAgICAgICAgX3RoaXMuc2hlZXRzTWFuYWdlciA9IHNoZWV0c01hbmFnZXI7XG4gICAgICAgIF90aGlzLnN0eWxlc0NyZWF0b3JTYXZlZCA9IG51bGw7XG4gICAgICAgIF90aGlzLnRoZW1lID0gbnVsbDtcbiAgICAgICAgX3RoaXMudW5zdWJzY3JpYmVJZCA9IG51bGw7XG4gICAgICAgIF90aGlzLmpzcyA9IF90aGlzLmNvbnRleHRbbnMuanNzXSB8fCBqc3M7XG4gICAgICAgIHZhciBtdWlUaGVtZVByb3ZpZGVyT3B0aW9ucyA9IF90aGlzLmNvbnRleHQubXVpVGhlbWVQcm92aWRlck9wdGlvbnM7XG5cbiAgICAgICAgaWYgKG11aVRoZW1lUHJvdmlkZXJPcHRpb25zKSB7XG4gICAgICAgICAgaWYgKG11aVRoZW1lUHJvdmlkZXJPcHRpb25zLnNoZWV0c01hbmFnZXIpIHtcbiAgICAgICAgICAgIF90aGlzLnNoZWV0c01hbmFnZXIgPSBtdWlUaGVtZVByb3ZpZGVyT3B0aW9ucy5zaGVldHNNYW5hZ2VyO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIF90aGlzLmRpc2FibGVTdHlsZXNHZW5lcmF0aW9uID0gbXVpVGhlbWVQcm92aWRlck9wdGlvbnMuZGlzYWJsZVN0eWxlc0dlbmVyYXRpb247XG4gICAgICAgIH0gLy8gQXR0YWNoIHRoZSBzdHlsZXNDcmVhdG9yIHRvIHRoZSBpbnN0YW5jZSBvZiB0aGUgY29tcG9uZW50IGFzIGluIHRoZSBjb250ZXh0XG4gICAgICAgIC8vIG9mIHJlYWN0LWhvdC1sb2FkZXIgdGhlIGhvb2tzIGNhbiBiZSBleGVjdXRlZCBpbiBhIGRpZmZlcmVudCBjbG9zdXJlIGNvbnRleHQ6XG4gICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9nYWVhcm9uL3JlYWN0LWhvdC1sb2FkZXIvYmxvYi9tYXN0ZXIvc3JjL3BhdGNoLmRldi5qcyNMMTA3XG5cblxuICAgICAgICBfdGhpcy5zdHlsZXNDcmVhdG9yU2F2ZWQgPSBzdHlsZXNDcmVhdG9yO1xuICAgICAgICBfdGhpcy5zaGVldE9wdGlvbnMgPSAoMCwgX29iamVjdFNwcmVhZDIuZGVmYXVsdCkoe1xuICAgICAgICAgIGdlbmVyYXRlQ2xhc3NOYW1lOiBnZW5lcmF0ZUNsYXNzTmFtZVxuICAgICAgICB9LCBfdGhpcy5jb250ZXh0W25zLnNoZWV0T3B0aW9uc10pOyAvLyBXZSB1c2UgfHwgYXMgdGhlIGZ1bmN0aW9uIGNhbGwgaXMgbGF6eSBldmFsdWF0ZWQuXG5cbiAgICAgICAgX3RoaXMudGhlbWUgPSBsaXN0ZW5Ub1RoZW1lID8gX3RoZW1lTGlzdGVuZXIuZGVmYXVsdC5pbml0aWFsKGNvbnRleHQpIHx8IGdldERlZmF1bHRUaGVtZSgpIDogbm9vcFRoZW1lO1xuXG4gICAgICAgIF90aGlzLmF0dGFjaChfdGhpcy50aGVtZSk7XG5cbiAgICAgICAgX3RoaXMuY2FjaGVDbGFzc2VzID0ge1xuICAgICAgICAgIC8vIENhY2hlIGZvciB0aGUgZmluYWxpemVkIGNsYXNzZXMgdmFsdWUuXG4gICAgICAgICAgdmFsdWU6IG51bGwsXG4gICAgICAgICAgLy8gQ2FjaGUgZm9yIHRoZSBsYXN0IHVzZWQgY2xhc3NlcyBwcm9wIHBvaW50ZXIuXG4gICAgICAgICAgbGFzdFByb3A6IG51bGwsXG4gICAgICAgICAgLy8gQ2FjaGUgZm9yIHRoZSBsYXN0IHVzZWQgcmVuZGVyZWQgY2xhc3NlcyBwb2ludGVyLlxuICAgICAgICAgIGxhc3RKU1M6IHt9XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICAgIH1cblxuICAgICAgKDAsIF9jcmVhdGVDbGFzczIuZGVmYXVsdCkoV2l0aFN0eWxlcywgW3tcbiAgICAgICAga2V5OiBcImNvbXBvbmVudERpZE1vdW50XCIsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgICAgIGlmICghbGlzdGVuVG9UaGVtZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHRoaXMudW5zdWJzY3JpYmVJZCA9IF90aGVtZUxpc3RlbmVyLmRlZmF1bHQuc3Vic2NyaWJlKHRoaXMuY29udGV4dCwgZnVuY3Rpb24gKHRoZW1lKSB7XG4gICAgICAgICAgICB2YXIgb2xkVGhlbWUgPSBfdGhpczIudGhlbWU7XG4gICAgICAgICAgICBfdGhpczIudGhlbWUgPSB0aGVtZTtcblxuICAgICAgICAgICAgX3RoaXMyLmF0dGFjaChfdGhpczIudGhlbWUpOyAvLyBSZXJlbmRlciB0aGUgY29tcG9uZW50IHNvIHRoZSB1bmRlcmx5aW5nIGNvbXBvbmVudCBnZXRzIHRoZSB0aGVtZSB1cGRhdGUuXG4gICAgICAgICAgICAvLyBCeSB0aGVtZSB1cGRhdGUgd2UgbWVhbiByZWNlaXZpbmcgYW5kIGFwcGx5aW5nIHRoZSBuZXcgY2xhc3MgbmFtZXMuXG5cblxuICAgICAgICAgICAgX3RoaXMyLnNldFN0YXRlKHt9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIF90aGlzMi5kZXRhY2gob2xkVGhlbWUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0sIHtcbiAgICAgICAga2V5OiBcImNvbXBvbmVudERpZFVwZGF0ZVwiLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKCkge1xuICAgICAgICAgIC8vIHJlYWN0LWhvdC1sb2FkZXIgc3BlY2lmaWMgbG9naWNcbiAgICAgICAgICBpZiAodGhpcy5zdHlsZXNDcmVhdG9yU2F2ZWQgPT09IHN0eWxlc0NyZWF0b3IgfHwgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHRoaXMuZGV0YWNoKHRoaXMudGhlbWUpO1xuICAgICAgICAgIHRoaXMuc3R5bGVzQ3JlYXRvclNhdmVkID0gc3R5bGVzQ3JlYXRvcjtcbiAgICAgICAgICB0aGlzLmF0dGFjaCh0aGlzLnRoZW1lKTtcbiAgICAgICAgICB0aGlzLmZvcmNlVXBkYXRlKCk7XG4gICAgICAgIH1cbiAgICAgIH0sIHtcbiAgICAgICAga2V5OiBcImNvbXBvbmVudFdpbGxVbm1vdW50XCIsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgICAgICB0aGlzLmRldGFjaCh0aGlzLnRoZW1lKTtcblxuICAgICAgICAgIGlmICh0aGlzLnVuc3Vic2NyaWJlSWQgIT09IG51bGwpIHtcbiAgICAgICAgICAgIF90aGVtZUxpc3RlbmVyLmRlZmF1bHQudW5zdWJzY3JpYmUodGhpcy5jb250ZXh0LCB0aGlzLnVuc3Vic2NyaWJlSWQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSwge1xuICAgICAgICBrZXk6IFwiZ2V0Q2xhc3Nlc1wiLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0Q2xhc3NlcygpIHtcbiAgICAgICAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgICAgICAgIC8vIFRyYWNrcyBpZiBlaXRoZXIgdGhlIHJlbmRlcmVkIGNsYXNzZXMgb3IgY2xhc3NlcyBwcm9wIGhhcyBjaGFuZ2VkLFxuICAgICAgICAgIC8vIHJlcXVpcmluZyB0aGUgZ2VuZXJhdGlvbiBvZiBhIG5ldyBmaW5hbGl6ZWQgY2xhc3NlcyBvYmplY3QuXG4gICAgICAgICAgdmFyIGdlbmVyYXRlID0gZmFsc2U7XG5cbiAgICAgICAgICBpZiAoIXRoaXMuZGlzYWJsZVN0eWxlc0dlbmVyYXRpb24pIHtcbiAgICAgICAgICAgIHZhciBzaGVldE1hbmFnZXIgPSB0aGlzLnNoZWV0c01hbmFnZXIuZ2V0KHRoaXMuc3R5bGVzQ3JlYXRvclNhdmVkKTtcbiAgICAgICAgICAgIHZhciBzaGVldHNNYW5hZ2VyVGhlbWUgPSBzaGVldE1hbmFnZXIuZ2V0KHRoaXMudGhlbWUpO1xuXG4gICAgICAgICAgICBpZiAoc2hlZXRzTWFuYWdlclRoZW1lLnNoZWV0LmNsYXNzZXMgIT09IHRoaXMuY2FjaGVDbGFzc2VzLmxhc3RKU1MpIHtcbiAgICAgICAgICAgICAgdGhpcy5jYWNoZUNsYXNzZXMubGFzdEpTUyA9IHNoZWV0c01hbmFnZXJUaGVtZS5zaGVldC5jbGFzc2VzO1xuICAgICAgICAgICAgICBnZW5lcmF0ZSA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHRoaXMucHJvcHMuY2xhc3NlcyAhPT0gdGhpcy5jYWNoZUNsYXNzZXMubGFzdFByb3ApIHtcbiAgICAgICAgICAgIHRoaXMuY2FjaGVDbGFzc2VzLmxhc3RQcm9wID0gdGhpcy5wcm9wcy5jbGFzc2VzO1xuICAgICAgICAgICAgZ2VuZXJhdGUgPSB0cnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChnZW5lcmF0ZSkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJvcHMuY2xhc3Nlcykge1xuICAgICAgICAgICAgICB0aGlzLmNhY2hlQ2xhc3Nlcy52YWx1ZSA9ICgwLCBfb2JqZWN0U3ByZWFkMi5kZWZhdWx0KSh7fSwgdGhpcy5jYWNoZUNsYXNzZXMubGFzdEpTUywgT2JqZWN0LmtleXModGhpcy5wcm9wcy5jbGFzc2VzKS5yZWR1Y2UoZnVuY3Rpb24gKGFjY3VtdWxhdG9yLCBrZXkpIHtcbiAgICAgICAgICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyAoMCwgX3dhcm5pbmcuZGVmYXVsdCkoX3RoaXMzLmNhY2hlQ2xhc3Nlcy5sYXN0SlNTW2tleV0gfHwgX3RoaXMzLmRpc2FibGVTdHlsZXNHZW5lcmF0aW9uLCBbXCJNYXRlcmlhbC1VSTogdGhlIGtleSBgXCIuY29uY2F0KGtleSwgXCJgIFwiKSArIFwicHJvdmlkZWQgdG8gdGhlIGNsYXNzZXMgcHJvcGVydHkgaXMgbm90IGltcGxlbWVudGVkIGluIFwiLmNvbmNhdCgoMCwgX2dldERpc3BsYXlOYW1lLmRlZmF1bHQpKENvbXBvbmVudCksIFwiLlwiKSwgXCJZb3UgY2FuIG9ubHkgb3ZlcnJpZGUgb25lIG9mIHRoZSBmb2xsb3dpbmc6IFwiLmNvbmNhdChPYmplY3Qua2V5cyhfdGhpczMuY2FjaGVDbGFzc2VzLmxhc3RKU1MpLmpvaW4oJywnKSldLmpvaW4oJ1xcbicpKSA6IHZvaWQgMDtcbiAgICAgICAgICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyAoMCwgX3dhcm5pbmcuZGVmYXVsdCkoIV90aGlzMy5wcm9wcy5jbGFzc2VzW2tleV0gfHwgdHlwZW9mIF90aGlzMy5wcm9wcy5jbGFzc2VzW2tleV0gPT09ICdzdHJpbmcnLCBbXCJNYXRlcmlhbC1VSTogdGhlIGtleSBgXCIuY29uY2F0KGtleSwgXCJgIFwiKSArIFwicHJvdmlkZWQgdG8gdGhlIGNsYXNzZXMgcHJvcGVydHkgaXMgbm90IHZhbGlkIGZvciBcIi5jb25jYXQoKDAsIF9nZXREaXNwbGF5TmFtZS5kZWZhdWx0KShDb21wb25lbnQpLCBcIi5cIiksIFwiWW91IG5lZWQgdG8gcHJvdmlkZSBhIG5vbiBlbXB0eSBzdHJpbmcgaW5zdGVhZCBvZjogXCIuY29uY2F0KF90aGlzMy5wcm9wcy5jbGFzc2VzW2tleV0sIFwiLlwiKV0uam9pbignXFxuJykpIDogdm9pZCAwO1xuXG4gICAgICAgICAgICAgICAgaWYgKF90aGlzMy5wcm9wcy5jbGFzc2VzW2tleV0pIHtcbiAgICAgICAgICAgICAgICAgIGFjY3VtdWxhdG9yW2tleV0gPSBcIlwiLmNvbmNhdChfdGhpczMuY2FjaGVDbGFzc2VzLmxhc3RKU1Nba2V5XSwgXCIgXCIpLmNvbmNhdChfdGhpczMucHJvcHMuY2xhc3Nlc1trZXldKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gICAgICAgICAgICAgIH0sIHt9KSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB0aGlzLmNhY2hlQ2xhc3Nlcy52YWx1ZSA9IHRoaXMuY2FjaGVDbGFzc2VzLmxhc3RKU1M7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHRoaXMuY2FjaGVDbGFzc2VzLnZhbHVlO1xuICAgICAgICB9XG4gICAgICB9LCB7XG4gICAgICAgIGtleTogXCJhdHRhY2hcIixcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGF0dGFjaCh0aGVtZSkge1xuICAgICAgICAgIGlmICh0aGlzLmRpc2FibGVTdHlsZXNHZW5lcmF0aW9uKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIHN0eWxlc0NyZWF0b3JTYXZlZCA9IHRoaXMuc3R5bGVzQ3JlYXRvclNhdmVkO1xuICAgICAgICAgIHZhciBzaGVldE1hbmFnZXIgPSB0aGlzLnNoZWV0c01hbmFnZXIuZ2V0KHN0eWxlc0NyZWF0b3JTYXZlZCk7XG5cbiAgICAgICAgICBpZiAoIXNoZWV0TWFuYWdlcikge1xuICAgICAgICAgICAgc2hlZXRNYW5hZ2VyID0gbmV3IE1hcCgpO1xuICAgICAgICAgICAgdGhpcy5zaGVldHNNYW5hZ2VyLnNldChzdHlsZXNDcmVhdG9yU2F2ZWQsIHNoZWV0TWFuYWdlcik7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIHNoZWV0TWFuYWdlclRoZW1lID0gc2hlZXRNYW5hZ2VyLmdldCh0aGVtZSk7XG5cbiAgICAgICAgICBpZiAoIXNoZWV0TWFuYWdlclRoZW1lKSB7XG4gICAgICAgICAgICBzaGVldE1hbmFnZXJUaGVtZSA9IHtcbiAgICAgICAgICAgICAgcmVmczogMCxcbiAgICAgICAgICAgICAgc2hlZXQ6IG51bGxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBzaGVldE1hbmFnZXIuc2V0KHRoZW1lLCBzaGVldE1hbmFnZXJUaGVtZSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHNoZWV0TWFuYWdlclRoZW1lLnJlZnMgPT09IDApIHtcbiAgICAgICAgICAgIHZhciBzdHlsZXMgPSBzdHlsZXNDcmVhdG9yU2F2ZWQuY3JlYXRlKHRoZW1lLCBuYW1lKTtcbiAgICAgICAgICAgIHZhciBtZXRhID0gbmFtZTtcblxuICAgICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIW1ldGEpIHtcbiAgICAgICAgICAgICAgbWV0YSA9ICgwLCBfZ2V0RGlzcGxheU5hbWUuZGVmYXVsdCkoQ29tcG9uZW50KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIHNoZWV0ID0gdGhpcy5qc3MuY3JlYXRlU3R5bGVTaGVldChzdHlsZXMsICgwLCBfb2JqZWN0U3ByZWFkMi5kZWZhdWx0KSh7XG4gICAgICAgICAgICAgIG1ldGE6IG1ldGEsXG4gICAgICAgICAgICAgIGNsYXNzTmFtZVByZWZpeDogbWV0YSxcbiAgICAgICAgICAgICAgZmxpcDogdHlwZW9mIGZsaXAgPT09ICdib29sZWFuJyA/IGZsaXAgOiB0aGVtZS5kaXJlY3Rpb24gPT09ICdydGwnLFxuICAgICAgICAgICAgICBsaW5rOiBmYWxzZVxuICAgICAgICAgICAgfSwgdGhpcy5zaGVldE9wdGlvbnMsIHN0eWxlc0NyZWF0b3JTYXZlZC5vcHRpb25zLCB7XG4gICAgICAgICAgICAgIG5hbWU6IG5hbWVcbiAgICAgICAgICAgIH0sIHN0eWxlU2hlZXRPcHRpb25zKSk7XG4gICAgICAgICAgICBzaGVldE1hbmFnZXJUaGVtZS5zaGVldCA9IHNoZWV0O1xuICAgICAgICAgICAgc2hlZXQuYXR0YWNoKCk7XG4gICAgICAgICAgICB2YXIgc2hlZXRzUmVnaXN0cnkgPSB0aGlzLmNvbnRleHRbbnMuc2hlZXRzUmVnaXN0cnldO1xuXG4gICAgICAgICAgICBpZiAoc2hlZXRzUmVnaXN0cnkpIHtcbiAgICAgICAgICAgICAgc2hlZXRzUmVnaXN0cnkuYWRkKHNoZWV0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBzaGVldE1hbmFnZXJUaGVtZS5yZWZzICs9IDE7XG4gICAgICAgIH1cbiAgICAgIH0sIHtcbiAgICAgICAga2V5OiBcImRldGFjaFwiLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZGV0YWNoKHRoZW1lKSB7XG4gICAgICAgICAgaWYgKHRoaXMuZGlzYWJsZVN0eWxlc0dlbmVyYXRpb24pIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgc3R5bGVzQ3JlYXRvclNhdmVkID0gdGhpcy5zdHlsZXNDcmVhdG9yU2F2ZWQ7XG4gICAgICAgICAgdmFyIHNoZWV0TWFuYWdlciA9IHRoaXMuc2hlZXRzTWFuYWdlci5nZXQoc3R5bGVzQ3JlYXRvclNhdmVkKTtcbiAgICAgICAgICB2YXIgc2hlZXRNYW5hZ2VyVGhlbWUgPSBzaGVldE1hbmFnZXIuZ2V0KHRoZW1lKTtcbiAgICAgICAgICBzaGVldE1hbmFnZXJUaGVtZS5yZWZzIC09IDE7XG5cbiAgICAgICAgICBpZiAoc2hlZXRNYW5hZ2VyVGhlbWUucmVmcyA9PT0gMCkge1xuICAgICAgICAgICAgc2hlZXRNYW5hZ2VyLmRlbGV0ZSh0aGVtZSk7XG4gICAgICAgICAgICB0aGlzLmpzcy5yZW1vdmVTdHlsZVNoZWV0KHNoZWV0TWFuYWdlclRoZW1lLnNoZWV0KTtcbiAgICAgICAgICAgIHZhciBzaGVldHNSZWdpc3RyeSA9IHRoaXMuY29udGV4dFtucy5zaGVldHNSZWdpc3RyeV07XG5cbiAgICAgICAgICAgIGlmIChzaGVldHNSZWdpc3RyeSkge1xuICAgICAgICAgICAgICBzaGVldHNSZWdpc3RyeS5yZW1vdmUoc2hlZXRNYW5hZ2VyVGhlbWUuc2hlZXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSwge1xuICAgICAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICAgICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgICAgIGNsYXNzZXMgPSBfcHJvcHMuY2xhc3NlcyxcbiAgICAgICAgICAgICAgaW5uZXJSZWYgPSBfcHJvcHMuaW5uZXJSZWYsXG4gICAgICAgICAgICAgIG90aGVyID0gKDAsIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIuZGVmYXVsdCkoX3Byb3BzLCBbXCJjbGFzc2VzXCIsIFwiaW5uZXJSZWZcIl0pO1xuICAgICAgICAgIHZhciBtb3JlID0gKDAsIF9nZXRUaGVtZVByb3BzLmRlZmF1bHQpKHtcbiAgICAgICAgICAgIHRoZW1lOiB0aGlzLnRoZW1lLFxuICAgICAgICAgICAgbmFtZTogbmFtZVxuICAgICAgICAgIH0pOyAvLyBQcm92aWRlIHRoZSB0aGVtZSB0byB0aGUgd3JhcHBlZCBjb21wb25lbnQuXG4gICAgICAgICAgLy8gU28gd2UgZG9uJ3QgaGF2ZSB0byB1c2UgdGhlIGB3aXRoVGhlbWUoKWAgSGlnaGVyLW9yZGVyIENvbXBvbmVudC5cblxuICAgICAgICAgIGlmICh3aXRoVGhlbWUpIHtcbiAgICAgICAgICAgIG1vcmUudGhlbWUgPSB0aGlzLnRoZW1lO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7fSwgbW9yZSwge1xuICAgICAgICAgICAgY2xhc3NlczogdGhpcy5nZXRDbGFzc2VzKCksXG4gICAgICAgICAgICByZWY6IGlubmVyUmVmXG4gICAgICAgICAgfSwgb3RoZXIpKTtcbiAgICAgICAgfVxuICAgICAgfV0pO1xuICAgICAgcmV0dXJuIFdpdGhTdHlsZXM7XG4gICAgfShfcmVhY3QuZGVmYXVsdC5Db21wb25lbnQpO1xuXG4gICAgV2l0aFN0eWxlcy5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gICAgICAvKipcbiAgICAgICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICAgICAqL1xuICAgICAgY2xhc3NlczogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdCxcblxuICAgICAgLyoqXG4gICAgICAgKiBVc2UgdGhhdCBwcm9wZXJ0eSB0byBwYXNzIGEgcmVmIGNhbGxiYWNrIHRvIHRoZSBkZWNvcmF0ZWQgY29tcG9uZW50LlxuICAgICAgICovXG4gICAgICBpbm5lclJlZjogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsIF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3RdKVxuICAgIH0gOiB7fTtcbiAgICBXaXRoU3R5bGVzLmNvbnRleHRUeXBlcyA9ICgwLCBfb2JqZWN0U3ByZWFkMi5kZWZhdWx0KSh7XG4gICAgICBtdWlUaGVtZVByb3ZpZGVyT3B0aW9uczogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdFxuICAgIH0sIF9jb250ZXh0VHlwZXMuZGVmYXVsdCwgbGlzdGVuVG9UaGVtZSA/IF90aGVtZUxpc3RlbmVyLmRlZmF1bHQuY29udGV4dFR5cGVzIDoge30pO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIFdpdGhTdHlsZXMuZGlzcGxheU5hbWUgPSAoMCwgX3dyYXBEaXNwbGF5TmFtZS5kZWZhdWx0KShDb21wb25lbnQsICdXaXRoU3R5bGVzJyk7XG4gICAgfVxuXG4gICAgKDAsIF9ob2lzdE5vblJlYWN0U3RhdGljcy5kZWZhdWx0KShXaXRoU3R5bGVzLCBDb21wb25lbnQpO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIC8vIEV4cG9zZWQgZm9yIHRlc3QgcHVycG9zZXMuXG4gICAgICBXaXRoU3R5bGVzLk5ha2VkID0gQ29tcG9uZW50O1xuICAgICAgV2l0aFN0eWxlcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICB9XG5cbiAgICByZXR1cm4gV2l0aFN0eWxlcztcbiAgfTtcbn07XG5cbnZhciBfZGVmYXVsdCA9IHdpdGhTdHlsZXM7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCIvKiFcbiAgQ29weXJpZ2h0IChjKSAyMDE3IEplZCBXYXRzb24uXG4gIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZSAoTUlUKSwgc2VlXG4gIGh0dHA6Ly9qZWR3YXRzb24uZ2l0aHViLmlvL2NsYXNzbmFtZXNcbiovXG4vKiBnbG9iYWwgZGVmaW5lICovXG5cbihmdW5jdGlvbiAoKSB7XG5cdCd1c2Ugc3RyaWN0JztcblxuXHR2YXIgaGFzT3duID0ge30uaGFzT3duUHJvcGVydHk7XG5cblx0ZnVuY3Rpb24gY2xhc3NOYW1lcyAoKSB7XG5cdFx0dmFyIGNsYXNzZXMgPSBbXTtcblxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgYXJnID0gYXJndW1lbnRzW2ldO1xuXHRcdFx0aWYgKCFhcmcpIGNvbnRpbnVlO1xuXG5cdFx0XHR2YXIgYXJnVHlwZSA9IHR5cGVvZiBhcmc7XG5cblx0XHRcdGlmIChhcmdUeXBlID09PSAnc3RyaW5nJyB8fCBhcmdUeXBlID09PSAnbnVtYmVyJykge1xuXHRcdFx0XHRjbGFzc2VzLnB1c2goYXJnKTtcblx0XHRcdH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShhcmcpICYmIGFyZy5sZW5ndGgpIHtcblx0XHRcdFx0dmFyIGlubmVyID0gY2xhc3NOYW1lcy5hcHBseShudWxsLCBhcmcpO1xuXHRcdFx0XHRpZiAoaW5uZXIpIHtcblx0XHRcdFx0XHRjbGFzc2VzLnB1c2goaW5uZXIpO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2UgaWYgKGFyZ1R5cGUgPT09ICdvYmplY3QnKSB7XG5cdFx0XHRcdGZvciAodmFyIGtleSBpbiBhcmcpIHtcblx0XHRcdFx0XHRpZiAoaGFzT3duLmNhbGwoYXJnLCBrZXkpICYmIGFyZ1trZXldKSB7XG5cdFx0XHRcdFx0XHRjbGFzc2VzLnB1c2goa2V5KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gY2xhc3Nlcy5qb2luKCcgJyk7XG5cdH1cblxuXHRpZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgbW9kdWxlLmV4cG9ydHMpIHtcblx0XHRjbGFzc05hbWVzLmRlZmF1bHQgPSBjbGFzc05hbWVzO1xuXHRcdG1vZHVsZS5leHBvcnRzID0gY2xhc3NOYW1lcztcblx0fSBlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBkZWZpbmUuYW1kID09PSAnb2JqZWN0JyAmJiBkZWZpbmUuYW1kKSB7XG5cdFx0Ly8gcmVnaXN0ZXIgYXMgJ2NsYXNzbmFtZXMnLCBjb25zaXN0ZW50IHdpdGggbnBtIHBhY2thZ2UgbmFtZVxuXHRcdGRlZmluZSgnY2xhc3NuYW1lcycsIFtdLCBmdW5jdGlvbiAoKSB7XG5cdFx0XHRyZXR1cm4gY2xhc3NOYW1lcztcblx0XHR9KTtcblx0fSBlbHNlIHtcblx0XHR3aW5kb3cuY2xhc3NOYW1lcyA9IGNsYXNzTmFtZXM7XG5cdH1cbn0oKSk7XG4iLCJmdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7XG4gIGlmIChrZXkgaW4gb2JqKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgd3JpdGFibGU6IHRydWVcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBvYmpba2V5XSA9IHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIG9iajtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfZGVmaW5lUHJvcGVydHk7IiwiZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtcbiAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG4gICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgIGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICB9XG59XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gIGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtcbiAgcmV0dXJuIENvbnN0cnVjdG9yO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9jcmVhdGVDbGFzczsiLCJmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9jbGFzc0NhbGxDaGVjazsiLCJ2YXIgc2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKFwiLi9zZXRQcm90b3R5cGVPZlwiKTtcblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gIGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7XG4gIH1cblxuICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHtcbiAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgdmFsdWU6IHN1YkNsYXNzLFxuICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9XG4gIH0pO1xuICBpZiAoc3VwZXJDbGFzcykgc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9pbmhlcml0czsiLCJ2YXIgX3R5cGVvZiA9IHJlcXVpcmUoXCIuLi8uLi9oZWxwZXJzL2J1aWx0aW4vdHlwZW9mXCIpO1xuXG52YXIgYXNzZXJ0VGhpc0luaXRpYWxpemVkID0gcmVxdWlyZShcIi4vYXNzZXJ0VGhpc0luaXRpYWxpemVkXCIpO1xuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7XG4gIGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpKSB7XG4gICAgcmV0dXJuIGNhbGw7XG4gIH1cblxuICByZXR1cm4gYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuOyIsInZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoXCIuL2RlZmluZVByb3BlcnR5XCIpO1xuXG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkge1xuICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9O1xuICAgIHZhciBvd25LZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTtcblxuICAgIGlmICh0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgb3duS2V5cyA9IG93bktleXMuY29uY2F0KE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlKS5maWx0ZXIoZnVuY3Rpb24gKHN5bSkge1xuICAgICAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIHN5bSkuZW51bWVyYWJsZTtcbiAgICAgIH0pKTtcbiAgICB9XG5cbiAgICBvd25LZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTtcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX29iamVjdFNwcmVhZDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuY2FwaXRhbGl6ZSA9IGNhcGl0YWxpemU7XG5leHBvcnRzLmNvbnRhaW5zID0gY29udGFpbnM7XG5leHBvcnRzLmZpbmRJbmRleCA9IGZpbmRJbmRleDtcbmV4cG9ydHMuZmluZCA9IGZpbmQ7XG5leHBvcnRzLmNyZWF0ZUNoYWluZWRGdW5jdGlvbiA9IGNyZWF0ZUNoYWluZWRGdW5jdGlvbjtcblxudmFyIF90eXBlb2YyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL3R5cGVvZlwiKSk7XG5cbnZhciBfd2FybmluZyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIndhcm5pbmdcIikpO1xuXG4vLyAgd2Vha1xuZnVuY3Rpb24gY2FwaXRhbGl6ZShzdHJpbmcpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgdHlwZW9mIHN0cmluZyAhPT0gJ3N0cmluZycpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ01hdGVyaWFsLVVJOiBjYXBpdGFsaXplKHN0cmluZykgZXhwZWN0cyBhIHN0cmluZyBhcmd1bWVudC4nKTtcbiAgfVxuXG4gIHJldHVybiBzdHJpbmcuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBzdHJpbmcuc2xpY2UoMSk7XG59XG5cbmZ1bmN0aW9uIGNvbnRhaW5zKG9iaiwgcHJlZCkge1xuICByZXR1cm4gT2JqZWN0LmtleXMocHJlZCkuZXZlcnkoZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiBvYmouaGFzT3duUHJvcGVydHkoa2V5KSAmJiBvYmpba2V5XSA9PT0gcHJlZFtrZXldO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gZmluZEluZGV4KGFyciwgcHJlZCkge1xuICB2YXIgcHJlZFR5cGUgPSAoMCwgX3R5cGVvZjIuZGVmYXVsdCkocHJlZCk7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBpZiAocHJlZFR5cGUgPT09ICdmdW5jdGlvbicgJiYgISFwcmVkKGFycltpXSwgaSwgYXJyKSA9PT0gdHJ1ZSkge1xuICAgICAgcmV0dXJuIGk7XG4gICAgfVxuXG4gICAgaWYgKHByZWRUeXBlID09PSAnb2JqZWN0JyAmJiBjb250YWlucyhhcnJbaV0sIHByZWQpKSB7XG4gICAgICByZXR1cm4gaTtcbiAgICB9XG5cbiAgICBpZiAoWydzdHJpbmcnLCAnbnVtYmVyJywgJ2Jvb2xlYW4nXS5pbmRleE9mKHByZWRUeXBlKSAhPT0gLTEpIHtcbiAgICAgIHJldHVybiBhcnIuaW5kZXhPZihwcmVkKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gLTE7XG59XG5cbmZ1bmN0aW9uIGZpbmQoYXJyLCBwcmVkKSB7XG4gIHZhciBpbmRleCA9IGZpbmRJbmRleChhcnIsIHByZWQpO1xuICByZXR1cm4gaW5kZXggPiAtMSA/IGFycltpbmRleF0gOiB1bmRlZmluZWQ7XG59XG4vKipcbiAqIFNhZmUgY2hhaW5lZCBmdW5jdGlvblxuICpcbiAqIFdpbGwgb25seSBjcmVhdGUgYSBuZXcgZnVuY3Rpb24gaWYgbmVlZGVkLFxuICogb3RoZXJ3aXNlIHdpbGwgcGFzcyBiYWNrIGV4aXN0aW5nIGZ1bmN0aW9ucyBvciBudWxsLlxuICpcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGZ1bmN0aW9ucyB0byBjaGFpblxuICogQHJldHVybnMge2Z1bmN0aW9ufG51bGx9XG4gKi9cblxuXG5mdW5jdGlvbiBjcmVhdGVDaGFpbmVkRnVuY3Rpb24oKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBmdW5jcyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBmdW5jc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHJldHVybiBmdW5jcy5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgZnVuYykge1xuICAgIGlmIChmdW5jID09IG51bGwpIHtcbiAgICAgIHJldHVybiBhY2M7XG4gICAgfVxuXG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gKDAsIF93YXJuaW5nLmRlZmF1bHQpKHR5cGVvZiBmdW5jID09PSAnZnVuY3Rpb24nLCAnTWF0ZXJpYWwtVUk6IGludmFsaWQgQXJndW1lbnQgVHlwZSwgbXVzdCBvbmx5IHByb3ZpZGUgZnVuY3Rpb25zLCB1bmRlZmluZWQsIG9yIG51bGwuJykgOiB2b2lkIDA7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIGNoYWluZWRGdW5jdGlvbigpIHtcbiAgICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuMiksIF9rZXkyID0gMDsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xuICAgICAgICBhcmdzW19rZXkyXSA9IGFyZ3VtZW50c1tfa2V5Ml07XG4gICAgICB9XG5cbiAgICAgIGFjYy5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgIGZ1bmMuYXBwbHkodGhpcywgYXJncyk7XG4gICAgfTtcbiAgfSwgZnVuY3Rpb24gKCkge30pO1xufSIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE0LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIHdhcm5pbmdcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogU2ltaWxhciB0byBpbnZhcmlhbnQgYnV0IG9ubHkgbG9ncyBhIHdhcm5pbmcgaWYgdGhlIGNvbmRpdGlvbiBpcyBub3QgbWV0LlxuICogVGhpcyBjYW4gYmUgdXNlZCB0byBsb2cgaXNzdWVzIGluIGRldmVsb3BtZW50IGVudmlyb25tZW50cyBpbiBjcml0aWNhbFxuICogcGF0aHMuIFJlbW92aW5nIHRoZSBsb2dnaW5nIGNvZGUgZm9yIHByb2R1Y3Rpb24gZW52aXJvbm1lbnRzIHdpbGwga2VlcCB0aGVcbiAqIHNhbWUgbG9naWMgYW5kIGZvbGxvdyB0aGUgc2FtZSBjb2RlIHBhdGhzLlxuICovXG5cbnZhciBfX0RFVl9fID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJztcblxudmFyIHdhcm5pbmcgPSBmdW5jdGlvbigpIHt9O1xuXG5pZiAoX19ERVZfXykge1xuICB2YXIgcHJpbnRXYXJuaW5nID0gZnVuY3Rpb24gcHJpbnRXYXJuaW5nKGZvcm1hdCwgYXJncykge1xuICAgIHZhciBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIGFyZ3MgPSBuZXcgQXJyYXkobGVuID4gMiA/IGxlbiAtIDIgOiAwKTtcbiAgICBmb3IgKHZhciBrZXkgPSAyOyBrZXkgPCBsZW47IGtleSsrKSB7XG4gICAgICBhcmdzW2tleSAtIDJdID0gYXJndW1lbnRzW2tleV07XG4gICAgfVxuICAgIHZhciBhcmdJbmRleCA9IDA7XG4gICAgdmFyIG1lc3NhZ2UgPSAnV2FybmluZzogJyArXG4gICAgICBmb3JtYXQucmVwbGFjZSgvJXMvZywgZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBhcmdzW2FyZ0luZGV4KytdO1xuICAgICAgfSk7XG4gICAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uc29sZS5lcnJvcihtZXNzYWdlKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgIC8vIC0tLSBXZWxjb21lIHRvIGRlYnVnZ2luZyBSZWFjdCAtLS1cbiAgICAgIC8vIFRoaXMgZXJyb3Igd2FzIHRocm93biBhcyBhIGNvbnZlbmllbmNlIHNvIHRoYXQgeW91IGNhbiB1c2UgdGhpcyBzdGFja1xuICAgICAgLy8gdG8gZmluZCB0aGUgY2FsbHNpdGUgdGhhdCBjYXVzZWQgdGhpcyB3YXJuaW5nIHRvIGZpcmUuXG4gICAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gICAgfSBjYXRjaCAoeCkge31cbiAgfVxuXG4gIHdhcm5pbmcgPSBmdW5jdGlvbihjb25kaXRpb24sIGZvcm1hdCwgYXJncykge1xuICAgIHZhciBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIGFyZ3MgPSBuZXcgQXJyYXkobGVuID4gMiA/IGxlbiAtIDIgOiAwKTtcbiAgICBmb3IgKHZhciBrZXkgPSAyOyBrZXkgPCBsZW47IGtleSsrKSB7XG4gICAgICBhcmdzW2tleSAtIDJdID0gYXJndW1lbnRzW2tleV07XG4gICAgfVxuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICdgd2FybmluZyhjb25kaXRpb24sIGZvcm1hdCwgLi4uYXJncylgIHJlcXVpcmVzIGEgd2FybmluZyAnICtcbiAgICAgICAgICAnbWVzc2FnZSBhcmd1bWVudCdcbiAgICAgICk7XG4gICAgfVxuICAgIGlmICghY29uZGl0aW9uKSB7XG4gICAgICBwcmludFdhcm5pbmcuYXBwbHkobnVsbCwgW2Zvcm1hdF0uY29uY2F0KGFyZ3MpKTtcbiAgICB9XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gd2FybmluZztcbiIsIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gY2hlY2tEQ0UoKSB7XG4gIC8qIGdsb2JhbCBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gKi9cbiAgaWYgKFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gPT09ICd1bmRlZmluZWQnIHx8XG4gICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRSAhPT0gJ2Z1bmN0aW9uJ1xuICApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyBUaGlzIGJyYW5jaCBpcyB1bnJlYWNoYWJsZSBiZWNhdXNlIHRoaXMgZnVuY3Rpb24gaXMgb25seSBjYWxsZWRcbiAgICAvLyBpbiBwcm9kdWN0aW9uLCBidXQgdGhlIGNvbmRpdGlvbiBpcyB0cnVlIG9ubHkgaW4gZGV2ZWxvcG1lbnQuXG4gICAgLy8gVGhlcmVmb3JlIGlmIHRoZSBicmFuY2ggaXMgc3RpbGwgaGVyZSwgZGVhZCBjb2RlIGVsaW1pbmF0aW9uIHdhc24ndFxuICAgIC8vIHByb3Blcmx5IGFwcGxpZWQuXG4gICAgLy8gRG9uJ3QgY2hhbmdlIHRoZSBtZXNzYWdlLiBSZWFjdCBEZXZUb29scyByZWxpZXMgb24gaXQuIEFsc28gbWFrZSBzdXJlXG4gICAgLy8gdGhpcyBtZXNzYWdlIGRvZXNuJ3Qgb2NjdXIgZWxzZXdoZXJlIGluIHRoaXMgZnVuY3Rpb24sIG9yIGl0IHdpbGwgY2F1c2VcbiAgICAvLyBhIGZhbHNlIHBvc2l0aXZlLlxuICAgIHRocm93IG5ldyBFcnJvcignXl9eJyk7XG4gIH1cbiAgdHJ5IHtcbiAgICAvLyBWZXJpZnkgdGhhdCB0aGUgY29kZSBhYm92ZSBoYXMgYmVlbiBkZWFkIGNvZGUgZWxpbWluYXRlZCAoRENFJ2QpLlxuICAgIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRShjaGVja0RDRSk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIC8vIERldlRvb2xzIHNob3VsZG4ndCBjcmFzaCBSZWFjdCwgbm8gbWF0dGVyIHdoYXQuXG4gICAgLy8gV2Ugc2hvdWxkIHN0aWxsIHJlcG9ydCBpbiBjYXNlIHdlIGJyZWFrIHRoaXMgY29kZS5cbiAgICBjb25zb2xlLmVycm9yKGVycik7XG4gIH1cbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgLy8gRENFIGNoZWNrIHNob3VsZCBoYXBwZW4gYmVmb3JlIFJlYWN0RE9NIGJ1bmRsZSBleGVjdXRlcyBzbyB0aGF0XG4gIC8vIERldlRvb2xzIGNhbiByZXBvcnQgYmFkIG1pbmlmaWNhdGlvbiBkdXJpbmcgaW5qZWN0aW9uLlxuICBjaGVja0RDRSgpO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20uZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVmYXVsdFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfU3ZnSWNvbi5kZWZhdWx0O1xuICB9XG59KTtcblxudmFyIF9TdmdJY29uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9TdmdJY29uXCIpKTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImNyZWF0ZUdlbmVyYXRlQ2xhc3NOYW1lXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9jcmVhdGVHZW5lcmF0ZUNsYXNzTmFtZS5kZWZhdWx0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImNyZWF0ZU11aVRoZW1lXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9jcmVhdGVNdWlUaGVtZS5kZWZhdWx0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImpzc1ByZXNldFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfanNzUHJlc2V0LmRlZmF1bHQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiTXVpVGhlbWVQcm92aWRlclwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfTXVpVGhlbWVQcm92aWRlci5kZWZhdWx0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImNyZWF0ZVN0eWxlc1wiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfY3JlYXRlU3R5bGVzLmRlZmF1bHQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwid2l0aFN0eWxlc1wiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfd2l0aFN0eWxlcy5kZWZhdWx0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIndpdGhUaGVtZVwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfd2l0aFRoZW1lLmRlZmF1bHQ7XG4gIH1cbn0pO1xuXG52YXIgX2NyZWF0ZUdlbmVyYXRlQ2xhc3NOYW1lID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9jcmVhdGVHZW5lcmF0ZUNsYXNzTmFtZVwiKSk7XG5cbnZhciBfY3JlYXRlTXVpVGhlbWUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2NyZWF0ZU11aVRoZW1lXCIpKTtcblxudmFyIF9qc3NQcmVzZXQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2pzc1ByZXNldFwiKSk7XG5cbnZhciBfTXVpVGhlbWVQcm92aWRlciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vTXVpVGhlbWVQcm92aWRlclwiKSk7XG5cbnZhciBfY3JlYXRlU3R5bGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9jcmVhdGVTdHlsZXNcIikpO1xuXG52YXIgX3dpdGhTdHlsZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3dpdGhTdHlsZXNcIikpO1xuXG52YXIgX3dpdGhUaGVtZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vd2l0aFRoZW1lXCIpKTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlZmF1bHRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX1R5cG9ncmFwaHkuZGVmYXVsdDtcbiAgfVxufSk7XG5cbnZhciBfVHlwb2dyYXBoeSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vVHlwb2dyYXBoeVwiKSk7IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX3Nob3VsZFVwZGF0ZSA9IHJlcXVpcmUoJy4vc2hvdWxkVXBkYXRlJyk7XG5cbnZhciBfc2hvdWxkVXBkYXRlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Nob3VsZFVwZGF0ZSk7XG5cbnZhciBfc2hhbGxvd0VxdWFsID0gcmVxdWlyZSgnLi9zaGFsbG93RXF1YWwnKTtcblxudmFyIF9zaGFsbG93RXF1YWwyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc2hhbGxvd0VxdWFsKTtcblxudmFyIF9zZXREaXNwbGF5TmFtZSA9IHJlcXVpcmUoJy4vc2V0RGlzcGxheU5hbWUnKTtcblxudmFyIF9zZXREaXNwbGF5TmFtZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zZXREaXNwbGF5TmFtZSk7XG5cbnZhciBfd3JhcERpc3BsYXlOYW1lID0gcmVxdWlyZSgnLi93cmFwRGlzcGxheU5hbWUnKTtcblxudmFyIF93cmFwRGlzcGxheU5hbWUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfd3JhcERpc3BsYXlOYW1lKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIHB1cmUgPSBmdW5jdGlvbiBwdXJlKEJhc2VDb21wb25lbnQpIHtcbiAgdmFyIGhvYyA9ICgwLCBfc2hvdWxkVXBkYXRlMi5kZWZhdWx0KShmdW5jdGlvbiAocHJvcHMsIG5leHRQcm9wcykge1xuICAgIHJldHVybiAhKDAsIF9zaGFsbG93RXF1YWwyLmRlZmF1bHQpKHByb3BzLCBuZXh0UHJvcHMpO1xuICB9KTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHJldHVybiAoMCwgX3NldERpc3BsYXlOYW1lMi5kZWZhdWx0KSgoMCwgX3dyYXBEaXNwbGF5TmFtZTIuZGVmYXVsdCkoQmFzZUNvbXBvbmVudCwgJ3B1cmUnKSkoaG9jKEJhc2VDb21wb25lbnQpKTtcbiAgfVxuXG4gIHJldHVybiBob2MoQmFzZUNvbXBvbmVudCk7XG59O1xuXG5leHBvcnRzLmRlZmF1bHQgPSBwdXJlOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVmYXVsdFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfQnV0dG9uQmFzZS5kZWZhdWx0O1xuICB9XG59KTtcblxudmFyIF9CdXR0b25CYXNlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9CdXR0b25CYXNlXCIpKTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlZmF1bHRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX1BhcGVyLmRlZmF1bHQ7XG4gIH1cbn0pO1xuXG52YXIgX1BhcGVyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9QYXBlclwiKSk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBvd25lckRvY3VtZW50O1xuZnVuY3Rpb24gb3duZXJEb2N1bWVudChub2RlKSB7XG4gIHJldHVybiBub2RlICYmIG5vZGUub3duZXJEb2N1bWVudCB8fCBkb2N1bWVudDtcbn1cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5mdW5jdGlvbiBfaW50ZXJvcERlZmF1bHQgKGV4KSB7IHJldHVybiAoZXggJiYgKHR5cGVvZiBleCA9PT0gJ29iamVjdCcpICYmICdkZWZhdWx0JyBpbiBleCkgPyBleFsnZGVmYXVsdCddIDogZXg7IH1cblxudmFyIF9jbGFzc0NhbGxDaGVjayA9IF9pbnRlcm9wRGVmYXVsdChyZXF1aXJlKCdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vY2xhc3NDYWxsQ2hlY2snKSk7XG52YXIgX2NyZWF0ZUNsYXNzID0gX2ludGVyb3BEZWZhdWx0KHJlcXVpcmUoJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9jcmVhdGVDbGFzcycpKTtcbnZhciBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiA9IF9pbnRlcm9wRGVmYXVsdChyZXF1aXJlKCdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vcG9zc2libGVDb25zdHJ1Y3RvclJldHVybicpKTtcbnZhciBfaW5oZXJpdHMgPSBfaW50ZXJvcERlZmF1bHQocmVxdWlyZSgnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2luaGVyaXRzJykpO1xudmFyIF90eXBlb2YgPSBfaW50ZXJvcERlZmF1bHQocmVxdWlyZSgnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL3R5cGVvZicpKTtcbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgPSBfaW50ZXJvcERlZmF1bHQocmVxdWlyZSgnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzJykpO1xudmFyIF9vYmplY3RTcHJlYWQgPSBfaW50ZXJvcERlZmF1bHQocmVxdWlyZSgnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL29iamVjdFNwcmVhZCcpKTtcbnZhciBSZWFjdCA9IF9pbnRlcm9wRGVmYXVsdChyZXF1aXJlKCdyZWFjdCcpKTtcbnZhciBQcm9wVHlwZXMgPSBfaW50ZXJvcERlZmF1bHQocmVxdWlyZSgncHJvcC10eXBlcycpKTtcbnZhciB3YXJuaW5nID0gX2ludGVyb3BEZWZhdWx0KHJlcXVpcmUoJ3dhcm5pbmcnKSk7XG5cbmZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KG9iamVjdCwgcHJvcGVydHksIGF0dHIpIHtcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmplY3QsIHByb3BlcnR5LCBhdHRyKTtcbn0gLy8gUGFzc2l2ZSBvcHRpb25zXG4vLyBJbnNwaXJlZCBieSBodHRwczovL2dpdGh1Yi5jb20vTW9kZXJuaXpyL01vZGVybml6ci9ibG9iL21hc3Rlci9mZWF0dXJlLWRldGVjdHMvZG9tL3Bhc3NpdmVldmVudGxpc3RlbmVycy5qc1xuXG5cbnZhciBwYXNzaXZlT3B0aW9uID0gZnVuY3Rpb24gKCkge1xuICB2YXIgY2FjaGUgPSBudWxsO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGlmIChjYWNoZSAhPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGNhY2hlO1xuICAgIH1cblxuICAgIHZhciBzdXBwb3J0c1Bhc3NpdmVPcHRpb24gPSBmYWxzZTtcblxuICAgIHRyeSB7XG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigndGVzdCcsIG51bGwsIGRlZmluZVByb3BlcnR5KHt9LCAncGFzc2l2ZScsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgc3VwcG9ydHNQYXNzaXZlT3B0aW9uID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfSkpO1xuICAgIH0gY2F0Y2ggKGVycikgey8vXG4gICAgfVxuXG4gICAgY2FjaGUgPSBzdXBwb3J0c1Bhc3NpdmVPcHRpb247XG4gICAgcmV0dXJuIHN1cHBvcnRzUGFzc2l2ZU9wdGlvbjtcbiAgfSgpO1xufSgpO1xuXG52YXIgZGVmYXVsdEV2ZW50T3B0aW9ucyA9IHtcbiAgY2FwdHVyZTogZmFsc2UsXG4gIHBhc3NpdmU6IGZhbHNlXG59O1xuXG5mdW5jdGlvbiBtZXJnZURlZmF1bHRFdmVudE9wdGlvbnMob3B0aW9ucykge1xuICByZXR1cm4gX29iamVjdFNwcmVhZCh7fSwgZGVmYXVsdEV2ZW50T3B0aW9ucywgb3B0aW9ucyk7XG59XG5cbmZ1bmN0aW9uIGdldEV2ZW50TGlzdGVuZXJBcmdzKGV2ZW50TmFtZSwgY2FsbGJhY2ssIG9wdGlvbnMpIHtcbiAgdmFyIGFyZ3MgPSBbZXZlbnROYW1lLCBjYWxsYmFja107XG4gIGFyZ3MucHVzaChwYXNzaXZlT3B0aW9uID8gb3B0aW9ucyA6IG9wdGlvbnMuY2FwdHVyZSk7XG4gIHJldHVybiBhcmdzO1xufVxuXG5mdW5jdGlvbiBvbih0YXJnZXQsIGV2ZW50TmFtZSwgY2FsbGJhY2ssIG9wdGlvbnMpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1zcHJlYWRcbiAgdGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIuYXBwbHkodGFyZ2V0LCBnZXRFdmVudExpc3RlbmVyQXJncyhldmVudE5hbWUsIGNhbGxiYWNrLCBvcHRpb25zKSk7XG59XG5cbmZ1bmN0aW9uIG9mZih0YXJnZXQsIGV2ZW50TmFtZSwgY2FsbGJhY2ssIG9wdGlvbnMpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1zcHJlYWRcbiAgdGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIuYXBwbHkodGFyZ2V0LCBnZXRFdmVudExpc3RlbmVyQXJncyhldmVudE5hbWUsIGNhbGxiYWNrLCBvcHRpb25zKSk7XG59XG5cbmZ1bmN0aW9uIGZvckVhY2hMaXN0ZW5lcihwcm9wcywgaXRlcmF0ZWUpIHtcbiAgdmFyIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICB0YXJnZXQgPSBwcm9wcy50YXJnZXQsXG4gICAgICBldmVudFByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJjaGlsZHJlblwiLCBcInRhcmdldFwiXSk7XG5cbiAgT2JqZWN0LmtleXMoZXZlbnRQcm9wcykuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICAgIGlmIChuYW1lLnN1YnN0cmluZygwLCAyKSAhPT0gJ29uJykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBwcm9wID0gZXZlbnRQcm9wc1tuYW1lXTtcblxuICAgIHZhciB0eXBlID0gX3R5cGVvZihwcm9wKTtcblxuICAgIHZhciBpc09iamVjdCA9IHR5cGUgPT09ICdvYmplY3QnO1xuICAgIHZhciBpc0Z1bmN0aW9uID0gdHlwZSA9PT0gJ2Z1bmN0aW9uJztcblxuICAgIGlmICghaXNPYmplY3QgJiYgIWlzRnVuY3Rpb24pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgY2FwdHVyZSA9IG5hbWUuc3Vic3RyKC03KS50b0xvd2VyQ2FzZSgpID09PSAnY2FwdHVyZSc7XG4gICAgdmFyIGV2ZW50TmFtZSA9IG5hbWUuc3Vic3RyaW5nKDIpLnRvTG93ZXJDYXNlKCk7XG4gICAgZXZlbnROYW1lID0gY2FwdHVyZSA/IGV2ZW50TmFtZS5zdWJzdHJpbmcoMCwgZXZlbnROYW1lLmxlbmd0aCAtIDcpIDogZXZlbnROYW1lO1xuXG4gICAgaWYgKGlzT2JqZWN0KSB7XG4gICAgICBpdGVyYXRlZShldmVudE5hbWUsIHByb3AuaGFuZGxlciwgcHJvcC5vcHRpb25zKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaXRlcmF0ZWUoZXZlbnROYW1lLCBwcm9wLCBtZXJnZURlZmF1bHRFdmVudE9wdGlvbnMoe1xuICAgICAgICBjYXB0dXJlOiBjYXB0dXJlXG4gICAgICB9KSk7XG4gICAgfVxuICB9KTtcbn1cblxuZnVuY3Rpb24gd2l0aE9wdGlvbnMoaGFuZGxlciwgb3B0aW9ucykge1xuICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKG9wdGlvbnMsICdyZWFjdC1ldmVudC1saXN0ZW5lcjogc2hvdWxkIGJlIHNwZWNpZmllZCBvcHRpb25zIGluIHdpdGhPcHRpb25zLicpIDogdm9pZCAwO1xuICByZXR1cm4ge1xuICAgIGhhbmRsZXI6IGhhbmRsZXIsXG4gICAgb3B0aW9uczogbWVyZ2VEZWZhdWx0RXZlbnRPcHRpb25zKG9wdGlvbnMpXG4gIH07XG59XG5cbnZhciBFdmVudExpc3RlbmVyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkUHVyZUNvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoRXZlbnRMaXN0ZW5lciwgX1JlYWN0JFB1cmVDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIEV2ZW50TGlzdGVuZXIoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEV2ZW50TGlzdGVuZXIpO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChFdmVudExpc3RlbmVyLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoRXZlbnRMaXN0ZW5lcikpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKEV2ZW50TGlzdGVuZXIsIFt7XG4gICAga2V5OiBcImNvbXBvbmVudERpZE1vdW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgdGhpcy5hcHBseUxpc3RlbmVycyhvbik7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImNvbXBvbmVudERpZFVwZGF0ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzKSB7XG4gICAgICB0aGlzLmFwcGx5TGlzdGVuZXJzKG9mZiwgcHJldlByb3BzKTtcbiAgICAgIHRoaXMuYXBwbHlMaXN0ZW5lcnMob24pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJjb21wb25lbnRXaWxsVW5tb3VudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgIHRoaXMuYXBwbHlMaXN0ZW5lcnMob2ZmKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiYXBwbHlMaXN0ZW5lcnNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gYXBwbHlMaXN0ZW5lcnMob25Pck9mZikge1xuICAgICAgdmFyIHByb3BzID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB0aGlzLnByb3BzO1xuICAgICAgdmFyIHRhcmdldCA9IHByb3BzLnRhcmdldDtcblxuICAgICAgaWYgKHRhcmdldCkge1xuICAgICAgICB2YXIgZWxlbWVudCA9IHRhcmdldDtcblxuICAgICAgICBpZiAodHlwZW9mIHRhcmdldCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICBlbGVtZW50ID0gd2luZG93W3RhcmdldF07XG4gICAgICAgIH1cblxuICAgICAgICBmb3JFYWNoTGlzdGVuZXIocHJvcHMsIG9uT3JPZmYuYmluZChudWxsLCBlbGVtZW50KSk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICByZXR1cm4gdGhpcy5wcm9wcy5jaGlsZHJlbiB8fCBudWxsO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBFdmVudExpc3RlbmVyO1xufShSZWFjdC5QdXJlQ29tcG9uZW50KTtcblxuRXZlbnRMaXN0ZW5lci5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIC8qKlxuICAgKiBZb3UgY2FuIHByb3ZpZGUgYSBzaW5nbGUgY2hpbGQgdG9vLlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBUaGUgRE9NIHRhcmdldCB0byBsaXN0ZW4gdG8uXG4gICAqL1xuICB0YXJnZXQ6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5zdHJpbmddKS5pc1JlcXVpcmVkXG59IDoge307XG5cbmV4cG9ydHMud2l0aE9wdGlvbnMgPSB3aXRoT3B0aW9ucztcbmV4cG9ydHMuZGVmYXVsdCA9IEV2ZW50TGlzdGVuZXI7XG4iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlZmF1bHRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX0J1dHRvbi5kZWZhdWx0O1xuICB9XG59KTtcblxudmFyIF9CdXR0b24gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0J1dHRvblwiKSk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLmlzTnVtYmVyID0gZXhwb3J0cy5pc1N0cmluZyA9IGV4cG9ydHMuZm9ybWF0TXMgPSBleHBvcnRzLmR1cmF0aW9uID0gZXhwb3J0cy5lYXNpbmcgPSB2b2lkIDA7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCIpKTtcblxudmFyIF93YXJuaW5nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwid2FybmluZ1wiKSk7XG5cbi8qIGVzbGludC1kaXNhYmxlIG5vLXBhcmFtLXJlYXNzaWduICovXG5cbi8qIGVzbGludC1kaXNhYmxlIG5vLXJlc3RyaWN0ZWQtZ2xvYmFscyAqL1xuLy8gRm9sbG93IGh0dHBzOi8vbWF0ZXJpYWwuZ29vZ2xlLmNvbS9tb3Rpb24vZHVyYXRpb24tZWFzaW5nLmh0bWwjZHVyYXRpb24tZWFzaW5nLW5hdHVyYWwtZWFzaW5nLWN1cnZlc1xuLy8gdG8gbGVhcm4gdGhlIGNvbnRleHQgaW4gd2hpY2ggZWFjaCBlYXNpbmcgc2hvdWxkIGJlIHVzZWQuXG52YXIgZWFzaW5nID0ge1xuICAvLyBUaGlzIGlzIHRoZSBtb3N0IGNvbW1vbiBlYXNpbmcgY3VydmUuXG4gIGVhc2VJbk91dDogJ2N1YmljLWJlemllcigwLjQsIDAsIDAuMiwgMSknLFxuICAvLyBPYmplY3RzIGVudGVyIHRoZSBzY3JlZW4gYXQgZnVsbCB2ZWxvY2l0eSBmcm9tIG9mZi1zY3JlZW4gYW5kXG4gIC8vIHNsb3dseSBkZWNlbGVyYXRlIHRvIGEgcmVzdGluZyBwb2ludC5cbiAgZWFzZU91dDogJ2N1YmljLWJlemllcigwLjAsIDAsIDAuMiwgMSknLFxuICAvLyBPYmplY3RzIGxlYXZlIHRoZSBzY3JlZW4gYXQgZnVsbCB2ZWxvY2l0eS4gVGhleSBkbyBub3QgZGVjZWxlcmF0ZSB3aGVuIG9mZi1zY3JlZW4uXG4gIGVhc2VJbjogJ2N1YmljLWJlemllcigwLjQsIDAsIDEsIDEpJyxcbiAgLy8gVGhlIHNoYXJwIGN1cnZlIGlzIHVzZWQgYnkgb2JqZWN0cyB0aGF0IG1heSByZXR1cm4gdG8gdGhlIHNjcmVlbiBhdCBhbnkgdGltZS5cbiAgc2hhcnA6ICdjdWJpYy1iZXppZXIoMC40LCAwLCAwLjYsIDEpJ1xufTsgLy8gRm9sbG93IGh0dHBzOi8vbWF0ZXJpYWwuaW8vZ3VpZGVsaW5lcy9tb3Rpb24vZHVyYXRpb24tZWFzaW5nLmh0bWwjZHVyYXRpb24tZWFzaW5nLWNvbW1vbi1kdXJhdGlvbnNcbi8vIHRvIGxlYXJuIHdoZW4gdXNlIHdoYXQgdGltaW5nXG5cbmV4cG9ydHMuZWFzaW5nID0gZWFzaW5nO1xudmFyIGR1cmF0aW9uID0ge1xuICBzaG9ydGVzdDogMTUwLFxuICBzaG9ydGVyOiAyMDAsXG4gIHNob3J0OiAyNTAsXG4gIC8vIG1vc3QgYmFzaWMgcmVjb21tZW5kZWQgdGltaW5nXG4gIHN0YW5kYXJkOiAzMDAsXG4gIC8vIHRoaXMgaXMgdG8gYmUgdXNlZCBpbiBjb21wbGV4IGFuaW1hdGlvbnNcbiAgY29tcGxleDogMzc1LFxuICAvLyByZWNvbW1lbmRlZCB3aGVuIHNvbWV0aGluZyBpcyBlbnRlcmluZyBzY3JlZW5cbiAgZW50ZXJpbmdTY3JlZW46IDIyNSxcbiAgLy8gcmVjb21tZW5kZWQgd2hlbiBzb21ldGhpbmcgaXMgbGVhdmluZyBzY3JlZW5cbiAgbGVhdmluZ1NjcmVlbjogMTk1XG59O1xuZXhwb3J0cy5kdXJhdGlvbiA9IGR1cmF0aW9uO1xuXG52YXIgZm9ybWF0TXMgPSBmdW5jdGlvbiBmb3JtYXRNcyhtaWxsaXNlY29uZHMpIHtcbiAgcmV0dXJuIFwiXCIuY29uY2F0KE1hdGgucm91bmQobWlsbGlzZWNvbmRzKSwgXCJtc1wiKTtcbn07XG5cbmV4cG9ydHMuZm9ybWF0TXMgPSBmb3JtYXRNcztcblxudmFyIGlzU3RyaW5nID0gZnVuY3Rpb24gaXNTdHJpbmcodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZyc7XG59O1xuXG5leHBvcnRzLmlzU3RyaW5nID0gaXNTdHJpbmc7XG5cbnZhciBpc051bWJlciA9IGZ1bmN0aW9uIGlzTnVtYmVyKHZhbHVlKSB7XG4gIHJldHVybiAhaXNOYU4ocGFyc2VGbG9hdCh2YWx1ZSkpO1xufTtcbi8qKlxuICogQHBhcmFtIHtzdHJpbmd8QXJyYXl9IHByb3BzXG4gKiBAcGFyYW0ge29iamVjdH0gcGFyYW1cbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXJhbS5wcm9wXG4gKiBAcGFyYW0ge251bWJlcn0gcGFyYW0uZHVyYXRpb25cbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXJhbS5lYXNpbmdcbiAqIEBwYXJhbSB7bnVtYmVyfSBwYXJhbS5kZWxheVxuICovXG5cblxuZXhwb3J0cy5pc051bWJlciA9IGlzTnVtYmVyO1xudmFyIF9kZWZhdWx0ID0ge1xuICBlYXNpbmc6IGVhc2luZyxcbiAgZHVyYXRpb246IGR1cmF0aW9uLFxuICBjcmVhdGU6IGZ1bmN0aW9uIGNyZWF0ZSgpIHtcbiAgICB2YXIgcHJvcHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IFsnYWxsJ107XG4gICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgX29wdGlvbnMkZHVyYXRpb24gPSBvcHRpb25zLmR1cmF0aW9uLFxuICAgICAgICAgIGR1cmF0aW9uT3B0aW9uID0gX29wdGlvbnMkZHVyYXRpb24gPT09IHZvaWQgMCA/IGR1cmF0aW9uLnN0YW5kYXJkIDogX29wdGlvbnMkZHVyYXRpb24sXG4gICAgICAgICAgX29wdGlvbnMkZWFzaW5nID0gb3B0aW9ucy5lYXNpbmcsXG4gICAgICAgICAgZWFzaW5nT3B0aW9uID0gX29wdGlvbnMkZWFzaW5nID09PSB2b2lkIDAgPyBlYXNpbmcuZWFzZUluT3V0IDogX29wdGlvbnMkZWFzaW5nLFxuICAgICAgICAgIF9vcHRpb25zJGRlbGF5ID0gb3B0aW9ucy5kZWxheSxcbiAgICAgICAgICBkZWxheSA9IF9vcHRpb25zJGRlbGF5ID09PSB2b2lkIDAgPyAwIDogX29wdGlvbnMkZGVsYXksXG4gICAgICAgICAgb3RoZXIgPSAoMCwgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMi5kZWZhdWx0KShvcHRpb25zLCBbXCJkdXJhdGlvblwiLCBcImVhc2luZ1wiLCBcImRlbGF5XCJdKTtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/ICgwLCBfd2FybmluZy5kZWZhdWx0KShpc1N0cmluZyhwcm9wcykgfHwgQXJyYXkuaXNBcnJheShwcm9wcyksICdNYXRlcmlhbC1VSTogYXJndW1lbnQgXCJwcm9wc1wiIG11c3QgYmUgYSBzdHJpbmcgb3IgQXJyYXkuJykgOiB2b2lkIDA7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyAoMCwgX3dhcm5pbmcuZGVmYXVsdCkoaXNOdW1iZXIoZHVyYXRpb25PcHRpb24pIHx8IGlzU3RyaW5nKGR1cmF0aW9uT3B0aW9uKSwgXCJNYXRlcmlhbC1VSTogYXJndW1lbnQgXFxcImR1cmF0aW9uXFxcIiBtdXN0IGJlIGEgbnVtYmVyIG9yIGEgc3RyaW5nIGJ1dCBmb3VuZCBcIi5jb25jYXQoZHVyYXRpb25PcHRpb24sIFwiLlwiKSkgOiB2b2lkIDA7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyAoMCwgX3dhcm5pbmcuZGVmYXVsdCkoaXNTdHJpbmcoZWFzaW5nT3B0aW9uKSwgJ01hdGVyaWFsLVVJOiBhcmd1bWVudCBcImVhc2luZ1wiIG11c3QgYmUgYSBzdHJpbmcuJykgOiB2b2lkIDA7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyAoMCwgX3dhcm5pbmcuZGVmYXVsdCkoaXNOdW1iZXIoZGVsYXkpIHx8IGlzU3RyaW5nKGRlbGF5KSwgJ01hdGVyaWFsLVVJOiBhcmd1bWVudCBcImRlbGF5XCIgbXVzdCBiZSBhIG51bWJlciBvciBhIHN0cmluZy4nKSA6IHZvaWQgMDtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/ICgwLCBfd2FybmluZy5kZWZhdWx0KShPYmplY3Qua2V5cyhvdGhlcikubGVuZ3RoID09PSAwLCBcIk1hdGVyaWFsLVVJOiB1bnJlY29nbml6ZWQgYXJndW1lbnQocykgW1wiLmNvbmNhdChPYmplY3Qua2V5cyhvdGhlcikuam9pbignLCcpLCBcIl1cIikpIDogdm9pZCAwO1xuICAgICAgcmV0dXJuIChBcnJheS5pc0FycmF5KHByb3BzKSA/IHByb3BzIDogW3Byb3BzXSkubWFwKGZ1bmN0aW9uIChhbmltYXRlZFByb3ApIHtcbiAgICAgICAgcmV0dXJuIFwiXCIuY29uY2F0KGFuaW1hdGVkUHJvcCwgXCIgXCIpLmNvbmNhdCh0eXBlb2YgZHVyYXRpb25PcHRpb24gPT09ICdzdHJpbmcnID8gZHVyYXRpb25PcHRpb24gOiBmb3JtYXRNcyhkdXJhdGlvbk9wdGlvbiksIFwiIFwiKS5jb25jYXQoZWFzaW5nT3B0aW9uLCBcIiBcIikuY29uY2F0KHR5cGVvZiBkZWxheSA9PT0gJ3N0cmluZycgPyBkZWxheSA6IGZvcm1hdE1zKGRlbGF5KSk7XG4gICAgICB9KS5qb2luKCcsJyk7XG4gICAgfSgpO1xuICB9LFxuICBnZXRBdXRvSGVpZ2h0RHVyYXRpb246IGZ1bmN0aW9uIGdldEF1dG9IZWlnaHREdXJhdGlvbihoZWlnaHQpIHtcbiAgICBpZiAoIWhlaWdodCkge1xuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuXG4gICAgdmFyIGNvbnN0YW50ID0gaGVpZ2h0IC8gMzY7IC8vIGh0dHBzOi8vd3d3LndvbGZyYW1hbHBoYS5jb20vaW5wdXQvP2k9KDQrJTJCKzE1KyorKHgrJTJGKzM2KykrKiorMC4yNSslMkIrKHgrJTJGKzM2KSslMkYrNSkrKisxMFxuXG4gICAgcmV0dXJuIE1hdGgucm91bmQoKDQgKyAxNSAqIE1hdGgucG93KGNvbnN0YW50LCAwLjI1KSArIGNvbnN0YW50IC8gNSkgKiAxMCk7XG4gIH1cbn07XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCIvLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvODYjaXNzdWVjb21tZW50LTExNTc1OTAyOFxudmFyIGdsb2JhbCA9IG1vZHVsZS5leHBvcnRzID0gdHlwZW9mIHdpbmRvdyAhPSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuTWF0aCA9PSBNYXRoXG4gID8gd2luZG93IDogdHlwZW9mIHNlbGYgIT0gJ3VuZGVmaW5lZCcgJiYgc2VsZi5NYXRoID09IE1hdGggPyBzZWxmXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuY1xuICA6IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5pZiAodHlwZW9mIF9fZyA9PSAnbnVtYmVyJykgX19nID0gZ2xvYmFsOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmXG4iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9wdXJlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVjb21wb3NlL3B1cmVcIikpO1xuXG52YXIgX1N2Z0ljb24gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAbWF0ZXJpYWwtdWkvY29yZS9TdmdJY29uXCIpKTtcblxuZnVuY3Rpb24gY3JlYXRlU3ZnSWNvbihwYXRoLCBkaXNwbGF5TmFtZSkge1xuICB2YXIgSWNvbiA9IGZ1bmN0aW9uIEljb24ocHJvcHMpIHtcbiAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfU3ZnSWNvbi5kZWZhdWx0LCBwcm9wcywgcGF0aCk7XG4gIH07XG5cbiAgSWNvbi5kaXNwbGF5TmFtZSA9IGRpc3BsYXlOYW1lO1xuICBJY29uID0gKDAsIF9wdXJlLmRlZmF1bHQpKEljb24pO1xuICBJY29uLm11aU5hbWUgPSAnU3ZnSWNvbic7XG4gIHJldHVybiBJY29uO1xufVxuXG47XG52YXIgX2RlZmF1bHQgPSBjcmVhdGVTdmdJY29uO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJkZWZhdWx0XCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9JY29uQnV0dG9uLmRlZmF1bHQ7XG4gIH1cbn0pO1xuXG52YXIgX0ljb25CdXR0b24gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0ljb25CdXR0b25cIikpOyIsIi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uLCB0aGF0LCBhcyBsb25nIGFzIGl0IGNvbnRpbnVlcyB0byBiZSBpbnZva2VkLCB3aWxsIG5vdFxuICogYmUgdHJpZ2dlcmVkLiBUaGUgZnVuY3Rpb24gd2lsbCBiZSBjYWxsZWQgYWZ0ZXIgaXQgc3RvcHMgYmVpbmcgY2FsbGVkIGZvclxuICogTiBtaWxsaXNlY29uZHMuIElmIGBpbW1lZGlhdGVgIGlzIHBhc3NlZCwgdHJpZ2dlciB0aGUgZnVuY3Rpb24gb24gdGhlXG4gKiBsZWFkaW5nIGVkZ2UsIGluc3RlYWQgb2YgdGhlIHRyYWlsaW5nLiBUaGUgZnVuY3Rpb24gYWxzbyBoYXMgYSBwcm9wZXJ0eSAnY2xlYXInIFxuICogdGhhdCBpcyBhIGZ1bmN0aW9uIHdoaWNoIHdpbGwgY2xlYXIgdGhlIHRpbWVyIHRvIHByZXZlbnQgcHJldmlvdXNseSBzY2hlZHVsZWQgZXhlY3V0aW9ucy4gXG4gKlxuICogQHNvdXJjZSB1bmRlcnNjb3JlLmpzXG4gKiBAc2VlIGh0dHA6Ly91bnNjcmlwdGFibGUuY29tLzIwMDkvMDMvMjAvZGVib3VuY2luZy1qYXZhc2NyaXB0LW1ldGhvZHMvXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jdGlvbiB0byB3cmFwXG4gKiBAcGFyYW0ge051bWJlcn0gdGltZW91dCBpbiBtcyAoYDEwMGApXG4gKiBAcGFyYW0ge0Jvb2xlYW59IHdoZXRoZXIgdG8gZXhlY3V0ZSBhdCB0aGUgYmVnaW5uaW5nIChgZmFsc2VgKVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGRlYm91bmNlKGZ1bmMsIHdhaXQsIGltbWVkaWF0ZSl7XG4gIHZhciB0aW1lb3V0LCBhcmdzLCBjb250ZXh0LCB0aW1lc3RhbXAsIHJlc3VsdDtcbiAgaWYgKG51bGwgPT0gd2FpdCkgd2FpdCA9IDEwMDtcblxuICBmdW5jdGlvbiBsYXRlcigpIHtcbiAgICB2YXIgbGFzdCA9IERhdGUubm93KCkgLSB0aW1lc3RhbXA7XG5cbiAgICBpZiAobGFzdCA8IHdhaXQgJiYgbGFzdCA+PSAwKSB7XG4gICAgICB0aW1lb3V0ID0gc2V0VGltZW91dChsYXRlciwgd2FpdCAtIGxhc3QpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aW1lb3V0ID0gbnVsbDtcbiAgICAgIGlmICghaW1tZWRpYXRlKSB7XG4gICAgICAgIHJlc3VsdCA9IGZ1bmMuYXBwbHkoY29udGV4dCwgYXJncyk7XG4gICAgICAgIGNvbnRleHQgPSBhcmdzID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgdmFyIGRlYm91bmNlZCA9IGZ1bmN0aW9uKCl7XG4gICAgY29udGV4dCA9IHRoaXM7XG4gICAgYXJncyA9IGFyZ3VtZW50cztcbiAgICB0aW1lc3RhbXAgPSBEYXRlLm5vdygpO1xuICAgIHZhciBjYWxsTm93ID0gaW1tZWRpYXRlICYmICF0aW1lb3V0O1xuICAgIGlmICghdGltZW91dCkgdGltZW91dCA9IHNldFRpbWVvdXQobGF0ZXIsIHdhaXQpO1xuICAgIGlmIChjYWxsTm93KSB7XG4gICAgICByZXN1bHQgPSBmdW5jLmFwcGx5KGNvbnRleHQsIGFyZ3MpO1xuICAgICAgY29udGV4dCA9IGFyZ3MgPSBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgZGVib3VuY2VkLmNsZWFyID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRpbWVvdXQpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgICAgIHRpbWVvdXQgPSBudWxsO1xuICAgIH1cbiAgfTtcbiAgXG4gIGRlYm91bmNlZC5mbHVzaCA9IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aW1lb3V0KSB7XG4gICAgICByZXN1bHQgPSBmdW5jLmFwcGx5KGNvbnRleHQsIGFyZ3MpO1xuICAgICAgY29udGV4dCA9IGFyZ3MgPSBudWxsO1xuICAgICAgXG4gICAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gICAgICB0aW1lb3V0ID0gbnVsbDtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIGRlYm91bmNlZDtcbn07XG4iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbnZhciBfZXhwb3J0TmFtZXMgPSB7fTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlZmF1bHRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX3dpdGhXaWR0aC5kZWZhdWx0O1xuICB9XG59KTtcblxudmFyIF93aXRoV2lkdGggPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3dpdGhXaWR0aFwiKSk7XG5cbk9iamVjdC5rZXlzKF93aXRoV2lkdGgpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICBpZiAoa2V5ID09PSBcImRlZmF1bHRcIiB8fCBrZXkgPT09IFwiX19lc01vZHVsZVwiKSByZXR1cm47XG4gIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoX2V4cG9ydE5hbWVzLCBrZXkpKSByZXR1cm47XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIF93aXRoV2lkdGhba2V5XTtcbiAgICB9XG4gIH0pO1xufSk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfZXh0ZW5kczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vZXh0ZW5kc1wiKSk7XG5cbnZhciBfY2xhc3NDYWxsQ2hlY2syID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2NsYXNzQ2FsbENoZWNrXCIpKTtcblxudmFyIF9jcmVhdGVDbGFzczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vY3JlYXRlQ2xhc3NcIikpO1xuXG52YXIgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5cIikpO1xuXG52YXIgX2luaGVyaXRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9pbmhlcml0c1wiKSk7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfaG9pc3ROb25SZWFjdFN0YXRpY3MgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJob2lzdC1ub24tcmVhY3Qtc3RhdGljc1wiKSk7XG5cbnZhciBfd3JhcERpc3BsYXlOYW1lID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVjb21wb3NlL3dyYXBEaXNwbGF5TmFtZVwiKSk7XG5cbnZhciBfY3JlYXRlTXVpVGhlbWUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2NyZWF0ZU11aVRoZW1lXCIpKTtcblxudmFyIF90aGVtZUxpc3RlbmVyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi90aGVtZUxpc3RlbmVyXCIpKTtcblxudmFyIGRlZmF1bHRUaGVtZTtcblxuZnVuY3Rpb24gZ2V0RGVmYXVsdFRoZW1lKCkge1xuICBpZiAoZGVmYXVsdFRoZW1lKSB7XG4gICAgcmV0dXJuIGRlZmF1bHRUaGVtZTtcbiAgfVxuXG4gIGRlZmF1bHRUaGVtZSA9ICgwLCBfY3JlYXRlTXVpVGhlbWUuZGVmYXVsdCkoKTtcbiAgcmV0dXJuIGRlZmF1bHRUaGVtZTtcbn0gLy8gUHJvdmlkZSB0aGUgdGhlbWUgb2JqZWN0IGFzIGEgcHJvcGVydHkgdG8gdGhlIGlucHV0IGNvbXBvbmVudC5cblxuXG52YXIgd2l0aFRoZW1lID0gZnVuY3Rpb24gd2l0aFRoZW1lKCkge1xuICByZXR1cm4gZnVuY3Rpb24gKENvbXBvbmVudCkge1xuICAgIHZhciBXaXRoVGhlbWUgPVxuICAgIC8qI19fUFVSRV9fKi9cbiAgICBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICAgICAgKDAsIF9pbmhlcml0czIuZGVmYXVsdCkoV2l0aFRoZW1lLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICAgICAgZnVuY3Rpb24gV2l0aFRoZW1lKHByb3BzLCBjb250ZXh0KSB7XG4gICAgICAgIHZhciBfdGhpcztcblxuICAgICAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMi5kZWZhdWx0KSh0aGlzLCBXaXRoVGhlbWUpO1xuICAgICAgICBfdGhpcyA9ICgwLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIuZGVmYXVsdCkodGhpcywgKFdpdGhUaGVtZS5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKFdpdGhUaGVtZSkpLmNhbGwodGhpcywgcHJvcHMsIGNvbnRleHQpKTtcbiAgICAgICAgX3RoaXMuc3RhdGUgPSB7fTtcbiAgICAgICAgX3RoaXMudW5zdWJzY3JpYmVJZCA9IG51bGw7XG4gICAgICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgICAgIC8vIFdlIHVzZSB8fCBhcyB0aGUgZnVuY3Rpb24gY2FsbCBpcyBsYXp5IGV2YWx1YXRlZC5cbiAgICAgICAgICB0aGVtZTogX3RoZW1lTGlzdGVuZXIuZGVmYXVsdC5pbml0aWFsKGNvbnRleHQpIHx8IGdldERlZmF1bHRUaGVtZSgpXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICAgIH1cblxuICAgICAgKDAsIF9jcmVhdGVDbGFzczIuZGVmYXVsdCkoV2l0aFRoZW1lLCBbe1xuICAgICAgICBrZXk6IFwiY29tcG9uZW50RGlkTW91bnRcIixcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICAgICAgdGhpcy51bnN1YnNjcmliZUlkID0gX3RoZW1lTGlzdGVuZXIuZGVmYXVsdC5zdWJzY3JpYmUodGhpcy5jb250ZXh0LCBmdW5jdGlvbiAodGhlbWUpIHtcbiAgICAgICAgICAgIF90aGlzMi5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgIHRoZW1lOiB0aGVtZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0sIHtcbiAgICAgICAga2V5OiBcImNvbXBvbmVudFdpbGxVbm1vdW50XCIsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgICAgICBpZiAodGhpcy51bnN1YnNjcmliZUlkICE9PSBudWxsKSB7XG4gICAgICAgICAgICBfdGhlbWVMaXN0ZW5lci5kZWZhdWx0LnVuc3Vic2NyaWJlKHRoaXMuY29udGV4dCwgdGhpcy51bnN1YnNjcmliZUlkKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sIHtcbiAgICAgICAga2V5OiBcInJlbmRlclwiLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7XG4gICAgICAgICAgICB0aGVtZTogdGhpcy5zdGF0ZS50aGVtZVxuICAgICAgICAgIH0sIHRoaXMucHJvcHMpKTtcbiAgICAgICAgfVxuICAgICAgfV0pO1xuICAgICAgcmV0dXJuIFdpdGhUaGVtZTtcbiAgICB9KF9yZWFjdC5kZWZhdWx0LkNvbXBvbmVudCk7XG5cbiAgICBXaXRoVGhlbWUuY29udGV4dFR5cGVzID0gX3RoZW1lTGlzdGVuZXIuZGVmYXVsdC5jb250ZXh0VHlwZXM7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgV2l0aFRoZW1lLmRpc3BsYXlOYW1lID0gKDAsIF93cmFwRGlzcGxheU5hbWUuZGVmYXVsdCkoQ29tcG9uZW50LCAnV2l0aFRoZW1lJyk7XG4gICAgfVxuXG4gICAgKDAsIF9ob2lzdE5vblJlYWN0U3RhdGljcy5kZWZhdWx0KShXaXRoVGhlbWUsIENvbXBvbmVudCk7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgLy8gRXhwb3NlZCBmb3IgdGVzdCBwdXJwb3Nlcy5cbiAgICAgIFdpdGhUaGVtZS5OYWtlZCA9IENvbXBvbmVudDtcbiAgICB9XG5cbiAgICByZXR1cm4gV2l0aFRoZW1lO1xuICB9O1xufTtcblxudmFyIF9kZWZhdWx0ID0gd2l0aFRoZW1lO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmNvbnZlcnRIZXhUb1JHQiA9IGNvbnZlcnRIZXhUb1JHQjtcbmV4cG9ydHMuZGVjb21wb3NlQ29sb3IgPSBkZWNvbXBvc2VDb2xvcjtcbmV4cG9ydHMucmVjb21wb3NlQ29sb3IgPSByZWNvbXBvc2VDb2xvcjtcbmV4cG9ydHMuZ2V0Q29udHJhc3RSYXRpbyA9IGdldENvbnRyYXN0UmF0aW87XG5leHBvcnRzLmdldEx1bWluYW5jZSA9IGdldEx1bWluYW5jZTtcbmV4cG9ydHMuZW1waGFzaXplID0gZW1waGFzaXplO1xuZXhwb3J0cy5mYWRlID0gZmFkZTtcbmV4cG9ydHMuZGFya2VuID0gZGFya2VuO1xuZXhwb3J0cy5saWdodGVuID0gbGlnaHRlbjtcblxudmFyIF93YXJuaW5nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwid2FybmluZ1wiKSk7XG5cbi8vICB3ZWFrXG5cbi8qIGVzbGludC1kaXNhYmxlIG5vLXVzZS1iZWZvcmUtZGVmaW5lICovXG5cbi8qKlxuICogUmV0dXJucyBhIG51bWJlciB3aG9zZSB2YWx1ZSBpcyBsaW1pdGVkIHRvIHRoZSBnaXZlbiByYW5nZS5cbiAqXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgVGhlIHZhbHVlIHRvIGJlIGNsYW1wZWRcbiAqIEBwYXJhbSB7bnVtYmVyfSBtaW4gVGhlIGxvd2VyIGJvdW5kYXJ5IG9mIHRoZSBvdXRwdXQgcmFuZ2VcbiAqIEBwYXJhbSB7bnVtYmVyfSBtYXggVGhlIHVwcGVyIGJvdW5kYXJ5IG9mIHRoZSBvdXRwdXQgcmFuZ2VcbiAqIEByZXR1cm5zIHtudW1iZXJ9IEEgbnVtYmVyIGluIHRoZSByYW5nZSBbbWluLCBtYXhdXG4gKi9cbmZ1bmN0aW9uIGNsYW1wKHZhbHVlKSB7XG4gIHZhciBtaW4gPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IDA7XG4gIHZhciBtYXggPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IDE7XG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/ICgwLCBfd2FybmluZy5kZWZhdWx0KSh2YWx1ZSA+PSBtaW4gJiYgdmFsdWUgPD0gbWF4LCBcIk1hdGVyaWFsLVVJOiB0aGUgdmFsdWUgcHJvdmlkZWQgXCIuY29uY2F0KHZhbHVlLCBcIiBpcyBvdXQgb2YgcmFuZ2UgW1wiKS5jb25jYXQobWluLCBcIiwgXCIpLmNvbmNhdChtYXgsIFwiXS5cIikpIDogdm9pZCAwO1xuXG4gIGlmICh2YWx1ZSA8IG1pbikge1xuICAgIHJldHVybiBtaW47XG4gIH1cblxuICBpZiAodmFsdWUgPiBtYXgpIHtcbiAgICByZXR1cm4gbWF4O1xuICB9XG5cbiAgcmV0dXJuIHZhbHVlO1xufVxuLyoqXG4gKiBDb252ZXJ0cyBhIGNvbG9yIGZyb20gQ1NTIGhleCBmb3JtYXQgdG8gQ1NTIHJnYiBmb3JtYXQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yIC0gSGV4IGNvbG9yLCBpLmUuICNubm4gb3IgI25ubm5ublxuICogQHJldHVybnMge3N0cmluZ30gQSBDU1MgcmdiIGNvbG9yIHN0cmluZ1xuICovXG5cblxuZnVuY3Rpb24gY29udmVydEhleFRvUkdCKGNvbG9yKSB7XG4gIGNvbG9yID0gY29sb3Iuc3Vic3RyKDEpO1xuICB2YXIgcmUgPSBuZXcgUmVnRXhwKFwiLnsxLFwiLmNvbmNhdChjb2xvci5sZW5ndGggLyAzLCBcIn1cIiksICdnJyk7XG4gIHZhciBjb2xvcnMgPSBjb2xvci5tYXRjaChyZSk7XG5cbiAgaWYgKGNvbG9ycyAmJiBjb2xvcnNbMF0ubGVuZ3RoID09PSAxKSB7XG4gICAgY29sb3JzID0gY29sb3JzLm1hcChmdW5jdGlvbiAobikge1xuICAgICAgcmV0dXJuIG4gKyBuO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIGNvbG9ycyA/IFwicmdiKFwiLmNvbmNhdChjb2xvcnMubWFwKGZ1bmN0aW9uIChuKSB7XG4gICAgcmV0dXJuIHBhcnNlSW50KG4sIDE2KTtcbiAgfSkuam9pbignLCAnKSwgXCIpXCIpIDogJyc7XG59XG4vKipcbiAqIFJldHVybnMgYW4gb2JqZWN0IHdpdGggdGhlIHR5cGUgYW5kIHZhbHVlcyBvZiBhIGNvbG9yLlxuICpcbiAqIE5vdGU6IERvZXMgbm90IHN1cHBvcnQgcmdiICUgdmFsdWVzLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvciAtIENTUyBjb2xvciwgaS5lLiBvbmUgb2Y6ICNubm4sICNubm5ubm4sIHJnYigpLCByZ2JhKCksIGhzbCgpLCBoc2xhKClcbiAqIEByZXR1cm5zIHtvYmplY3R9IC0gQSBNVUkgY29sb3Igb2JqZWN0OiB7dHlwZTogc3RyaW5nLCB2YWx1ZXM6IG51bWJlcltdfVxuICovXG5cblxuZnVuY3Rpb24gZGVjb21wb3NlQ29sb3IoY29sb3IpIHtcbiAgaWYgKGNvbG9yLmNoYXJBdCgwKSA9PT0gJyMnKSB7XG4gICAgcmV0dXJuIGRlY29tcG9zZUNvbG9yKGNvbnZlcnRIZXhUb1JHQihjb2xvcikpO1xuICB9XG5cbiAgdmFyIG1hcmtlciA9IGNvbG9yLmluZGV4T2YoJygnKTtcbiAgdmFyIHR5cGUgPSBjb2xvci5zdWJzdHJpbmcoMCwgbWFya2VyKTtcbiAgdmFyIHZhbHVlcyA9IGNvbG9yLnN1YnN0cmluZyhtYXJrZXIgKyAxLCBjb2xvci5sZW5ndGggLSAxKS5zcGxpdCgnLCcpO1xuICB2YWx1ZXMgPSB2YWx1ZXMubWFwKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHJldHVybiBwYXJzZUZsb2F0KHZhbHVlKTtcbiAgfSk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAoWydyZ2InLCAncmdiYScsICdoc2wnLCAnaHNsYSddLmluZGV4T2YodHlwZSkgPT09IC0xKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoW1wiTWF0ZXJpYWwtVUk6IHVuc3VwcG9ydGVkIGBcIi5jb25jYXQoY29sb3IsIFwiYCBjb2xvci5cIiksICdXZSBzdXBwb3J0IHRoZSBmb2xsb3dpbmcgZm9ybWF0czogI25ubiwgI25ubm5ubiwgcmdiKCksIHJnYmEoKSwgaHNsKCksIGhzbGEoKS4nXS5qb2luKCdcXG4nKSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICB0eXBlOiB0eXBlLFxuICAgIHZhbHVlczogdmFsdWVzXG4gIH07XG59XG4vKipcbiAqIENvbnZlcnRzIGEgY29sb3Igb2JqZWN0IHdpdGggdHlwZSBhbmQgdmFsdWVzIHRvIGEgc3RyaW5nLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBjb2xvciAtIERlY29tcG9zZWQgY29sb3JcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvci50eXBlIC0gT25lIG9mOiAncmdiJywgJ3JnYmEnLCAnaHNsJywgJ2hzbGEnXG4gKiBAcGFyYW0ge2FycmF5fSBjb2xvci52YWx1ZXMgLSBbbixuLG5dIG9yIFtuLG4sbixuXVxuICogQHJldHVybnMge3N0cmluZ30gQSBDU1MgY29sb3Igc3RyaW5nXG4gKi9cblxuXG5mdW5jdGlvbiByZWNvbXBvc2VDb2xvcihjb2xvcikge1xuICB2YXIgdHlwZSA9IGNvbG9yLnR5cGU7XG4gIHZhciB2YWx1ZXMgPSBjb2xvci52YWx1ZXM7XG5cbiAgaWYgKHR5cGUuaW5kZXhPZigncmdiJykgIT09IC0xKSB7XG4gICAgLy8gT25seSBjb252ZXJ0IHRoZSBmaXJzdCAzIHZhbHVlcyB0byBpbnQgKGkuZS4gbm90IGFscGhhKVxuICAgIHZhbHVlcyA9IHZhbHVlcy5tYXAoZnVuY3Rpb24gKG4sIGkpIHtcbiAgICAgIHJldHVybiBpIDwgMyA/IHBhcnNlSW50KG4sIDEwKSA6IG47XG4gICAgfSk7XG4gIH1cblxuICBpZiAodHlwZS5pbmRleE9mKCdoc2wnKSAhPT0gLTEpIHtcbiAgICB2YWx1ZXNbMV0gPSBcIlwiLmNvbmNhdCh2YWx1ZXNbMV0sIFwiJVwiKTtcbiAgICB2YWx1ZXNbMl0gPSBcIlwiLmNvbmNhdCh2YWx1ZXNbMl0sIFwiJVwiKTtcbiAgfVxuXG4gIHJldHVybiBcIlwiLmNvbmNhdChjb2xvci50eXBlLCBcIihcIikuY29uY2F0KHZhbHVlcy5qb2luKCcsICcpLCBcIilcIik7XG59XG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIGNvbnRyYXN0IHJhdGlvIGJldHdlZW4gdHdvIGNvbG9ycy5cbiAqXG4gKiBGb3JtdWxhOiBodHRwczovL3d3dy53My5vcmcvVFIvV0NBRzIwLVRFQ0hTL0cxNy5odG1sI0cxNy10ZXN0c1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBmb3JlZ3JvdW5kIC0gQ1NTIGNvbG9yLCBpLmUuIG9uZSBvZjogI25ubiwgI25ubm5ubiwgcmdiKCksIHJnYmEoKSwgaHNsKCksIGhzbGEoKVxuICogQHBhcmFtIHtzdHJpbmd9IGJhY2tncm91bmQgLSBDU1MgY29sb3IsIGkuZS4gb25lIG9mOiAjbm5uLCAjbm5ubm5uLCByZ2IoKSwgcmdiYSgpLCBoc2woKSwgaHNsYSgpXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBBIGNvbnRyYXN0IHJhdGlvIHZhbHVlIGluIHRoZSByYW5nZSAwIC0gMjEuXG4gKi9cblxuXG5mdW5jdGlvbiBnZXRDb250cmFzdFJhdGlvKGZvcmVncm91bmQsIGJhY2tncm91bmQpIHtcbiAgdmFyIGx1bUEgPSBnZXRMdW1pbmFuY2UoZm9yZWdyb3VuZCk7XG4gIHZhciBsdW1CID0gZ2V0THVtaW5hbmNlKGJhY2tncm91bmQpO1xuICByZXR1cm4gKE1hdGgubWF4KGx1bUEsIGx1bUIpICsgMC4wNSkgLyAoTWF0aC5taW4obHVtQSwgbHVtQikgKyAwLjA1KTtcbn1cbi8qKlxuICogVGhlIHJlbGF0aXZlIGJyaWdodG5lc3Mgb2YgYW55IHBvaW50IGluIGEgY29sb3Igc3BhY2UsXG4gKiBub3JtYWxpemVkIHRvIDAgZm9yIGRhcmtlc3QgYmxhY2sgYW5kIDEgZm9yIGxpZ2h0ZXN0IHdoaXRlLlxuICpcbiAqIEZvcm11bGE6IGh0dHBzOi8vd3d3LnczLm9yZy9UUi9XQ0FHMjAtVEVDSFMvRzE3Lmh0bWwjRzE3LXRlc3RzXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yIC0gQ1NTIGNvbG9yLCBpLmUuIG9uZSBvZjogI25ubiwgI25ubm5ubiwgcmdiKCksIHJnYmEoKSwgaHNsKCksIGhzbGEoKVxuICogQHJldHVybnMge251bWJlcn0gVGhlIHJlbGF0aXZlIGJyaWdodG5lc3Mgb2YgdGhlIGNvbG9yIGluIHRoZSByYW5nZSAwIC0gMVxuICovXG5cblxuZnVuY3Rpb24gZ2V0THVtaW5hbmNlKGNvbG9yKSB7XG4gIHZhciBkZWNvbXBvc2VkQ29sb3IgPSBkZWNvbXBvc2VDb2xvcihjb2xvcik7XG5cbiAgaWYgKGRlY29tcG9zZWRDb2xvci50eXBlLmluZGV4T2YoJ3JnYicpICE9PSAtMSkge1xuICAgIHZhciByZ2IgPSBkZWNvbXBvc2VkQ29sb3IudmFsdWVzLm1hcChmdW5jdGlvbiAodmFsKSB7XG4gICAgICB2YWwgLz0gMjU1OyAvLyBub3JtYWxpemVkXG5cbiAgICAgIHJldHVybiB2YWwgPD0gMC4wMzkyOCA/IHZhbCAvIDEyLjkyIDogTWF0aC5wb3coKHZhbCArIDAuMDU1KSAvIDEuMDU1LCAyLjQpO1xuICAgIH0pOyAvLyBUcnVuY2F0ZSBhdCAzIGRpZ2l0c1xuXG4gICAgcmV0dXJuIE51bWJlcigoMC4yMTI2ICogcmdiWzBdICsgMC43MTUyICogcmdiWzFdICsgMC4wNzIyICogcmdiWzJdKS50b0ZpeGVkKDMpKTtcbiAgfSAvLyBlbHNlIGlmIChkZWNvbXBvc2VkQ29sb3IudHlwZS5pbmRleE9mKCdoc2wnKSAhPT0gLTEpXG5cblxuICByZXR1cm4gZGVjb21wb3NlZENvbG9yLnZhbHVlc1syXSAvIDEwMDtcbn1cbi8qKlxuICogRGFya2VuIG9yIGxpZ2h0ZW4gYSBjb2xvdXIsIGRlcGVuZGluZyBvbiBpdHMgbHVtaW5hbmNlLlxuICogTGlnaHQgY29sb3JzIGFyZSBkYXJrZW5lZCwgZGFyayBjb2xvcnMgYXJlIGxpZ2h0ZW5lZC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gY29sb3IgLSBDU1MgY29sb3IsIGkuZS4gb25lIG9mOiAjbm5uLCAjbm5ubm5uLCByZ2IoKSwgcmdiYSgpLCBoc2woKSwgaHNsYSgpXG4gKiBAcGFyYW0ge251bWJlcn0gY29lZmZpY2llbnQ9MC4xNSAtIG11bHRpcGxpZXIgaW4gdGhlIHJhbmdlIDAgLSAxXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBBIENTUyBjb2xvciBzdHJpbmcuIEhleCBpbnB1dCB2YWx1ZXMgYXJlIHJldHVybmVkIGFzIHJnYlxuICovXG5cblxuZnVuY3Rpb24gZW1waGFzaXplKGNvbG9yKSB7XG4gIHZhciBjb2VmZmljaWVudCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogMC4xNTtcbiAgcmV0dXJuIGdldEx1bWluYW5jZShjb2xvcikgPiAwLjUgPyBkYXJrZW4oY29sb3IsIGNvZWZmaWNpZW50KSA6IGxpZ2h0ZW4oY29sb3IsIGNvZWZmaWNpZW50KTtcbn1cbi8qKlxuICogU2V0IHRoZSBhYnNvbHV0ZSB0cmFuc3BhcmVuY3kgb2YgYSBjb2xvci5cbiAqIEFueSBleGlzdGluZyBhbHBoYSB2YWx1ZXMgYXJlIG92ZXJ3cml0dGVuLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvciAtIENTUyBjb2xvciwgaS5lLiBvbmUgb2Y6ICNubm4sICNubm5ubm4sIHJnYigpLCByZ2JhKCksIGhzbCgpLCBoc2xhKClcbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSAtIHZhbHVlIHRvIHNldCB0aGUgYWxwaGEgY2hhbm5lbCB0byBpbiB0aGUgcmFuZ2UgMCAtMVxuICogQHJldHVybnMge3N0cmluZ30gQSBDU1MgY29sb3Igc3RyaW5nLiBIZXggaW5wdXQgdmFsdWVzIGFyZSByZXR1cm5lZCBhcyByZ2JcbiAqL1xuXG5cbmZ1bmN0aW9uIGZhZGUoY29sb3IsIHZhbHVlKSB7XG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/ICgwLCBfd2FybmluZy5kZWZhdWx0KShjb2xvciwgXCJNYXRlcmlhbC1VSTogbWlzc2luZyBjb2xvciBhcmd1bWVudCBpbiBmYWRlKFwiLmNvbmNhdChjb2xvciwgXCIsIFwiKS5jb25jYXQodmFsdWUsIFwiKS5cIikpIDogdm9pZCAwO1xuICBpZiAoIWNvbG9yKSByZXR1cm4gY29sb3I7XG4gIGNvbG9yID0gZGVjb21wb3NlQ29sb3IoY29sb3IpO1xuICB2YWx1ZSA9IGNsYW1wKHZhbHVlKTtcblxuICBpZiAoY29sb3IudHlwZSA9PT0gJ3JnYicgfHwgY29sb3IudHlwZSA9PT0gJ2hzbCcpIHtcbiAgICBjb2xvci50eXBlICs9ICdhJztcbiAgfVxuXG4gIGNvbG9yLnZhbHVlc1szXSA9IHZhbHVlO1xuICByZXR1cm4gcmVjb21wb3NlQ29sb3IoY29sb3IpO1xufVxuLyoqXG4gKiBEYXJrZW5zIGEgY29sb3IuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yIC0gQ1NTIGNvbG9yLCBpLmUuIG9uZSBvZjogI25ubiwgI25ubm5ubiwgcmdiKCksIHJnYmEoKSwgaHNsKCksIGhzbGEoKVxuICogQHBhcmFtIHtudW1iZXJ9IGNvZWZmaWNpZW50IC0gbXVsdGlwbGllciBpbiB0aGUgcmFuZ2UgMCAtIDFcbiAqIEByZXR1cm5zIHtzdHJpbmd9IEEgQ1NTIGNvbG9yIHN0cmluZy4gSGV4IGlucHV0IHZhbHVlcyBhcmUgcmV0dXJuZWQgYXMgcmdiXG4gKi9cblxuXG5mdW5jdGlvbiBkYXJrZW4oY29sb3IsIGNvZWZmaWNpZW50KSB7XG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/ICgwLCBfd2FybmluZy5kZWZhdWx0KShjb2xvciwgXCJNYXRlcmlhbC1VSTogbWlzc2luZyBjb2xvciBhcmd1bWVudCBpbiBkYXJrZW4oXCIuY29uY2F0KGNvbG9yLCBcIiwgXCIpLmNvbmNhdChjb2VmZmljaWVudCwgXCIpLlwiKSkgOiB2b2lkIDA7XG4gIGlmICghY29sb3IpIHJldHVybiBjb2xvcjtcbiAgY29sb3IgPSBkZWNvbXBvc2VDb2xvcihjb2xvcik7XG4gIGNvZWZmaWNpZW50ID0gY2xhbXAoY29lZmZpY2llbnQpO1xuXG4gIGlmIChjb2xvci50eXBlLmluZGV4T2YoJ2hzbCcpICE9PSAtMSkge1xuICAgIGNvbG9yLnZhbHVlc1syXSAqPSAxIC0gY29lZmZpY2llbnQ7XG4gIH0gZWxzZSBpZiAoY29sb3IudHlwZS5pbmRleE9mKCdyZ2InKSAhPT0gLTEpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IDM7IGkgKz0gMSkge1xuICAgICAgY29sb3IudmFsdWVzW2ldICo9IDEgLSBjb2VmZmljaWVudDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVjb21wb3NlQ29sb3IoY29sb3IpO1xufVxuLyoqXG4gKiBMaWdodGVucyBhIGNvbG9yLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvciAtIENTUyBjb2xvciwgaS5lLiBvbmUgb2Y6ICNubm4sICNubm5ubm4sIHJnYigpLCByZ2JhKCksIGhzbCgpLCBoc2xhKClcbiAqIEBwYXJhbSB7bnVtYmVyfSBjb2VmZmljaWVudCAtIG11bHRpcGxpZXIgaW4gdGhlIHJhbmdlIDAgLSAxXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBBIENTUyBjb2xvciBzdHJpbmcuIEhleCBpbnB1dCB2YWx1ZXMgYXJlIHJldHVybmVkIGFzIHJnYlxuICovXG5cblxuZnVuY3Rpb24gbGlnaHRlbihjb2xvciwgY29lZmZpY2llbnQpIHtcbiAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gKDAsIF93YXJuaW5nLmRlZmF1bHQpKGNvbG9yLCBcIk1hdGVyaWFsLVVJOiBtaXNzaW5nIGNvbG9yIGFyZ3VtZW50IGluIGxpZ2h0ZW4oXCIuY29uY2F0KGNvbG9yLCBcIiwgXCIpLmNvbmNhdChjb2VmZmljaWVudCwgXCIpLlwiKSkgOiB2b2lkIDA7XG4gIGlmICghY29sb3IpIHJldHVybiBjb2xvcjtcbiAgY29sb3IgPSBkZWNvbXBvc2VDb2xvcihjb2xvcik7XG4gIGNvZWZmaWNpZW50ID0gY2xhbXAoY29lZmZpY2llbnQpO1xuXG4gIGlmIChjb2xvci50eXBlLmluZGV4T2YoJ2hzbCcpICE9PSAtMSkge1xuICAgIGNvbG9yLnZhbHVlc1syXSArPSAoMTAwIC0gY29sb3IudmFsdWVzWzJdKSAqIGNvZWZmaWNpZW50O1xuICB9IGVsc2UgaWYgKGNvbG9yLnR5cGUuaW5kZXhPZigncmdiJykgIT09IC0xKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCAzOyBpICs9IDEpIHtcbiAgICAgIGNvbG9yLnZhbHVlc1tpXSArPSAoMjU1IC0gY29sb3IudmFsdWVzW2ldKSAqIGNvZWZmaWNpZW50O1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZWNvbXBvc2VDb2xvcihjb2xvcik7XG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJkZWZhdWx0XCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9JbnB1dC5kZWZhdWx0O1xuICB9XG59KTtcblxudmFyIF9JbnB1dCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vSW5wdXRcIikpOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVmYXVsdFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfR3JpZC5kZWZhdWx0O1xuICB9XG59KTtcblxudmFyIF9HcmlkID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9HcmlkXCIpKTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuY2xvbmVFbGVtZW50V2l0aENsYXNzTmFtZSA9IGNsb25lRWxlbWVudFdpdGhDbGFzc05hbWU7XG5leHBvcnRzLmNsb25lQ2hpbGRyZW5XaXRoQ2xhc3NOYW1lID0gY2xvbmVDaGlsZHJlbldpdGhDbGFzc05hbWU7XG5leHBvcnRzLmlzTXVpRWxlbWVudCA9IGlzTXVpRWxlbWVudDtcbmV4cG9ydHMuaXNNdWlDb21wb25lbnQgPSBpc011aUNvbXBvbmVudDtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9jbGFzc25hbWVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY2xhc3NuYW1lc1wiKSk7XG5cbi8qIGVzbGludC1kaXNhYmxlIGltcG9ydC9wcmVmZXItZGVmYXVsdC1leHBvcnQgKi9cbmZ1bmN0aW9uIGNsb25lRWxlbWVudFdpdGhDbGFzc05hbWUoY2hpbGQsIGNsYXNzTmFtZSkge1xuICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY2xvbmVFbGVtZW50KGNoaWxkLCB7XG4gICAgY2xhc3NOYW1lOiAoMCwgX2NsYXNzbmFtZXMuZGVmYXVsdCkoY2hpbGQucHJvcHMuY2xhc3NOYW1lLCBjbGFzc05hbWUpXG4gIH0pO1xufVxuXG5mdW5jdGlvbiBjbG9uZUNoaWxkcmVuV2l0aENsYXNzTmFtZShjaGlsZHJlbiwgY2xhc3NOYW1lKSB7XG4gIHJldHVybiBfcmVhY3QuZGVmYXVsdC5DaGlsZHJlbi5tYXAoY2hpbGRyZW4sIGZ1bmN0aW9uIChjaGlsZCkge1xuICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5pc1ZhbGlkRWxlbWVudChjaGlsZCkgJiYgY2xvbmVFbGVtZW50V2l0aENsYXNzTmFtZShjaGlsZCwgY2xhc3NOYW1lKTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGlzTXVpRWxlbWVudChlbGVtZW50LCBtdWlOYW1lcykge1xuICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuaXNWYWxpZEVsZW1lbnQoZWxlbWVudCkgJiYgbXVpTmFtZXMuaW5kZXhPZihlbGVtZW50LnR5cGUubXVpTmFtZSkgIT09IC0xO1xufVxuXG5mdW5jdGlvbiBpc011aUNvbXBvbmVudChlbGVtZW50LCBtdWlOYW1lcykge1xuICByZXR1cm4gbXVpTmFtZXMuaW5kZXhPZihlbGVtZW50Lm11aU5hbWUpICE9PSAtMTtcbn0iLCJ2YXIgaGFzT3duUHJvcGVydHkgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBrZXkpIHtcbiAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwoaXQsIGtleSk7XG59O1xuIiwidmFyIGc7XG5cbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXG5nID0gKGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcztcbn0pKCk7XG5cbnRyeSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxuXHRnID0gZyB8fCBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCkgfHwgKDEsIGV2YWwpKFwidGhpc1wiKTtcbn0gY2F0Y2ggKGUpIHtcblx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcblx0aWYgKHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIpIGcgPSB3aW5kb3c7XG59XG5cbi8vIGcgY2FuIHN0aWxsIGJlIHVuZGVmaW5lZCwgYnV0IG5vdGhpbmcgdG8gZG8gYWJvdXQgaXQuLi5cbi8vIFdlIHJldHVybiB1bmRlZmluZWQsIGluc3RlYWQgb2Ygbm90aGluZyBoZXJlLCBzbyBpdCdzXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XG5cbm1vZHVsZS5leHBvcnRzID0gZztcbiIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVmYXVsdFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfTW9kYWwuZGVmYXVsdDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJNb2RhbE1hbmFnZXJcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX01vZGFsTWFuYWdlci5kZWZhdWx0O1xuICB9XG59KTtcblxudmFyIF9Nb2RhbCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vTW9kYWxcIikpO1xuXG52YXIgX01vZGFsTWFuYWdlciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vTW9kYWxNYW5hZ2VyXCIpKTsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZ2V0VHJhbnNpdGlvblByb3BzID0gZ2V0VHJhbnNpdGlvblByb3BzO1xuZXhwb3J0cy5yZWZsb3cgPSB2b2lkIDA7XG5cbnZhciByZWZsb3cgPSBmdW5jdGlvbiByZWZsb3cobm9kZSkge1xuICByZXR1cm4gbm9kZS5zY3JvbGxUb3A7XG59O1xuXG5leHBvcnRzLnJlZmxvdyA9IHJlZmxvdztcblxuZnVuY3Rpb24gZ2V0VHJhbnNpdGlvblByb3BzKHByb3BzLCBvcHRpb25zKSB7XG4gIHZhciB0aW1lb3V0ID0gcHJvcHMudGltZW91dCxcbiAgICAgIF9wcm9wcyRzdHlsZSA9IHByb3BzLnN0eWxlLFxuICAgICAgc3R5bGUgPSBfcHJvcHMkc3R5bGUgPT09IHZvaWQgMCA/IHt9IDogX3Byb3BzJHN0eWxlO1xuICByZXR1cm4ge1xuICAgIGR1cmF0aW9uOiBzdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gfHwgdHlwZW9mIHRpbWVvdXQgPT09ICdudW1iZXInID8gdGltZW91dCA6IHRpbWVvdXRbb3B0aW9ucy5tb2RlXSxcbiAgICBkZWxheTogc3R5bGUudHJhbnNpdGlvbkRlbGF5XG4gIH07XG59IiwidmFyIHN0b3JlID0gcmVxdWlyZSgnLi9fc2hhcmVkJykoJ3drcycpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4vX3VpZCcpO1xudmFyIFN5bWJvbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLlN5bWJvbDtcbnZhciBVU0VfU1lNQk9MID0gdHlwZW9mIFN5bWJvbCA9PSAnZnVuY3Rpb24nO1xuXG52YXIgJGV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gIHJldHVybiBzdG9yZVtuYW1lXSB8fCAoc3RvcmVbbmFtZV0gPVxuICAgIFVTRV9TWU1CT0wgJiYgU3ltYm9sW25hbWVdIHx8IChVU0VfU1lNQk9MID8gU3ltYm9sIDogdWlkKSgnU3ltYm9sLicgKyBuYW1lKSk7XG59O1xuXG4kZXhwb3J0cy5zdG9yZSA9IHN0b3JlO1xuIiwiLy8gdG8gaW5kZXhlZCBvYmplY3QsIHRvT2JqZWN0IHdpdGggZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBzdHJpbmdzXG52YXIgSU9iamVjdCA9IHJlcXVpcmUoJy4vX2lvYmplY3QnKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIElPYmplY3QoZGVmaW5lZChpdCkpO1xufTtcbiIsIi8vIFRoYW5rJ3MgSUU4IGZvciBoaXMgZnVubnkgZGVmaW5lUHJvcGVydHlcbm1vZHVsZS5leHBvcnRzID0gIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCAnYScsIHsgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9IH0pLmEgIT0gNztcbn0pO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PT0gJ29iamVjdCcgPyBpdCAhPT0gbnVsbCA6IHR5cGVvZiBpdCA9PT0gJ2Z1bmN0aW9uJztcbn07XG4iLCJ2YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBJRThfRE9NX0RFRklORSA9IHJlcXVpcmUoJy4vX2llOC1kb20tZGVmaW5lJyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBkUCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcblxuZXhwb3J0cy5mID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpIHtcbiAgYW5PYmplY3QoTyk7XG4gIFAgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKTtcbiAgYW5PYmplY3QoQXR0cmlidXRlcyk7XG4gIGlmIChJRThfRE9NX0RFRklORSkgdHJ5IHtcbiAgICByZXR1cm4gZFAoTywgUCwgQXR0cmlidXRlcyk7XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxuICBpZiAoJ2dldCcgaW4gQXR0cmlidXRlcyB8fCAnc2V0JyBpbiBBdHRyaWJ1dGVzKSB0aHJvdyBUeXBlRXJyb3IoJ0FjY2Vzc29ycyBub3Qgc3VwcG9ydGVkIScpO1xuICBpZiAoJ3ZhbHVlJyBpbiBBdHRyaWJ1dGVzKSBPW1BdID0gQXR0cmlidXRlcy52YWx1ZTtcbiAgcmV0dXJuIE87XG59O1xuIiwidmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgcmV0dXJuIGRQLmYob2JqZWN0LCBrZXksIGNyZWF0ZURlc2MoMSwgdmFsdWUpKTtcbn0gOiBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIG9iamVjdFtrZXldID0gdmFsdWU7XG4gIHJldHVybiBvYmplY3Q7XG59O1xuIiwidmFyIGNvcmUgPSBtb2R1bGUuZXhwb3J0cyA9IHsgdmVyc2lvbjogJzIuNS43JyB9O1xuaWYgKHR5cGVvZiBfX2UgPT0gJ251bWJlcicpIF9fZSA9IGNvcmU7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcbiIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuRVhJVElORyA9IGV4cG9ydHMuRU5URVJFRCA9IGV4cG9ydHMuRU5URVJJTkcgPSBleHBvcnRzLkVYSVRFRCA9IGV4cG9ydHMuVU5NT1VOVEVEID0gdW5kZWZpbmVkO1xuXG52YXIgX3Byb3BUeXBlcyA9IHJlcXVpcmUoJ3Byb3AtdHlwZXMnKTtcblxudmFyIFByb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKF9wcm9wVHlwZXMpO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfcmVhY3REb20gPSByZXF1aXJlKCdyZWFjdC1kb20nKTtcblxudmFyIF9yZWFjdERvbTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdERvbSk7XG5cbnZhciBfUHJvcFR5cGVzID0gcmVxdWlyZSgnLi91dGlscy9Qcm9wVHlwZXMnKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKSB7IGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsgcmV0dXJuIG9iajsgfSBlbHNlIHsgdmFyIG5ld09iaiA9IHt9OyBpZiAob2JqICE9IG51bGwpIHsgZm9yICh2YXIga2V5IGluIG9iaikgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsgfSB9IG5ld09iai5kZWZhdWx0ID0gb2JqOyByZXR1cm4gbmV3T2JqOyB9IH1cblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9iaiwga2V5cykgeyB2YXIgdGFyZ2V0ID0ge307IGZvciAodmFyIGkgaW4gb2JqKSB7IGlmIChrZXlzLmluZGV4T2YoaSkgPj0gMCkgY29udGludWU7IGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgaSkpIGNvbnRpbnVlOyB0YXJnZXRbaV0gPSBvYmpbaV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBVTk1PVU5URUQgPSBleHBvcnRzLlVOTU9VTlRFRCA9ICd1bm1vdW50ZWQnO1xudmFyIEVYSVRFRCA9IGV4cG9ydHMuRVhJVEVEID0gJ2V4aXRlZCc7XG52YXIgRU5URVJJTkcgPSBleHBvcnRzLkVOVEVSSU5HID0gJ2VudGVyaW5nJztcbnZhciBFTlRFUkVEID0gZXhwb3J0cy5FTlRFUkVEID0gJ2VudGVyZWQnO1xudmFyIEVYSVRJTkcgPSBleHBvcnRzLkVYSVRJTkcgPSAnZXhpdGluZyc7XG5cbi8qKlxuICogVGhlIFRyYW5zaXRpb24gY29tcG9uZW50IGxldHMgeW91IGRlc2NyaWJlIGEgdHJhbnNpdGlvbiBmcm9tIG9uZSBjb21wb25lbnRcbiAqIHN0YXRlIHRvIGFub3RoZXIgX292ZXIgdGltZV8gd2l0aCBhIHNpbXBsZSBkZWNsYXJhdGl2ZSBBUEkuIE1vc3QgY29tbW9ubHlcbiAqIGl0J3MgdXNlZCB0byBhbmltYXRlIHRoZSBtb3VudGluZyBhbmQgdW5tb3VudGluZyBvZiBhIGNvbXBvbmVudCwgYnV0IGNhbiBhbHNvXG4gKiBiZSB1c2VkIHRvIGRlc2NyaWJlIGluLXBsYWNlIHRyYW5zaXRpb24gc3RhdGVzIGFzIHdlbGwuXG4gKlxuICogQnkgZGVmYXVsdCB0aGUgYFRyYW5zaXRpb25gIGNvbXBvbmVudCBkb2VzIG5vdCBhbHRlciB0aGUgYmVoYXZpb3Igb2YgdGhlXG4gKiBjb21wb25lbnQgaXQgcmVuZGVycywgaXQgb25seSB0cmFja3MgXCJlbnRlclwiIGFuZCBcImV4aXRcIiBzdGF0ZXMgZm9yIHRoZSBjb21wb25lbnRzLlxuICogSXQncyB1cCB0byB5b3UgdG8gZ2l2ZSBtZWFuaW5nIGFuZCBlZmZlY3QgdG8gdGhvc2Ugc3RhdGVzLiBGb3IgZXhhbXBsZSB3ZSBjYW5cbiAqIGFkZCBzdHlsZXMgdG8gYSBjb21wb25lbnQgd2hlbiBpdCBlbnRlcnMgb3IgZXhpdHM6XG4gKlxuICogYGBganN4XG4gKiBpbXBvcnQgVHJhbnNpdGlvbiBmcm9tICdyZWFjdC10cmFuc2l0aW9uLWdyb3VwL1RyYW5zaXRpb24nO1xuICpcbiAqIGNvbnN0IGR1cmF0aW9uID0gMzAwO1xuICpcbiAqIGNvbnN0IGRlZmF1bHRTdHlsZSA9IHtcbiAqICAgdHJhbnNpdGlvbjogYG9wYWNpdHkgJHtkdXJhdGlvbn1tcyBlYXNlLWluLW91dGAsXG4gKiAgIG9wYWNpdHk6IDAsXG4gKiB9XG4gKlxuICogY29uc3QgdHJhbnNpdGlvblN0eWxlcyA9IHtcbiAqICAgZW50ZXJpbmc6IHsgb3BhY2l0eTogMCB9LFxuICogICBlbnRlcmVkOiAgeyBvcGFjaXR5OiAxIH0sXG4gKiB9O1xuICpcbiAqIGNvbnN0IEZhZGUgPSAoeyBpbjogaW5Qcm9wIH0pID0+IChcbiAqICAgPFRyYW5zaXRpb24gaW49e2luUHJvcH0gdGltZW91dD17ZHVyYXRpb259PlxuICogICAgIHsoc3RhdGUpID0+IChcbiAqICAgICAgIDxkaXYgc3R5bGU9e3tcbiAqICAgICAgICAgLi4uZGVmYXVsdFN0eWxlLFxuICogICAgICAgICAuLi50cmFuc2l0aW9uU3R5bGVzW3N0YXRlXVxuICogICAgICAgfX0+XG4gKiAgICAgICAgIEknbSBhIGZhZGUgVHJhbnNpdGlvbiFcbiAqICAgICAgIDwvZGl2PlxuICogICAgICl9XG4gKiAgIDwvVHJhbnNpdGlvbj5cbiAqICk7XG4gKiBgYGBcbiAqXG4gKiBBcyBub3RlZCB0aGUgYFRyYW5zaXRpb25gIGNvbXBvbmVudCBkb2Vzbid0IF9kb18gYW55dGhpbmcgYnkgaXRzZWxmIHRvIGl0cyBjaGlsZCBjb21wb25lbnQuXG4gKiBXaGF0IGl0IGRvZXMgZG8gaXMgdHJhY2sgdHJhbnNpdGlvbiBzdGF0ZXMgb3ZlciB0aW1lIHNvIHlvdSBjYW4gdXBkYXRlIHRoZVxuICogY29tcG9uZW50IChzdWNoIGFzIGJ5IGFkZGluZyBzdHlsZXMgb3IgY2xhc3Nlcykgd2hlbiBpdCBjaGFuZ2VzIHN0YXRlcy5cbiAqXG4gKiBUaGVyZSBhcmUgNCBtYWluIHN0YXRlcyBhIFRyYW5zaXRpb24gY2FuIGJlIGluOlxuICogIC0gYCdlbnRlcmluZydgXG4gKiAgLSBgJ2VudGVyZWQnYFxuICogIC0gYCdleGl0aW5nJ2BcbiAqICAtIGAnZXhpdGVkJ2BcbiAqXG4gKiBUcmFuc2l0aW9uIHN0YXRlIGlzIHRvZ2dsZWQgdmlhIHRoZSBgaW5gIHByb3AuIFdoZW4gYHRydWVgIHRoZSBjb21wb25lbnQgYmVnaW5zIHRoZVxuICogXCJFbnRlclwiIHN0YWdlLiBEdXJpbmcgdGhpcyBzdGFnZSwgdGhlIGNvbXBvbmVudCB3aWxsIHNoaWZ0IGZyb20gaXRzIGN1cnJlbnQgdHJhbnNpdGlvbiBzdGF0ZSxcbiAqIHRvIGAnZW50ZXJpbmcnYCBmb3IgdGhlIGR1cmF0aW9uIG9mIHRoZSB0cmFuc2l0aW9uIGFuZCB0aGVuIHRvIHRoZSBgJ2VudGVyZWQnYCBzdGFnZSBvbmNlXG4gKiBpdCdzIGNvbXBsZXRlLiBMZXQncyB0YWtlIHRoZSBmb2xsb3dpbmcgZXhhbXBsZTpcbiAqXG4gKiBgYGBqc3hcbiAqIHN0YXRlID0geyBpbjogZmFsc2UgfTtcbiAqXG4gKiB0b2dnbGVFbnRlclN0YXRlID0gKCkgPT4ge1xuICogICB0aGlzLnNldFN0YXRlKHsgaW46IHRydWUgfSk7XG4gKiB9XG4gKlxuICogcmVuZGVyKCkge1xuICogICByZXR1cm4gKFxuICogICAgIDxkaXY+XG4gKiAgICAgICA8VHJhbnNpdGlvbiBpbj17dGhpcy5zdGF0ZS5pbn0gdGltZW91dD17NTAwfSAvPlxuICogICAgICAgPGJ1dHRvbiBvbkNsaWNrPXt0aGlzLnRvZ2dsZUVudGVyU3RhdGV9PkNsaWNrIHRvIEVudGVyPC9idXR0b24+XG4gKiAgICAgPC9kaXY+XG4gKiAgICk7XG4gKiB9XG4gKiBgYGBcbiAqXG4gKiBXaGVuIHRoZSBidXR0b24gaXMgY2xpY2tlZCB0aGUgY29tcG9uZW50IHdpbGwgc2hpZnQgdG8gdGhlIGAnZW50ZXJpbmcnYCBzdGF0ZSBhbmRcbiAqIHN0YXkgdGhlcmUgZm9yIDUwMG1zICh0aGUgdmFsdWUgb2YgYHRpbWVvdXRgKSBiZWZvcmUgaXQgZmluYWxseSBzd2l0Y2hlcyB0byBgJ2VudGVyZWQnYC5cbiAqXG4gKiBXaGVuIGBpbmAgaXMgYGZhbHNlYCB0aGUgc2FtZSB0aGluZyBoYXBwZW5zIGV4Y2VwdCB0aGUgc3RhdGUgbW92ZXMgZnJvbSBgJ2V4aXRpbmcnYCB0byBgJ2V4aXRlZCdgLlxuICpcbiAqICMjIFRpbWluZ1xuICpcbiAqIFRpbWluZyBpcyBvZnRlbiB0aGUgdHJpY2tpZXN0IHBhcnQgb2YgYW5pbWF0aW9uLCBtaXN0YWtlcyBjYW4gcmVzdWx0IGluIHNsaWdodCBkZWxheXNcbiAqIHRoYXQgYXJlIGhhcmQgdG8gcGluIGRvd24uIEEgY29tbW9uIGV4YW1wbGUgaXMgd2hlbiB5b3Ugd2FudCB0byBhZGQgYW4gZXhpdCB0cmFuc2l0aW9uLFxuICogeW91IHNob3VsZCBzZXQgdGhlIGRlc2lyZWQgZmluYWwgc3R5bGVzIHdoZW4gdGhlIHN0YXRlIGlzIGAnZXhpdGluZydgLiBUaGF0J3Mgd2hlbiB0aGVcbiAqIHRyYW5zaXRpb24gdG8gdGhvc2Ugc3R5bGVzIHdpbGwgc3RhcnQgYW5kLCBpZiB5b3UgbWF0Y2hlZCB0aGUgYHRpbWVvdXRgIHByb3Agd2l0aCB0aGVcbiAqIENTUyBUcmFuc2l0aW9uIGR1cmF0aW9uLCBpdCB3aWxsIGVuZCBleGFjdGx5IHdoZW4gdGhlIHN0YXRlIGNoYW5nZXMgdG8gYCdleGl0ZWQnYC5cbiAqXG4gKiA+ICoqTm90ZSoqOiBGb3Igc2ltcGxlciB0cmFuc2l0aW9ucyB0aGUgYFRyYW5zaXRpb25gIGNvbXBvbmVudCBtaWdodCBiZSBlbm91Z2gsIGJ1dFxuICogPiB0YWtlIGludG8gYWNjb3VudCB0aGF0IGl0J3MgcGxhdGZvcm0tYWdub3N0aWMsIHdoaWxlIHRoZSBgQ1NTVHJhbnNpdGlvbmAgY29tcG9uZW50XG4gKiA+IFtmb3JjZXMgcmVmbG93c10oaHR0cHM6Ly9naXRodWIuY29tL3JlYWN0anMvcmVhY3QtdHJhbnNpdGlvbi1ncm91cC9ibG9iLzUwMDczMDNlNzI5YTc0YmU2NmEyMWMzZTIyMDVlNDkxNjgyMTUyNGIvc3JjL0NTU1RyYW5zaXRpb24uanMjTDIwOC1MMjE1KVxuICogPiBpbiBvcmRlciB0byBtYWtlIG1vcmUgY29tcGxleCB0cmFuc2l0aW9ucyBtb3JlIHByZWRpY3RhYmxlLiBGb3IgZXhhbXBsZSwgZXZlbiB0aG91Z2hcbiAqID4gY2xhc3NlcyBgZXhhbXBsZS1lbnRlcmAgYW5kIGBleGFtcGxlLWVudGVyLWFjdGl2ZWAgYXJlIGFwcGxpZWQgaW1tZWRpYXRlbHkgb25lIGFmdGVyXG4gKiA+IGFub3RoZXIsIHlvdSBjYW4gc3RpbGwgdHJhbnNpdGlvbiBmcm9tIG9uZSB0byB0aGUgb3RoZXIgYmVjYXVzZSBvZiB0aGUgZm9yY2VkIHJlZmxvd1xuICogPiAocmVhZCBbdGhpcyBpc3N1ZV0oaHR0cHM6Ly9naXRodWIuY29tL3JlYWN0anMvcmVhY3QtdHJhbnNpdGlvbi1ncm91cC9pc3N1ZXMvMTU5I2lzc3VlY29tbWVudC0zMjI3NjExNzEpXG4gKiA+IGZvciBtb3JlIGluZm8pLiBUYWtlIHRoaXMgaW50byBhY2NvdW50IHdoZW4gY2hvb3NpbmcgYmV0d2VlbiBgVHJhbnNpdGlvbmAgYW5kXG4gKiA+IGBDU1NUcmFuc2l0aW9uYC5cbiAqXG4gKiAjIyBFeGFtcGxlXG4gKlxuICogPGlmcmFtZSBzcmM9XCJodHRwczovL2NvZGVzYW5kYm94LmlvL2VtYmVkLzc0MW9wNG1tajA/Zm9udHNpemU9MTRcIiBzdHlsZT1cIndpZHRoOjEwMCU7IGhlaWdodDo1MDBweDsgYm9yZGVyOjA7IGJvcmRlci1yYWRpdXM6IDRweDsgb3ZlcmZsb3c6aGlkZGVuO1wiIHNhbmRib3g9XCJhbGxvdy1tb2RhbHMgYWxsb3ctZm9ybXMgYWxsb3ctcG9wdXBzIGFsbG93LXNjcmlwdHMgYWxsb3ctc2FtZS1vcmlnaW5cIj48L2lmcmFtZT5cbiAqXG4gKi9cblxudmFyIFRyYW5zaXRpb24gPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoVHJhbnNpdGlvbiwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gVHJhbnNpdGlvbihwcm9wcywgY29udGV4dCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBUcmFuc2l0aW9uKTtcblxuICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuY2FsbCh0aGlzLCBwcm9wcywgY29udGV4dCkpO1xuXG4gICAgdmFyIHBhcmVudEdyb3VwID0gY29udGV4dC50cmFuc2l0aW9uR3JvdXA7XG4gICAgLy8gSW4gdGhlIGNvbnRleHQgb2YgYSBUcmFuc2l0aW9uR3JvdXAgYWxsIGVudGVycyBhcmUgcmVhbGx5IGFwcGVhcnNcbiAgICB2YXIgYXBwZWFyID0gcGFyZW50R3JvdXAgJiYgIXBhcmVudEdyb3VwLmlzTW91bnRpbmcgPyBwcm9wcy5lbnRlciA6IHByb3BzLmFwcGVhcjtcblxuICAgIHZhciBpbml0aWFsU3RhdHVzID0gdm9pZCAwO1xuICAgIF90aGlzLm5leHRTdGF0dXMgPSBudWxsO1xuXG4gICAgaWYgKHByb3BzLmluKSB7XG4gICAgICBpZiAoYXBwZWFyKSB7XG4gICAgICAgIGluaXRpYWxTdGF0dXMgPSBFWElURUQ7XG4gICAgICAgIF90aGlzLm5leHRTdGF0dXMgPSBFTlRFUklORztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGluaXRpYWxTdGF0dXMgPSBFTlRFUkVEO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAocHJvcHMudW5tb3VudE9uRXhpdCB8fCBwcm9wcy5tb3VudE9uRW50ZXIpIHtcbiAgICAgICAgaW5pdGlhbFN0YXR1cyA9IFVOTU9VTlRFRDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGluaXRpYWxTdGF0dXMgPSBFWElURUQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgX3RoaXMuc3RhdGUgPSB7IHN0YXR1czogaW5pdGlhbFN0YXR1cyB9O1xuXG4gICAgX3RoaXMubmV4dENhbGxiYWNrID0gbnVsbDtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBUcmFuc2l0aW9uLnByb3RvdHlwZS5nZXRDaGlsZENvbnRleHQgPSBmdW5jdGlvbiBnZXRDaGlsZENvbnRleHQoKSB7XG4gICAgcmV0dXJuIHsgdHJhbnNpdGlvbkdyb3VwOiBudWxsIH07IC8vIGFsbG93cyBmb3IgbmVzdGVkIFRyYW5zaXRpb25zXG4gIH07XG5cbiAgVHJhbnNpdGlvbi5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB0aGlzLnVwZGF0ZVN0YXR1cyh0cnVlKTtcbiAgfTtcblxuICBUcmFuc2l0aW9uLnByb3RvdHlwZS5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICB2YXIgX3JlZiA9IHRoaXMucGVuZGluZ1N0YXRlIHx8IHRoaXMuc3RhdGUsXG4gICAgICAgIHN0YXR1cyA9IF9yZWYuc3RhdHVzO1xuXG4gICAgaWYgKG5leHRQcm9wcy5pbikge1xuICAgICAgaWYgKHN0YXR1cyA9PT0gVU5NT1VOVEVEKSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoeyBzdGF0dXM6IEVYSVRFRCB9KTtcbiAgICAgIH1cbiAgICAgIGlmIChzdGF0dXMgIT09IEVOVEVSSU5HICYmIHN0YXR1cyAhPT0gRU5URVJFRCkge1xuICAgICAgICB0aGlzLm5leHRTdGF0dXMgPSBFTlRFUklORztcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHN0YXR1cyA9PT0gRU5URVJJTkcgfHwgc3RhdHVzID09PSBFTlRFUkVEKSB7XG4gICAgICAgIHRoaXMubmV4dFN0YXR1cyA9IEVYSVRJTkc7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIFRyYW5zaXRpb24ucHJvdG90eXBlLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZSgpIHtcbiAgICB0aGlzLnVwZGF0ZVN0YXR1cygpO1xuICB9O1xuXG4gIFRyYW5zaXRpb24ucHJvdG90eXBlLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgdGhpcy5jYW5jZWxOZXh0Q2FsbGJhY2soKTtcbiAgfTtcblxuICBUcmFuc2l0aW9uLnByb3RvdHlwZS5nZXRUaW1lb3V0cyA9IGZ1bmN0aW9uIGdldFRpbWVvdXRzKCkge1xuICAgIHZhciB0aW1lb3V0ID0gdGhpcy5wcm9wcy50aW1lb3V0O1xuXG4gICAgdmFyIGV4aXQgPSB2b2lkIDAsXG4gICAgICAgIGVudGVyID0gdm9pZCAwLFxuICAgICAgICBhcHBlYXIgPSB2b2lkIDA7XG5cbiAgICBleGl0ID0gZW50ZXIgPSBhcHBlYXIgPSB0aW1lb3V0O1xuXG4gICAgaWYgKHRpbWVvdXQgIT0gbnVsbCAmJiB0eXBlb2YgdGltZW91dCAhPT0gJ251bWJlcicpIHtcbiAgICAgIGV4aXQgPSB0aW1lb3V0LmV4aXQ7XG4gICAgICBlbnRlciA9IHRpbWVvdXQuZW50ZXI7XG4gICAgICBhcHBlYXIgPSB0aW1lb3V0LmFwcGVhcjtcbiAgICB9XG4gICAgcmV0dXJuIHsgZXhpdDogZXhpdCwgZW50ZXI6IGVudGVyLCBhcHBlYXI6IGFwcGVhciB9O1xuICB9O1xuXG4gIFRyYW5zaXRpb24ucHJvdG90eXBlLnVwZGF0ZVN0YXR1cyA9IGZ1bmN0aW9uIHVwZGF0ZVN0YXR1cygpIHtcbiAgICB2YXIgbW91bnRpbmcgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IGZhbHNlO1xuXG4gICAgdmFyIG5leHRTdGF0dXMgPSB0aGlzLm5leHRTdGF0dXM7XG5cbiAgICBpZiAobmV4dFN0YXR1cyAhPT0gbnVsbCkge1xuICAgICAgdGhpcy5uZXh0U3RhdHVzID0gbnVsbDtcbiAgICAgIC8vIG5leHRTdGF0dXMgd2lsbCBhbHdheXMgYmUgRU5URVJJTkcgb3IgRVhJVElORy5cbiAgICAgIHRoaXMuY2FuY2VsTmV4dENhbGxiYWNrKCk7XG4gICAgICB2YXIgbm9kZSA9IF9yZWFjdERvbTIuZGVmYXVsdC5maW5kRE9NTm9kZSh0aGlzKTtcblxuICAgICAgaWYgKG5leHRTdGF0dXMgPT09IEVOVEVSSU5HKSB7XG4gICAgICAgIHRoaXMucGVyZm9ybUVudGVyKG5vZGUsIG1vdW50aW5nKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMucGVyZm9ybUV4aXQobm9kZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0aGlzLnByb3BzLnVubW91bnRPbkV4aXQgJiYgdGhpcy5zdGF0ZS5zdGF0dXMgPT09IEVYSVRFRCkge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7IHN0YXR1czogVU5NT1VOVEVEIH0pO1xuICAgIH1cbiAgfTtcblxuICBUcmFuc2l0aW9uLnByb3RvdHlwZS5wZXJmb3JtRW50ZXIgPSBmdW5jdGlvbiBwZXJmb3JtRW50ZXIobm9kZSwgbW91bnRpbmcpIHtcbiAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgIHZhciBlbnRlciA9IHRoaXMucHJvcHMuZW50ZXI7XG5cbiAgICB2YXIgYXBwZWFyaW5nID0gdGhpcy5jb250ZXh0LnRyYW5zaXRpb25Hcm91cCA/IHRoaXMuY29udGV4dC50cmFuc2l0aW9uR3JvdXAuaXNNb3VudGluZyA6IG1vdW50aW5nO1xuXG4gICAgdmFyIHRpbWVvdXRzID0gdGhpcy5nZXRUaW1lb3V0cygpO1xuXG4gICAgLy8gbm8gZW50ZXIgYW5pbWF0aW9uIHNraXAgcmlnaHQgdG8gRU5URVJFRFxuICAgIC8vIGlmIHdlIGFyZSBtb3VudGluZyBhbmQgcnVubmluZyB0aGlzIGl0IG1lYW5zIGFwcGVhciBfbXVzdF8gYmUgc2V0XG4gICAgaWYgKCFtb3VudGluZyAmJiAhZW50ZXIpIHtcbiAgICAgIHRoaXMuc2FmZVNldFN0YXRlKHsgc3RhdHVzOiBFTlRFUkVEIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMyLnByb3BzLm9uRW50ZXJlZChub2RlKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMucHJvcHMub25FbnRlcihub2RlLCBhcHBlYXJpbmcpO1xuXG4gICAgdGhpcy5zYWZlU2V0U3RhdGUoeyBzdGF0dXM6IEVOVEVSSU5HIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzMi5wcm9wcy5vbkVudGVyaW5nKG5vZGUsIGFwcGVhcmluZyk7XG5cbiAgICAgIC8vIEZJWE1FOiBhcHBlYXIgdGltZW91dD9cbiAgICAgIF90aGlzMi5vblRyYW5zaXRpb25FbmQobm9kZSwgdGltZW91dHMuZW50ZXIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMyLnNhZmVTZXRTdGF0ZSh7IHN0YXR1czogRU5URVJFRCB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgX3RoaXMyLnByb3BzLm9uRW50ZXJlZChub2RlLCBhcHBlYXJpbmcpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9O1xuXG4gIFRyYW5zaXRpb24ucHJvdG90eXBlLnBlcmZvcm1FeGl0ID0gZnVuY3Rpb24gcGVyZm9ybUV4aXQobm9kZSkge1xuICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgdmFyIGV4aXQgPSB0aGlzLnByb3BzLmV4aXQ7XG5cbiAgICB2YXIgdGltZW91dHMgPSB0aGlzLmdldFRpbWVvdXRzKCk7XG5cbiAgICAvLyBubyBleGl0IGFuaW1hdGlvbiBza2lwIHJpZ2h0IHRvIEVYSVRFRFxuICAgIGlmICghZXhpdCkge1xuICAgICAgdGhpcy5zYWZlU2V0U3RhdGUoeyBzdGF0dXM6IEVYSVRFRCB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzMy5wcm9wcy5vbkV4aXRlZChub2RlKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLnByb3BzLm9uRXhpdChub2RlKTtcblxuICAgIHRoaXMuc2FmZVNldFN0YXRlKHsgc3RhdHVzOiBFWElUSU5HIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzMy5wcm9wcy5vbkV4aXRpbmcobm9kZSk7XG5cbiAgICAgIF90aGlzMy5vblRyYW5zaXRpb25FbmQobm9kZSwgdGltZW91dHMuZXhpdCwgZnVuY3Rpb24gKCkge1xuICAgICAgICBfdGhpczMuc2FmZVNldFN0YXRlKHsgc3RhdHVzOiBFWElURUQgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIF90aGlzMy5wcm9wcy5vbkV4aXRlZChub2RlKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcblxuICBUcmFuc2l0aW9uLnByb3RvdHlwZS5jYW5jZWxOZXh0Q2FsbGJhY2sgPSBmdW5jdGlvbiBjYW5jZWxOZXh0Q2FsbGJhY2soKSB7XG4gICAgaWYgKHRoaXMubmV4dENhbGxiYWNrICE9PSBudWxsKSB7XG4gICAgICB0aGlzLm5leHRDYWxsYmFjay5jYW5jZWwoKTtcbiAgICAgIHRoaXMubmV4dENhbGxiYWNrID0gbnVsbDtcbiAgICB9XG4gIH07XG5cbiAgVHJhbnNpdGlvbi5wcm90b3R5cGUuc2FmZVNldFN0YXRlID0gZnVuY3Rpb24gc2FmZVNldFN0YXRlKG5leHRTdGF0ZSwgY2FsbGJhY2spIHtcbiAgICB2YXIgX3RoaXM0ID0gdGhpcztcblxuICAgIC8vIFdlIG5lZWQgdG8gdHJhY2sgcGVuZGluZyB1cGRhdGVzIGZvciBpbnN0YW5jZXMgd2hlcmUgYSBjV1JQIGZpcmVzIHF1aWNrbHlcbiAgICAvLyBhZnRlciBjRE0gYW5kIGJlZm9yZSB0aGUgc3RhdGUgZmx1c2hlcywgd2hpY2ggd291bGQgZG91YmxlIHRyaWdnZXIgYVxuICAgIC8vIHRyYW5zaXRpb25cbiAgICB0aGlzLnBlbmRpbmdTdGF0ZSA9IG5leHRTdGF0ZTtcblxuICAgIC8vIFRoaXMgc2hvdWxkbid0IGJlIG5lY2Vzc2FyeSwgYnV0IHRoZXJlIGFyZSB3ZWlyZCByYWNlIGNvbmRpdGlvbnMgd2l0aFxuICAgIC8vIHNldFN0YXRlIGNhbGxiYWNrcyBhbmQgdW5tb3VudGluZyBpbiB0ZXN0aW5nLCBzbyBhbHdheXMgbWFrZSBzdXJlIHRoYXRcbiAgICAvLyB3ZSBjYW4gY2FuY2VsIGFueSBwZW5kaW5nIHNldFN0YXRlIGNhbGxiYWNrcyBhZnRlciB3ZSB1bm1vdW50LlxuICAgIGNhbGxiYWNrID0gdGhpcy5zZXROZXh0Q2FsbGJhY2soY2FsbGJhY2spO1xuICAgIHRoaXMuc2V0U3RhdGUobmV4dFN0YXRlLCBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpczQucGVuZGluZ1N0YXRlID0gbnVsbDtcbiAgICAgIGNhbGxiYWNrKCk7XG4gICAgfSk7XG4gIH07XG5cbiAgVHJhbnNpdGlvbi5wcm90b3R5cGUuc2V0TmV4dENhbGxiYWNrID0gZnVuY3Rpb24gc2V0TmV4dENhbGxiYWNrKGNhbGxiYWNrKSB7XG4gICAgdmFyIF90aGlzNSA9IHRoaXM7XG5cbiAgICB2YXIgYWN0aXZlID0gdHJ1ZTtcblxuICAgIHRoaXMubmV4dENhbGxiYWNrID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBpZiAoYWN0aXZlKSB7XG4gICAgICAgIGFjdGl2ZSA9IGZhbHNlO1xuICAgICAgICBfdGhpczUubmV4dENhbGxiYWNrID0gbnVsbDtcblxuICAgICAgICBjYWxsYmFjayhldmVudCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHRoaXMubmV4dENhbGxiYWNrLmNhbmNlbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGFjdGl2ZSA9IGZhbHNlO1xuICAgIH07XG5cbiAgICByZXR1cm4gdGhpcy5uZXh0Q2FsbGJhY2s7XG4gIH07XG5cbiAgVHJhbnNpdGlvbi5wcm90b3R5cGUub25UcmFuc2l0aW9uRW5kID0gZnVuY3Rpb24gb25UcmFuc2l0aW9uRW5kKG5vZGUsIHRpbWVvdXQsIGhhbmRsZXIpIHtcbiAgICB0aGlzLnNldE5leHRDYWxsYmFjayhoYW5kbGVyKTtcblxuICAgIGlmIChub2RlKSB7XG4gICAgICBpZiAodGhpcy5wcm9wcy5hZGRFbmRMaXN0ZW5lcikge1xuICAgICAgICB0aGlzLnByb3BzLmFkZEVuZExpc3RlbmVyKG5vZGUsIHRoaXMubmV4dENhbGxiYWNrKTtcbiAgICAgIH1cbiAgICAgIGlmICh0aW1lb3V0ICE9IG51bGwpIHtcbiAgICAgICAgc2V0VGltZW91dCh0aGlzLm5leHRDYWxsYmFjaywgdGltZW91dCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHNldFRpbWVvdXQodGhpcy5uZXh0Q2FsbGJhY2ssIDApO1xuICAgIH1cbiAgfTtcblxuICBUcmFuc2l0aW9uLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIHN0YXR1cyA9IHRoaXMuc3RhdGUuc3RhdHVzO1xuICAgIGlmIChzdGF0dXMgPT09IFVOTU9VTlRFRCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGNoaWxkcmVuID0gX3Byb3BzLmNoaWxkcmVuLFxuICAgICAgICBjaGlsZFByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9wcm9wcywgWydjaGlsZHJlbiddKTtcbiAgICAvLyBmaWx0ZXIgcHJvcHMgZm9yIFRyYW5zdGl0aW9uXG5cblxuICAgIGRlbGV0ZSBjaGlsZFByb3BzLmluO1xuICAgIGRlbGV0ZSBjaGlsZFByb3BzLm1vdW50T25FbnRlcjtcbiAgICBkZWxldGUgY2hpbGRQcm9wcy51bm1vdW50T25FeGl0O1xuICAgIGRlbGV0ZSBjaGlsZFByb3BzLmFwcGVhcjtcbiAgICBkZWxldGUgY2hpbGRQcm9wcy5lbnRlcjtcbiAgICBkZWxldGUgY2hpbGRQcm9wcy5leGl0O1xuICAgIGRlbGV0ZSBjaGlsZFByb3BzLnRpbWVvdXQ7XG4gICAgZGVsZXRlIGNoaWxkUHJvcHMuYWRkRW5kTGlzdGVuZXI7XG4gICAgZGVsZXRlIGNoaWxkUHJvcHMub25FbnRlcjtcbiAgICBkZWxldGUgY2hpbGRQcm9wcy5vbkVudGVyaW5nO1xuICAgIGRlbGV0ZSBjaGlsZFByb3BzLm9uRW50ZXJlZDtcbiAgICBkZWxldGUgY2hpbGRQcm9wcy5vbkV4aXQ7XG4gICAgZGVsZXRlIGNoaWxkUHJvcHMub25FeGl0aW5nO1xuICAgIGRlbGV0ZSBjaGlsZFByb3BzLm9uRXhpdGVkO1xuXG4gICAgaWYgKHR5cGVvZiBjaGlsZHJlbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmV0dXJuIGNoaWxkcmVuKHN0YXR1cywgY2hpbGRQcm9wcyk7XG4gICAgfVxuXG4gICAgdmFyIGNoaWxkID0gX3JlYWN0Mi5kZWZhdWx0LkNoaWxkcmVuLm9ubHkoY2hpbGRyZW4pO1xuICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY2xvbmVFbGVtZW50KGNoaWxkLCBjaGlsZFByb3BzKTtcbiAgfTtcblxuICByZXR1cm4gVHJhbnNpdGlvbjtcbn0oX3JlYWN0Mi5kZWZhdWx0LkNvbXBvbmVudCk7XG5cblRyYW5zaXRpb24uY29udGV4dFR5cGVzID0ge1xuICB0cmFuc2l0aW9uR3JvdXA6IFByb3BUeXBlcy5vYmplY3Rcbn07XG5UcmFuc2l0aW9uLmNoaWxkQ29udGV4dFR5cGVzID0ge1xuICB0cmFuc2l0aW9uR3JvdXA6IGZ1bmN0aW9uIHRyYW5zaXRpb25Hcm91cCgpIHt9XG59O1xuXG5cblRyYW5zaXRpb24ucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKipcbiAgICogQSBgZnVuY3Rpb25gIGNoaWxkIGNhbiBiZSB1c2VkIGluc3RlYWQgb2YgYSBSZWFjdCBlbGVtZW50LlxuICAgKiBUaGlzIGZ1bmN0aW9uIGlzIGNhbGxlZCB3aXRoIHRoZSBjdXJyZW50IHRyYW5zaXRpb24gc3RhdHVzXG4gICAqICgnZW50ZXJpbmcnLCAnZW50ZXJlZCcsICdleGl0aW5nJywgJ2V4aXRlZCcsICd1bm1vdW50ZWQnKSwgd2hpY2ggY2FuIGJlIHVzZWRcbiAgICogdG8gYXBwbHkgY29udGV4dCBzcGVjaWZpYyBwcm9wcyB0byBhIGNvbXBvbmVudC5cbiAgICpcbiAgICogYGBganN4XG4gICAqIDxUcmFuc2l0aW9uIHRpbWVvdXQ9ezE1MH0+XG4gICAqICAgeyhzdGF0dXMpID0+IChcbiAgICogICAgIDxNeUNvbXBvbmVudCBjbGFzc05hbWU9e2BmYWRlIGZhZGUtJHtzdGF0dXN9YH0gLz5cbiAgICogICApfVxuICAgKiA8L1RyYW5zaXRpb24+XG4gICAqIGBgYFxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsIFByb3BUeXBlcy5lbGVtZW50LmlzUmVxdWlyZWRdKS5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBTaG93IHRoZSBjb21wb25lbnQ7IHRyaWdnZXJzIHRoZSBlbnRlciBvciBleGl0IHN0YXRlc1xuICAgKi9cbiAgaW46IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBCeSBkZWZhdWx0IHRoZSBjaGlsZCBjb21wb25lbnQgaXMgbW91bnRlZCBpbW1lZGlhdGVseSBhbG9uZyB3aXRoXG4gICAqIHRoZSBwYXJlbnQgYFRyYW5zaXRpb25gIGNvbXBvbmVudC4gSWYgeW91IHdhbnQgdG8gXCJsYXp5IG1vdW50XCIgdGhlIGNvbXBvbmVudCBvbiB0aGVcbiAgICogZmlyc3QgYGluPXt0cnVlfWAgeW91IGNhbiBzZXQgYG1vdW50T25FbnRlcmAuIEFmdGVyIHRoZSBmaXJzdCBlbnRlciB0cmFuc2l0aW9uIHRoZSBjb21wb25lbnQgd2lsbCBzdGF5XG4gICAqIG1vdW50ZWQsIGV2ZW4gb24gXCJleGl0ZWRcIiwgdW5sZXNzIHlvdSBhbHNvIHNwZWNpZnkgYHVubW91bnRPbkV4aXRgLlxuICAgKi9cbiAgbW91bnRPbkVudGVyOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQnkgZGVmYXVsdCB0aGUgY2hpbGQgY29tcG9uZW50IHN0YXlzIG1vdW50ZWQgYWZ0ZXIgaXQgcmVhY2hlcyB0aGUgYCdleGl0ZWQnYCBzdGF0ZS5cbiAgICogU2V0IGB1bm1vdW50T25FeGl0YCBpZiB5b3UnZCBwcmVmZXIgdG8gdW5tb3VudCB0aGUgY29tcG9uZW50IGFmdGVyIGl0IGZpbmlzaGVzIGV4aXRpbmcuXG4gICAqL1xuICB1bm1vdW50T25FeGl0OiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogTm9ybWFsbHkgYSBjb21wb25lbnQgaXMgbm90IHRyYW5zaXRpb25lZCBpZiBpdCBpcyBzaG93biB3aGVuIHRoZSBgPFRyYW5zaXRpb24+YCBjb21wb25lbnQgbW91bnRzLlxuICAgKiBJZiB5b3Ugd2FudCB0byB0cmFuc2l0aW9uIG9uIHRoZSBmaXJzdCBtb3VudCBzZXQgYGFwcGVhcmAgdG8gYHRydWVgLCBhbmQgdGhlXG4gICAqIGNvbXBvbmVudCB3aWxsIHRyYW5zaXRpb24gaW4gYXMgc29vbiBhcyB0aGUgYDxUcmFuc2l0aW9uPmAgbW91bnRzLlxuICAgKlxuICAgKiA+IE5vdGU6IHRoZXJlIGFyZSBubyBzcGVjaWZpYyBcImFwcGVhclwiIHN0YXRlcy4gYGFwcGVhcmAgb25seSBhZGRzIGFuIGFkZGl0aW9uYWwgYGVudGVyYCB0cmFuc2l0aW9uLlxuICAgKi9cbiAgYXBwZWFyOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogRW5hYmxlIG9yIGRpc2FibGUgZW50ZXIgdHJhbnNpdGlvbnMuXG4gICAqL1xuICBlbnRlcjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEVuYWJsZSBvciBkaXNhYmxlIGV4aXQgdHJhbnNpdGlvbnMuXG4gICAqL1xuICBleGl0OiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogVGhlIGR1cmF0aW9uIG9mIHRoZSB0cmFuc2l0aW9uLCBpbiBtaWxsaXNlY29uZHMuXG4gICAqIFJlcXVpcmVkIHVubGVzcyBgYWRkRW5kTGlzdGVuZXJgIGlzIHByb3ZpZGVkXG4gICAqXG4gICAqIFlvdSBtYXkgc3BlY2lmeSBhIHNpbmdsZSB0aW1lb3V0IGZvciBhbGwgdHJhbnNpdGlvbnMgbGlrZTogYHRpbWVvdXQ9ezUwMH1gLFxuICAgKiBvciBpbmRpdmlkdWFsbHkgbGlrZTpcbiAgICpcbiAgICogYGBganN4XG4gICAqIHRpbWVvdXQ9e3tcbiAgICogIGVudGVyOiAzMDAsXG4gICAqICBleGl0OiA1MDAsXG4gICAqIH19XG4gICAqIGBgYFxuICAgKlxuICAgKiBAdHlwZSB7bnVtYmVyIHwgeyBlbnRlcj86IG51bWJlciwgZXhpdD86IG51bWJlciB9fVxuICAgKi9cbiAgdGltZW91dDogZnVuY3Rpb24gdGltZW91dChwcm9wcykge1xuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLCBfa2V5ID0gMTsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgdmFyIHB0ID0gX1Byb3BUeXBlcy50aW1lb3V0c1NoYXBlO1xuICAgIGlmICghcHJvcHMuYWRkRW5kTGlzdGVuZXIpIHB0ID0gcHQuaXNSZXF1aXJlZDtcbiAgICByZXR1cm4gcHQuYXBwbHkodW5kZWZpbmVkLCBbcHJvcHNdLmNvbmNhdChhcmdzKSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEFkZCBhIGN1c3RvbSB0cmFuc2l0aW9uIGVuZCB0cmlnZ2VyLiBDYWxsZWQgd2l0aCB0aGUgdHJhbnNpdGlvbmluZ1xuICAgKiBET00gbm9kZSBhbmQgYSBgZG9uZWAgY2FsbGJhY2suIEFsbG93cyBmb3IgbW9yZSBmaW5lIGdyYWluZWQgdHJhbnNpdGlvbiBlbmRcbiAgICogbG9naWMuICoqTm90ZToqKiBUaW1lb3V0cyBhcmUgc3RpbGwgdXNlZCBhcyBhIGZhbGxiYWNrIGlmIHByb3ZpZGVkLlxuICAgKlxuICAgKiBgYGBqc3hcbiAgICogYWRkRW5kTGlzdGVuZXI9eyhub2RlLCBkb25lKSA9PiB7XG4gICAqICAgLy8gdXNlIHRoZSBjc3MgdHJhbnNpdGlvbmVuZCBldmVudCB0byBtYXJrIHRoZSBmaW5pc2ggb2YgYSB0cmFuc2l0aW9uXG4gICAqICAgbm9kZS5hZGRFdmVudExpc3RlbmVyKCd0cmFuc2l0aW9uZW5kJywgZG9uZSwgZmFsc2UpO1xuICAgKiB9fVxuICAgKiBgYGBcbiAgICovXG4gIGFkZEVuZExpc3RlbmVyOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgYmVmb3JlIHRoZSBcImVudGVyaW5nXCIgc3RhdHVzIGlzIGFwcGxpZWQuIEFuIGV4dHJhIHBhcmFtZXRlclxuICAgKiBgaXNBcHBlYXJpbmdgIGlzIHN1cHBsaWVkIHRvIGluZGljYXRlIGlmIHRoZSBlbnRlciBzdGFnZSBpcyBvY2N1cnJpbmcgb24gdGhlIGluaXRpYWwgbW91bnRcbiAgICpcbiAgICogQHR5cGUgRnVuY3Rpb24obm9kZTogSHRtbEVsZW1lbnQsIGlzQXBwZWFyaW5nOiBib29sKSAtPiB2b2lkXG4gICAqL1xuICBvbkVudGVyOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgYWZ0ZXIgdGhlIFwiZW50ZXJpbmdcIiBzdGF0dXMgaXMgYXBwbGllZC4gQW4gZXh0cmEgcGFyYW1ldGVyXG4gICAqIGBpc0FwcGVhcmluZ2AgaXMgc3VwcGxpZWQgdG8gaW5kaWNhdGUgaWYgdGhlIGVudGVyIHN0YWdlIGlzIG9jY3VycmluZyBvbiB0aGUgaW5pdGlhbCBtb3VudFxuICAgKlxuICAgKiBAdHlwZSBGdW5jdGlvbihub2RlOiBIdG1sRWxlbWVudCwgaXNBcHBlYXJpbmc6IGJvb2wpXG4gICAqL1xuICBvbkVudGVyaW5nOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgYWZ0ZXIgdGhlIFwiZW50ZXJlZFwiIHN0YXR1cyBpcyBhcHBsaWVkLiBBbiBleHRyYSBwYXJhbWV0ZXJcbiAgICogYGlzQXBwZWFyaW5nYCBpcyBzdXBwbGllZCB0byBpbmRpY2F0ZSBpZiB0aGUgZW50ZXIgc3RhZ2UgaXMgb2NjdXJyaW5nIG9uIHRoZSBpbml0aWFsIG1vdW50XG4gICAqXG4gICAqIEB0eXBlIEZ1bmN0aW9uKG5vZGU6IEh0bWxFbGVtZW50LCBpc0FwcGVhcmluZzogYm9vbCkgLT4gdm9pZFxuICAgKi9cbiAgb25FbnRlcmVkOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgYmVmb3JlIHRoZSBcImV4aXRpbmdcIiBzdGF0dXMgaXMgYXBwbGllZC5cbiAgICpcbiAgICogQHR5cGUgRnVuY3Rpb24obm9kZTogSHRtbEVsZW1lbnQpIC0+IHZvaWRcbiAgICovXG4gIG9uRXhpdDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGFmdGVyIHRoZSBcImV4aXRpbmdcIiBzdGF0dXMgaXMgYXBwbGllZC5cbiAgICpcbiAgICogQHR5cGUgRnVuY3Rpb24obm9kZTogSHRtbEVsZW1lbnQpIC0+IHZvaWRcbiAgICovXG4gIG9uRXhpdGluZzogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGFmdGVyIHRoZSBcImV4aXRlZFwiIHN0YXR1cyBpcyBhcHBsaWVkLlxuICAgKlxuICAgKiBAdHlwZSBGdW5jdGlvbihub2RlOiBIdG1sRWxlbWVudCkgLT4gdm9pZFxuICAgKi9cbiAgb25FeGl0ZWQ6IFByb3BUeXBlcy5mdW5jXG59IDoge307XG5cbi8vIE5hbWUgdGhlIGZ1bmN0aW9uIHNvIGl0IGlzIGNsZWFyZXIgaW4gdGhlIGRvY3VtZW50YXRpb25cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5UcmFuc2l0aW9uLmRlZmF1bHRQcm9wcyA9IHtcbiAgaW46IGZhbHNlLFxuICBtb3VudE9uRW50ZXI6IGZhbHNlLFxuICB1bm1vdW50T25FeGl0OiBmYWxzZSxcbiAgYXBwZWFyOiBmYWxzZSxcbiAgZW50ZXI6IHRydWUsXG4gIGV4aXQ6IHRydWUsXG5cbiAgb25FbnRlcjogbm9vcCxcbiAgb25FbnRlcmluZzogbm9vcCxcbiAgb25FbnRlcmVkOiBub29wLFxuXG4gIG9uRXhpdDogbm9vcCxcbiAgb25FeGl0aW5nOiBub29wLFxuICBvbkV4aXRlZDogbm9vcFxufTtcblxuVHJhbnNpdGlvbi5VTk1PVU5URUQgPSAwO1xuVHJhbnNpdGlvbi5FWElURUQgPSAxO1xuVHJhbnNpdGlvbi5FTlRFUklORyA9IDI7XG5UcmFuc2l0aW9uLkVOVEVSRUQgPSAzO1xuVHJhbnNpdGlvbi5FWElUSU5HID0gNDtcblxuZXhwb3J0cy5kZWZhdWx0ID0gVHJhbnNpdGlvbjsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSAhISh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuZG9jdW1lbnQgJiYgd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107IiwiLy8gU291cmNlOiBodHRwOi8vanNmaWRkbGUubmV0L3ZXeDhWL1xuLy8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy81NjAzMTk1L2Z1bGwtbGlzdC1vZi1qYXZhc2NyaXB0LWtleWNvZGVzXG5cbi8qKlxuICogQ29uZW5pZW5jZSBtZXRob2QgcmV0dXJucyBjb3JyZXNwb25kaW5nIHZhbHVlIGZvciBnaXZlbiBrZXlOYW1lIG9yIGtleUNvZGUuXG4gKlxuICogQHBhcmFtIHtNaXhlZH0ga2V5Q29kZSB7TnVtYmVyfSBvciBrZXlOYW1lIHtTdHJpbmd9XG4gKiBAcmV0dXJuIHtNaXhlZH1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24ga2V5Q29kZShzZWFyY2hJbnB1dCkge1xuICAvLyBLZXlib2FyZCBFdmVudHNcbiAgaWYgKHNlYXJjaElucHV0ICYmICdvYmplY3QnID09PSB0eXBlb2Ygc2VhcmNoSW5wdXQpIHtcbiAgICB2YXIgaGFzS2V5Q29kZSA9IHNlYXJjaElucHV0LndoaWNoIHx8IHNlYXJjaElucHV0LmtleUNvZGUgfHwgc2VhcmNoSW5wdXQuY2hhckNvZGVcbiAgICBpZiAoaGFzS2V5Q29kZSkgc2VhcmNoSW5wdXQgPSBoYXNLZXlDb2RlXG4gIH1cblxuICAvLyBOdW1iZXJzXG4gIGlmICgnbnVtYmVyJyA9PT0gdHlwZW9mIHNlYXJjaElucHV0KSByZXR1cm4gbmFtZXNbc2VhcmNoSW5wdXRdXG5cbiAgLy8gRXZlcnl0aGluZyBlbHNlIChjYXN0IHRvIHN0cmluZylcbiAgdmFyIHNlYXJjaCA9IFN0cmluZyhzZWFyY2hJbnB1dClcblxuICAvLyBjaGVjayBjb2Rlc1xuICB2YXIgZm91bmROYW1lZEtleSA9IGNvZGVzW3NlYXJjaC50b0xvd2VyQ2FzZSgpXVxuICBpZiAoZm91bmROYW1lZEtleSkgcmV0dXJuIGZvdW5kTmFtZWRLZXlcblxuICAvLyBjaGVjayBhbGlhc2VzXG4gIHZhciBmb3VuZE5hbWVkS2V5ID0gYWxpYXNlc1tzZWFyY2gudG9Mb3dlckNhc2UoKV1cbiAgaWYgKGZvdW5kTmFtZWRLZXkpIHJldHVybiBmb3VuZE5hbWVkS2V5XG5cbiAgLy8gd2VpcmQgY2hhcmFjdGVyP1xuICBpZiAoc2VhcmNoLmxlbmd0aCA9PT0gMSkgcmV0dXJuIHNlYXJjaC5jaGFyQ29kZUF0KDApXG5cbiAgcmV0dXJuIHVuZGVmaW5lZFxufVxuXG4vKipcbiAqIENvbXBhcmVzIGEga2V5Ym9hcmQgZXZlbnQgd2l0aCBhIGdpdmVuIGtleUNvZGUgb3Iga2V5TmFtZS5cbiAqXG4gKiBAcGFyYW0ge0V2ZW50fSBldmVudCBLZXlib2FyZCBldmVudCB0aGF0IHNob3VsZCBiZSB0ZXN0ZWRcbiAqIEBwYXJhbSB7TWl4ZWR9IGtleUNvZGUge051bWJlcn0gb3Iga2V5TmFtZSB7U3RyaW5nfVxuICogQHJldHVybiB7Qm9vbGVhbn1cbiAqIEBhcGkgcHVibGljXG4gKi9cbmtleUNvZGUuaXNFdmVudEtleSA9IGZ1bmN0aW9uIGlzRXZlbnRLZXkoZXZlbnQsIG5hbWVPckNvZGUpIHtcbiAgaWYgKGV2ZW50ICYmICdvYmplY3QnID09PSB0eXBlb2YgZXZlbnQpIHtcbiAgICB2YXIga2V5Q29kZSA9IGV2ZW50LndoaWNoIHx8IGV2ZW50LmtleUNvZGUgfHwgZXZlbnQuY2hhckNvZGVcbiAgICBpZiAoa2V5Q29kZSA9PT0gbnVsbCB8fCBrZXlDb2RlID09PSB1bmRlZmluZWQpIHsgcmV0dXJuIGZhbHNlOyB9XG4gICAgaWYgKHR5cGVvZiBuYW1lT3JDb2RlID09PSAnc3RyaW5nJykge1xuICAgICAgLy8gY2hlY2sgY29kZXNcbiAgICAgIHZhciBmb3VuZE5hbWVkS2V5ID0gY29kZXNbbmFtZU9yQ29kZS50b0xvd2VyQ2FzZSgpXVxuICAgICAgaWYgKGZvdW5kTmFtZWRLZXkpIHsgcmV0dXJuIGZvdW5kTmFtZWRLZXkgPT09IGtleUNvZGU7IH1cbiAgICBcbiAgICAgIC8vIGNoZWNrIGFsaWFzZXNcbiAgICAgIHZhciBmb3VuZE5hbWVkS2V5ID0gYWxpYXNlc1tuYW1lT3JDb2RlLnRvTG93ZXJDYXNlKCldXG4gICAgICBpZiAoZm91bmROYW1lZEtleSkgeyByZXR1cm4gZm91bmROYW1lZEtleSA9PT0ga2V5Q29kZTsgfVxuICAgIH0gZWxzZSBpZiAodHlwZW9mIG5hbWVPckNvZGUgPT09ICdudW1iZXInKSB7XG4gICAgICByZXR1cm4gbmFtZU9yQ29kZSA9PT0ga2V5Q29kZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbmV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IGtleUNvZGU7XG5cbi8qKlxuICogR2V0IGJ5IG5hbWVcbiAqXG4gKiAgIGV4cG9ydHMuY29kZVsnZW50ZXInXSAvLyA9PiAxM1xuICovXG5cbnZhciBjb2RlcyA9IGV4cG9ydHMuY29kZSA9IGV4cG9ydHMuY29kZXMgPSB7XG4gICdiYWNrc3BhY2UnOiA4LFxuICAndGFiJzogOSxcbiAgJ2VudGVyJzogMTMsXG4gICdzaGlmdCc6IDE2LFxuICAnY3RybCc6IDE3LFxuICAnYWx0JzogMTgsXG4gICdwYXVzZS9icmVhayc6IDE5LFxuICAnY2FwcyBsb2NrJzogMjAsXG4gICdlc2MnOiAyNyxcbiAgJ3NwYWNlJzogMzIsXG4gICdwYWdlIHVwJzogMzMsXG4gICdwYWdlIGRvd24nOiAzNCxcbiAgJ2VuZCc6IDM1LFxuICAnaG9tZSc6IDM2LFxuICAnbGVmdCc6IDM3LFxuICAndXAnOiAzOCxcbiAgJ3JpZ2h0JzogMzksXG4gICdkb3duJzogNDAsXG4gICdpbnNlcnQnOiA0NSxcbiAgJ2RlbGV0ZSc6IDQ2LFxuICAnY29tbWFuZCc6IDkxLFxuICAnbGVmdCBjb21tYW5kJzogOTEsXG4gICdyaWdodCBjb21tYW5kJzogOTMsXG4gICdudW1wYWQgKic6IDEwNixcbiAgJ251bXBhZCArJzogMTA3LFxuICAnbnVtcGFkIC0nOiAxMDksXG4gICdudW1wYWQgLic6IDExMCxcbiAgJ251bXBhZCAvJzogMTExLFxuICAnbnVtIGxvY2snOiAxNDQsXG4gICdzY3JvbGwgbG9jayc6IDE0NSxcbiAgJ215IGNvbXB1dGVyJzogMTgyLFxuICAnbXkgY2FsY3VsYXRvcic6IDE4MyxcbiAgJzsnOiAxODYsXG4gICc9JzogMTg3LFxuICAnLCc6IDE4OCxcbiAgJy0nOiAxODksXG4gICcuJzogMTkwLFxuICAnLyc6IDE5MSxcbiAgJ2AnOiAxOTIsXG4gICdbJzogMjE5LFxuICAnXFxcXCc6IDIyMCxcbiAgJ10nOiAyMjEsXG4gIFwiJ1wiOiAyMjJcbn1cblxuLy8gSGVscGVyIGFsaWFzZXNcblxudmFyIGFsaWFzZXMgPSBleHBvcnRzLmFsaWFzZXMgPSB7XG4gICd3aW5kb3dzJzogOTEsXG4gICfih6cnOiAxNixcbiAgJ+KMpSc6IDE4LFxuICAn4oyDJzogMTcsXG4gICfijJgnOiA5MSxcbiAgJ2N0bCc6IDE3LFxuICAnY29udHJvbCc6IDE3LFxuICAnb3B0aW9uJzogMTgsXG4gICdwYXVzZSc6IDE5LFxuICAnYnJlYWsnOiAxOSxcbiAgJ2NhcHMnOiAyMCxcbiAgJ3JldHVybic6IDEzLFxuICAnZXNjYXBlJzogMjcsXG4gICdzcGMnOiAzMixcbiAgJ3NwYWNlYmFyJzogMzIsXG4gICdwZ3VwJzogMzMsXG4gICdwZ2RuJzogMzQsXG4gICdpbnMnOiA0NSxcbiAgJ2RlbCc6IDQ2LFxuICAnY21kJzogOTFcbn1cblxuLyohXG4gKiBQcm9ncmFtYXRpY2FsbHkgYWRkIHRoZSBmb2xsb3dpbmdcbiAqL1xuXG4vLyBsb3dlciBjYXNlIGNoYXJzXG5mb3IgKGkgPSA5NzsgaSA8IDEyMzsgaSsrKSBjb2Rlc1tTdHJpbmcuZnJvbUNoYXJDb2RlKGkpXSA9IGkgLSAzMlxuXG4vLyBudW1iZXJzXG5mb3IgKHZhciBpID0gNDg7IGkgPCA1ODsgaSsrKSBjb2Rlc1tpIC0gNDhdID0gaVxuXG4vLyBmdW5jdGlvbiBrZXlzXG5mb3IgKGkgPSAxOyBpIDwgMTM7IGkrKykgY29kZXNbJ2YnK2ldID0gaSArIDExMVxuXG4vLyBudW1wYWQga2V5c1xuZm9yIChpID0gMDsgaSA8IDEwOyBpKyspIGNvZGVzWydudW1wYWQgJytpXSA9IGkgKyA5NlxuXG4vKipcbiAqIEdldCBieSBjb2RlXG4gKlxuICogICBleHBvcnRzLm5hbWVbMTNdIC8vID0+ICdFbnRlcidcbiAqL1xuXG52YXIgbmFtZXMgPSBleHBvcnRzLm5hbWVzID0gZXhwb3J0cy50aXRsZSA9IHt9IC8vIHRpdGxlIGZvciBiYWNrd2FyZCBjb21wYXRcblxuLy8gQ3JlYXRlIHJldmVyc2UgbWFwcGluZ1xuZm9yIChpIGluIGNvZGVzKSBuYW1lc1tjb2Rlc1tpXV0gPSBpXG5cbi8vIEFkZCBhbGlhc2VzXG5mb3IgKHZhciBhbGlhcyBpbiBhbGlhc2VzKSB7XG4gIGNvZGVzW2FsaWFzXSA9IGFsaWFzZXNbYWxpYXNdXG59XG4iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbnZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF93YXJuaW5nID0gcmVxdWlyZSgnd2FybmluZycpO1xuXG52YXIgX3dhcm5pbmcyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfd2FybmluZyk7XG5cbnZhciBfdG9Dc3MgPSByZXF1aXJlKCcuLi91dGlscy90b0NzcycpO1xuXG52YXIgX3RvQ3NzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3RvQ3NzKTtcblxudmFyIF90b0Nzc1ZhbHVlID0gcmVxdWlyZSgnLi4vdXRpbHMvdG9Dc3NWYWx1ZScpO1xuXG52YXIgX3RvQ3NzVmFsdWUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdG9Dc3NWYWx1ZSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxudmFyIFN0eWxlUnVsZSA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gU3R5bGVSdWxlKGtleSwgc3R5bGUsIG9wdGlvbnMpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU3R5bGVSdWxlKTtcblxuICAgIHRoaXMudHlwZSA9ICdzdHlsZSc7XG4gICAgdGhpcy5pc1Byb2Nlc3NlZCA9IGZhbHNlO1xuICAgIHZhciBzaGVldCA9IG9wdGlvbnMuc2hlZXQsXG4gICAgICAgIFJlbmRlcmVyID0gb3B0aW9ucy5SZW5kZXJlcixcbiAgICAgICAgc2VsZWN0b3IgPSBvcHRpb25zLnNlbGVjdG9yO1xuXG4gICAgdGhpcy5rZXkgPSBrZXk7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICB0aGlzLnN0eWxlID0gc3R5bGU7XG4gICAgaWYgKHNlbGVjdG9yKSB0aGlzLnNlbGVjdG9yVGV4dCA9IHNlbGVjdG9yO1xuICAgIHRoaXMucmVuZGVyZXIgPSBzaGVldCA/IHNoZWV0LnJlbmRlcmVyIDogbmV3IFJlbmRlcmVyKCk7XG4gIH1cblxuICAvKipcbiAgICogU2V0IHNlbGVjdG9yIHN0cmluZy5cbiAgICogQXR0ZW50aW9uOiB1c2UgdGhpcyB3aXRoIGNhdXRpb24uIE1vc3QgYnJvd3NlcnMgZGlkbid0IGltcGxlbWVudFxuICAgKiBzZWxlY3RvclRleHQgc2V0dGVyLCBzbyB0aGlzIG1heSByZXN1bHQgaW4gcmVyZW5kZXJpbmcgb2YgZW50aXJlIFN0eWxlIFNoZWV0LlxuICAgKi9cblxuXG4gIF9jcmVhdGVDbGFzcyhTdHlsZVJ1bGUsIFt7XG4gICAga2V5OiAncHJvcCcsXG5cblxuICAgIC8qKlxuICAgICAqIEdldCBvciBzZXQgYSBzdHlsZSBwcm9wZXJ0eS5cbiAgICAgKi9cbiAgICB2YWx1ZTogZnVuY3Rpb24gcHJvcChuYW1lLCB2YWx1ZSkge1xuICAgICAgLy8gSXQncyBhIGdldHRlci5cbiAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSByZXR1cm4gdGhpcy5zdHlsZVtuYW1lXTtcblxuICAgICAgLy8gRG9uJ3QgZG8gYW55dGhpbmcgaWYgdGhlIHZhbHVlIGhhcyBub3QgY2hhbmdlZC5cbiAgICAgIGlmICh0aGlzLnN0eWxlW25hbWVdID09PSB2YWx1ZSkgcmV0dXJuIHRoaXM7XG5cbiAgICAgIHZhbHVlID0gdGhpcy5vcHRpb25zLmpzcy5wbHVnaW5zLm9uQ2hhbmdlVmFsdWUodmFsdWUsIG5hbWUsIHRoaXMpO1xuXG4gICAgICB2YXIgaXNFbXB0eSA9IHZhbHVlID09IG51bGwgfHwgdmFsdWUgPT09IGZhbHNlO1xuICAgICAgdmFyIGlzRGVmaW5lZCA9IG5hbWUgaW4gdGhpcy5zdHlsZTtcblxuICAgICAgLy8gVmFsdWUgaXMgZW1wdHkgYW5kIHdhc24ndCBkZWZpbmVkIGJlZm9yZS5cbiAgICAgIGlmIChpc0VtcHR5ICYmICFpc0RlZmluZWQpIHJldHVybiB0aGlzO1xuXG4gICAgICAvLyBXZSBhcmUgZ29pbmcgdG8gcmVtb3ZlIHRoaXMgdmFsdWUuXG4gICAgICB2YXIgcmVtb3ZlID0gaXNFbXB0eSAmJiBpc0RlZmluZWQ7XG5cbiAgICAgIGlmIChyZW1vdmUpIGRlbGV0ZSB0aGlzLnN0eWxlW25hbWVdO2Vsc2UgdGhpcy5zdHlsZVtuYW1lXSA9IHZhbHVlO1xuXG4gICAgICAvLyBSZW5kZXJhYmxlIGlzIGRlZmluZWQgaWYgU3R5bGVTaGVldCBvcHRpb24gYGxpbmtgIGlzIHRydWUuXG4gICAgICBpZiAodGhpcy5yZW5kZXJhYmxlKSB7XG4gICAgICAgIGlmIChyZW1vdmUpIHRoaXMucmVuZGVyZXIucmVtb3ZlUHJvcGVydHkodGhpcy5yZW5kZXJhYmxlLCBuYW1lKTtlbHNlIHRoaXMucmVuZGVyZXIuc2V0UHJvcGVydHkodGhpcy5yZW5kZXJhYmxlLCBuYW1lLCB2YWx1ZSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICB2YXIgc2hlZXQgPSB0aGlzLm9wdGlvbnMuc2hlZXQ7XG5cbiAgICAgIGlmIChzaGVldCAmJiBzaGVldC5hdHRhY2hlZCkge1xuICAgICAgICAoMCwgX3dhcm5pbmcyWydkZWZhdWx0J10pKGZhbHNlLCAnUnVsZSBpcyBub3QgbGlua2VkLiBNaXNzaW5nIHNoZWV0IG9wdGlvbiBcImxpbms6IHRydWVcIi4nKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFwcGx5IHJ1bGUgdG8gYW4gZWxlbWVudCBpbmxpbmUuXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2FwcGx5VG8nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBhcHBseVRvKHJlbmRlcmFibGUpIHtcbiAgICAgIHZhciBqc29uID0gdGhpcy50b0pTT04oKTtcbiAgICAgIGZvciAodmFyIHByb3AgaW4ganNvbikge1xuICAgICAgICB0aGlzLnJlbmRlcmVyLnNldFByb3BlcnR5KHJlbmRlcmFibGUsIHByb3AsIGpzb25bcHJvcF0pO1xuICAgICAgfXJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgSlNPTiByZXByZXNlbnRhdGlvbiBvZiB0aGUgcnVsZS5cbiAgICAgKiBGYWxsYmFja3MgYXJlIG5vdCBzdXBwb3J0ZWQuXG4gICAgICogVXNlZnVsIGZvciBpbmxpbmUgc3R5bGVzLlxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICd0b0pTT04nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB0b0pTT04oKSB7XG4gICAgICB2YXIganNvbiA9IHt9O1xuICAgICAgZm9yICh2YXIgcHJvcCBpbiB0aGlzLnN0eWxlKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IHRoaXMuc3R5bGVbcHJvcF07XG4gICAgICAgIGlmICgodHlwZW9mIHZhbHVlID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZih2YWx1ZSkpICE9PSAnb2JqZWN0JykganNvbltwcm9wXSA9IHZhbHVlO2Vsc2UgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSBqc29uW3Byb3BdID0gKDAsIF90b0Nzc1ZhbHVlMlsnZGVmYXVsdCddKSh2YWx1ZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4ganNvbjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZW5lcmF0ZXMgYSBDU1Mgc3RyaW5nLlxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICd0b1N0cmluZycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHRvU3RyaW5nKG9wdGlvbnMpIHtcbiAgICAgIHZhciBzaGVldCA9IHRoaXMub3B0aW9ucy5zaGVldDtcblxuICAgICAgdmFyIGxpbmsgPSBzaGVldCA/IHNoZWV0Lm9wdGlvbnMubGluayA6IGZhbHNlO1xuICAgICAgdmFyIG9wdHMgPSBsaW5rID8gX2V4dGVuZHMoe30sIG9wdGlvbnMsIHsgYWxsb3dFbXB0eTogdHJ1ZSB9KSA6IG9wdGlvbnM7XG4gICAgICByZXR1cm4gKDAsIF90b0NzczJbJ2RlZmF1bHQnXSkodGhpcy5zZWxlY3RvciwgdGhpcy5zdHlsZSwgb3B0cyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnc2VsZWN0b3InLFxuICAgIHNldDogZnVuY3Rpb24gc2V0KHNlbGVjdG9yKSB7XG4gICAgICBpZiAoc2VsZWN0b3IgPT09IHRoaXMuc2VsZWN0b3JUZXh0KSByZXR1cm47XG5cbiAgICAgIHRoaXMuc2VsZWN0b3JUZXh0ID0gc2VsZWN0b3I7XG5cbiAgICAgIGlmICghdGhpcy5yZW5kZXJhYmxlKSByZXR1cm47XG5cbiAgICAgIHZhciBoYXNDaGFuZ2VkID0gdGhpcy5yZW5kZXJlci5zZXRTZWxlY3Rvcih0aGlzLnJlbmRlcmFibGUsIHNlbGVjdG9yKTtcblxuICAgICAgLy8gSWYgc2VsZWN0b3Igc2V0dGVyIGlzIG5vdCBpbXBsZW1lbnRlZCwgcmVyZW5kZXIgdGhlIHJ1bGUuXG4gICAgICBpZiAoIWhhc0NoYW5nZWQgJiYgdGhpcy5yZW5kZXJhYmxlKSB7XG4gICAgICAgIHZhciByZW5kZXJhYmxlID0gdGhpcy5yZW5kZXJlci5yZXBsYWNlUnVsZSh0aGlzLnJlbmRlcmFibGUsIHRoaXMpO1xuICAgICAgICBpZiAocmVuZGVyYWJsZSkgdGhpcy5yZW5kZXJhYmxlID0gcmVuZGVyYWJsZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgc2VsZWN0b3Igc3RyaW5nLlxuICAgICAqL1xuICAgICxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLnNlbGVjdG9yVGV4dDtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gU3R5bGVSdWxlO1xufSgpO1xuXG5leHBvcnRzWydkZWZhdWx0J10gPSBTdHlsZVJ1bGU7IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxNC0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFNpbWlsYXIgdG8gaW52YXJpYW50IGJ1dCBvbmx5IGxvZ3MgYSB3YXJuaW5nIGlmIHRoZSBjb25kaXRpb24gaXMgbm90IG1ldC5cbiAqIFRoaXMgY2FuIGJlIHVzZWQgdG8gbG9nIGlzc3VlcyBpbiBkZXZlbG9wbWVudCBlbnZpcm9ubWVudHMgaW4gY3JpdGljYWxcbiAqIHBhdGhzLiBSZW1vdmluZyB0aGUgbG9nZ2luZyBjb2RlIGZvciBwcm9kdWN0aW9uIGVudmlyb25tZW50cyB3aWxsIGtlZXAgdGhlXG4gKiBzYW1lIGxvZ2ljIGFuZCBmb2xsb3cgdGhlIHNhbWUgY29kZSBwYXRocy5cbiAqL1xuXG52YXIgd2FybmluZyA9IGZ1bmN0aW9uKCkge307XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHdhcm5pbmcgPSBmdW5jdGlvbihjb25kaXRpb24sIGZvcm1hdCwgYXJncykge1xuICAgIHZhciBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIGFyZ3MgPSBuZXcgQXJyYXkobGVuID4gMiA/IGxlbiAtIDIgOiAwKTtcbiAgICBmb3IgKHZhciBrZXkgPSAyOyBrZXkgPCBsZW47IGtleSsrKSB7XG4gICAgICBhcmdzW2tleSAtIDJdID0gYXJndW1lbnRzW2tleV07XG4gICAgfVxuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnYHdhcm5pbmcoY29uZGl0aW9uLCBmb3JtYXQsIC4uLmFyZ3MpYCByZXF1aXJlcyBhIHdhcm5pbmcgJyArXG4gICAgICAgICdtZXNzYWdlIGFyZ3VtZW50J1xuICAgICAgKTtcbiAgICB9XG5cbiAgICBpZiAoZm9ybWF0Lmxlbmd0aCA8IDEwIHx8ICgvXltzXFxXXSokLykudGVzdChmb3JtYXQpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdUaGUgd2FybmluZyBmb3JtYXQgc2hvdWxkIGJlIGFibGUgdG8gdW5pcXVlbHkgaWRlbnRpZnkgdGhpcyAnICtcbiAgICAgICAgJ3dhcm5pbmcuIFBsZWFzZSwgdXNlIGEgbW9yZSBkZXNjcmlwdGl2ZSBmb3JtYXQgdGhhbjogJyArIGZvcm1hdFxuICAgICAgKTtcbiAgICB9XG5cbiAgICBpZiAoIWNvbmRpdGlvbikge1xuICAgICAgdmFyIGFyZ0luZGV4ID0gMDtcbiAgICAgIHZhciBtZXNzYWdlID0gJ1dhcm5pbmc6ICcgK1xuICAgICAgICBmb3JtYXQucmVwbGFjZSgvJXMvZywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIGFyZ3NbYXJnSW5kZXgrK107XG4gICAgICAgIH0pO1xuICAgICAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBjb25zb2xlLmVycm9yKG1lc3NhZ2UpO1xuICAgICAgfVxuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gVGhpcyBlcnJvciB3YXMgdGhyb3duIGFzIGEgY29udmVuaWVuY2Ugc28gdGhhdCB5b3UgY2FuIHVzZSB0aGlzIHN0YWNrXG4gICAgICAgIC8vIHRvIGZpbmQgdGhlIGNhbGxzaXRlIHRoYXQgY2F1c2VkIHRoaXMgd2FybmluZyB0byBmaXJlLlxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gICAgICB9IGNhdGNoKHgpIHt9XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHdhcm5pbmc7XG4iLCJmdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHtcbiAgaWYgKHNlbGYgPT09IHZvaWQgMCkge1xuICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtcbiAgfVxuXG4gIHJldHVybiBzZWxmO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQ7IiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoIWlzT2JqZWN0KGl0KSkgdGhyb3cgVHlwZUVycm9yKGl0ICsgJyBpcyBub3QgYW4gb2JqZWN0IScpO1xuICByZXR1cm4gaXQ7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2dldERpc3BsYXlOYW1lID0gcmVxdWlyZSgnLi9nZXREaXNwbGF5TmFtZScpO1xuXG52YXIgX2dldERpc3BsYXlOYW1lMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2dldERpc3BsYXlOYW1lKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIHdyYXBEaXNwbGF5TmFtZSA9IGZ1bmN0aW9uIHdyYXBEaXNwbGF5TmFtZShCYXNlQ29tcG9uZW50LCBob2NOYW1lKSB7XG4gIHJldHVybiBob2NOYW1lICsgJygnICsgKDAsIF9nZXREaXNwbGF5TmFtZTIuZGVmYXVsdCkoQmFzZUNvbXBvbmVudCkgKyAnKSc7XG59O1xuXG5leHBvcnRzLmRlZmF1bHQgPSB3cmFwRGlzcGxheU5hbWU7IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG52YXIgX2NyZWF0ZVJ1bGUgPSByZXF1aXJlKCcuL3V0aWxzL2NyZWF0ZVJ1bGUnKTtcblxudmFyIF9jcmVhdGVSdWxlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZVJ1bGUpO1xuXG52YXIgX2xpbmtSdWxlID0gcmVxdWlyZSgnLi91dGlscy9saW5rUnVsZScpO1xuXG52YXIgX2xpbmtSdWxlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2xpbmtSdWxlKTtcblxudmFyIF9TdHlsZVJ1bGUgPSByZXF1aXJlKCcuL3J1bGVzL1N0eWxlUnVsZScpO1xuXG52YXIgX1N0eWxlUnVsZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9TdHlsZVJ1bGUpO1xuXG52YXIgX2VzY2FwZSA9IHJlcXVpcmUoJy4vdXRpbHMvZXNjYXBlJyk7XG5cbnZhciBfZXNjYXBlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2VzY2FwZSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuLyoqXG4gKiBDb250YWlucyBydWxlcyBvYmplY3RzIGFuZCBhbGxvd3MgYWRkaW5nL3JlbW92aW5nIGV0Yy5cbiAqIElzIHVzZWQgZm9yIGUuZy4gYnkgYFN0eWxlU2hlZXRgIG9yIGBDb25kaXRpb25hbFJ1bGVgLlxuICovXG52YXIgUnVsZUxpc3QgPSBmdW5jdGlvbiAoKSB7XG5cbiAgLy8gT3JpZ2luYWwgc3R5bGVzIG9iamVjdC5cbiAgZnVuY3Rpb24gUnVsZUxpc3Qob3B0aW9ucykge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUnVsZUxpc3QpO1xuXG4gICAgdGhpcy5tYXAgPSB7fTtcbiAgICB0aGlzLnJhdyA9IHt9O1xuICAgIHRoaXMuaW5kZXggPSBbXTtcblxuICAgIHRoaXMudXBkYXRlID0gZnVuY3Rpb24gKG5hbWUsIGRhdGEpIHtcbiAgICAgIHZhciBfb3B0aW9ucyA9IF90aGlzLm9wdGlvbnMsXG4gICAgICAgICAgcGx1Z2lucyA9IF9vcHRpb25zLmpzcy5wbHVnaW5zLFxuICAgICAgICAgIHNoZWV0ID0gX29wdGlvbnMuc2hlZXQ7XG5cbiAgICAgIGlmICh0eXBlb2YgbmFtZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcGx1Z2lucy5vblVwZGF0ZShkYXRhLCBfdGhpcy5nZXQobmFtZSksIHNoZWV0KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCBfdGhpcy5pbmRleC5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgICBwbHVnaW5zLm9uVXBkYXRlKG5hbWUsIF90aGlzLmluZGV4W2luZGV4XSwgc2hlZXQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgdGhpcy5jbGFzc2VzID0gb3B0aW9ucy5jbGFzc2VzO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhbmQgcmVnaXN0ZXIgcnVsZS5cbiAgICpcbiAgICogV2lsbCBub3QgcmVuZGVyIGFmdGVyIFN0eWxlIFNoZWV0IHdhcyByZW5kZXJlZCB0aGUgZmlyc3QgdGltZS5cbiAgICovXG5cblxuICAvLyBVc2VkIHRvIGVuc3VyZSBjb3JyZWN0IHJ1bGVzIG9yZGVyLlxuXG4gIC8vIFJ1bGVzIHJlZ2lzdHJ5IGZvciBhY2Nlc3MgYnkgLmdldCgpIG1ldGhvZC5cbiAgLy8gSXQgY29udGFpbnMgdGhlIHNhbWUgcnVsZSByZWdpc3RlcmVkIGJ5IG5hbWUgYW5kIGJ5IHNlbGVjdG9yLlxuXG5cbiAgX2NyZWF0ZUNsYXNzKFJ1bGVMaXN0LCBbe1xuICAgIGtleTogJ2FkZCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGFkZChuYW1lLCBkZWNsLCBvcHRpb25zKSB7XG4gICAgICB2YXIgX29wdGlvbnMyID0gdGhpcy5vcHRpb25zLFxuICAgICAgICAgIHBhcmVudCA9IF9vcHRpb25zMi5wYXJlbnQsXG4gICAgICAgICAgc2hlZXQgPSBfb3B0aW9uczIuc2hlZXQsXG4gICAgICAgICAganNzID0gX29wdGlvbnMyLmpzcyxcbiAgICAgICAgICBSZW5kZXJlciA9IF9vcHRpb25zMi5SZW5kZXJlcixcbiAgICAgICAgICBnZW5lcmF0ZUNsYXNzTmFtZSA9IF9vcHRpb25zMi5nZW5lcmF0ZUNsYXNzTmFtZTtcblxuXG4gICAgICBvcHRpb25zID0gX2V4dGVuZHMoe1xuICAgICAgICBjbGFzc2VzOiB0aGlzLmNsYXNzZXMsXG4gICAgICAgIHBhcmVudDogcGFyZW50LFxuICAgICAgICBzaGVldDogc2hlZXQsXG4gICAgICAgIGpzczoganNzLFxuICAgICAgICBSZW5kZXJlcjogUmVuZGVyZXIsXG4gICAgICAgIGdlbmVyYXRlQ2xhc3NOYW1lOiBnZW5lcmF0ZUNsYXNzTmFtZVxuICAgICAgfSwgb3B0aW9ucyk7XG5cbiAgICAgIGlmICghb3B0aW9ucy5zZWxlY3RvciAmJiB0aGlzLmNsYXNzZXNbbmFtZV0pIHtcbiAgICAgICAgb3B0aW9ucy5zZWxlY3RvciA9ICcuJyArICgwLCBfZXNjYXBlMlsnZGVmYXVsdCddKSh0aGlzLmNsYXNzZXNbbmFtZV0pO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnJhd1tuYW1lXSA9IGRlY2w7XG5cbiAgICAgIHZhciBydWxlID0gKDAsIF9jcmVhdGVSdWxlMlsnZGVmYXVsdCddKShuYW1lLCBkZWNsLCBvcHRpb25zKTtcblxuICAgICAgdmFyIGNsYXNzTmFtZSA9IHZvaWQgMDtcblxuICAgICAgaWYgKCFvcHRpb25zLnNlbGVjdG9yICYmIHJ1bGUgaW5zdGFuY2VvZiBfU3R5bGVSdWxlMlsnZGVmYXVsdCddKSB7XG4gICAgICAgIGNsYXNzTmFtZSA9IGdlbmVyYXRlQ2xhc3NOYW1lKHJ1bGUsIHNoZWV0KTtcbiAgICAgICAgcnVsZS5zZWxlY3RvciA9ICcuJyArICgwLCBfZXNjYXBlMlsnZGVmYXVsdCddKShjbGFzc05hbWUpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnJlZ2lzdGVyKHJ1bGUsIGNsYXNzTmFtZSk7XG5cbiAgICAgIHZhciBpbmRleCA9IG9wdGlvbnMuaW5kZXggPT09IHVuZGVmaW5lZCA/IHRoaXMuaW5kZXgubGVuZ3RoIDogb3B0aW9ucy5pbmRleDtcbiAgICAgIHRoaXMuaW5kZXguc3BsaWNlKGluZGV4LCAwLCBydWxlKTtcblxuICAgICAgcmV0dXJuIHJ1bGU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IGEgcnVsZS5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnZ2V0JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0KG5hbWUpIHtcbiAgICAgIHJldHVybiB0aGlzLm1hcFtuYW1lXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEZWxldGUgYSBydWxlLlxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdyZW1vdmUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW1vdmUocnVsZSkge1xuICAgICAgdGhpcy51bnJlZ2lzdGVyKHJ1bGUpO1xuICAgICAgdGhpcy5pbmRleC5zcGxpY2UodGhpcy5pbmRleE9mKHJ1bGUpLCAxKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgaW5kZXggb2YgYSBydWxlLlxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdpbmRleE9mJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gaW5kZXhPZihydWxlKSB7XG4gICAgICByZXR1cm4gdGhpcy5pbmRleC5pbmRleE9mKHJ1bGUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJ1biBgb25Qcm9jZXNzUnVsZSgpYCBwbHVnaW5zIG9uIGV2ZXJ5IHJ1bGUuXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ3Byb2Nlc3MnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBwcm9jZXNzKCkge1xuICAgICAgdmFyIHBsdWdpbnMgPSB0aGlzLm9wdGlvbnMuanNzLnBsdWdpbnM7XG4gICAgICAvLyBXZSBuZWVkIHRvIGNsb25lIGFycmF5IGJlY2F1c2UgaWYgd2UgbW9kaWZ5IHRoZSBpbmRleCBzb21ld2hlcmUgZWxzZSBkdXJpbmcgYSBsb29wXG4gICAgICAvLyB3ZSBlbmQgdXAgd2l0aCB2ZXJ5IGhhcmQtdG8tdHJhY2stZG93biBzaWRlIGVmZmVjdHMuXG5cbiAgICAgIHRoaXMuaW5kZXguc2xpY2UoMCkuZm9yRWFjaChwbHVnaW5zLm9uUHJvY2Vzc1J1bGUsIHBsdWdpbnMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlZ2lzdGVyIGEgcnVsZSBpbiBgLm1hcGAgYW5kIGAuY2xhc3Nlc2AgbWFwcy5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAncmVnaXN0ZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZWdpc3RlcihydWxlLCBjbGFzc05hbWUpIHtcbiAgICAgIHRoaXMubWFwW3J1bGUua2V5XSA9IHJ1bGU7XG4gICAgICBpZiAocnVsZSBpbnN0YW5jZW9mIF9TdHlsZVJ1bGUyWydkZWZhdWx0J10pIHtcbiAgICAgICAgdGhpcy5tYXBbcnVsZS5zZWxlY3Rvcl0gPSBydWxlO1xuICAgICAgICBpZiAoY2xhc3NOYW1lKSB0aGlzLmNsYXNzZXNbcnVsZS5rZXldID0gY2xhc3NOYW1lO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVucmVnaXN0ZXIgYSBydWxlLlxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICd1bnJlZ2lzdGVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gdW5yZWdpc3RlcihydWxlKSB7XG4gICAgICBkZWxldGUgdGhpcy5tYXBbcnVsZS5rZXldO1xuICAgICAgaWYgKHJ1bGUgaW5zdGFuY2VvZiBfU3R5bGVSdWxlMlsnZGVmYXVsdCddKSB7XG4gICAgICAgIGRlbGV0ZSB0aGlzLm1hcFtydWxlLnNlbGVjdG9yXTtcbiAgICAgICAgZGVsZXRlIHRoaXMuY2xhc3Nlc1tydWxlLmtleV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXBkYXRlIHRoZSBmdW5jdGlvbiB2YWx1ZXMgd2l0aCBhIG5ldyBkYXRhLlxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdsaW5rJyxcblxuXG4gICAgLyoqXG4gICAgICogTGluayByZW5kZXJhYmxlIHJ1bGVzIHdpdGggQ1NTUnVsZUxpc3QuXG4gICAgICovXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGxpbmsoY3NzUnVsZXMpIHtcbiAgICAgIHZhciBtYXAgPSB0aGlzLm9wdGlvbnMuc2hlZXQucmVuZGVyZXIuZ2V0VW5lc2NhcGVkS2V5c01hcCh0aGlzLmluZGV4KTtcblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjc3NSdWxlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgY3NzUnVsZSA9IGNzc1J1bGVzW2ldO1xuICAgICAgICB2YXIgX2tleSA9IHRoaXMub3B0aW9ucy5zaGVldC5yZW5kZXJlci5nZXRLZXkoY3NzUnVsZSk7XG4gICAgICAgIGlmIChtYXBbX2tleV0pIF9rZXkgPSBtYXBbX2tleV07XG4gICAgICAgIHZhciBydWxlID0gdGhpcy5tYXBbX2tleV07XG4gICAgICAgIGlmIChydWxlKSAoMCwgX2xpbmtSdWxlMlsnZGVmYXVsdCddKShydWxlLCBjc3NSdWxlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0IHJ1bGVzIHRvIGEgQ1NTIHN0cmluZy5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAndG9TdHJpbmcnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB0b1N0cmluZyhvcHRpb25zKSB7XG4gICAgICB2YXIgc3RyID0gJyc7XG4gICAgICB2YXIgc2hlZXQgPSB0aGlzLm9wdGlvbnMuc2hlZXQ7XG5cbiAgICAgIHZhciBsaW5rID0gc2hlZXQgPyBzaGVldC5vcHRpb25zLmxpbmsgOiBmYWxzZTtcblxuICAgICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IHRoaXMuaW5kZXgubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgIHZhciBydWxlID0gdGhpcy5pbmRleFtpbmRleF07XG4gICAgICAgIHZhciBjc3MgPSBydWxlLnRvU3RyaW5nKG9wdGlvbnMpO1xuXG4gICAgICAgIC8vIE5vIG5lZWQgdG8gcmVuZGVyIGFuIGVtcHR5IHJ1bGUuXG4gICAgICAgIGlmICghY3NzICYmICFsaW5rKSBjb250aW51ZTtcblxuICAgICAgICBpZiAoc3RyKSBzdHIgKz0gJ1xcbic7XG4gICAgICAgIHN0ciArPSBjc3M7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzdHI7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFJ1bGVMaXN0O1xufSgpO1xuXG5leHBvcnRzWydkZWZhdWx0J10gPSBSdWxlTGlzdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGNyZWF0ZUJyZWFrcG9pbnRzO1xuZXhwb3J0cy5rZXlzID0gdm9pZCAwO1xuXG52YXIgX29iamVjdFNwcmVhZDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vb2JqZWN0U3ByZWFkXCIpKTtcblxudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIikpO1xuXG4vLyBTb3J0ZWQgQVNDIGJ5IHNpemUuIFRoYXQncyBpbXBvcnRhbnQuXG4vLyBJdCBjYW4ndCBiZSBjb25maWd1cmVkIGFzIGl0J3MgdXNlZCBzdGF0aWNhbGx5IGZvciBwcm9wVHlwZXMuXG52YXIga2V5cyA9IFsneHMnLCAnc20nLCAnbWQnLCAnbGcnLCAneGwnXTsgLy8gS2VlcCBpbiBtaW5kIHRoYXQgQG1lZGlhIGlzIGluY2x1c2l2ZSBieSB0aGUgQ1NTIHNwZWNpZmljYXRpb24uXG5cbmV4cG9ydHMua2V5cyA9IGtleXM7XG5cbmZ1bmN0aW9uIGNyZWF0ZUJyZWFrcG9pbnRzKGJyZWFrcG9pbnRzKSB7XG4gIHZhciBfYnJlYWtwb2ludHMkdmFsdWVzID0gYnJlYWtwb2ludHMudmFsdWVzLFxuICAgICAgdmFsdWVzID0gX2JyZWFrcG9pbnRzJHZhbHVlcyA9PT0gdm9pZCAwID8ge1xuICAgIHhzOiAwLFxuICAgIHNtOiA2MDAsXG4gICAgbWQ6IDk2MCxcbiAgICBsZzogMTI4MCxcbiAgICB4bDogMTkyMFxuICB9IDogX2JyZWFrcG9pbnRzJHZhbHVlcyxcbiAgICAgIF9icmVha3BvaW50cyR1bml0ID0gYnJlYWtwb2ludHMudW5pdCxcbiAgICAgIHVuaXQgPSBfYnJlYWtwb2ludHMkdW5pdCA9PT0gdm9pZCAwID8gJ3B4JyA6IF9icmVha3BvaW50cyR1bml0LFxuICAgICAgX2JyZWFrcG9pbnRzJHN0ZXAgPSBicmVha3BvaW50cy5zdGVwLFxuICAgICAgc3RlcCA9IF9icmVha3BvaW50cyRzdGVwID09PSB2b2lkIDAgPyA1IDogX2JyZWFrcG9pbnRzJHN0ZXAsXG4gICAgICBvdGhlciA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyLmRlZmF1bHQpKGJyZWFrcG9pbnRzLCBbXCJ2YWx1ZXNcIiwgXCJ1bml0XCIsIFwic3RlcFwiXSk7XG5cbiAgZnVuY3Rpb24gdXAoa2V5KSB7XG4gICAgdmFyIHZhbHVlID0gdHlwZW9mIHZhbHVlc1trZXldID09PSAnbnVtYmVyJyA/IHZhbHVlc1trZXldIDoga2V5O1xuICAgIHJldHVybiBcIkBtZWRpYSAobWluLXdpZHRoOlwiLmNvbmNhdCh2YWx1ZSkuY29uY2F0KHVuaXQsIFwiKVwiKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRvd24oa2V5KSB7XG4gICAgdmFyIGVuZEluZGV4ID0ga2V5cy5pbmRleE9mKGtleSkgKyAxO1xuICAgIHZhciB1cHBlcmJvdW5kID0gdmFsdWVzW2tleXNbZW5kSW5kZXhdXTtcblxuICAgIGlmIChlbmRJbmRleCA9PT0ga2V5cy5sZW5ndGgpIHtcbiAgICAgIC8vIHhsIGRvd24gYXBwbGllcyB0byBhbGwgc2l6ZXNcbiAgICAgIHJldHVybiB1cCgneHMnKTtcbiAgICB9XG5cbiAgICB2YXIgdmFsdWUgPSB0eXBlb2YgdXBwZXJib3VuZCA9PT0gJ251bWJlcicgJiYgZW5kSW5kZXggPiAwID8gdXBwZXJib3VuZCA6IGtleTtcbiAgICByZXR1cm4gXCJAbWVkaWEgKG1heC13aWR0aDpcIi5jb25jYXQodmFsdWUgLSBzdGVwIC8gMTAwKS5jb25jYXQodW5pdCwgXCIpXCIpO1xuICB9XG5cbiAgZnVuY3Rpb24gYmV0d2VlbihzdGFydCwgZW5kKSB7XG4gICAgdmFyIGVuZEluZGV4ID0ga2V5cy5pbmRleE9mKGVuZCkgKyAxO1xuXG4gICAgaWYgKGVuZEluZGV4ID09PSBrZXlzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIHVwKHN0YXJ0KTtcbiAgICB9XG5cbiAgICByZXR1cm4gXCJAbWVkaWEgKG1pbi13aWR0aDpcIi5jb25jYXQodmFsdWVzW3N0YXJ0XSkuY29uY2F0KHVuaXQsIFwiKSBhbmQgXCIpICsgXCIobWF4LXdpZHRoOlwiLmNvbmNhdCh2YWx1ZXNba2V5c1tlbmRJbmRleF1dIC0gc3RlcCAvIDEwMCkuY29uY2F0KHVuaXQsIFwiKVwiKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9ubHkoa2V5KSB7XG4gICAgcmV0dXJuIGJldHdlZW4oa2V5LCBrZXkpO1xuICB9XG5cbiAgZnVuY3Rpb24gd2lkdGgoa2V5KSB7XG4gICAgcmV0dXJuIHZhbHVlc1trZXldO1xuICB9XG5cbiAgcmV0dXJuICgwLCBfb2JqZWN0U3ByZWFkMi5kZWZhdWx0KSh7XG4gICAga2V5czoga2V5cyxcbiAgICB2YWx1ZXM6IHZhbHVlcyxcbiAgICB1cDogdXAsXG4gICAgZG93bjogZG93bixcbiAgICBiZXR3ZWVuOiBiZXR3ZWVuLFxuICAgIG9ubHk6IG9ubHksXG4gICAgd2lkdGg6IHdpZHRoXG4gIH0sIG90aGVyKTtcbn0iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGV4YWN0UHJvcDtcbmV4cG9ydHMuc3BlY2lhbFByb3BlcnR5ID0gdm9pZCAwO1xuXG52YXIgX2RlZmluZVByb3BlcnR5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9kZWZpbmVQcm9wZXJ0eVwiKSk7XG5cbnZhciBfb2JqZWN0U3ByZWFkMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9vYmplY3RTcHJlYWRcIikpO1xuXG4vLyBUaGlzIG1vZHVsZSBpcyBiYXNlZCBvbiBodHRwczovL2dpdGh1Yi5jb20vYWlyYm5iL3Byb3AtdHlwZXMtZXhhY3QgcmVwb3NpdG9yeS5cbi8vIEhvd2V2ZXIsIGluIG9yZGVyIHRvIHJlZHVjZSB0aGUgbnVtYmVyIG9mIGRlcGVuZGVuY2llcyBhbmQgdG8gcmVtb3ZlIHNvbWUgZXh0cmEgc2FmZSBjaGVja3Ncbi8vIHRoZSBtb2R1bGUgd2FzIGZvcmtlZC5cbnZhciBzcGVjaWFsUHJvcGVydHkgPSBcImV4YWN0LXByb3A6IFxcdTIwMEJcIjtcbmV4cG9ydHMuc3BlY2lhbFByb3BlcnR5ID0gc3BlY2lhbFByb3BlcnR5O1xuXG5mdW5jdGlvbiBleGFjdFByb3AocHJvcFR5cGVzLCBjb21wb25lbnROYW1lSW5FcnJvcikge1xuICByZXR1cm4gKDAsIF9vYmplY3RTcHJlYWQzLmRlZmF1bHQpKHt9LCBwcm9wVHlwZXMsICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKHt9LCBzcGVjaWFsUHJvcGVydHksIGZ1bmN0aW9uIChwcm9wcykge1xuICAgIHZhciB1bmtub3duUHJvcHMgPSBPYmplY3Qua2V5cyhwcm9wcykuZmlsdGVyKGZ1bmN0aW9uIChwcm9wKSB7XG4gICAgICByZXR1cm4gIXByb3BUeXBlcy5oYXNPd25Qcm9wZXJ0eShwcm9wKTtcbiAgICB9KTtcblxuICAgIGlmICh1bmtub3duUHJvcHMubGVuZ3RoID4gMCkge1xuICAgICAgcmV0dXJuIG5ldyBUeXBlRXJyb3IoXCJcIi5jb25jYXQoY29tcG9uZW50TmFtZUluRXJyb3IsIFwiOiB1bmtub3duIHByb3BzIGZvdW5kOiBcIikuY29uY2F0KHVua25vd25Qcm9wcy5qb2luKCcsICcpLCBcIi4gUGxlYXNlIHJlbW92ZSB0aGUgdW5rbm93biBwcm9wZXJ0aWVzLlwiKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH0pKTtcbn0iLCJmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmopIHtcbiAgaWYgKG9iaiAmJiBvYmouX19lc01vZHVsZSkge1xuICAgIHJldHVybiBvYmo7XG4gIH0gZWxzZSB7XG4gICAgdmFyIG5ld09iaiA9IHt9O1xuXG4gICAgaWYgKG9iaiAhPSBudWxsKSB7XG4gICAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7XG4gICAgICAgICAgdmFyIGRlc2MgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvciA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpIDoge307XG5cbiAgICAgICAgICBpZiAoZGVzYy5nZXQgfHwgZGVzYy5zZXQpIHtcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuZXdPYmosIGtleSwgZGVzYyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG5ld09ialtrZXldID0gb2JqW2tleV07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgbmV3T2JqLmRlZmF1bHQgPSBvYmo7XG4gICAgcmV0dXJuIG5ld09iajtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkOyIsIihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gIGlmICh0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkge1xuICAgIGRlZmluZShbJ2V4cG9ydHMnXSwgZmFjdG9yeSk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGV4cG9ydHMgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBmYWN0b3J5KGV4cG9ydHMpO1xuICB9IGVsc2Uge1xuICAgIHZhciBtb2QgPSB7XG4gICAgICBleHBvcnRzOiB7fVxuICAgIH07XG4gICAgZmFjdG9yeShtb2QuZXhwb3J0cyk7XG4gICAgZ2xvYmFsLlN0cmluZyA9IG1vZC5leHBvcnRzO1xuICB9XG59KSh0aGlzLCBmdW5jdGlvbiAoZXhwb3J0cykge1xuICAndXNlIHN0cmljdCc7XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbiAgfSk7XG4gIHZhciBjYW1lbGl6ZSA9IGV4cG9ydHMuY2FtZWxpemUgPSBmdW5jdGlvbiBjYW1lbGl6ZShzdHIpIHtcbiAgICByZXR1cm4gc3RyLnNwbGl0KCcgJykubWFwKGZ1bmN0aW9uICh3b3JkKSB7XG4gICAgICByZXR1cm4gd29yZC5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHdvcmQuc2xpY2UoMSk7XG4gICAgfSkuam9pbignJyk7XG4gIH07XG59KTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlZmF1bHRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX1RleHRGaWVsZC5kZWZhdWx0O1xuICB9XG59KTtcblxudmFyIF9UZXh0RmllbGQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL1RleHRGaWVsZFwiKSk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJkZWZhdWx0XCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9TZWxlY3QuZGVmYXVsdDtcbiAgfVxufSk7XG5cbnZhciBfU2VsZWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9TZWxlY3RcIikpOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVmYXVsdFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfTGluZWFyUHJvZ3Jlc3MuZGVmYXVsdDtcbiAgfVxufSk7XG5cbnZhciBfTGluZWFyUHJvZ3Jlc3MgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0xpbmVhclByb2dyZXNzXCIpKTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlZmF1bHRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX0lucHV0TGFiZWwuZGVmYXVsdDtcbiAgfVxufSk7XG5cbnZhciBfSW5wdXRMYWJlbCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vSW5wdXRMYWJlbFwiKSk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJkZWZhdWx0XCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9Gb3JtQ29udHJvbC5kZWZhdWx0O1xuICB9XG59KTtcblxudmFyIF9Gb3JtQ29udHJvbCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vRm9ybUNvbnRyb2xcIikpOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVmYXVsdFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfU2xpZGUuZGVmYXVsdDtcbiAgfVxufSk7XG5cbnZhciBfU2xpZGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL1NsaWRlXCIpKTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlZmF1bHRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX1BvcnRhbC5kZWZhdWx0O1xuICB9XG59KTtcblxudmFyIF9Qb3J0YWwgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL1BvcnRhbFwiKSk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJkZWZhdWx0XCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9Db2xsYXBzZS5kZWZhdWx0O1xuICB9XG59KTtcblxudmFyIF9Db2xsYXBzZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vQ29sbGFwc2VcIikpOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVmYXVsdFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfRmFkZS5kZWZhdWx0O1xuICB9XG59KTtcblxudmFyIF9GYWRlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9GYWRlXCIpKTsiLCJ2YXIgaWQgPSAwO1xudmFyIHB4ID0gTWF0aC5yYW5kb20oKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICByZXR1cm4gJ1N5bWJvbCgnLmNvbmNhdChrZXkgPT09IHVuZGVmaW5lZCA/ICcnIDoga2V5LCAnKV8nLCAoKytpZCArIHB4KS50b1N0cmluZygzNikpO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGJpdG1hcCwgdmFsdWUpIHtcbiAgcmV0dXJuIHtcbiAgICBlbnVtZXJhYmxlOiAhKGJpdG1hcCAmIDEpLFxuICAgIGNvbmZpZ3VyYWJsZTogIShiaXRtYXAgJiAyKSxcbiAgICB3cml0YWJsZTogIShiaXRtYXAgJiA0KSxcbiAgICB2YWx1ZTogdmFsdWVcbiAgfTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuICEhZXhlYygpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xuXG52YXIgJGV4cG9ydCA9IGZ1bmN0aW9uICh0eXBlLCBuYW1lLCBzb3VyY2UpIHtcbiAgdmFyIElTX0ZPUkNFRCA9IHR5cGUgJiAkZXhwb3J0LkY7XG4gIHZhciBJU19HTE9CQUwgPSB0eXBlICYgJGV4cG9ydC5HO1xuICB2YXIgSVNfU1RBVElDID0gdHlwZSAmICRleHBvcnQuUztcbiAgdmFyIElTX1BST1RPID0gdHlwZSAmICRleHBvcnQuUDtcbiAgdmFyIElTX0JJTkQgPSB0eXBlICYgJGV4cG9ydC5CO1xuICB2YXIgSVNfV1JBUCA9IHR5cGUgJiAkZXhwb3J0Llc7XG4gIHZhciBleHBvcnRzID0gSVNfR0xPQkFMID8gY29yZSA6IGNvcmVbbmFtZV0gfHwgKGNvcmVbbmFtZV0gPSB7fSk7XG4gIHZhciBleHBQcm90byA9IGV4cG9ydHNbUFJPVE9UWVBFXTtcbiAgdmFyIHRhcmdldCA9IElTX0dMT0JBTCA/IGdsb2JhbCA6IElTX1NUQVRJQyA/IGdsb2JhbFtuYW1lXSA6IChnbG9iYWxbbmFtZV0gfHwge30pW1BST1RPVFlQRV07XG4gIHZhciBrZXksIG93biwgb3V0O1xuICBpZiAoSVNfR0xPQkFMKSBzb3VyY2UgPSBuYW1lO1xuICBmb3IgKGtleSBpbiBzb3VyY2UpIHtcbiAgICAvLyBjb250YWlucyBpbiBuYXRpdmVcbiAgICBvd24gPSAhSVNfRk9SQ0VEICYmIHRhcmdldCAmJiB0YXJnZXRba2V5XSAhPT0gdW5kZWZpbmVkO1xuICAgIGlmIChvd24gJiYgaGFzKGV4cG9ydHMsIGtleSkpIGNvbnRpbnVlO1xuICAgIC8vIGV4cG9ydCBuYXRpdmUgb3IgcGFzc2VkXG4gICAgb3V0ID0gb3duID8gdGFyZ2V0W2tleV0gOiBzb3VyY2Vba2V5XTtcbiAgICAvLyBwcmV2ZW50IGdsb2JhbCBwb2xsdXRpb24gZm9yIG5hbWVzcGFjZXNcbiAgICBleHBvcnRzW2tleV0gPSBJU19HTE9CQUwgJiYgdHlwZW9mIHRhcmdldFtrZXldICE9ICdmdW5jdGlvbicgPyBzb3VyY2Vba2V5XVxuICAgIC8vIGJpbmQgdGltZXJzIHRvIGdsb2JhbCBmb3IgY2FsbCBmcm9tIGV4cG9ydCBjb250ZXh0XG4gICAgOiBJU19CSU5EICYmIG93biA/IGN0eChvdXQsIGdsb2JhbClcbiAgICAvLyB3cmFwIGdsb2JhbCBjb25zdHJ1Y3RvcnMgZm9yIHByZXZlbnQgY2hhbmdlIHRoZW0gaW4gbGlicmFyeVxuICAgIDogSVNfV1JBUCAmJiB0YXJnZXRba2V5XSA9PSBvdXQgPyAoZnVuY3Rpb24gKEMpIHtcbiAgICAgIHZhciBGID0gZnVuY3Rpb24gKGEsIGIsIGMpIHtcbiAgICAgICAgaWYgKHRoaXMgaW5zdGFuY2VvZiBDKSB7XG4gICAgICAgICAgc3dpdGNoIChhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICAgICAgICBjYXNlIDA6IHJldHVybiBuZXcgQygpO1xuICAgICAgICAgICAgY2FzZSAxOiByZXR1cm4gbmV3IEMoYSk7XG4gICAgICAgICAgICBjYXNlIDI6IHJldHVybiBuZXcgQyhhLCBiKTtcbiAgICAgICAgICB9IHJldHVybiBuZXcgQyhhLCBiLCBjKTtcbiAgICAgICAgfSByZXR1cm4gQy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgfTtcbiAgICAgIEZbUFJPVE9UWVBFXSA9IENbUFJPVE9UWVBFXTtcbiAgICAgIHJldHVybiBGO1xuICAgIC8vIG1ha2Ugc3RhdGljIHZlcnNpb25zIGZvciBwcm90b3R5cGUgbWV0aG9kc1xuICAgIH0pKG91dCkgOiBJU19QUk9UTyAmJiB0eXBlb2Ygb3V0ID09ICdmdW5jdGlvbicgPyBjdHgoRnVuY3Rpb24uY2FsbCwgb3V0KSA6IG91dDtcbiAgICAvLyBleHBvcnQgcHJvdG8gbWV0aG9kcyB0byBjb3JlLiVDT05TVFJVQ1RPUiUubWV0aG9kcy4lTkFNRSVcbiAgICBpZiAoSVNfUFJPVE8pIHtcbiAgICAgIChleHBvcnRzLnZpcnR1YWwgfHwgKGV4cG9ydHMudmlydHVhbCA9IHt9KSlba2V5XSA9IG91dDtcbiAgICAgIC8vIGV4cG9ydCBwcm90byBtZXRob2RzIHRvIGNvcmUuJUNPTlNUUlVDVE9SJS5wcm90b3R5cGUuJU5BTUUlXG4gICAgICBpZiAodHlwZSAmICRleHBvcnQuUiAmJiBleHBQcm90byAmJiAhZXhwUHJvdG9ba2V5XSkgaGlkZShleHBQcm90bywga2V5LCBvdXQpO1xuICAgIH1cbiAgfVxufTtcbi8vIHR5cGUgYml0bWFwXG4kZXhwb3J0LkYgPSAxOyAgIC8vIGZvcmNlZFxuJGV4cG9ydC5HID0gMjsgICAvLyBnbG9iYWxcbiRleHBvcnQuUyA9IDQ7ICAgLy8gc3RhdGljXG4kZXhwb3J0LlAgPSA4OyAgIC8vIHByb3RvXG4kZXhwb3J0LkIgPSAxNjsgIC8vIGJpbmRcbiRleHBvcnQuVyA9IDMyOyAgLy8gd3JhcFxuJGV4cG9ydC5VID0gNjQ7ICAvLyBzYWZlXG4kZXhwb3J0LlIgPSAxMjg7IC8vIHJlYWwgcHJvdG8gbWV0aG9kIGZvciBgbGlicmFyeWBcbm1vZHVsZS5leHBvcnRzID0gJGV4cG9ydDtcbiIsIm1vZHVsZS5leHBvcnRzID0gdHJ1ZTtcbiIsInZhciBhcnJheVdpdGhvdXRIb2xlcyA9IHJlcXVpcmUoXCIuL2FycmF5V2l0aG91dEhvbGVzXCIpO1xuXG52YXIgaXRlcmFibGVUb0FycmF5ID0gcmVxdWlyZShcIi4vaXRlcmFibGVUb0FycmF5XCIpO1xuXG52YXIgbm9uSXRlcmFibGVTcHJlYWQgPSByZXF1aXJlKFwiLi9ub25JdGVyYWJsZVNwcmVhZFwiKTtcblxuZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikge1xuICByZXR1cm4gYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB8fCBpdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCBub25JdGVyYWJsZVNwcmVhZCgpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF90b0NvbnN1bWFibGVBcnJheTsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfaW5ET00gPSByZXF1aXJlKCcuLi91dGlsL2luRE9NJyk7XG5cbnZhciBfaW5ET00yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaW5ET00pO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5leHBvcnRzLmRlZmF1bHQgPSBmdW5jdGlvbiAoKSB7XG4gIC8vIEhUTUwgRE9NIGFuZCBTVkcgRE9NIG1heSBoYXZlIGRpZmZlcmVudCBzdXBwb3J0IGxldmVscyxcbiAgLy8gc28gd2UgbmVlZCB0byBjaGVjayBvbiBjb250ZXh0IGluc3RlYWQgb2YgYSBkb2N1bWVudCByb290IGVsZW1lbnQuXG4gIHJldHVybiBfaW5ET00yLmRlZmF1bHQgPyBmdW5jdGlvbiAoY29udGV4dCwgbm9kZSkge1xuICAgIGlmIChjb250ZXh0LmNvbnRhaW5zKSB7XG4gICAgICByZXR1cm4gY29udGV4dC5jb250YWlucyhub2RlKTtcbiAgICB9IGVsc2UgaWYgKGNvbnRleHQuY29tcGFyZURvY3VtZW50UG9zaXRpb24pIHtcbiAgICAgIHJldHVybiBjb250ZXh0ID09PSBub2RlIHx8ICEhKGNvbnRleHQuY29tcGFyZURvY3VtZW50UG9zaXRpb24obm9kZSkgJiAxNik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBmYWxsYmFjayhjb250ZXh0LCBub2RlKTtcbiAgICB9XG4gIH0gOiBmYWxsYmFjaztcbn0oKTtcblxuZnVuY3Rpb24gZmFsbGJhY2soY29udGV4dCwgbm9kZSkge1xuICBpZiAobm9kZSkgZG8ge1xuICAgIGlmIChub2RlID09PSBjb250ZXh0KSByZXR1cm4gdHJ1ZTtcbiAgfSB3aGlsZSAobm9kZSA9IG5vZGUucGFyZW50Tm9kZSk7XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfb3duZXJEb2N1bWVudCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImRvbS1oZWxwZXJzL293bmVyRG9jdW1lbnRcIikpO1xuXG52YXIgb3duZXJXaW5kb3cgPSBmdW5jdGlvbiBvd25lcldpbmRvdyhub2RlKSB7XG4gIHZhciBmYWxsYmFjayA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogd2luZG93O1xuICB2YXIgZG9jID0gKDAsIF9vd25lckRvY3VtZW50LmRlZmF1bHQpKG5vZGUpO1xuICByZXR1cm4gZG9jLmRlZmF1bHRWaWV3IHx8IGRvYy5wYXJlbnRWaWV3IHx8IGZhbGxiYWNrO1xufTtcblxudmFyIF9kZWZhdWx0ID0gb3duZXJXaW5kb3c7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlZmF1bHRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX1Rvb2xiYXIuZGVmYXVsdDtcbiAgfVxufSk7XG5cbnZhciBfVG9vbGJhciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vVG9vbGJhclwiKSk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJkZWZhdWx0XCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9BcHBCYXIuZGVmYXVsdDtcbiAgfVxufSk7XG5cbnZhciBfQXBwQmFyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9BcHBCYXJcIikpOyIsInZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxuZXhwb3J0IHZhciBpc0Jyb3dzZXIgPSAodHlwZW9mIHdpbmRvdyA9PT0gXCJ1bmRlZmluZWRcIiA/IFwidW5kZWZpbmVkXCIgOiBfdHlwZW9mKHdpbmRvdykpID09PSBcIm9iamVjdFwiICYmICh0eXBlb2YgZG9jdW1lbnQgPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZihkb2N1bWVudCkpID09PSAnb2JqZWN0JyAmJiBkb2N1bWVudC5ub2RlVHlwZSA9PT0gOTtcblxuZXhwb3J0IGRlZmF1bHQgaXNCcm93c2VyO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1snZGVmYXVsdCddID0gY3JlYXRlUnVsZTtcblxudmFyIF93YXJuaW5nID0gcmVxdWlyZSgnd2FybmluZycpO1xuXG52YXIgX3dhcm5pbmcyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfd2FybmluZyk7XG5cbnZhciBfU3R5bGVSdWxlID0gcmVxdWlyZSgnLi4vcnVsZXMvU3R5bGVSdWxlJyk7XG5cbnZhciBfU3R5bGVSdWxlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1N0eWxlUnVsZSk7XG5cbnZhciBfY2xvbmVTdHlsZSA9IHJlcXVpcmUoJy4uL3V0aWxzL2Nsb25lU3R5bGUnKTtcblxudmFyIF9jbG9uZVN0eWxlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2Nsb25lU3R5bGUpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9XG5cbi8qKlxuICogQ3JlYXRlIGEgcnVsZSBpbnN0YW5jZS5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlUnVsZSgpIHtcbiAgdmFyIG5hbWUgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6ICd1bm5hbWVkJztcbiAgdmFyIGRlY2wgPSBhcmd1bWVudHNbMV07XG4gIHZhciBvcHRpb25zID0gYXJndW1lbnRzWzJdO1xuICB2YXIganNzID0gb3B0aW9ucy5qc3M7XG5cbiAgdmFyIGRlY2xDb3B5ID0gKDAsIF9jbG9uZVN0eWxlMlsnZGVmYXVsdCddKShkZWNsKTtcblxuICB2YXIgcnVsZSA9IGpzcy5wbHVnaW5zLm9uQ3JlYXRlUnVsZShuYW1lLCBkZWNsQ29weSwgb3B0aW9ucyk7XG4gIGlmIChydWxlKSByZXR1cm4gcnVsZTtcblxuICAvLyBJdCBpcyBhbiBhdC1ydWxlIGFuZCBpdCBoYXMgbm8gaW5zdGFuY2UuXG4gIGlmIChuYW1lWzBdID09PSAnQCcpIHtcbiAgICAoMCwgX3dhcm5pbmcyWydkZWZhdWx0J10pKGZhbHNlLCAnW0pTU10gVW5rbm93biBhdC1ydWxlICVzJywgbmFtZSk7XG4gIH1cblxuICByZXR1cm4gbmV3IF9TdHlsZVJ1bGUyWydkZWZhdWx0J10obmFtZSwgZGVjbENvcHksIG9wdGlvbnMpO1xufSIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IHRvQ3NzVmFsdWU7XG52YXIgam9pbiA9IGZ1bmN0aW9uIGpvaW4odmFsdWUsIGJ5KSB7XG4gIHZhciByZXN1bHQgPSAnJztcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB2YWx1ZS5sZW5ndGg7IGkrKykge1xuICAgIC8vIFJlbW92ZSAhaW1wb3J0YW50IGZyb20gdGhlIHZhbHVlLCBpdCB3aWxsIGJlIHJlYWRkZWQgbGF0ZXIuXG4gICAgaWYgKHZhbHVlW2ldID09PSAnIWltcG9ydGFudCcpIGJyZWFrO1xuICAgIGlmIChyZXN1bHQpIHJlc3VsdCArPSBieTtcbiAgICByZXN1bHQgKz0gdmFsdWVbaV07XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbi8qKlxuICogQ29udmVydHMgYXJyYXkgdmFsdWVzIHRvIHN0cmluZy5cbiAqXG4gKiBgbWFyZ2luOiBbWyc1cHgnLCAnMTBweCddXWAgPiBgbWFyZ2luOiA1cHggMTBweDtgXG4gKiBgYm9yZGVyOiBbJzFweCcsICcycHgnXWAgPiBgYm9yZGVyOiAxcHgsIDJweDtgXG4gKiBgbWFyZ2luOiBbWyc1cHgnLCAnMTBweCddLCAnIWltcG9ydGFudCddYCA+IGBtYXJnaW46IDVweCAxMHB4ICFpbXBvcnRhbnQ7YFxuICogYGNvbG9yOiBbJ3JlZCcsICFpbXBvcnRhbnRdYCA+IGBjb2xvcjogcmVkICFpbXBvcnRhbnQ7YFxuICovXG5mdW5jdGlvbiB0b0Nzc1ZhbHVlKHZhbHVlKSB7XG4gIHZhciBpZ25vcmVJbXBvcnRhbnQgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IGZhbHNlO1xuXG4gIGlmICghQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHJldHVybiB2YWx1ZTtcblxuICB2YXIgY3NzVmFsdWUgPSAnJztcblxuICAvLyBTdXBwb3J0IHNwYWNlIHNlcGFyYXRlZCB2YWx1ZXMgdmlhIGBbWyc1cHgnLCAnMTBweCddXWAuXG4gIGlmIChBcnJheS5pc0FycmF5KHZhbHVlWzBdKSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdmFsdWUubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmICh2YWx1ZVtpXSA9PT0gJyFpbXBvcnRhbnQnKSBicmVhaztcbiAgICAgIGlmIChjc3NWYWx1ZSkgY3NzVmFsdWUgKz0gJywgJztcbiAgICAgIGNzc1ZhbHVlICs9IGpvaW4odmFsdWVbaV0sICcgJyk7XG4gICAgfVxuICB9IGVsc2UgY3NzVmFsdWUgPSBqb2luKHZhbHVlLCAnLCAnKTtcblxuICAvLyBBZGQgIWltcG9ydGFudCwgYmVjYXVzZSBpdCB3YXMgaWdub3JlZC5cbiAgaWYgKCFpZ25vcmVJbXBvcnRhbnQgJiYgdmFsdWVbdmFsdWUubGVuZ3RoIC0gMV0gPT09ICchaW1wb3J0YW50Jykge1xuICAgIGNzc1ZhbHVlICs9ICcgIWltcG9ydGFudCc7XG4gIH1cblxuICByZXR1cm4gY3NzVmFsdWU7XG59IiwidmFyIGlzTWVyZ2VhYmxlT2JqZWN0ID0gZnVuY3Rpb24gaXNNZXJnZWFibGVPYmplY3QodmFsdWUpIHtcblx0cmV0dXJuIGlzTm9uTnVsbE9iamVjdCh2YWx1ZSlcblx0XHQmJiAhaXNTcGVjaWFsKHZhbHVlKVxufTtcblxuZnVuY3Rpb24gaXNOb25OdWxsT2JqZWN0KHZhbHVlKSB7XG5cdHJldHVybiAhIXZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCdcbn1cblxuZnVuY3Rpb24gaXNTcGVjaWFsKHZhbHVlKSB7XG5cdHZhciBzdHJpbmdWYWx1ZSA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG5cblx0cmV0dXJuIHN0cmluZ1ZhbHVlID09PSAnW29iamVjdCBSZWdFeHBdJ1xuXHRcdHx8IHN0cmluZ1ZhbHVlID09PSAnW29iamVjdCBEYXRlXSdcblx0XHR8fCBpc1JlYWN0RWxlbWVudCh2YWx1ZSlcbn1cblxuLy8gc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9ibG9iL2I1YWM5NjNmYjc5MWQxMjk4ZTdmMzk2MjM2MzgzYmM5NTVmOTE2YzEvc3JjL2lzb21vcnBoaWMvY2xhc3NpYy9lbGVtZW50L1JlYWN0RWxlbWVudC5qcyNMMjEtTDI1XG52YXIgY2FuVXNlU3ltYm9sID0gdHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiBTeW1ib2wuZm9yO1xudmFyIFJFQUNUX0VMRU1FTlRfVFlQRSA9IGNhblVzZVN5bWJvbCA/IFN5bWJvbC5mb3IoJ3JlYWN0LmVsZW1lbnQnKSA6IDB4ZWFjNztcblxuZnVuY3Rpb24gaXNSZWFjdEVsZW1lbnQodmFsdWUpIHtcblx0cmV0dXJuIHZhbHVlLiQkdHlwZW9mID09PSBSRUFDVF9FTEVNRU5UX1RZUEVcbn1cblxuZnVuY3Rpb24gZW1wdHlUYXJnZXQodmFsKSB7XG5cdHJldHVybiBBcnJheS5pc0FycmF5KHZhbCkgPyBbXSA6IHt9XG59XG5cbmZ1bmN0aW9uIGNsb25lVW5sZXNzT3RoZXJ3aXNlU3BlY2lmaWVkKHZhbHVlLCBvcHRpb25zKSB7XG5cdHJldHVybiAob3B0aW9ucy5jbG9uZSAhPT0gZmFsc2UgJiYgb3B0aW9ucy5pc01lcmdlYWJsZU9iamVjdCh2YWx1ZSkpXG5cdFx0PyBkZWVwbWVyZ2UoZW1wdHlUYXJnZXQodmFsdWUpLCB2YWx1ZSwgb3B0aW9ucylcblx0XHQ6IHZhbHVlXG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRBcnJheU1lcmdlKHRhcmdldCwgc291cmNlLCBvcHRpb25zKSB7XG5cdHJldHVybiB0YXJnZXQuY29uY2F0KHNvdXJjZSkubWFwKGZ1bmN0aW9uKGVsZW1lbnQpIHtcblx0XHRyZXR1cm4gY2xvbmVVbmxlc3NPdGhlcndpc2VTcGVjaWZpZWQoZWxlbWVudCwgb3B0aW9ucylcblx0fSlcbn1cblxuZnVuY3Rpb24gbWVyZ2VPYmplY3QodGFyZ2V0LCBzb3VyY2UsIG9wdGlvbnMpIHtcblx0dmFyIGRlc3RpbmF0aW9uID0ge307XG5cdGlmIChvcHRpb25zLmlzTWVyZ2VhYmxlT2JqZWN0KHRhcmdldCkpIHtcblx0XHRPYmplY3Qua2V5cyh0YXJnZXQpLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG5cdFx0XHRkZXN0aW5hdGlvbltrZXldID0gY2xvbmVVbmxlc3NPdGhlcndpc2VTcGVjaWZpZWQodGFyZ2V0W2tleV0sIG9wdGlvbnMpO1xuXHRcdH0pO1xuXHR9XG5cdE9iamVjdC5rZXlzKHNvdXJjZSkuZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcblx0XHRpZiAoIW9wdGlvbnMuaXNNZXJnZWFibGVPYmplY3Qoc291cmNlW2tleV0pIHx8ICF0YXJnZXRba2V5XSkge1xuXHRcdFx0ZGVzdGluYXRpb25ba2V5XSA9IGNsb25lVW5sZXNzT3RoZXJ3aXNlU3BlY2lmaWVkKHNvdXJjZVtrZXldLCBvcHRpb25zKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZGVzdGluYXRpb25ba2V5XSA9IGRlZXBtZXJnZSh0YXJnZXRba2V5XSwgc291cmNlW2tleV0sIG9wdGlvbnMpO1xuXHRcdH1cblx0fSk7XG5cdHJldHVybiBkZXN0aW5hdGlvblxufVxuXG5mdW5jdGlvbiBkZWVwbWVyZ2UodGFyZ2V0LCBzb3VyY2UsIG9wdGlvbnMpIHtcblx0b3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cdG9wdGlvbnMuYXJyYXlNZXJnZSA9IG9wdGlvbnMuYXJyYXlNZXJnZSB8fCBkZWZhdWx0QXJyYXlNZXJnZTtcblx0b3B0aW9ucy5pc01lcmdlYWJsZU9iamVjdCA9IG9wdGlvbnMuaXNNZXJnZWFibGVPYmplY3QgfHwgaXNNZXJnZWFibGVPYmplY3Q7XG5cblx0dmFyIHNvdXJjZUlzQXJyYXkgPSBBcnJheS5pc0FycmF5KHNvdXJjZSk7XG5cdHZhciB0YXJnZXRJc0FycmF5ID0gQXJyYXkuaXNBcnJheSh0YXJnZXQpO1xuXHR2YXIgc291cmNlQW5kVGFyZ2V0VHlwZXNNYXRjaCA9IHNvdXJjZUlzQXJyYXkgPT09IHRhcmdldElzQXJyYXk7XG5cblx0aWYgKCFzb3VyY2VBbmRUYXJnZXRUeXBlc01hdGNoKSB7XG5cdFx0cmV0dXJuIGNsb25lVW5sZXNzT3RoZXJ3aXNlU3BlY2lmaWVkKHNvdXJjZSwgb3B0aW9ucylcblx0fSBlbHNlIGlmIChzb3VyY2VJc0FycmF5KSB7XG5cdFx0cmV0dXJuIG9wdGlvbnMuYXJyYXlNZXJnZSh0YXJnZXQsIHNvdXJjZSwgb3B0aW9ucylcblx0fSBlbHNlIHtcblx0XHRyZXR1cm4gbWVyZ2VPYmplY3QodGFyZ2V0LCBzb3VyY2UsIG9wdGlvbnMpXG5cdH1cbn1cblxuZGVlcG1lcmdlLmFsbCA9IGZ1bmN0aW9uIGRlZXBtZXJnZUFsbChhcnJheSwgb3B0aW9ucykge1xuXHRpZiAoIUFycmF5LmlzQXJyYXkoYXJyYXkpKSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKCdmaXJzdCBhcmd1bWVudCBzaG91bGQgYmUgYW4gYXJyYXknKVxuXHR9XG5cblx0cmV0dXJuIGFycmF5LnJlZHVjZShmdW5jdGlvbihwcmV2LCBuZXh0KSB7XG5cdFx0cmV0dXJuIGRlZXBtZXJnZShwcmV2LCBuZXh0LCBvcHRpb25zKVxuXHR9LCB7fSlcbn07XG5cbnZhciBkZWVwbWVyZ2VfMSA9IGRlZXBtZXJnZTtcblxuZXhwb3J0IGRlZmF1bHQgZGVlcG1lcmdlXzE7XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqL1xuXG5mdW5jdGlvbiBtYWtlRW1wdHlGdW5jdGlvbihhcmcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gYXJnO1xuICB9O1xufVxuXG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gYWNjZXB0cyBhbmQgZGlzY2FyZHMgaW5wdXRzOyBpdCBoYXMgbm8gc2lkZSBlZmZlY3RzLiBUaGlzIGlzXG4gKiBwcmltYXJpbHkgdXNlZnVsIGlkaW9tYXRpY2FsbHkgZm9yIG92ZXJyaWRhYmxlIGZ1bmN0aW9uIGVuZHBvaW50cyB3aGljaFxuICogYWx3YXlzIG5lZWQgdG8gYmUgY2FsbGFibGUsIHNpbmNlIEpTIGxhY2tzIGEgbnVsbC1jYWxsIGlkaW9tIGFsYSBDb2NvYS5cbiAqL1xudmFyIGVtcHR5RnVuY3Rpb24gPSBmdW5jdGlvbiBlbXB0eUZ1bmN0aW9uKCkge307XG5cbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnMgPSBtYWtlRW1wdHlGdW5jdGlvbjtcbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNGYWxzZSA9IG1ha2VFbXB0eUZ1bmN0aW9uKGZhbHNlKTtcbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNUcnVlID0gbWFrZUVtcHR5RnVuY3Rpb24odHJ1ZSk7XG5lbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zTnVsbCA9IG1ha2VFbXB0eUZ1bmN0aW9uKG51bGwpO1xuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc1RoaXMgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzO1xufTtcbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNBcmd1bWVudCA9IGZ1bmN0aW9uIChhcmcpIHtcbiAgcmV0dXJuIGFyZztcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZW1wdHlGdW5jdGlvbjsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogVXNlIGludmFyaWFudCgpIHRvIGFzc2VydCBzdGF0ZSB3aGljaCB5b3VyIHByb2dyYW0gYXNzdW1lcyB0byBiZSB0cnVlLlxuICpcbiAqIFByb3ZpZGUgc3ByaW50Zi1zdHlsZSBmb3JtYXQgKG9ubHkgJXMgaXMgc3VwcG9ydGVkKSBhbmQgYXJndW1lbnRzXG4gKiB0byBwcm92aWRlIGluZm9ybWF0aW9uIGFib3V0IHdoYXQgYnJva2UgYW5kIHdoYXQgeW91IHdlcmVcbiAqIGV4cGVjdGluZy5cbiAqXG4gKiBUaGUgaW52YXJpYW50IG1lc3NhZ2Ugd2lsbCBiZSBzdHJpcHBlZCBpbiBwcm9kdWN0aW9uLCBidXQgdGhlIGludmFyaWFudFxuICogd2lsbCByZW1haW4gdG8gZW5zdXJlIGxvZ2ljIGRvZXMgbm90IGRpZmZlciBpbiBwcm9kdWN0aW9uLlxuICovXG5cbnZhciB2YWxpZGF0ZUZvcm1hdCA9IGZ1bmN0aW9uIHZhbGlkYXRlRm9ybWF0KGZvcm1hdCkge307XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhbGlkYXRlRm9ybWF0ID0gZnVuY3Rpb24gdmFsaWRhdGVGb3JtYXQoZm9ybWF0KSB7XG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFyaWFudCByZXF1aXJlcyBhbiBlcnJvciBtZXNzYWdlIGFyZ3VtZW50Jyk7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBpbnZhcmlhbnQoY29uZGl0aW9uLCBmb3JtYXQsIGEsIGIsIGMsIGQsIGUsIGYpIHtcbiAgdmFsaWRhdGVGb3JtYXQoZm9ybWF0KTtcblxuICBpZiAoIWNvbmRpdGlvbikge1xuICAgIHZhciBlcnJvcjtcbiAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGVycm9yID0gbmV3IEVycm9yKCdNaW5pZmllZCBleGNlcHRpb24gb2NjdXJyZWQ7IHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCAnICsgJ2ZvciB0aGUgZnVsbCBlcnJvciBtZXNzYWdlIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBhcmdzID0gW2EsIGIsIGMsIGQsIGUsIGZdO1xuICAgICAgdmFyIGFyZ0luZGV4ID0gMDtcbiAgICAgIGVycm9yID0gbmV3IEVycm9yKGZvcm1hdC5yZXBsYWNlKC8lcy9nLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBhcmdzW2FyZ0luZGV4KytdO1xuICAgICAgfSkpO1xuICAgICAgZXJyb3IubmFtZSA9ICdJbnZhcmlhbnQgVmlvbGF0aW9uJztcbiAgICB9XG5cbiAgICBlcnJvci5mcmFtZXNUb1BvcCA9IDE7IC8vIHdlIGRvbid0IGNhcmUgYWJvdXQgaW52YXJpYW50J3Mgb3duIGZyYW1lXG4gICAgdGhyb3cgZXJyb3I7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpbnZhcmlhbnQ7IiwiLyoqXG4gKiB0b1N0cmluZyByZWYuXG4gKi9cblxudmFyIHRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcblxuLyoqXG4gKiBSZXR1cm4gdGhlIHR5cGUgb2YgYHZhbGAuXG4gKlxuICogQHBhcmFtIHtNaXhlZH0gdmFsXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24odmFsKXtcbiAgc3dpdGNoICh0b1N0cmluZy5jYWxsKHZhbCkpIHtcbiAgICBjYXNlICdbb2JqZWN0IERhdGVdJzogcmV0dXJuICdkYXRlJztcbiAgICBjYXNlICdbb2JqZWN0IFJlZ0V4cF0nOiByZXR1cm4gJ3JlZ2V4cCc7XG4gICAgY2FzZSAnW29iamVjdCBBcmd1bWVudHNdJzogcmV0dXJuICdhcmd1bWVudHMnO1xuICAgIGNhc2UgJ1tvYmplY3QgQXJyYXldJzogcmV0dXJuICdhcnJheSc7XG4gICAgY2FzZSAnW29iamVjdCBFcnJvcl0nOiByZXR1cm4gJ2Vycm9yJztcbiAgfVxuXG4gIGlmICh2YWwgPT09IG51bGwpIHJldHVybiAnbnVsbCc7XG4gIGlmICh2YWwgPT09IHVuZGVmaW5lZCkgcmV0dXJuICd1bmRlZmluZWQnO1xuICBpZiAodmFsICE9PSB2YWwpIHJldHVybiAnbmFuJztcbiAgaWYgKHZhbCAmJiB2YWwubm9kZVR5cGUgPT09IDEpIHJldHVybiAnZWxlbWVudCc7XG5cbiAgdmFsID0gdmFsLnZhbHVlT2ZcbiAgICA/IHZhbC52YWx1ZU9mKClcbiAgICA6IE9iamVjdC5wcm90b3R5cGUudmFsdWVPZi5hcHBseSh2YWwpXG5cbiAgcmV0dXJuIHR5cGVvZiB2YWw7XG59O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJkZWZhdWx0XCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9ab29tLmRlZmF1bHQ7XG4gIH1cbn0pO1xuXG52YXIgX1pvb20gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL1pvb21cIikpOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVmYXVsdFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfVGFiLmRlZmF1bHQ7XG4gIH1cbn0pO1xuXG52YXIgX1RhYiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vVGFiXCIpKTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlZmF1bHRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX1RhYnMuZGVmYXVsdDtcbiAgfVxufSk7XG5cbnZhciBfVGFicyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vVGFic1wiKSk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJkZWZhdWx0XCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9UYWJsZUNlbGwuZGVmYXVsdDtcbiAgfVxufSk7XG5cbnZhciBfVGFibGVDZWxsID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9UYWJsZUNlbGxcIikpOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVmYXVsdFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfU3RlcENvbm5lY3Rvci5kZWZhdWx0O1xuICB9XG59KTtcblxudmFyIF9TdGVwQ29ubmVjdG9yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9TdGVwQ29ubmVjdG9yXCIpKTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlZmF1bHRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX1N0ZXBJY29uLmRlZmF1bHQ7XG4gIH1cbn0pO1xuXG52YXIgX1N0ZXBJY29uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9TdGVwSWNvblwiKSk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJkZWZhdWx0XCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9TdGVwTGFiZWwuZGVmYXVsdDtcbiAgfVxufSk7XG5cbnZhciBfU3RlcExhYmVsID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9TdGVwTGFiZWxcIikpOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVmYXVsdFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfU25hY2tiYXJDb250ZW50LmRlZmF1bHQ7XG4gIH1cbn0pO1xuXG52YXIgX1NuYWNrYmFyQ29udGVudCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vU25hY2tiYXJDb250ZW50XCIpKTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlZmF1bHRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX01lbnVJdGVtLmRlZmF1bHQ7XG4gIH1cbn0pO1xuXG52YXIgX01lbnVJdGVtID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9NZW51SXRlbVwiKSk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJkZWZhdWx0XCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9NZW51TGlzdC5kZWZhdWx0O1xuICB9XG59KTtcblxudmFyIF9NZW51TGlzdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vTWVudUxpc3RcIikpOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVmYXVsdFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfUG9wb3Zlci5kZWZhdWx0O1xuICB9XG59KTtcblxudmFyIF9Qb3BvdmVyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9Qb3BvdmVyXCIpKTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlZmF1bHRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX0xpc3RJdGVtLmRlZmF1bHQ7XG4gIH1cbn0pO1xuXG52YXIgX0xpc3RJdGVtID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9MaXN0SXRlbVwiKSk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJkZWZhdWx0XCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9MaXN0LmRlZmF1bHQ7XG4gIH1cbn0pO1xuXG52YXIgX0xpc3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0xpc3RcIikpOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVmYXVsdFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfSW5wdXRBZG9ybm1lbnQuZGVmYXVsdDtcbiAgfVxufSk7XG5cbnZhciBfSW5wdXRBZG9ybm1lbnQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0lucHV0QWRvcm5tZW50XCIpKTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlZmF1bHRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX0dyb3cuZGVmYXVsdDtcbiAgfVxufSk7XG5cbnZhciBfR3JvdyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vR3Jvd1wiKSk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJkZWZhdWx0XCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9HcmlkTGlzdFRpbGUuZGVmYXVsdDtcbiAgfVxufSk7XG5cbnZhciBfR3JpZExpc3RUaWxlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9HcmlkTGlzdFRpbGVcIikpOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVmYXVsdFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfR3JpZExpc3QuZGVmYXVsdDtcbiAgfVxufSk7XG5cbnZhciBfR3JpZExpc3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0dyaWRMaXN0XCIpKTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlZmF1bHRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX0Zvcm1MYWJlbC5kZWZhdWx0O1xuICB9XG59KTtcblxudmFyIF9Gb3JtTGFiZWwgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0Zvcm1MYWJlbFwiKSk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJkZWZhdWx0XCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9Gb3JtSGVscGVyVGV4dC5kZWZhdWx0O1xuICB9XG59KTtcblxudmFyIF9Gb3JtSGVscGVyVGV4dCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vRm9ybUhlbHBlclRleHRcIikpOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVmYXVsdFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfRm9ybUdyb3VwLmRlZmF1bHQ7XG4gIH1cbn0pO1xuXG52YXIgX0Zvcm1Hcm91cCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vRm9ybUdyb3VwXCIpKTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuaGFzVmFsdWUgPSBoYXNWYWx1ZTtcbmV4cG9ydHMuaXNGaWxsZWQgPSBpc0ZpbGxlZDtcbmV4cG9ydHMuaXNBZG9ybmVkU3RhcnQgPSBpc0Fkb3JuZWRTdGFydDtcbmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuc3R5bGVzID0gdm9pZCAwO1xuXG52YXIgX2V4dGVuZHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2V4dGVuZHNcIikpO1xuXG52YXIgX29iamVjdFNwcmVhZDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vb2JqZWN0U3ByZWFkXCIpKTtcblxudmFyIF9kZWZpbmVQcm9wZXJ0eTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vZGVmaW5lUHJvcGVydHlcIikpO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiKSk7XG5cbnZhciBfY2xhc3NDYWxsQ2hlY2syID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2NsYXNzQ2FsbENoZWNrXCIpKTtcblxudmFyIF9jcmVhdGVDbGFzczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vY3JlYXRlQ2xhc3NcIikpO1xuXG52YXIgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5cIikpO1xuXG52YXIgX2luaGVyaXRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9pbmhlcml0c1wiKSk7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbnZhciBfY2xhc3NuYW1lcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImNsYXNzbmFtZXNcIikpO1xuXG52YXIgX3dpdGhTdHlsZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9zdHlsZXMvd2l0aFN0eWxlc1wiKSk7XG5cbnZhciBfVGV4dGFyZWEgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL1RleHRhcmVhXCIpKTtcblxuLy8gU3VwcG9ydHMgZGV0ZXJtaW5hdGlvbiBvZiBpc0NvbnRyb2xsZWQoKS5cbi8vIENvbnRyb2xsZWQgaW5wdXQgYWNjZXB0cyBpdHMgY3VycmVudCB2YWx1ZSBhcyBhIHByb3AuXG4vL1xuLy8gQHNlZSBodHRwczovL2ZhY2Vib29rLmdpdGh1Yi5pby9yZWFjdC9kb2NzL2Zvcm1zLmh0bWwjY29udHJvbGxlZC1jb21wb25lbnRzXG4vLyBAcGFyYW0gdmFsdWVcbi8vIEByZXR1cm5zIHtib29sZWFufSB0cnVlIGlmIHN0cmluZyAoaW5jbHVkaW5nICcnKSBvciBudW1iZXIgKGluY2x1ZGluZyB6ZXJvKVxuZnVuY3Rpb24gaGFzVmFsdWUodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgIShBcnJheS5pc0FycmF5KHZhbHVlKSAmJiB2YWx1ZS5sZW5ndGggPT09IDApO1xufSAvLyBEZXRlcm1pbmUgaWYgZmllbGQgaXMgZW1wdHkgb3IgZmlsbGVkLlxuLy8gUmVzcG9uc2UgZGV0ZXJtaW5lcyBpZiBsYWJlbCBpcyBwcmVzZW50ZWQgYWJvdmUgZmllbGQgb3IgYXMgcGxhY2Vob2xkZXIuXG4vL1xuLy8gQHBhcmFtIG9ialxuLy8gQHBhcmFtIFNTUlxuLy8gQHJldHVybnMge2Jvb2xlYW59IEZhbHNlIHdoZW4gbm90IHByZXNlbnQgb3IgZW1wdHkgc3RyaW5nLlxuLy8gICAgICAgICAgICAgICAgICAgIFRydWUgd2hlbiBhbnkgbnVtYmVyIG9yIHN0cmluZyB3aXRoIGxlbmd0aC5cblxuXG5mdW5jdGlvbiBpc0ZpbGxlZChvYmopIHtcbiAgdmFyIFNTUiA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogZmFsc2U7XG4gIHJldHVybiBvYmogJiYgKGhhc1ZhbHVlKG9iai52YWx1ZSkgJiYgb2JqLnZhbHVlICE9PSAnJyB8fCBTU1IgJiYgaGFzVmFsdWUob2JqLmRlZmF1bHRWYWx1ZSkgJiYgb2JqLmRlZmF1bHRWYWx1ZSAhPT0gJycpO1xufSAvLyBEZXRlcm1pbmUgaWYgYW4gSW5wdXQgaXMgYWRvcm5lZCBvbiBzdGFydC5cbi8vIEl0J3MgY29ycmVzcG9uZGluZyB0byB0aGUgbGVmdCB3aXRoIExUUi5cbi8vXG4vLyBAcGFyYW0gb2JqXG4vLyBAcmV0dXJucyB7Ym9vbGVhbn0gRmFsc2Ugd2hlbiBubyBhZG9ybm1lbnRzLlxuLy8gICAgICAgICAgICAgICAgICAgIFRydWUgd2hlbiBhZG9ybmVkIGF0IHRoZSBzdGFydC5cblxuXG5mdW5jdGlvbiBpc0Fkb3JuZWRTdGFydChvYmopIHtcbiAgcmV0dXJuIG9iai5zdGFydEFkb3JubWVudDtcbn1cblxudmFyIHN0eWxlcyA9IGZ1bmN0aW9uIHN0eWxlcyh0aGVtZSkge1xuICB2YXIgbGlnaHQgPSB0aGVtZS5wYWxldHRlLnR5cGUgPT09ICdsaWdodCc7XG4gIHZhciBwbGFjZWhvbGRlciA9IHtcbiAgICBjb2xvcjogJ2N1cnJlbnRDb2xvcicsXG4gICAgb3BhY2l0eTogbGlnaHQgPyAwLjQyIDogMC41LFxuICAgIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgnb3BhY2l0eScsIHtcbiAgICAgIGR1cmF0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5kdXJhdGlvbi5zaG9ydGVyXG4gICAgfSlcbiAgfTtcbiAgdmFyIHBsYWNlaG9sZGVySGlkZGVuID0ge1xuICAgIG9wYWNpdHk6IDBcbiAgfTtcbiAgdmFyIHBsYWNlaG9sZGVyVmlzaWJsZSA9IHtcbiAgICBvcGFjaXR5OiBsaWdodCA/IDAuNDIgOiAwLjVcbiAgfTtcbiAgdmFyIGJvdHRvbUxpbmVDb2xvciA9IGxpZ2h0ID8gJ3JnYmEoMCwgMCwgMCwgMC40MiknIDogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC43KSc7XG4gIHJldHVybiB7XG4gICAgcm9vdDoge1xuICAgICAgLy8gTWltaWNzIHRoZSBkZWZhdWx0IGlucHV0IGRpc3BsYXkgcHJvcGVydHkgdXNlZCBieSBicm93c2VycyBmb3IgYW4gaW5wdXQuXG4gICAgICBkaXNwbGF5OiAnaW5saW5lLWZsZXgnLFxuICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgICBmb250RmFtaWx5OiB0aGVtZS50eXBvZ3JhcGh5LmZvbnRGYW1pbHksXG4gICAgICBjb2xvcjogbGlnaHQgPyAncmdiYSgwLCAwLCAwLCAwLjg3KScgOiB0aGVtZS5wYWxldHRlLmNvbW1vbi53aGl0ZSxcbiAgICAgIGZvbnRTaXplOiB0aGVtZS50eXBvZ3JhcGh5LnB4VG9SZW0oMTYpLFxuICAgICAgbGluZUhlaWdodDogJzEuMTg3NWVtJyxcbiAgICAgIC8vIFJlc2V0ICgxOXB4KSwgbWF0Y2ggdGhlIG5hdGl2ZSBpbnB1dCBsaW5lLWhlaWdodFxuICAgICAgJyYkZGlzYWJsZWQnOiB7XG4gICAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnRleHQuZGlzYWJsZWRcbiAgICAgIH1cbiAgICB9LFxuICAgIGZvcm1Db250cm9sOiB7XG4gICAgICAnbGFiZWwgKyAmJzoge1xuICAgICAgICBtYXJnaW5Ub3A6IHRoZW1lLnNwYWNpbmcudW5pdCAqIDJcbiAgICAgIH1cbiAgICB9LFxuICAgIGZvY3VzZWQ6IHt9LFxuICAgIGRpc2FibGVkOiB7fSxcbiAgICB1bmRlcmxpbmU6IHtcbiAgICAgICcmOmFmdGVyJzoge1xuICAgICAgICBib3JkZXJCb3R0b206IFwiMnB4IHNvbGlkIFwiLmNvbmNhdCh0aGVtZS5wYWxldHRlLnByaW1hcnlbbGlnaHQgPyAnZGFyaycgOiAnbGlnaHQnXSksXG4gICAgICAgIGxlZnQ6IDAsXG4gICAgICAgIGJvdHRvbTogMCxcbiAgICAgICAgLy8gRG9pbmcgdGhlIG90aGVyIHdheSBhcm91bmQgY3Jhc2ggb24gSUUxMSBcIicnXCIgaHR0cHM6Ly9naXRodWIuY29tL2Nzc2luanMvanNzL2lzc3Vlcy8yNDJcbiAgICAgICAgY29udGVudDogJ1wiXCInLFxuICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgcmlnaHQ6IDAsXG4gICAgICAgIHRyYW5zZm9ybTogJ3NjYWxlWCgwKScsXG4gICAgICAgIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgndHJhbnNmb3JtJywge1xuICAgICAgICAgIGR1cmF0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5kdXJhdGlvbi5zaG9ydGVyLFxuICAgICAgICAgIGVhc2luZzogdGhlbWUudHJhbnNpdGlvbnMuZWFzaW5nLmVhc2VPdXRcbiAgICAgICAgfSksXG4gICAgICAgIHBvaW50ZXJFdmVudHM6ICdub25lJyAvLyBUcmFuc3BhcmVudCB0byB0aGUgaG92ZXIgc3R5bGUuXG5cbiAgICAgIH0sXG4gICAgICAnJiRmb2N1c2VkOmFmdGVyJzoge1xuICAgICAgICB0cmFuc2Zvcm06ICdzY2FsZVgoMSknXG4gICAgICB9LFxuICAgICAgJyYkZXJyb3I6YWZ0ZXInOiB7XG4gICAgICAgIGJvcmRlckJvdHRvbUNvbG9yOiB0aGVtZS5wYWxldHRlLmVycm9yLm1haW4sXG4gICAgICAgIHRyYW5zZm9ybTogJ3NjYWxlWCgxKScgLy8gZXJyb3IgaXMgYWx3YXlzIHVuZGVybGluZWQgaW4gcmVkXG5cbiAgICAgIH0sXG4gICAgICAnJjpiZWZvcmUnOiB7XG4gICAgICAgIGJvcmRlckJvdHRvbTogXCIxcHggc29saWQgXCIuY29uY2F0KGJvdHRvbUxpbmVDb2xvciksXG4gICAgICAgIGxlZnQ6IDAsXG4gICAgICAgIGJvdHRvbTogMCxcbiAgICAgICAgLy8gRG9pbmcgdGhlIG90aGVyIHdheSBhcm91bmQgY3Jhc2ggb24gSUUxMSBcIicnXCIgaHR0cHM6Ly9naXRodWIuY29tL2Nzc2luanMvanNzL2lzc3Vlcy8yNDJcbiAgICAgICAgY29udGVudDogJ1wiXFxcXDAwYTBcIicsXG4gICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICByaWdodDogMCxcbiAgICAgICAgdHJhbnNpdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCdib3JkZXItYm90dG9tLWNvbG9yJywge1xuICAgICAgICAgIGR1cmF0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5kdXJhdGlvbi5zaG9ydGVyXG4gICAgICAgIH0pLFxuICAgICAgICBwb2ludGVyRXZlbnRzOiAnbm9uZScgLy8gVHJhbnNwYXJlbnQgdG8gdGhlIGhvdmVyIHN0eWxlLlxuXG4gICAgICB9LFxuICAgICAgJyY6aG92ZXI6bm90KCRkaXNhYmxlZCk6bm90KCRmb2N1c2VkKTpub3QoJGVycm9yKTpiZWZvcmUnOiB7XG4gICAgICAgIGJvcmRlckJvdHRvbTogXCIycHggc29saWQgXCIuY29uY2F0KHRoZW1lLnBhbGV0dGUudGV4dC5wcmltYXJ5KVxuICAgICAgfSxcbiAgICAgICcmJGRpc2FibGVkOmJlZm9yZSc6IHtcbiAgICAgICAgYm9yZGVyQm90dG9tOiBcIjFweCBkb3R0ZWQgXCIuY29uY2F0KGJvdHRvbUxpbmVDb2xvcilcbiAgICAgIH1cbiAgICB9LFxuICAgIGVycm9yOiB7fSxcbiAgICBtdWx0aWxpbmU6IHtcbiAgICAgIHBhZGRpbmc6IFwiXCIuY29uY2F0KHRoZW1lLnNwYWNpbmcudW5pdCAtIDIsIFwicHggMCBcIikuY29uY2F0KHRoZW1lLnNwYWNpbmcudW5pdCAtIDEsIFwicHhcIilcbiAgICB9LFxuICAgIGZ1bGxXaWR0aDoge1xuICAgICAgd2lkdGg6ICcxMDAlJ1xuICAgIH0sXG4gICAgaW5wdXQ6IHtcbiAgICAgIGZvbnQ6ICdpbmhlcml0JyxcbiAgICAgIGNvbG9yOiAnY3VycmVudENvbG9yJyxcbiAgICAgIHBhZGRpbmc6IFwiXCIuY29uY2F0KHRoZW1lLnNwYWNpbmcudW5pdCAtIDIsIFwicHggMCBcIikuY29uY2F0KHRoZW1lLnNwYWNpbmcudW5pdCAtIDEsIFwicHhcIiksXG4gICAgICBib3JkZXI6IDAsXG4gICAgICBib3hTaXppbmc6ICdjb250ZW50LWJveCcsXG4gICAgICB2ZXJ0aWNhbEFsaWduOiAnbWlkZGxlJyxcbiAgICAgIGJhY2tncm91bmQ6ICdub25lJyxcbiAgICAgIG1hcmdpbjogMCxcbiAgICAgIC8vIFJlc2V0IGZvciBTYWZhcmlcbiAgICAgIC8vIFJlbW92ZSBncmV5IGhpZ2hsaWdodFxuICAgICAgV2Via2l0VGFwSGlnaGxpZ2h0Q29sb3I6ICd0cmFuc3BhcmVudCcsXG4gICAgICBkaXNwbGF5OiAnYmxvY2snLFxuICAgICAgLy8gTWFrZSB0aGUgZmxleCBpdGVtIHNocmluayB3aXRoIEZpcmVmb3hcbiAgICAgIG1pbldpZHRoOiAwLFxuICAgICAgZmxleEdyb3c6IDEsXG4gICAgICAnJjo6LXdlYmtpdC1pbnB1dC1wbGFjZWhvbGRlcic6IHBsYWNlaG9sZGVyLFxuICAgICAgJyY6Oi1tb3otcGxhY2Vob2xkZXInOiBwbGFjZWhvbGRlcixcbiAgICAgIC8vIEZpcmVmb3ggMTkrXG4gICAgICAnJjotbXMtaW5wdXQtcGxhY2Vob2xkZXInOiBwbGFjZWhvbGRlcixcbiAgICAgIC8vIElFIDExXG4gICAgICAnJjo6LW1zLWlucHV0LXBsYWNlaG9sZGVyJzogcGxhY2Vob2xkZXIsXG4gICAgICAvLyBFZGdlXG4gICAgICAnJjpmb2N1cyc6IHtcbiAgICAgICAgb3V0bGluZTogMFxuICAgICAgfSxcbiAgICAgIC8vIFJlc2V0IEZpcmVmb3ggaW52YWxpZCByZXF1aXJlZCBpbnB1dCBzdHlsZVxuICAgICAgJyY6aW52YWxpZCc6IHtcbiAgICAgICAgYm94U2hhZG93OiAnbm9uZSdcbiAgICAgIH0sXG4gICAgICAnJjo6LXdlYmtpdC1zZWFyY2gtZGVjb3JhdGlvbic6IHtcbiAgICAgICAgLy8gUmVtb3ZlIHRoZSBwYWRkaW5nIHdoZW4gdHlwZT1zZWFyY2guXG4gICAgICAgICctd2Via2l0LWFwcGVhcmFuY2UnOiAnbm9uZSdcbiAgICAgIH0sXG4gICAgICAvLyBTaG93IGFuZCBoaWRlIHRoZSBwbGFjZWhvbGRlciBsb2dpY1xuICAgICAgJ2xhYmVsW2RhdGEtc2hyaW5rPWZhbHNlXSArICRmb3JtQ29udHJvbCAmJzoge1xuICAgICAgICAnJjo6LXdlYmtpdC1pbnB1dC1wbGFjZWhvbGRlcic6IHBsYWNlaG9sZGVySGlkZGVuLFxuICAgICAgICAnJjo6LW1vei1wbGFjZWhvbGRlcic6IHBsYWNlaG9sZGVySGlkZGVuLFxuICAgICAgICAvLyBGaXJlZm94IDE5K1xuICAgICAgICAnJjotbXMtaW5wdXQtcGxhY2Vob2xkZXInOiBwbGFjZWhvbGRlckhpZGRlbixcbiAgICAgICAgLy8gSUUgMTFcbiAgICAgICAgJyY6Oi1tcy1pbnB1dC1wbGFjZWhvbGRlcic6IHBsYWNlaG9sZGVySGlkZGVuLFxuICAgICAgICAvLyBFZGdlXG4gICAgICAgICcmOmZvY3VzOjotd2Via2l0LWlucHV0LXBsYWNlaG9sZGVyJzogcGxhY2Vob2xkZXJWaXNpYmxlLFxuICAgICAgICAnJjpmb2N1czo6LW1vei1wbGFjZWhvbGRlcic6IHBsYWNlaG9sZGVyVmlzaWJsZSxcbiAgICAgICAgLy8gRmlyZWZveCAxOStcbiAgICAgICAgJyY6Zm9jdXM6LW1zLWlucHV0LXBsYWNlaG9sZGVyJzogcGxhY2Vob2xkZXJWaXNpYmxlLFxuICAgICAgICAvLyBJRSAxMVxuICAgICAgICAnJjpmb2N1czo6LW1zLWlucHV0LXBsYWNlaG9sZGVyJzogcGxhY2Vob2xkZXJWaXNpYmxlIC8vIEVkZ2VcblxuICAgICAgfSxcbiAgICAgICcmJGRpc2FibGVkJzoge1xuICAgICAgICBvcGFjaXR5OiAxIC8vIFJlc2V0IGlPUyBvcGFjaXR5XG5cbiAgICAgIH1cbiAgICB9LFxuICAgIGlucHV0TWFyZ2luRGVuc2U6IHtcbiAgICAgIHBhZGRpbmdUb3A6IHRoZW1lLnNwYWNpbmcudW5pdCAvIDIgLSAxXG4gICAgfSxcbiAgICBpbnB1dE11bHRpbGluZToge1xuICAgICAgcmVzaXplOiAnbm9uZScsXG4gICAgICBwYWRkaW5nOiAwXG4gICAgfSxcbiAgICBpbnB1dFR5cGU6IHtcbiAgICAgIC8vIHR5cGU9XCJkYXRlXCIgb3IgdHlwZT1cInRpbWVcIiwgZXRjLiBoYXZlIHNwZWNpZmljIHN0eWxlcyB3ZSBuZWVkIHRvIHJlc2V0LlxuICAgICAgaGVpZ2h0OiAnMS4xODc1ZW0nIC8vIFJlc2V0ICgxOXB4KSwgbWF0Y2ggdGhlIG5hdGl2ZSBpbnB1dCBsaW5lLWhlaWdodFxuXG4gICAgfSxcbiAgICBpbnB1dFR5cGVTZWFyY2g6IHtcbiAgICAgIC8vIEltcHJvdmUgdHlwZSBzZWFyY2ggc3R5bGUuXG4gICAgICAnLW1vei1hcHBlYXJhbmNlJzogJ3RleHRmaWVsZCcsXG4gICAgICAnLXdlYmtpdC1hcHBlYXJhbmNlJzogJ3RleHRmaWVsZCdcbiAgICB9XG4gIH07XG59O1xuXG5leHBvcnRzLnN0eWxlcyA9IHN0eWxlcztcblxuZnVuY3Rpb24gZm9ybUNvbnRyb2xTdGF0ZShwcm9wcywgY29udGV4dCkge1xuICB2YXIgZGlzYWJsZWQgPSBwcm9wcy5kaXNhYmxlZDtcbiAgdmFyIGVycm9yID0gcHJvcHMuZXJyb3I7XG4gIHZhciBtYXJnaW4gPSBwcm9wcy5tYXJnaW47XG5cbiAgaWYgKGNvbnRleHQgJiYgY29udGV4dC5tdWlGb3JtQ29udHJvbCkge1xuICAgIGlmICh0eXBlb2YgZGlzYWJsZWQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBkaXNhYmxlZCA9IGNvbnRleHQubXVpRm9ybUNvbnRyb2wuZGlzYWJsZWQ7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBlcnJvciA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGVycm9yID0gY29udGV4dC5tdWlGb3JtQ29udHJvbC5lcnJvcjtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIG1hcmdpbiA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIG1hcmdpbiA9IGNvbnRleHQubXVpRm9ybUNvbnRyb2wubWFyZ2luO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgZGlzYWJsZWQ6IGRpc2FibGVkLFxuICAgIGVycm9yOiBlcnJvcixcbiAgICBtYXJnaW46IG1hcmdpblxuICB9O1xufVxuXG52YXIgSW5wdXQgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgKDAsIF9pbmhlcml0czIuZGVmYXVsdCkoSW5wdXQsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIElucHV0KHByb3BzLCBjb250ZXh0KSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgKDAsIF9jbGFzc0NhbGxDaGVjazIuZGVmYXVsdCkodGhpcywgSW5wdXQpO1xuICAgIF90aGlzID0gKDAsIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMi5kZWZhdWx0KSh0aGlzLCAoSW5wdXQuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihJbnB1dCkpLmNhbGwodGhpcywgcHJvcHMsIGNvbnRleHQpKTtcbiAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGZvY3VzZWQ6IGZhbHNlXG4gICAgfTtcbiAgICBfdGhpcy5pc0NvbnRyb2xsZWQgPSBfdGhpcy5wcm9wcy52YWx1ZSAhPSBudWxsO1xuICAgIF90aGlzLmlucHV0ID0gbnVsbDtcblxuICAgIF90aGlzLmhhbmRsZUZvY3VzID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAvLyBGaXggYSBidWcgd2l0aCBJRTExIHdoZXJlIHRoZSBmb2N1cy9ibHVyIGV2ZW50cyBhcmUgdHJpZ2dlcmVkXG4gICAgICAvLyB3aGlsZSB0aGUgaW5wdXQgaXMgZGlzYWJsZWQuXG4gICAgICBpZiAoZm9ybUNvbnRyb2xTdGF0ZShfdGhpcy5wcm9wcywgX3RoaXMuY29udGV4dCkuZGlzYWJsZWQpIHtcbiAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICBmb2N1c2VkOiB0cnVlXG4gICAgICB9KTtcblxuICAgICAgaWYgKF90aGlzLnByb3BzLm9uRm9jdXMpIHtcbiAgICAgICAgX3RoaXMucHJvcHMub25Gb2N1cyhldmVudCk7XG4gICAgICB9XG5cbiAgICAgIHZhciBtdWlGb3JtQ29udHJvbCA9IF90aGlzLmNvbnRleHQubXVpRm9ybUNvbnRyb2w7XG5cbiAgICAgIGlmIChtdWlGb3JtQ29udHJvbCAmJiBtdWlGb3JtQ29udHJvbC5vbkZvY3VzKSB7XG4gICAgICAgIG11aUZvcm1Db250cm9sLm9uRm9jdXMoZXZlbnQpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVCbHVyID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGZvY3VzZWQ6IGZhbHNlXG4gICAgICB9KTtcblxuICAgICAgaWYgKF90aGlzLnByb3BzLm9uQmx1cikge1xuICAgICAgICBfdGhpcy5wcm9wcy5vbkJsdXIoZXZlbnQpO1xuICAgICAgfVxuXG4gICAgICB2YXIgbXVpRm9ybUNvbnRyb2wgPSBfdGhpcy5jb250ZXh0Lm11aUZvcm1Db250cm9sO1xuXG4gICAgICBpZiAobXVpRm9ybUNvbnRyb2wgJiYgbXVpRm9ybUNvbnRyb2wub25CbHVyKSB7XG4gICAgICAgIG11aUZvcm1Db250cm9sLm9uQmx1cihldmVudCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZUNoYW5nZSA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgaWYgKCFfdGhpcy5pc0NvbnRyb2xsZWQpIHtcbiAgICAgICAgX3RoaXMuY2hlY2tEaXJ0eShfdGhpcy5pbnB1dCk7XG4gICAgICB9IC8vIFBlcmZvcm0gaW4gdGhlIHdpbGxVcGRhdGVcblxuXG4gICAgICBpZiAoX3RoaXMucHJvcHMub25DaGFuZ2UpIHtcbiAgICAgICAgX3RoaXMucHJvcHMub25DaGFuZ2UoZXZlbnQpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVSZWZJbnB1dCA9IGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICBfdGhpcy5pbnB1dCA9IG5vZGU7XG4gICAgICB2YXIgcmVmO1xuXG4gICAgICBpZiAoX3RoaXMucHJvcHMuaW5wdXRSZWYpIHtcbiAgICAgICAgcmVmID0gX3RoaXMucHJvcHMuaW5wdXRSZWY7XG4gICAgICB9IGVsc2UgaWYgKF90aGlzLnByb3BzLmlucHV0UHJvcHMgJiYgX3RoaXMucHJvcHMuaW5wdXRQcm9wcy5yZWYpIHtcbiAgICAgICAgcmVmID0gX3RoaXMucHJvcHMuaW5wdXRQcm9wcy5yZWY7XG4gICAgICB9XG5cbiAgICAgIGlmIChyZWYpIHtcbiAgICAgICAgaWYgKHR5cGVvZiByZWYgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICByZWYobm9kZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVmLmN1cnJlbnQgPSBub2RlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIGlmIChfdGhpcy5pc0NvbnRyb2xsZWQpIHtcbiAgICAgIF90aGlzLmNoZWNrRGlydHkocHJvcHMpO1xuICAgIH1cblxuICAgIHZhciBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMsIG5leHRDb250ZXh0KSB7XG4gICAgICAvLyBUaGUgYmx1ciB3b24ndCBmaXJlIHdoZW4gdGhlIGRpc2FibGVkIHN0YXRlIGlzIHNldCBvbiBhIGZvY3VzZWQgaW5wdXQuXG4gICAgICAvLyBXZSBuZWVkIHRvIGJvb2sga2VlcCB0aGUgZm9jdXNlZCBzdGF0ZSBtYW51YWxseS5cbiAgICAgIGlmICghZm9ybUNvbnRyb2xTdGF0ZShfdGhpcy5wcm9wcywgX3RoaXMuY29udGV4dCkuZGlzYWJsZWQgJiYgZm9ybUNvbnRyb2xTdGF0ZShuZXh0UHJvcHMsIG5leHRDb250ZXh0KS5kaXNhYmxlZCkge1xuICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgZm9jdXNlZDogZmFsc2VcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHZhciBjb21wb25lbnRXaWxsVXBkYXRlID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVwZGF0ZShuZXh0UHJvcHMsIG5leHRTdGF0ZSwgbmV4dENvbnRleHQpIHtcbiAgICAgIC8vIEJvb2sga2VlcCB0aGUgZm9jdXNlZCBzdGF0ZS5cbiAgICAgIGlmICghZm9ybUNvbnRyb2xTdGF0ZShfdGhpcy5wcm9wcywgX3RoaXMuY29udGV4dCkuZGlzYWJsZWQgJiYgZm9ybUNvbnRyb2xTdGF0ZShuZXh0UHJvcHMsIG5leHRDb250ZXh0KS5kaXNhYmxlZCkge1xuICAgICAgICB2YXIgbXVpRm9ybUNvbnRyb2wgPSBfdGhpcy5jb250ZXh0Lm11aUZvcm1Db250cm9sO1xuXG4gICAgICAgIGlmIChtdWlGb3JtQ29udHJvbCAmJiBtdWlGb3JtQ29udHJvbC5vbkJsdXIpIHtcbiAgICAgICAgICBtdWlGb3JtQ29udHJvbC5vbkJsdXIoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07IC8vIFN1cHBvcnQgZm9yIHJlYWN0ID49IDE2LjMuMCAmJiA8IDE3LjAuMFxuXG4gICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cblxuXG4gICAgaWYgKF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUNvbnRleHQpIHtcbiAgICAgIF90aGlzLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID0gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcztcbiAgICAgIF90aGlzLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlID0gY29tcG9uZW50V2lsbFVwZGF0ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgX3RoaXMuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9IGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHM7XG4gICAgICBfdGhpcy5jb21wb25lbnRXaWxsVXBkYXRlID0gY29tcG9uZW50V2lsbFVwZGF0ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICAoMCwgX2NyZWF0ZUNsYXNzMi5kZWZhdWx0KShJbnB1dCwgW3tcbiAgICBrZXk6IFwiZ2V0Q2hpbGRDb250ZXh0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldENoaWxkQ29udGV4dCgpIHtcbiAgICAgIC8vIFdlIGFyZSBjb25zdW1pbmcgdGhlIHBhcmVudCBtdWlGb3JtQ29udHJvbCBjb250ZXh0LlxuICAgICAgLy8gV2UgZG9uJ3Qgd2FudCBhIGNoaWxkIHRvIGNvbnN1bWUgaXQgYSBzZWNvbmQgdGltZS5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIG11aUZvcm1Db250cm9sOiBudWxsXG4gICAgICB9O1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJjb21wb25lbnREaWRNb3VudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgIGlmICghdGhpcy5pc0NvbnRyb2xsZWQpIHtcbiAgICAgICAgdGhpcy5jaGVja0RpcnR5KHRoaXMuaW5wdXQpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJjb21wb25lbnREaWRVcGRhdGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKCkge1xuICAgICAgaWYgKHRoaXMuaXNDb250cm9sbGVkKSB7XG4gICAgICAgIHRoaXMuY2hlY2tEaXJ0eSh0aGlzLnByb3BzKTtcbiAgICAgIH0gLy8gZWxzZSBwZXJmb3JtZWQgaW4gdGhlIG9uQ2hhbmdlXG5cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY2hlY2tEaXJ0eVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjaGVja0RpcnR5KG9iaikge1xuICAgICAgdmFyIG11aUZvcm1Db250cm9sID0gdGhpcy5jb250ZXh0Lm11aUZvcm1Db250cm9sO1xuXG4gICAgICBpZiAoaXNGaWxsZWQob2JqKSkge1xuICAgICAgICBpZiAobXVpRm9ybUNvbnRyb2wgJiYgbXVpRm9ybUNvbnRyb2wub25GaWxsZWQpIHtcbiAgICAgICAgICBtdWlGb3JtQ29udHJvbC5vbkZpbGxlZCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMucHJvcHMub25GaWxsZWQpIHtcbiAgICAgICAgICB0aGlzLnByb3BzLm9uRmlsbGVkKCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChtdWlGb3JtQ29udHJvbCAmJiBtdWlGb3JtQ29udHJvbC5vbkVtcHR5KSB7XG4gICAgICAgIG11aUZvcm1Db250cm9sLm9uRW1wdHkoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMucHJvcHMub25FbXB0eSkge1xuICAgICAgICB0aGlzLnByb3BzLm9uRW1wdHkoKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfY2xhc3NOYW1lcywgX2NsYXNzTmFtZXMyO1xuXG4gICAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBhdXRvQ29tcGxldGUgPSBfcHJvcHMuYXV0b0NvbXBsZXRlLFxuICAgICAgICAgIGF1dG9Gb2N1cyA9IF9wcm9wcy5hdXRvRm9jdXMsXG4gICAgICAgICAgY2xhc3NlcyA9IF9wcm9wcy5jbGFzc2VzLFxuICAgICAgICAgIGNsYXNzTmFtZVByb3AgPSBfcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICAgIGRlZmF1bHRWYWx1ZSA9IF9wcm9wcy5kZWZhdWx0VmFsdWUsXG4gICAgICAgICAgZGlzYWJsZWRQcm9wID0gX3Byb3BzLmRpc2FibGVkLFxuICAgICAgICAgIGRpc2FibGVVbmRlcmxpbmUgPSBfcHJvcHMuZGlzYWJsZVVuZGVybGluZSxcbiAgICAgICAgICBlbmRBZG9ybm1lbnQgPSBfcHJvcHMuZW5kQWRvcm5tZW50LFxuICAgICAgICAgIGVycm9yUHJvcCA9IF9wcm9wcy5lcnJvcixcbiAgICAgICAgICBmdWxsV2lkdGggPSBfcHJvcHMuZnVsbFdpZHRoLFxuICAgICAgICAgIGlkID0gX3Byb3BzLmlkLFxuICAgICAgICAgIGlucHV0Q29tcG9uZW50ID0gX3Byb3BzLmlucHV0Q29tcG9uZW50LFxuICAgICAgICAgIF9wcm9wcyRpbnB1dFByb3BzID0gX3Byb3BzLmlucHV0UHJvcHM7XG4gICAgICBfcHJvcHMkaW5wdXRQcm9wcyA9IF9wcm9wcyRpbnB1dFByb3BzID09PSB2b2lkIDAgPyB7fSA6IF9wcm9wcyRpbnB1dFByb3BzO1xuICAgICAgdmFyIGlucHV0UHJvcHNDbGFzc05hbWUgPSBfcHJvcHMkaW5wdXRQcm9wcy5jbGFzc05hbWUsXG4gICAgICAgICAgaW5wdXRQcm9wc1Byb3AgPSAoMCwgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMi5kZWZhdWx0KShfcHJvcHMkaW5wdXRQcm9wcywgW1wiY2xhc3NOYW1lXCJdKSxcbiAgICAgICAgICBpbnB1dFJlZiA9IF9wcm9wcy5pbnB1dFJlZixcbiAgICAgICAgICBtYXJnaW5Qcm9wID0gX3Byb3BzLm1hcmdpbixcbiAgICAgICAgICBtdWx0aWxpbmUgPSBfcHJvcHMubXVsdGlsaW5lLFxuICAgICAgICAgIG5hbWUgPSBfcHJvcHMubmFtZSxcbiAgICAgICAgICBvbkJsdXIgPSBfcHJvcHMub25CbHVyLFxuICAgICAgICAgIG9uQ2hhbmdlID0gX3Byb3BzLm9uQ2hhbmdlLFxuICAgICAgICAgIG9uRW1wdHkgPSBfcHJvcHMub25FbXB0eSxcbiAgICAgICAgICBvbkZpbGxlZCA9IF9wcm9wcy5vbkZpbGxlZCxcbiAgICAgICAgICBvbkZvY3VzID0gX3Byb3BzLm9uRm9jdXMsXG4gICAgICAgICAgb25LZXlEb3duID0gX3Byb3BzLm9uS2V5RG93bixcbiAgICAgICAgICBvbktleVVwID0gX3Byb3BzLm9uS2V5VXAsXG4gICAgICAgICAgcGxhY2Vob2xkZXIgPSBfcHJvcHMucGxhY2Vob2xkZXIsXG4gICAgICAgICAgcmVhZE9ubHkgPSBfcHJvcHMucmVhZE9ubHksXG4gICAgICAgICAgcm93cyA9IF9wcm9wcy5yb3dzLFxuICAgICAgICAgIHJvd3NNYXggPSBfcHJvcHMucm93c01heCxcbiAgICAgICAgICBzdGFydEFkb3JubWVudCA9IF9wcm9wcy5zdGFydEFkb3JubWVudCxcbiAgICAgICAgICB0eXBlID0gX3Byb3BzLnR5cGUsXG4gICAgICAgICAgdmFsdWUgPSBfcHJvcHMudmFsdWUsXG4gICAgICAgICAgb3RoZXIgPSAoMCwgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMi5kZWZhdWx0KShfcHJvcHMsIFtcImF1dG9Db21wbGV0ZVwiLCBcImF1dG9Gb2N1c1wiLCBcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJkZWZhdWx0VmFsdWVcIiwgXCJkaXNhYmxlZFwiLCBcImRpc2FibGVVbmRlcmxpbmVcIiwgXCJlbmRBZG9ybm1lbnRcIiwgXCJlcnJvclwiLCBcImZ1bGxXaWR0aFwiLCBcImlkXCIsIFwiaW5wdXRDb21wb25lbnRcIiwgXCJpbnB1dFByb3BzXCIsIFwiaW5wdXRSZWZcIiwgXCJtYXJnaW5cIiwgXCJtdWx0aWxpbmVcIiwgXCJuYW1lXCIsIFwib25CbHVyXCIsIFwib25DaGFuZ2VcIiwgXCJvbkVtcHR5XCIsIFwib25GaWxsZWRcIiwgXCJvbkZvY3VzXCIsIFwib25LZXlEb3duXCIsIFwib25LZXlVcFwiLCBcInBsYWNlaG9sZGVyXCIsIFwicmVhZE9ubHlcIiwgXCJyb3dzXCIsIFwicm93c01heFwiLCBcInN0YXJ0QWRvcm5tZW50XCIsIFwidHlwZVwiLCBcInZhbHVlXCJdKTtcbiAgICAgIHZhciBtdWlGb3JtQ29udHJvbCA9IHRoaXMuY29udGV4dC5tdWlGb3JtQ29udHJvbDtcblxuICAgICAgdmFyIF9mb3JtQ29udHJvbFN0YXRlID0gZm9ybUNvbnRyb2xTdGF0ZSh0aGlzLnByb3BzLCB0aGlzLmNvbnRleHQpLFxuICAgICAgICAgIGRpc2FibGVkID0gX2Zvcm1Db250cm9sU3RhdGUuZGlzYWJsZWQsXG4gICAgICAgICAgZXJyb3IgPSBfZm9ybUNvbnRyb2xTdGF0ZS5lcnJvcixcbiAgICAgICAgICBtYXJnaW4gPSBfZm9ybUNvbnRyb2xTdGF0ZS5tYXJnaW47XG5cbiAgICAgIHZhciBjbGFzc05hbWUgPSAoMCwgX2NsYXNzbmFtZXMuZGVmYXVsdCkoY2xhc3Nlcy5yb290LCAoX2NsYXNzTmFtZXMgPSB7fSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2NsYXNzTmFtZXMsIGNsYXNzZXMuZGlzYWJsZWQsIGRpc2FibGVkKSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2NsYXNzTmFtZXMsIGNsYXNzZXMuZXJyb3IsIGVycm9yKSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2NsYXNzTmFtZXMsIGNsYXNzZXMuZnVsbFdpZHRoLCBmdWxsV2lkdGgpLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lcywgY2xhc3Nlcy5mb2N1c2VkLCB0aGlzLnN0YXRlLmZvY3VzZWQpLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lcywgY2xhc3Nlcy5mb3JtQ29udHJvbCwgbXVpRm9ybUNvbnRyb2wpLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lcywgY2xhc3Nlcy5tdWx0aWxpbmUsIG11bHRpbGluZSksICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKF9jbGFzc05hbWVzLCBjbGFzc2VzLnVuZGVybGluZSwgIWRpc2FibGVVbmRlcmxpbmUpLCBfY2xhc3NOYW1lcyksIGNsYXNzTmFtZVByb3ApO1xuICAgICAgdmFyIGlucHV0Q2xhc3NOYW1lID0gKDAsIF9jbGFzc25hbWVzLmRlZmF1bHQpKGNsYXNzZXMuaW5wdXQsIChfY2xhc3NOYW1lczIgPSB7fSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2NsYXNzTmFtZXMyLCBjbGFzc2VzLmRpc2FibGVkLCBkaXNhYmxlZCksICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKF9jbGFzc05hbWVzMiwgY2xhc3Nlcy5pbnB1dFR5cGUsIHR5cGUgIT09ICd0ZXh0JyksICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKF9jbGFzc05hbWVzMiwgY2xhc3Nlcy5pbnB1dFR5cGVTZWFyY2gsIHR5cGUgPT09ICdzZWFyY2gnKSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2NsYXNzTmFtZXMyLCBjbGFzc2VzLmlucHV0TXVsdGlsaW5lLCBtdWx0aWxpbmUpLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lczIsIGNsYXNzZXMuaW5wdXRNYXJnaW5EZW5zZSwgbWFyZ2luID09PSAnZGVuc2UnKSwgX2NsYXNzTmFtZXMyKSwgaW5wdXRQcm9wc0NsYXNzTmFtZSk7XG4gICAgICB2YXIgcmVxdWlyZWQgPSBtdWlGb3JtQ29udHJvbCAmJiBtdWlGb3JtQ29udHJvbC5yZXF1aXJlZCA9PT0gdHJ1ZTtcbiAgICAgIHZhciBJbnB1dENvbXBvbmVudCA9ICdpbnB1dCc7XG4gICAgICB2YXIgaW5wdXRQcm9wcyA9ICgwLCBfb2JqZWN0U3ByZWFkMi5kZWZhdWx0KSh7fSwgaW5wdXRQcm9wc1Byb3AsIHtcbiAgICAgICAgcmVmOiB0aGlzLmhhbmRsZVJlZklucHV0XG4gICAgICB9KTtcblxuICAgICAgaWYgKGlucHV0Q29tcG9uZW50KSB7XG4gICAgICAgIElucHV0Q29tcG9uZW50ID0gaW5wdXRDb21wb25lbnQ7XG4gICAgICAgIGlucHV0UHJvcHMgPSAoMCwgX29iamVjdFNwcmVhZDIuZGVmYXVsdCkoe1xuICAgICAgICAgIC8vIFJlbmFtZSByZWYgdG8gaW5wdXRSZWYgYXMgd2UgZG9uJ3Qga25vdyB0aGVcbiAgICAgICAgICAvLyBwcm92aWRlZCBgaW5wdXRDb21wb25lbnRgIHN0cnVjdHVyZS5cbiAgICAgICAgICBpbnB1dFJlZjogdGhpcy5oYW5kbGVSZWZJbnB1dFxuICAgICAgICB9LCBpbnB1dFByb3BzLCB7XG4gICAgICAgICAgcmVmOiBudWxsXG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIGlmIChtdWx0aWxpbmUpIHtcbiAgICAgICAgaWYgKHJvd3MgJiYgIXJvd3NNYXgpIHtcbiAgICAgICAgICBJbnB1dENvbXBvbmVudCA9ICd0ZXh0YXJlYSc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaW5wdXRQcm9wcyA9ICgwLCBfb2JqZWN0U3ByZWFkMi5kZWZhdWx0KSh7XG4gICAgICAgICAgICByb3dzTWF4OiByb3dzTWF4LFxuICAgICAgICAgICAgdGV4dGFyZWFSZWY6IHRoaXMuaGFuZGxlUmVmSW5wdXRcbiAgICAgICAgICB9LCBpbnB1dFByb3BzLCB7XG4gICAgICAgICAgICByZWY6IG51bGxcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBJbnB1dENvbXBvbmVudCA9IF9UZXh0YXJlYS5kZWZhdWx0O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe1xuICAgICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZVxuICAgICAgfSwgb3RoZXIpLCBzdGFydEFkb3JubWVudCwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChJbnB1dENvbXBvbmVudCwgKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7XG4gICAgICAgIFwiYXJpYS1pbnZhbGlkXCI6IGVycm9yLFxuICAgICAgICBcImFyaWEtcmVxdWlyZWRcIjogcmVxdWlyZWQsXG4gICAgICAgIGF1dG9Db21wbGV0ZTogYXV0b0NvbXBsZXRlLFxuICAgICAgICBhdXRvRm9jdXM6IGF1dG9Gb2N1cyxcbiAgICAgICAgY2xhc3NOYW1lOiBpbnB1dENsYXNzTmFtZSxcbiAgICAgICAgZGVmYXVsdFZhbHVlOiBkZWZhdWx0VmFsdWUsXG4gICAgICAgIGRpc2FibGVkOiBkaXNhYmxlZCxcbiAgICAgICAgaWQ6IGlkLFxuICAgICAgICBuYW1lOiBuYW1lLFxuICAgICAgICBvbkJsdXI6IHRoaXMuaGFuZGxlQmx1cixcbiAgICAgICAgb25DaGFuZ2U6IHRoaXMuaGFuZGxlQ2hhbmdlLFxuICAgICAgICBvbkZvY3VzOiB0aGlzLmhhbmRsZUZvY3VzLFxuICAgICAgICBvbktleURvd246IG9uS2V5RG93bixcbiAgICAgICAgb25LZXlVcDogb25LZXlVcCxcbiAgICAgICAgcGxhY2Vob2xkZXI6IHBsYWNlaG9sZGVyLFxuICAgICAgICByZWFkT25seTogcmVhZE9ubHksXG4gICAgICAgIHJlcXVpcmVkOiByZXF1aXJlZCA/IHRydWUgOiB1bmRlZmluZWQsXG4gICAgICAgIHJvd3M6IHJvd3MsXG4gICAgICAgIHR5cGU6IHR5cGUsXG4gICAgICAgIHZhbHVlOiB2YWx1ZVxuICAgICAgfSwgaW5wdXRQcm9wcykpLCBlbmRBZG9ybm1lbnQpO1xuICAgIH1cbiAgfV0pO1xuICByZXR1cm4gSW5wdXQ7XG59KF9yZWFjdC5kZWZhdWx0LkNvbXBvbmVudCk7XG5cbklucHV0LnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqXG4gICAqIFRoaXMgcHJvcGVydHkgaGVscHMgdXNlcnMgdG8gZmlsbCBmb3JtcyBmYXN0ZXIsIGVzcGVjaWFsbHkgb24gbW9iaWxlIGRldmljZXMuXG4gICAqIFRoZSBuYW1lIGNhbiBiZSBjb25mdXNpbmcsIGFzIGl0J3MgbW9yZSBsaWtlIGFuIGF1dG9maWxsLlxuICAgKiBZb3UgY2FuIGxlYXJuIG1vcmUgYWJvdXQgaXQgaGVyZTpcbiAgICogaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZm9ybS1jb250cm9sLWluZnJhc3RydWN0dXJlLmh0bWwjYXV0b2ZpbGxcbiAgICovXG4gIGF1dG9Db21wbGV0ZTogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgaW5wdXQgd2lsbCBiZSBmb2N1c2VkIGR1cmluZyB0aGUgZmlyc3QgbW91bnQuXG4gICAqL1xuICBhdXRvRm9jdXM6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2Nzcy1hcGkpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIFRoZSBDU1MgY2xhc3MgbmFtZSBvZiB0aGUgd3JhcHBlciBlbGVtZW50LlxuICAgKi9cbiAgY2xhc3NOYW1lOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgZGVmYXVsdCBpbnB1dCB2YWx1ZSwgdXNlZnVsIHdoZW4gbm90IGNvbnRyb2xsaW5nIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBkZWZhdWx0VmFsdWU6IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsIF9wcm9wVHlwZXMuZGVmYXVsdC5udW1iZXJdKSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgaW5wdXQgd2lsbCBiZSBkaXNhYmxlZC5cbiAgICovXG4gIGRpc2FibGVkOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgaW5wdXQgd2lsbCBub3QgaGF2ZSBhbiB1bmRlcmxpbmUuXG4gICAqL1xuICBkaXNhYmxlVW5kZXJsaW5lOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogRW5kIGBJbnB1dEFkb3JubWVudGAgZm9yIHRoaXMgY29tcG9uZW50LlxuICAgKi9cbiAgZW5kQWRvcm5tZW50OiBfcHJvcFR5cGVzLmRlZmF1bHQubm9kZSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgaW5wdXQgd2lsbCBpbmRpY2F0ZSBhbiBlcnJvci4gVGhpcyBpcyBub3JtYWxseSBvYnRhaW5lZCB2aWEgY29udGV4dCBmcm9tXG4gICAqIEZvcm1Db250cm9sLlxuICAgKi9cbiAgZXJyb3I6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBpbnB1dCB3aWxsIHRha2UgdXAgdGhlIGZ1bGwgd2lkdGggb2YgaXRzIGNvbnRhaW5lci5cbiAgICovXG4gIGZ1bGxXaWR0aDogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSBpZCBvZiB0aGUgYGlucHV0YCBlbGVtZW50LlxuICAgKi9cbiAgaWQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIG5hdGl2ZSBpbnB1dC5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIERPTSBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgaW5wdXRDb21wb25lbnQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsIF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jXSksXG5cbiAgLyoqXG4gICAqIEF0dHJpYnV0ZXMgYXBwbGllZCB0byB0aGUgYGlucHV0YCBlbGVtZW50LlxuICAgKi9cbiAgaW5wdXRQcm9wczogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdCxcblxuICAvKipcbiAgICogVXNlIHRoYXQgcHJvcGVydHkgdG8gcGFzcyBhIHJlZiBjYWxsYmFjayB0byB0aGUgbmF0aXZlIGlucHV0IGNvbXBvbmVudC5cbiAgICovXG4gIGlucHV0UmVmOiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYywgX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdF0pLFxuXG4gIC8qKlxuICAgKiBJZiBgZGVuc2VgLCB3aWxsIGFkanVzdCB2ZXJ0aWNhbCBzcGFjaW5nLiBUaGlzIGlzIG5vcm1hbGx5IG9idGFpbmVkIHZpYSBjb250ZXh0IGZyb21cbiAgICogRm9ybUNvbnRyb2wuXG4gICAqL1xuICBtYXJnaW46IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZihbJ2RlbnNlJywgJ25vbmUnXSksXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgYSB0ZXh0YXJlYSBlbGVtZW50IHdpbGwgYmUgcmVuZGVyZWQuXG4gICAqL1xuICBtdWx0aWxpbmU6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBOYW1lIGF0dHJpYnV0ZSBvZiB0aGUgYGlucHV0YCBlbGVtZW50LlxuICAgKi9cbiAgbmFtZTogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25CbHVyOiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgdmFsdWUgaXMgY2hhbmdlZC5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGV2ZW50IFRoZSBldmVudCBzb3VyY2Ugb2YgdGhlIGNhbGxiYWNrLlxuICAgKiBZb3UgY2FuIHB1bGwgb3V0IHRoZSBuZXcgdmFsdWUgYnkgYWNjZXNzaW5nIGBldmVudC50YXJnZXQudmFsdWVgLlxuICAgKi9cbiAgb25DaGFuZ2U6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkVtcHR5OiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25GaWxsZWQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkZvY3VzOiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25LZXlEb3duOiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25LZXlVcDogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIFRoZSBzaG9ydCBoaW50IGRpc3BsYXllZCBpbiB0aGUgaW5wdXQgYmVmb3JlIHRoZSB1c2VyIGVudGVycyBhIHZhbHVlLlxuICAgKi9cbiAgcGxhY2Vob2xkZXI6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHJlYWRPbmx5OiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogTnVtYmVyIG9mIHJvd3MgdG8gZGlzcGxheSB3aGVuIG11bHRpbGluZSBvcHRpb24gaXMgc2V0IHRvIHRydWUuXG4gICAqL1xuICByb3dzOiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLCBfcHJvcFR5cGVzLmRlZmF1bHQubnVtYmVyXSksXG5cbiAgLyoqXG4gICAqIE1heGltdW0gbnVtYmVyIG9mIHJvd3MgdG8gZGlzcGxheSB3aGVuIG11bHRpbGluZSBvcHRpb24gaXMgc2V0IHRvIHRydWUuXG4gICAqL1xuICByb3dzTWF4OiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLCBfcHJvcFR5cGVzLmRlZmF1bHQubnVtYmVyXSksXG5cbiAgLyoqXG4gICAqIFN0YXJ0IGBJbnB1dEFkb3JubWVudGAgZm9yIHRoaXMgY29tcG9uZW50LlxuICAgKi9cbiAgc3RhcnRBZG9ybm1lbnQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5ub2RlLFxuXG4gIC8qKlxuICAgKiBUeXBlIG9mIHRoZSBpbnB1dCBlbGVtZW50LiBJdCBzaG91bGQgYmUgYSB2YWxpZCBIVE1MNSBpbnB1dCB0eXBlLlxuICAgKi9cbiAgdHlwZTogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGlucHV0IHZhbHVlLCByZXF1aXJlZCBmb3IgYSBjb250cm9sbGVkIGNvbXBvbmVudC5cbiAgICovXG4gIHZhbHVlOiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLCBfcHJvcFR5cGVzLmRlZmF1bHQubnVtYmVyLCBfcHJvcFR5cGVzLmRlZmF1bHQuYXJyYXlPZihfcHJvcFR5cGVzLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLCBfcHJvcFR5cGVzLmRlZmF1bHQubnVtYmVyXSkpXSlcbn0gOiB7fTtcbklucHV0Lm11aU5hbWUgPSAnSW5wdXQnO1xuSW5wdXQuZGVmYXVsdFByb3BzID0ge1xuICBkaXNhYmxlVW5kZXJsaW5lOiBmYWxzZSxcbiAgZnVsbFdpZHRoOiBmYWxzZSxcbiAgbXVsdGlsaW5lOiBmYWxzZSxcbiAgdHlwZTogJ3RleHQnXG59O1xuSW5wdXQuY29udGV4dFR5cGVzID0ge1xuICBtdWlGb3JtQ29udHJvbDogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdFxufTtcbklucHV0LmNoaWxkQ29udGV4dFR5cGVzID0ge1xuICBtdWlGb3JtQ29udHJvbDogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdFxufTtcblxudmFyIF9kZWZhdWx0ID0gKDAsIF93aXRoU3R5bGVzLmRlZmF1bHQpKHN0eWxlcywge1xuICBuYW1lOiAnTXVpSW5wdXQnXG59KShJbnB1dCk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5pc0hvcml6b250YWwgPSBpc0hvcml6b250YWw7XG5leHBvcnRzLmdldEFuY2hvciA9IGdldEFuY2hvcjtcbmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuc3R5bGVzID0gdm9pZCAwO1xuXG52YXIgX29iamVjdFNwcmVhZDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vb2JqZWN0U3ByZWFkXCIpKTtcblxudmFyIF9leHRlbmRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9leHRlbmRzXCIpKTtcblxudmFyIF9kZWZpbmVQcm9wZXJ0eTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vZGVmaW5lUHJvcGVydHlcIikpO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiKSk7XG5cbnZhciBfY2xhc3NDYWxsQ2hlY2syID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2NsYXNzQ2FsbENoZWNrXCIpKTtcblxudmFyIF9jcmVhdGVDbGFzczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vY3JlYXRlQ2xhc3NcIikpO1xuXG52YXIgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5cIikpO1xuXG52YXIgX2luaGVyaXRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9pbmhlcml0c1wiKSk7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbnZhciBfY2xhc3NuYW1lcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImNsYXNzbmFtZXNcIikpO1xuXG52YXIgX01vZGFsID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vTW9kYWxcIikpO1xuXG52YXIgX3dpdGhTdHlsZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9zdHlsZXMvd2l0aFN0eWxlc1wiKSk7XG5cbnZhciBfU2xpZGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9TbGlkZVwiKSk7XG5cbnZhciBfUGFwZXIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9QYXBlclwiKSk7XG5cbnZhciBfaGVscGVycyA9IHJlcXVpcmUoXCIuLi91dGlscy9oZWxwZXJzXCIpO1xuXG52YXIgX3RyYW5zaXRpb25zID0gcmVxdWlyZShcIi4uL3N0eWxlcy90cmFuc2l0aW9uc1wiKTtcblxudmFyIG9wcG9zaXRlRGlyZWN0aW9uID0ge1xuICBsZWZ0OiAncmlnaHQnLFxuICByaWdodDogJ2xlZnQnLFxuICB0b3A6ICdkb3duJyxcbiAgYm90dG9tOiAndXAnXG59O1xuXG5mdW5jdGlvbiBpc0hvcml6b250YWwocHJvcHMpIHtcbiAgcmV0dXJuIFsnbGVmdCcsICdyaWdodCddLmluZGV4T2YocHJvcHMuYW5jaG9yKSAhPT0gLTE7XG59XG5cbmZ1bmN0aW9uIGdldEFuY2hvcihwcm9wcykge1xuICByZXR1cm4gcHJvcHMudGhlbWUuZGlyZWN0aW9uID09PSAncnRsJyAmJiBpc0hvcml6b250YWwocHJvcHMpID8gb3Bwb3NpdGVEaXJlY3Rpb25bcHJvcHMuYW5jaG9yXSA6IHByb3BzLmFuY2hvcjtcbn1cblxudmFyIHN0eWxlcyA9IGZ1bmN0aW9uIHN0eWxlcyh0aGVtZSkge1xuICByZXR1cm4ge1xuICAgIGRvY2tlZDoge1xuICAgICAgZmxleDogJzAgMCBhdXRvJ1xuICAgIH0sXG4gICAgcGFwZXI6IHtcbiAgICAgIG92ZXJmbG93WTogJ2F1dG8nLFxuICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgZmxleERpcmVjdGlvbjogJ2NvbHVtbicsXG4gICAgICBoZWlnaHQ6ICcxMDB2aCcsXG4gICAgICBmbGV4OiAnMSAwIGF1dG8nLFxuICAgICAgekluZGV4OiB0aGVtZS56SW5kZXguZHJhd2VyLFxuICAgICAgV2Via2l0T3ZlcmZsb3dTY3JvbGxpbmc6ICd0b3VjaCcsXG4gICAgICAvLyBBZGQgaU9TIG1vbWVudHVtIHNjcm9sbGluZy5cbiAgICAgIC8vIHRlbXBvcmFyeSBzdHlsZVxuICAgICAgcG9zaXRpb246ICdmaXhlZCcsXG4gICAgICB0b3A6IDAsXG4gICAgICAvLyBXZSBkaXNhYmxlIHRoZSBmb2N1cyByaW5nIGZvciBtb3VzZSwgdG91Y2ggYW5kIGtleWJvYXJkIHVzZXJzLlxuICAgICAgLy8gQXQgc29tZSBwb2ludCwgaXQgd291bGQgYmUgYmV0dGVyIHRvIGtlZXAgaXQgZm9yIGtleWJvYXJkIHVzZXJzLlxuICAgICAgLy8gOmZvY3VzLXJpbmcgQ1NTIHBzZXVkby1jbGFzcyB3aWxsIGhlbHAuXG4gICAgICBvdXRsaW5lOiAnbm9uZSdcbiAgICB9LFxuICAgIHBhcGVyQW5jaG9yTGVmdDoge1xuICAgICAgbGVmdDogMCxcbiAgICAgIHJpZ2h0OiAnYXV0bydcbiAgICB9LFxuICAgIHBhcGVyQW5jaG9yUmlnaHQ6IHtcbiAgICAgIGxlZnQ6ICdhdXRvJyxcbiAgICAgIHJpZ2h0OiAwXG4gICAgfSxcbiAgICBwYXBlckFuY2hvclRvcDoge1xuICAgICAgdG9wOiAwLFxuICAgICAgbGVmdDogMCxcbiAgICAgIGJvdHRvbTogJ2F1dG8nLFxuICAgICAgcmlnaHQ6IDAsXG4gICAgICBoZWlnaHQ6ICdhdXRvJyxcbiAgICAgIG1heEhlaWdodDogJzEwMHZoJ1xuICAgIH0sXG4gICAgcGFwZXJBbmNob3JCb3R0b206IHtcbiAgICAgIHRvcDogJ2F1dG8nLFxuICAgICAgbGVmdDogMCxcbiAgICAgIGJvdHRvbTogMCxcbiAgICAgIHJpZ2h0OiAwLFxuICAgICAgaGVpZ2h0OiAnYXV0bycsXG4gICAgICBtYXhIZWlnaHQ6ICcxMDB2aCdcbiAgICB9LFxuICAgIHBhcGVyQW5jaG9yRG9ja2VkTGVmdDoge1xuICAgICAgYm9yZGVyUmlnaHQ6IFwiMXB4IHNvbGlkIFwiLmNvbmNhdCh0aGVtZS5wYWxldHRlLmRpdmlkZXIpXG4gICAgfSxcbiAgICBwYXBlckFuY2hvckRvY2tlZFRvcDoge1xuICAgICAgYm9yZGVyQm90dG9tOiBcIjFweCBzb2xpZCBcIi5jb25jYXQodGhlbWUucGFsZXR0ZS5kaXZpZGVyKVxuICAgIH0sXG4gICAgcGFwZXJBbmNob3JEb2NrZWRSaWdodDoge1xuICAgICAgYm9yZGVyTGVmdDogXCIxcHggc29saWQgXCIuY29uY2F0KHRoZW1lLnBhbGV0dGUuZGl2aWRlcilcbiAgICB9LFxuICAgIHBhcGVyQW5jaG9yRG9ja2VkQm90dG9tOiB7XG4gICAgICBib3JkZXJUb3A6IFwiMXB4IHNvbGlkIFwiLmNvbmNhdCh0aGVtZS5wYWxldHRlLmRpdmlkZXIpXG4gICAgfSxcbiAgICBtb2RhbDoge30gLy8gSnVzdCBoZXJlIHNvIHBlb3BsZSBjYW4gb3ZlcnJpZGUgdGhlIHN0eWxlLlxuXG4gIH07XG59O1xuLyoqXG4gKiBUaGUgcHJvcGVydGllcyBvZiB0aGUgW01vZGFsXSgvYXBpL21vZGFsKSBjb21wb25lbnQgYXJlIGF2YWlsYWJsZVxuICogd2hlbiBgdmFyaWFudD1cInRlbXBvcmFyeVwiYCBpcyBzZXQuXG4gKi9cblxuXG5leHBvcnRzLnN0eWxlcyA9IHN0eWxlcztcblxudmFyIERyYXdlciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICAoMCwgX2luaGVyaXRzMi5kZWZhdWx0KShEcmF3ZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIERyYXdlcigpIHtcbiAgICB2YXIgX3JlZjtcblxuICAgIHZhciBfdGVtcCwgX3RoaXM7XG5cbiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMi5kZWZhdWx0KSh0aGlzLCBEcmF3ZXIpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiAoMCwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yLmRlZmF1bHQpKF90aGlzLCAoX3RlbXAgPSBfdGhpcyA9ICgwLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIuZGVmYXVsdCkodGhpcywgKF9yZWYgPSBEcmF3ZXIuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihEcmF3ZXIpKS5jYWxsLmFwcGx5KF9yZWYsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMubW91bnRlZCA9IGZhbHNlLCBfdGVtcCkpO1xuICB9XG5cbiAgKDAsIF9jcmVhdGVDbGFzczIuZGVmYXVsdCkoRHJhd2VyLCBbe1xuICAgIGtleTogXCJjb21wb25lbnREaWRNb3VudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgIHRoaXMubW91bnRlZCA9IHRydWU7XG4gICAgfSAvLyBMZXQncyBhc3N1bWUgdGhhdCB0aGUgRHJhd2VyIHdpbGwgYWx3YXlzIGJlIHJlbmRlcmVkIG9uIHVzZXIgc3BhY2UuXG4gICAgLy8gV2UgdXNlIHRoYXQgc3RhdGUgaXMgb3JkZXIgdG8gc2tpcCB0aGUgYXBwZWFyIHRyYW5zaXRpb24gZHVyaW5nIHRoZVxuICAgIC8vIGluaXRpYWwgbW91bnQgb2YgdGhlIGNvbXBvbmVudC5cblxuICB9LCB7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBhbmNob3JQcm9wID0gX3Byb3BzLmFuY2hvcixcbiAgICAgICAgICBjaGlsZHJlbiA9IF9wcm9wcy5jaGlsZHJlbixcbiAgICAgICAgICBjbGFzc2VzID0gX3Byb3BzLmNsYXNzZXMsXG4gICAgICAgICAgY2xhc3NOYW1lID0gX3Byb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgICBlbGV2YXRpb24gPSBfcHJvcHMuZWxldmF0aW9uLFxuICAgICAgICAgIF9wcm9wcyRNb2RhbFByb3BzID0gX3Byb3BzLk1vZGFsUHJvcHM7XG4gICAgICBfcHJvcHMkTW9kYWxQcm9wcyA9IF9wcm9wcyRNb2RhbFByb3BzID09PSB2b2lkIDAgPyB7fSA6IF9wcm9wcyRNb2RhbFByb3BzO1xuICAgICAgdmFyIEJhY2tkcm9wUHJvcHNQcm9wID0gX3Byb3BzJE1vZGFsUHJvcHMuQmFja2Ryb3BQcm9wcyxcbiAgICAgICAgICBNb2RhbFByb3BzID0gKDAsIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIuZGVmYXVsdCkoX3Byb3BzJE1vZGFsUHJvcHMsIFtcIkJhY2tkcm9wUHJvcHNcIl0pLFxuICAgICAgICAgIG9uQ2xvc2UgPSBfcHJvcHMub25DbG9zZSxcbiAgICAgICAgICBvcGVuID0gX3Byb3BzLm9wZW4sXG4gICAgICAgICAgUGFwZXJQcm9wcyA9IF9wcm9wcy5QYXBlclByb3BzLFxuICAgICAgICAgIFNsaWRlUHJvcHMgPSBfcHJvcHMuU2xpZGVQcm9wcyxcbiAgICAgICAgICB0aGVtZSA9IF9wcm9wcy50aGVtZSxcbiAgICAgICAgICB0cmFuc2l0aW9uRHVyYXRpb24gPSBfcHJvcHMudHJhbnNpdGlvbkR1cmF0aW9uLFxuICAgICAgICAgIHZhcmlhbnQgPSBfcHJvcHMudmFyaWFudCxcbiAgICAgICAgICBvdGhlciA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyLmRlZmF1bHQpKF9wcm9wcywgW1wiYW5jaG9yXCIsIFwiY2hpbGRyZW5cIiwgXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwiZWxldmF0aW9uXCIsIFwiTW9kYWxQcm9wc1wiLCBcIm9uQ2xvc2VcIiwgXCJvcGVuXCIsIFwiUGFwZXJQcm9wc1wiLCBcIlNsaWRlUHJvcHNcIiwgXCJ0aGVtZVwiLCBcInRyYW5zaXRpb25EdXJhdGlvblwiLCBcInZhcmlhbnRcIl0pO1xuICAgICAgdmFyIGFuY2hvciA9IGdldEFuY2hvcih0aGlzLnByb3BzKTtcblxuICAgICAgdmFyIGRyYXdlciA9IF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX1BhcGVyLmRlZmF1bHQsICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe1xuICAgICAgICBlbGV2YXRpb246IHZhcmlhbnQgPT09ICd0ZW1wb3JhcnknID8gZWxldmF0aW9uIDogMCxcbiAgICAgICAgc3F1YXJlOiB0cnVlLFxuICAgICAgICBjbGFzc05hbWU6ICgwLCBfY2xhc3NuYW1lcy5kZWZhdWx0KShjbGFzc2VzLnBhcGVyLCBjbGFzc2VzW1wicGFwZXJBbmNob3JcIi5jb25jYXQoKDAsIF9oZWxwZXJzLmNhcGl0YWxpemUpKGFuY2hvcikpXSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoe30sIGNsYXNzZXNbXCJwYXBlckFuY2hvckRvY2tlZFwiLmNvbmNhdCgoMCwgX2hlbHBlcnMuY2FwaXRhbGl6ZSkoYW5jaG9yKSldLCB2YXJpYW50ICE9PSAndGVtcG9yYXJ5JykpXG4gICAgICB9LCBQYXBlclByb3BzKSwgY2hpbGRyZW4pO1xuXG4gICAgICBpZiAodmFyaWFudCA9PT0gJ3Blcm1hbmVudCcpIHtcbiAgICAgICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7XG4gICAgICAgICAgY2xhc3NOYW1lOiAoMCwgX2NsYXNzbmFtZXMuZGVmYXVsdCkoY2xhc3Nlcy5kb2NrZWQsIGNsYXNzTmFtZSlcbiAgICAgICAgfSwgb3RoZXIpLCBkcmF3ZXIpO1xuICAgICAgfVxuXG4gICAgICB2YXIgc2xpZGluZ0RyYXdlciA9IF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX1NsaWRlLmRlZmF1bHQsICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe1xuICAgICAgICBcImluXCI6IG9wZW4sXG4gICAgICAgIGRpcmVjdGlvbjogb3Bwb3NpdGVEaXJlY3Rpb25bYW5jaG9yXSxcbiAgICAgICAgdGltZW91dDogdHJhbnNpdGlvbkR1cmF0aW9uLFxuICAgICAgICBhcHBlYXI6IHRoaXMubW91bnRlZFxuICAgICAgfSwgU2xpZGVQcm9wcyksIGRyYXdlcik7XG5cbiAgICAgIGlmICh2YXJpYW50ID09PSAncGVyc2lzdGVudCcpIHtcbiAgICAgICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7XG4gICAgICAgICAgY2xhc3NOYW1lOiAoMCwgX2NsYXNzbmFtZXMuZGVmYXVsdCkoY2xhc3Nlcy5kb2NrZWQsIGNsYXNzTmFtZSlcbiAgICAgICAgfSwgb3RoZXIpLCBzbGlkaW5nRHJhd2VyKTtcbiAgICAgIH0gLy8gdmFyaWFudCA9PT0gdGVtcG9yYXJ5XG5cblxuICAgICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX01vZGFsLmRlZmF1bHQsICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe1xuICAgICAgICBCYWNrZHJvcFByb3BzOiAoMCwgX29iamVjdFNwcmVhZDIuZGVmYXVsdCkoe30sIEJhY2tkcm9wUHJvcHNQcm9wLCB7XG4gICAgICAgICAgdHJhbnNpdGlvbkR1cmF0aW9uOiB0cmFuc2l0aW9uRHVyYXRpb25cbiAgICAgICAgfSksXG4gICAgICAgIGNsYXNzTmFtZTogKDAsIF9jbGFzc25hbWVzLmRlZmF1bHQpKGNsYXNzZXMubW9kYWwsIGNsYXNzTmFtZSksXG4gICAgICAgIG9wZW46IG9wZW4sXG4gICAgICAgIG9uQ2xvc2U6IG9uQ2xvc2VcbiAgICAgIH0sIG90aGVyLCBNb2RhbFByb3BzKSwgc2xpZGluZ0RyYXdlcik7XG4gICAgfVxuICB9XSk7XG4gIHJldHVybiBEcmF3ZXI7XG59KF9yZWFjdC5kZWZhdWx0LkNvbXBvbmVudCk7XG5cbkRyYXdlci5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIC8qKlxuICAgKiBTaWRlIGZyb20gd2hpY2ggdGhlIGRyYXdlciB3aWxsIGFwcGVhci5cbiAgICovXG4gIGFuY2hvcjogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mKFsnbGVmdCcsICd0b3AnLCAncmlnaHQnLCAnYm90dG9tJ10pLFxuXG4gIC8qKlxuICAgKiBUaGUgY29udGVudHMgb2YgdGhlIGRyYXdlci5cbiAgICovXG4gIGNoaWxkcmVuOiBfcHJvcFR5cGVzLmRlZmF1bHQubm9kZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MtYXBpKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBlbGV2YXRpb24gb2YgdGhlIGRyYXdlci5cbiAgICovXG4gIGVsZXZhdGlvbjogX3Byb3BUeXBlcy5kZWZhdWx0Lm51bWJlcixcblxuICAvKipcbiAgICogUHJvcGVydGllcyBhcHBsaWVkIHRvIHRoZSBgTW9kYWxgIGVsZW1lbnQuXG4gICAqL1xuICBNb2RhbFByb3BzOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBjb21wb25lbnQgcmVxdWVzdHMgdG8gYmUgY2xvc2VkLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gZXZlbnQgVGhlIGV2ZW50IHNvdXJjZSBvZiB0aGUgY2FsbGJhY2tcbiAgICovXG4gIG9uQ2xvc2U6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBkcmF3ZXIgaXMgb3Blbi5cbiAgICovXG4gIG9wZW46IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBQcm9wZXJ0aWVzIGFwcGxpZWQgdG8gdGhlIGBQYXBlcmAgZWxlbWVudC5cbiAgICovXG4gIFBhcGVyUHJvcHM6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QsXG5cbiAgLyoqXG4gICAqIFByb3BlcnRpZXMgYXBwbGllZCB0byB0aGUgYFNsaWRlYCBlbGVtZW50LlxuICAgKi9cbiAgU2xpZGVQcm9wczogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgdGhlbWU6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogVGhlIGR1cmF0aW9uIGZvciB0aGUgdHJhbnNpdGlvbiwgaW4gbWlsbGlzZWNvbmRzLlxuICAgKiBZb3UgbWF5IHNwZWNpZnkgYSBzaW5nbGUgdGltZW91dCBmb3IgYWxsIHRyYW5zaXRpb25zLCBvciBpbmRpdmlkdWFsbHkgd2l0aCBhbiBvYmplY3QuXG4gICAqL1xuICB0cmFuc2l0aW9uRHVyYXRpb246IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMuZGVmYXVsdC5udW1iZXIsIF9wcm9wVHlwZXMuZGVmYXVsdC5zaGFwZSh7XG4gICAgZW50ZXI6IF9wcm9wVHlwZXMuZGVmYXVsdC5udW1iZXIsXG4gICAgZXhpdDogX3Byb3BUeXBlcy5kZWZhdWx0Lm51bWJlclxuICB9KV0pLFxuXG4gIC8qKlxuICAgKiBUaGUgdmFyaWFudCBvZiBkcmF3ZXIuXG4gICAqL1xuICB2YXJpYW50OiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2YoWydwZXJtYW5lbnQnLCAncGVyc2lzdGVudCcsICd0ZW1wb3JhcnknXSlcbn0gOiB7fTtcbkRyYXdlci5kZWZhdWx0UHJvcHMgPSB7XG4gIGFuY2hvcjogJ2xlZnQnLFxuICBlbGV2YXRpb246IDE2LFxuICBvcGVuOiBmYWxzZSxcbiAgdHJhbnNpdGlvbkR1cmF0aW9uOiB7XG4gICAgZW50ZXI6IF90cmFuc2l0aW9ucy5kdXJhdGlvbi5lbnRlcmluZ1NjcmVlbixcbiAgICBleGl0OiBfdHJhbnNpdGlvbnMuZHVyYXRpb24ubGVhdmluZ1NjcmVlblxuICB9LFxuICB2YXJpYW50OiAndGVtcG9yYXJ5JyAvLyBNb2JpbGUgZmlyc3QuXG5cbn07XG5cbnZhciBfZGVmYXVsdCA9ICgwLCBfd2l0aFN0eWxlcy5kZWZhdWx0KShzdHlsZXMsIHtcbiAgbmFtZTogJ011aURyYXdlcicsXG4gIGZsaXA6IGZhbHNlLFxuICB3aXRoVGhlbWU6IHRydWVcbn0pKERyYXdlcik7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVmYXVsdFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfQ2xpY2tBd2F5TGlzdGVuZXIuZGVmYXVsdDtcbiAgfVxufSk7XG5cbnZhciBfQ2xpY2tBd2F5TGlzdGVuZXIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0NsaWNrQXdheUxpc3RlbmVyXCIpKTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlZmF1bHRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX0NpcmN1bGFyUHJvZ3Jlc3MuZGVmYXVsdDtcbiAgfVxufSk7XG5cbnZhciBfQ2lyY3VsYXJQcm9ncmVzcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vQ2lyY3VsYXJQcm9ncmVzc1wiKSk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLnN0eWxlcyA9IHZvaWQgMDtcblxudmFyIF9leHRlbmRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9leHRlbmRzXCIpKTtcblxudmFyIF9kZWZpbmVQcm9wZXJ0eTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vZGVmaW5lUHJvcGVydHlcIikpO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiKSk7XG5cbnZhciBfY2xhc3NDYWxsQ2hlY2syID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2NsYXNzQ2FsbENoZWNrXCIpKTtcblxudmFyIF9jcmVhdGVDbGFzczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vY3JlYXRlQ2xhc3NcIikpO1xuXG52YXIgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5cIikpO1xuXG52YXIgX2luaGVyaXRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9pbmhlcml0c1wiKSk7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbnZhciBfY2xhc3NuYW1lcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImNsYXNzbmFtZXNcIikpO1xuXG52YXIgX3dpdGhTdHlsZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9zdHlsZXMvd2l0aFN0eWxlc1wiKSk7XG5cbnZhciBfSWNvbkJ1dHRvbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL0ljb25CdXR0b25cIikpO1xuXG4vLyBAaW5oZXJpdGVkQ29tcG9uZW50IEljb25CdXR0b25cbnZhciBzdHlsZXMgPSB7XG4gIHJvb3Q6IHtcbiAgICBkaXNwbGF5OiAnaW5saW5lLWZsZXgnLFxuICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgIHRyYW5zaXRpb246ICdub25lJyxcbiAgICAnJjpob3Zlcic6IHtcbiAgICAgIC8vIERpc2FibGUgdGhlIGhvdmVyIGVmZmVjdCBmb3IgdGhlIEljb25CdXR0b24uXG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6ICd0cmFuc3BhcmVudCdcbiAgICB9XG4gIH0sXG4gIGNoZWNrZWQ6IHt9LFxuICBkaXNhYmxlZDoge30sXG4gIGlucHV0OiB7XG4gICAgY3Vyc29yOiAnaW5oZXJpdCcsXG4gICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgb3BhY2l0eTogMCxcbiAgICB3aWR0aDogJzEwMCUnLFxuICAgIGhlaWdodDogJzEwMCUnLFxuICAgIHRvcDogMCxcbiAgICBsZWZ0OiAwLFxuICAgIG1hcmdpbjogMCxcbiAgICBwYWRkaW5nOiAwXG4gIH1cbn07XG5leHBvcnRzLnN0eWxlcyA9IHN0eWxlcztcblxudmFyIFN3aXRjaEJhc2UgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgKDAsIF9pbmhlcml0czIuZGVmYXVsdCkoU3dpdGNoQmFzZSwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gU3dpdGNoQmFzZShwcm9wcykge1xuICAgIHZhciBfdGhpcztcblxuICAgICgwLCBfY2xhc3NDYWxsQ2hlY2syLmRlZmF1bHQpKHRoaXMsIFN3aXRjaEJhc2UpO1xuICAgIF90aGlzID0gKDAsIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMi5kZWZhdWx0KSh0aGlzLCAoU3dpdGNoQmFzZS5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKFN3aXRjaEJhc2UpKS5jYWxsKHRoaXMsIHByb3BzKSk7XG4gICAgX3RoaXMuc3RhdGUgPSB7fTtcbiAgICBfdGhpcy5pbnB1dCA9IG51bGw7XG4gICAgX3RoaXMuaXNDb250cm9sbGVkID0gbnVsbDtcblxuICAgIF90aGlzLmhhbmRsZUZvY3VzID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBpZiAoX3RoaXMucHJvcHMub25Gb2N1cykge1xuICAgICAgICBfdGhpcy5wcm9wcy5vbkZvY3VzKGV2ZW50KTtcbiAgICAgIH1cblxuICAgICAgdmFyIG11aUZvcm1Db250cm9sID0gX3RoaXMuY29udGV4dC5tdWlGb3JtQ29udHJvbDtcblxuICAgICAgaWYgKG11aUZvcm1Db250cm9sICYmIG11aUZvcm1Db250cm9sLm9uRm9jdXMpIHtcbiAgICAgICAgbXVpRm9ybUNvbnRyb2wub25Gb2N1cyhldmVudCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZUJsdXIgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGlmIChfdGhpcy5wcm9wcy5vbkJsdXIpIHtcbiAgICAgICAgX3RoaXMucHJvcHMub25CbHVyKGV2ZW50KTtcbiAgICAgIH1cblxuICAgICAgdmFyIG11aUZvcm1Db250cm9sID0gX3RoaXMuY29udGV4dC5tdWlGb3JtQ29udHJvbDtcblxuICAgICAgaWYgKG11aUZvcm1Db250cm9sICYmIG11aUZvcm1Db250cm9sLm9uQmx1cikge1xuICAgICAgICBtdWlGb3JtQ29udHJvbC5vbkJsdXIoZXZlbnQpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVJbnB1dENoYW5nZSA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgdmFyIGNoZWNrZWQgPSBldmVudC50YXJnZXQuY2hlY2tlZDtcblxuICAgICAgaWYgKCFfdGhpcy5pc0NvbnRyb2xsZWQpIHtcbiAgICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgIGNoZWNrZWQ6IGNoZWNrZWRcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChfdGhpcy5wcm9wcy5vbkNoYW5nZSkge1xuICAgICAgICBfdGhpcy5wcm9wcy5vbkNoYW5nZShldmVudCwgY2hlY2tlZCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF90aGlzLmlzQ29udHJvbGxlZCA9IHByb3BzLmNoZWNrZWQgIT0gbnVsbDtcblxuICAgIGlmICghX3RoaXMuaXNDb250cm9sbGVkKSB7XG4gICAgICAvLyBub3QgY29udHJvbGxlZCwgdXNlIGludGVybmFsIHN0YXRlXG4gICAgICBfdGhpcy5zdGF0ZS5jaGVja2VkID0gcHJvcHMuZGVmYXVsdENoZWNrZWQgIT09IHVuZGVmaW5lZCA/IHByb3BzLmRlZmF1bHRDaGVja2VkIDogZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgKDAsIF9jcmVhdGVDbGFzczIuZGVmYXVsdCkoU3dpdGNoQmFzZSwgW3tcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfY2xhc3NOYW1lcztcblxuICAgICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgY2hlY2tlZFByb3AgPSBfcHJvcHMuY2hlY2tlZCxcbiAgICAgICAgICBjaGVja2VkSWNvbiA9IF9wcm9wcy5jaGVja2VkSWNvbixcbiAgICAgICAgICBjbGFzc2VzID0gX3Byb3BzLmNsYXNzZXMsXG4gICAgICAgICAgY2xhc3NOYW1lUHJvcCA9IF9wcm9wcy5jbGFzc05hbWUsXG4gICAgICAgICAgZGlzYWJsZWRQcm9wID0gX3Byb3BzLmRpc2FibGVkLFxuICAgICAgICAgIGljb24gPSBfcHJvcHMuaWNvbixcbiAgICAgICAgICBpZCA9IF9wcm9wcy5pZCxcbiAgICAgICAgICBpbnB1dFByb3BzID0gX3Byb3BzLmlucHV0UHJvcHMsXG4gICAgICAgICAgaW5wdXRSZWYgPSBfcHJvcHMuaW5wdXRSZWYsXG4gICAgICAgICAgbmFtZSA9IF9wcm9wcy5uYW1lLFxuICAgICAgICAgIG9uQmx1ciA9IF9wcm9wcy5vbkJsdXIsXG4gICAgICAgICAgb25DaGFuZ2UgPSBfcHJvcHMub25DaGFuZ2UsXG4gICAgICAgICAgb25Gb2N1cyA9IF9wcm9wcy5vbkZvY3VzLFxuICAgICAgICAgIHRhYkluZGV4ID0gX3Byb3BzLnRhYkluZGV4LFxuICAgICAgICAgIHR5cGUgPSBfcHJvcHMudHlwZSxcbiAgICAgICAgICB2YWx1ZSA9IF9wcm9wcy52YWx1ZSxcbiAgICAgICAgICBvdGhlciA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyLmRlZmF1bHQpKF9wcm9wcywgW1wiY2hlY2tlZFwiLCBcImNoZWNrZWRJY29uXCIsIFwiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcImRpc2FibGVkXCIsIFwiaWNvblwiLCBcImlkXCIsIFwiaW5wdXRQcm9wc1wiLCBcImlucHV0UmVmXCIsIFwibmFtZVwiLCBcIm9uQmx1clwiLCBcIm9uQ2hhbmdlXCIsIFwib25Gb2N1c1wiLCBcInRhYkluZGV4XCIsIFwidHlwZVwiLCBcInZhbHVlXCJdKTtcbiAgICAgIHZhciBtdWlGb3JtQ29udHJvbCA9IHRoaXMuY29udGV4dC5tdWlGb3JtQ29udHJvbDtcbiAgICAgIHZhciBkaXNhYmxlZCA9IGRpc2FibGVkUHJvcDtcblxuICAgICAgaWYgKG11aUZvcm1Db250cm9sKSB7XG4gICAgICAgIGlmICh0eXBlb2YgZGlzYWJsZWQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgZGlzYWJsZWQgPSBtdWlGb3JtQ29udHJvbC5kaXNhYmxlZDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB2YXIgY2hlY2tlZCA9IHRoaXMuaXNDb250cm9sbGVkID8gY2hlY2tlZFByb3AgOiB0aGlzLnN0YXRlLmNoZWNrZWQ7XG4gICAgICB2YXIgaGFzTGFiZWxGb3IgPSB0eXBlID09PSAnY2hlY2tib3gnIHx8IHR5cGUgPT09ICdyYWRpbyc7XG4gICAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfSWNvbkJ1dHRvbi5kZWZhdWx0LCAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHtcbiAgICAgICAgY29tcG9uZW50OiBcInNwYW5cIixcbiAgICAgICAgY2xhc3NOYW1lOiAoMCwgX2NsYXNzbmFtZXMuZGVmYXVsdCkoY2xhc3Nlcy5yb290LCAoX2NsYXNzTmFtZXMgPSB7fSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2NsYXNzTmFtZXMsIGNsYXNzZXMuY2hlY2tlZCwgY2hlY2tlZCksICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKF9jbGFzc05hbWVzLCBjbGFzc2VzLmRpc2FibGVkLCBkaXNhYmxlZCksIF9jbGFzc05hbWVzKSwgY2xhc3NOYW1lUHJvcCksXG4gICAgICAgIGRpc2FibGVkOiBkaXNhYmxlZCxcbiAgICAgICAgdGFiSW5kZXg6IG51bGwsXG4gICAgICAgIHJvbGU6IHVuZGVmaW5lZCxcbiAgICAgICAgb25Gb2N1czogdGhpcy5oYW5kbGVGb2N1cyxcbiAgICAgICAgb25CbHVyOiB0aGlzLmhhbmRsZUJsdXJcbiAgICAgIH0sIG90aGVyKSwgY2hlY2tlZCA/IGNoZWNrZWRJY29uIDogaWNvbiwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImlucHV0XCIsICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe1xuICAgICAgICBpZDogaGFzTGFiZWxGb3IgJiYgaWQsXG4gICAgICAgIHR5cGU6IHR5cGUsXG4gICAgICAgIG5hbWU6IG5hbWUsXG4gICAgICAgIGNoZWNrZWQ6IGNoZWNrZWQsXG4gICAgICAgIG9uQ2hhbmdlOiB0aGlzLmhhbmRsZUlucHV0Q2hhbmdlLFxuICAgICAgICBjbGFzc05hbWU6IGNsYXNzZXMuaW5wdXQsXG4gICAgICAgIGRpc2FibGVkOiBkaXNhYmxlZCxcbiAgICAgICAgdGFiSW5kZXg6IHRhYkluZGV4LFxuICAgICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICAgIHJlZjogaW5wdXRSZWZcbiAgICAgIH0sIGlucHV0UHJvcHMpKSk7XG4gICAgfVxuICB9XSk7XG4gIHJldHVybiBTd2l0Y2hCYXNlO1xufShfcmVhY3QuZGVmYXVsdC5Db21wb25lbnQpOyAvLyBOQjogSWYgY2hhbmdlZCwgcGxlYXNlIHVwZGF0ZSBDaGVja2JveCwgU3dpdGNoIGFuZCBSYWRpb1xuLy8gc28gdGhhdCB0aGUgQVBJIGRvY3VtZW50YXRpb24gaXMgdXBkYXRlZC5cblxuXG5Td2l0Y2hCYXNlLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGNvbXBvbmVudCBpcyBjaGVja2VkLlxuICAgKi9cbiAgY2hlY2tlZDogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsIF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmddKSxcblxuICAvKipcbiAgICogVGhlIGljb24gdG8gZGlzcGxheSB3aGVuIHRoZSBjb21wb25lbnQgaXMgY2hlY2tlZC5cbiAgICovXG4gIGNoZWNrZWRJY29uOiBfcHJvcFR5cGVzLmRlZmF1bHQubm9kZS5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2Nzcy1hcGkpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgZGVmYXVsdENoZWNrZWQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBzd2l0Y2ggd2lsbCBiZSBkaXNhYmxlZC5cbiAgICovXG4gIGRpc2FibGVkOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgcmlwcGxlIGVmZmVjdCB3aWxsIGJlIGRpc2FibGVkLlxuICAgKi9cbiAgZGlzYWJsZVJpcHBsZTogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSBpY29uIHRvIGRpc3BsYXkgd2hlbiB0aGUgY29tcG9uZW50IGlzIHVuY2hlY2tlZC5cbiAgICovXG4gIGljb246IF9wcm9wVHlwZXMuZGVmYXVsdC5ub2RlLmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIFRoZSBpZCBvZiB0aGUgYGlucHV0YCBlbGVtZW50LlxuICAgKi9cbiAgaWQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGNvbXBvbmVudCBhcHBlYXJzIGluZGV0ZXJtaW5hdGUuXG4gICAqL1xuICBpbmRldGVybWluYXRlOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogVGhlIGljb24gdG8gZGlzcGxheSB3aGVuIHRoZSBjb21wb25lbnQgaXMgaW5kZXRlcm1pbmF0ZS5cbiAgICovXG4gIGluZGV0ZXJtaW5hdGVJY29uOiBfcHJvcFR5cGVzLmRlZmF1bHQubm9kZSxcblxuICAvKipcbiAgICogQXR0cmlidXRlcyBhcHBsaWVkIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqL1xuICBpbnB1dFByb3BzOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBVc2UgdGhhdCBwcm9wZXJ0eSB0byBwYXNzIGEgcmVmIGNhbGxiYWNrIHRvIHRoZSBuYXRpdmUgaW5wdXQgY29tcG9uZW50LlxuICAgKi9cbiAgaW5wdXRSZWY6IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLCBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0XSksXG5cbiAgLypcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgbmFtZTogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25CbHVyOiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgc3RhdGUgaXMgY2hhbmdlZC5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGV2ZW50IFRoZSBldmVudCBzb3VyY2Ugb2YgdGhlIGNhbGxiYWNrLlxuICAgKiBZb3UgY2FuIHB1bGwgb3V0IHRoZSBuZXcgdmFsdWUgYnkgYWNjZXNzaW5nIGBldmVudC50YXJnZXQuY2hlY2tlZGAuXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gY2hlY2tlZCBUaGUgYGNoZWNrZWRgIHZhbHVlIG9mIHRoZSBzd2l0Y2hcbiAgICovXG4gIG9uQ2hhbmdlOiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25Gb2N1czogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHRhYkluZGV4OiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzLmRlZmF1bHQubnVtYmVyLCBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nXSksXG5cbiAgLyoqXG4gICAqIFRoZSBpbnB1dCBjb21wb25lbnQgcHJvcGVydHkgYHR5cGVgLlxuICAgKi9cbiAgdHlwZTogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIHZhbHVlIG9mIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICB2YWx1ZTogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZ1xufSA6IHt9O1xuU3dpdGNoQmFzZS5kZWZhdWx0UHJvcHMgPSB7XG4gIHR5cGU6ICdjaGVja2JveCdcbn07XG5Td2l0Y2hCYXNlLmNvbnRleHRUeXBlcyA9IHtcbiAgbXVpRm9ybUNvbnRyb2w6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3Rcbn07XG5cbnZhciBfZGVmYXVsdCA9ICgwLCBfd2l0aFN0eWxlcy5kZWZhdWx0KShzdHlsZXMsIHtcbiAgbmFtZTogJ011aVN3aXRjaEJhc2UnXG59KShTd2l0Y2hCYXNlKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJkZWZhdWx0XCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9DYXJkQ29udGVudC5kZWZhdWx0O1xuICB9XG59KTtcblxudmFyIF9DYXJkQ29udGVudCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vQ2FyZENvbnRlbnRcIikpOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVmYXVsdFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfQ2FyZC5kZWZhdWx0O1xuICB9XG59KTtcblxudmFyIF9DYXJkID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9DYXJkXCIpKTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlZmF1bHRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX0JhY2tkcm9wLmRlZmF1bHQ7XG4gIH1cbn0pO1xuXG52YXIgX0JhY2tkcm9wID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9CYWNrZHJvcFwiKSk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJkZWZhdWx0XCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9BdmF0YXIuZGVmYXVsdDtcbiAgfVxufSk7XG5cbnZhciBfQXZhdGFyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9BdmF0YXJcIikpOyIsIi8qKiBAbGljZW5zZSBNYXRlcmlhbC1VSSB2MS4yLjFcbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuaW1wb3J0ICogYXMgY29sb3JzIGZyb20gJy4vY29sb3JzJztcbmV4cG9ydCB7IGNvbG9ycyB9O1xuZXhwb3J0IHsgY3JlYXRlR2VuZXJhdGVDbGFzc05hbWUsIGNyZWF0ZU11aVRoZW1lLCBjcmVhdGVTdHlsZXMsIGpzc1ByZXNldCwgTXVpVGhlbWVQcm92aWRlciwgd2l0aFN0eWxlcywgd2l0aFRoZW1lIH0gZnJvbSAnLi9zdHlsZXMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBBcHBCYXIgfSBmcm9tICcuL0FwcEJhcic7XG5leHBvcnQgeyBkZWZhdWx0IGFzIEF2YXRhciB9IGZyb20gJy4vQXZhdGFyJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgQmFja2Ryb3AgfSBmcm9tICcuL0JhY2tkcm9wJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgQmFkZ2UgfSBmcm9tICcuL0JhZGdlJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgQm90dG9tTmF2aWdhdGlvbiB9IGZyb20gJy4vQm90dG9tTmF2aWdhdGlvbic7XG5leHBvcnQgeyBkZWZhdWx0IGFzIEJvdHRvbU5hdmlnYXRpb25BY3Rpb24gfSBmcm9tICcuL0JvdHRvbU5hdmlnYXRpb25BY3Rpb24nO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBCdXR0b24gfSBmcm9tICcuL0J1dHRvbic7XG5leHBvcnQgeyBkZWZhdWx0IGFzIEJ1dHRvbkJhc2UgfSBmcm9tICcuL0J1dHRvbkJhc2UnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBDYXJkIH0gZnJvbSAnLi9DYXJkJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgQ2FyZEFjdGlvbnMgfSBmcm9tICcuL0NhcmRBY3Rpb25zJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgQ2FyZENvbnRlbnQgfSBmcm9tICcuL0NhcmRDb250ZW50JztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgQ2FyZEhlYWRlciB9IGZyb20gJy4vQ2FyZEhlYWRlcic7XG5leHBvcnQgeyBkZWZhdWx0IGFzIENhcmRNZWRpYSB9IGZyb20gJy4vQ2FyZE1lZGlhJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgQ2hlY2tib3ggfSBmcm9tICcuL0NoZWNrYm94JztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgQ2hpcCB9IGZyb20gJy4vQ2hpcCc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIENpcmN1bGFyUHJvZ3Jlc3MgfSBmcm9tICcuL0NpcmN1bGFyUHJvZ3Jlc3MnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBDbGlja0F3YXlMaXN0ZW5lciB9IGZyb20gJy4vQ2xpY2tBd2F5TGlzdGVuZXInO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBDb2xsYXBzZSB9IGZyb20gJy4vQ29sbGFwc2UnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBDc3NCYXNlbGluZSB9IGZyb20gJy4vQ3NzQmFzZWxpbmUnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBEaWFsb2cgfSBmcm9tICcuL0RpYWxvZyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIERpYWxvZ0FjdGlvbnMgfSBmcm9tICcuL0RpYWxvZ0FjdGlvbnMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBEaWFsb2dDb250ZW50IH0gZnJvbSAnLi9EaWFsb2dDb250ZW50JztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgRGlhbG9nQ29udGVudFRleHQgfSBmcm9tICcuL0RpYWxvZ0NvbnRlbnRUZXh0JztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgRGlhbG9nVGl0bGUgfSBmcm9tICcuL0RpYWxvZ1RpdGxlJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgRGl2aWRlciB9IGZyb20gJy4vRGl2aWRlcic7XG5leHBvcnQgeyBkZWZhdWx0IGFzIERyYXdlciB9IGZyb20gJy4vRHJhd2VyJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgRXhwYW5zaW9uUGFuZWwgfSBmcm9tICcuL0V4cGFuc2lvblBhbmVsJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgRXhwYW5zaW9uUGFuZWxBY3Rpb25zIH0gZnJvbSAnLi9FeHBhbnNpb25QYW5lbEFjdGlvbnMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBFeHBhbnNpb25QYW5lbERldGFpbHMgfSBmcm9tICcuL0V4cGFuc2lvblBhbmVsRGV0YWlscyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIEV4cGFuc2lvblBhbmVsU3VtbWFyeSB9IGZyb20gJy4vRXhwYW5zaW9uUGFuZWxTdW1tYXJ5JztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgRmFkZSB9IGZyb20gJy4vRmFkZSc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIEZvcm1Db250cm9sIH0gZnJvbSAnLi9Gb3JtQ29udHJvbCc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIEZvcm1Db250cm9sTGFiZWwgfSBmcm9tICcuL0Zvcm1Db250cm9sTGFiZWwnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBGb3JtR3JvdXAgfSBmcm9tICcuL0Zvcm1Hcm91cCc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIEZvcm1IZWxwZXJUZXh0IH0gZnJvbSAnLi9Gb3JtSGVscGVyVGV4dCc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIEZvcm1MYWJlbCB9IGZyb20gJy4vRm9ybUxhYmVsJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgR3JpZCB9IGZyb20gJy4vR3JpZCc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIEdyaWRMaXN0IH0gZnJvbSAnLi9HcmlkTGlzdCc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIEdyaWRMaXN0VGlsZSB9IGZyb20gJy4vR3JpZExpc3RUaWxlJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgR3JpZExpc3RUaWxlQmFyIH0gZnJvbSAnLi9HcmlkTGlzdFRpbGVCYXInO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBHcm93IH0gZnJvbSAnLi9Hcm93JztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgSGlkZGVuIH0gZnJvbSAnLi9IaWRkZW4nO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBJY29uIH0gZnJvbSAnLi9JY29uJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgSWNvbkJ1dHRvbiB9IGZyb20gJy4vSWNvbkJ1dHRvbic7XG5leHBvcnQgeyBkZWZhdWx0IGFzIElucHV0IH0gZnJvbSAnLi9JbnB1dCc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIElucHV0QWRvcm5tZW50IH0gZnJvbSAnLi9JbnB1dEFkb3JubWVudCc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIElucHV0TGFiZWwgfSBmcm9tICcuL0lucHV0TGFiZWwnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBMaW5lYXJQcm9ncmVzcyB9IGZyb20gJy4vTGluZWFyUHJvZ3Jlc3MnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBMaXN0IH0gZnJvbSAnLi9MaXN0JztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgTGlzdEl0ZW0gfSBmcm9tICcuL0xpc3RJdGVtJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgTGlzdEl0ZW1BdmF0YXIgfSBmcm9tICcuL0xpc3RJdGVtQXZhdGFyJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgTGlzdEl0ZW1JY29uIH0gZnJvbSAnLi9MaXN0SXRlbUljb24nO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBMaXN0SXRlbVNlY29uZGFyeUFjdGlvbiB9IGZyb20gJy4vTGlzdEl0ZW1TZWNvbmRhcnlBY3Rpb24nO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBMaXN0SXRlbVRleHQgfSBmcm9tICcuL0xpc3RJdGVtVGV4dCc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIExpc3RTdWJoZWFkZXIgfSBmcm9tICcuL0xpc3RTdWJoZWFkZXInO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBNZW51IH0gZnJvbSAnLi9NZW51JztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgTWVudUl0ZW0gfSBmcm9tICcuL01lbnVJdGVtJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgTWVudUxpc3QgfSBmcm9tICcuL01lbnVMaXN0JztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgTW9iaWxlU3RlcHBlciB9IGZyb20gJy4vTW9iaWxlU3RlcHBlcic7XG5leHBvcnQgeyBkZWZhdWx0IGFzIE1vZGFsLCBNb2RhbE1hbmFnZXIgfSBmcm9tICcuL01vZGFsJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgTmF0aXZlU2VsZWN0IH0gZnJvbSAnLi9OYXRpdmVTZWxlY3QnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBQYXBlciB9IGZyb20gJy4vUGFwZXInO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBQb3BvdmVyIH0gZnJvbSAnLi9Qb3BvdmVyJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgUG9ydGFsIH0gZnJvbSAnLi9Qb3J0YWwnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBSYWRpbyB9IGZyb20gJy4vUmFkaW8nO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBSYWRpb0dyb3VwIH0gZnJvbSAnLi9SYWRpb0dyb3VwJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgU2VsZWN0IH0gZnJvbSAnLi9TZWxlY3QnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBTbGlkZSB9IGZyb20gJy4vU2xpZGUnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBTbmFja2JhciB9IGZyb20gJy4vU25hY2tiYXInO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBTbmFja2JhckNvbnRlbnQgfSBmcm9tICcuL1NuYWNrYmFyQ29udGVudCc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIFN0ZXAgfSBmcm9tICcuL1N0ZXAnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBTdGVwQnV0dG9uIH0gZnJvbSAnLi9TdGVwQnV0dG9uJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgU3RlcENvbm5lY3RvciB9IGZyb20gJy4vU3RlcENvbm5lY3Rvcic7XG5leHBvcnQgeyBkZWZhdWx0IGFzIFN0ZXBDb250ZW50IH0gZnJvbSAnLi9TdGVwQ29udGVudCc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIFN0ZXBJY29uIH0gZnJvbSAnLi9TdGVwSWNvbic7XG5leHBvcnQgeyBkZWZhdWx0IGFzIFN0ZXBMYWJlbCB9IGZyb20gJy4vU3RlcExhYmVsJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgU3RlcHBlciB9IGZyb20gJy4vU3RlcHBlcic7XG5leHBvcnQgeyBkZWZhdWx0IGFzIFN2Z0ljb24gfSBmcm9tICcuL1N2Z0ljb24nO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBTd2lwZWFibGVEcmF3ZXIgfSBmcm9tICcuL1N3aXBlYWJsZURyYXdlcic7XG5leHBvcnQgeyBkZWZhdWx0IGFzIFN3aXRjaCB9IGZyb20gJy4vU3dpdGNoJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgVGFibGUgfSBmcm9tICcuL1RhYmxlJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgVGFibGVCb2R5IH0gZnJvbSAnLi9UYWJsZUJvZHknO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBUYWJsZUNlbGwgfSBmcm9tICcuL1RhYmxlQ2VsbCc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIFRhYmxlRm9vdGVyIH0gZnJvbSAnLi9UYWJsZUZvb3Rlcic7XG5leHBvcnQgeyBkZWZhdWx0IGFzIFRhYmxlSGVhZCB9IGZyb20gJy4vVGFibGVIZWFkJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgVGFibGVQYWdpbmF0aW9uIH0gZnJvbSAnLi9UYWJsZVBhZ2luYXRpb24nO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBUYWJsZVJvdyB9IGZyb20gJy4vVGFibGVSb3cnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBUYWJsZVNvcnRMYWJlbCB9IGZyb20gJy4vVGFibGVTb3J0TGFiZWwnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBUYWJzIH0gZnJvbSAnLi9UYWJzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgVGFiIH0gZnJvbSAnLi9UYWInO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBUZXh0RmllbGQgfSBmcm9tICcuL1RleHRGaWVsZCc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIFRvb2xiYXIgfSBmcm9tICcuL1Rvb2xiYXInO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBUb29sdGlwIH0gZnJvbSAnLi9Ub29sdGlwJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgVHlwb2dyYXBoeSB9IGZyb20gJy4vVHlwb2dyYXBoeSc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHdpdGhNb2JpbGVEaWFsb2cgfSBmcm9tICcuL3dpdGhNb2JpbGVEaWFsb2cnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyB3aXRoV2lkdGggfSBmcm9tICcuL3dpdGhXaWR0aCc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIFpvb20gfSBmcm9tICcuL1pvb20nO1xuIiwiZXhwb3J0cy5mID0ge30ucHJvcGVydHlJc0VudW1lcmFibGU7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBMSUJSQVJZID0gcmVxdWlyZSgnLi9fbGlicmFyeScpO1xudmFyIHdrc0V4dCA9IHJlcXVpcmUoJy4vX3drcy1leHQnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gIHZhciAkU3ltYm9sID0gY29yZS5TeW1ib2wgfHwgKGNvcmUuU3ltYm9sID0gTElCUkFSWSA/IHt9IDogZ2xvYmFsLlN5bWJvbCB8fCB7fSk7XG4gIGlmIChuYW1lLmNoYXJBdCgwKSAhPSAnXycgJiYgIShuYW1lIGluICRTeW1ib2wpKSBkZWZpbmVQcm9wZXJ0eSgkU3ltYm9sLCBuYW1lLCB7IHZhbHVlOiB3a3NFeHQuZihuYW1lKSB9KTtcbn07XG4iLCJleHBvcnRzLmYgPSByZXF1aXJlKCcuL193a3MnKTtcbiIsInZhciBkZWYgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIFRBRyA9IHJlcXVpcmUoJy4vX3drcycpKCd0b1N0cmluZ1RhZycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgdGFnLCBzdGF0KSB7XG4gIGlmIChpdCAmJiAhaGFzKGl0ID0gc3RhdCA/IGl0IDogaXQucHJvdG90eXBlLCBUQUcpKSBkZWYoaXQsIFRBRywgeyBjb25maWd1cmFibGU6IHRydWUsIHZhbHVlOiB0YWcgfSk7XG59O1xuIiwiLy8gSUUgOC0gZG9uJ3QgZW51bSBidWcga2V5c1xubW9kdWxlLmV4cG9ydHMgPSAoXG4gICdjb25zdHJ1Y3RvcixoYXNPd25Qcm9wZXJ0eSxpc1Byb3RvdHlwZU9mLHByb3BlcnR5SXNFbnVtZXJhYmxlLHRvTG9jYWxlU3RyaW5nLHRvU3RyaW5nLHZhbHVlT2YnXG4pLnNwbGl0KCcsJyk7XG4iLCJ2YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBTSEFSRUQgPSAnX19jb3JlLWpzX3NoYXJlZF9fJztcbnZhciBzdG9yZSA9IGdsb2JhbFtTSEFSRURdIHx8IChnbG9iYWxbU0hBUkVEXSA9IHt9KTtcblxuKG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgcmV0dXJuIHN0b3JlW2tleV0gfHwgKHN0b3JlW2tleV0gPSB2YWx1ZSAhPT0gdW5kZWZpbmVkID8gdmFsdWUgOiB7fSk7XG59KSgndmVyc2lvbnMnLCBbXSkucHVzaCh7XG4gIHZlcnNpb246IGNvcmUudmVyc2lvbixcbiAgbW9kZTogcmVxdWlyZSgnLi9fbGlicmFyeScpID8gJ3B1cmUnIDogJ2dsb2JhbCcsXG4gIGNvcHlyaWdodDogJ8KpIDIwMTggRGVuaXMgUHVzaGthcmV2ICh6bG9pcm9jay5ydSknXG59KTtcbiIsInZhciBzaGFyZWQgPSByZXF1aXJlKCcuL19zaGFyZWQnKSgna2V5cycpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4vX3VpZCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIHJldHVybiBzaGFyZWRba2V5XSB8fCAoc2hhcmVkW2tleV0gPSB1aWQoa2V5KSk7XG59O1xuIiwiLy8gMTkuMS4yLjE0IC8gMTUuMi4zLjE0IE9iamVjdC5rZXlzKE8pXG52YXIgJGtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cy1pbnRlcm5hbCcpO1xudmFyIGVudW1CdWdLZXlzID0gcmVxdWlyZSgnLi9fZW51bS1idWcta2V5cycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5rZXlzIHx8IGZ1bmN0aW9uIGtleXMoTykge1xuICByZXR1cm4gJGtleXMoTywgZW51bUJ1Z0tleXMpO1xufTtcbiIsIi8vIDE5LjEuMi4yIC8gMTUuMi4zLjUgT2JqZWN0LmNyZWF0ZShPIFssIFByb3BlcnRpZXNdKVxudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgZFBzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwcycpO1xudmFyIGVudW1CdWdLZXlzID0gcmVxdWlyZSgnLi9fZW51bS1idWcta2V5cycpO1xudmFyIElFX1BST1RPID0gcmVxdWlyZSgnLi9fc2hhcmVkLWtleScpKCdJRV9QUk9UTycpO1xudmFyIEVtcHR5ID0gZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9O1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xuXG4vLyBDcmVhdGUgb2JqZWN0IHdpdGggZmFrZSBgbnVsbGAgcHJvdG90eXBlOiB1c2UgaWZyYW1lIE9iamVjdCB3aXRoIGNsZWFyZWQgcHJvdG90eXBlXG52YXIgY3JlYXRlRGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgLy8gVGhyYXNoLCB3YXN0ZSBhbmQgc29kb215OiBJRSBHQyBidWdcbiAgdmFyIGlmcmFtZSA9IHJlcXVpcmUoJy4vX2RvbS1jcmVhdGUnKSgnaWZyYW1lJyk7XG4gIHZhciBpID0gZW51bUJ1Z0tleXMubGVuZ3RoO1xuICB2YXIgbHQgPSAnPCc7XG4gIHZhciBndCA9ICc+JztcbiAgdmFyIGlmcmFtZURvY3VtZW50O1xuICBpZnJhbWUuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgcmVxdWlyZSgnLi9faHRtbCcpLmFwcGVuZENoaWxkKGlmcmFtZSk7XG4gIGlmcmFtZS5zcmMgPSAnamF2YXNjcmlwdDonOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXNjcmlwdC11cmxcbiAgLy8gY3JlYXRlRGljdCA9IGlmcmFtZS5jb250ZW50V2luZG93Lk9iamVjdDtcbiAgLy8gaHRtbC5yZW1vdmVDaGlsZChpZnJhbWUpO1xuICBpZnJhbWVEb2N1bWVudCA9IGlmcmFtZS5jb250ZW50V2luZG93LmRvY3VtZW50O1xuICBpZnJhbWVEb2N1bWVudC5vcGVuKCk7XG4gIGlmcmFtZURvY3VtZW50LndyaXRlKGx0ICsgJ3NjcmlwdCcgKyBndCArICdkb2N1bWVudC5GPU9iamVjdCcgKyBsdCArICcvc2NyaXB0JyArIGd0KTtcbiAgaWZyYW1lRG9jdW1lbnQuY2xvc2UoKTtcbiAgY3JlYXRlRGljdCA9IGlmcmFtZURvY3VtZW50LkY7XG4gIHdoaWxlIChpLS0pIGRlbGV0ZSBjcmVhdGVEaWN0W1BST1RPVFlQRV1bZW51bUJ1Z0tleXNbaV1dO1xuICByZXR1cm4gY3JlYXRlRGljdCgpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuY3JlYXRlIHx8IGZ1bmN0aW9uIGNyZWF0ZShPLCBQcm9wZXJ0aWVzKSB7XG4gIHZhciByZXN1bHQ7XG4gIGlmIChPICE9PSBudWxsKSB7XG4gICAgRW1wdHlbUFJPVE9UWVBFXSA9IGFuT2JqZWN0KE8pO1xuICAgIHJlc3VsdCA9IG5ldyBFbXB0eSgpO1xuICAgIEVtcHR5W1BST1RPVFlQRV0gPSBudWxsO1xuICAgIC8vIGFkZCBcIl9fcHJvdG9fX1wiIGZvciBPYmplY3QuZ2V0UHJvdG90eXBlT2YgcG9seWZpbGxcbiAgICByZXN1bHRbSUVfUFJPVE9dID0gTztcbiAgfSBlbHNlIHJlc3VsdCA9IGNyZWF0ZURpY3QoKTtcbiAgcmV0dXJuIFByb3BlcnRpZXMgPT09IHVuZGVmaW5lZCA/IHJlc3VsdCA6IGRQcyhyZXN1bHQsIFByb3BlcnRpZXMpO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0ge307XG4iLCIvLyA3LjEuMSBUb1ByaW1pdGl2ZShpbnB1dCBbLCBQcmVmZXJyZWRUeXBlXSlcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xuLy8gaW5zdGVhZCBvZiB0aGUgRVM2IHNwZWMgdmVyc2lvbiwgd2UgZGlkbid0IGltcGxlbWVudCBAQHRvUHJpbWl0aXZlIGNhc2Vcbi8vIGFuZCB0aGUgc2Vjb25kIGFyZ3VtZW50IC0gZmxhZyAtIHByZWZlcnJlZCB0eXBlIGlzIGEgc3RyaW5nXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgUykge1xuICBpZiAoIWlzT2JqZWN0KGl0KSkgcmV0dXJuIGl0O1xuICB2YXIgZm4sIHZhbDtcbiAgaWYgKFMgJiYgdHlwZW9mIChmbiA9IGl0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpIHJldHVybiB2YWw7XG4gIGlmICh0eXBlb2YgKGZuID0gaXQudmFsdWVPZikgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKSByZXR1cm4gdmFsO1xuICBpZiAoIVMgJiYgdHlwZW9mIChmbiA9IGl0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpIHJldHVybiB2YWw7XG4gIHRocm93IFR5cGVFcnJvcihcIkNhbid0IGNvbnZlcnQgb2JqZWN0IHRvIHByaW1pdGl2ZSB2YWx1ZVwiKTtcbn07XG4iLCIvLyA3LjIuMSBSZXF1aXJlT2JqZWN0Q29lcmNpYmxlKGFyZ3VtZW50KVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKGl0ID09IHVuZGVmaW5lZCkgdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY2FsbCBtZXRob2Qgb24gIFwiICsgaXQpO1xuICByZXR1cm4gaXQ7XG59O1xuIiwiLy8gNy4xLjQgVG9JbnRlZ2VyXG52YXIgY2VpbCA9IE1hdGguY2VpbDtcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXNOYU4oaXQgPSAraXQpID8gMCA6IChpdCA+IDAgPyBmbG9vciA6IGNlaWwpKGl0KTtcbn07XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDE1LCBZYWhvbyEgSW5jLlxuICogQ29weXJpZ2h0cyBsaWNlbnNlZCB1bmRlciB0aGUgTmV3IEJTRCBMaWNlbnNlLiBTZWUgdGhlIGFjY29tcGFueWluZyBMSUNFTlNFIGZpbGUgZm9yIHRlcm1zLlxuICovXG4oZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyA/IG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpIDpcbiAgICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoZmFjdG9yeSkgOlxuICAgIChnbG9iYWwuaG9pc3ROb25SZWFjdFN0YXRpY3MgPSBmYWN0b3J5KCkpO1xufSh0aGlzLCAoZnVuY3Rpb24gKCkge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICBcbiAgICB2YXIgUkVBQ1RfU1RBVElDUyA9IHtcbiAgICAgICAgY2hpbGRDb250ZXh0VHlwZXM6IHRydWUsXG4gICAgICAgIGNvbnRleHRUeXBlczogdHJ1ZSxcbiAgICAgICAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICAgICAgICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgICAgICAgZ2V0RGVmYXVsdFByb3BzOiB0cnVlLFxuICAgICAgICBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM6IHRydWUsXG4gICAgICAgIG1peGluczogdHJ1ZSxcbiAgICAgICAgcHJvcFR5cGVzOiB0cnVlLFxuICAgICAgICB0eXBlOiB0cnVlXG4gICAgfTtcbiAgICBcbiAgICB2YXIgS05PV05fU1RBVElDUyA9IHtcbiAgICAgICAgbmFtZTogdHJ1ZSxcbiAgICAgICAgbGVuZ3RoOiB0cnVlLFxuICAgICAgICBwcm90b3R5cGU6IHRydWUsXG4gICAgICAgIGNhbGxlcjogdHJ1ZSxcbiAgICAgICAgY2FsbGVlOiB0cnVlLFxuICAgICAgICBhcmd1bWVudHM6IHRydWUsXG4gICAgICAgIGFyaXR5OiB0cnVlXG4gICAgfTtcbiAgICBcbiAgICB2YXIgZGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG4gICAgdmFyIGdldE93blByb3BlcnR5TmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbiAgICB2YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbiAgICB2YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbiAgICB2YXIgZ2V0UHJvdG90eXBlT2YgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG4gICAgdmFyIG9iamVjdFByb3RvdHlwZSA9IGdldFByb3RvdHlwZU9mICYmIGdldFByb3RvdHlwZU9mKE9iamVjdCk7XG4gICAgXG4gICAgcmV0dXJuIGZ1bmN0aW9uIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKHRhcmdldENvbXBvbmVudCwgc291cmNlQ29tcG9uZW50LCBibGFja2xpc3QpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBzb3VyY2VDb21wb25lbnQgIT09ICdzdHJpbmcnKSB7IC8vIGRvbid0IGhvaXN0IG92ZXIgc3RyaW5nIChodG1sKSBjb21wb25lbnRzXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmIChvYmplY3RQcm90b3R5cGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgaW5oZXJpdGVkQ29tcG9uZW50ID0gZ2V0UHJvdG90eXBlT2Yoc291cmNlQ29tcG9uZW50KTtcbiAgICAgICAgICAgICAgICBpZiAoaW5oZXJpdGVkQ29tcG9uZW50ICYmIGluaGVyaXRlZENvbXBvbmVudCAhPT0gb2JqZWN0UHJvdG90eXBlKSB7XG4gICAgICAgICAgICAgICAgICAgIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKHRhcmdldENvbXBvbmVudCwgaW5oZXJpdGVkQ29tcG9uZW50LCBibGFja2xpc3QpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdmFyIGtleXMgPSBnZXRPd25Qcm9wZXJ0eU5hbWVzKHNvdXJjZUNvbXBvbmVudCk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmIChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICAgICAgICAgICAgICBrZXlzID0ga2V5cy5jb25jYXQoZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZUNvbXBvbmVudCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICAgICAgICAgICAgICBpZiAoIVJFQUNUX1NUQVRJQ1Nba2V5XSAmJiAhS05PV05fU1RBVElDU1trZXldICYmICghYmxhY2tsaXN0IHx8ICFibGFja2xpc3Rba2V5XSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlQ29tcG9uZW50LCBrZXkpO1xuICAgICAgICAgICAgICAgICAgICB0cnkgeyAvLyBBdm9pZCBmYWlsdXJlcyBmcm9tIHJlYWQtb25seSBwcm9wZXJ0aWVzXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZpbmVQcm9wZXJ0eSh0YXJnZXRDb21wb25lbnQsIGtleSwgZGVzY3JpcHRvcik7XG4gICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICByZXR1cm4gdGFyZ2V0Q29tcG9uZW50O1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gdGFyZ2V0Q29tcG9uZW50O1xuICAgIH07XG59KSkpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2lzSW5Ccm93c2VyID0gcmVxdWlyZSgnaXMtaW4tYnJvd3NlcicpO1xuXG52YXIgX2lzSW5Ccm93c2VyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2lzSW5Ccm93c2VyKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG52YXIganMgPSAnJzsgLyoqXG4gICAgICAgICAgICAgICogRXhwb3J0IGphdmFzY3JpcHQgc3R5bGUgYW5kIGNzcyBzdHlsZSB2ZW5kb3IgcHJlZml4ZXMuXG4gICAgICAgICAgICAgICogQmFzZWQgb24gXCJ0cmFuc2Zvcm1cIiBzdXBwb3J0IHRlc3QuXG4gICAgICAgICAgICAgICovXG5cbnZhciBjc3MgPSAnJztcblxuLy8gV2Ugc2hvdWxkIG5vdCBkbyBhbnl0aGluZyBpZiByZXF1aXJlZCBzZXJ2ZXJzaWRlLlxuaWYgKF9pc0luQnJvd3NlcjJbJ2RlZmF1bHQnXSkge1xuICAvLyBPcmRlciBtYXR0ZXJzLiBXZSBuZWVkIHRvIGNoZWNrIFdlYmtpdCB0aGUgbGFzdCBvbmUgYmVjYXVzZVxuICAvLyBvdGhlciB2ZW5kb3JzIHVzZSB0byBhZGQgV2Via2l0IHByZWZpeGVzIHRvIHNvbWUgcHJvcGVydGllc1xuICB2YXIganNDc3NNYXAgPSB7XG4gICAgTW96OiAnLW1vei0nLFxuICAgIC8vIElFIGRpZCBpdCB3cm9uZyBhZ2FpbiAuLi5cbiAgICBtczogJy1tcy0nLFxuICAgIE86ICctby0nLFxuICAgIFdlYmtpdDogJy13ZWJraXQtJ1xuICB9O1xuICB2YXIgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJykuc3R5bGU7XG4gIHZhciB0ZXN0UHJvcCA9ICdUcmFuc2Zvcm0nO1xuXG4gIGZvciAodmFyIGtleSBpbiBqc0Nzc01hcCkge1xuICAgIGlmIChrZXkgKyB0ZXN0UHJvcCBpbiBzdHlsZSkge1xuICAgICAganMgPSBrZXk7XG4gICAgICBjc3MgPSBqc0Nzc01hcFtrZXldO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogVmVuZG9yIHByZWZpeCBzdHJpbmcgZm9yIHRoZSBjdXJyZW50IGJyb3dzZXIuXG4gKlxuICogQHR5cGUge3tqczogU3RyaW5nLCBjc3M6IFN0cmluZ319XG4gKiBAYXBpIHB1YmxpY1xuICovXG5leHBvcnRzWydkZWZhdWx0J10gPSB7IGpzOiBqcywgY3NzOiBjc3MgfTsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfU2hlZXRzUmVnaXN0cnkgPSByZXF1aXJlKCcuL1NoZWV0c1JlZ2lzdHJ5Jyk7XG5cbnZhciBfU2hlZXRzUmVnaXN0cnkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfU2hlZXRzUmVnaXN0cnkpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9XG5cbi8qKlxuICogVGhpcyBpcyBhIGdsb2JhbCBzaGVldHMgcmVnaXN0cnkuIE9ubHkgRG9tUmVuZGVyZXIgd2lsbCBhZGQgc2hlZXRzIHRvIGl0LlxuICogT24gdGhlIHNlcnZlciBvbmUgc2hvdWxkIHVzZSBhbiBvd24gU2hlZXRzUmVnaXN0cnkgaW5zdGFuY2UgYW5kIGFkZCB0aGVcbiAqIHNoZWV0cyB0byBpdCwgYmVjYXVzZSB5b3UgbmVlZCB0byBtYWtlIHN1cmUgdG8gY3JlYXRlIGEgbmV3IHJlZ2lzdHJ5IGZvclxuICogZWFjaCByZXF1ZXN0IGluIG9yZGVyIHRvIG5vdCBsZWFrIHNoZWV0cyBhY3Jvc3MgcmVxdWVzdHMuXG4gKi9cbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IG5ldyBfU2hlZXRzUmVnaXN0cnkyWydkZWZhdWx0J10oKTsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzWydkZWZhdWx0J10gPSB0b0NzcztcblxudmFyIF90b0Nzc1ZhbHVlID0gcmVxdWlyZSgnLi90b0Nzc1ZhbHVlJyk7XG5cbnZhciBfdG9Dc3NWYWx1ZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF90b0Nzc1ZhbHVlKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG4vKipcbiAqIEluZGVudCBhIHN0cmluZy5cbiAqIGh0dHA6Ly9qc3BlcmYuY29tL2FycmF5LWpvaW4tdnMtZm9yXG4gKi9cbmZ1bmN0aW9uIGluZGVudFN0cihzdHIsIGluZGVudCkge1xuICB2YXIgcmVzdWx0ID0gJyc7XG4gIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCBpbmRlbnQ7IGluZGV4KyspIHtcbiAgICByZXN1bHQgKz0gJyAgJztcbiAgfXJldHVybiByZXN1bHQgKyBzdHI7XG59XG5cbi8qKlxuICogQ29udmVydHMgYSBSdWxlIHRvIENTUyBzdHJpbmcuXG4gKi9cblxuZnVuY3Rpb24gdG9Dc3Moc2VsZWN0b3IsIHN0eWxlKSB7XG4gIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiB7fTtcblxuICB2YXIgcmVzdWx0ID0gJyc7XG5cbiAgaWYgKCFzdHlsZSkgcmV0dXJuIHJlc3VsdDtcblxuICB2YXIgX29wdGlvbnMkaW5kZW50ID0gb3B0aW9ucy5pbmRlbnQsXG4gICAgICBpbmRlbnQgPSBfb3B0aW9ucyRpbmRlbnQgPT09IHVuZGVmaW5lZCA/IDAgOiBfb3B0aW9ucyRpbmRlbnQ7XG4gIHZhciBmYWxsYmFja3MgPSBzdHlsZS5mYWxsYmFja3M7XG5cblxuICBpbmRlbnQrKztcblxuICAvLyBBcHBseSBmYWxsYmFja3MgZmlyc3QuXG4gIGlmIChmYWxsYmFja3MpIHtcbiAgICAvLyBBcnJheSBzeW50YXgge2ZhbGxiYWNrczogW3twcm9wOiB2YWx1ZX1dfVxuICAgIGlmIChBcnJheS5pc0FycmF5KGZhbGxiYWNrcykpIHtcbiAgICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCBmYWxsYmFja3MubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgIHZhciBmYWxsYmFjayA9IGZhbGxiYWNrc1tpbmRleF07XG4gICAgICAgIGZvciAodmFyIHByb3AgaW4gZmFsbGJhY2spIHtcbiAgICAgICAgICB2YXIgdmFsdWUgPSBmYWxsYmFja1twcm9wXTtcbiAgICAgICAgICBpZiAodmFsdWUgIT0gbnVsbCkge1xuICAgICAgICAgICAgcmVzdWx0ICs9ICdcXG4nICsgaW5kZW50U3RyKHByb3AgKyAnOiAnICsgKDAsIF90b0Nzc1ZhbHVlMlsnZGVmYXVsdCddKSh2YWx1ZSkgKyAnOycsIGluZGVudCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIE9iamVjdCBzeW50YXgge2ZhbGxiYWNrczoge3Byb3A6IHZhbHVlfX1cbiAgICAgIGZvciAodmFyIF9wcm9wIGluIGZhbGxiYWNrcykge1xuICAgICAgICB2YXIgX3ZhbHVlID0gZmFsbGJhY2tzW19wcm9wXTtcbiAgICAgICAgaWYgKF92YWx1ZSAhPSBudWxsKSB7XG4gICAgICAgICAgcmVzdWx0ICs9ICdcXG4nICsgaW5kZW50U3RyKF9wcm9wICsgJzogJyArICgwLCBfdG9Dc3NWYWx1ZTJbJ2RlZmF1bHQnXSkoX3ZhbHVlKSArICc7JywgaW5kZW50KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZvciAodmFyIF9wcm9wMiBpbiBzdHlsZSkge1xuICAgIHZhciBfdmFsdWUyID0gc3R5bGVbX3Byb3AyXTtcbiAgICBpZiAoX3ZhbHVlMiAhPSBudWxsICYmIF9wcm9wMiAhPT0gJ2ZhbGxiYWNrcycpIHtcbiAgICAgIHJlc3VsdCArPSAnXFxuJyArIGluZGVudFN0cihfcHJvcDIgKyAnOiAnICsgKDAsIF90b0Nzc1ZhbHVlMlsnZGVmYXVsdCddKShfdmFsdWUyKSArICc7JywgaW5kZW50KTtcbiAgICB9XG4gIH1cblxuICAvLyBBbGxvdyBlbXB0eSBzdHlsZSBpbiB0aGlzIGNhc2UsIGJlY2F1c2UgcHJvcGVydGllcyB3aWxsIGJlIGFkZGVkIGR5bmFtaWNhbGx5LlxuICBpZiAoIXJlc3VsdCAmJiAhb3B0aW9ucy5hbGxvd0VtcHR5KSByZXR1cm4gcmVzdWx0O1xuXG4gIGluZGVudC0tO1xuICByZXN1bHQgPSBpbmRlbnRTdHIoc2VsZWN0b3IgKyAnIHsnICsgcmVzdWx0ICsgJ1xcbicsIGluZGVudCkgKyBpbmRlbnRTdHIoJ30nLCBpbmRlbnQpO1xuXG4gIHJldHVybiByZXN1bHQ7XG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG52YXIgY29tbW9uID0ge1xuICBibGFjazogJyMwMDAnLFxuICB3aGl0ZTogJyNmZmYnXG59O1xudmFyIF9kZWZhdWx0ID0gY29tbW9uO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfb2JqZWN0U3ByZWFkMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9vYmplY3RTcHJlYWRcIikpO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiKSk7XG5cbnZhciBfZGVlcG1lcmdlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiZGVlcG1lcmdlXCIpKTtcblxudmFyIF93YXJuaW5nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwid2FybmluZ1wiKSk7XG5cbnZhciBfY3JlYXRlVHlwb2dyYXBoeSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vY3JlYXRlVHlwb2dyYXBoeVwiKSk7XG5cbnZhciBfY3JlYXRlQnJlYWtwb2ludHMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2NyZWF0ZUJyZWFrcG9pbnRzXCIpKTtcblxudmFyIF9jcmVhdGVQYWxldHRlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9jcmVhdGVQYWxldHRlXCIpKTtcblxudmFyIF9jcmVhdGVNaXhpbnMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2NyZWF0ZU1peGluc1wiKSk7XG5cbnZhciBfc2hhZG93cyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vc2hhZG93c1wiKSk7XG5cbnZhciBfdHJhbnNpdGlvbnMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3RyYW5zaXRpb25zXCIpKTtcblxudmFyIF96SW5kZXggPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3pJbmRleFwiKSk7XG5cbnZhciBfc3BhY2luZyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vc3BhY2luZ1wiKSk7XG5cbi8vIDwgMWtiIHBheWxvYWQgb3ZlcmhlYWQgd2hlbiBsb2Rhc2gvbWVyZ2UgaXMgPiAza2IuXG5mdW5jdGlvbiBjcmVhdGVNdWlUaGVtZSgpIHtcbiAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICB2YXIgX29wdGlvbnMkcGFsZXR0ZSA9IG9wdGlvbnMucGFsZXR0ZSxcbiAgICAgIHBhbGV0dGVJbnB1dCA9IF9vcHRpb25zJHBhbGV0dGUgPT09IHZvaWQgMCA/IHt9IDogX29wdGlvbnMkcGFsZXR0ZSxcbiAgICAgIF9vcHRpb25zJGJyZWFrcG9pbnRzID0gb3B0aW9ucy5icmVha3BvaW50cyxcbiAgICAgIGJyZWFrcG9pbnRzSW5wdXQgPSBfb3B0aW9ucyRicmVha3BvaW50cyA9PT0gdm9pZCAwID8ge30gOiBfb3B0aW9ucyRicmVha3BvaW50cyxcbiAgICAgIF9vcHRpb25zJG1peGlucyA9IG9wdGlvbnMubWl4aW5zLFxuICAgICAgbWl4aW5zSW5wdXQgPSBfb3B0aW9ucyRtaXhpbnMgPT09IHZvaWQgMCA/IHt9IDogX29wdGlvbnMkbWl4aW5zLFxuICAgICAgX29wdGlvbnMkdHlwb2dyYXBoeSA9IG9wdGlvbnMudHlwb2dyYXBoeSxcbiAgICAgIHR5cG9ncmFwaHlJbnB1dCA9IF9vcHRpb25zJHR5cG9ncmFwaHkgPT09IHZvaWQgMCA/IHt9IDogX29wdGlvbnMkdHlwb2dyYXBoeSxcbiAgICAgIHNoYWRvd3NJbnB1dCA9IG9wdGlvbnMuc2hhZG93cyxcbiAgICAgIG90aGVyID0gKDAsIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIuZGVmYXVsdCkob3B0aW9ucywgW1wicGFsZXR0ZVwiLCBcImJyZWFrcG9pbnRzXCIsIFwibWl4aW5zXCIsIFwidHlwb2dyYXBoeVwiLCBcInNoYWRvd3NcIl0pO1xuICB2YXIgcGFsZXR0ZSA9ICgwLCBfY3JlYXRlUGFsZXR0ZS5kZWZhdWx0KShwYWxldHRlSW5wdXQpO1xuICB2YXIgYnJlYWtwb2ludHMgPSAoMCwgX2NyZWF0ZUJyZWFrcG9pbnRzLmRlZmF1bHQpKGJyZWFrcG9pbnRzSW5wdXQpO1xuICB2YXIgbXVpVGhlbWUgPSAoMCwgX29iamVjdFNwcmVhZDIuZGVmYXVsdCkoe1xuICAgIGJyZWFrcG9pbnRzOiBicmVha3BvaW50cyxcbiAgICBkaXJlY3Rpb246ICdsdHInLFxuICAgIG1peGluczogKDAsIF9jcmVhdGVNaXhpbnMuZGVmYXVsdCkoYnJlYWtwb2ludHMsIF9zcGFjaW5nLmRlZmF1bHQsIG1peGluc0lucHV0KSxcbiAgICBvdmVycmlkZXM6IHt9LFxuICAgIC8vIEluamVjdCBjdXN0b20gc3R5bGVzXG4gICAgcGFsZXR0ZTogcGFsZXR0ZSxcbiAgICBwcm9wczoge30sXG4gICAgLy8gSW5qZWN0IGN1c3RvbSBwcm9wZXJ0aWVzXG4gICAgc2hhZG93czogc2hhZG93c0lucHV0IHx8IF9zaGFkb3dzLmRlZmF1bHQsXG4gICAgdHlwb2dyYXBoeTogKDAsIF9jcmVhdGVUeXBvZ3JhcGh5LmRlZmF1bHQpKHBhbGV0dGUsIHR5cG9ncmFwaHlJbnB1dClcbiAgfSwgKDAsIF9kZWVwbWVyZ2UuZGVmYXVsdCkoe1xuICAgIHRyYW5zaXRpb25zOiBfdHJhbnNpdGlvbnMuZGVmYXVsdCxcbiAgICBzcGFjaW5nOiBfc3BhY2luZy5kZWZhdWx0LFxuICAgIHpJbmRleDogX3pJbmRleC5kZWZhdWx0XG4gIH0sIG90aGVyKSk7XG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/ICgwLCBfd2FybmluZy5kZWZhdWx0KShtdWlUaGVtZS5zaGFkb3dzLmxlbmd0aCA9PT0gMjUsICdNYXRlcmlhbC1VSTogdGhlIHNoYWRvd3MgYXJyYXkgcHJvdmlkZWQgdG8gY3JlYXRlTXVpVGhlbWUgc2hvdWxkIHN1cHBvcnQgMjUgZWxldmF0aW9ucy4nKSA6IHZvaWQgMDtcbiAgcmV0dXJuIG11aVRoZW1lO1xufVxuXG52YXIgX2RlZmF1bHQgPSBjcmVhdGVNdWlUaGVtZTtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5DSEFOTkVMID0gdm9pZCAwO1xuXG52YXIgX2RlZmluZVByb3BlcnR5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9kZWZpbmVQcm9wZXJ0eVwiKSk7XG5cbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbi8vIFNhbWUgdmFsdWUgdXNlZCBieSByZWFjdC1qc3NcbnZhciBDSEFOTkVMID0gJ19fVEhFTUlOR19fJztcbmV4cG9ydHMuQ0hBTk5FTCA9IENIQU5ORUw7XG52YXIgdGhlbWVMaXN0ZW5lciA9IHtcbiAgY29udGV4dFR5cGVzOiAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KSh7fSwgQ0hBTk5FTCwgX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdCksXG4gIGluaXRpYWw6IGZ1bmN0aW9uIGluaXRpYWwoY29udGV4dCkge1xuICAgIGlmICghY29udGV4dFtDSEFOTkVMXSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNvbnRleHRbQ0hBTk5FTF0uZ2V0U3RhdGUoKTtcbiAgfSxcbiAgc3Vic2NyaWJlOiBmdW5jdGlvbiBzdWJzY3JpYmUoY29udGV4dCwgY2IpIHtcbiAgICBpZiAoIWNvbnRleHRbQ0hBTk5FTF0pIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiBjb250ZXh0W0NIQU5ORUxdLnN1YnNjcmliZShjYik7XG4gIH0sXG4gIHVuc3Vic2NyaWJlOiBmdW5jdGlvbiB1bnN1YnNjcmliZShjb250ZXh0LCBzdWJzY3JpcHRpb25JZCkge1xuICAgIGlmIChjb250ZXh0W0NIQU5ORUxdKSB7XG4gICAgICBjb250ZXh0W0NIQU5ORUxdLnVuc3Vic2NyaWJlKHN1YnNjcmlwdGlvbklkKTtcbiAgICB9XG4gIH1cbn07XG52YXIgX2RlZmF1bHQgPSB0aGVtZUxpc3RlbmVyO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiZnVuY3Rpb24gX3R5cGVvZjIob2JqKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikgeyBfdHlwZW9mMiA9IGZ1bmN0aW9uIF90eXBlb2YyKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZjIgPSBmdW5jdGlvbiBfdHlwZW9mMihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2YyKG9iaik7IH1cblxuZnVuY3Rpb24gX3R5cGVvZihvYmopIHtcbiAgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBfdHlwZW9mMihTeW1ib2wuaXRlcmF0b3IpID09PSBcInN5bWJvbFwiKSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHtcbiAgICAgIHJldHVybiBfdHlwZW9mMihvYmopO1xuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHtcbiAgICAgIHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiBfdHlwZW9mMihvYmopO1xuICAgIH07XG4gIH1cblxuICByZXR1cm4gX3R5cGVvZihvYmopO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF90eXBlb2Y7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgZW1wdHlPYmplY3QgPSB7fTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgT2JqZWN0LmZyZWV6ZShlbXB0eU9iamVjdCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZW1wdHlPYmplY3Q7IiwiLypcbm9iamVjdC1hc3NpZ25cbihjKSBTaW5kcmUgU29yaHVzXG5AbGljZW5zZSBNSVRcbiovXG5cbid1c2Ugc3RyaWN0Jztcbi8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgcHJvcElzRW51bWVyYWJsZSA9IE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGU7XG5cbmZ1bmN0aW9uIHRvT2JqZWN0KHZhbCkge1xuXHRpZiAodmFsID09PSBudWxsIHx8IHZhbCA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignT2JqZWN0LmFzc2lnbiBjYW5ub3QgYmUgY2FsbGVkIHdpdGggbnVsbCBvciB1bmRlZmluZWQnKTtcblx0fVxuXG5cdHJldHVybiBPYmplY3QodmFsKTtcbn1cblxuZnVuY3Rpb24gc2hvdWxkVXNlTmF0aXZlKCkge1xuXHR0cnkge1xuXHRcdGlmICghT2JqZWN0LmFzc2lnbikge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIERldGVjdCBidWdneSBwcm9wZXJ0eSBlbnVtZXJhdGlvbiBvcmRlciBpbiBvbGRlciBWOCB2ZXJzaW9ucy5cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTQxMThcblx0XHR2YXIgdGVzdDEgPSBuZXcgU3RyaW5nKCdhYmMnKTsgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3LXdyYXBwZXJzXG5cdFx0dGVzdDFbNV0gPSAnZGUnO1xuXHRcdGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0MSlbMF0gPT09ICc1Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMwNTZcblx0XHR2YXIgdGVzdDIgPSB7fTtcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IDEwOyBpKyspIHtcblx0XHRcdHRlc3QyWydfJyArIFN0cmluZy5mcm9tQ2hhckNvZGUoaSldID0gaTtcblx0XHR9XG5cdFx0dmFyIG9yZGVyMiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QyKS5tYXAoZnVuY3Rpb24gKG4pIHtcblx0XHRcdHJldHVybiB0ZXN0MltuXTtcblx0XHR9KTtcblx0XHRpZiAob3JkZXIyLmpvaW4oJycpICE9PSAnMDEyMzQ1Njc4OScpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMDU2XG5cdFx0dmFyIHRlc3QzID0ge307XG5cdFx0J2FiY2RlZmdoaWprbG1ub3BxcnN0Jy5zcGxpdCgnJykuZm9yRWFjaChmdW5jdGlvbiAobGV0dGVyKSB7XG5cdFx0XHR0ZXN0M1tsZXR0ZXJdID0gbGV0dGVyO1xuXHRcdH0pO1xuXHRcdGlmIChPYmplY3Qua2V5cyhPYmplY3QuYXNzaWduKHt9LCB0ZXN0MykpLmpvaW4oJycpICE9PVxuXHRcdFx0XHQnYWJjZGVmZ2hpamtsbW5vcHFyc3QnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRydWU7XG5cdH0gY2F0Y2ggKGVycikge1xuXHRcdC8vIFdlIGRvbid0IGV4cGVjdCBhbnkgb2YgdGhlIGFib3ZlIHRvIHRocm93LCBidXQgYmV0dGVyIHRvIGJlIHNhZmUuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2hvdWxkVXNlTmF0aXZlKCkgPyBPYmplY3QuYXNzaWduIDogZnVuY3Rpb24gKHRhcmdldCwgc291cmNlKSB7XG5cdHZhciBmcm9tO1xuXHR2YXIgdG8gPSB0b09iamVjdCh0YXJnZXQpO1xuXHR2YXIgc3ltYm9scztcblxuXHRmb3IgKHZhciBzID0gMTsgcyA8IGFyZ3VtZW50cy5sZW5ndGg7IHMrKykge1xuXHRcdGZyb20gPSBPYmplY3QoYXJndW1lbnRzW3NdKTtcblxuXHRcdGZvciAodmFyIGtleSBpbiBmcm9tKSB7XG5cdFx0XHRpZiAoaGFzT3duUHJvcGVydHkuY2FsbChmcm9tLCBrZXkpKSB7XG5cdFx0XHRcdHRvW2tleV0gPSBmcm9tW2tleV07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKGdldE93blByb3BlcnR5U3ltYm9scykge1xuXHRcdFx0c3ltYm9scyA9IGdldE93blByb3BlcnR5U3ltYm9scyhmcm9tKTtcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgc3ltYm9scy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRpZiAocHJvcElzRW51bWVyYWJsZS5jYWxsKGZyb20sIHN5bWJvbHNbaV0pKSB7XG5cdFx0XHRcdFx0dG9bc3ltYm9sc1tpXV0gPSBmcm9tW3N5bWJvbHNbaV1dO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHRvO1xufTtcbiIsIi8qKiFcbiAqIEBmaWxlT3ZlcnZpZXcgS2lja2FzcyBsaWJyYXJ5IHRvIGNyZWF0ZSBhbmQgcGxhY2UgcG9wcGVycyBuZWFyIHRoZWlyIHJlZmVyZW5jZSBlbGVtZW50cy5cbiAqIEB2ZXJzaW9uIDEuMTQuM1xuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAoYykgMjAxNiBGZWRlcmljbyBaaXZvbG8gYW5kIGNvbnRyaWJ1dG9yc1xuICpcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiAqIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbiAqIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbiAqIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbiAqIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuICogZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbiAqXG4gKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGxcbiAqIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4gKlxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuICogSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gKiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiAqIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiAqIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gKiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRVxuICogU09GVFdBUkUuXG4gKi9cbnZhciBpc0Jyb3dzZXIgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnO1xuXG52YXIgbG9uZ2VyVGltZW91dEJyb3dzZXJzID0gWydFZGdlJywgJ1RyaWRlbnQnLCAnRmlyZWZveCddO1xudmFyIHRpbWVvdXREdXJhdGlvbiA9IDA7XG5mb3IgKHZhciBpID0gMDsgaSA8IGxvbmdlclRpbWVvdXRCcm93c2Vycy5sZW5ndGg7IGkgKz0gMSkge1xuICBpZiAoaXNCcm93c2VyICYmIG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZihsb25nZXJUaW1lb3V0QnJvd3NlcnNbaV0pID49IDApIHtcbiAgICB0aW1lb3V0RHVyYXRpb24gPSAxO1xuICAgIGJyZWFrO1xuICB9XG59XG5cbmZ1bmN0aW9uIG1pY3JvdGFza0RlYm91bmNlKGZuKSB7XG4gIHZhciBjYWxsZWQgPSBmYWxzZTtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoY2FsbGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNhbGxlZCA9IHRydWU7XG4gICAgd2luZG93LlByb21pc2UucmVzb2x2ZSgpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgY2FsbGVkID0gZmFsc2U7XG4gICAgICBmbigpO1xuICAgIH0pO1xuICB9O1xufVxuXG5mdW5jdGlvbiB0YXNrRGVib3VuY2UoZm4pIHtcbiAgdmFyIHNjaGVkdWxlZCA9IGZhbHNlO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGlmICghc2NoZWR1bGVkKSB7XG4gICAgICBzY2hlZHVsZWQgPSB0cnVlO1xuICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHNjaGVkdWxlZCA9IGZhbHNlO1xuICAgICAgICBmbigpO1xuICAgICAgfSwgdGltZW91dER1cmF0aW9uKTtcbiAgICB9XG4gIH07XG59XG5cbnZhciBzdXBwb3J0c01pY3JvVGFza3MgPSBpc0Jyb3dzZXIgJiYgd2luZG93LlByb21pc2U7XG5cbi8qKlxuKiBDcmVhdGUgYSBkZWJvdW5jZWQgdmVyc2lvbiBvZiBhIG1ldGhvZCwgdGhhdCdzIGFzeW5jaHJvbm91c2x5IGRlZmVycmVkXG4qIGJ1dCBjYWxsZWQgaW4gdGhlIG1pbmltdW0gdGltZSBwb3NzaWJsZS5cbipcbiogQG1ldGhvZFxuKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4qIEBhcmd1bWVudCB7RnVuY3Rpb259IGZuXG4qIEByZXR1cm5zIHtGdW5jdGlvbn1cbiovXG52YXIgZGVib3VuY2UgPSBzdXBwb3J0c01pY3JvVGFza3MgPyBtaWNyb3Rhc2tEZWJvdW5jZSA6IHRhc2tEZWJvdW5jZTtcblxuLyoqXG4gKiBDaGVjayBpZiB0aGUgZ2l2ZW4gdmFyaWFibGUgaXMgYSBmdW5jdGlvblxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtBbnl9IGZ1bmN0aW9uVG9DaGVjayAtIHZhcmlhYmxlIHRvIGNoZWNrXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gYW5zd2VyIHRvOiBpcyBhIGZ1bmN0aW9uP1xuICovXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKGZ1bmN0aW9uVG9DaGVjaykge1xuICB2YXIgZ2V0VHlwZSA9IHt9O1xuICByZXR1cm4gZnVuY3Rpb25Ub0NoZWNrICYmIGdldFR5cGUudG9TdHJpbmcuY2FsbChmdW5jdGlvblRvQ2hlY2spID09PSAnW29iamVjdCBGdW5jdGlvbl0nO1xufVxuXG4vKipcbiAqIEdldCBDU1MgY29tcHV0ZWQgcHJvcGVydHkgb2YgdGhlIGdpdmVuIGVsZW1lbnRcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWVtZW50fSBlbGVtZW50XG4gKiBAYXJndW1lbnQge1N0cmluZ30gcHJvcGVydHlcbiAqL1xuZnVuY3Rpb24gZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5KGVsZW1lbnQsIHByb3BlcnR5KSB7XG4gIGlmIChlbGVtZW50Lm5vZGVUeXBlICE9PSAxKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG4gIC8vIE5PVEU6IDEgRE9NIGFjY2VzcyBoZXJlXG4gIHZhciBjc3MgPSBnZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQsIG51bGwpO1xuICByZXR1cm4gcHJvcGVydHkgPyBjc3NbcHJvcGVydHldIDogY3NzO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIHBhcmVudE5vZGUgb3IgdGhlIGhvc3Qgb2YgdGhlIGVsZW1lbnRcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudFxuICogQHJldHVybnMge0VsZW1lbnR9IHBhcmVudFxuICovXG5mdW5jdGlvbiBnZXRQYXJlbnROb2RlKGVsZW1lbnQpIHtcbiAgaWYgKGVsZW1lbnQubm9kZU5hbWUgPT09ICdIVE1MJykge1xuICAgIHJldHVybiBlbGVtZW50O1xuICB9XG4gIHJldHVybiBlbGVtZW50LnBhcmVudE5vZGUgfHwgZWxlbWVudC5ob3N0O1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIHNjcm9sbGluZyBwYXJlbnQgb2YgdGhlIGdpdmVuIGVsZW1lbnRcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudFxuICogQHJldHVybnMge0VsZW1lbnR9IHNjcm9sbCBwYXJlbnRcbiAqL1xuZnVuY3Rpb24gZ2V0U2Nyb2xsUGFyZW50KGVsZW1lbnQpIHtcbiAgLy8gUmV0dXJuIGJvZHksIGBnZXRTY3JvbGxgIHdpbGwgdGFrZSBjYXJlIHRvIGdldCB0aGUgY29ycmVjdCBgc2Nyb2xsVG9wYCBmcm9tIGl0XG4gIGlmICghZWxlbWVudCkge1xuICAgIHJldHVybiBkb2N1bWVudC5ib2R5O1xuICB9XG5cbiAgc3dpdGNoIChlbGVtZW50Lm5vZGVOYW1lKSB7XG4gICAgY2FzZSAnSFRNTCc6XG4gICAgY2FzZSAnQk9EWSc6XG4gICAgICByZXR1cm4gZWxlbWVudC5vd25lckRvY3VtZW50LmJvZHk7XG4gICAgY2FzZSAnI2RvY3VtZW50JzpcbiAgICAgIHJldHVybiBlbGVtZW50LmJvZHk7XG4gIH1cblxuICAvLyBGaXJlZm94IHdhbnQgdXMgdG8gY2hlY2sgYC14YCBhbmQgYC15YCB2YXJpYXRpb25zIGFzIHdlbGxcblxuICB2YXIgX2dldFN0eWxlQ29tcHV0ZWRQcm9wID0gZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5KGVsZW1lbnQpLFxuICAgICAgb3ZlcmZsb3cgPSBfZ2V0U3R5bGVDb21wdXRlZFByb3Aub3ZlcmZsb3csXG4gICAgICBvdmVyZmxvd1ggPSBfZ2V0U3R5bGVDb21wdXRlZFByb3Aub3ZlcmZsb3dYLFxuICAgICAgb3ZlcmZsb3dZID0gX2dldFN0eWxlQ29tcHV0ZWRQcm9wLm92ZXJmbG93WTtcblxuICBpZiAoLyhhdXRvfHNjcm9sbHxvdmVybGF5KS8udGVzdChvdmVyZmxvdyArIG92ZXJmbG93WSArIG92ZXJmbG93WCkpIHtcbiAgICByZXR1cm4gZWxlbWVudDtcbiAgfVxuXG4gIHJldHVybiBnZXRTY3JvbGxQYXJlbnQoZ2V0UGFyZW50Tm9kZShlbGVtZW50KSk7XG59XG5cbnZhciBpc0lFMTEgPSBpc0Jyb3dzZXIgJiYgISEod2luZG93Lk1TSW5wdXRNZXRob2RDb250ZXh0ICYmIGRvY3VtZW50LmRvY3VtZW50TW9kZSk7XG52YXIgaXNJRTEwID0gaXNCcm93c2VyICYmIC9NU0lFIDEwLy50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuXG4vKipcbiAqIERldGVybWluZXMgaWYgdGhlIGJyb3dzZXIgaXMgSW50ZXJuZXQgRXhwbG9yZXJcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBwYXJhbSB7TnVtYmVyfSB2ZXJzaW9uIHRvIGNoZWNrXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gaXNJRVxuICovXG5mdW5jdGlvbiBpc0lFKHZlcnNpb24pIHtcbiAgaWYgKHZlcnNpb24gPT09IDExKSB7XG4gICAgcmV0dXJuIGlzSUUxMTtcbiAgfVxuICBpZiAodmVyc2lvbiA9PT0gMTApIHtcbiAgICByZXR1cm4gaXNJRTEwO1xuICB9XG4gIHJldHVybiBpc0lFMTEgfHwgaXNJRTEwO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIG9mZnNldCBwYXJlbnQgb2YgdGhlIGdpdmVuIGVsZW1lbnRcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudFxuICogQHJldHVybnMge0VsZW1lbnR9IG9mZnNldCBwYXJlbnRcbiAqL1xuZnVuY3Rpb24gZ2V0T2Zmc2V0UGFyZW50KGVsZW1lbnQpIHtcbiAgaWYgKCFlbGVtZW50KSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgfVxuXG4gIHZhciBub09mZnNldFBhcmVudCA9IGlzSUUoMTApID8gZG9jdW1lbnQuYm9keSA6IG51bGw7XG5cbiAgLy8gTk9URTogMSBET00gYWNjZXNzIGhlcmVcbiAgdmFyIG9mZnNldFBhcmVudCA9IGVsZW1lbnQub2Zmc2V0UGFyZW50O1xuICAvLyBTa2lwIGhpZGRlbiBlbGVtZW50cyB3aGljaCBkb24ndCBoYXZlIGFuIG9mZnNldFBhcmVudFxuICB3aGlsZSAob2Zmc2V0UGFyZW50ID09PSBub09mZnNldFBhcmVudCAmJiBlbGVtZW50Lm5leHRFbGVtZW50U2libGluZykge1xuICAgIG9mZnNldFBhcmVudCA9IChlbGVtZW50ID0gZWxlbWVudC5uZXh0RWxlbWVudFNpYmxpbmcpLm9mZnNldFBhcmVudDtcbiAgfVxuXG4gIHZhciBub2RlTmFtZSA9IG9mZnNldFBhcmVudCAmJiBvZmZzZXRQYXJlbnQubm9kZU5hbWU7XG5cbiAgaWYgKCFub2RlTmFtZSB8fCBub2RlTmFtZSA9PT0gJ0JPRFknIHx8IG5vZGVOYW1lID09PSAnSFRNTCcpIHtcbiAgICByZXR1cm4gZWxlbWVudCA/IGVsZW1lbnQub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQgOiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gIH1cblxuICAvLyAub2Zmc2V0UGFyZW50IHdpbGwgcmV0dXJuIHRoZSBjbG9zZXN0IFREIG9yIFRBQkxFIGluIGNhc2VcbiAgLy8gbm8gb2Zmc2V0UGFyZW50IGlzIHByZXNlbnQsIEkgaGF0ZSB0aGlzIGpvYi4uLlxuICBpZiAoWydURCcsICdUQUJMRSddLmluZGV4T2Yob2Zmc2V0UGFyZW50Lm5vZGVOYW1lKSAhPT0gLTEgJiYgZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5KG9mZnNldFBhcmVudCwgJ3Bvc2l0aW9uJykgPT09ICdzdGF0aWMnKSB7XG4gICAgcmV0dXJuIGdldE9mZnNldFBhcmVudChvZmZzZXRQYXJlbnQpO1xuICB9XG5cbiAgcmV0dXJuIG9mZnNldFBhcmVudDtcbn1cblxuZnVuY3Rpb24gaXNPZmZzZXRDb250YWluZXIoZWxlbWVudCkge1xuICB2YXIgbm9kZU5hbWUgPSBlbGVtZW50Lm5vZGVOYW1lO1xuXG4gIGlmIChub2RlTmFtZSA9PT0gJ0JPRFknKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiBub2RlTmFtZSA9PT0gJ0hUTUwnIHx8IGdldE9mZnNldFBhcmVudChlbGVtZW50LmZpcnN0RWxlbWVudENoaWxkKSA9PT0gZWxlbWVudDtcbn1cblxuLyoqXG4gKiBGaW5kcyB0aGUgcm9vdCBub2RlIChkb2N1bWVudCwgc2hhZG93RE9NIHJvb3QpIG9mIHRoZSBnaXZlbiBlbGVtZW50XG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IG5vZGVcbiAqIEByZXR1cm5zIHtFbGVtZW50fSByb290IG5vZGVcbiAqL1xuZnVuY3Rpb24gZ2V0Um9vdChub2RlKSB7XG4gIGlmIChub2RlLnBhcmVudE5vZGUgIT09IG51bGwpIHtcbiAgICByZXR1cm4gZ2V0Um9vdChub2RlLnBhcmVudE5vZGUpO1xuICB9XG5cbiAgcmV0dXJuIG5vZGU7XG59XG5cbi8qKlxuICogRmluZHMgdGhlIG9mZnNldCBwYXJlbnQgY29tbW9uIHRvIHRoZSB0d28gcHJvdmlkZWQgbm9kZXNcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudDFcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudDJcbiAqIEByZXR1cm5zIHtFbGVtZW50fSBjb21tb24gb2Zmc2V0IHBhcmVudFxuICovXG5mdW5jdGlvbiBmaW5kQ29tbW9uT2Zmc2V0UGFyZW50KGVsZW1lbnQxLCBlbGVtZW50Mikge1xuICAvLyBUaGlzIGNoZWNrIGlzIG5lZWRlZCB0byBhdm9pZCBlcnJvcnMgaW4gY2FzZSBvbmUgb2YgdGhlIGVsZW1lbnRzIGlzbid0IGRlZmluZWQgZm9yIGFueSByZWFzb25cbiAgaWYgKCFlbGVtZW50MSB8fCAhZWxlbWVudDEubm9kZVR5cGUgfHwgIWVsZW1lbnQyIHx8ICFlbGVtZW50Mi5ub2RlVHlwZSkge1xuICAgIHJldHVybiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gIH1cblxuICAvLyBIZXJlIHdlIG1ha2Ugc3VyZSB0byBnaXZlIGFzIFwic3RhcnRcIiB0aGUgZWxlbWVudCB0aGF0IGNvbWVzIGZpcnN0IGluIHRoZSBET01cbiAgdmFyIG9yZGVyID0gZWxlbWVudDEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oZWxlbWVudDIpICYgTm9kZS5ET0NVTUVOVF9QT1NJVElPTl9GT0xMT1dJTkc7XG4gIHZhciBzdGFydCA9IG9yZGVyID8gZWxlbWVudDEgOiBlbGVtZW50MjtcbiAgdmFyIGVuZCA9IG9yZGVyID8gZWxlbWVudDIgOiBlbGVtZW50MTtcblxuICAvLyBHZXQgY29tbW9uIGFuY2VzdG9yIGNvbnRhaW5lclxuICB2YXIgcmFuZ2UgPSBkb2N1bWVudC5jcmVhdGVSYW5nZSgpO1xuICByYW5nZS5zZXRTdGFydChzdGFydCwgMCk7XG4gIHJhbmdlLnNldEVuZChlbmQsIDApO1xuICB2YXIgY29tbW9uQW5jZXN0b3JDb250YWluZXIgPSByYW5nZS5jb21tb25BbmNlc3RvckNvbnRhaW5lcjtcblxuICAvLyBCb3RoIG5vZGVzIGFyZSBpbnNpZGUgI2RvY3VtZW50XG5cbiAgaWYgKGVsZW1lbnQxICE9PSBjb21tb25BbmNlc3RvckNvbnRhaW5lciAmJiBlbGVtZW50MiAhPT0gY29tbW9uQW5jZXN0b3JDb250YWluZXIgfHwgc3RhcnQuY29udGFpbnMoZW5kKSkge1xuICAgIGlmIChpc09mZnNldENvbnRhaW5lcihjb21tb25BbmNlc3RvckNvbnRhaW5lcikpIHtcbiAgICAgIHJldHVybiBjb21tb25BbmNlc3RvckNvbnRhaW5lcjtcbiAgICB9XG5cbiAgICByZXR1cm4gZ2V0T2Zmc2V0UGFyZW50KGNvbW1vbkFuY2VzdG9yQ29udGFpbmVyKTtcbiAgfVxuXG4gIC8vIG9uZSBvZiB0aGUgbm9kZXMgaXMgaW5zaWRlIHNoYWRvd0RPTSwgZmluZCB3aGljaCBvbmVcbiAgdmFyIGVsZW1lbnQxcm9vdCA9IGdldFJvb3QoZWxlbWVudDEpO1xuICBpZiAoZWxlbWVudDFyb290Lmhvc3QpIHtcbiAgICByZXR1cm4gZmluZENvbW1vbk9mZnNldFBhcmVudChlbGVtZW50MXJvb3QuaG9zdCwgZWxlbWVudDIpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBmaW5kQ29tbW9uT2Zmc2V0UGFyZW50KGVsZW1lbnQxLCBnZXRSb290KGVsZW1lbnQyKS5ob3N0KTtcbiAgfVxufVxuXG4vKipcbiAqIEdldHMgdGhlIHNjcm9sbCB2YWx1ZSBvZiB0aGUgZ2l2ZW4gZWxlbWVudCBpbiB0aGUgZ2l2ZW4gc2lkZSAodG9wIGFuZCBsZWZ0KVxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50XG4gKiBAYXJndW1lbnQge1N0cmluZ30gc2lkZSBgdG9wYCBvciBgbGVmdGBcbiAqIEByZXR1cm5zIHtudW1iZXJ9IGFtb3VudCBvZiBzY3JvbGxlZCBwaXhlbHNcbiAqL1xuZnVuY3Rpb24gZ2V0U2Nyb2xsKGVsZW1lbnQpIHtcbiAgdmFyIHNpZGUgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6ICd0b3AnO1xuXG4gIHZhciB1cHBlclNpZGUgPSBzaWRlID09PSAndG9wJyA/ICdzY3JvbGxUb3AnIDogJ3Njcm9sbExlZnQnO1xuICB2YXIgbm9kZU5hbWUgPSBlbGVtZW50Lm5vZGVOYW1lO1xuXG4gIGlmIChub2RlTmFtZSA9PT0gJ0JPRFknIHx8IG5vZGVOYW1lID09PSAnSFRNTCcpIHtcbiAgICB2YXIgaHRtbCA9IGVsZW1lbnQub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gICAgdmFyIHNjcm9sbGluZ0VsZW1lbnQgPSBlbGVtZW50Lm93bmVyRG9jdW1lbnQuc2Nyb2xsaW5nRWxlbWVudCB8fCBodG1sO1xuICAgIHJldHVybiBzY3JvbGxpbmdFbGVtZW50W3VwcGVyU2lkZV07XG4gIH1cblxuICByZXR1cm4gZWxlbWVudFt1cHBlclNpZGVdO1xufVxuXG4vKlxuICogU3VtIG9yIHN1YnRyYWN0IHRoZSBlbGVtZW50IHNjcm9sbCB2YWx1ZXMgKGxlZnQgYW5kIHRvcCkgZnJvbSBhIGdpdmVuIHJlY3Qgb2JqZWN0XG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcGFyYW0ge09iamVjdH0gcmVjdCAtIFJlY3Qgb2JqZWN0IHlvdSB3YW50IHRvIGNoYW5nZVxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWxlbWVudCAtIFRoZSBlbGVtZW50IGZyb20gdGhlIGZ1bmN0aW9uIHJlYWRzIHRoZSBzY3JvbGwgdmFsdWVzXG4gKiBAcGFyYW0ge0Jvb2xlYW59IHN1YnRyYWN0IC0gc2V0IHRvIHRydWUgaWYgeW91IHdhbnQgdG8gc3VidHJhY3QgdGhlIHNjcm9sbCB2YWx1ZXNcbiAqIEByZXR1cm4ge09iamVjdH0gcmVjdCAtIFRoZSBtb2RpZmllciByZWN0IG9iamVjdFxuICovXG5mdW5jdGlvbiBpbmNsdWRlU2Nyb2xsKHJlY3QsIGVsZW1lbnQpIHtcbiAgdmFyIHN1YnRyYWN0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiBmYWxzZTtcblxuICB2YXIgc2Nyb2xsVG9wID0gZ2V0U2Nyb2xsKGVsZW1lbnQsICd0b3AnKTtcbiAgdmFyIHNjcm9sbExlZnQgPSBnZXRTY3JvbGwoZWxlbWVudCwgJ2xlZnQnKTtcbiAgdmFyIG1vZGlmaWVyID0gc3VidHJhY3QgPyAtMSA6IDE7XG4gIHJlY3QudG9wICs9IHNjcm9sbFRvcCAqIG1vZGlmaWVyO1xuICByZWN0LmJvdHRvbSArPSBzY3JvbGxUb3AgKiBtb2RpZmllcjtcbiAgcmVjdC5sZWZ0ICs9IHNjcm9sbExlZnQgKiBtb2RpZmllcjtcbiAgcmVjdC5yaWdodCArPSBzY3JvbGxMZWZ0ICogbW9kaWZpZXI7XG4gIHJldHVybiByZWN0O1xufVxuXG4vKlxuICogSGVscGVyIHRvIGRldGVjdCBib3JkZXJzIG9mIGEgZ2l2ZW4gZWxlbWVudFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHBhcmFtIHtDU1NTdHlsZURlY2xhcmF0aW9ufSBzdHlsZXNcbiAqIFJlc3VsdCBvZiBgZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5YCBvbiB0aGUgZ2l2ZW4gZWxlbWVudFxuICogQHBhcmFtIHtTdHJpbmd9IGF4aXMgLSBgeGAgb3IgYHlgXG4gKiBAcmV0dXJuIHtudW1iZXJ9IGJvcmRlcnMgLSBUaGUgYm9yZGVycyBzaXplIG9mIHRoZSBnaXZlbiBheGlzXG4gKi9cblxuZnVuY3Rpb24gZ2V0Qm9yZGVyc1NpemUoc3R5bGVzLCBheGlzKSB7XG4gIHZhciBzaWRlQSA9IGF4aXMgPT09ICd4JyA/ICdMZWZ0JyA6ICdUb3AnO1xuICB2YXIgc2lkZUIgPSBzaWRlQSA9PT0gJ0xlZnQnID8gJ1JpZ2h0JyA6ICdCb3R0b20nO1xuXG4gIHJldHVybiBwYXJzZUZsb2F0KHN0eWxlc1snYm9yZGVyJyArIHNpZGVBICsgJ1dpZHRoJ10sIDEwKSArIHBhcnNlRmxvYXQoc3R5bGVzWydib3JkZXInICsgc2lkZUIgKyAnV2lkdGgnXSwgMTApO1xufVxuXG5mdW5jdGlvbiBnZXRTaXplKGF4aXMsIGJvZHksIGh0bWwsIGNvbXB1dGVkU3R5bGUpIHtcbiAgcmV0dXJuIE1hdGgubWF4KGJvZHlbJ29mZnNldCcgKyBheGlzXSwgYm9keVsnc2Nyb2xsJyArIGF4aXNdLCBodG1sWydjbGllbnQnICsgYXhpc10sIGh0bWxbJ29mZnNldCcgKyBheGlzXSwgaHRtbFsnc2Nyb2xsJyArIGF4aXNdLCBpc0lFKDEwKSA/IGh0bWxbJ29mZnNldCcgKyBheGlzXSArIGNvbXB1dGVkU3R5bGVbJ21hcmdpbicgKyAoYXhpcyA9PT0gJ0hlaWdodCcgPyAnVG9wJyA6ICdMZWZ0JyldICsgY29tcHV0ZWRTdHlsZVsnbWFyZ2luJyArIChheGlzID09PSAnSGVpZ2h0JyA/ICdCb3R0b20nIDogJ1JpZ2h0JyldIDogMCk7XG59XG5cbmZ1bmN0aW9uIGdldFdpbmRvd1NpemVzKCkge1xuICB2YXIgYm9keSA9IGRvY3VtZW50LmJvZHk7XG4gIHZhciBodG1sID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICB2YXIgY29tcHV0ZWRTdHlsZSA9IGlzSUUoMTApICYmIGdldENvbXB1dGVkU3R5bGUoaHRtbCk7XG5cbiAgcmV0dXJuIHtcbiAgICBoZWlnaHQ6IGdldFNpemUoJ0hlaWdodCcsIGJvZHksIGh0bWwsIGNvbXB1dGVkU3R5bGUpLFxuICAgIHdpZHRoOiBnZXRTaXplKCdXaWR0aCcsIGJvZHksIGh0bWwsIGNvbXB1dGVkU3R5bGUpXG4gIH07XG59XG5cbnZhciBjbGFzc0NhbGxDaGVjayA9IGZ1bmN0aW9uIChpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtcbiAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xuICB9XG59O1xuXG52YXIgY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07XG4gICAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG4gICAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7XG4gICAgICBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gICAgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtcbiAgICBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtcbiAgICByZXR1cm4gQ29uc3RydWN0b3I7XG4gIH07XG59KCk7XG5cblxuXG5cblxudmFyIGRlZmluZVByb3BlcnR5ID0gZnVuY3Rpb24gKG9iaiwga2V5LCB2YWx1ZSkge1xuICBpZiAoa2V5IGluIG9iaikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgb2JqW2tleV0gPSB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiBvYmo7XG59O1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuXG4gICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufTtcblxuLyoqXG4gKiBHaXZlbiBlbGVtZW50IG9mZnNldHMsIGdlbmVyYXRlIGFuIG91dHB1dCBzaW1pbGFyIHRvIGdldEJvdW5kaW5nQ2xpZW50UmVjdFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IG9mZnNldHNcbiAqIEByZXR1cm5zIHtPYmplY3R9IENsaWVudFJlY3QgbGlrZSBvdXRwdXRcbiAqL1xuZnVuY3Rpb24gZ2V0Q2xpZW50UmVjdChvZmZzZXRzKSB7XG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgb2Zmc2V0cywge1xuICAgIHJpZ2h0OiBvZmZzZXRzLmxlZnQgKyBvZmZzZXRzLndpZHRoLFxuICAgIGJvdHRvbTogb2Zmc2V0cy50b3AgKyBvZmZzZXRzLmhlaWdodFxuICB9KTtcbn1cblxuLyoqXG4gKiBHZXQgYm91bmRpbmcgY2xpZW50IHJlY3Qgb2YgZ2l2ZW4gZWxlbWVudFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWxlbWVudFxuICogQHJldHVybiB7T2JqZWN0fSBjbGllbnQgcmVjdFxuICovXG5mdW5jdGlvbiBnZXRCb3VuZGluZ0NsaWVudFJlY3QoZWxlbWVudCkge1xuICB2YXIgcmVjdCA9IHt9O1xuXG4gIC8vIElFMTAgMTAgRklYOiBQbGVhc2UsIGRvbid0IGFzaywgdGhlIGVsZW1lbnQgaXNuJ3RcbiAgLy8gY29uc2lkZXJlZCBpbiBET00gaW4gc29tZSBjaXJjdW1zdGFuY2VzLi4uXG4gIC8vIFRoaXMgaXNuJ3QgcmVwcm9kdWNpYmxlIGluIElFMTAgY29tcGF0aWJpbGl0eSBtb2RlIG9mIElFMTFcbiAgdHJ5IHtcbiAgICBpZiAoaXNJRSgxMCkpIHtcbiAgICAgIHJlY3QgPSBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgdmFyIHNjcm9sbFRvcCA9IGdldFNjcm9sbChlbGVtZW50LCAndG9wJyk7XG4gICAgICB2YXIgc2Nyb2xsTGVmdCA9IGdldFNjcm9sbChlbGVtZW50LCAnbGVmdCcpO1xuICAgICAgcmVjdC50b3AgKz0gc2Nyb2xsVG9wO1xuICAgICAgcmVjdC5sZWZ0ICs9IHNjcm9sbExlZnQ7XG4gICAgICByZWN0LmJvdHRvbSArPSBzY3JvbGxUb3A7XG4gICAgICByZWN0LnJpZ2h0ICs9IHNjcm9sbExlZnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlY3QgPSBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIH1cbiAgfSBjYXRjaCAoZSkge31cblxuICB2YXIgcmVzdWx0ID0ge1xuICAgIGxlZnQ6IHJlY3QubGVmdCxcbiAgICB0b3A6IHJlY3QudG9wLFxuICAgIHdpZHRoOiByZWN0LnJpZ2h0IC0gcmVjdC5sZWZ0LFxuICAgIGhlaWdodDogcmVjdC5ib3R0b20gLSByZWN0LnRvcFxuICB9O1xuXG4gIC8vIHN1YnRyYWN0IHNjcm9sbGJhciBzaXplIGZyb20gc2l6ZXNcbiAgdmFyIHNpemVzID0gZWxlbWVudC5ub2RlTmFtZSA9PT0gJ0hUTUwnID8gZ2V0V2luZG93U2l6ZXMoKSA6IHt9O1xuICB2YXIgd2lkdGggPSBzaXplcy53aWR0aCB8fCBlbGVtZW50LmNsaWVudFdpZHRoIHx8IHJlc3VsdC5yaWdodCAtIHJlc3VsdC5sZWZ0O1xuICB2YXIgaGVpZ2h0ID0gc2l6ZXMuaGVpZ2h0IHx8IGVsZW1lbnQuY2xpZW50SGVpZ2h0IHx8IHJlc3VsdC5ib3R0b20gLSByZXN1bHQudG9wO1xuXG4gIHZhciBob3JpelNjcm9sbGJhciA9IGVsZW1lbnQub2Zmc2V0V2lkdGggLSB3aWR0aDtcbiAgdmFyIHZlcnRTY3JvbGxiYXIgPSBlbGVtZW50Lm9mZnNldEhlaWdodCAtIGhlaWdodDtcblxuICAvLyBpZiBhbiBoeXBvdGhldGljYWwgc2Nyb2xsYmFyIGlzIGRldGVjdGVkLCB3ZSBtdXN0IGJlIHN1cmUgaXQncyBub3QgYSBgYm9yZGVyYFxuICAvLyB3ZSBtYWtlIHRoaXMgY2hlY2sgY29uZGl0aW9uYWwgZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnNcbiAgaWYgKGhvcml6U2Nyb2xsYmFyIHx8IHZlcnRTY3JvbGxiYXIpIHtcbiAgICB2YXIgc3R5bGVzID0gZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5KGVsZW1lbnQpO1xuICAgIGhvcml6U2Nyb2xsYmFyIC09IGdldEJvcmRlcnNTaXplKHN0eWxlcywgJ3gnKTtcbiAgICB2ZXJ0U2Nyb2xsYmFyIC09IGdldEJvcmRlcnNTaXplKHN0eWxlcywgJ3knKTtcblxuICAgIHJlc3VsdC53aWR0aCAtPSBob3JpelNjcm9sbGJhcjtcbiAgICByZXN1bHQuaGVpZ2h0IC09IHZlcnRTY3JvbGxiYXI7XG4gIH1cblxuICByZXR1cm4gZ2V0Q2xpZW50UmVjdChyZXN1bHQpO1xufVxuXG5mdW5jdGlvbiBnZXRPZmZzZXRSZWN0UmVsYXRpdmVUb0FyYml0cmFyeU5vZGUoY2hpbGRyZW4sIHBhcmVudCkge1xuICB2YXIgZml4ZWRQb3NpdGlvbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogZmFsc2U7XG5cbiAgdmFyIGlzSUUxMCA9IGlzSUUoMTApO1xuICB2YXIgaXNIVE1MID0gcGFyZW50Lm5vZGVOYW1lID09PSAnSFRNTCc7XG4gIHZhciBjaGlsZHJlblJlY3QgPSBnZXRCb3VuZGluZ0NsaWVudFJlY3QoY2hpbGRyZW4pO1xuICB2YXIgcGFyZW50UmVjdCA9IGdldEJvdW5kaW5nQ2xpZW50UmVjdChwYXJlbnQpO1xuICB2YXIgc2Nyb2xsUGFyZW50ID0gZ2V0U2Nyb2xsUGFyZW50KGNoaWxkcmVuKTtcblxuICB2YXIgc3R5bGVzID0gZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5KHBhcmVudCk7XG4gIHZhciBib3JkZXJUb3BXaWR0aCA9IHBhcnNlRmxvYXQoc3R5bGVzLmJvcmRlclRvcFdpZHRoLCAxMCk7XG4gIHZhciBib3JkZXJMZWZ0V2lkdGggPSBwYXJzZUZsb2F0KHN0eWxlcy5ib3JkZXJMZWZ0V2lkdGgsIDEwKTtcblxuICAvLyBJbiBjYXNlcyB3aGVyZSB0aGUgcGFyZW50IGlzIGZpeGVkLCB3ZSBtdXN0IGlnbm9yZSBuZWdhdGl2ZSBzY3JvbGwgaW4gb2Zmc2V0IGNhbGNcbiAgaWYgKGZpeGVkUG9zaXRpb24gJiYgcGFyZW50Lm5vZGVOYW1lID09PSAnSFRNTCcpIHtcbiAgICBwYXJlbnRSZWN0LnRvcCA9IE1hdGgubWF4KHBhcmVudFJlY3QudG9wLCAwKTtcbiAgICBwYXJlbnRSZWN0LmxlZnQgPSBNYXRoLm1heChwYXJlbnRSZWN0LmxlZnQsIDApO1xuICB9XG4gIHZhciBvZmZzZXRzID0gZ2V0Q2xpZW50UmVjdCh7XG4gICAgdG9wOiBjaGlsZHJlblJlY3QudG9wIC0gcGFyZW50UmVjdC50b3AgLSBib3JkZXJUb3BXaWR0aCxcbiAgICBsZWZ0OiBjaGlsZHJlblJlY3QubGVmdCAtIHBhcmVudFJlY3QubGVmdCAtIGJvcmRlckxlZnRXaWR0aCxcbiAgICB3aWR0aDogY2hpbGRyZW5SZWN0LndpZHRoLFxuICAgIGhlaWdodDogY2hpbGRyZW5SZWN0LmhlaWdodFxuICB9KTtcbiAgb2Zmc2V0cy5tYXJnaW5Ub3AgPSAwO1xuICBvZmZzZXRzLm1hcmdpbkxlZnQgPSAwO1xuXG4gIC8vIFN1YnRyYWN0IG1hcmdpbnMgb2YgZG9jdW1lbnRFbGVtZW50IGluIGNhc2UgaXQncyBiZWluZyB1c2VkIGFzIHBhcmVudFxuICAvLyB3ZSBkbyB0aGlzIG9ubHkgb24gSFRNTCBiZWNhdXNlIGl0J3MgdGhlIG9ubHkgZWxlbWVudCB0aGF0IGJlaGF2ZXNcbiAgLy8gZGlmZmVyZW50bHkgd2hlbiBtYXJnaW5zIGFyZSBhcHBsaWVkIHRvIGl0LiBUaGUgbWFyZ2lucyBhcmUgaW5jbHVkZWQgaW5cbiAgLy8gdGhlIGJveCBvZiB0aGUgZG9jdW1lbnRFbGVtZW50LCBpbiB0aGUgb3RoZXIgY2FzZXMgbm90LlxuICBpZiAoIWlzSUUxMCAmJiBpc0hUTUwpIHtcbiAgICB2YXIgbWFyZ2luVG9wID0gcGFyc2VGbG9hdChzdHlsZXMubWFyZ2luVG9wLCAxMCk7XG4gICAgdmFyIG1hcmdpbkxlZnQgPSBwYXJzZUZsb2F0KHN0eWxlcy5tYXJnaW5MZWZ0LCAxMCk7XG5cbiAgICBvZmZzZXRzLnRvcCAtPSBib3JkZXJUb3BXaWR0aCAtIG1hcmdpblRvcDtcbiAgICBvZmZzZXRzLmJvdHRvbSAtPSBib3JkZXJUb3BXaWR0aCAtIG1hcmdpblRvcDtcbiAgICBvZmZzZXRzLmxlZnQgLT0gYm9yZGVyTGVmdFdpZHRoIC0gbWFyZ2luTGVmdDtcbiAgICBvZmZzZXRzLnJpZ2h0IC09IGJvcmRlckxlZnRXaWR0aCAtIG1hcmdpbkxlZnQ7XG5cbiAgICAvLyBBdHRhY2ggbWFyZ2luVG9wIGFuZCBtYXJnaW5MZWZ0IGJlY2F1c2UgaW4gc29tZSBjaXJjdW1zdGFuY2VzIHdlIG1heSBuZWVkIHRoZW1cbiAgICBvZmZzZXRzLm1hcmdpblRvcCA9IG1hcmdpblRvcDtcbiAgICBvZmZzZXRzLm1hcmdpbkxlZnQgPSBtYXJnaW5MZWZ0O1xuICB9XG5cbiAgaWYgKGlzSUUxMCAmJiAhZml4ZWRQb3NpdGlvbiA/IHBhcmVudC5jb250YWlucyhzY3JvbGxQYXJlbnQpIDogcGFyZW50ID09PSBzY3JvbGxQYXJlbnQgJiYgc2Nyb2xsUGFyZW50Lm5vZGVOYW1lICE9PSAnQk9EWScpIHtcbiAgICBvZmZzZXRzID0gaW5jbHVkZVNjcm9sbChvZmZzZXRzLCBwYXJlbnQpO1xuICB9XG5cbiAgcmV0dXJuIG9mZnNldHM7XG59XG5cbmZ1bmN0aW9uIGdldFZpZXdwb3J0T2Zmc2V0UmVjdFJlbGF0aXZlVG9BcnRiaXRyYXJ5Tm9kZShlbGVtZW50KSB7XG4gIHZhciBleGNsdWRlU2Nyb2xsID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBmYWxzZTtcblxuICB2YXIgaHRtbCA9IGVsZW1lbnQub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gIHZhciByZWxhdGl2ZU9mZnNldCA9IGdldE9mZnNldFJlY3RSZWxhdGl2ZVRvQXJiaXRyYXJ5Tm9kZShlbGVtZW50LCBodG1sKTtcbiAgdmFyIHdpZHRoID0gTWF0aC5tYXgoaHRtbC5jbGllbnRXaWR0aCwgd2luZG93LmlubmVyV2lkdGggfHwgMCk7XG4gIHZhciBoZWlnaHQgPSBNYXRoLm1heChodG1sLmNsaWVudEhlaWdodCwgd2luZG93LmlubmVySGVpZ2h0IHx8IDApO1xuXG4gIHZhciBzY3JvbGxUb3AgPSAhZXhjbHVkZVNjcm9sbCA/IGdldFNjcm9sbChodG1sKSA6IDA7XG4gIHZhciBzY3JvbGxMZWZ0ID0gIWV4Y2x1ZGVTY3JvbGwgPyBnZXRTY3JvbGwoaHRtbCwgJ2xlZnQnKSA6IDA7XG5cbiAgdmFyIG9mZnNldCA9IHtcbiAgICB0b3A6IHNjcm9sbFRvcCAtIHJlbGF0aXZlT2Zmc2V0LnRvcCArIHJlbGF0aXZlT2Zmc2V0Lm1hcmdpblRvcCxcbiAgICBsZWZ0OiBzY3JvbGxMZWZ0IC0gcmVsYXRpdmVPZmZzZXQubGVmdCArIHJlbGF0aXZlT2Zmc2V0Lm1hcmdpbkxlZnQsXG4gICAgd2lkdGg6IHdpZHRoLFxuICAgIGhlaWdodDogaGVpZ2h0XG4gIH07XG5cbiAgcmV0dXJuIGdldENsaWVudFJlY3Qob2Zmc2V0KTtcbn1cblxuLyoqXG4gKiBDaGVjayBpZiB0aGUgZ2l2ZW4gZWxlbWVudCBpcyBmaXhlZCBvciBpcyBpbnNpZGUgYSBmaXhlZCBwYXJlbnRcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudFxuICogQGFyZ3VtZW50IHtFbGVtZW50fSBjdXN0b21Db250YWluZXJcbiAqIEByZXR1cm5zIHtCb29sZWFufSBhbnN3ZXIgdG8gXCJpc0ZpeGVkP1wiXG4gKi9cbmZ1bmN0aW9uIGlzRml4ZWQoZWxlbWVudCkge1xuICB2YXIgbm9kZU5hbWUgPSBlbGVtZW50Lm5vZGVOYW1lO1xuICBpZiAobm9kZU5hbWUgPT09ICdCT0RZJyB8fCBub2RlTmFtZSA9PT0gJ0hUTUwnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmIChnZXRTdHlsZUNvbXB1dGVkUHJvcGVydHkoZWxlbWVudCwgJ3Bvc2l0aW9uJykgPT09ICdmaXhlZCcpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gaXNGaXhlZChnZXRQYXJlbnROb2RlKGVsZW1lbnQpKTtcbn1cblxuLyoqXG4gKiBGaW5kcyB0aGUgZmlyc3QgcGFyZW50IG9mIGFuIGVsZW1lbnQgdGhhdCBoYXMgYSB0cmFuc2Zvcm1lZCBwcm9wZXJ0eSBkZWZpbmVkXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IGVsZW1lbnRcbiAqIEByZXR1cm5zIHtFbGVtZW50fSBmaXJzdCB0cmFuc2Zvcm1lZCBwYXJlbnQgb3IgZG9jdW1lbnRFbGVtZW50XG4gKi9cblxuZnVuY3Rpb24gZ2V0Rml4ZWRQb3NpdGlvbk9mZnNldFBhcmVudChlbGVtZW50KSB7XG4gIC8vIFRoaXMgY2hlY2sgaXMgbmVlZGVkIHRvIGF2b2lkIGVycm9ycyBpbiBjYXNlIG9uZSBvZiB0aGUgZWxlbWVudHMgaXNuJ3QgZGVmaW5lZCBmb3IgYW55IHJlYXNvblxuICBpZiAoIWVsZW1lbnQgfHwgIWVsZW1lbnQucGFyZW50RWxlbWVudCB8fCBpc0lFKCkpIHtcbiAgICByZXR1cm4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICB9XG4gIHZhciBlbCA9IGVsZW1lbnQucGFyZW50RWxlbWVudDtcbiAgd2hpbGUgKGVsICYmIGdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eShlbCwgJ3RyYW5zZm9ybScpID09PSAnbm9uZScpIHtcbiAgICBlbCA9IGVsLnBhcmVudEVsZW1lbnQ7XG4gIH1cbiAgcmV0dXJuIGVsIHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbn1cblxuLyoqXG4gKiBDb21wdXRlZCB0aGUgYm91bmRhcmllcyBsaW1pdHMgYW5kIHJldHVybiB0aGVtXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBwb3BwZXJcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IHJlZmVyZW5jZVxuICogQHBhcmFtIHtudW1iZXJ9IHBhZGRpbmdcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGJvdW5kYXJpZXNFbGVtZW50IC0gRWxlbWVudCB1c2VkIHRvIGRlZmluZSB0aGUgYm91bmRhcmllc1xuICogQHBhcmFtIHtCb29sZWFufSBmaXhlZFBvc2l0aW9uIC0gSXMgaW4gZml4ZWQgcG9zaXRpb24gbW9kZVxuICogQHJldHVybnMge09iamVjdH0gQ29vcmRpbmF0ZXMgb2YgdGhlIGJvdW5kYXJpZXNcbiAqL1xuZnVuY3Rpb24gZ2V0Qm91bmRhcmllcyhwb3BwZXIsIHJlZmVyZW5jZSwgcGFkZGluZywgYm91bmRhcmllc0VsZW1lbnQpIHtcbiAgdmFyIGZpeGVkUG9zaXRpb24gPSBhcmd1bWVudHMubGVuZ3RoID4gNCAmJiBhcmd1bWVudHNbNF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1s0XSA6IGZhbHNlO1xuXG4gIC8vIE5PVEU6IDEgRE9NIGFjY2VzcyBoZXJlXG5cbiAgdmFyIGJvdW5kYXJpZXMgPSB7IHRvcDogMCwgbGVmdDogMCB9O1xuICB2YXIgb2Zmc2V0UGFyZW50ID0gZml4ZWRQb3NpdGlvbiA/IGdldEZpeGVkUG9zaXRpb25PZmZzZXRQYXJlbnQocG9wcGVyKSA6IGZpbmRDb21tb25PZmZzZXRQYXJlbnQocG9wcGVyLCByZWZlcmVuY2UpO1xuXG4gIC8vIEhhbmRsZSB2aWV3cG9ydCBjYXNlXG4gIGlmIChib3VuZGFyaWVzRWxlbWVudCA9PT0gJ3ZpZXdwb3J0Jykge1xuICAgIGJvdW5kYXJpZXMgPSBnZXRWaWV3cG9ydE9mZnNldFJlY3RSZWxhdGl2ZVRvQXJ0Yml0cmFyeU5vZGUob2Zmc2V0UGFyZW50LCBmaXhlZFBvc2l0aW9uKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBIYW5kbGUgb3RoZXIgY2FzZXMgYmFzZWQgb24gRE9NIGVsZW1lbnQgdXNlZCBhcyBib3VuZGFyaWVzXG4gICAgdmFyIGJvdW5kYXJpZXNOb2RlID0gdm9pZCAwO1xuICAgIGlmIChib3VuZGFyaWVzRWxlbWVudCA9PT0gJ3Njcm9sbFBhcmVudCcpIHtcbiAgICAgIGJvdW5kYXJpZXNOb2RlID0gZ2V0U2Nyb2xsUGFyZW50KGdldFBhcmVudE5vZGUocmVmZXJlbmNlKSk7XG4gICAgICBpZiAoYm91bmRhcmllc05vZGUubm9kZU5hbWUgPT09ICdCT0RZJykge1xuICAgICAgICBib3VuZGFyaWVzTm9kZSA9IHBvcHBlci5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGJvdW5kYXJpZXNFbGVtZW50ID09PSAnd2luZG93Jykge1xuICAgICAgYm91bmRhcmllc05vZGUgPSBwb3BwZXIub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGJvdW5kYXJpZXNOb2RlID0gYm91bmRhcmllc0VsZW1lbnQ7XG4gICAgfVxuXG4gICAgdmFyIG9mZnNldHMgPSBnZXRPZmZzZXRSZWN0UmVsYXRpdmVUb0FyYml0cmFyeU5vZGUoYm91bmRhcmllc05vZGUsIG9mZnNldFBhcmVudCwgZml4ZWRQb3NpdGlvbik7XG5cbiAgICAvLyBJbiBjYXNlIG9mIEhUTUwsIHdlIG5lZWQgYSBkaWZmZXJlbnQgY29tcHV0YXRpb25cbiAgICBpZiAoYm91bmRhcmllc05vZGUubm9kZU5hbWUgPT09ICdIVE1MJyAmJiAhaXNGaXhlZChvZmZzZXRQYXJlbnQpKSB7XG4gICAgICB2YXIgX2dldFdpbmRvd1NpemVzID0gZ2V0V2luZG93U2l6ZXMoKSxcbiAgICAgICAgICBoZWlnaHQgPSBfZ2V0V2luZG93U2l6ZXMuaGVpZ2h0LFxuICAgICAgICAgIHdpZHRoID0gX2dldFdpbmRvd1NpemVzLndpZHRoO1xuXG4gICAgICBib3VuZGFyaWVzLnRvcCArPSBvZmZzZXRzLnRvcCAtIG9mZnNldHMubWFyZ2luVG9wO1xuICAgICAgYm91bmRhcmllcy5ib3R0b20gPSBoZWlnaHQgKyBvZmZzZXRzLnRvcDtcbiAgICAgIGJvdW5kYXJpZXMubGVmdCArPSBvZmZzZXRzLmxlZnQgLSBvZmZzZXRzLm1hcmdpbkxlZnQ7XG4gICAgICBib3VuZGFyaWVzLnJpZ2h0ID0gd2lkdGggKyBvZmZzZXRzLmxlZnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGZvciBhbGwgdGhlIG90aGVyIERPTSBlbGVtZW50cywgdGhpcyBvbmUgaXMgZ29vZFxuICAgICAgYm91bmRhcmllcyA9IG9mZnNldHM7XG4gICAgfVxuICB9XG5cbiAgLy8gQWRkIHBhZGRpbmdzXG4gIGJvdW5kYXJpZXMubGVmdCArPSBwYWRkaW5nO1xuICBib3VuZGFyaWVzLnRvcCArPSBwYWRkaW5nO1xuICBib3VuZGFyaWVzLnJpZ2h0IC09IHBhZGRpbmc7XG4gIGJvdW5kYXJpZXMuYm90dG9tIC09IHBhZGRpbmc7XG5cbiAgcmV0dXJuIGJvdW5kYXJpZXM7XG59XG5cbmZ1bmN0aW9uIGdldEFyZWEoX3JlZikge1xuICB2YXIgd2lkdGggPSBfcmVmLndpZHRoLFxuICAgICAgaGVpZ2h0ID0gX3JlZi5oZWlnaHQ7XG5cbiAgcmV0dXJuIHdpZHRoICogaGVpZ2h0O1xufVxuXG4vKipcbiAqIFV0aWxpdHkgdXNlZCB0byB0cmFuc2Zvcm0gdGhlIGBhdXRvYCBwbGFjZW1lbnQgdG8gdGhlIHBsYWNlbWVudCB3aXRoIG1vcmVcbiAqIGF2YWlsYWJsZSBzcGFjZS5cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSB1cGRhdGUgbWV0aG9kXG4gKiBAYXJndW1lbnQge09iamVjdH0gb3B0aW9ucyAtIE1vZGlmaWVycyBjb25maWd1cmF0aW9uIGFuZCBvcHRpb25zXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgZGF0YSBvYmplY3QsIHByb3Blcmx5IG1vZGlmaWVkXG4gKi9cbmZ1bmN0aW9uIGNvbXB1dGVBdXRvUGxhY2VtZW50KHBsYWNlbWVudCwgcmVmUmVjdCwgcG9wcGVyLCByZWZlcmVuY2UsIGJvdW5kYXJpZXNFbGVtZW50KSB7XG4gIHZhciBwYWRkaW5nID0gYXJndW1lbnRzLmxlbmd0aCA+IDUgJiYgYXJndW1lbnRzWzVdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbNV0gOiAwO1xuXG4gIGlmIChwbGFjZW1lbnQuaW5kZXhPZignYXV0bycpID09PSAtMSkge1xuICAgIHJldHVybiBwbGFjZW1lbnQ7XG4gIH1cblxuICB2YXIgYm91bmRhcmllcyA9IGdldEJvdW5kYXJpZXMocG9wcGVyLCByZWZlcmVuY2UsIHBhZGRpbmcsIGJvdW5kYXJpZXNFbGVtZW50KTtcblxuICB2YXIgcmVjdHMgPSB7XG4gICAgdG9wOiB7XG4gICAgICB3aWR0aDogYm91bmRhcmllcy53aWR0aCxcbiAgICAgIGhlaWdodDogcmVmUmVjdC50b3AgLSBib3VuZGFyaWVzLnRvcFxuICAgIH0sXG4gICAgcmlnaHQ6IHtcbiAgICAgIHdpZHRoOiBib3VuZGFyaWVzLnJpZ2h0IC0gcmVmUmVjdC5yaWdodCxcbiAgICAgIGhlaWdodDogYm91bmRhcmllcy5oZWlnaHRcbiAgICB9LFxuICAgIGJvdHRvbToge1xuICAgICAgd2lkdGg6IGJvdW5kYXJpZXMud2lkdGgsXG4gICAgICBoZWlnaHQ6IGJvdW5kYXJpZXMuYm90dG9tIC0gcmVmUmVjdC5ib3R0b21cbiAgICB9LFxuICAgIGxlZnQ6IHtcbiAgICAgIHdpZHRoOiByZWZSZWN0LmxlZnQgLSBib3VuZGFyaWVzLmxlZnQsXG4gICAgICBoZWlnaHQ6IGJvdW5kYXJpZXMuaGVpZ2h0XG4gICAgfVxuICB9O1xuXG4gIHZhciBzb3J0ZWRBcmVhcyA9IE9iamVjdC5rZXlzKHJlY3RzKS5tYXAoZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiBfZXh0ZW5kcyh7XG4gICAgICBrZXk6IGtleVxuICAgIH0sIHJlY3RzW2tleV0sIHtcbiAgICAgIGFyZWE6IGdldEFyZWEocmVjdHNba2V5XSlcbiAgICB9KTtcbiAgfSkuc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgIHJldHVybiBiLmFyZWEgLSBhLmFyZWE7XG4gIH0pO1xuXG4gIHZhciBmaWx0ZXJlZEFyZWFzID0gc29ydGVkQXJlYXMuZmlsdGVyKGZ1bmN0aW9uIChfcmVmMikge1xuICAgIHZhciB3aWR0aCA9IF9yZWYyLndpZHRoLFxuICAgICAgICBoZWlnaHQgPSBfcmVmMi5oZWlnaHQ7XG4gICAgcmV0dXJuIHdpZHRoID49IHBvcHBlci5jbGllbnRXaWR0aCAmJiBoZWlnaHQgPj0gcG9wcGVyLmNsaWVudEhlaWdodDtcbiAgfSk7XG5cbiAgdmFyIGNvbXB1dGVkUGxhY2VtZW50ID0gZmlsdGVyZWRBcmVhcy5sZW5ndGggPiAwID8gZmlsdGVyZWRBcmVhc1swXS5rZXkgOiBzb3J0ZWRBcmVhc1swXS5rZXk7XG5cbiAgdmFyIHZhcmlhdGlvbiA9IHBsYWNlbWVudC5zcGxpdCgnLScpWzFdO1xuXG4gIHJldHVybiBjb21wdXRlZFBsYWNlbWVudCArICh2YXJpYXRpb24gPyAnLScgKyB2YXJpYXRpb24gOiAnJyk7XG59XG5cbi8qKlxuICogR2V0IG9mZnNldHMgdG8gdGhlIHJlZmVyZW5jZSBlbGVtZW50XG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcGFyYW0ge09iamVjdH0gc3RhdGVcbiAqIEBwYXJhbSB7RWxlbWVudH0gcG9wcGVyIC0gdGhlIHBvcHBlciBlbGVtZW50XG4gKiBAcGFyYW0ge0VsZW1lbnR9IHJlZmVyZW5jZSAtIHRoZSByZWZlcmVuY2UgZWxlbWVudCAodGhlIHBvcHBlciB3aWxsIGJlIHJlbGF0aXZlIHRvIHRoaXMpXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGZpeGVkUG9zaXRpb24gLSBpcyBpbiBmaXhlZCBwb3NpdGlvbiBtb2RlXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBBbiBvYmplY3QgY29udGFpbmluZyB0aGUgb2Zmc2V0cyB3aGljaCB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIHBvcHBlclxuICovXG5mdW5jdGlvbiBnZXRSZWZlcmVuY2VPZmZzZXRzKHN0YXRlLCBwb3BwZXIsIHJlZmVyZW5jZSkge1xuICB2YXIgZml4ZWRQb3NpdGlvbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIGFyZ3VtZW50c1szXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzNdIDogbnVsbDtcblxuICB2YXIgY29tbW9uT2Zmc2V0UGFyZW50ID0gZml4ZWRQb3NpdGlvbiA/IGdldEZpeGVkUG9zaXRpb25PZmZzZXRQYXJlbnQocG9wcGVyKSA6IGZpbmRDb21tb25PZmZzZXRQYXJlbnQocG9wcGVyLCByZWZlcmVuY2UpO1xuICByZXR1cm4gZ2V0T2Zmc2V0UmVjdFJlbGF0aXZlVG9BcmJpdHJhcnlOb2RlKHJlZmVyZW5jZSwgY29tbW9uT2Zmc2V0UGFyZW50LCBmaXhlZFBvc2l0aW9uKTtcbn1cblxuLyoqXG4gKiBHZXQgdGhlIG91dGVyIHNpemVzIG9mIHRoZSBnaXZlbiBlbGVtZW50IChvZmZzZXQgc2l6ZSArIG1hcmdpbnMpXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IGVsZW1lbnRcbiAqIEByZXR1cm5zIHtPYmplY3R9IG9iamVjdCBjb250YWluaW5nIHdpZHRoIGFuZCBoZWlnaHQgcHJvcGVydGllc1xuICovXG5mdW5jdGlvbiBnZXRPdXRlclNpemVzKGVsZW1lbnQpIHtcbiAgdmFyIHN0eWxlcyA9IGdldENvbXB1dGVkU3R5bGUoZWxlbWVudCk7XG4gIHZhciB4ID0gcGFyc2VGbG9hdChzdHlsZXMubWFyZ2luVG9wKSArIHBhcnNlRmxvYXQoc3R5bGVzLm1hcmdpbkJvdHRvbSk7XG4gIHZhciB5ID0gcGFyc2VGbG9hdChzdHlsZXMubWFyZ2luTGVmdCkgKyBwYXJzZUZsb2F0KHN0eWxlcy5tYXJnaW5SaWdodCk7XG4gIHZhciByZXN1bHQgPSB7XG4gICAgd2lkdGg6IGVsZW1lbnQub2Zmc2V0V2lkdGggKyB5LFxuICAgIGhlaWdodDogZWxlbWVudC5vZmZzZXRIZWlnaHQgKyB4XG4gIH07XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogR2V0IHRoZSBvcHBvc2l0ZSBwbGFjZW1lbnQgb2YgdGhlIGdpdmVuIG9uZVxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtTdHJpbmd9IHBsYWNlbWVudFxuICogQHJldHVybnMge1N0cmluZ30gZmxpcHBlZCBwbGFjZW1lbnRcbiAqL1xuZnVuY3Rpb24gZ2V0T3Bwb3NpdGVQbGFjZW1lbnQocGxhY2VtZW50KSB7XG4gIHZhciBoYXNoID0geyBsZWZ0OiAncmlnaHQnLCByaWdodDogJ2xlZnQnLCBib3R0b206ICd0b3AnLCB0b3A6ICdib3R0b20nIH07XG4gIHJldHVybiBwbGFjZW1lbnQucmVwbGFjZSgvbGVmdHxyaWdodHxib3R0b218dG9wL2csIGZ1bmN0aW9uIChtYXRjaGVkKSB7XG4gICAgcmV0dXJuIGhhc2hbbWF0Y2hlZF07XG4gIH0pO1xufVxuXG4vKipcbiAqIEdldCBvZmZzZXRzIHRvIHRoZSBwb3BwZXJcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBwYXJhbSB7T2JqZWN0fSBwb3NpdGlvbiAtIENTUyBwb3NpdGlvbiB0aGUgUG9wcGVyIHdpbGwgZ2V0IGFwcGxpZWRcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IHBvcHBlciAtIHRoZSBwb3BwZXIgZWxlbWVudFxuICogQHBhcmFtIHtPYmplY3R9IHJlZmVyZW5jZU9mZnNldHMgLSB0aGUgcmVmZXJlbmNlIG9mZnNldHMgKHRoZSBwb3BwZXIgd2lsbCBiZSByZWxhdGl2ZSB0byB0aGlzKVxuICogQHBhcmFtIHtTdHJpbmd9IHBsYWNlbWVudCAtIG9uZSBvZiB0aGUgdmFsaWQgcGxhY2VtZW50IG9wdGlvbnNcbiAqIEByZXR1cm5zIHtPYmplY3R9IHBvcHBlck9mZnNldHMgLSBBbiBvYmplY3QgY29udGFpbmluZyB0aGUgb2Zmc2V0cyB3aGljaCB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIHBvcHBlclxuICovXG5mdW5jdGlvbiBnZXRQb3BwZXJPZmZzZXRzKHBvcHBlciwgcmVmZXJlbmNlT2Zmc2V0cywgcGxhY2VtZW50KSB7XG4gIHBsYWNlbWVudCA9IHBsYWNlbWVudC5zcGxpdCgnLScpWzBdO1xuXG4gIC8vIEdldCBwb3BwZXIgbm9kZSBzaXplc1xuICB2YXIgcG9wcGVyUmVjdCA9IGdldE91dGVyU2l6ZXMocG9wcGVyKTtcblxuICAvLyBBZGQgcG9zaXRpb24sIHdpZHRoIGFuZCBoZWlnaHQgdG8gb3VyIG9mZnNldHMgb2JqZWN0XG4gIHZhciBwb3BwZXJPZmZzZXRzID0ge1xuICAgIHdpZHRoOiBwb3BwZXJSZWN0LndpZHRoLFxuICAgIGhlaWdodDogcG9wcGVyUmVjdC5oZWlnaHRcbiAgfTtcblxuICAvLyBkZXBlbmRpbmcgYnkgdGhlIHBvcHBlciBwbGFjZW1lbnQgd2UgaGF2ZSB0byBjb21wdXRlIGl0cyBvZmZzZXRzIHNsaWdodGx5IGRpZmZlcmVudGx5XG4gIHZhciBpc0hvcml6ID0gWydyaWdodCcsICdsZWZ0J10uaW5kZXhPZihwbGFjZW1lbnQpICE9PSAtMTtcbiAgdmFyIG1haW5TaWRlID0gaXNIb3JpeiA/ICd0b3AnIDogJ2xlZnQnO1xuICB2YXIgc2Vjb25kYXJ5U2lkZSA9IGlzSG9yaXogPyAnbGVmdCcgOiAndG9wJztcbiAgdmFyIG1lYXN1cmVtZW50ID0gaXNIb3JpeiA/ICdoZWlnaHQnIDogJ3dpZHRoJztcbiAgdmFyIHNlY29uZGFyeU1lYXN1cmVtZW50ID0gIWlzSG9yaXogPyAnaGVpZ2h0JyA6ICd3aWR0aCc7XG5cbiAgcG9wcGVyT2Zmc2V0c1ttYWluU2lkZV0gPSByZWZlcmVuY2VPZmZzZXRzW21haW5TaWRlXSArIHJlZmVyZW5jZU9mZnNldHNbbWVhc3VyZW1lbnRdIC8gMiAtIHBvcHBlclJlY3RbbWVhc3VyZW1lbnRdIC8gMjtcbiAgaWYgKHBsYWNlbWVudCA9PT0gc2Vjb25kYXJ5U2lkZSkge1xuICAgIHBvcHBlck9mZnNldHNbc2Vjb25kYXJ5U2lkZV0gPSByZWZlcmVuY2VPZmZzZXRzW3NlY29uZGFyeVNpZGVdIC0gcG9wcGVyUmVjdFtzZWNvbmRhcnlNZWFzdXJlbWVudF07XG4gIH0gZWxzZSB7XG4gICAgcG9wcGVyT2Zmc2V0c1tzZWNvbmRhcnlTaWRlXSA9IHJlZmVyZW5jZU9mZnNldHNbZ2V0T3Bwb3NpdGVQbGFjZW1lbnQoc2Vjb25kYXJ5U2lkZSldO1xuICB9XG5cbiAgcmV0dXJuIHBvcHBlck9mZnNldHM7XG59XG5cbi8qKlxuICogTWltaWNzIHRoZSBgZmluZGAgbWV0aG9kIG9mIEFycmF5XG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0FycmF5fSBhcnJcbiAqIEBhcmd1bWVudCBwcm9wXG4gKiBAYXJndW1lbnQgdmFsdWVcbiAqIEByZXR1cm5zIGluZGV4IG9yIC0xXG4gKi9cbmZ1bmN0aW9uIGZpbmQoYXJyLCBjaGVjaykge1xuICAvLyB1c2UgbmF0aXZlIGZpbmQgaWYgc3VwcG9ydGVkXG4gIGlmIChBcnJheS5wcm90b3R5cGUuZmluZCkge1xuICAgIHJldHVybiBhcnIuZmluZChjaGVjayk7XG4gIH1cblxuICAvLyB1c2UgYGZpbHRlcmAgdG8gb2J0YWluIHRoZSBzYW1lIGJlaGF2aW9yIG9mIGBmaW5kYFxuICByZXR1cm4gYXJyLmZpbHRlcihjaGVjaylbMF07XG59XG5cbi8qKlxuICogUmV0dXJuIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hpbmcgb2JqZWN0XG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0FycmF5fSBhcnJcbiAqIEBhcmd1bWVudCBwcm9wXG4gKiBAYXJndW1lbnQgdmFsdWVcbiAqIEByZXR1cm5zIGluZGV4IG9yIC0xXG4gKi9cbmZ1bmN0aW9uIGZpbmRJbmRleChhcnIsIHByb3AsIHZhbHVlKSB7XG4gIC8vIHVzZSBuYXRpdmUgZmluZEluZGV4IGlmIHN1cHBvcnRlZFxuICBpZiAoQXJyYXkucHJvdG90eXBlLmZpbmRJbmRleCkge1xuICAgIHJldHVybiBhcnIuZmluZEluZGV4KGZ1bmN0aW9uIChjdXIpIHtcbiAgICAgIHJldHVybiBjdXJbcHJvcF0gPT09IHZhbHVlO1xuICAgIH0pO1xuICB9XG5cbiAgLy8gdXNlIGBmaW5kYCArIGBpbmRleE9mYCBpZiBgZmluZEluZGV4YCBpc24ndCBzdXBwb3J0ZWRcbiAgdmFyIG1hdGNoID0gZmluZChhcnIsIGZ1bmN0aW9uIChvYmopIHtcbiAgICByZXR1cm4gb2JqW3Byb3BdID09PSB2YWx1ZTtcbiAgfSk7XG4gIHJldHVybiBhcnIuaW5kZXhPZihtYXRjaCk7XG59XG5cbi8qKlxuICogTG9vcCB0cm91Z2ggdGhlIGxpc3Qgb2YgbW9kaWZpZXJzIGFuZCBydW4gdGhlbSBpbiBvcmRlcixcbiAqIGVhY2ggb2YgdGhlbSB3aWxsIHRoZW4gZWRpdCB0aGUgZGF0YSBvYmplY3QuXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcGFyYW0ge2RhdGFPYmplY3R9IGRhdGFcbiAqIEBwYXJhbSB7QXJyYXl9IG1vZGlmaWVyc1xuICogQHBhcmFtIHtTdHJpbmd9IGVuZHMgLSBPcHRpb25hbCBtb2RpZmllciBuYW1lIHVzZWQgYXMgc3RvcHBlclxuICogQHJldHVybnMge2RhdGFPYmplY3R9XG4gKi9cbmZ1bmN0aW9uIHJ1bk1vZGlmaWVycyhtb2RpZmllcnMsIGRhdGEsIGVuZHMpIHtcbiAgdmFyIG1vZGlmaWVyc1RvUnVuID0gZW5kcyA9PT0gdW5kZWZpbmVkID8gbW9kaWZpZXJzIDogbW9kaWZpZXJzLnNsaWNlKDAsIGZpbmRJbmRleChtb2RpZmllcnMsICduYW1lJywgZW5kcykpO1xuXG4gIG1vZGlmaWVyc1RvUnVuLmZvckVhY2goZnVuY3Rpb24gKG1vZGlmaWVyKSB7XG4gICAgaWYgKG1vZGlmaWVyWydmdW5jdGlvbiddKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGRvdC1ub3RhdGlvblxuICAgICAgY29uc29sZS53YXJuKCdgbW9kaWZpZXIuZnVuY3Rpb25gIGlzIGRlcHJlY2F0ZWQsIHVzZSBgbW9kaWZpZXIuZm5gIScpO1xuICAgIH1cbiAgICB2YXIgZm4gPSBtb2RpZmllclsnZnVuY3Rpb24nXSB8fCBtb2RpZmllci5mbjsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBkb3Qtbm90YXRpb25cbiAgICBpZiAobW9kaWZpZXIuZW5hYmxlZCAmJiBpc0Z1bmN0aW9uKGZuKSkge1xuICAgICAgLy8gQWRkIHByb3BlcnRpZXMgdG8gb2Zmc2V0cyB0byBtYWtlIHRoZW0gYSBjb21wbGV0ZSBjbGllbnRSZWN0IG9iamVjdFxuICAgICAgLy8gd2UgZG8gdGhpcyBiZWZvcmUgZWFjaCBtb2RpZmllciB0byBtYWtlIHN1cmUgdGhlIHByZXZpb3VzIG9uZSBkb2Vzbid0XG4gICAgICAvLyBtZXNzIHdpdGggdGhlc2UgdmFsdWVzXG4gICAgICBkYXRhLm9mZnNldHMucG9wcGVyID0gZ2V0Q2xpZW50UmVjdChkYXRhLm9mZnNldHMucG9wcGVyKTtcbiAgICAgIGRhdGEub2Zmc2V0cy5yZWZlcmVuY2UgPSBnZXRDbGllbnRSZWN0KGRhdGEub2Zmc2V0cy5yZWZlcmVuY2UpO1xuXG4gICAgICBkYXRhID0gZm4oZGF0YSwgbW9kaWZpZXIpO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogVXBkYXRlcyB0aGUgcG9zaXRpb24gb2YgdGhlIHBvcHBlciwgY29tcHV0aW5nIHRoZSBuZXcgb2Zmc2V0cyBhbmQgYXBwbHlpbmdcbiAqIHRoZSBuZXcgc3R5bGUuPGJyIC8+XG4gKiBQcmVmZXIgYHNjaGVkdWxlVXBkYXRlYCBvdmVyIGB1cGRhdGVgIGJlY2F1c2Ugb2YgcGVyZm9ybWFuY2UgcmVhc29ucy5cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXJcbiAqL1xuZnVuY3Rpb24gdXBkYXRlKCkge1xuICAvLyBpZiBwb3BwZXIgaXMgZGVzdHJveWVkLCBkb24ndCBwZXJmb3JtIGFueSBmdXJ0aGVyIHVwZGF0ZVxuICBpZiAodGhpcy5zdGF0ZS5pc0Rlc3Ryb3llZCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBkYXRhID0ge1xuICAgIGluc3RhbmNlOiB0aGlzLFxuICAgIHN0eWxlczoge30sXG4gICAgYXJyb3dTdHlsZXM6IHt9LFxuICAgIGF0dHJpYnV0ZXM6IHt9LFxuICAgIGZsaXBwZWQ6IGZhbHNlLFxuICAgIG9mZnNldHM6IHt9XG4gIH07XG5cbiAgLy8gY29tcHV0ZSByZWZlcmVuY2UgZWxlbWVudCBvZmZzZXRzXG4gIGRhdGEub2Zmc2V0cy5yZWZlcmVuY2UgPSBnZXRSZWZlcmVuY2VPZmZzZXRzKHRoaXMuc3RhdGUsIHRoaXMucG9wcGVyLCB0aGlzLnJlZmVyZW5jZSwgdGhpcy5vcHRpb25zLnBvc2l0aW9uRml4ZWQpO1xuXG4gIC8vIGNvbXB1dGUgYXV0byBwbGFjZW1lbnQsIHN0b3JlIHBsYWNlbWVudCBpbnNpZGUgdGhlIGRhdGEgb2JqZWN0LFxuICAvLyBtb2RpZmllcnMgd2lsbCBiZSBhYmxlIHRvIGVkaXQgYHBsYWNlbWVudGAgaWYgbmVlZGVkXG4gIC8vIGFuZCByZWZlciB0byBvcmlnaW5hbFBsYWNlbWVudCB0byBrbm93IHRoZSBvcmlnaW5hbCB2YWx1ZVxuICBkYXRhLnBsYWNlbWVudCA9IGNvbXB1dGVBdXRvUGxhY2VtZW50KHRoaXMub3B0aW9ucy5wbGFjZW1lbnQsIGRhdGEub2Zmc2V0cy5yZWZlcmVuY2UsIHRoaXMucG9wcGVyLCB0aGlzLnJlZmVyZW5jZSwgdGhpcy5vcHRpb25zLm1vZGlmaWVycy5mbGlwLmJvdW5kYXJpZXNFbGVtZW50LCB0aGlzLm9wdGlvbnMubW9kaWZpZXJzLmZsaXAucGFkZGluZyk7XG5cbiAgLy8gc3RvcmUgdGhlIGNvbXB1dGVkIHBsYWNlbWVudCBpbnNpZGUgYG9yaWdpbmFsUGxhY2VtZW50YFxuICBkYXRhLm9yaWdpbmFsUGxhY2VtZW50ID0gZGF0YS5wbGFjZW1lbnQ7XG5cbiAgZGF0YS5wb3NpdGlvbkZpeGVkID0gdGhpcy5vcHRpb25zLnBvc2l0aW9uRml4ZWQ7XG5cbiAgLy8gY29tcHV0ZSB0aGUgcG9wcGVyIG9mZnNldHNcbiAgZGF0YS5vZmZzZXRzLnBvcHBlciA9IGdldFBvcHBlck9mZnNldHModGhpcy5wb3BwZXIsIGRhdGEub2Zmc2V0cy5yZWZlcmVuY2UsIGRhdGEucGxhY2VtZW50KTtcblxuICBkYXRhLm9mZnNldHMucG9wcGVyLnBvc2l0aW9uID0gdGhpcy5vcHRpb25zLnBvc2l0aW9uRml4ZWQgPyAnZml4ZWQnIDogJ2Fic29sdXRlJztcblxuICAvLyBydW4gdGhlIG1vZGlmaWVyc1xuICBkYXRhID0gcnVuTW9kaWZpZXJzKHRoaXMubW9kaWZpZXJzLCBkYXRhKTtcblxuICAvLyB0aGUgZmlyc3QgYHVwZGF0ZWAgd2lsbCBjYWxsIGBvbkNyZWF0ZWAgY2FsbGJhY2tcbiAgLy8gdGhlIG90aGVyIG9uZXMgd2lsbCBjYWxsIGBvblVwZGF0ZWAgY2FsbGJhY2tcbiAgaWYgKCF0aGlzLnN0YXRlLmlzQ3JlYXRlZCkge1xuICAgIHRoaXMuc3RhdGUuaXNDcmVhdGVkID0gdHJ1ZTtcbiAgICB0aGlzLm9wdGlvbnMub25DcmVhdGUoZGF0YSk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5vcHRpb25zLm9uVXBkYXRlKGRhdGEpO1xuICB9XG59XG5cbi8qKlxuICogSGVscGVyIHVzZWQgdG8ga25vdyBpZiB0aGUgZ2l2ZW4gbW9kaWZpZXIgaXMgZW5hYmxlZC5cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEByZXR1cm5zIHtCb29sZWFufVxuICovXG5mdW5jdGlvbiBpc01vZGlmaWVyRW5hYmxlZChtb2RpZmllcnMsIG1vZGlmaWVyTmFtZSkge1xuICByZXR1cm4gbW9kaWZpZXJzLnNvbWUoZnVuY3Rpb24gKF9yZWYpIHtcbiAgICB2YXIgbmFtZSA9IF9yZWYubmFtZSxcbiAgICAgICAgZW5hYmxlZCA9IF9yZWYuZW5hYmxlZDtcbiAgICByZXR1cm4gZW5hYmxlZCAmJiBuYW1lID09PSBtb2RpZmllck5hbWU7XG4gIH0pO1xufVxuXG4vKipcbiAqIEdldCB0aGUgcHJlZml4ZWQgc3VwcG9ydGVkIHByb3BlcnR5IG5hbWVcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7U3RyaW5nfSBwcm9wZXJ0eSAoY2FtZWxDYXNlKVxuICogQHJldHVybnMge1N0cmluZ30gcHJlZml4ZWQgcHJvcGVydHkgKGNhbWVsQ2FzZSBvciBQYXNjYWxDYXNlLCBkZXBlbmRpbmcgb24gdGhlIHZlbmRvciBwcmVmaXgpXG4gKi9cbmZ1bmN0aW9uIGdldFN1cHBvcnRlZFByb3BlcnR5TmFtZShwcm9wZXJ0eSkge1xuICB2YXIgcHJlZml4ZXMgPSBbZmFsc2UsICdtcycsICdXZWJraXQnLCAnTW96JywgJ08nXTtcbiAgdmFyIHVwcGVyUHJvcCA9IHByb3BlcnR5LmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgcHJvcGVydHkuc2xpY2UoMSk7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcmVmaXhlcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBwcmVmaXggPSBwcmVmaXhlc1tpXTtcbiAgICB2YXIgdG9DaGVjayA9IHByZWZpeCA/ICcnICsgcHJlZml4ICsgdXBwZXJQcm9wIDogcHJvcGVydHk7XG4gICAgaWYgKHR5cGVvZiBkb2N1bWVudC5ib2R5LnN0eWxlW3RvQ2hlY2tdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgcmV0dXJuIHRvQ2hlY2s7XG4gICAgfVxuICB9XG4gIHJldHVybiBudWxsO1xufVxuXG4vKipcbiAqIERlc3Ryb3kgdGhlIHBvcHBlclxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlclxuICovXG5mdW5jdGlvbiBkZXN0cm95KCkge1xuICB0aGlzLnN0YXRlLmlzRGVzdHJveWVkID0gdHJ1ZTtcblxuICAvLyB0b3VjaCBET00gb25seSBpZiBgYXBwbHlTdHlsZWAgbW9kaWZpZXIgaXMgZW5hYmxlZFxuICBpZiAoaXNNb2RpZmllckVuYWJsZWQodGhpcy5tb2RpZmllcnMsICdhcHBseVN0eWxlJykpIHtcbiAgICB0aGlzLnBvcHBlci5yZW1vdmVBdHRyaWJ1dGUoJ3gtcGxhY2VtZW50Jyk7XG4gICAgdGhpcy5wb3BwZXIuc3R5bGUucG9zaXRpb24gPSAnJztcbiAgICB0aGlzLnBvcHBlci5zdHlsZS50b3AgPSAnJztcbiAgICB0aGlzLnBvcHBlci5zdHlsZS5sZWZ0ID0gJyc7XG4gICAgdGhpcy5wb3BwZXIuc3R5bGUucmlnaHQgPSAnJztcbiAgICB0aGlzLnBvcHBlci5zdHlsZS5ib3R0b20gPSAnJztcbiAgICB0aGlzLnBvcHBlci5zdHlsZS53aWxsQ2hhbmdlID0gJyc7XG4gICAgdGhpcy5wb3BwZXIuc3R5bGVbZ2V0U3VwcG9ydGVkUHJvcGVydHlOYW1lKCd0cmFuc2Zvcm0nKV0gPSAnJztcbiAgfVxuXG4gIHRoaXMuZGlzYWJsZUV2ZW50TGlzdGVuZXJzKCk7XG5cbiAgLy8gcmVtb3ZlIHRoZSBwb3BwZXIgaWYgdXNlciBleHBsaWNpdHkgYXNrZWQgZm9yIHRoZSBkZWxldGlvbiBvbiBkZXN0cm95XG4gIC8vIGRvIG5vdCB1c2UgYHJlbW92ZWAgYmVjYXVzZSBJRTExIGRvZXNuJ3Qgc3VwcG9ydCBpdFxuICBpZiAodGhpcy5vcHRpb25zLnJlbW92ZU9uRGVzdHJveSkge1xuICAgIHRoaXMucG9wcGVyLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy5wb3BwZXIpO1xuICB9XG4gIHJldHVybiB0aGlzO1xufVxuXG4vKipcbiAqIEdldCB0aGUgd2luZG93IGFzc29jaWF0ZWQgd2l0aCB0aGUgZWxlbWVudFxuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50XG4gKiBAcmV0dXJucyB7V2luZG93fVxuICovXG5mdW5jdGlvbiBnZXRXaW5kb3coZWxlbWVudCkge1xuICB2YXIgb3duZXJEb2N1bWVudCA9IGVsZW1lbnQub3duZXJEb2N1bWVudDtcbiAgcmV0dXJuIG93bmVyRG9jdW1lbnQgPyBvd25lckRvY3VtZW50LmRlZmF1bHRWaWV3IDogd2luZG93O1xufVxuXG5mdW5jdGlvbiBhdHRhY2hUb1Njcm9sbFBhcmVudHMoc2Nyb2xsUGFyZW50LCBldmVudCwgY2FsbGJhY2ssIHNjcm9sbFBhcmVudHMpIHtcbiAgdmFyIGlzQm9keSA9IHNjcm9sbFBhcmVudC5ub2RlTmFtZSA9PT0gJ0JPRFknO1xuICB2YXIgdGFyZ2V0ID0gaXNCb2R5ID8gc2Nyb2xsUGFyZW50Lm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcgOiBzY3JvbGxQYXJlbnQ7XG4gIHRhcmdldC5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBjYWxsYmFjaywgeyBwYXNzaXZlOiB0cnVlIH0pO1xuXG4gIGlmICghaXNCb2R5KSB7XG4gICAgYXR0YWNoVG9TY3JvbGxQYXJlbnRzKGdldFNjcm9sbFBhcmVudCh0YXJnZXQucGFyZW50Tm9kZSksIGV2ZW50LCBjYWxsYmFjaywgc2Nyb2xsUGFyZW50cyk7XG4gIH1cbiAgc2Nyb2xsUGFyZW50cy5wdXNoKHRhcmdldCk7XG59XG5cbi8qKlxuICogU2V0dXAgbmVlZGVkIGV2ZW50IGxpc3RlbmVycyB1c2VkIHRvIHVwZGF0ZSB0aGUgcG9wcGVyIHBvc2l0aW9uXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBzZXR1cEV2ZW50TGlzdGVuZXJzKHJlZmVyZW5jZSwgb3B0aW9ucywgc3RhdGUsIHVwZGF0ZUJvdW5kKSB7XG4gIC8vIFJlc2l6ZSBldmVudCBsaXN0ZW5lciBvbiB3aW5kb3dcbiAgc3RhdGUudXBkYXRlQm91bmQgPSB1cGRhdGVCb3VuZDtcbiAgZ2V0V2luZG93KHJlZmVyZW5jZSkuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgc3RhdGUudXBkYXRlQm91bmQsIHsgcGFzc2l2ZTogdHJ1ZSB9KTtcblxuICAvLyBTY3JvbGwgZXZlbnQgbGlzdGVuZXIgb24gc2Nyb2xsIHBhcmVudHNcbiAgdmFyIHNjcm9sbEVsZW1lbnQgPSBnZXRTY3JvbGxQYXJlbnQocmVmZXJlbmNlKTtcbiAgYXR0YWNoVG9TY3JvbGxQYXJlbnRzKHNjcm9sbEVsZW1lbnQsICdzY3JvbGwnLCBzdGF0ZS51cGRhdGVCb3VuZCwgc3RhdGUuc2Nyb2xsUGFyZW50cyk7XG4gIHN0YXRlLnNjcm9sbEVsZW1lbnQgPSBzY3JvbGxFbGVtZW50O1xuICBzdGF0ZS5ldmVudHNFbmFibGVkID0gdHJ1ZTtcblxuICByZXR1cm4gc3RhdGU7XG59XG5cbi8qKlxuICogSXQgd2lsbCBhZGQgcmVzaXplL3Njcm9sbCBldmVudHMgYW5kIHN0YXJ0IHJlY2FsY3VsYXRpbmdcbiAqIHBvc2l0aW9uIG9mIHRoZSBwb3BwZXIgZWxlbWVudCB3aGVuIHRoZXkgYXJlIHRyaWdnZXJlZC5cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXJcbiAqL1xuZnVuY3Rpb24gZW5hYmxlRXZlbnRMaXN0ZW5lcnMoKSB7XG4gIGlmICghdGhpcy5zdGF0ZS5ldmVudHNFbmFibGVkKSB7XG4gICAgdGhpcy5zdGF0ZSA9IHNldHVwRXZlbnRMaXN0ZW5lcnModGhpcy5yZWZlcmVuY2UsIHRoaXMub3B0aW9ucywgdGhpcy5zdGF0ZSwgdGhpcy5zY2hlZHVsZVVwZGF0ZSk7XG4gIH1cbn1cblxuLyoqXG4gKiBSZW1vdmUgZXZlbnQgbGlzdGVuZXJzIHVzZWQgdG8gdXBkYXRlIHRoZSBwb3BwZXIgcG9zaXRpb25cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHJlbW92ZUV2ZW50TGlzdGVuZXJzKHJlZmVyZW5jZSwgc3RhdGUpIHtcbiAgLy8gUmVtb3ZlIHJlc2l6ZSBldmVudCBsaXN0ZW5lciBvbiB3aW5kb3dcbiAgZ2V0V2luZG93KHJlZmVyZW5jZSkucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzaXplJywgc3RhdGUudXBkYXRlQm91bmQpO1xuXG4gIC8vIFJlbW92ZSBzY3JvbGwgZXZlbnQgbGlzdGVuZXIgb24gc2Nyb2xsIHBhcmVudHNcbiAgc3RhdGUuc2Nyb2xsUGFyZW50cy5mb3JFYWNoKGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICB0YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgc3RhdGUudXBkYXRlQm91bmQpO1xuICB9KTtcblxuICAvLyBSZXNldCBzdGF0ZVxuICBzdGF0ZS51cGRhdGVCb3VuZCA9IG51bGw7XG4gIHN0YXRlLnNjcm9sbFBhcmVudHMgPSBbXTtcbiAgc3RhdGUuc2Nyb2xsRWxlbWVudCA9IG51bGw7XG4gIHN0YXRlLmV2ZW50c0VuYWJsZWQgPSBmYWxzZTtcbiAgcmV0dXJuIHN0YXRlO1xufVxuXG4vKipcbiAqIEl0IHdpbGwgcmVtb3ZlIHJlc2l6ZS9zY3JvbGwgZXZlbnRzIGFuZCB3b24ndCByZWNhbGN1bGF0ZSBwb3BwZXIgcG9zaXRpb25cbiAqIHdoZW4gdGhleSBhcmUgdHJpZ2dlcmVkLiBJdCBhbHNvIHdvbid0IHRyaWdnZXIgb25VcGRhdGUgY2FsbGJhY2sgYW55bW9yZSxcbiAqIHVubGVzcyB5b3UgY2FsbCBgdXBkYXRlYCBtZXRob2QgbWFudWFsbHkuXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyXG4gKi9cbmZ1bmN0aW9uIGRpc2FibGVFdmVudExpc3RlbmVycygpIHtcbiAgaWYgKHRoaXMuc3RhdGUuZXZlbnRzRW5hYmxlZCkge1xuICAgIGNhbmNlbEFuaW1hdGlvbkZyYW1lKHRoaXMuc2NoZWR1bGVVcGRhdGUpO1xuICAgIHRoaXMuc3RhdGUgPSByZW1vdmVFdmVudExpc3RlbmVycyh0aGlzLnJlZmVyZW5jZSwgdGhpcy5zdGF0ZSk7XG4gIH1cbn1cblxuLyoqXG4gKiBUZWxscyBpZiBhIGdpdmVuIGlucHV0IGlzIGEgbnVtYmVyXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcGFyYW0geyp9IGlucHV0IHRvIGNoZWNrXG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICovXG5mdW5jdGlvbiBpc051bWVyaWMobikge1xuICByZXR1cm4gbiAhPT0gJycgJiYgIWlzTmFOKHBhcnNlRmxvYXQobikpICYmIGlzRmluaXRlKG4pO1xufVxuXG4vKipcbiAqIFNldCB0aGUgc3R5bGUgdG8gdGhlIGdpdmVuIHBvcHBlclxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50IC0gRWxlbWVudCB0byBhcHBseSB0aGUgc3R5bGUgdG9cbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBzdHlsZXNcbiAqIE9iamVjdCB3aXRoIGEgbGlzdCBvZiBwcm9wZXJ0aWVzIGFuZCB2YWx1ZXMgd2hpY2ggd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBlbGVtZW50XG4gKi9cbmZ1bmN0aW9uIHNldFN0eWxlcyhlbGVtZW50LCBzdHlsZXMpIHtcbiAgT2JqZWN0LmtleXMoc3R5bGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChwcm9wKSB7XG4gICAgdmFyIHVuaXQgPSAnJztcbiAgICAvLyBhZGQgdW5pdCBpZiB0aGUgdmFsdWUgaXMgbnVtZXJpYyBhbmQgaXMgb25lIG9mIHRoZSBmb2xsb3dpbmdcbiAgICBpZiAoWyd3aWR0aCcsICdoZWlnaHQnLCAndG9wJywgJ3JpZ2h0JywgJ2JvdHRvbScsICdsZWZ0J10uaW5kZXhPZihwcm9wKSAhPT0gLTEgJiYgaXNOdW1lcmljKHN0eWxlc1twcm9wXSkpIHtcbiAgICAgIHVuaXQgPSAncHgnO1xuICAgIH1cbiAgICBlbGVtZW50LnN0eWxlW3Byb3BdID0gc3R5bGVzW3Byb3BdICsgdW5pdDtcbiAgfSk7XG59XG5cbi8qKlxuICogU2V0IHRoZSBhdHRyaWJ1dGVzIHRvIHRoZSBnaXZlbiBwb3BwZXJcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudCAtIEVsZW1lbnQgdG8gYXBwbHkgdGhlIGF0dHJpYnV0ZXMgdG9cbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBzdHlsZXNcbiAqIE9iamVjdCB3aXRoIGEgbGlzdCBvZiBwcm9wZXJ0aWVzIGFuZCB2YWx1ZXMgd2hpY2ggd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBlbGVtZW50XG4gKi9cbmZ1bmN0aW9uIHNldEF0dHJpYnV0ZXMoZWxlbWVudCwgYXR0cmlidXRlcykge1xuICBPYmplY3Qua2V5cyhhdHRyaWJ1dGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChwcm9wKSB7XG4gICAgdmFyIHZhbHVlID0gYXR0cmlidXRlc1twcm9wXTtcbiAgICBpZiAodmFsdWUgIT09IGZhbHNlKSB7XG4gICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZShwcm9wLCBhdHRyaWJ1dGVzW3Byb3BdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUocHJvcCk7XG4gICAgfVxuICB9KTtcbn1cblxuLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiBNb2RpZmllcnNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSBgdXBkYXRlYCBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhLnN0eWxlcyAtIExpc3Qgb2Ygc3R5bGUgcHJvcGVydGllcyAtIHZhbHVlcyB0byBhcHBseSB0byBwb3BwZXIgZWxlbWVudFxuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEuYXR0cmlidXRlcyAtIExpc3Qgb2YgYXR0cmlidXRlIHByb3BlcnRpZXMgLSB2YWx1ZXMgdG8gYXBwbHkgdG8gcG9wcGVyIGVsZW1lbnRcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBzYW1lIGRhdGEgb2JqZWN0XG4gKi9cbmZ1bmN0aW9uIGFwcGx5U3R5bGUoZGF0YSkge1xuICAvLyBhbnkgcHJvcGVydHkgcHJlc2VudCBpbiBgZGF0YS5zdHlsZXNgIHdpbGwgYmUgYXBwbGllZCB0byB0aGUgcG9wcGVyLFxuICAvLyBpbiB0aGlzIHdheSB3ZSBjYW4gbWFrZSB0aGUgM3JkIHBhcnR5IG1vZGlmaWVycyBhZGQgY3VzdG9tIHN0eWxlcyB0byBpdFxuICAvLyBCZSBhd2FyZSwgbW9kaWZpZXJzIGNvdWxkIG92ZXJyaWRlIHRoZSBwcm9wZXJ0aWVzIGRlZmluZWQgaW4gdGhlIHByZXZpb3VzXG4gIC8vIGxpbmVzIG9mIHRoaXMgbW9kaWZpZXIhXG4gIHNldFN0eWxlcyhkYXRhLmluc3RhbmNlLnBvcHBlciwgZGF0YS5zdHlsZXMpO1xuXG4gIC8vIGFueSBwcm9wZXJ0eSBwcmVzZW50IGluIGBkYXRhLmF0dHJpYnV0ZXNgIHdpbGwgYmUgYXBwbGllZCB0byB0aGUgcG9wcGVyLFxuICAvLyB0aGV5IHdpbGwgYmUgc2V0IGFzIEhUTUwgYXR0cmlidXRlcyBvZiB0aGUgZWxlbWVudFxuICBzZXRBdHRyaWJ1dGVzKGRhdGEuaW5zdGFuY2UucG9wcGVyLCBkYXRhLmF0dHJpYnV0ZXMpO1xuXG4gIC8vIGlmIGFycm93RWxlbWVudCBpcyBkZWZpbmVkIGFuZCBhcnJvd1N0eWxlcyBoYXMgc29tZSBwcm9wZXJ0aWVzXG4gIGlmIChkYXRhLmFycm93RWxlbWVudCAmJiBPYmplY3Qua2V5cyhkYXRhLmFycm93U3R5bGVzKS5sZW5ndGgpIHtcbiAgICBzZXRTdHlsZXMoZGF0YS5hcnJvd0VsZW1lbnQsIGRhdGEuYXJyb3dTdHlsZXMpO1xuICB9XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogU2V0IHRoZSB4LXBsYWNlbWVudCBhdHRyaWJ1dGUgYmVmb3JlIGV2ZXJ5dGhpbmcgZWxzZSBiZWNhdXNlIGl0IGNvdWxkIGJlIHVzZWRcbiAqIHRvIGFkZCBtYXJnaW5zIHRvIHRoZSBwb3BwZXIgbWFyZ2lucyBuZWVkcyB0byBiZSBjYWxjdWxhdGVkIHRvIGdldCB0aGVcbiAqIGNvcnJlY3QgcG9wcGVyIG9mZnNldHMuXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLm1vZGlmaWVyc1xuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gcmVmZXJlbmNlIC0gVGhlIHJlZmVyZW5jZSBlbGVtZW50IHVzZWQgdG8gcG9zaXRpb24gdGhlIHBvcHBlclxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gcG9wcGVyIC0gVGhlIEhUTUwgZWxlbWVudCB1c2VkIGFzIHBvcHBlclxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBQb3BwZXIuanMgb3B0aW9uc1xuICovXG5mdW5jdGlvbiBhcHBseVN0eWxlT25Mb2FkKHJlZmVyZW5jZSwgcG9wcGVyLCBvcHRpb25zLCBtb2RpZmllck9wdGlvbnMsIHN0YXRlKSB7XG4gIC8vIGNvbXB1dGUgcmVmZXJlbmNlIGVsZW1lbnQgb2Zmc2V0c1xuICB2YXIgcmVmZXJlbmNlT2Zmc2V0cyA9IGdldFJlZmVyZW5jZU9mZnNldHMoc3RhdGUsIHBvcHBlciwgcmVmZXJlbmNlLCBvcHRpb25zLnBvc2l0aW9uRml4ZWQpO1xuXG4gIC8vIGNvbXB1dGUgYXV0byBwbGFjZW1lbnQsIHN0b3JlIHBsYWNlbWVudCBpbnNpZGUgdGhlIGRhdGEgb2JqZWN0LFxuICAvLyBtb2RpZmllcnMgd2lsbCBiZSBhYmxlIHRvIGVkaXQgYHBsYWNlbWVudGAgaWYgbmVlZGVkXG4gIC8vIGFuZCByZWZlciB0byBvcmlnaW5hbFBsYWNlbWVudCB0byBrbm93IHRoZSBvcmlnaW5hbCB2YWx1ZVxuICB2YXIgcGxhY2VtZW50ID0gY29tcHV0ZUF1dG9QbGFjZW1lbnQob3B0aW9ucy5wbGFjZW1lbnQsIHJlZmVyZW5jZU9mZnNldHMsIHBvcHBlciwgcmVmZXJlbmNlLCBvcHRpb25zLm1vZGlmaWVycy5mbGlwLmJvdW5kYXJpZXNFbGVtZW50LCBvcHRpb25zLm1vZGlmaWVycy5mbGlwLnBhZGRpbmcpO1xuXG4gIHBvcHBlci5zZXRBdHRyaWJ1dGUoJ3gtcGxhY2VtZW50JywgcGxhY2VtZW50KTtcblxuICAvLyBBcHBseSBgcG9zaXRpb25gIHRvIHBvcHBlciBiZWZvcmUgYW55dGhpbmcgZWxzZSBiZWNhdXNlXG4gIC8vIHdpdGhvdXQgdGhlIHBvc2l0aW9uIGFwcGxpZWQgd2UgY2FuJ3QgZ3VhcmFudGVlIGNvcnJlY3QgY29tcHV0YXRpb25zXG4gIHNldFN0eWxlcyhwb3BwZXIsIHsgcG9zaXRpb246IG9wdGlvbnMucG9zaXRpb25GaXhlZCA/ICdmaXhlZCcgOiAnYWJzb2x1dGUnIH0pO1xuXG4gIHJldHVybiBvcHRpb25zO1xufVxuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIE1vZGlmaWVyc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IGB1cGRhdGVgIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxuICovXG5mdW5jdGlvbiBjb21wdXRlU3R5bGUoZGF0YSwgb3B0aW9ucykge1xuICB2YXIgeCA9IG9wdGlvbnMueCxcbiAgICAgIHkgPSBvcHRpb25zLnk7XG4gIHZhciBwb3BwZXIgPSBkYXRhLm9mZnNldHMucG9wcGVyO1xuXG4gIC8vIFJlbW92ZSB0aGlzIGxlZ2FjeSBzdXBwb3J0IGluIFBvcHBlci5qcyB2MlxuXG4gIHZhciBsZWdhY3lHcHVBY2NlbGVyYXRpb25PcHRpb24gPSBmaW5kKGRhdGEuaW5zdGFuY2UubW9kaWZpZXJzLCBmdW5jdGlvbiAobW9kaWZpZXIpIHtcbiAgICByZXR1cm4gbW9kaWZpZXIubmFtZSA9PT0gJ2FwcGx5U3R5bGUnO1xuICB9KS5ncHVBY2NlbGVyYXRpb247XG4gIGlmIChsZWdhY3lHcHVBY2NlbGVyYXRpb25PcHRpb24gIT09IHVuZGVmaW5lZCkge1xuICAgIGNvbnNvbGUud2FybignV0FSTklORzogYGdwdUFjY2VsZXJhdGlvbmAgb3B0aW9uIG1vdmVkIHRvIGBjb21wdXRlU3R5bGVgIG1vZGlmaWVyIGFuZCB3aWxsIG5vdCBiZSBzdXBwb3J0ZWQgaW4gZnV0dXJlIHZlcnNpb25zIG9mIFBvcHBlci5qcyEnKTtcbiAgfVxuICB2YXIgZ3B1QWNjZWxlcmF0aW9uID0gbGVnYWN5R3B1QWNjZWxlcmF0aW9uT3B0aW9uICE9PSB1bmRlZmluZWQgPyBsZWdhY3lHcHVBY2NlbGVyYXRpb25PcHRpb24gOiBvcHRpb25zLmdwdUFjY2VsZXJhdGlvbjtcblxuICB2YXIgb2Zmc2V0UGFyZW50ID0gZ2V0T2Zmc2V0UGFyZW50KGRhdGEuaW5zdGFuY2UucG9wcGVyKTtcbiAgdmFyIG9mZnNldFBhcmVudFJlY3QgPSBnZXRCb3VuZGluZ0NsaWVudFJlY3Qob2Zmc2V0UGFyZW50KTtcblxuICAvLyBTdHlsZXNcbiAgdmFyIHN0eWxlcyA9IHtcbiAgICBwb3NpdGlvbjogcG9wcGVyLnBvc2l0aW9uXG4gIH07XG5cbiAgLy8gQXZvaWQgYmx1cnJ5IHRleHQgYnkgdXNpbmcgZnVsbCBwaXhlbCBpbnRlZ2Vycy5cbiAgLy8gRm9yIHBpeGVsLXBlcmZlY3QgcG9zaXRpb25pbmcsIHRvcC9ib3R0b20gcHJlZmVycyByb3VuZGVkXG4gIC8vIHZhbHVlcywgd2hpbGUgbGVmdC9yaWdodCBwcmVmZXJzIGZsb29yZWQgdmFsdWVzLlxuICB2YXIgb2Zmc2V0cyA9IHtcbiAgICBsZWZ0OiBNYXRoLmZsb29yKHBvcHBlci5sZWZ0KSxcbiAgICB0b3A6IE1hdGgucm91bmQocG9wcGVyLnRvcCksXG4gICAgYm90dG9tOiBNYXRoLnJvdW5kKHBvcHBlci5ib3R0b20pLFxuICAgIHJpZ2h0OiBNYXRoLmZsb29yKHBvcHBlci5yaWdodClcbiAgfTtcblxuICB2YXIgc2lkZUEgPSB4ID09PSAnYm90dG9tJyA/ICd0b3AnIDogJ2JvdHRvbSc7XG4gIHZhciBzaWRlQiA9IHkgPT09ICdyaWdodCcgPyAnbGVmdCcgOiAncmlnaHQnO1xuXG4gIC8vIGlmIGdwdUFjY2VsZXJhdGlvbiBpcyBzZXQgdG8gYHRydWVgIGFuZCB0cmFuc2Zvcm0gaXMgc3VwcG9ydGVkLFxuICAvLyAgd2UgdXNlIGB0cmFuc2xhdGUzZGAgdG8gYXBwbHkgdGhlIHBvc2l0aW9uIHRvIHRoZSBwb3BwZXIgd2VcbiAgLy8gYXV0b21hdGljYWxseSB1c2UgdGhlIHN1cHBvcnRlZCBwcmVmaXhlZCB2ZXJzaW9uIGlmIG5lZWRlZFxuICB2YXIgcHJlZml4ZWRQcm9wZXJ0eSA9IGdldFN1cHBvcnRlZFByb3BlcnR5TmFtZSgndHJhbnNmb3JtJyk7XG5cbiAgLy8gbm93LCBsZXQncyBtYWtlIGEgc3RlcCBiYWNrIGFuZCBsb29rIGF0IHRoaXMgY29kZSBjbG9zZWx5ICh3dGY/KVxuICAvLyBJZiB0aGUgY29udGVudCBvZiB0aGUgcG9wcGVyIGdyb3dzIG9uY2UgaXQncyBiZWVuIHBvc2l0aW9uZWQsIGl0XG4gIC8vIG1heSBoYXBwZW4gdGhhdCB0aGUgcG9wcGVyIGdldHMgbWlzcGxhY2VkIGJlY2F1c2Ugb2YgdGhlIG5ldyBjb250ZW50XG4gIC8vIG92ZXJmbG93aW5nIGl0cyByZWZlcmVuY2UgZWxlbWVudFxuICAvLyBUbyBhdm9pZCB0aGlzIHByb2JsZW0sIHdlIHByb3ZpZGUgdHdvIG9wdGlvbnMgKHggYW5kIHkpLCB3aGljaCBhbGxvd1xuICAvLyB0aGUgY29uc3VtZXIgdG8gZGVmaW5lIHRoZSBvZmZzZXQgb3JpZ2luLlxuICAvLyBJZiB3ZSBwb3NpdGlvbiBhIHBvcHBlciBvbiB0b3Agb2YgYSByZWZlcmVuY2UgZWxlbWVudCwgd2UgY2FuIHNldFxuICAvLyBgeGAgdG8gYHRvcGAgdG8gbWFrZSB0aGUgcG9wcGVyIGdyb3cgdG93YXJkcyBpdHMgdG9wIGluc3RlYWQgb2ZcbiAgLy8gaXRzIGJvdHRvbS5cbiAgdmFyIGxlZnQgPSB2b2lkIDAsXG4gICAgICB0b3AgPSB2b2lkIDA7XG4gIGlmIChzaWRlQSA9PT0gJ2JvdHRvbScpIHtcbiAgICB0b3AgPSAtb2Zmc2V0UGFyZW50UmVjdC5oZWlnaHQgKyBvZmZzZXRzLmJvdHRvbTtcbiAgfSBlbHNlIHtcbiAgICB0b3AgPSBvZmZzZXRzLnRvcDtcbiAgfVxuICBpZiAoc2lkZUIgPT09ICdyaWdodCcpIHtcbiAgICBsZWZ0ID0gLW9mZnNldFBhcmVudFJlY3Qud2lkdGggKyBvZmZzZXRzLnJpZ2h0O1xuICB9IGVsc2Uge1xuICAgIGxlZnQgPSBvZmZzZXRzLmxlZnQ7XG4gIH1cbiAgaWYgKGdwdUFjY2VsZXJhdGlvbiAmJiBwcmVmaXhlZFByb3BlcnR5KSB7XG4gICAgc3R5bGVzW3ByZWZpeGVkUHJvcGVydHldID0gJ3RyYW5zbGF0ZTNkKCcgKyBsZWZ0ICsgJ3B4LCAnICsgdG9wICsgJ3B4LCAwKSc7XG4gICAgc3R5bGVzW3NpZGVBXSA9IDA7XG4gICAgc3R5bGVzW3NpZGVCXSA9IDA7XG4gICAgc3R5bGVzLndpbGxDaGFuZ2UgPSAndHJhbnNmb3JtJztcbiAgfSBlbHNlIHtcbiAgICAvLyBvdGh3ZXJpc2UsIHdlIHVzZSB0aGUgc3RhbmRhcmQgYHRvcGAsIGBsZWZ0YCwgYGJvdHRvbWAgYW5kIGByaWdodGAgcHJvcGVydGllc1xuICAgIHZhciBpbnZlcnRUb3AgPSBzaWRlQSA9PT0gJ2JvdHRvbScgPyAtMSA6IDE7XG4gICAgdmFyIGludmVydExlZnQgPSBzaWRlQiA9PT0gJ3JpZ2h0JyA/IC0xIDogMTtcbiAgICBzdHlsZXNbc2lkZUFdID0gdG9wICogaW52ZXJ0VG9wO1xuICAgIHN0eWxlc1tzaWRlQl0gPSBsZWZ0ICogaW52ZXJ0TGVmdDtcbiAgICBzdHlsZXMud2lsbENoYW5nZSA9IHNpZGVBICsgJywgJyArIHNpZGVCO1xuICB9XG5cbiAgLy8gQXR0cmlidXRlc1xuICB2YXIgYXR0cmlidXRlcyA9IHtcbiAgICAneC1wbGFjZW1lbnQnOiBkYXRhLnBsYWNlbWVudFxuICB9O1xuXG4gIC8vIFVwZGF0ZSBgZGF0YWAgYXR0cmlidXRlcywgc3R5bGVzIGFuZCBhcnJvd1N0eWxlc1xuICBkYXRhLmF0dHJpYnV0ZXMgPSBfZXh0ZW5kcyh7fSwgYXR0cmlidXRlcywgZGF0YS5hdHRyaWJ1dGVzKTtcbiAgZGF0YS5zdHlsZXMgPSBfZXh0ZW5kcyh7fSwgc3R5bGVzLCBkYXRhLnN0eWxlcyk7XG4gIGRhdGEuYXJyb3dTdHlsZXMgPSBfZXh0ZW5kcyh7fSwgZGF0YS5vZmZzZXRzLmFycm93LCBkYXRhLmFycm93U3R5bGVzKTtcblxuICByZXR1cm4gZGF0YTtcbn1cblxuLyoqXG4gKiBIZWxwZXIgdXNlZCB0byBrbm93IGlmIHRoZSBnaXZlbiBtb2RpZmllciBkZXBlbmRzIGZyb20gYW5vdGhlciBvbmUuPGJyIC8+XG4gKiBJdCBjaGVja3MgaWYgdGhlIG5lZWRlZCBtb2RpZmllciBpcyBsaXN0ZWQgYW5kIGVuYWJsZWQuXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcGFyYW0ge0FycmF5fSBtb2RpZmllcnMgLSBsaXN0IG9mIG1vZGlmaWVyc1xuICogQHBhcmFtIHtTdHJpbmd9IHJlcXVlc3RpbmdOYW1lIC0gbmFtZSBvZiByZXF1ZXN0aW5nIG1vZGlmaWVyXG4gKiBAcGFyYW0ge1N0cmluZ30gcmVxdWVzdGVkTmFtZSAtIG5hbWUgb2YgcmVxdWVzdGVkIG1vZGlmaWVyXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gaXNNb2RpZmllclJlcXVpcmVkKG1vZGlmaWVycywgcmVxdWVzdGluZ05hbWUsIHJlcXVlc3RlZE5hbWUpIHtcbiAgdmFyIHJlcXVlc3RpbmcgPSBmaW5kKG1vZGlmaWVycywgZnVuY3Rpb24gKF9yZWYpIHtcbiAgICB2YXIgbmFtZSA9IF9yZWYubmFtZTtcbiAgICByZXR1cm4gbmFtZSA9PT0gcmVxdWVzdGluZ05hbWU7XG4gIH0pO1xuXG4gIHZhciBpc1JlcXVpcmVkID0gISFyZXF1ZXN0aW5nICYmIG1vZGlmaWVycy5zb21lKGZ1bmN0aW9uIChtb2RpZmllcikge1xuICAgIHJldHVybiBtb2RpZmllci5uYW1lID09PSByZXF1ZXN0ZWROYW1lICYmIG1vZGlmaWVyLmVuYWJsZWQgJiYgbW9kaWZpZXIub3JkZXIgPCByZXF1ZXN0aW5nLm9yZGVyO1xuICB9KTtcblxuICBpZiAoIWlzUmVxdWlyZWQpIHtcbiAgICB2YXIgX3JlcXVlc3RpbmcgPSAnYCcgKyByZXF1ZXN0aW5nTmFtZSArICdgJztcbiAgICB2YXIgcmVxdWVzdGVkID0gJ2AnICsgcmVxdWVzdGVkTmFtZSArICdgJztcbiAgICBjb25zb2xlLndhcm4ocmVxdWVzdGVkICsgJyBtb2RpZmllciBpcyByZXF1aXJlZCBieSAnICsgX3JlcXVlc3RpbmcgKyAnIG1vZGlmaWVyIGluIG9yZGVyIHRvIHdvcmssIGJlIHN1cmUgdG8gaW5jbHVkZSBpdCBiZWZvcmUgJyArIF9yZXF1ZXN0aW5nICsgJyEnKTtcbiAgfVxuICByZXR1cm4gaXNSZXF1aXJlZDtcbn1cblxuLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiBNb2RpZmllcnNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSB1cGRhdGUgbWV0aG9kXG4gKiBAYXJndW1lbnQge09iamVjdH0gb3B0aW9ucyAtIE1vZGlmaWVycyBjb25maWd1cmF0aW9uIGFuZCBvcHRpb25zXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgZGF0YSBvYmplY3QsIHByb3Blcmx5IG1vZGlmaWVkXG4gKi9cbmZ1bmN0aW9uIGFycm93KGRhdGEsIG9wdGlvbnMpIHtcbiAgdmFyIF9kYXRhJG9mZnNldHMkYXJyb3c7XG5cbiAgLy8gYXJyb3cgZGVwZW5kcyBvbiBrZWVwVG9nZXRoZXIgaW4gb3JkZXIgdG8gd29ya1xuICBpZiAoIWlzTW9kaWZpZXJSZXF1aXJlZChkYXRhLmluc3RhbmNlLm1vZGlmaWVycywgJ2Fycm93JywgJ2tlZXBUb2dldGhlcicpKSB7XG4gICAgcmV0dXJuIGRhdGE7XG4gIH1cblxuICB2YXIgYXJyb3dFbGVtZW50ID0gb3B0aW9ucy5lbGVtZW50O1xuXG4gIC8vIGlmIGFycm93RWxlbWVudCBpcyBhIHN0cmluZywgc3VwcG9zZSBpdCdzIGEgQ1NTIHNlbGVjdG9yXG4gIGlmICh0eXBlb2YgYXJyb3dFbGVtZW50ID09PSAnc3RyaW5nJykge1xuICAgIGFycm93RWxlbWVudCA9IGRhdGEuaW5zdGFuY2UucG9wcGVyLnF1ZXJ5U2VsZWN0b3IoYXJyb3dFbGVtZW50KTtcblxuICAgIC8vIGlmIGFycm93RWxlbWVudCBpcyBub3QgZm91bmQsIGRvbid0IHJ1biB0aGUgbW9kaWZpZXJcbiAgICBpZiAoIWFycm93RWxlbWVudCkge1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIGlmIHRoZSBhcnJvd0VsZW1lbnQgaXNuJ3QgYSBxdWVyeSBzZWxlY3RvciB3ZSBtdXN0IGNoZWNrIHRoYXQgdGhlXG4gICAgLy8gcHJvdmlkZWQgRE9NIG5vZGUgaXMgY2hpbGQgb2YgaXRzIHBvcHBlciBub2RlXG4gICAgaWYgKCFkYXRhLmluc3RhbmNlLnBvcHBlci5jb250YWlucyhhcnJvd0VsZW1lbnQpKSB7XG4gICAgICBjb25zb2xlLndhcm4oJ1dBUk5JTkc6IGBhcnJvdy5lbGVtZW50YCBtdXN0IGJlIGNoaWxkIG9mIGl0cyBwb3BwZXIgZWxlbWVudCEnKTtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cbiAgfVxuXG4gIHZhciBwbGFjZW1lbnQgPSBkYXRhLnBsYWNlbWVudC5zcGxpdCgnLScpWzBdO1xuICB2YXIgX2RhdGEkb2Zmc2V0cyA9IGRhdGEub2Zmc2V0cyxcbiAgICAgIHBvcHBlciA9IF9kYXRhJG9mZnNldHMucG9wcGVyLFxuICAgICAgcmVmZXJlbmNlID0gX2RhdGEkb2Zmc2V0cy5yZWZlcmVuY2U7XG5cbiAgdmFyIGlzVmVydGljYWwgPSBbJ2xlZnQnLCAncmlnaHQnXS5pbmRleE9mKHBsYWNlbWVudCkgIT09IC0xO1xuXG4gIHZhciBsZW4gPSBpc1ZlcnRpY2FsID8gJ2hlaWdodCcgOiAnd2lkdGgnO1xuICB2YXIgc2lkZUNhcGl0YWxpemVkID0gaXNWZXJ0aWNhbCA/ICdUb3AnIDogJ0xlZnQnO1xuICB2YXIgc2lkZSA9IHNpZGVDYXBpdGFsaXplZC50b0xvd2VyQ2FzZSgpO1xuICB2YXIgYWx0U2lkZSA9IGlzVmVydGljYWwgPyAnbGVmdCcgOiAndG9wJztcbiAgdmFyIG9wU2lkZSA9IGlzVmVydGljYWwgPyAnYm90dG9tJyA6ICdyaWdodCc7XG4gIHZhciBhcnJvd0VsZW1lbnRTaXplID0gZ2V0T3V0ZXJTaXplcyhhcnJvd0VsZW1lbnQpW2xlbl07XG5cbiAgLy9cbiAgLy8gZXh0ZW5kcyBrZWVwVG9nZXRoZXIgYmVoYXZpb3IgbWFraW5nIHN1cmUgdGhlIHBvcHBlciBhbmQgaXRzXG4gIC8vIHJlZmVyZW5jZSBoYXZlIGVub3VnaCBwaXhlbHMgaW4gY29uanVjdGlvblxuICAvL1xuXG4gIC8vIHRvcC9sZWZ0IHNpZGVcbiAgaWYgKHJlZmVyZW5jZVtvcFNpZGVdIC0gYXJyb3dFbGVtZW50U2l6ZSA8IHBvcHBlcltzaWRlXSkge1xuICAgIGRhdGEub2Zmc2V0cy5wb3BwZXJbc2lkZV0gLT0gcG9wcGVyW3NpZGVdIC0gKHJlZmVyZW5jZVtvcFNpZGVdIC0gYXJyb3dFbGVtZW50U2l6ZSk7XG4gIH1cbiAgLy8gYm90dG9tL3JpZ2h0IHNpZGVcbiAgaWYgKHJlZmVyZW5jZVtzaWRlXSArIGFycm93RWxlbWVudFNpemUgPiBwb3BwZXJbb3BTaWRlXSkge1xuICAgIGRhdGEub2Zmc2V0cy5wb3BwZXJbc2lkZV0gKz0gcmVmZXJlbmNlW3NpZGVdICsgYXJyb3dFbGVtZW50U2l6ZSAtIHBvcHBlcltvcFNpZGVdO1xuICB9XG4gIGRhdGEub2Zmc2V0cy5wb3BwZXIgPSBnZXRDbGllbnRSZWN0KGRhdGEub2Zmc2V0cy5wb3BwZXIpO1xuXG4gIC8vIGNvbXB1dGUgY2VudGVyIG9mIHRoZSBwb3BwZXJcbiAgdmFyIGNlbnRlciA9IHJlZmVyZW5jZVtzaWRlXSArIHJlZmVyZW5jZVtsZW5dIC8gMiAtIGFycm93RWxlbWVudFNpemUgLyAyO1xuXG4gIC8vIENvbXB1dGUgdGhlIHNpZGVWYWx1ZSB1c2luZyB0aGUgdXBkYXRlZCBwb3BwZXIgb2Zmc2V0c1xuICAvLyB0YWtlIHBvcHBlciBtYXJnaW4gaW4gYWNjb3VudCBiZWNhdXNlIHdlIGRvbid0IGhhdmUgdGhpcyBpbmZvIGF2YWlsYWJsZVxuICB2YXIgY3NzID0gZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5KGRhdGEuaW5zdGFuY2UucG9wcGVyKTtcbiAgdmFyIHBvcHBlck1hcmdpblNpZGUgPSBwYXJzZUZsb2F0KGNzc1snbWFyZ2luJyArIHNpZGVDYXBpdGFsaXplZF0sIDEwKTtcbiAgdmFyIHBvcHBlckJvcmRlclNpZGUgPSBwYXJzZUZsb2F0KGNzc1snYm9yZGVyJyArIHNpZGVDYXBpdGFsaXplZCArICdXaWR0aCddLCAxMCk7XG4gIHZhciBzaWRlVmFsdWUgPSBjZW50ZXIgLSBkYXRhLm9mZnNldHMucG9wcGVyW3NpZGVdIC0gcG9wcGVyTWFyZ2luU2lkZSAtIHBvcHBlckJvcmRlclNpZGU7XG5cbiAgLy8gcHJldmVudCBhcnJvd0VsZW1lbnQgZnJvbSBiZWluZyBwbGFjZWQgbm90IGNvbnRpZ3VvdXNseSB0byBpdHMgcG9wcGVyXG4gIHNpZGVWYWx1ZSA9IE1hdGgubWF4KE1hdGgubWluKHBvcHBlcltsZW5dIC0gYXJyb3dFbGVtZW50U2l6ZSwgc2lkZVZhbHVlKSwgMCk7XG5cbiAgZGF0YS5hcnJvd0VsZW1lbnQgPSBhcnJvd0VsZW1lbnQ7XG4gIGRhdGEub2Zmc2V0cy5hcnJvdyA9IChfZGF0YSRvZmZzZXRzJGFycm93ID0ge30sIGRlZmluZVByb3BlcnR5KF9kYXRhJG9mZnNldHMkYXJyb3csIHNpZGUsIE1hdGgucm91bmQoc2lkZVZhbHVlKSksIGRlZmluZVByb3BlcnR5KF9kYXRhJG9mZnNldHMkYXJyb3csIGFsdFNpZGUsICcnKSwgX2RhdGEkb2Zmc2V0cyRhcnJvdyk7XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogR2V0IHRoZSBvcHBvc2l0ZSBwbGFjZW1lbnQgdmFyaWF0aW9uIG9mIHRoZSBnaXZlbiBvbmVcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7U3RyaW5nfSBwbGFjZW1lbnQgdmFyaWF0aW9uXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBmbGlwcGVkIHBsYWNlbWVudCB2YXJpYXRpb25cbiAqL1xuZnVuY3Rpb24gZ2V0T3Bwb3NpdGVWYXJpYXRpb24odmFyaWF0aW9uKSB7XG4gIGlmICh2YXJpYXRpb24gPT09ICdlbmQnKSB7XG4gICAgcmV0dXJuICdzdGFydCc7XG4gIH0gZWxzZSBpZiAodmFyaWF0aW9uID09PSAnc3RhcnQnKSB7XG4gICAgcmV0dXJuICdlbmQnO1xuICB9XG4gIHJldHVybiB2YXJpYXRpb247XG59XG5cbi8qKlxuICogTGlzdCBvZiBhY2NlcHRlZCBwbGFjZW1lbnRzIHRvIHVzZSBhcyB2YWx1ZXMgb2YgdGhlIGBwbGFjZW1lbnRgIG9wdGlvbi48YnIgLz5cbiAqIFZhbGlkIHBsYWNlbWVudHMgYXJlOlxuICogLSBgYXV0b2BcbiAqIC0gYHRvcGBcbiAqIC0gYHJpZ2h0YFxuICogLSBgYm90dG9tYFxuICogLSBgbGVmdGBcbiAqXG4gKiBFYWNoIHBsYWNlbWVudCBjYW4gaGF2ZSBhIHZhcmlhdGlvbiBmcm9tIHRoaXMgbGlzdDpcbiAqIC0gYC1zdGFydGBcbiAqIC0gYC1lbmRgXG4gKlxuICogVmFyaWF0aW9ucyBhcmUgaW50ZXJwcmV0ZWQgZWFzaWx5IGlmIHlvdSB0aGluayBvZiB0aGVtIGFzIHRoZSBsZWZ0IHRvIHJpZ2h0XG4gKiB3cml0dGVuIGxhbmd1YWdlcy4gSG9yaXpvbnRhbGx5IChgdG9wYCBhbmQgYGJvdHRvbWApLCBgc3RhcnRgIGlzIGxlZnQgYW5kIGBlbmRgXG4gKiBpcyByaWdodC48YnIgLz5cbiAqIFZlcnRpY2FsbHkgKGBsZWZ0YCBhbmQgYHJpZ2h0YCksIGBzdGFydGAgaXMgdG9wIGFuZCBgZW5kYCBpcyBib3R0b20uXG4gKlxuICogU29tZSB2YWxpZCBleGFtcGxlcyBhcmU6XG4gKiAtIGB0b3AtZW5kYCAob24gdG9wIG9mIHJlZmVyZW5jZSwgcmlnaHQgYWxpZ25lZClcbiAqIC0gYHJpZ2h0LXN0YXJ0YCAob24gcmlnaHQgb2YgcmVmZXJlbmNlLCB0b3AgYWxpZ25lZClcbiAqIC0gYGJvdHRvbWAgKG9uIGJvdHRvbSwgY2VudGVyZWQpXG4gKiAtIGBhdXRvLXJpZ2h0YCAob24gdGhlIHNpZGUgd2l0aCBtb3JlIHNwYWNlIGF2YWlsYWJsZSwgYWxpZ25tZW50IGRlcGVuZHMgYnkgcGxhY2VtZW50KVxuICpcbiAqIEBzdGF0aWNcbiAqIEB0eXBlIHtBcnJheX1cbiAqIEBlbnVtIHtTdHJpbmd9XG4gKiBAcmVhZG9ubHlcbiAqIEBtZXRob2QgcGxhY2VtZW50c1xuICogQG1lbWJlcm9mIFBvcHBlclxuICovXG52YXIgcGxhY2VtZW50cyA9IFsnYXV0by1zdGFydCcsICdhdXRvJywgJ2F1dG8tZW5kJywgJ3RvcC1zdGFydCcsICd0b3AnLCAndG9wLWVuZCcsICdyaWdodC1zdGFydCcsICdyaWdodCcsICdyaWdodC1lbmQnLCAnYm90dG9tLWVuZCcsICdib3R0b20nLCAnYm90dG9tLXN0YXJ0JywgJ2xlZnQtZW5kJywgJ2xlZnQnLCAnbGVmdC1zdGFydCddO1xuXG4vLyBHZXQgcmlkIG9mIGBhdXRvYCBgYXV0by1zdGFydGAgYW5kIGBhdXRvLWVuZGBcbnZhciB2YWxpZFBsYWNlbWVudHMgPSBwbGFjZW1lbnRzLnNsaWNlKDMpO1xuXG4vKipcbiAqIEdpdmVuIGFuIGluaXRpYWwgcGxhY2VtZW50LCByZXR1cm5zIGFsbCB0aGUgc3Vic2VxdWVudCBwbGFjZW1lbnRzXG4gKiBjbG9ja3dpc2UgKG9yIGNvdW50ZXItY2xvY2t3aXNlKS5cbiAqXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge1N0cmluZ30gcGxhY2VtZW50IC0gQSB2YWxpZCBwbGFjZW1lbnQgKGl0IGFjY2VwdHMgdmFyaWF0aW9ucylcbiAqIEBhcmd1bWVudCB7Qm9vbGVhbn0gY291bnRlciAtIFNldCB0byB0cnVlIHRvIHdhbGsgdGhlIHBsYWNlbWVudHMgY291bnRlcmNsb2Nrd2lzZVxuICogQHJldHVybnMge0FycmF5fSBwbGFjZW1lbnRzIGluY2x1ZGluZyB0aGVpciB2YXJpYXRpb25zXG4gKi9cbmZ1bmN0aW9uIGNsb2Nrd2lzZShwbGFjZW1lbnQpIHtcbiAgdmFyIGNvdW50ZXIgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IGZhbHNlO1xuXG4gIHZhciBpbmRleCA9IHZhbGlkUGxhY2VtZW50cy5pbmRleE9mKHBsYWNlbWVudCk7XG4gIHZhciBhcnIgPSB2YWxpZFBsYWNlbWVudHMuc2xpY2UoaW5kZXggKyAxKS5jb25jYXQodmFsaWRQbGFjZW1lbnRzLnNsaWNlKDAsIGluZGV4KSk7XG4gIHJldHVybiBjb3VudGVyID8gYXJyLnJldmVyc2UoKSA6IGFycjtcbn1cblxudmFyIEJFSEFWSU9SUyA9IHtcbiAgRkxJUDogJ2ZsaXAnLFxuICBDTE9DS1dJU0U6ICdjbG9ja3dpc2UnLFxuICBDT1VOVEVSQ0xPQ0tXSVNFOiAnY291bnRlcmNsb2Nrd2lzZSdcbn07XG5cbi8qKlxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2YgTW9kaWZpZXJzXG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgdXBkYXRlIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxuICovXG5mdW5jdGlvbiBmbGlwKGRhdGEsIG9wdGlvbnMpIHtcbiAgLy8gaWYgYGlubmVyYCBtb2RpZmllciBpcyBlbmFibGVkLCB3ZSBjYW4ndCB1c2UgdGhlIGBmbGlwYCBtb2RpZmllclxuICBpZiAoaXNNb2RpZmllckVuYWJsZWQoZGF0YS5pbnN0YW5jZS5tb2RpZmllcnMsICdpbm5lcicpKSB7XG4gICAgcmV0dXJuIGRhdGE7XG4gIH1cblxuICBpZiAoZGF0YS5mbGlwcGVkICYmIGRhdGEucGxhY2VtZW50ID09PSBkYXRhLm9yaWdpbmFsUGxhY2VtZW50KSB7XG4gICAgLy8gc2VlbXMgbGlrZSBmbGlwIGlzIHRyeWluZyB0byBsb29wLCBwcm9iYWJseSB0aGVyZSdzIG5vdCBlbm91Z2ggc3BhY2Ugb24gYW55IG9mIHRoZSBmbGlwcGFibGUgc2lkZXNcbiAgICByZXR1cm4gZGF0YTtcbiAgfVxuXG4gIHZhciBib3VuZGFyaWVzID0gZ2V0Qm91bmRhcmllcyhkYXRhLmluc3RhbmNlLnBvcHBlciwgZGF0YS5pbnN0YW5jZS5yZWZlcmVuY2UsIG9wdGlvbnMucGFkZGluZywgb3B0aW9ucy5ib3VuZGFyaWVzRWxlbWVudCwgZGF0YS5wb3NpdGlvbkZpeGVkKTtcblxuICB2YXIgcGxhY2VtZW50ID0gZGF0YS5wbGFjZW1lbnQuc3BsaXQoJy0nKVswXTtcbiAgdmFyIHBsYWNlbWVudE9wcG9zaXRlID0gZ2V0T3Bwb3NpdGVQbGFjZW1lbnQocGxhY2VtZW50KTtcbiAgdmFyIHZhcmlhdGlvbiA9IGRhdGEucGxhY2VtZW50LnNwbGl0KCctJylbMV0gfHwgJyc7XG5cbiAgdmFyIGZsaXBPcmRlciA9IFtdO1xuXG4gIHN3aXRjaCAob3B0aW9ucy5iZWhhdmlvcikge1xuICAgIGNhc2UgQkVIQVZJT1JTLkZMSVA6XG4gICAgICBmbGlwT3JkZXIgPSBbcGxhY2VtZW50LCBwbGFjZW1lbnRPcHBvc2l0ZV07XG4gICAgICBicmVhaztcbiAgICBjYXNlIEJFSEFWSU9SUy5DTE9DS1dJU0U6XG4gICAgICBmbGlwT3JkZXIgPSBjbG9ja3dpc2UocGxhY2VtZW50KTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgQkVIQVZJT1JTLkNPVU5URVJDTE9DS1dJU0U6XG4gICAgICBmbGlwT3JkZXIgPSBjbG9ja3dpc2UocGxhY2VtZW50LCB0cnVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICBmbGlwT3JkZXIgPSBvcHRpb25zLmJlaGF2aW9yO1xuICB9XG5cbiAgZmxpcE9yZGVyLmZvckVhY2goZnVuY3Rpb24gKHN0ZXAsIGluZGV4KSB7XG4gICAgaWYgKHBsYWNlbWVudCAhPT0gc3RlcCB8fCBmbGlwT3JkZXIubGVuZ3RoID09PSBpbmRleCArIDEpIHtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cblxuICAgIHBsYWNlbWVudCA9IGRhdGEucGxhY2VtZW50LnNwbGl0KCctJylbMF07XG4gICAgcGxhY2VtZW50T3Bwb3NpdGUgPSBnZXRPcHBvc2l0ZVBsYWNlbWVudChwbGFjZW1lbnQpO1xuXG4gICAgdmFyIHBvcHBlck9mZnNldHMgPSBkYXRhLm9mZnNldHMucG9wcGVyO1xuICAgIHZhciByZWZPZmZzZXRzID0gZGF0YS5vZmZzZXRzLnJlZmVyZW5jZTtcblxuICAgIC8vIHVzaW5nIGZsb29yIGJlY2F1c2UgdGhlIHJlZmVyZW5jZSBvZmZzZXRzIG1heSBjb250YWluIGRlY2ltYWxzIHdlIGFyZSBub3QgZ29pbmcgdG8gY29uc2lkZXIgaGVyZVxuICAgIHZhciBmbG9vciA9IE1hdGguZmxvb3I7XG4gICAgdmFyIG92ZXJsYXBzUmVmID0gcGxhY2VtZW50ID09PSAnbGVmdCcgJiYgZmxvb3IocG9wcGVyT2Zmc2V0cy5yaWdodCkgPiBmbG9vcihyZWZPZmZzZXRzLmxlZnQpIHx8IHBsYWNlbWVudCA9PT0gJ3JpZ2h0JyAmJiBmbG9vcihwb3BwZXJPZmZzZXRzLmxlZnQpIDwgZmxvb3IocmVmT2Zmc2V0cy5yaWdodCkgfHwgcGxhY2VtZW50ID09PSAndG9wJyAmJiBmbG9vcihwb3BwZXJPZmZzZXRzLmJvdHRvbSkgPiBmbG9vcihyZWZPZmZzZXRzLnRvcCkgfHwgcGxhY2VtZW50ID09PSAnYm90dG9tJyAmJiBmbG9vcihwb3BwZXJPZmZzZXRzLnRvcCkgPCBmbG9vcihyZWZPZmZzZXRzLmJvdHRvbSk7XG5cbiAgICB2YXIgb3ZlcmZsb3dzTGVmdCA9IGZsb29yKHBvcHBlck9mZnNldHMubGVmdCkgPCBmbG9vcihib3VuZGFyaWVzLmxlZnQpO1xuICAgIHZhciBvdmVyZmxvd3NSaWdodCA9IGZsb29yKHBvcHBlck9mZnNldHMucmlnaHQpID4gZmxvb3IoYm91bmRhcmllcy5yaWdodCk7XG4gICAgdmFyIG92ZXJmbG93c1RvcCA9IGZsb29yKHBvcHBlck9mZnNldHMudG9wKSA8IGZsb29yKGJvdW5kYXJpZXMudG9wKTtcbiAgICB2YXIgb3ZlcmZsb3dzQm90dG9tID0gZmxvb3IocG9wcGVyT2Zmc2V0cy5ib3R0b20pID4gZmxvb3IoYm91bmRhcmllcy5ib3R0b20pO1xuXG4gICAgdmFyIG92ZXJmbG93c0JvdW5kYXJpZXMgPSBwbGFjZW1lbnQgPT09ICdsZWZ0JyAmJiBvdmVyZmxvd3NMZWZ0IHx8IHBsYWNlbWVudCA9PT0gJ3JpZ2h0JyAmJiBvdmVyZmxvd3NSaWdodCB8fCBwbGFjZW1lbnQgPT09ICd0b3AnICYmIG92ZXJmbG93c1RvcCB8fCBwbGFjZW1lbnQgPT09ICdib3R0b20nICYmIG92ZXJmbG93c0JvdHRvbTtcblxuICAgIC8vIGZsaXAgdGhlIHZhcmlhdGlvbiBpZiByZXF1aXJlZFxuICAgIHZhciBpc1ZlcnRpY2FsID0gWyd0b3AnLCAnYm90dG9tJ10uaW5kZXhPZihwbGFjZW1lbnQpICE9PSAtMTtcbiAgICB2YXIgZmxpcHBlZFZhcmlhdGlvbiA9ICEhb3B0aW9ucy5mbGlwVmFyaWF0aW9ucyAmJiAoaXNWZXJ0aWNhbCAmJiB2YXJpYXRpb24gPT09ICdzdGFydCcgJiYgb3ZlcmZsb3dzTGVmdCB8fCBpc1ZlcnRpY2FsICYmIHZhcmlhdGlvbiA9PT0gJ2VuZCcgJiYgb3ZlcmZsb3dzUmlnaHQgfHwgIWlzVmVydGljYWwgJiYgdmFyaWF0aW9uID09PSAnc3RhcnQnICYmIG92ZXJmbG93c1RvcCB8fCAhaXNWZXJ0aWNhbCAmJiB2YXJpYXRpb24gPT09ICdlbmQnICYmIG92ZXJmbG93c0JvdHRvbSk7XG5cbiAgICBpZiAob3ZlcmxhcHNSZWYgfHwgb3ZlcmZsb3dzQm91bmRhcmllcyB8fCBmbGlwcGVkVmFyaWF0aW9uKSB7XG4gICAgICAvLyB0aGlzIGJvb2xlYW4gdG8gZGV0ZWN0IGFueSBmbGlwIGxvb3BcbiAgICAgIGRhdGEuZmxpcHBlZCA9IHRydWU7XG5cbiAgICAgIGlmIChvdmVybGFwc1JlZiB8fCBvdmVyZmxvd3NCb3VuZGFyaWVzKSB7XG4gICAgICAgIHBsYWNlbWVudCA9IGZsaXBPcmRlcltpbmRleCArIDFdO1xuICAgICAgfVxuXG4gICAgICBpZiAoZmxpcHBlZFZhcmlhdGlvbikge1xuICAgICAgICB2YXJpYXRpb24gPSBnZXRPcHBvc2l0ZVZhcmlhdGlvbih2YXJpYXRpb24pO1xuICAgICAgfVxuXG4gICAgICBkYXRhLnBsYWNlbWVudCA9IHBsYWNlbWVudCArICh2YXJpYXRpb24gPyAnLScgKyB2YXJpYXRpb24gOiAnJyk7XG5cbiAgICAgIC8vIHRoaXMgb2JqZWN0IGNvbnRhaW5zIGBwb3NpdGlvbmAsIHdlIHdhbnQgdG8gcHJlc2VydmUgaXQgYWxvbmcgd2l0aFxuICAgICAgLy8gYW55IGFkZGl0aW9uYWwgcHJvcGVydHkgd2UgbWF5IGFkZCBpbiB0aGUgZnV0dXJlXG4gICAgICBkYXRhLm9mZnNldHMucG9wcGVyID0gX2V4dGVuZHMoe30sIGRhdGEub2Zmc2V0cy5wb3BwZXIsIGdldFBvcHBlck9mZnNldHMoZGF0YS5pbnN0YW5jZS5wb3BwZXIsIGRhdGEub2Zmc2V0cy5yZWZlcmVuY2UsIGRhdGEucGxhY2VtZW50KSk7XG5cbiAgICAgIGRhdGEgPSBydW5Nb2RpZmllcnMoZGF0YS5pbnN0YW5jZS5tb2RpZmllcnMsIGRhdGEsICdmbGlwJyk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2YgTW9kaWZpZXJzXG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgdXBkYXRlIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxuICovXG5mdW5jdGlvbiBrZWVwVG9nZXRoZXIoZGF0YSkge1xuICB2YXIgX2RhdGEkb2Zmc2V0cyA9IGRhdGEub2Zmc2V0cyxcbiAgICAgIHBvcHBlciA9IF9kYXRhJG9mZnNldHMucG9wcGVyLFxuICAgICAgcmVmZXJlbmNlID0gX2RhdGEkb2Zmc2V0cy5yZWZlcmVuY2U7XG5cbiAgdmFyIHBsYWNlbWVudCA9IGRhdGEucGxhY2VtZW50LnNwbGl0KCctJylbMF07XG4gIHZhciBmbG9vciA9IE1hdGguZmxvb3I7XG4gIHZhciBpc1ZlcnRpY2FsID0gWyd0b3AnLCAnYm90dG9tJ10uaW5kZXhPZihwbGFjZW1lbnQpICE9PSAtMTtcbiAgdmFyIHNpZGUgPSBpc1ZlcnRpY2FsID8gJ3JpZ2h0JyA6ICdib3R0b20nO1xuICB2YXIgb3BTaWRlID0gaXNWZXJ0aWNhbCA/ICdsZWZ0JyA6ICd0b3AnO1xuICB2YXIgbWVhc3VyZW1lbnQgPSBpc1ZlcnRpY2FsID8gJ3dpZHRoJyA6ICdoZWlnaHQnO1xuXG4gIGlmIChwb3BwZXJbc2lkZV0gPCBmbG9vcihyZWZlcmVuY2Vbb3BTaWRlXSkpIHtcbiAgICBkYXRhLm9mZnNldHMucG9wcGVyW29wU2lkZV0gPSBmbG9vcihyZWZlcmVuY2Vbb3BTaWRlXSkgLSBwb3BwZXJbbWVhc3VyZW1lbnRdO1xuICB9XG4gIGlmIChwb3BwZXJbb3BTaWRlXSA+IGZsb29yKHJlZmVyZW5jZVtzaWRlXSkpIHtcbiAgICBkYXRhLm9mZnNldHMucG9wcGVyW29wU2lkZV0gPSBmbG9vcihyZWZlcmVuY2Vbc2lkZV0pO1xuICB9XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogQ29udmVydHMgYSBzdHJpbmcgY29udGFpbmluZyB2YWx1ZSArIHVuaXQgaW50byBhIHB4IHZhbHVlIG51bWJlclxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2Yge21vZGlmaWVyc35vZmZzZXR9XG4gKiBAcHJpdmF0ZVxuICogQGFyZ3VtZW50IHtTdHJpbmd9IHN0ciAtIFZhbHVlICsgdW5pdCBzdHJpbmdcbiAqIEBhcmd1bWVudCB7U3RyaW5nfSBtZWFzdXJlbWVudCAtIGBoZWlnaHRgIG9yIGB3aWR0aGBcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBwb3BwZXJPZmZzZXRzXG4gKiBAYXJndW1lbnQge09iamVjdH0gcmVmZXJlbmNlT2Zmc2V0c1xuICogQHJldHVybnMge051bWJlcnxTdHJpbmd9XG4gKiBWYWx1ZSBpbiBwaXhlbHMsIG9yIG9yaWdpbmFsIHN0cmluZyBpZiBubyB2YWx1ZXMgd2VyZSBleHRyYWN0ZWRcbiAqL1xuZnVuY3Rpb24gdG9WYWx1ZShzdHIsIG1lYXN1cmVtZW50LCBwb3BwZXJPZmZzZXRzLCByZWZlcmVuY2VPZmZzZXRzKSB7XG4gIC8vIHNlcGFyYXRlIHZhbHVlIGZyb20gdW5pdFxuICB2YXIgc3BsaXQgPSBzdHIubWF0Y2goLygoPzpcXC18XFwrKT9cXGQqXFwuP1xcZCopKC4qKS8pO1xuICB2YXIgdmFsdWUgPSArc3BsaXRbMV07XG4gIHZhciB1bml0ID0gc3BsaXRbMl07XG5cbiAgLy8gSWYgaXQncyBub3QgYSBudW1iZXIgaXQncyBhbiBvcGVyYXRvciwgSSBndWVzc1xuICBpZiAoIXZhbHVlKSB7XG4gICAgcmV0dXJuIHN0cjtcbiAgfVxuXG4gIGlmICh1bml0LmluZGV4T2YoJyUnKSA9PT0gMCkge1xuICAgIHZhciBlbGVtZW50ID0gdm9pZCAwO1xuICAgIHN3aXRjaCAodW5pdCkge1xuICAgICAgY2FzZSAnJXAnOlxuICAgICAgICBlbGVtZW50ID0gcG9wcGVyT2Zmc2V0cztcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICclJzpcbiAgICAgIGNhc2UgJyVyJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGVsZW1lbnQgPSByZWZlcmVuY2VPZmZzZXRzO1xuICAgIH1cblxuICAgIHZhciByZWN0ID0gZ2V0Q2xpZW50UmVjdChlbGVtZW50KTtcbiAgICByZXR1cm4gcmVjdFttZWFzdXJlbWVudF0gLyAxMDAgKiB2YWx1ZTtcbiAgfSBlbHNlIGlmICh1bml0ID09PSAndmgnIHx8IHVuaXQgPT09ICd2dycpIHtcbiAgICAvLyBpZiBpcyBhIHZoIG9yIHZ3LCB3ZSBjYWxjdWxhdGUgdGhlIHNpemUgYmFzZWQgb24gdGhlIHZpZXdwb3J0XG4gICAgdmFyIHNpemUgPSB2b2lkIDA7XG4gICAgaWYgKHVuaXQgPT09ICd2aCcpIHtcbiAgICAgIHNpemUgPSBNYXRoLm1heChkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0LCB3aW5kb3cuaW5uZXJIZWlnaHQgfHwgMCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNpemUgPSBNYXRoLm1heChkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGgsIHdpbmRvdy5pbm5lcldpZHRoIHx8IDApO1xuICAgIH1cbiAgICByZXR1cm4gc2l6ZSAvIDEwMCAqIHZhbHVlO1xuICB9IGVsc2Uge1xuICAgIC8vIGlmIGlzIGFuIGV4cGxpY2l0IHBpeGVsIHVuaXQsIHdlIGdldCByaWQgb2YgdGhlIHVuaXQgYW5kIGtlZXAgdGhlIHZhbHVlXG4gICAgLy8gaWYgaXMgYW4gaW1wbGljaXQgdW5pdCwgaXQncyBweCwgYW5kIHdlIHJldHVybiBqdXN0IHRoZSB2YWx1ZVxuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxufVxuXG4vKipcbiAqIFBhcnNlIGFuIGBvZmZzZXRgIHN0cmluZyB0byBleHRyYXBvbGF0ZSBgeGAgYW5kIGB5YCBudW1lcmljIG9mZnNldHMuXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiB7bW9kaWZpZXJzfm9mZnNldH1cbiAqIEBwcml2YXRlXG4gKiBAYXJndW1lbnQge1N0cmluZ30gb2Zmc2V0XG4gKiBAYXJndW1lbnQge09iamVjdH0gcG9wcGVyT2Zmc2V0c1xuICogQGFyZ3VtZW50IHtPYmplY3R9IHJlZmVyZW5jZU9mZnNldHNcbiAqIEBhcmd1bWVudCB7U3RyaW5nfSBiYXNlUGxhY2VtZW50XG4gKiBAcmV0dXJucyB7QXJyYXl9IGEgdHdvIGNlbGxzIGFycmF5IHdpdGggeCBhbmQgeSBvZmZzZXRzIGluIG51bWJlcnNcbiAqL1xuZnVuY3Rpb24gcGFyc2VPZmZzZXQob2Zmc2V0LCBwb3BwZXJPZmZzZXRzLCByZWZlcmVuY2VPZmZzZXRzLCBiYXNlUGxhY2VtZW50KSB7XG4gIHZhciBvZmZzZXRzID0gWzAsIDBdO1xuXG4gIC8vIFVzZSBoZWlnaHQgaWYgcGxhY2VtZW50IGlzIGxlZnQgb3IgcmlnaHQgYW5kIGluZGV4IGlzIDAgb3RoZXJ3aXNlIHVzZSB3aWR0aFxuICAvLyBpbiB0aGlzIHdheSB0aGUgZmlyc3Qgb2Zmc2V0IHdpbGwgdXNlIGFuIGF4aXMgYW5kIHRoZSBzZWNvbmQgb25lXG4gIC8vIHdpbGwgdXNlIHRoZSBvdGhlciBvbmVcbiAgdmFyIHVzZUhlaWdodCA9IFsncmlnaHQnLCAnbGVmdCddLmluZGV4T2YoYmFzZVBsYWNlbWVudCkgIT09IC0xO1xuXG4gIC8vIFNwbGl0IHRoZSBvZmZzZXQgc3RyaW5nIHRvIG9idGFpbiBhIGxpc3Qgb2YgdmFsdWVzIGFuZCBvcGVyYW5kc1xuICAvLyBUaGUgcmVnZXggYWRkcmVzc2VzIHZhbHVlcyB3aXRoIHRoZSBwbHVzIG9yIG1pbnVzIHNpZ24gaW4gZnJvbnQgKCsxMCwgLTIwLCBldGMpXG4gIHZhciBmcmFnbWVudHMgPSBvZmZzZXQuc3BsaXQoLyhcXCt8XFwtKS8pLm1hcChmdW5jdGlvbiAoZnJhZykge1xuICAgIHJldHVybiBmcmFnLnRyaW0oKTtcbiAgfSk7XG5cbiAgLy8gRGV0ZWN0IGlmIHRoZSBvZmZzZXQgc3RyaW5nIGNvbnRhaW5zIGEgcGFpciBvZiB2YWx1ZXMgb3IgYSBzaW5nbGUgb25lXG4gIC8vIHRoZXkgY291bGQgYmUgc2VwYXJhdGVkIGJ5IGNvbW1hIG9yIHNwYWNlXG4gIHZhciBkaXZpZGVyID0gZnJhZ21lbnRzLmluZGV4T2YoZmluZChmcmFnbWVudHMsIGZ1bmN0aW9uIChmcmFnKSB7XG4gICAgcmV0dXJuIGZyYWcuc2VhcmNoKC8sfFxccy8pICE9PSAtMTtcbiAgfSkpO1xuXG4gIGlmIChmcmFnbWVudHNbZGl2aWRlcl0gJiYgZnJhZ21lbnRzW2RpdmlkZXJdLmluZGV4T2YoJywnKSA9PT0gLTEpIHtcbiAgICBjb25zb2xlLndhcm4oJ09mZnNldHMgc2VwYXJhdGVkIGJ5IHdoaXRlIHNwYWNlKHMpIGFyZSBkZXByZWNhdGVkLCB1c2UgYSBjb21tYSAoLCkgaW5zdGVhZC4nKTtcbiAgfVxuXG4gIC8vIElmIGRpdmlkZXIgaXMgZm91bmQsIHdlIGRpdmlkZSB0aGUgbGlzdCBvZiB2YWx1ZXMgYW5kIG9wZXJhbmRzIHRvIGRpdmlkZVxuICAvLyB0aGVtIGJ5IG9mc2V0IFggYW5kIFkuXG4gIHZhciBzcGxpdFJlZ2V4ID0gL1xccyosXFxzKnxcXHMrLztcbiAgdmFyIG9wcyA9IGRpdmlkZXIgIT09IC0xID8gW2ZyYWdtZW50cy5zbGljZSgwLCBkaXZpZGVyKS5jb25jYXQoW2ZyYWdtZW50c1tkaXZpZGVyXS5zcGxpdChzcGxpdFJlZ2V4KVswXV0pLCBbZnJhZ21lbnRzW2RpdmlkZXJdLnNwbGl0KHNwbGl0UmVnZXgpWzFdXS5jb25jYXQoZnJhZ21lbnRzLnNsaWNlKGRpdmlkZXIgKyAxKSldIDogW2ZyYWdtZW50c107XG5cbiAgLy8gQ29udmVydCB0aGUgdmFsdWVzIHdpdGggdW5pdHMgdG8gYWJzb2x1dGUgcGl4ZWxzIHRvIGFsbG93IG91ciBjb21wdXRhdGlvbnNcbiAgb3BzID0gb3BzLm1hcChmdW5jdGlvbiAob3AsIGluZGV4KSB7XG4gICAgLy8gTW9zdCBvZiB0aGUgdW5pdHMgcmVseSBvbiB0aGUgb3JpZW50YXRpb24gb2YgdGhlIHBvcHBlclxuICAgIHZhciBtZWFzdXJlbWVudCA9IChpbmRleCA9PT0gMSA/ICF1c2VIZWlnaHQgOiB1c2VIZWlnaHQpID8gJ2hlaWdodCcgOiAnd2lkdGgnO1xuICAgIHZhciBtZXJnZVdpdGhQcmV2aW91cyA9IGZhbHNlO1xuICAgIHJldHVybiBvcFxuICAgIC8vIFRoaXMgYWdncmVnYXRlcyBhbnkgYCtgIG9yIGAtYCBzaWduIHRoYXQgYXJlbid0IGNvbnNpZGVyZWQgb3BlcmF0b3JzXG4gICAgLy8gZS5nLjogMTAgKyArNSA9PiBbMTAsICssICs1XVxuICAgIC5yZWR1Y2UoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgIGlmIChhW2EubGVuZ3RoIC0gMV0gPT09ICcnICYmIFsnKycsICctJ10uaW5kZXhPZihiKSAhPT0gLTEpIHtcbiAgICAgICAgYVthLmxlbmd0aCAtIDFdID0gYjtcbiAgICAgICAgbWVyZ2VXaXRoUHJldmlvdXMgPSB0cnVlO1xuICAgICAgICByZXR1cm4gYTtcbiAgICAgIH0gZWxzZSBpZiAobWVyZ2VXaXRoUHJldmlvdXMpIHtcbiAgICAgICAgYVthLmxlbmd0aCAtIDFdICs9IGI7XG4gICAgICAgIG1lcmdlV2l0aFByZXZpb3VzID0gZmFsc2U7XG4gICAgICAgIHJldHVybiBhO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGEuY29uY2F0KGIpO1xuICAgICAgfVxuICAgIH0sIFtdKVxuICAgIC8vIEhlcmUgd2UgY29udmVydCB0aGUgc3RyaW5nIHZhbHVlcyBpbnRvIG51bWJlciB2YWx1ZXMgKGluIHB4KVxuICAgIC5tYXAoZnVuY3Rpb24gKHN0cikge1xuICAgICAgcmV0dXJuIHRvVmFsdWUoc3RyLCBtZWFzdXJlbWVudCwgcG9wcGVyT2Zmc2V0cywgcmVmZXJlbmNlT2Zmc2V0cyk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIC8vIExvb3AgdHJvdWdoIHRoZSBvZmZzZXRzIGFycmF5cyBhbmQgZXhlY3V0ZSB0aGUgb3BlcmF0aW9uc1xuICBvcHMuZm9yRWFjaChmdW5jdGlvbiAob3AsIGluZGV4KSB7XG4gICAgb3AuZm9yRWFjaChmdW5jdGlvbiAoZnJhZywgaW5kZXgyKSB7XG4gICAgICBpZiAoaXNOdW1lcmljKGZyYWcpKSB7XG4gICAgICAgIG9mZnNldHNbaW5kZXhdICs9IGZyYWcgKiAob3BbaW5kZXgyIC0gMV0gPT09ICctJyA/IC0xIDogMSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xuICByZXR1cm4gb2Zmc2V0cztcbn1cblxuLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiBNb2RpZmllcnNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSB1cGRhdGUgbWV0aG9kXG4gKiBAYXJndW1lbnQge09iamVjdH0gb3B0aW9ucyAtIE1vZGlmaWVycyBjb25maWd1cmF0aW9uIGFuZCBvcHRpb25zXG4gKiBAYXJndW1lbnQge051bWJlcnxTdHJpbmd9IG9wdGlvbnMub2Zmc2V0PTBcbiAqIFRoZSBvZmZzZXQgdmFsdWUgYXMgZGVzY3JpYmVkIGluIHRoZSBtb2RpZmllciBkZXNjcmlwdGlvblxuICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxuICovXG5mdW5jdGlvbiBvZmZzZXQoZGF0YSwgX3JlZikge1xuICB2YXIgb2Zmc2V0ID0gX3JlZi5vZmZzZXQ7XG4gIHZhciBwbGFjZW1lbnQgPSBkYXRhLnBsYWNlbWVudCxcbiAgICAgIF9kYXRhJG9mZnNldHMgPSBkYXRhLm9mZnNldHMsXG4gICAgICBwb3BwZXIgPSBfZGF0YSRvZmZzZXRzLnBvcHBlcixcbiAgICAgIHJlZmVyZW5jZSA9IF9kYXRhJG9mZnNldHMucmVmZXJlbmNlO1xuXG4gIHZhciBiYXNlUGxhY2VtZW50ID0gcGxhY2VtZW50LnNwbGl0KCctJylbMF07XG5cbiAgdmFyIG9mZnNldHMgPSB2b2lkIDA7XG4gIGlmIChpc051bWVyaWMoK29mZnNldCkpIHtcbiAgICBvZmZzZXRzID0gWytvZmZzZXQsIDBdO1xuICB9IGVsc2Uge1xuICAgIG9mZnNldHMgPSBwYXJzZU9mZnNldChvZmZzZXQsIHBvcHBlciwgcmVmZXJlbmNlLCBiYXNlUGxhY2VtZW50KTtcbiAgfVxuXG4gIGlmIChiYXNlUGxhY2VtZW50ID09PSAnbGVmdCcpIHtcbiAgICBwb3BwZXIudG9wICs9IG9mZnNldHNbMF07XG4gICAgcG9wcGVyLmxlZnQgLT0gb2Zmc2V0c1sxXTtcbiAgfSBlbHNlIGlmIChiYXNlUGxhY2VtZW50ID09PSAncmlnaHQnKSB7XG4gICAgcG9wcGVyLnRvcCArPSBvZmZzZXRzWzBdO1xuICAgIHBvcHBlci5sZWZ0ICs9IG9mZnNldHNbMV07XG4gIH0gZWxzZSBpZiAoYmFzZVBsYWNlbWVudCA9PT0gJ3RvcCcpIHtcbiAgICBwb3BwZXIubGVmdCArPSBvZmZzZXRzWzBdO1xuICAgIHBvcHBlci50b3AgLT0gb2Zmc2V0c1sxXTtcbiAgfSBlbHNlIGlmIChiYXNlUGxhY2VtZW50ID09PSAnYm90dG9tJykge1xuICAgIHBvcHBlci5sZWZ0ICs9IG9mZnNldHNbMF07XG4gICAgcG9wcGVyLnRvcCArPSBvZmZzZXRzWzFdO1xuICB9XG5cbiAgZGF0YS5wb3BwZXIgPSBwb3BwZXI7XG4gIHJldHVybiBkYXRhO1xufVxuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIE1vZGlmaWVyc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IGB1cGRhdGVgIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxuICovXG5mdW5jdGlvbiBwcmV2ZW50T3ZlcmZsb3coZGF0YSwgb3B0aW9ucykge1xuICB2YXIgYm91bmRhcmllc0VsZW1lbnQgPSBvcHRpb25zLmJvdW5kYXJpZXNFbGVtZW50IHx8IGdldE9mZnNldFBhcmVudChkYXRhLmluc3RhbmNlLnBvcHBlcik7XG5cbiAgLy8gSWYgb2Zmc2V0UGFyZW50IGlzIHRoZSByZWZlcmVuY2UgZWxlbWVudCwgd2UgcmVhbGx5IHdhbnQgdG9cbiAgLy8gZ28gb25lIHN0ZXAgdXAgYW5kIHVzZSB0aGUgbmV4dCBvZmZzZXRQYXJlbnQgYXMgcmVmZXJlbmNlIHRvXG4gIC8vIGF2b2lkIHRvIG1ha2UgdGhpcyBtb2RpZmllciBjb21wbGV0ZWx5IHVzZWxlc3MgYW5kIGxvb2sgbGlrZSBicm9rZW5cbiAgaWYgKGRhdGEuaW5zdGFuY2UucmVmZXJlbmNlID09PSBib3VuZGFyaWVzRWxlbWVudCkge1xuICAgIGJvdW5kYXJpZXNFbGVtZW50ID0gZ2V0T2Zmc2V0UGFyZW50KGJvdW5kYXJpZXNFbGVtZW50KTtcbiAgfVxuXG4gIC8vIE5PVEU6IERPTSBhY2Nlc3MgaGVyZVxuICAvLyByZXNldHMgdGhlIHBvcHBlcidzIHBvc2l0aW9uIHNvIHRoYXQgdGhlIGRvY3VtZW50IHNpemUgY2FuIGJlIGNhbGN1bGF0ZWQgZXhjbHVkaW5nXG4gIC8vIHRoZSBzaXplIG9mIHRoZSBwb3BwZXIgZWxlbWVudCBpdHNlbGZcbiAgdmFyIHRyYW5zZm9ybVByb3AgPSBnZXRTdXBwb3J0ZWRQcm9wZXJ0eU5hbWUoJ3RyYW5zZm9ybScpO1xuICB2YXIgcG9wcGVyU3R5bGVzID0gZGF0YS5pbnN0YW5jZS5wb3BwZXIuc3R5bGU7IC8vIGFzc2lnbm1lbnQgdG8gaGVscCBtaW5pZmljYXRpb25cbiAgdmFyIHRvcCA9IHBvcHBlclN0eWxlcy50b3AsXG4gICAgICBsZWZ0ID0gcG9wcGVyU3R5bGVzLmxlZnQsXG4gICAgICB0cmFuc2Zvcm0gPSBwb3BwZXJTdHlsZXNbdHJhbnNmb3JtUHJvcF07XG5cbiAgcG9wcGVyU3R5bGVzLnRvcCA9ICcnO1xuICBwb3BwZXJTdHlsZXMubGVmdCA9ICcnO1xuICBwb3BwZXJTdHlsZXNbdHJhbnNmb3JtUHJvcF0gPSAnJztcblxuICB2YXIgYm91bmRhcmllcyA9IGdldEJvdW5kYXJpZXMoZGF0YS5pbnN0YW5jZS5wb3BwZXIsIGRhdGEuaW5zdGFuY2UucmVmZXJlbmNlLCBvcHRpb25zLnBhZGRpbmcsIGJvdW5kYXJpZXNFbGVtZW50LCBkYXRhLnBvc2l0aW9uRml4ZWQpO1xuXG4gIC8vIE5PVEU6IERPTSBhY2Nlc3MgaGVyZVxuICAvLyByZXN0b3JlcyB0aGUgb3JpZ2luYWwgc3R5bGUgcHJvcGVydGllcyBhZnRlciB0aGUgb2Zmc2V0cyBoYXZlIGJlZW4gY29tcHV0ZWRcbiAgcG9wcGVyU3R5bGVzLnRvcCA9IHRvcDtcbiAgcG9wcGVyU3R5bGVzLmxlZnQgPSBsZWZ0O1xuICBwb3BwZXJTdHlsZXNbdHJhbnNmb3JtUHJvcF0gPSB0cmFuc2Zvcm07XG5cbiAgb3B0aW9ucy5ib3VuZGFyaWVzID0gYm91bmRhcmllcztcblxuICB2YXIgb3JkZXIgPSBvcHRpb25zLnByaW9yaXR5O1xuICB2YXIgcG9wcGVyID0gZGF0YS5vZmZzZXRzLnBvcHBlcjtcblxuICB2YXIgY2hlY2sgPSB7XG4gICAgcHJpbWFyeTogZnVuY3Rpb24gcHJpbWFyeShwbGFjZW1lbnQpIHtcbiAgICAgIHZhciB2YWx1ZSA9IHBvcHBlcltwbGFjZW1lbnRdO1xuICAgICAgaWYgKHBvcHBlcltwbGFjZW1lbnRdIDwgYm91bmRhcmllc1twbGFjZW1lbnRdICYmICFvcHRpb25zLmVzY2FwZVdpdGhSZWZlcmVuY2UpIHtcbiAgICAgICAgdmFsdWUgPSBNYXRoLm1heChwb3BwZXJbcGxhY2VtZW50XSwgYm91bmRhcmllc1twbGFjZW1lbnRdKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBkZWZpbmVQcm9wZXJ0eSh7fSwgcGxhY2VtZW50LCB2YWx1ZSk7XG4gICAgfSxcbiAgICBzZWNvbmRhcnk6IGZ1bmN0aW9uIHNlY29uZGFyeShwbGFjZW1lbnQpIHtcbiAgICAgIHZhciBtYWluU2lkZSA9IHBsYWNlbWVudCA9PT0gJ3JpZ2h0JyA/ICdsZWZ0JyA6ICd0b3AnO1xuICAgICAgdmFyIHZhbHVlID0gcG9wcGVyW21haW5TaWRlXTtcbiAgICAgIGlmIChwb3BwZXJbcGxhY2VtZW50XSA+IGJvdW5kYXJpZXNbcGxhY2VtZW50XSAmJiAhb3B0aW9ucy5lc2NhcGVXaXRoUmVmZXJlbmNlKSB7XG4gICAgICAgIHZhbHVlID0gTWF0aC5taW4ocG9wcGVyW21haW5TaWRlXSwgYm91bmRhcmllc1twbGFjZW1lbnRdIC0gKHBsYWNlbWVudCA9PT0gJ3JpZ2h0JyA/IHBvcHBlci53aWR0aCA6IHBvcHBlci5oZWlnaHQpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBkZWZpbmVQcm9wZXJ0eSh7fSwgbWFpblNpZGUsIHZhbHVlKTtcbiAgICB9XG4gIH07XG5cbiAgb3JkZXIuZm9yRWFjaChmdW5jdGlvbiAocGxhY2VtZW50KSB7XG4gICAgdmFyIHNpZGUgPSBbJ2xlZnQnLCAndG9wJ10uaW5kZXhPZihwbGFjZW1lbnQpICE9PSAtMSA/ICdwcmltYXJ5JyA6ICdzZWNvbmRhcnknO1xuICAgIHBvcHBlciA9IF9leHRlbmRzKHt9LCBwb3BwZXIsIGNoZWNrW3NpZGVdKHBsYWNlbWVudCkpO1xuICB9KTtcblxuICBkYXRhLm9mZnNldHMucG9wcGVyID0gcG9wcGVyO1xuXG4gIHJldHVybiBkYXRhO1xufVxuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIE1vZGlmaWVyc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IGB1cGRhdGVgIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxuICovXG5mdW5jdGlvbiBzaGlmdChkYXRhKSB7XG4gIHZhciBwbGFjZW1lbnQgPSBkYXRhLnBsYWNlbWVudDtcbiAgdmFyIGJhc2VQbGFjZW1lbnQgPSBwbGFjZW1lbnQuc3BsaXQoJy0nKVswXTtcbiAgdmFyIHNoaWZ0dmFyaWF0aW9uID0gcGxhY2VtZW50LnNwbGl0KCctJylbMV07XG5cbiAgLy8gaWYgc2hpZnQgc2hpZnR2YXJpYXRpb24gaXMgc3BlY2lmaWVkLCBydW4gdGhlIG1vZGlmaWVyXG4gIGlmIChzaGlmdHZhcmlhdGlvbikge1xuICAgIHZhciBfZGF0YSRvZmZzZXRzID0gZGF0YS5vZmZzZXRzLFxuICAgICAgICByZWZlcmVuY2UgPSBfZGF0YSRvZmZzZXRzLnJlZmVyZW5jZSxcbiAgICAgICAgcG9wcGVyID0gX2RhdGEkb2Zmc2V0cy5wb3BwZXI7XG5cbiAgICB2YXIgaXNWZXJ0aWNhbCA9IFsnYm90dG9tJywgJ3RvcCddLmluZGV4T2YoYmFzZVBsYWNlbWVudCkgIT09IC0xO1xuICAgIHZhciBzaWRlID0gaXNWZXJ0aWNhbCA/ICdsZWZ0JyA6ICd0b3AnO1xuICAgIHZhciBtZWFzdXJlbWVudCA9IGlzVmVydGljYWwgPyAnd2lkdGgnIDogJ2hlaWdodCc7XG5cbiAgICB2YXIgc2hpZnRPZmZzZXRzID0ge1xuICAgICAgc3RhcnQ6IGRlZmluZVByb3BlcnR5KHt9LCBzaWRlLCByZWZlcmVuY2Vbc2lkZV0pLFxuICAgICAgZW5kOiBkZWZpbmVQcm9wZXJ0eSh7fSwgc2lkZSwgcmVmZXJlbmNlW3NpZGVdICsgcmVmZXJlbmNlW21lYXN1cmVtZW50XSAtIHBvcHBlclttZWFzdXJlbWVudF0pXG4gICAgfTtcblxuICAgIGRhdGEub2Zmc2V0cy5wb3BwZXIgPSBfZXh0ZW5kcyh7fSwgcG9wcGVyLCBzaGlmdE9mZnNldHNbc2hpZnR2YXJpYXRpb25dKTtcbiAgfVxuXG4gIHJldHVybiBkYXRhO1xufVxuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIE1vZGlmaWVyc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IHVwZGF0ZSBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBkYXRhIG9iamVjdCwgcHJvcGVybHkgbW9kaWZpZWRcbiAqL1xuZnVuY3Rpb24gaGlkZShkYXRhKSB7XG4gIGlmICghaXNNb2RpZmllclJlcXVpcmVkKGRhdGEuaW5zdGFuY2UubW9kaWZpZXJzLCAnaGlkZScsICdwcmV2ZW50T3ZlcmZsb3cnKSkge1xuICAgIHJldHVybiBkYXRhO1xuICB9XG5cbiAgdmFyIHJlZlJlY3QgPSBkYXRhLm9mZnNldHMucmVmZXJlbmNlO1xuICB2YXIgYm91bmQgPSBmaW5kKGRhdGEuaW5zdGFuY2UubW9kaWZpZXJzLCBmdW5jdGlvbiAobW9kaWZpZXIpIHtcbiAgICByZXR1cm4gbW9kaWZpZXIubmFtZSA9PT0gJ3ByZXZlbnRPdmVyZmxvdyc7XG4gIH0pLmJvdW5kYXJpZXM7XG5cbiAgaWYgKHJlZlJlY3QuYm90dG9tIDwgYm91bmQudG9wIHx8IHJlZlJlY3QubGVmdCA+IGJvdW5kLnJpZ2h0IHx8IHJlZlJlY3QudG9wID4gYm91bmQuYm90dG9tIHx8IHJlZlJlY3QucmlnaHQgPCBib3VuZC5sZWZ0KSB7XG4gICAgLy8gQXZvaWQgdW5uZWNlc3NhcnkgRE9NIGFjY2VzcyBpZiB2aXNpYmlsaXR5IGhhc24ndCBjaGFuZ2VkXG4gICAgaWYgKGRhdGEuaGlkZSA9PT0gdHJ1ZSkge1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuXG4gICAgZGF0YS5oaWRlID0gdHJ1ZTtcbiAgICBkYXRhLmF0dHJpYnV0ZXNbJ3gtb3V0LW9mLWJvdW5kYXJpZXMnXSA9ICcnO1xuICB9IGVsc2Uge1xuICAgIC8vIEF2b2lkIHVubmVjZXNzYXJ5IERPTSBhY2Nlc3MgaWYgdmlzaWJpbGl0eSBoYXNuJ3QgY2hhbmdlZFxuICAgIGlmIChkYXRhLmhpZGUgPT09IGZhbHNlKSB7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG5cbiAgICBkYXRhLmhpZGUgPSBmYWxzZTtcbiAgICBkYXRhLmF0dHJpYnV0ZXNbJ3gtb3V0LW9mLWJvdW5kYXJpZXMnXSA9IGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2YgTW9kaWZpZXJzXG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgYHVwZGF0ZWAgbWV0aG9kXG4gKiBAYXJndW1lbnQge09iamVjdH0gb3B0aW9ucyAtIE1vZGlmaWVycyBjb25maWd1cmF0aW9uIGFuZCBvcHRpb25zXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgZGF0YSBvYmplY3QsIHByb3Blcmx5IG1vZGlmaWVkXG4gKi9cbmZ1bmN0aW9uIGlubmVyKGRhdGEpIHtcbiAgdmFyIHBsYWNlbWVudCA9IGRhdGEucGxhY2VtZW50O1xuICB2YXIgYmFzZVBsYWNlbWVudCA9IHBsYWNlbWVudC5zcGxpdCgnLScpWzBdO1xuICB2YXIgX2RhdGEkb2Zmc2V0cyA9IGRhdGEub2Zmc2V0cyxcbiAgICAgIHBvcHBlciA9IF9kYXRhJG9mZnNldHMucG9wcGVyLFxuICAgICAgcmVmZXJlbmNlID0gX2RhdGEkb2Zmc2V0cy5yZWZlcmVuY2U7XG5cbiAgdmFyIGlzSG9yaXogPSBbJ2xlZnQnLCAncmlnaHQnXS5pbmRleE9mKGJhc2VQbGFjZW1lbnQpICE9PSAtMTtcblxuICB2YXIgc3VidHJhY3RMZW5ndGggPSBbJ3RvcCcsICdsZWZ0J10uaW5kZXhPZihiYXNlUGxhY2VtZW50KSA9PT0gLTE7XG5cbiAgcG9wcGVyW2lzSG9yaXogPyAnbGVmdCcgOiAndG9wJ10gPSByZWZlcmVuY2VbYmFzZVBsYWNlbWVudF0gLSAoc3VidHJhY3RMZW5ndGggPyBwb3BwZXJbaXNIb3JpeiA/ICd3aWR0aCcgOiAnaGVpZ2h0J10gOiAwKTtcblxuICBkYXRhLnBsYWNlbWVudCA9IGdldE9wcG9zaXRlUGxhY2VtZW50KHBsYWNlbWVudCk7XG4gIGRhdGEub2Zmc2V0cy5wb3BwZXIgPSBnZXRDbGllbnRSZWN0KHBvcHBlcik7XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogTW9kaWZpZXIgZnVuY3Rpb24sIGVhY2ggbW9kaWZpZXIgY2FuIGhhdmUgYSBmdW5jdGlvbiBvZiB0aGlzIHR5cGUgYXNzaWduZWRcbiAqIHRvIGl0cyBgZm5gIHByb3BlcnR5LjxiciAvPlxuICogVGhlc2UgZnVuY3Rpb25zIHdpbGwgYmUgY2FsbGVkIG9uIGVhY2ggdXBkYXRlLCB0aGlzIG1lYW5zIHRoYXQgeW91IG11c3RcbiAqIG1ha2Ugc3VyZSB0aGV5IGFyZSBwZXJmb3JtYW50IGVub3VnaCB0byBhdm9pZCBwZXJmb3JtYW5jZSBib3R0bGVuZWNrcy5cbiAqXG4gKiBAZnVuY3Rpb24gTW9kaWZpZXJGblxuICogQGFyZ3VtZW50IHtkYXRhT2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSBgdXBkYXRlYCBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtkYXRhT2JqZWN0fSBUaGUgZGF0YSBvYmplY3QsIHByb3Blcmx5IG1vZGlmaWVkXG4gKi9cblxuLyoqXG4gKiBNb2RpZmllcnMgYXJlIHBsdWdpbnMgdXNlZCB0byBhbHRlciB0aGUgYmVoYXZpb3Igb2YgeW91ciBwb3BwZXJzLjxiciAvPlxuICogUG9wcGVyLmpzIHVzZXMgYSBzZXQgb2YgOSBtb2RpZmllcnMgdG8gcHJvdmlkZSBhbGwgdGhlIGJhc2ljIGZ1bmN0aW9uYWxpdGllc1xuICogbmVlZGVkIGJ5IHRoZSBsaWJyYXJ5LlxuICpcbiAqIFVzdWFsbHkgeW91IGRvbid0IHdhbnQgdG8gb3ZlcnJpZGUgdGhlIGBvcmRlcmAsIGBmbmAgYW5kIGBvbkxvYWRgIHByb3BzLlxuICogQWxsIHRoZSBvdGhlciBwcm9wZXJ0aWVzIGFyZSBjb25maWd1cmF0aW9ucyB0aGF0IGNvdWxkIGJlIHR3ZWFrZWQuXG4gKiBAbmFtZXNwYWNlIG1vZGlmaWVyc1xuICovXG52YXIgbW9kaWZpZXJzID0ge1xuICAvKipcbiAgICogTW9kaWZpZXIgdXNlZCB0byBzaGlmdCB0aGUgcG9wcGVyIG9uIHRoZSBzdGFydCBvciBlbmQgb2YgaXRzIHJlZmVyZW5jZVxuICAgKiBlbGVtZW50LjxiciAvPlxuICAgKiBJdCB3aWxsIHJlYWQgdGhlIHZhcmlhdGlvbiBvZiB0aGUgYHBsYWNlbWVudGAgcHJvcGVydHkuPGJyIC8+XG4gICAqIEl0IGNhbiBiZSBvbmUgZWl0aGVyIGAtZW5kYCBvciBgLXN0YXJ0YC5cbiAgICogQG1lbWJlcm9mIG1vZGlmaWVyc1xuICAgKiBAaW5uZXJcbiAgICovXG4gIHNoaWZ0OiB7XG4gICAgLyoqIEBwcm9wIHtudW1iZXJ9IG9yZGVyPTEwMCAtIEluZGV4IHVzZWQgdG8gZGVmaW5lIHRoZSBvcmRlciBvZiBleGVjdXRpb24gKi9cbiAgICBvcmRlcjogMTAwLFxuICAgIC8qKiBAcHJvcCB7Qm9vbGVhbn0gZW5hYmxlZD10cnVlIC0gV2hldGhlciB0aGUgbW9kaWZpZXIgaXMgZW5hYmxlZCBvciBub3QgKi9cbiAgICBlbmFibGVkOiB0cnVlLFxuICAgIC8qKiBAcHJvcCB7TW9kaWZpZXJGbn0gKi9cbiAgICBmbjogc2hpZnRcbiAgfSxcblxuICAvKipcbiAgICogVGhlIGBvZmZzZXRgIG1vZGlmaWVyIGNhbiBzaGlmdCB5b3VyIHBvcHBlciBvbiBib3RoIGl0cyBheGlzLlxuICAgKlxuICAgKiBJdCBhY2NlcHRzIHRoZSBmb2xsb3dpbmcgdW5pdHM6XG4gICAqIC0gYHB4YCBvciB1bml0bGVzcywgaW50ZXJwcmV0ZWQgYXMgcGl4ZWxzXG4gICAqIC0gYCVgIG9yIGAlcmAsIHBlcmNlbnRhZ2UgcmVsYXRpdmUgdG8gdGhlIGxlbmd0aCBvZiB0aGUgcmVmZXJlbmNlIGVsZW1lbnRcbiAgICogLSBgJXBgLCBwZXJjZW50YWdlIHJlbGF0aXZlIHRvIHRoZSBsZW5ndGggb2YgdGhlIHBvcHBlciBlbGVtZW50XG4gICAqIC0gYHZ3YCwgQ1NTIHZpZXdwb3J0IHdpZHRoIHVuaXRcbiAgICogLSBgdmhgLCBDU1Mgdmlld3BvcnQgaGVpZ2h0IHVuaXRcbiAgICpcbiAgICogRm9yIGxlbmd0aCBpcyBpbnRlbmRlZCB0aGUgbWFpbiBheGlzIHJlbGF0aXZlIHRvIHRoZSBwbGFjZW1lbnQgb2YgdGhlIHBvcHBlci48YnIgLz5cbiAgICogVGhpcyBtZWFucyB0aGF0IGlmIHRoZSBwbGFjZW1lbnQgaXMgYHRvcGAgb3IgYGJvdHRvbWAsIHRoZSBsZW5ndGggd2lsbCBiZSB0aGVcbiAgICogYHdpZHRoYC4gSW4gY2FzZSBvZiBgbGVmdGAgb3IgYHJpZ2h0YCwgaXQgd2lsbCBiZSB0aGUgaGVpZ2h0LlxuICAgKlxuICAgKiBZb3UgY2FuIHByb3ZpZGUgYSBzaW5nbGUgdmFsdWUgKGFzIGBOdW1iZXJgIG9yIGBTdHJpbmdgKSwgb3IgYSBwYWlyIG9mIHZhbHVlc1xuICAgKiBhcyBgU3RyaW5nYCBkaXZpZGVkIGJ5IGEgY29tbWEgb3Igb25lIChvciBtb3JlKSB3aGl0ZSBzcGFjZXMuPGJyIC8+XG4gICAqIFRoZSBsYXR0ZXIgaXMgYSBkZXByZWNhdGVkIG1ldGhvZCBiZWNhdXNlIGl0IGxlYWRzIHRvIGNvbmZ1c2lvbiBhbmQgd2lsbCBiZVxuICAgKiByZW1vdmVkIGluIHYyLjxiciAvPlxuICAgKiBBZGRpdGlvbmFsbHksIGl0IGFjY2VwdHMgYWRkaXRpb25zIGFuZCBzdWJ0cmFjdGlvbnMgYmV0d2VlbiBkaWZmZXJlbnQgdW5pdHMuXG4gICAqIE5vdGUgdGhhdCBtdWx0aXBsaWNhdGlvbnMgYW5kIGRpdmlzaW9ucyBhcmVuJ3Qgc3VwcG9ydGVkLlxuICAgKlxuICAgKiBWYWxpZCBleGFtcGxlcyBhcmU6XG4gICAqIGBgYFxuICAgKiAxMFxuICAgKiAnMTAlJ1xuICAgKiAnMTAsIDEwJ1xuICAgKiAnMTAlLCAxMCdcbiAgICogJzEwICsgMTAlJ1xuICAgKiAnMTAgLSA1dmggKyAzJSdcbiAgICogJy0xMHB4ICsgNXZoLCA1cHggLSA2JSdcbiAgICogYGBgXG4gICAqID4gKipOQioqOiBJZiB5b3UgZGVzaXJlIHRvIGFwcGx5IG9mZnNldHMgdG8geW91ciBwb3BwZXJzIGluIGEgd2F5IHRoYXQgbWF5IG1ha2UgdGhlbSBvdmVybGFwXG4gICAqID4gd2l0aCB0aGVpciByZWZlcmVuY2UgZWxlbWVudCwgdW5mb3J0dW5hdGVseSwgeW91IHdpbGwgaGF2ZSB0byBkaXNhYmxlIHRoZSBgZmxpcGAgbW9kaWZpZXIuXG4gICAqID4gTW9yZSBvbiB0aGlzIFtyZWFkaW5nIHRoaXMgaXNzdWVdKGh0dHBzOi8vZ2l0aHViLmNvbS9GZXpWcmFzdGEvcG9wcGVyLmpzL2lzc3Vlcy8zNzMpXG4gICAqXG4gICAqIEBtZW1iZXJvZiBtb2RpZmllcnNcbiAgICogQGlubmVyXG4gICAqL1xuICBvZmZzZXQ6IHtcbiAgICAvKiogQHByb3Age251bWJlcn0gb3JkZXI9MjAwIC0gSW5kZXggdXNlZCB0byBkZWZpbmUgdGhlIG9yZGVyIG9mIGV4ZWN1dGlvbiAqL1xuICAgIG9yZGVyOiAyMDAsXG4gICAgLyoqIEBwcm9wIHtCb29sZWFufSBlbmFibGVkPXRydWUgLSBXaGV0aGVyIHRoZSBtb2RpZmllciBpcyBlbmFibGVkIG9yIG5vdCAqL1xuICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgLyoqIEBwcm9wIHtNb2RpZmllckZufSAqL1xuICAgIGZuOiBvZmZzZXQsXG4gICAgLyoqIEBwcm9wIHtOdW1iZXJ8U3RyaW5nfSBvZmZzZXQ9MFxuICAgICAqIFRoZSBvZmZzZXQgdmFsdWUgYXMgZGVzY3JpYmVkIGluIHRoZSBtb2RpZmllciBkZXNjcmlwdGlvblxuICAgICAqL1xuICAgIG9mZnNldDogMFxuICB9LFxuXG4gIC8qKlxuICAgKiBNb2RpZmllciB1c2VkIHRvIHByZXZlbnQgdGhlIHBvcHBlciBmcm9tIGJlaW5nIHBvc2l0aW9uZWQgb3V0c2lkZSB0aGUgYm91bmRhcnkuXG4gICAqXG4gICAqIEFuIHNjZW5hcmlvIGV4aXN0cyB3aGVyZSB0aGUgcmVmZXJlbmNlIGl0c2VsZiBpcyBub3Qgd2l0aGluIHRoZSBib3VuZGFyaWVzLjxiciAvPlxuICAgKiBXZSBjYW4gc2F5IGl0IGhhcyBcImVzY2FwZWQgdGhlIGJvdW5kYXJpZXNcIiDigJQgb3IganVzdCBcImVzY2FwZWRcIi48YnIgLz5cbiAgICogSW4gdGhpcyBjYXNlIHdlIG5lZWQgdG8gZGVjaWRlIHdoZXRoZXIgdGhlIHBvcHBlciBzaG91bGQgZWl0aGVyOlxuICAgKlxuICAgKiAtIGRldGFjaCBmcm9tIHRoZSByZWZlcmVuY2UgYW5kIHJlbWFpbiBcInRyYXBwZWRcIiBpbiB0aGUgYm91bmRhcmllcywgb3JcbiAgICogLSBpZiBpdCBzaG91bGQgaWdub3JlIHRoZSBib3VuZGFyeSBhbmQgXCJlc2NhcGUgd2l0aCBpdHMgcmVmZXJlbmNlXCJcbiAgICpcbiAgICogV2hlbiBgZXNjYXBlV2l0aFJlZmVyZW5jZWAgaXMgc2V0IHRvYHRydWVgIGFuZCByZWZlcmVuY2UgaXMgY29tcGxldGVseVxuICAgKiBvdXRzaWRlIGl0cyBib3VuZGFyaWVzLCB0aGUgcG9wcGVyIHdpbGwgb3ZlcmZsb3cgKG9yIGNvbXBsZXRlbHkgbGVhdmUpXG4gICAqIHRoZSBib3VuZGFyaWVzIGluIG9yZGVyIHRvIHJlbWFpbiBhdHRhY2hlZCB0byB0aGUgZWRnZSBvZiB0aGUgcmVmZXJlbmNlLlxuICAgKlxuICAgKiBAbWVtYmVyb2YgbW9kaWZpZXJzXG4gICAqIEBpbm5lclxuICAgKi9cbiAgcHJldmVudE92ZXJmbG93OiB7XG4gICAgLyoqIEBwcm9wIHtudW1iZXJ9IG9yZGVyPTMwMCAtIEluZGV4IHVzZWQgdG8gZGVmaW5lIHRoZSBvcmRlciBvZiBleGVjdXRpb24gKi9cbiAgICBvcmRlcjogMzAwLFxuICAgIC8qKiBAcHJvcCB7Qm9vbGVhbn0gZW5hYmxlZD10cnVlIC0gV2hldGhlciB0aGUgbW9kaWZpZXIgaXMgZW5hYmxlZCBvciBub3QgKi9cbiAgICBlbmFibGVkOiB0cnVlLFxuICAgIC8qKiBAcHJvcCB7TW9kaWZpZXJGbn0gKi9cbiAgICBmbjogcHJldmVudE92ZXJmbG93LFxuICAgIC8qKlxuICAgICAqIEBwcm9wIHtBcnJheX0gW3ByaW9yaXR5PVsnbGVmdCcsJ3JpZ2h0JywndG9wJywnYm90dG9tJ11dXG4gICAgICogUG9wcGVyIHdpbGwgdHJ5IHRvIHByZXZlbnQgb3ZlcmZsb3cgZm9sbG93aW5nIHRoZXNlIHByaW9yaXRpZXMgYnkgZGVmYXVsdCxcbiAgICAgKiB0aGVuLCBpdCBjb3VsZCBvdmVyZmxvdyBvbiB0aGUgbGVmdCBhbmQgb24gdG9wIG9mIHRoZSBgYm91bmRhcmllc0VsZW1lbnRgXG4gICAgICovXG4gICAgcHJpb3JpdHk6IFsnbGVmdCcsICdyaWdodCcsICd0b3AnLCAnYm90dG9tJ10sXG4gICAgLyoqXG4gICAgICogQHByb3Age251bWJlcn0gcGFkZGluZz01XG4gICAgICogQW1vdW50IG9mIHBpeGVsIHVzZWQgdG8gZGVmaW5lIGEgbWluaW11bSBkaXN0YW5jZSBiZXR3ZWVuIHRoZSBib3VuZGFyaWVzXG4gICAgICogYW5kIHRoZSBwb3BwZXIgdGhpcyBtYWtlcyBzdXJlIHRoZSBwb3BwZXIgaGFzIGFsd2F5cyBhIGxpdHRsZSBwYWRkaW5nXG4gICAgICogYmV0d2VlbiB0aGUgZWRnZXMgb2YgaXRzIGNvbnRhaW5lclxuICAgICAqL1xuICAgIHBhZGRpbmc6IDUsXG4gICAgLyoqXG4gICAgICogQHByb3Age1N0cmluZ3xIVE1MRWxlbWVudH0gYm91bmRhcmllc0VsZW1lbnQ9J3Njcm9sbFBhcmVudCdcbiAgICAgKiBCb3VuZGFyaWVzIHVzZWQgYnkgdGhlIG1vZGlmaWVyLCBjYW4gYmUgYHNjcm9sbFBhcmVudGAsIGB3aW5kb3dgLFxuICAgICAqIGB2aWV3cG9ydGAgb3IgYW55IERPTSBlbGVtZW50LlxuICAgICAqL1xuICAgIGJvdW5kYXJpZXNFbGVtZW50OiAnc2Nyb2xsUGFyZW50J1xuICB9LFxuXG4gIC8qKlxuICAgKiBNb2RpZmllciB1c2VkIHRvIG1ha2Ugc3VyZSB0aGUgcmVmZXJlbmNlIGFuZCBpdHMgcG9wcGVyIHN0YXkgbmVhciBlYWNob3RoZXJzXG4gICAqIHdpdGhvdXQgbGVhdmluZyBhbnkgZ2FwIGJldHdlZW4gdGhlIHR3by4gRXhwZWNpYWxseSB1c2VmdWwgd2hlbiB0aGUgYXJyb3cgaXNcbiAgICogZW5hYmxlZCBhbmQgeW91IHdhbnQgdG8gYXNzdXJlIGl0IHRvIHBvaW50IHRvIGl0cyByZWZlcmVuY2UgZWxlbWVudC5cbiAgICogSXQgY2FyZXMgb25seSBhYm91dCB0aGUgZmlyc3QgYXhpcywgeW91IGNhbiBzdGlsbCBoYXZlIHBvcHBlcnMgd2l0aCBtYXJnaW5cbiAgICogYmV0d2VlbiB0aGUgcG9wcGVyIGFuZCBpdHMgcmVmZXJlbmNlIGVsZW1lbnQuXG4gICAqIEBtZW1iZXJvZiBtb2RpZmllcnNcbiAgICogQGlubmVyXG4gICAqL1xuICBrZWVwVG9nZXRoZXI6IHtcbiAgICAvKiogQHByb3Age251bWJlcn0gb3JkZXI9NDAwIC0gSW5kZXggdXNlZCB0byBkZWZpbmUgdGhlIG9yZGVyIG9mIGV4ZWN1dGlvbiAqL1xuICAgIG9yZGVyOiA0MDAsXG4gICAgLyoqIEBwcm9wIHtCb29sZWFufSBlbmFibGVkPXRydWUgLSBXaGV0aGVyIHRoZSBtb2RpZmllciBpcyBlbmFibGVkIG9yIG5vdCAqL1xuICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgLyoqIEBwcm9wIHtNb2RpZmllckZufSAqL1xuICAgIGZuOiBrZWVwVG9nZXRoZXJcbiAgfSxcblxuICAvKipcbiAgICogVGhpcyBtb2RpZmllciBpcyB1c2VkIHRvIG1vdmUgdGhlIGBhcnJvd0VsZW1lbnRgIG9mIHRoZSBwb3BwZXIgdG8gbWFrZVxuICAgKiBzdXJlIGl0IGlzIHBvc2l0aW9uZWQgYmV0d2VlbiB0aGUgcmVmZXJlbmNlIGVsZW1lbnQgYW5kIGl0cyBwb3BwZXIgZWxlbWVudC5cbiAgICogSXQgd2lsbCByZWFkIHRoZSBvdXRlciBzaXplIG9mIHRoZSBgYXJyb3dFbGVtZW50YCBub2RlIHRvIGRldGVjdCBob3cgbWFueVxuICAgKiBwaXhlbHMgb2YgY29uanVjdGlvbiBhcmUgbmVlZGVkLlxuICAgKlxuICAgKiBJdCBoYXMgbm8gZWZmZWN0IGlmIG5vIGBhcnJvd0VsZW1lbnRgIGlzIHByb3ZpZGVkLlxuICAgKiBAbWVtYmVyb2YgbW9kaWZpZXJzXG4gICAqIEBpbm5lclxuICAgKi9cbiAgYXJyb3c6IHtcbiAgICAvKiogQHByb3Age251bWJlcn0gb3JkZXI9NTAwIC0gSW5kZXggdXNlZCB0byBkZWZpbmUgdGhlIG9yZGVyIG9mIGV4ZWN1dGlvbiAqL1xuICAgIG9yZGVyOiA1MDAsXG4gICAgLyoqIEBwcm9wIHtCb29sZWFufSBlbmFibGVkPXRydWUgLSBXaGV0aGVyIHRoZSBtb2RpZmllciBpcyBlbmFibGVkIG9yIG5vdCAqL1xuICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgLyoqIEBwcm9wIHtNb2RpZmllckZufSAqL1xuICAgIGZuOiBhcnJvdyxcbiAgICAvKiogQHByb3Age1N0cmluZ3xIVE1MRWxlbWVudH0gZWxlbWVudD0nW3gtYXJyb3ddJyAtIFNlbGVjdG9yIG9yIG5vZGUgdXNlZCBhcyBhcnJvdyAqL1xuICAgIGVsZW1lbnQ6ICdbeC1hcnJvd10nXG4gIH0sXG5cbiAgLyoqXG4gICAqIE1vZGlmaWVyIHVzZWQgdG8gZmxpcCB0aGUgcG9wcGVyJ3MgcGxhY2VtZW50IHdoZW4gaXQgc3RhcnRzIHRvIG92ZXJsYXAgaXRzXG4gICAqIHJlZmVyZW5jZSBlbGVtZW50LlxuICAgKlxuICAgKiBSZXF1aXJlcyB0aGUgYHByZXZlbnRPdmVyZmxvd2AgbW9kaWZpZXIgYmVmb3JlIGl0IGluIG9yZGVyIHRvIHdvcmsuXG4gICAqXG4gICAqICoqTk9URToqKiB0aGlzIG1vZGlmaWVyIHdpbGwgaW50ZXJydXB0IHRoZSBjdXJyZW50IHVwZGF0ZSBjeWNsZSBhbmQgd2lsbFxuICAgKiByZXN0YXJ0IGl0IGlmIGl0IGRldGVjdHMgdGhlIG5lZWQgdG8gZmxpcCB0aGUgcGxhY2VtZW50LlxuICAgKiBAbWVtYmVyb2YgbW9kaWZpZXJzXG4gICAqIEBpbm5lclxuICAgKi9cbiAgZmxpcDoge1xuICAgIC8qKiBAcHJvcCB7bnVtYmVyfSBvcmRlcj02MDAgLSBJbmRleCB1c2VkIHRvIGRlZmluZSB0aGUgb3JkZXIgb2YgZXhlY3V0aW9uICovXG4gICAgb3JkZXI6IDYwMCxcbiAgICAvKiogQHByb3Age0Jvb2xlYW59IGVuYWJsZWQ9dHJ1ZSAtIFdoZXRoZXIgdGhlIG1vZGlmaWVyIGlzIGVuYWJsZWQgb3Igbm90ICovXG4gICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAvKiogQHByb3Age01vZGlmaWVyRm59ICovXG4gICAgZm46IGZsaXAsXG4gICAgLyoqXG4gICAgICogQHByb3Age1N0cmluZ3xBcnJheX0gYmVoYXZpb3I9J2ZsaXAnXG4gICAgICogVGhlIGJlaGF2aW9yIHVzZWQgdG8gY2hhbmdlIHRoZSBwb3BwZXIncyBwbGFjZW1lbnQuIEl0IGNhbiBiZSBvbmUgb2ZcbiAgICAgKiBgZmxpcGAsIGBjbG9ja3dpc2VgLCBgY291bnRlcmNsb2Nrd2lzZWAgb3IgYW4gYXJyYXkgd2l0aCBhIGxpc3Qgb2YgdmFsaWRcbiAgICAgKiBwbGFjZW1lbnRzICh3aXRoIG9wdGlvbmFsIHZhcmlhdGlvbnMpLlxuICAgICAqL1xuICAgIGJlaGF2aW9yOiAnZmxpcCcsXG4gICAgLyoqXG4gICAgICogQHByb3Age251bWJlcn0gcGFkZGluZz01XG4gICAgICogVGhlIHBvcHBlciB3aWxsIGZsaXAgaWYgaXQgaGl0cyB0aGUgZWRnZXMgb2YgdGhlIGBib3VuZGFyaWVzRWxlbWVudGBcbiAgICAgKi9cbiAgICBwYWRkaW5nOiA1LFxuICAgIC8qKlxuICAgICAqIEBwcm9wIHtTdHJpbmd8SFRNTEVsZW1lbnR9IGJvdW5kYXJpZXNFbGVtZW50PSd2aWV3cG9ydCdcbiAgICAgKiBUaGUgZWxlbWVudCB3aGljaCB3aWxsIGRlZmluZSB0aGUgYm91bmRhcmllcyBvZiB0aGUgcG9wcGVyIHBvc2l0aW9uLFxuICAgICAqIHRoZSBwb3BwZXIgd2lsbCBuZXZlciBiZSBwbGFjZWQgb3V0c2lkZSBvZiB0aGUgZGVmaW5lZCBib3VuZGFyaWVzXG4gICAgICogKGV4Y2VwdCBpZiBrZWVwVG9nZXRoZXIgaXMgZW5hYmxlZClcbiAgICAgKi9cbiAgICBib3VuZGFyaWVzRWxlbWVudDogJ3ZpZXdwb3J0J1xuICB9LFxuXG4gIC8qKlxuICAgKiBNb2RpZmllciB1c2VkIHRvIG1ha2UgdGhlIHBvcHBlciBmbG93IHRvd2FyZCB0aGUgaW5uZXIgb2YgdGhlIHJlZmVyZW5jZSBlbGVtZW50LlxuICAgKiBCeSBkZWZhdWx0LCB3aGVuIHRoaXMgbW9kaWZpZXIgaXMgZGlzYWJsZWQsIHRoZSBwb3BwZXIgd2lsbCBiZSBwbGFjZWQgb3V0c2lkZVxuICAgKiB0aGUgcmVmZXJlbmNlIGVsZW1lbnQuXG4gICAqIEBtZW1iZXJvZiBtb2RpZmllcnNcbiAgICogQGlubmVyXG4gICAqL1xuICBpbm5lcjoge1xuICAgIC8qKiBAcHJvcCB7bnVtYmVyfSBvcmRlcj03MDAgLSBJbmRleCB1c2VkIHRvIGRlZmluZSB0aGUgb3JkZXIgb2YgZXhlY3V0aW9uICovXG4gICAgb3JkZXI6IDcwMCxcbiAgICAvKiogQHByb3Age0Jvb2xlYW59IGVuYWJsZWQ9ZmFsc2UgLSBXaGV0aGVyIHRoZSBtb2RpZmllciBpcyBlbmFibGVkIG9yIG5vdCAqL1xuICAgIGVuYWJsZWQ6IGZhbHNlLFxuICAgIC8qKiBAcHJvcCB7TW9kaWZpZXJGbn0gKi9cbiAgICBmbjogaW5uZXJcbiAgfSxcblxuICAvKipcbiAgICogTW9kaWZpZXIgdXNlZCB0byBoaWRlIHRoZSBwb3BwZXIgd2hlbiBpdHMgcmVmZXJlbmNlIGVsZW1lbnQgaXMgb3V0c2lkZSBvZiB0aGVcbiAgICogcG9wcGVyIGJvdW5kYXJpZXMuIEl0IHdpbGwgc2V0IGEgYHgtb3V0LW9mLWJvdW5kYXJpZXNgIGF0dHJpYnV0ZSB3aGljaCBjYW5cbiAgICogYmUgdXNlZCB0byBoaWRlIHdpdGggYSBDU1Mgc2VsZWN0b3IgdGhlIHBvcHBlciB3aGVuIGl0cyByZWZlcmVuY2UgaXNcbiAgICogb3V0IG9mIGJvdW5kYXJpZXMuXG4gICAqXG4gICAqIFJlcXVpcmVzIHRoZSBgcHJldmVudE92ZXJmbG93YCBtb2RpZmllciBiZWZvcmUgaXQgaW4gb3JkZXIgdG8gd29yay5cbiAgICogQG1lbWJlcm9mIG1vZGlmaWVyc1xuICAgKiBAaW5uZXJcbiAgICovXG4gIGhpZGU6IHtcbiAgICAvKiogQHByb3Age251bWJlcn0gb3JkZXI9ODAwIC0gSW5kZXggdXNlZCB0byBkZWZpbmUgdGhlIG9yZGVyIG9mIGV4ZWN1dGlvbiAqL1xuICAgIG9yZGVyOiA4MDAsXG4gICAgLyoqIEBwcm9wIHtCb29sZWFufSBlbmFibGVkPXRydWUgLSBXaGV0aGVyIHRoZSBtb2RpZmllciBpcyBlbmFibGVkIG9yIG5vdCAqL1xuICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgLyoqIEBwcm9wIHtNb2RpZmllckZufSAqL1xuICAgIGZuOiBoaWRlXG4gIH0sXG5cbiAgLyoqXG4gICAqIENvbXB1dGVzIHRoZSBzdHlsZSB0aGF0IHdpbGwgYmUgYXBwbGllZCB0byB0aGUgcG9wcGVyIGVsZW1lbnQgdG8gZ2V0c1xuICAgKiBwcm9wZXJseSBwb3NpdGlvbmVkLlxuICAgKlxuICAgKiBOb3RlIHRoYXQgdGhpcyBtb2RpZmllciB3aWxsIG5vdCB0b3VjaCB0aGUgRE9NLCBpdCBqdXN0IHByZXBhcmVzIHRoZSBzdHlsZXNcbiAgICogc28gdGhhdCBgYXBwbHlTdHlsZWAgbW9kaWZpZXIgY2FuIGFwcGx5IGl0LiBUaGlzIHNlcGFyYXRpb24gaXMgdXNlZnVsXG4gICAqIGluIGNhc2UgeW91IG5lZWQgdG8gcmVwbGFjZSBgYXBwbHlTdHlsZWAgd2l0aCBhIGN1c3RvbSBpbXBsZW1lbnRhdGlvbi5cbiAgICpcbiAgICogVGhpcyBtb2RpZmllciBoYXMgYDg1MGAgYXMgYG9yZGVyYCB2YWx1ZSB0byBtYWludGFpbiBiYWNrd2FyZCBjb21wYXRpYmlsaXR5XG4gICAqIHdpdGggcHJldmlvdXMgdmVyc2lvbnMgb2YgUG9wcGVyLmpzLiBFeHBlY3QgdGhlIG1vZGlmaWVycyBvcmRlcmluZyBtZXRob2RcbiAgICogdG8gY2hhbmdlIGluIGZ1dHVyZSBtYWpvciB2ZXJzaW9ucyBvZiB0aGUgbGlicmFyeS5cbiAgICpcbiAgICogQG1lbWJlcm9mIG1vZGlmaWVyc1xuICAgKiBAaW5uZXJcbiAgICovXG4gIGNvbXB1dGVTdHlsZToge1xuICAgIC8qKiBAcHJvcCB7bnVtYmVyfSBvcmRlcj04NTAgLSBJbmRleCB1c2VkIHRvIGRlZmluZSB0aGUgb3JkZXIgb2YgZXhlY3V0aW9uICovXG4gICAgb3JkZXI6IDg1MCxcbiAgICAvKiogQHByb3Age0Jvb2xlYW59IGVuYWJsZWQ9dHJ1ZSAtIFdoZXRoZXIgdGhlIG1vZGlmaWVyIGlzIGVuYWJsZWQgb3Igbm90ICovXG4gICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAvKiogQHByb3Age01vZGlmaWVyRm59ICovXG4gICAgZm46IGNvbXB1dGVTdHlsZSxcbiAgICAvKipcbiAgICAgKiBAcHJvcCB7Qm9vbGVhbn0gZ3B1QWNjZWxlcmF0aW9uPXRydWVcbiAgICAgKiBJZiB0cnVlLCBpdCB1c2VzIHRoZSBDU1MgM2QgdHJhbnNmb3JtYXRpb24gdG8gcG9zaXRpb24gdGhlIHBvcHBlci5cbiAgICAgKiBPdGhlcndpc2UsIGl0IHdpbGwgdXNlIHRoZSBgdG9wYCBhbmQgYGxlZnRgIHByb3BlcnRpZXMuXG4gICAgICovXG4gICAgZ3B1QWNjZWxlcmF0aW9uOiB0cnVlLFxuICAgIC8qKlxuICAgICAqIEBwcm9wIHtzdHJpbmd9IFt4PSdib3R0b20nXVxuICAgICAqIFdoZXJlIHRvIGFuY2hvciB0aGUgWCBheGlzIChgYm90dG9tYCBvciBgdG9wYCkuIEFLQSBYIG9mZnNldCBvcmlnaW4uXG4gICAgICogQ2hhbmdlIHRoaXMgaWYgeW91ciBwb3BwZXIgc2hvdWxkIGdyb3cgaW4gYSBkaXJlY3Rpb24gZGlmZmVyZW50IGZyb20gYGJvdHRvbWBcbiAgICAgKi9cbiAgICB4OiAnYm90dG9tJyxcbiAgICAvKipcbiAgICAgKiBAcHJvcCB7c3RyaW5nfSBbeD0nbGVmdCddXG4gICAgICogV2hlcmUgdG8gYW5jaG9yIHRoZSBZIGF4aXMgKGBsZWZ0YCBvciBgcmlnaHRgKS4gQUtBIFkgb2Zmc2V0IG9yaWdpbi5cbiAgICAgKiBDaGFuZ2UgdGhpcyBpZiB5b3VyIHBvcHBlciBzaG91bGQgZ3JvdyBpbiBhIGRpcmVjdGlvbiBkaWZmZXJlbnQgZnJvbSBgcmlnaHRgXG4gICAgICovXG4gICAgeTogJ3JpZ2h0J1xuICB9LFxuXG4gIC8qKlxuICAgKiBBcHBsaWVzIHRoZSBjb21wdXRlZCBzdHlsZXMgdG8gdGhlIHBvcHBlciBlbGVtZW50LlxuICAgKlxuICAgKiBBbGwgdGhlIERPTSBtYW5pcHVsYXRpb25zIGFyZSBsaW1pdGVkIHRvIHRoaXMgbW9kaWZpZXIuIFRoaXMgaXMgdXNlZnVsIGluIGNhc2VcbiAgICogeW91IHdhbnQgdG8gaW50ZWdyYXRlIFBvcHBlci5qcyBpbnNpZGUgYSBmcmFtZXdvcmsgb3IgdmlldyBsaWJyYXJ5IGFuZCB5b3VcbiAgICogd2FudCB0byBkZWxlZ2F0ZSBhbGwgdGhlIERPTSBtYW5pcHVsYXRpb25zIHRvIGl0LlxuICAgKlxuICAgKiBOb3RlIHRoYXQgaWYgeW91IGRpc2FibGUgdGhpcyBtb2RpZmllciwgeW91IG11c3QgbWFrZSBzdXJlIHRoZSBwb3BwZXIgZWxlbWVudFxuICAgKiBoYXMgaXRzIHBvc2l0aW9uIHNldCB0byBgYWJzb2x1dGVgIGJlZm9yZSBQb3BwZXIuanMgY2FuIGRvIGl0cyB3b3JrIVxuICAgKlxuICAgKiBKdXN0IGRpc2FibGUgdGhpcyBtb2RpZmllciBhbmQgZGVmaW5lIHlvdSBvd24gdG8gYWNoaWV2ZSB0aGUgZGVzaXJlZCBlZmZlY3QuXG4gICAqXG4gICAqIEBtZW1iZXJvZiBtb2RpZmllcnNcbiAgICogQGlubmVyXG4gICAqL1xuICBhcHBseVN0eWxlOiB7XG4gICAgLyoqIEBwcm9wIHtudW1iZXJ9IG9yZGVyPTkwMCAtIEluZGV4IHVzZWQgdG8gZGVmaW5lIHRoZSBvcmRlciBvZiBleGVjdXRpb24gKi9cbiAgICBvcmRlcjogOTAwLFxuICAgIC8qKiBAcHJvcCB7Qm9vbGVhbn0gZW5hYmxlZD10cnVlIC0gV2hldGhlciB0aGUgbW9kaWZpZXIgaXMgZW5hYmxlZCBvciBub3QgKi9cbiAgICBlbmFibGVkOiB0cnVlLFxuICAgIC8qKiBAcHJvcCB7TW9kaWZpZXJGbn0gKi9cbiAgICBmbjogYXBwbHlTdHlsZSxcbiAgICAvKiogQHByb3Age0Z1bmN0aW9ufSAqL1xuICAgIG9uTG9hZDogYXBwbHlTdHlsZU9uTG9hZCxcbiAgICAvKipcbiAgICAgKiBAZGVwcmVjYXRlZCBzaW5jZSB2ZXJzaW9uIDEuMTAuMCwgdGhlIHByb3BlcnR5IG1vdmVkIHRvIGBjb21wdXRlU3R5bGVgIG1vZGlmaWVyXG4gICAgICogQHByb3Age0Jvb2xlYW59IGdwdUFjY2VsZXJhdGlvbj10cnVlXG4gICAgICogSWYgdHJ1ZSwgaXQgdXNlcyB0aGUgQ1NTIDNkIHRyYW5zZm9ybWF0aW9uIHRvIHBvc2l0aW9uIHRoZSBwb3BwZXIuXG4gICAgICogT3RoZXJ3aXNlLCBpdCB3aWxsIHVzZSB0aGUgYHRvcGAgYW5kIGBsZWZ0YCBwcm9wZXJ0aWVzLlxuICAgICAqL1xuICAgIGdwdUFjY2VsZXJhdGlvbjogdW5kZWZpbmVkXG4gIH1cbn07XG5cbi8qKlxuICogVGhlIGBkYXRhT2JqZWN0YCBpcyBhbiBvYmplY3QgY29udGFpbmluZyBhbGwgdGhlIGluZm9ybWF0aW9ucyB1c2VkIGJ5IFBvcHBlci5qc1xuICogdGhpcyBvYmplY3QgZ2V0IHBhc3NlZCB0byBtb2RpZmllcnMgYW5kIHRvIHRoZSBgb25DcmVhdGVgIGFuZCBgb25VcGRhdGVgIGNhbGxiYWNrcy5cbiAqIEBuYW1lIGRhdGFPYmplY3RcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBkYXRhLmluc3RhbmNlIFRoZSBQb3BwZXIuanMgaW5zdGFuY2VcbiAqIEBwcm9wZXJ0eSB7U3RyaW5nfSBkYXRhLnBsYWNlbWVudCBQbGFjZW1lbnQgYXBwbGllZCB0byBwb3BwZXJcbiAqIEBwcm9wZXJ0eSB7U3RyaW5nfSBkYXRhLm9yaWdpbmFsUGxhY2VtZW50IFBsYWNlbWVudCBvcmlnaW5hbGx5IGRlZmluZWQgb24gaW5pdFxuICogQHByb3BlcnR5IHtCb29sZWFufSBkYXRhLmZsaXBwZWQgVHJ1ZSBpZiBwb3BwZXIgaGFzIGJlZW4gZmxpcHBlZCBieSBmbGlwIG1vZGlmaWVyXG4gKiBAcHJvcGVydHkge0Jvb2xlYW59IGRhdGEuaGlkZSBUcnVlIGlmIHRoZSByZWZlcmVuY2UgZWxlbWVudCBpcyBvdXQgb2YgYm91bmRhcmllcywgdXNlZnVsIHRvIGtub3cgd2hlbiB0byBoaWRlIHRoZSBwb3BwZXIuXG4gKiBAcHJvcGVydHkge0hUTUxFbGVtZW50fSBkYXRhLmFycm93RWxlbWVudCBOb2RlIHVzZWQgYXMgYXJyb3cgYnkgYXJyb3cgbW9kaWZpZXJcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBkYXRhLnN0eWxlcyBBbnkgQ1NTIHByb3BlcnR5IGRlZmluZWQgaGVyZSB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIHBvcHBlciwgaXQgZXhwZWN0cyB0aGUgSmF2YVNjcmlwdCBub21lbmNsYXR1cmUgKGVnLiBgbWFyZ2luQm90dG9tYClcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBkYXRhLmFycm93U3R5bGVzIEFueSBDU1MgcHJvcGVydHkgZGVmaW5lZCBoZXJlIHdpbGwgYmUgYXBwbGllZCB0byB0aGUgcG9wcGVyIGFycm93LCBpdCBleHBlY3RzIHRoZSBKYXZhU2NyaXB0IG5vbWVuY2xhdHVyZSAoZWcuIGBtYXJnaW5Cb3R0b21gKVxuICogQHByb3BlcnR5IHtPYmplY3R9IGRhdGEuYm91bmRhcmllcyBPZmZzZXRzIG9mIHRoZSBwb3BwZXIgYm91bmRhcmllc1xuICogQHByb3BlcnR5IHtPYmplY3R9IGRhdGEub2Zmc2V0cyBUaGUgbWVhc3VyZW1lbnRzIG9mIHBvcHBlciwgcmVmZXJlbmNlIGFuZCBhcnJvdyBlbGVtZW50cy5cbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBkYXRhLm9mZnNldHMucG9wcGVyIGB0b3BgLCBgbGVmdGAsIGB3aWR0aGAsIGBoZWlnaHRgIHZhbHVlc1xuICogQHByb3BlcnR5IHtPYmplY3R9IGRhdGEub2Zmc2V0cy5yZWZlcmVuY2UgYHRvcGAsIGBsZWZ0YCwgYHdpZHRoYCwgYGhlaWdodGAgdmFsdWVzXG4gKiBAcHJvcGVydHkge09iamVjdH0gZGF0YS5vZmZzZXRzLmFycm93XSBgdG9wYCBhbmQgYGxlZnRgIG9mZnNldHMsIG9ubHkgb25lIG9mIHRoZW0gd2lsbCBiZSBkaWZmZXJlbnQgZnJvbSAwXG4gKi9cblxuLyoqXG4gKiBEZWZhdWx0IG9wdGlvbnMgcHJvdmlkZWQgdG8gUG9wcGVyLmpzIGNvbnN0cnVjdG9yLjxiciAvPlxuICogVGhlc2UgY2FuIGJlIG92ZXJyaWRlbiB1c2luZyB0aGUgYG9wdGlvbnNgIGFyZ3VtZW50IG9mIFBvcHBlci5qcy48YnIgLz5cbiAqIFRvIG92ZXJyaWRlIGFuIG9wdGlvbiwgc2ltcGx5IHBhc3MgYXMgM3JkIGFyZ3VtZW50IGFuIG9iamVjdCB3aXRoIHRoZSBzYW1lXG4gKiBzdHJ1Y3R1cmUgb2YgdGhpcyBvYmplY3QsIGV4YW1wbGU6XG4gKiBgYGBcbiAqIG5ldyBQb3BwZXIocmVmLCBwb3AsIHtcbiAqICAgbW9kaWZpZXJzOiB7XG4gKiAgICAgcHJldmVudE92ZXJmbG93OiB7IGVuYWJsZWQ6IGZhbHNlIH1cbiAqICAgfVxuICogfSlcbiAqIGBgYFxuICogQHR5cGUge09iamVjdH1cbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJvZiBQb3BwZXJcbiAqL1xudmFyIERlZmF1bHRzID0ge1xuICAvKipcbiAgICogUG9wcGVyJ3MgcGxhY2VtZW50XG4gICAqIEBwcm9wIHtQb3BwZXIucGxhY2VtZW50c30gcGxhY2VtZW50PSdib3R0b20nXG4gICAqL1xuICBwbGFjZW1lbnQ6ICdib3R0b20nLFxuXG4gIC8qKlxuICAgKiBTZXQgdGhpcyB0byB0cnVlIGlmIHlvdSB3YW50IHBvcHBlciB0byBwb3NpdGlvbiBpdCBzZWxmIGluICdmaXhlZCcgbW9kZVxuICAgKiBAcHJvcCB7Qm9vbGVhbn0gcG9zaXRpb25GaXhlZD1mYWxzZVxuICAgKi9cbiAgcG9zaXRpb25GaXhlZDogZmFsc2UsXG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgZXZlbnRzIChyZXNpemUsIHNjcm9sbCkgYXJlIGluaXRpYWxseSBlbmFibGVkXG4gICAqIEBwcm9wIHtCb29sZWFufSBldmVudHNFbmFibGVkPXRydWVcbiAgICovXG4gIGV2ZW50c0VuYWJsZWQ6IHRydWUsXG5cbiAgLyoqXG4gICAqIFNldCB0byB0cnVlIGlmIHlvdSB3YW50IHRvIGF1dG9tYXRpY2FsbHkgcmVtb3ZlIHRoZSBwb3BwZXIgd2hlblxuICAgKiB5b3UgY2FsbCB0aGUgYGRlc3Ryb3lgIG1ldGhvZC5cbiAgICogQHByb3Age0Jvb2xlYW59IHJlbW92ZU9uRGVzdHJveT1mYWxzZVxuICAgKi9cbiAgcmVtb3ZlT25EZXN0cm95OiBmYWxzZSxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgY2FsbGVkIHdoZW4gdGhlIHBvcHBlciBpcyBjcmVhdGVkLjxiciAvPlxuICAgKiBCeSBkZWZhdWx0LCBpcyBzZXQgdG8gbm8tb3AuPGJyIC8+XG4gICAqIEFjY2VzcyBQb3BwZXIuanMgaW5zdGFuY2Ugd2l0aCBgZGF0YS5pbnN0YW5jZWAuXG4gICAqIEBwcm9wIHtvbkNyZWF0ZX1cbiAgICovXG4gIG9uQ3JlYXRlOiBmdW5jdGlvbiBvbkNyZWF0ZSgpIHt9LFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBjYWxsZWQgd2hlbiB0aGUgcG9wcGVyIGlzIHVwZGF0ZWQsIHRoaXMgY2FsbGJhY2sgaXMgbm90IGNhbGxlZFxuICAgKiBvbiB0aGUgaW5pdGlhbGl6YXRpb24vY3JlYXRpb24gb2YgdGhlIHBvcHBlciwgYnV0IG9ubHkgb24gc3Vic2VxdWVudFxuICAgKiB1cGRhdGVzLjxiciAvPlxuICAgKiBCeSBkZWZhdWx0LCBpcyBzZXQgdG8gbm8tb3AuPGJyIC8+XG4gICAqIEFjY2VzcyBQb3BwZXIuanMgaW5zdGFuY2Ugd2l0aCBgZGF0YS5pbnN0YW5jZWAuXG4gICAqIEBwcm9wIHtvblVwZGF0ZX1cbiAgICovXG4gIG9uVXBkYXRlOiBmdW5jdGlvbiBvblVwZGF0ZSgpIHt9LFxuXG4gIC8qKlxuICAgKiBMaXN0IG9mIG1vZGlmaWVycyB1c2VkIHRvIG1vZGlmeSB0aGUgb2Zmc2V0cyBiZWZvcmUgdGhleSBhcmUgYXBwbGllZCB0byB0aGUgcG9wcGVyLlxuICAgKiBUaGV5IHByb3ZpZGUgbW9zdCBvZiB0aGUgZnVuY3Rpb25hbGl0aWVzIG9mIFBvcHBlci5qc1xuICAgKiBAcHJvcCB7bW9kaWZpZXJzfVxuICAgKi9cbiAgbW9kaWZpZXJzOiBtb2RpZmllcnNcbn07XG5cbi8qKlxuICogQGNhbGxiYWNrIG9uQ3JlYXRlXG4gKiBAcGFyYW0ge2RhdGFPYmplY3R9IGRhdGFcbiAqL1xuXG4vKipcbiAqIEBjYWxsYmFjayBvblVwZGF0ZVxuICogQHBhcmFtIHtkYXRhT2JqZWN0fSBkYXRhXG4gKi9cblxuLy8gVXRpbHNcbi8vIE1ldGhvZHNcbnZhciBQb3BwZXIgPSBmdW5jdGlvbiAoKSB7XG4gIC8qKlxuICAgKiBDcmVhdGUgYSBuZXcgUG9wcGVyLmpzIGluc3RhbmNlXG4gICAqIEBjbGFzcyBQb3BwZXJcbiAgICogQHBhcmFtIHtIVE1MRWxlbWVudHxyZWZlcmVuY2VPYmplY3R9IHJlZmVyZW5jZSAtIFRoZSByZWZlcmVuY2UgZWxlbWVudCB1c2VkIHRvIHBvc2l0aW9uIHRoZSBwb3BwZXJcbiAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gcG9wcGVyIC0gVGhlIEhUTUwgZWxlbWVudCB1c2VkIGFzIHBvcHBlci5cbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBZb3VyIGN1c3RvbSBvcHRpb25zIHRvIG92ZXJyaWRlIHRoZSBvbmVzIGRlZmluZWQgaW4gW0RlZmF1bHRzXSgjZGVmYXVsdHMpXG4gICAqIEByZXR1cm4ge09iamVjdH0gaW5zdGFuY2UgLSBUaGUgZ2VuZXJhdGVkIFBvcHBlci5qcyBpbnN0YW5jZVxuICAgKi9cbiAgZnVuY3Rpb24gUG9wcGVyKHJlZmVyZW5jZSwgcG9wcGVyKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiB7fTtcbiAgICBjbGFzc0NhbGxDaGVjayh0aGlzLCBQb3BwZXIpO1xuXG4gICAgdGhpcy5zY2hlZHVsZVVwZGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoX3RoaXMudXBkYXRlKTtcbiAgICB9O1xuXG4gICAgLy8gbWFrZSB1cGRhdGUoKSBkZWJvdW5jZWQsIHNvIHRoYXQgaXQgb25seSBydW5zIGF0IG1vc3Qgb25jZS1wZXItdGlja1xuICAgIHRoaXMudXBkYXRlID0gZGVib3VuY2UodGhpcy51cGRhdGUuYmluZCh0aGlzKSk7XG5cbiAgICAvLyB3aXRoIHt9IHdlIGNyZWF0ZSBhIG5ldyBvYmplY3Qgd2l0aCB0aGUgb3B0aW9ucyBpbnNpZGUgaXRcbiAgICB0aGlzLm9wdGlvbnMgPSBfZXh0ZW5kcyh7fSwgUG9wcGVyLkRlZmF1bHRzLCBvcHRpb25zKTtcblxuICAgIC8vIGluaXQgc3RhdGVcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgaXNEZXN0cm95ZWQ6IGZhbHNlLFxuICAgICAgaXNDcmVhdGVkOiBmYWxzZSxcbiAgICAgIHNjcm9sbFBhcmVudHM6IFtdXG4gICAgfTtcblxuICAgIC8vIGdldCByZWZlcmVuY2UgYW5kIHBvcHBlciBlbGVtZW50cyAoYWxsb3cgalF1ZXJ5IHdyYXBwZXJzKVxuICAgIHRoaXMucmVmZXJlbmNlID0gcmVmZXJlbmNlICYmIHJlZmVyZW5jZS5qcXVlcnkgPyByZWZlcmVuY2VbMF0gOiByZWZlcmVuY2U7XG4gICAgdGhpcy5wb3BwZXIgPSBwb3BwZXIgJiYgcG9wcGVyLmpxdWVyeSA/IHBvcHBlclswXSA6IHBvcHBlcjtcblxuICAgIC8vIERlZXAgbWVyZ2UgbW9kaWZpZXJzIG9wdGlvbnNcbiAgICB0aGlzLm9wdGlvbnMubW9kaWZpZXJzID0ge307XG4gICAgT2JqZWN0LmtleXMoX2V4dGVuZHMoe30sIFBvcHBlci5EZWZhdWx0cy5tb2RpZmllcnMsIG9wdGlvbnMubW9kaWZpZXJzKSkuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICAgICAgX3RoaXMub3B0aW9ucy5tb2RpZmllcnNbbmFtZV0gPSBfZXh0ZW5kcyh7fSwgUG9wcGVyLkRlZmF1bHRzLm1vZGlmaWVyc1tuYW1lXSB8fCB7fSwgb3B0aW9ucy5tb2RpZmllcnMgPyBvcHRpb25zLm1vZGlmaWVyc1tuYW1lXSA6IHt9KTtcbiAgICB9KTtcblxuICAgIC8vIFJlZmFjdG9yaW5nIG1vZGlmaWVycycgbGlzdCAoT2JqZWN0ID0+IEFycmF5KVxuICAgIHRoaXMubW9kaWZpZXJzID0gT2JqZWN0LmtleXModGhpcy5vcHRpb25zLm1vZGlmaWVycykubWFwKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICByZXR1cm4gX2V4dGVuZHMoe1xuICAgICAgICBuYW1lOiBuYW1lXG4gICAgICB9LCBfdGhpcy5vcHRpb25zLm1vZGlmaWVyc1tuYW1lXSk7XG4gICAgfSlcbiAgICAvLyBzb3J0IHRoZSBtb2RpZmllcnMgYnkgb3JkZXJcbiAgICAuc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgICAgcmV0dXJuIGEub3JkZXIgLSBiLm9yZGVyO1xuICAgIH0pO1xuXG4gICAgLy8gbW9kaWZpZXJzIGhhdmUgdGhlIGFiaWxpdHkgdG8gZXhlY3V0ZSBhcmJpdHJhcnkgY29kZSB3aGVuIFBvcHBlci5qcyBnZXQgaW5pdGVkXG4gICAgLy8gc3VjaCBjb2RlIGlzIGV4ZWN1dGVkIGluIHRoZSBzYW1lIG9yZGVyIG9mIGl0cyBtb2RpZmllclxuICAgIC8vIHRoZXkgY291bGQgYWRkIG5ldyBwcm9wZXJ0aWVzIHRvIHRoZWlyIG9wdGlvbnMgY29uZmlndXJhdGlvblxuICAgIC8vIEJFIEFXQVJFOiBkb24ndCBhZGQgb3B0aW9ucyB0byBgb3B0aW9ucy5tb2RpZmllcnMubmFtZWAgYnV0IHRvIGBtb2RpZmllck9wdGlvbnNgIVxuICAgIHRoaXMubW9kaWZpZXJzLmZvckVhY2goZnVuY3Rpb24gKG1vZGlmaWVyT3B0aW9ucykge1xuICAgICAgaWYgKG1vZGlmaWVyT3B0aW9ucy5lbmFibGVkICYmIGlzRnVuY3Rpb24obW9kaWZpZXJPcHRpb25zLm9uTG9hZCkpIHtcbiAgICAgICAgbW9kaWZpZXJPcHRpb25zLm9uTG9hZChfdGhpcy5yZWZlcmVuY2UsIF90aGlzLnBvcHBlciwgX3RoaXMub3B0aW9ucywgbW9kaWZpZXJPcHRpb25zLCBfdGhpcy5zdGF0ZSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBmaXJlIHRoZSBmaXJzdCB1cGRhdGUgdG8gcG9zaXRpb24gdGhlIHBvcHBlciBpbiB0aGUgcmlnaHQgcGxhY2VcbiAgICB0aGlzLnVwZGF0ZSgpO1xuXG4gICAgdmFyIGV2ZW50c0VuYWJsZWQgPSB0aGlzLm9wdGlvbnMuZXZlbnRzRW5hYmxlZDtcbiAgICBpZiAoZXZlbnRzRW5hYmxlZCkge1xuICAgICAgLy8gc2V0dXAgZXZlbnQgbGlzdGVuZXJzLCB0aGV5IHdpbGwgdGFrZSBjYXJlIG9mIHVwZGF0ZSB0aGUgcG9zaXRpb24gaW4gc3BlY2lmaWMgc2l0dWF0aW9uc1xuICAgICAgdGhpcy5lbmFibGVFdmVudExpc3RlbmVycygpO1xuICAgIH1cblxuICAgIHRoaXMuc3RhdGUuZXZlbnRzRW5hYmxlZCA9IGV2ZW50c0VuYWJsZWQ7XG4gIH1cblxuICAvLyBXZSBjYW4ndCB1c2UgY2xhc3MgcHJvcGVydGllcyBiZWNhdXNlIHRoZXkgZG9uJ3QgZ2V0IGxpc3RlZCBpbiB0aGVcbiAgLy8gY2xhc3MgcHJvdG90eXBlIGFuZCBicmVhayBzdHVmZiBsaWtlIFNpbm9uIHN0dWJzXG5cblxuICBjcmVhdGVDbGFzcyhQb3BwZXIsIFt7XG4gICAga2V5OiAndXBkYXRlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gdXBkYXRlJCQxKCkge1xuICAgICAgcmV0dXJuIHVwZGF0ZS5jYWxsKHRoaXMpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2Rlc3Ryb3knLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkZXN0cm95JCQxKCkge1xuICAgICAgcmV0dXJuIGRlc3Ryb3kuY2FsbCh0aGlzKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdlbmFibGVFdmVudExpc3RlbmVycycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGVuYWJsZUV2ZW50TGlzdGVuZXJzJCQxKCkge1xuICAgICAgcmV0dXJuIGVuYWJsZUV2ZW50TGlzdGVuZXJzLmNhbGwodGhpcyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZGlzYWJsZUV2ZW50TGlzdGVuZXJzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZGlzYWJsZUV2ZW50TGlzdGVuZXJzJCQxKCkge1xuICAgICAgcmV0dXJuIGRpc2FibGVFdmVudExpc3RlbmVycy5jYWxsKHRoaXMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNjaGVkdWxlIGFuIHVwZGF0ZSwgaXQgd2lsbCBydW4gb24gdGhlIG5leHQgVUkgdXBkYXRlIGF2YWlsYWJsZVxuICAgICAqIEBtZXRob2Qgc2NoZWR1bGVVcGRhdGVcbiAgICAgKiBAbWVtYmVyb2YgUG9wcGVyXG4gICAgICovXG5cblxuICAgIC8qKlxuICAgICAqIENvbGxlY3Rpb24gb2YgdXRpbGl0aWVzIHVzZWZ1bCB3aGVuIHdyaXRpbmcgY3VzdG9tIG1vZGlmaWVycy5cbiAgICAgKiBTdGFydGluZyBmcm9tIHZlcnNpb24gMS43LCB0aGlzIG1ldGhvZCBpcyBhdmFpbGFibGUgb25seSBpZiB5b3VcbiAgICAgKiBpbmNsdWRlIGBwb3BwZXItdXRpbHMuanNgIGJlZm9yZSBgcG9wcGVyLmpzYC5cbiAgICAgKlxuICAgICAqICoqREVQUkVDQVRJT04qKjogVGhpcyB3YXkgdG8gYWNjZXNzIFBvcHBlclV0aWxzIGlzIGRlcHJlY2F0ZWRcbiAgICAgKiBhbmQgd2lsbCBiZSByZW1vdmVkIGluIHYyISBVc2UgdGhlIFBvcHBlclV0aWxzIG1vZHVsZSBkaXJlY3RseSBpbnN0ZWFkLlxuICAgICAqIER1ZSB0byB0aGUgaGlnaCBpbnN0YWJpbGl0eSBvZiB0aGUgbWV0aG9kcyBjb250YWluZWQgaW4gVXRpbHMsIHdlIGNhbid0XG4gICAgICogZ3VhcmFudGVlIHRoZW0gdG8gZm9sbG93IHNlbXZlci4gVXNlIHRoZW0gYXQgeW91ciBvd24gcmlzayFcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgICAqIEBkZXByZWNhdGVkIHNpbmNlIHZlcnNpb24gMS44XG4gICAgICogQG1lbWJlciBVdGlsc1xuICAgICAqIEBtZW1iZXJvZiBQb3BwZXJcbiAgICAgKi9cblxuICB9XSk7XG4gIHJldHVybiBQb3BwZXI7XG59KCk7XG5cbi8qKlxuICogVGhlIGByZWZlcmVuY2VPYmplY3RgIGlzIGFuIG9iamVjdCB0aGF0IHByb3ZpZGVzIGFuIGludGVyZmFjZSBjb21wYXRpYmxlIHdpdGggUG9wcGVyLmpzXG4gKiBhbmQgbGV0cyB5b3UgdXNlIGl0IGFzIHJlcGxhY2VtZW50IG9mIGEgcmVhbCBET00gbm9kZS48YnIgLz5cbiAqIFlvdSBjYW4gdXNlIHRoaXMgbWV0aG9kIHRvIHBvc2l0aW9uIGEgcG9wcGVyIHJlbGF0aXZlbHkgdG8gYSBzZXQgb2YgY29vcmRpbmF0ZXNcbiAqIGluIGNhc2UgeW91IGRvbid0IGhhdmUgYSBET00gbm9kZSB0byB1c2UgYXMgcmVmZXJlbmNlLlxuICpcbiAqIGBgYFxuICogbmV3IFBvcHBlcihyZWZlcmVuY2VPYmplY3QsIHBvcHBlck5vZGUpO1xuICogYGBgXG4gKlxuICogTkI6IFRoaXMgZmVhdHVyZSBpc24ndCBzdXBwb3J0ZWQgaW4gSW50ZXJuZXQgRXhwbG9yZXIgMTBcbiAqIEBuYW1lIHJlZmVyZW5jZU9iamVjdFxuICogQHByb3BlcnR5IHtGdW5jdGlvbn0gZGF0YS5nZXRCb3VuZGluZ0NsaWVudFJlY3RcbiAqIEEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGEgc2V0IG9mIGNvb3JkaW5hdGVzIGNvbXBhdGlibGUgd2l0aCB0aGUgbmF0aXZlIGBnZXRCb3VuZGluZ0NsaWVudFJlY3RgIG1ldGhvZC5cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBkYXRhLmNsaWVudFdpZHRoXG4gKiBBbiBFUzYgZ2V0dGVyIHRoYXQgd2lsbCByZXR1cm4gdGhlIHdpZHRoIG9mIHRoZSB2aXJ0dWFsIHJlZmVyZW5jZSBlbGVtZW50LlxuICogQHByb3BlcnR5IHtudW1iZXJ9IGRhdGEuY2xpZW50SGVpZ2h0XG4gKiBBbiBFUzYgZ2V0dGVyIHRoYXQgd2lsbCByZXR1cm4gdGhlIGhlaWdodCBvZiB0aGUgdmlydHVhbCByZWZlcmVuY2UgZWxlbWVudC5cbiAqL1xuXG5cblBvcHBlci5VdGlscyA9ICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IGdsb2JhbCkuUG9wcGVyVXRpbHM7XG5Qb3BwZXIucGxhY2VtZW50cyA9IHBsYWNlbWVudHM7XG5Qb3BwZXIuRGVmYXVsdHMgPSBEZWZhdWx0cztcblxuZXhwb3J0IGRlZmF1bHQgUG9wcGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cG9wcGVyLmpzLm1hcFxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG52YXIgX2RlZmF1bHQgPSB7XG4gIFJFU0lTVEFOQ0VfQ09FRjogMC42LFxuICAvLyBUaGlzIHZhbHVlIGlzIGNsb3NlZCB0byB3aGF0IGJyb3dzZXJzIGFyZSB1c2luZyBpbnRlcm5hbGx5IHRvXG4gIC8vIHRyaWdnZXIgYSBuYXRpdmUgc2Nyb2xsLlxuICBVTkNFUlRBSU5UWV9USFJFU0hPTEQ6IDMgLy8gcHhcblxufTtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX2NyZWF0ZVN2Z0ljb24gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWxzL2NyZWF0ZVN2Z0ljb25cIikpO1xuXG52YXIgX2RlZmF1bHQgPSAoMCwgX2NyZWF0ZVN2Z0ljb24uZGVmYXVsdCkoX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImdcIiwgbnVsbCwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICBkOiBcIk0xNS41IDE0aC0uNzlsLS4yOC0uMjdDMTUuNDEgMTIuNTkgMTYgMTEuMTEgMTYgOS41IDE2IDUuOTEgMTMuMDkgMyA5LjUgM1MzIDUuOTEgMyA5LjUgNS45MSAxNiA5LjUgMTZjMS42MSAwIDMuMDktLjU5IDQuMjMtMS41N2wuMjcuMjh2Ljc5bDUgNC45OUwyMC40OSAxOWwtNC45OS01em0tNiAwQzcuMDEgMTQgNSAxMS45OSA1IDkuNVM3LjAxIDUgOS41IDUgMTQgNy4wMSAxNCA5LjUgMTEuOTkgMTQgOS41IDE0elwiXG59KSksICdTZWFyY2gnKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJkZWZhdWx0XCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF93aXRoTW9iaWxlRGlhbG9nLmRlZmF1bHQ7XG4gIH1cbn0pO1xuXG52YXIgX3dpdGhNb2JpbGVEaWFsb2cgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3dpdGhNb2JpbGVEaWFsb2dcIikpOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVmYXVsdFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfVG9vbHRpcC5kZWZhdWx0O1xuICB9XG59KTtcblxudmFyIF9Ub29sdGlwID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9Ub29sdGlwXCIpKTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlZmF1bHRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX1RhYmxlU29ydExhYmVsLmRlZmF1bHQ7XG4gIH1cbn0pO1xuXG52YXIgX1RhYmxlU29ydExhYmVsID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9UYWJsZVNvcnRMYWJlbFwiKSk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJkZWZhdWx0XCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9UYWJsZVJvdy5kZWZhdWx0O1xuICB9XG59KTtcblxudmFyIF9UYWJsZVJvdyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vVGFibGVSb3dcIikpOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3B1cmUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWNvbXBvc2UvcHVyZVwiKSk7XG5cbnZhciBfU3ZnSWNvbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uLy4uL1N2Z0ljb25cIikpO1xuXG52YXIgX3JlZiA9IF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgZDogXCJNOC41OSAxNi4zNGw0LjU4LTQuNTktNC41OC00LjU5TDEwIDUuNzVsNiA2LTYgNnpcIlxufSk7XG5cbi8qKlxuICogQGlnbm9yZSAtIGludGVybmFsIGNvbXBvbmVudC5cbiAqL1xudmFyIEtleWJvYXJkQXJyb3dSaWdodCA9IGZ1bmN0aW9uIEtleWJvYXJkQXJyb3dSaWdodChwcm9wcykge1xuICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfU3ZnSWNvbi5kZWZhdWx0LCBwcm9wcywgX3JlZik7XG59O1xuXG5LZXlib2FyZEFycm93UmlnaHQgPSAoMCwgX3B1cmUuZGVmYXVsdCkoS2V5Ym9hcmRBcnJvd1JpZ2h0KTtcbktleWJvYXJkQXJyb3dSaWdodC5tdWlOYW1lID0gJ1N2Z0ljb24nO1xudmFyIF9kZWZhdWx0ID0gS2V5Ym9hcmRBcnJvd1JpZ2h0O1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfcHVyZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlY29tcG9zZS9wdXJlXCIpKTtcblxudmFyIF9TdmdJY29uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vLi4vU3ZnSWNvblwiKSk7XG5cbnZhciBfcmVmID0gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICBkOiBcIk0xNS40MSAxNi4wOWwtNC41OC00LjU5IDQuNTgtNC41OUwxNCA1LjVsLTYgNiA2IDZ6XCJcbn0pO1xuXG4vKipcbiAqIEBpZ25vcmUgLSBpbnRlcm5hbCBjb21wb25lbnQuXG4gKi9cbnZhciBLZXlib2FyZEFycm93TGVmdCA9IGZ1bmN0aW9uIEtleWJvYXJkQXJyb3dMZWZ0KHByb3BzKSB7XG4gIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9TdmdJY29uLmRlZmF1bHQsIHByb3BzLCBfcmVmKTtcbn07XG5cbktleWJvYXJkQXJyb3dMZWZ0ID0gKDAsIF9wdXJlLmRlZmF1bHQpKEtleWJvYXJkQXJyb3dMZWZ0KTtcbktleWJvYXJkQXJyb3dMZWZ0Lm11aU5hbWUgPSAnU3ZnSWNvbic7XG52YXIgX2RlZmF1bHQgPSBLZXlib2FyZEFycm93TGVmdDtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVmYXVsdFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfVGFibGVQYWdpbmF0aW9uLmRlZmF1bHQ7XG4gIH1cbn0pO1xuXG52YXIgX1RhYmxlUGFnaW5hdGlvbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vVGFibGVQYWdpbmF0aW9uXCIpKTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlZmF1bHRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX1RhYmxlSGVhZC5kZWZhdWx0O1xuICB9XG59KTtcblxudmFyIF9UYWJsZUhlYWQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL1RhYmxlSGVhZFwiKSk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJkZWZhdWx0XCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9UYWJsZUZvb3Rlci5kZWZhdWx0O1xuICB9XG59KTtcblxudmFyIF9UYWJsZUZvb3RlciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vVGFibGVGb290ZXJcIikpOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVmYXVsdFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfVGFibGVCb2R5LmRlZmF1bHQ7XG4gIH1cbn0pO1xuXG52YXIgX1RhYmxlQm9keSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vVGFibGVCb2R5XCIpKTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlZmF1bHRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX1RhYmxlLmRlZmF1bHQ7XG4gIH1cbn0pO1xuXG52YXIgX1RhYmxlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9UYWJsZVwiKSk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJkZWZhdWx0XCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9Td2l0Y2guZGVmYXVsdDtcbiAgfVxufSk7XG5cbnZhciBfU3dpdGNoID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9Td2l0Y2hcIikpOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVmYXVsdFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfU3dpcGVhYmxlRHJhd2VyLmRlZmF1bHQ7XG4gIH1cbn0pO1xuXG52YXIgX1N3aXBlYWJsZURyYXdlciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vU3dpcGVhYmxlRHJhd2VyXCIpKTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlZmF1bHRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX1N0ZXBwZXIuZGVmYXVsdDtcbiAgfVxufSk7XG5cbnZhciBfU3RlcHBlciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vU3RlcHBlclwiKSk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJkZWZhdWx0XCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9TdGVwQ29udGVudC5kZWZhdWx0O1xuICB9XG59KTtcblxudmFyIF9TdGVwQ29udGVudCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vU3RlcENvbnRlbnRcIikpOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVmYXVsdFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfU3RlcEJ1dHRvbi5kZWZhdWx0O1xuICB9XG59KTtcblxudmFyIF9TdGVwQnV0dG9uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9TdGVwQnV0dG9uXCIpKTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlZmF1bHRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX1N0ZXAuZGVmYXVsdDtcbiAgfVxufSk7XG5cbnZhciBfU3RlcCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vU3RlcFwiKSk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJkZWZhdWx0XCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9TbmFja2Jhci5kZWZhdWx0O1xuICB9XG59KTtcblxudmFyIF9TbmFja2JhciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vU25hY2tiYXJcIikpOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVmYXVsdFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfUmFkaW9Hcm91cC5kZWZhdWx0O1xuICB9XG59KTtcblxudmFyIF9SYWRpb0dyb3VwID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9SYWRpb0dyb3VwXCIpKTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlZmF1bHRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX1JhZGlvLmRlZmF1bHQ7XG4gIH1cbn0pO1xuXG52YXIgX1JhZGlvID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9SYWRpb1wiKSk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfcHVyZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlY29tcG9zZS9wdXJlXCIpKTtcblxudmFyIF9TdmdJY29uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vLi4vU3ZnSWNvblwiKSk7XG5cbnZhciBfcmVmID0gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICBkOiBcIk03IDEwbDUgNSA1LTV6XCJcbn0pO1xuXG4vKipcbiAqIEBpZ25vcmUgLSBpbnRlcm5hbCBjb21wb25lbnQuXG4gKi9cbnZhciBBcnJvd0Ryb3BEb3duID0gZnVuY3Rpb24gQXJyb3dEcm9wRG93bihwcm9wcykge1xuICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfU3ZnSWNvbi5kZWZhdWx0LCBwcm9wcywgX3JlZik7XG59O1xuXG5BcnJvd0Ryb3BEb3duID0gKDAsIF9wdXJlLmRlZmF1bHQpKEFycm93RHJvcERvd24pO1xuQXJyb3dEcm9wRG93bi5tdWlOYW1lID0gJ1N2Z0ljb24nO1xudmFyIF9kZWZhdWx0ID0gQXJyb3dEcm9wRG93bjtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX2V4dGVuZHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2V4dGVuZHNcIikpO1xuXG52YXIgX2RlZmluZVByb3BlcnR5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9kZWZpbmVQcm9wZXJ0eVwiKSk7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCIpKTtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKTtcblxudmFyIF9jbGFzc25hbWVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY2xhc3NuYW1lc1wiKSk7XG5cbi8qKlxuICogQGlnbm9yZSAtIGludGVybmFsIGNvbXBvbmVudC5cbiAqL1xuZnVuY3Rpb24gTmF0aXZlU2VsZWN0SW5wdXQocHJvcHMpIHtcbiAgdmFyIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIGRpc2FibGVkID0gcHJvcHMuZGlzYWJsZWQsXG4gICAgICBJY29uQ29tcG9uZW50ID0gcHJvcHMuSWNvbkNvbXBvbmVudCxcbiAgICAgIGlucHV0UmVmID0gcHJvcHMuaW5wdXRSZWYsXG4gICAgICBuYW1lID0gcHJvcHMubmFtZSxcbiAgICAgIG9uQ2hhbmdlID0gcHJvcHMub25DaGFuZ2UsXG4gICAgICB2YWx1ZSA9IHByb3BzLnZhbHVlLFxuICAgICAgb3RoZXIgPSAoMCwgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMi5kZWZhdWx0KShwcm9wcywgW1wiY2hpbGRyZW5cIiwgXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwiZGlzYWJsZWRcIiwgXCJJY29uQ29tcG9uZW50XCIsIFwiaW5wdXRSZWZcIiwgXCJuYW1lXCIsIFwib25DaGFuZ2VcIiwgXCJ2YWx1ZVwiXSk7XG4gIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICBjbGFzc05hbWU6IGNsYXNzZXMucm9vdFxuICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwic2VsZWN0XCIsICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe1xuICAgIGNsYXNzTmFtZTogKDAsIF9jbGFzc25hbWVzLmRlZmF1bHQpKGNsYXNzZXMuc2VsZWN0LCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KSh7fSwgY2xhc3Nlcy5kaXNhYmxlZCwgZGlzYWJsZWQpLCBjbGFzc05hbWUpLFxuICAgIG5hbWU6IG5hbWUsXG4gICAgZGlzYWJsZWQ6IGRpc2FibGVkLFxuICAgIG9uQ2hhbmdlOiBvbkNoYW5nZSxcbiAgICB2YWx1ZTogdmFsdWUsXG4gICAgcmVmOiBpbnB1dFJlZlxuICB9LCBvdGhlciksIGNoaWxkcmVuKSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChJY29uQ29tcG9uZW50LCB7XG4gICAgY2xhc3NOYW1lOiBjbGFzc2VzLmljb25cbiAgfSkpO1xufVxuXG5OYXRpdmVTZWxlY3RJbnB1dC5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIC8qKlxuICAgKiBUaGUgb3B0aW9uIGVsZW1lbnRzIHRvIHBvcHVsYXRlIHRoZSBzZWxlY3Qgd2l0aC5cbiAgICogQ2FuIGJlIHNvbWUgYDxvcHRpb24+YCBlbGVtZW50cy5cbiAgICovXG4gIGNoaWxkcmVuOiBfcHJvcFR5cGVzLmRlZmF1bHQubm9kZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MtYXBpKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBUaGUgQ1NTIGNsYXNzIG5hbWUgb2YgdGhlIHNlbGVjdCBlbGVtZW50LlxuICAgKi9cbiAgY2xhc3NOYW1lOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBzZWxlY3Qgd2lsbCBiZSBkaXNhYmxlZC5cbiAgICovXG4gIGRpc2FibGVkOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogVGhlIGljb24gdGhhdCBkaXNwbGF5cyB0aGUgYXJyb3cuXG4gICAqL1xuICBJY29uQ29tcG9uZW50OiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLCBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuY10pLFxuXG4gIC8qKlxuICAgKiBVc2UgdGhhdCBwcm9wZXJ0eSB0byBwYXNzIGEgcmVmIGNhbGxiYWNrIHRvIHRoZSBuYXRpdmUgc2VsZWN0IGVsZW1lbnQuXG4gICAqL1xuICBpbnB1dFJlZjogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsIF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3RdKSxcblxuICAvKipcbiAgICogTmFtZSBhdHRyaWJ1dGUgb2YgdGhlIGBzZWxlY3RgIG9yIGhpZGRlbiBgaW5wdXRgIGVsZW1lbnQuXG4gICAqL1xuICBuYW1lOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmdW5jdGlvbiBmaXJlZCB3aGVuIGEgbWVudSBpdGVtIGlzIHNlbGVjdGVkLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gZXZlbnQgVGhlIGV2ZW50IHNvdXJjZSBvZiB0aGUgY2FsbGJhY2suXG4gICAqIFlvdSBjYW4gcHVsbCBvdXQgdGhlIG5ldyB2YWx1ZSBieSBhY2Nlc3NpbmcgYGV2ZW50LnRhcmdldC52YWx1ZWAuXG4gICAqL1xuICBvbkNoYW5nZTogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIFRoZSBpbnB1dCB2YWx1ZS5cbiAgICovXG4gIHZhbHVlOiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLCBfcHJvcFR5cGVzLmRlZmF1bHQubnVtYmVyXSlcbn0gOiB7fTtcbnZhciBfZGVmYXVsdCA9IE5hdGl2ZVNlbGVjdElucHV0O1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLnN0eWxlcyA9IHZvaWQgMDtcblxudmFyIF9vYmplY3RTcHJlYWQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL29iamVjdFNwcmVhZFwiKSk7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCIpKTtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKTtcblxudmFyIF9OYXRpdmVTZWxlY3RJbnB1dCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vTmF0aXZlU2VsZWN0SW5wdXRcIikpO1xuXG52YXIgX3dpdGhTdHlsZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9zdHlsZXMvd2l0aFN0eWxlc1wiKSk7XG5cbnZhciBfQXJyb3dEcm9wRG93biA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL2ludGVybmFsL3N2Zy1pY29ucy9BcnJvd0Ryb3BEb3duXCIpKTtcblxudmFyIF9JbnB1dCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL0lucHV0XCIpKTtcblxuLy8gQGluaGVyaXRlZENvbXBvbmVudCBJbnB1dFxudmFyIHN0eWxlcyA9IGZ1bmN0aW9uIHN0eWxlcyh0aGVtZSkge1xuICByZXR1cm4ge1xuICAgIHJvb3Q6IHtcbiAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgd2lkdGg6ICcxMDAlJ1xuICAgIH0sXG4gICAgc2VsZWN0OiB7XG4gICAgICAnLW1vei1hcHBlYXJhbmNlJzogJ25vbmUnLFxuICAgICAgLy8gUmVzZXRcbiAgICAgICctd2Via2l0LWFwcGVhcmFuY2UnOiAnbm9uZScsXG4gICAgICAvLyBSZXNldFxuICAgICAgLy8gV2hlbiBpbnRlcmFjdGluZyBxdWlja2x5LCB0aGUgdGV4dCBjYW4gZW5kIHVwIHNlbGVjdGVkLlxuICAgICAgLy8gTmF0aXZlIHNlbGVjdCBjYW4ndCBiZSBzZWxlY3RlZCBlaXRoZXIuXG4gICAgICB1c2VyU2VsZWN0OiAnbm9uZScsXG4gICAgICBwYWRkaW5nUmlnaHQ6IHRoZW1lLnNwYWNpbmcudW5pdCAqIDQsXG4gICAgICB3aWR0aDogXCJjYWxjKDEwMCUgLSBcIi5jb25jYXQodGhlbWUuc3BhY2luZy51bml0ICogNCwgXCJweClcIiksXG4gICAgICBtaW5XaWR0aDogdGhlbWUuc3BhY2luZy51bml0ICogMixcbiAgICAgIC8vIFNvIGl0IGRvZXNuJ3QgY29sbGFwc2UuXG4gICAgICBjdXJzb3I6ICdwb2ludGVyJyxcbiAgICAgICcmOmZvY3VzJzoge1xuICAgICAgICAvLyBTaG93IHRoYXQgaXQncyBub3QgYW4gdGV4dCBpbnB1dFxuICAgICAgICBiYWNrZ3JvdW5kOiB0aGVtZS5wYWxldHRlLnR5cGUgPT09ICdsaWdodCcgPyAncmdiYSgwLCAwLCAwLCAwLjA1KScgOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjA1KScsXG4gICAgICAgIGJvcmRlclJhZGl1czogMCAvLyBSZXNldCBDaHJvbWUgc3R5bGVcblxuICAgICAgfSxcbiAgICAgIC8vIFJlbW92ZSBGaXJlZm94IGZvY3VzIGJvcmRlclxuICAgICAgJyY6LW1vei1mb2N1c3JpbmcnOiB7XG4gICAgICAgIGNvbG9yOiAndHJhbnNwYXJlbnQnLFxuICAgICAgICB0ZXh0U2hhZG93OiAnMCAwIDAgIzAwMCdcbiAgICAgIH0sXG4gICAgICAvLyBSZW1vdmUgSUUxMSBhcnJvd1xuICAgICAgJyY6Oi1tcy1leHBhbmQnOiB7XG4gICAgICAgIGRpc3BsYXk6ICdub25lJ1xuICAgICAgfSxcbiAgICAgICcmJGRpc2FibGVkJzoge1xuICAgICAgICBjdXJzb3I6ICdkZWZhdWx0J1xuICAgICAgfVxuICAgIH0sXG4gICAgc2VsZWN0TWVudToge1xuICAgICAgd2lkdGg6ICdhdXRvJyxcbiAgICAgIC8vIEZpeCBTYWZhcmkgdGV4dE92ZXJmbG93XG4gICAgICB0ZXh0T3ZlcmZsb3c6ICdlbGxpcHNpcycsXG4gICAgICB3aGl0ZVNwYWNlOiAnbm93cmFwJyxcbiAgICAgIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgICAgIG1pbkhlaWdodDogJzEuMTg3NWVtJyAvLyBSZXNldCAoMTlweCksIG1hdGNoIHRoZSBuYXRpdmUgaW5wdXQgbGluZS1oZWlnaHRcblxuICAgIH0sXG4gICAgZGlzYWJsZWQ6IHt9LFxuICAgIGljb246IHtcbiAgICAgIC8vIFdlIHVzZSBhIHBvc2l0aW9uIGFic29sdXRlIG92ZXIgYSBmbGV4Ym94IGluIG9yZGVyIHRvIGZvcndhcmQgdGhlIHBvaW50ZXIgZXZlbnRzXG4gICAgICAvLyB0byB0aGUgaW5wdXQuXG4gICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgIHJpZ2h0OiAwLFxuICAgICAgdG9wOiAnY2FsYyg1MCUgLSAxMnB4KScsXG4gICAgICAvLyBDZW50ZXIgdmVydGljYWxseVxuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuYWN0aW9uLmFjdGl2ZSxcbiAgICAgICdwb2ludGVyLWV2ZW50cyc6ICdub25lJyAvLyBEb24ndCBibG9jayBwb2ludGVyIGV2ZW50cyBvbiB0aGUgc2VsZWN0IHVuZGVyIHRoZSBpY29uLlxuXG4gICAgfVxuICB9O1xufTtcbi8qKlxuICogQW4gYWx0ZXJuYXRpdmUgdG8gYDxTZWxlY3QgbmF0aXZlIC8+YCB3aXRoIGEgbXVjaCBzbWFsbGVyIGRlcGVuZGVuY3kgZ3JhcGguXG4gKi9cblxuXG5leHBvcnRzLnN0eWxlcyA9IHN0eWxlcztcblxuZnVuY3Rpb24gTmF0aXZlU2VsZWN0KHByb3BzKSB7XG4gIHZhciBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBJY29uQ29tcG9uZW50ID0gcHJvcHMuSWNvbkNvbXBvbmVudCxcbiAgICAgIGlucHV0ID0gcHJvcHMuaW5wdXQsXG4gICAgICBpbnB1dFByb3BzID0gcHJvcHMuaW5wdXRQcm9wcyxcbiAgICAgIG90aGVyID0gKDAsIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIuZGVmYXVsdCkocHJvcHMsIFtcImNoaWxkcmVuXCIsIFwiY2xhc3Nlc1wiLCBcIkljb25Db21wb25lbnRcIiwgXCJpbnB1dFwiLCBcImlucHV0UHJvcHNcIl0pO1xuICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY2xvbmVFbGVtZW50KGlucHV0LCAoMCwgX29iamVjdFNwcmVhZDIuZGVmYXVsdCkoe1xuICAgIC8vIE1vc3Qgb2YgdGhlIGxvZ2ljIGlzIGltcGxlbWVudGVkIGluIGBOYXRpdmVTZWxlY3RJbnB1dGAuXG4gICAgLy8gVGhlIGBTZWxlY3RgIGNvbXBvbmVudCBpcyBhIHNpbXBsZSBBUEkgd3JhcHBlciB0byBleHBvc2Ugc29tZXRoaW5nIGJldHRlciB0byBwbGF5IHdpdGguXG4gICAgaW5wdXRDb21wb25lbnQ6IF9OYXRpdmVTZWxlY3RJbnB1dC5kZWZhdWx0LFxuICAgIGlucHV0UHJvcHM6ICgwLCBfb2JqZWN0U3ByZWFkMi5kZWZhdWx0KSh7XG4gICAgICBjaGlsZHJlbjogY2hpbGRyZW4sXG4gICAgICBjbGFzc2VzOiBjbGFzc2VzLFxuICAgICAgSWNvbkNvbXBvbmVudDogSWNvbkNvbXBvbmVudCxcbiAgICAgIHR5cGU6IHVuZGVmaW5lZFxuICAgIH0sIGlucHV0UHJvcHMsIGlucHV0ID8gaW5wdXQucHJvcHMuaW5wdXRQcm9wcyA6IHt9KVxuICB9LCBvdGhlcikpO1xufVxuXG5OYXRpdmVTZWxlY3QucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKipcbiAgICogVGhlIG9wdGlvbiBlbGVtZW50cyB0byBwb3B1bGF0ZSB0aGUgc2VsZWN0IHdpdGguXG4gICAqIENhbiBiZSBzb21lIGA8b3B0aW9uPmAgZWxlbWVudHMuXG4gICAqL1xuICBjaGlsZHJlbjogX3Byb3BUeXBlcy5kZWZhdWx0Lm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzLWFwaSkgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogVGhlIGljb24gdGhhdCBkaXNwbGF5cyB0aGUgYXJyb3cuXG4gICAqL1xuICBJY29uQ29tcG9uZW50OiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLCBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuY10pLFxuXG4gIC8qKlxuICAgKiBBbiBgSW5wdXRgIGVsZW1lbnQ7IGRvZXMgbm90IGhhdmUgdG8gYmUgYSBtYXRlcmlhbC11aSBzcGVjaWZpYyBgSW5wdXRgLlxuICAgKi9cbiAgaW5wdXQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5lbGVtZW50LFxuXG4gIC8qKlxuICAgKiBBdHRyaWJ1dGVzIGFwcGxpZWQgdG8gdGhlIGBzZWxlY3RgIGVsZW1lbnQuXG4gICAqL1xuICBpbnB1dFByb3BzOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmdW5jdGlvbiBmaXJlZCB3aGVuIGEgbWVudSBpdGVtIGlzIHNlbGVjdGVkLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gZXZlbnQgVGhlIGV2ZW50IHNvdXJjZSBvZiB0aGUgY2FsbGJhY2suXG4gICAqIFlvdSBjYW4gcHVsbCBvdXQgdGhlIG5ldyB2YWx1ZSBieSBhY2Nlc3NpbmcgYGV2ZW50LnRhcmdldC52YWx1ZWAuXG4gICAqL1xuICBvbkNoYW5nZTogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIFRoZSBpbnB1dCB2YWx1ZS5cbiAgICovXG4gIHZhbHVlOiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLCBfcHJvcFR5cGVzLmRlZmF1bHQubnVtYmVyXSlcbn0gOiB7fTtcbk5hdGl2ZVNlbGVjdC5kZWZhdWx0UHJvcHMgPSB7XG4gIEljb25Db21wb25lbnQ6IF9BcnJvd0Ryb3BEb3duLmRlZmF1bHQsXG4gIGlucHV0OiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9JbnB1dC5kZWZhdWx0LCBudWxsKVxufTtcbk5hdGl2ZVNlbGVjdC5tdWlOYW1lID0gJ05hdGl2ZVNlbGVjdCc7XG5cbnZhciBfZGVmYXVsdCA9ICgwLCBfd2l0aFN0eWxlcy5kZWZhdWx0KShzdHlsZXMsIHtcbiAgbmFtZTogJ011aU5hdGl2ZVNlbGVjdCdcbn0pKE5hdGl2ZVNlbGVjdCk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVmYXVsdFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfTmF0aXZlU2VsZWN0LmRlZmF1bHQ7XG4gIH1cbn0pO1xuXG52YXIgX05hdGl2ZVNlbGVjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vTmF0aXZlU2VsZWN0XCIpKTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlZmF1bHRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX01vYmlsZVN0ZXBwZXIuZGVmYXVsdDtcbiAgfVxufSk7XG5cbnZhciBfTW9iaWxlU3RlcHBlciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vTW9iaWxlU3RlcHBlclwiKSk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLnN0eWxlcyA9IHZvaWQgMDtcblxudmFyIF9leHRlbmRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9leHRlbmRzXCIpKTtcblxudmFyIF9vYmplY3RTcHJlYWQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL29iamVjdFNwcmVhZFwiKSk7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCIpKTtcblxudmFyIF9jbGFzc0NhbGxDaGVjazIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vY2xhc3NDYWxsQ2hlY2tcIikpO1xuXG52YXIgX2NyZWF0ZUNsYXNzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9jcmVhdGVDbGFzc1wiKSk7XG5cbnZhciBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vcG9zc2libGVDb25zdHJ1Y3RvclJldHVyblwiKSk7XG5cbnZhciBfaW5oZXJpdHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2luaGVyaXRzXCIpKTtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKTtcblxudmFyIF9yZWFjdERvbSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0LWRvbVwiKSk7XG5cbnZhciBfc2Nyb2xsYmFyU2l6ZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImRvbS1oZWxwZXJzL3V0aWwvc2Nyb2xsYmFyU2l6ZVwiKSk7XG5cbnZhciBfd2l0aFN0eWxlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3N0eWxlcy93aXRoU3R5bGVzXCIpKTtcblxudmFyIF9Qb3BvdmVyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vUG9wb3ZlclwiKSk7XG5cbnZhciBfTWVudUxpc3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9NZW51TGlzdFwiKSk7XG5cbi8vIEBpbmhlcml0ZWRDb21wb25lbnQgUG9wb3ZlclxudmFyIFJUTF9PUklHSU4gPSB7XG4gIHZlcnRpY2FsOiAndG9wJyxcbiAgaG9yaXpvbnRhbDogJ3JpZ2h0J1xufTtcbnZhciBMVFJfT1JJR0lOID0ge1xuICB2ZXJ0aWNhbDogJ3RvcCcsXG4gIGhvcml6b250YWw6ICdsZWZ0J1xufTtcbnZhciBzdHlsZXMgPSB7XG4gIHBhcGVyOiB7XG4gICAgLy8gc3BlY1o6IFRoZSBtYXhpbXVtIGhlaWdodCBvZiBhIHNpbXBsZSBtZW51IHNob3VsZCBiZSBvbmUgb3IgbW9yZSByb3dzIGxlc3MgdGhhbiB0aGUgdmlld1xuICAgIC8vIGhlaWdodC4gVGhpcyBlbnN1cmVzIGEgdGFwcGFibGUgYXJlYSBvdXRzaWRlIG9mIHRoZSBzaW1wbGUgbWVudSB3aXRoIHdoaWNoIHRvIGRpc21pc3NcbiAgICAvLyB0aGUgbWVudS5cbiAgICBtYXhIZWlnaHQ6ICdjYWxjKDEwMCUgLSA5NnB4KScsXG4gICAgLy8gQWRkIGlPUyBtb21lbnR1bSBzY3JvbGxpbmcuXG4gICAgV2Via2l0T3ZlcmZsb3dTY3JvbGxpbmc6ICd0b3VjaCdcbiAgfVxufTtcbmV4cG9ydHMuc3R5bGVzID0gc3R5bGVzO1xuXG52YXIgTWVudSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICAoMCwgX2luaGVyaXRzMi5kZWZhdWx0KShNZW51LCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBNZW51KCkge1xuICAgIHZhciBfcmVmO1xuXG4gICAgdmFyIF90ZW1wLCBfdGhpcztcblxuICAgICgwLCBfY2xhc3NDYWxsQ2hlY2syLmRlZmF1bHQpKHRoaXMsIE1lbnUpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiAoMCwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yLmRlZmF1bHQpKF90aGlzLCAoX3RlbXAgPSBfdGhpcyA9ICgwLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIuZGVmYXVsdCkodGhpcywgKF9yZWYgPSBNZW51Ll9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTWVudSkpLmNhbGwuYXBwbHkoX3JlZiwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcy5nZXRDb250ZW50QW5jaG9yRWwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoIV90aGlzLm1lbnVMaXN0IHx8ICFfdGhpcy5tZW51TGlzdC5zZWxlY3RlZEl0ZW0pIHtcbiAgICAgICAgcmV0dXJuIF9yZWFjdERvbS5kZWZhdWx0LmZpbmRET01Ob2RlKF90aGlzLm1lbnVMaXN0KS5maXJzdENoaWxkO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gX3JlYWN0RG9tLmRlZmF1bHQuZmluZERPTU5vZGUoX3RoaXMubWVudUxpc3Quc2VsZWN0ZWRJdGVtKTtcbiAgICB9LCBfdGhpcy5tZW51TGlzdCA9IHVuZGVmaW5lZCwgX3RoaXMuZm9jdXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoX3RoaXMubWVudUxpc3QgJiYgX3RoaXMubWVudUxpc3Quc2VsZWN0ZWRJdGVtKSB7XG4gICAgICAgIF9yZWFjdERvbS5kZWZhdWx0LmZpbmRET01Ob2RlKF90aGlzLm1lbnVMaXN0LnNlbGVjdGVkSXRlbSkuZm9jdXMoKTtcblxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBtZW51TGlzdCA9IF9yZWFjdERvbS5kZWZhdWx0LmZpbmRET01Ob2RlKF90aGlzLm1lbnVMaXN0KTtcblxuICAgICAgaWYgKG1lbnVMaXN0ICYmIG1lbnVMaXN0LmZpcnN0Q2hpbGQpIHtcbiAgICAgICAgbWVudUxpc3QuZmlyc3RDaGlsZC5mb2N1cygpO1xuICAgICAgfVxuICAgIH0sIF90aGlzLmhhbmRsZUVudGVyID0gZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICAgIHZhciB0aGVtZSA9IF90aGlzLnByb3BzLnRoZW1lO1xuXG4gICAgICB2YXIgbWVudUxpc3QgPSBfcmVhY3REb20uZGVmYXVsdC5maW5kRE9NTm9kZShfdGhpcy5tZW51TGlzdCk7IC8vIEZvY3VzIHNvIHRoZSBzY3JvbGwgY29tcHV0YXRpb24gb2YgdGhlIFBvcG92ZXIgd29ya3MgYXMgZXhwZWN0ZWQuXG5cblxuICAgICAgX3RoaXMuZm9jdXMoKTsgLy8gTGV0J3MgaWdub3JlIHRoYXQgcGllY2Ugb2YgbG9naWMgaWYgdXNlcnMgYXJlIGFscmVhZHkgb3ZlcnJpZGluZyB0aGUgd2lkdGhcbiAgICAgIC8vIG9mIHRoZSBtZW51LlxuXG5cbiAgICAgIGlmIChtZW51TGlzdCAmJiBlbGVtZW50LmNsaWVudEhlaWdodCA8IG1lbnVMaXN0LmNsaWVudEhlaWdodCAmJiAhbWVudUxpc3Quc3R5bGUud2lkdGgpIHtcbiAgICAgICAgdmFyIHNpemUgPSBcIlwiLmNvbmNhdCgoMCwgX3Njcm9sbGJhclNpemUuZGVmYXVsdCkoKSwgXCJweFwiKTtcbiAgICAgICAgbWVudUxpc3Quc3R5bGVbdGhlbWUuZGlyZWN0aW9uID09PSAncnRsJyA/ICdwYWRkaW5nTGVmdCcgOiAncGFkZGluZ1JpZ2h0J10gPSBzaXplO1xuICAgICAgICBtZW51TGlzdC5zdHlsZS53aWR0aCA9IFwiY2FsYygxMDAlICsgXCIuY29uY2F0KHNpemUsIFwiKVwiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKF90aGlzLnByb3BzLm9uRW50ZXIpIHtcbiAgICAgICAgX3RoaXMucHJvcHMub25FbnRlcihlbGVtZW50KTtcbiAgICAgIH1cbiAgICB9LCBfdGhpcy5oYW5kbGVMaXN0S2V5RG93biA9IGZ1bmN0aW9uIChldmVudCwga2V5KSB7XG4gICAgICBpZiAoa2V5ID09PSAndGFiJykge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgIGlmIChfdGhpcy5wcm9wcy5vbkNsb3NlKSB7XG4gICAgICAgICAgX3RoaXMucHJvcHMub25DbG9zZShldmVudCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCBfdGVtcCkpO1xuICB9XG5cbiAgKDAsIF9jcmVhdGVDbGFzczIuZGVmYXVsdCkoTWVudSwgW3tcbiAgICBrZXk6IFwiY29tcG9uZW50RGlkTW91bnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICBpZiAodGhpcy5wcm9wcy5vcGVuKSB7XG4gICAgICAgIHRoaXMuZm9jdXMoKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBjaGlsZHJlbiA9IF9wcm9wcy5jaGlsZHJlbixcbiAgICAgICAgICBjbGFzc2VzID0gX3Byb3BzLmNsYXNzZXMsXG4gICAgICAgICAgTWVudUxpc3RQcm9wcyA9IF9wcm9wcy5NZW51TGlzdFByb3BzLFxuICAgICAgICAgIG9uRW50ZXIgPSBfcHJvcHMub25FbnRlcixcbiAgICAgICAgICBfcHJvcHMkUGFwZXJQcm9wcyA9IF9wcm9wcy5QYXBlclByb3BzLFxuICAgICAgICAgIFBhcGVyUHJvcHMgPSBfcHJvcHMkUGFwZXJQcm9wcyA9PT0gdm9pZCAwID8ge30gOiBfcHJvcHMkUGFwZXJQcm9wcyxcbiAgICAgICAgICBQb3BvdmVyQ2xhc3NlcyA9IF9wcm9wcy5Qb3BvdmVyQ2xhc3NlcyxcbiAgICAgICAgICB0aGVtZSA9IF9wcm9wcy50aGVtZSxcbiAgICAgICAgICBvdGhlciA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyLmRlZmF1bHQpKF9wcm9wcywgW1wiY2hpbGRyZW5cIiwgXCJjbGFzc2VzXCIsIFwiTWVudUxpc3RQcm9wc1wiLCBcIm9uRW50ZXJcIiwgXCJQYXBlclByb3BzXCIsIFwiUG9wb3ZlckNsYXNzZXNcIiwgXCJ0aGVtZVwiXSk7XG4gICAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfUG9wb3Zlci5kZWZhdWx0LCAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHtcbiAgICAgICAgZ2V0Q29udGVudEFuY2hvckVsOiB0aGlzLmdldENvbnRlbnRBbmNob3JFbCxcbiAgICAgICAgY2xhc3NlczogUG9wb3ZlckNsYXNzZXMsXG4gICAgICAgIG9uRW50ZXI6IHRoaXMuaGFuZGxlRW50ZXIsXG4gICAgICAgIGFuY2hvck9yaWdpbjogdGhlbWUuZGlyZWN0aW9uID09PSAncnRsJyA/IFJUTF9PUklHSU4gOiBMVFJfT1JJR0lOLFxuICAgICAgICB0cmFuc2Zvcm1PcmlnaW46IHRoZW1lLmRpcmVjdGlvbiA9PT0gJ3J0bCcgPyBSVExfT1JJR0lOIDogTFRSX09SSUdJTixcbiAgICAgICAgUGFwZXJQcm9wczogKDAsIF9vYmplY3RTcHJlYWQyLmRlZmF1bHQpKHt9LCBQYXBlclByb3BzLCB7XG4gICAgICAgICAgY2xhc3NlczogKDAsIF9vYmplY3RTcHJlYWQyLmRlZmF1bHQpKHt9LCBQYXBlclByb3BzLmNsYXNzZXMsIHtcbiAgICAgICAgICAgIHJvb3Q6IGNsYXNzZXMucGFwZXJcbiAgICAgICAgICB9KVxuICAgICAgICB9KVxuICAgICAgfSwgb3RoZXIpLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9NZW51TGlzdC5kZWZhdWx0LCAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHtcbiAgICAgICAgcm9sZTogXCJtZW51XCIsXG4gICAgICAgIG9uS2V5RG93bjogdGhpcy5oYW5kbGVMaXN0S2V5RG93blxuICAgICAgfSwgTWVudUxpc3RQcm9wcywge1xuICAgICAgICByZWY6IGZ1bmN0aW9uIHJlZihub2RlKSB7XG4gICAgICAgICAgX3RoaXMyLm1lbnVMaXN0ID0gbm9kZTtcbiAgICAgICAgfVxuICAgICAgfSksIGNoaWxkcmVuKSk7XG4gICAgfVxuICB9XSk7XG4gIHJldHVybiBNZW51O1xufShfcmVhY3QuZGVmYXVsdC5Db21wb25lbnQpO1xuXG5NZW51LnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqXG4gICAqIFRoZSBET00gZWxlbWVudCB1c2VkIHRvIHNldCB0aGUgcG9zaXRpb24gb2YgdGhlIG1lbnUuXG4gICAqL1xuICBhbmNob3JFbDogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdCxcblxuICAvKipcbiAgICogTWVudSBjb250ZW50cywgbm9ybWFsbHkgYE1lbnVJdGVtYHMuXG4gICAqL1xuICBjaGlsZHJlbjogX3Byb3BUeXBlcy5kZWZhdWx0Lm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzLWFwaSkgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogUHJvcGVydGllcyBhcHBsaWVkIHRvIHRoZSBgTWVudUxpc3RgIGVsZW1lbnQuXG4gICAqL1xuICBNZW51TGlzdFByb3BzOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBjb21wb25lbnQgcmVxdWVzdHMgdG8gYmUgY2xvc2VkLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gZXZlbnQgVGhlIGV2ZW50IHNvdXJjZSBvZiB0aGUgY2FsbGJhY2tcbiAgICovXG4gIG9uQ2xvc2U6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBiZWZvcmUgdGhlIE1lbnUgZW50ZXJzLlxuICAgKi9cbiAgb25FbnRlcjogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIE1lbnUgaGFzIGVudGVyZWQuXG4gICAqL1xuICBvbkVudGVyZWQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBNZW51IGlzIGVudGVyaW5nLlxuICAgKi9cbiAgb25FbnRlcmluZzogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGJlZm9yZSB0aGUgTWVudSBleGl0cy5cbiAgICovXG4gIG9uRXhpdDogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIE1lbnUgaGFzIGV4aXRlZC5cbiAgICovXG4gIG9uRXhpdGVkOiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgTWVudSBpcyBleGl0aW5nLlxuICAgKi9cbiAgb25FeGl0aW5nOiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYyxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgbWVudSBpcyB2aXNpYmxlLlxuICAgKi9cbiAgb3BlbjogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgUGFwZXJQcm9wczogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdCxcblxuICAvKipcbiAgICogYGNsYXNzZXNgIHByb3BlcnR5IGFwcGxpZWQgdG8gdGhlIGBQb3BvdmVyYCBlbGVtZW50LlxuICAgKi9cbiAgUG9wb3ZlckNsYXNzZXM6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHRoZW1lOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIFRoZSBsZW5ndGggb2YgdGhlIHRyYW5zaXRpb24gaW4gYG1zYCwgb3IgJ2F1dG8nXG4gICAqL1xuICB0cmFuc2l0aW9uRHVyYXRpb246IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMuZGVmYXVsdC5udW1iZXIsIF9wcm9wVHlwZXMuZGVmYXVsdC5zaGFwZSh7XG4gICAgZW50ZXI6IF9wcm9wVHlwZXMuZGVmYXVsdC5udW1iZXIsXG4gICAgZXhpdDogX3Byb3BUeXBlcy5kZWZhdWx0Lm51bWJlclxuICB9KSwgX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mKFsnYXV0byddKV0pXG59IDoge307XG5NZW51LmRlZmF1bHRQcm9wcyA9IHtcbiAgdHJhbnNpdGlvbkR1cmF0aW9uOiAnYXV0bydcbn07XG5cbnZhciBfZGVmYXVsdCA9ICgwLCBfd2l0aFN0eWxlcy5kZWZhdWx0KShzdHlsZXMsIHtcbiAgbmFtZTogJ011aU1lbnUnLFxuICB3aXRoVGhlbWU6IHRydWVcbn0pKE1lbnUpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlZmF1bHRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX01lbnUuZGVmYXVsdDtcbiAgfVxufSk7XG5cbnZhciBfTWVudSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vTWVudVwiKSk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJkZWZhdWx0XCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9MaXN0U3ViaGVhZGVyLmRlZmF1bHQ7XG4gIH1cbn0pO1xuXG52YXIgX0xpc3RTdWJoZWFkZXIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0xpc3RTdWJoZWFkZXJcIikpOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVmYXVsdFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfTGlzdEl0ZW1UZXh0LmRlZmF1bHQ7XG4gIH1cbn0pO1xuXG52YXIgX0xpc3RJdGVtVGV4dCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vTGlzdEl0ZW1UZXh0XCIpKTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlZmF1bHRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX0xpc3RJdGVtU2Vjb25kYXJ5QWN0aW9uLmRlZmF1bHQ7XG4gIH1cbn0pO1xuXG52YXIgX0xpc3RJdGVtU2Vjb25kYXJ5QWN0aW9uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9MaXN0SXRlbVNlY29uZGFyeUFjdGlvblwiKSk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJkZWZhdWx0XCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9MaXN0SXRlbUljb24uZGVmYXVsdDtcbiAgfVxufSk7XG5cbnZhciBfTGlzdEl0ZW1JY29uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9MaXN0SXRlbUljb25cIikpOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVmYXVsdFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfTGlzdEl0ZW1BdmF0YXIuZGVmYXVsdDtcbiAgfVxufSk7XG5cbnZhciBfTGlzdEl0ZW1BdmF0YXIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0xpc3RJdGVtQXZhdGFyXCIpKTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlZmF1bHRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX0ljb24uZGVmYXVsdDtcbiAgfVxufSk7XG5cbnZhciBfSWNvbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vSWNvblwiKSk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJkZWZhdWx0XCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9IaWRkZW4uZGVmYXVsdDtcbiAgfVxufSk7XG5cbnZhciBfSGlkZGVuID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9IaWRkZW5cIikpOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVmYXVsdFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfR3JpZExpc3RUaWxlQmFyLmRlZmF1bHQ7XG4gIH1cbn0pO1xuXG52YXIgX0dyaWRMaXN0VGlsZUJhciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vR3JpZExpc3RUaWxlQmFyXCIpKTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlZmF1bHRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX0Zvcm1Db250cm9sTGFiZWwuZGVmYXVsdDtcbiAgfVxufSk7XG5cbnZhciBfRm9ybUNvbnRyb2xMYWJlbCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vRm9ybUNvbnRyb2xMYWJlbFwiKSk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJkZWZhdWx0XCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9FeHBhbnNpb25QYW5lbFN1bW1hcnkuZGVmYXVsdDtcbiAgfVxufSk7XG5cbnZhciBfRXhwYW5zaW9uUGFuZWxTdW1tYXJ5ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9FeHBhbnNpb25QYW5lbFN1bW1hcnlcIikpOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVmYXVsdFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfRXhwYW5zaW9uUGFuZWxEZXRhaWxzLmRlZmF1bHQ7XG4gIH1cbn0pO1xuXG52YXIgX0V4cGFuc2lvblBhbmVsRGV0YWlscyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vRXhwYW5zaW9uUGFuZWxEZXRhaWxzXCIpKTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlZmF1bHRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX0V4cGFuc2lvblBhbmVsQWN0aW9ucy5kZWZhdWx0O1xuICB9XG59KTtcblxudmFyIF9FeHBhbnNpb25QYW5lbEFjdGlvbnMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0V4cGFuc2lvblBhbmVsQWN0aW9uc1wiKSk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJkZWZhdWx0XCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9FeHBhbnNpb25QYW5lbC5kZWZhdWx0O1xuICB9XG59KTtcblxudmFyIF9FeHBhbnNpb25QYW5lbCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vRXhwYW5zaW9uUGFuZWxcIikpOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVmYXVsdFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfRHJhd2VyLmRlZmF1bHQ7XG4gIH1cbn0pO1xuXG52YXIgX0RyYXdlciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vRHJhd2VyXCIpKTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlZmF1bHRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX0RpdmlkZXIuZGVmYXVsdDtcbiAgfVxufSk7XG5cbnZhciBfRGl2aWRlciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vRGl2aWRlclwiKSk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJkZWZhdWx0XCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9EaWFsb2dUaXRsZS5kZWZhdWx0O1xuICB9XG59KTtcblxudmFyIF9EaWFsb2dUaXRsZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vRGlhbG9nVGl0bGVcIikpOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVmYXVsdFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfRGlhbG9nQ29udGVudFRleHQuZGVmYXVsdDtcbiAgfVxufSk7XG5cbnZhciBfRGlhbG9nQ29udGVudFRleHQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0RpYWxvZ0NvbnRlbnRUZXh0XCIpKTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlZmF1bHRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX0RpYWxvZ0NvbnRlbnQuZGVmYXVsdDtcbiAgfVxufSk7XG5cbnZhciBfRGlhbG9nQ29udGVudCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vRGlhbG9nQ29udGVudFwiKSk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJkZWZhdWx0XCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9EaWFsb2dBY3Rpb25zLmRlZmF1bHQ7XG4gIH1cbn0pO1xuXG52YXIgX0RpYWxvZ0FjdGlvbnMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0RpYWxvZ0FjdGlvbnNcIikpOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gZnVuY3Rpb24gKHJlY2FsYykge1xuICBpZiAoIXNpemUgJiYgc2l6ZSAhPT0gMCB8fCByZWNhbGMpIHtcbiAgICBpZiAoX2luRE9NMi5kZWZhdWx0KSB7XG4gICAgICB2YXIgc2Nyb2xsRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG5cbiAgICAgIHNjcm9sbERpdi5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XG4gICAgICBzY3JvbGxEaXYuc3R5bGUudG9wID0gJy05OTk5cHgnO1xuICAgICAgc2Nyb2xsRGl2LnN0eWxlLndpZHRoID0gJzUwcHgnO1xuICAgICAgc2Nyb2xsRGl2LnN0eWxlLmhlaWdodCA9ICc1MHB4JztcbiAgICAgIHNjcm9sbERpdi5zdHlsZS5vdmVyZmxvdyA9ICdzY3JvbGwnO1xuXG4gICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHNjcm9sbERpdik7XG4gICAgICBzaXplID0gc2Nyb2xsRGl2Lm9mZnNldFdpZHRoIC0gc2Nyb2xsRGl2LmNsaWVudFdpZHRoO1xuICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChzY3JvbGxEaXYpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBzaXplO1xufTtcblxudmFyIF9pbkRPTSA9IHJlcXVpcmUoJy4vaW5ET00nKTtcblxudmFyIF9pbkRPTTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pbkRPTSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBzaXplID0gdm9pZCAwO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmFuaW1hdGlvbkVuZCA9IGV4cG9ydHMuYW5pbWF0aW9uRGVsYXkgPSBleHBvcnRzLmFuaW1hdGlvblRpbWluZyA9IGV4cG9ydHMuYW5pbWF0aW9uRHVyYXRpb24gPSBleHBvcnRzLmFuaW1hdGlvbk5hbWUgPSBleHBvcnRzLnRyYW5zaXRpb25FbmQgPSBleHBvcnRzLnRyYW5zaXRpb25EdXJhdGlvbiA9IGV4cG9ydHMudHJhbnNpdGlvbkRlbGF5ID0gZXhwb3J0cy50cmFuc2l0aW9uVGltaW5nID0gZXhwb3J0cy50cmFuc2l0aW9uUHJvcGVydHkgPSBleHBvcnRzLnRyYW5zZm9ybSA9IHVuZGVmaW5lZDtcblxudmFyIF9pbkRPTSA9IHJlcXVpcmUoJy4uL3V0aWwvaW5ET00nKTtcblxudmFyIF9pbkRPTTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pbkRPTSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciB0cmFuc2Zvcm0gPSAndHJhbnNmb3JtJztcbnZhciBwcmVmaXggPSB2b2lkIDAsXG4gICAgdHJhbnNpdGlvbkVuZCA9IHZvaWQgMCxcbiAgICBhbmltYXRpb25FbmQgPSB2b2lkIDA7XG52YXIgdHJhbnNpdGlvblByb3BlcnR5ID0gdm9pZCAwLFxuICAgIHRyYW5zaXRpb25EdXJhdGlvbiA9IHZvaWQgMCxcbiAgICB0cmFuc2l0aW9uVGltaW5nID0gdm9pZCAwLFxuICAgIHRyYW5zaXRpb25EZWxheSA9IHZvaWQgMDtcbnZhciBhbmltYXRpb25OYW1lID0gdm9pZCAwLFxuICAgIGFuaW1hdGlvbkR1cmF0aW9uID0gdm9pZCAwLFxuICAgIGFuaW1hdGlvblRpbWluZyA9IHZvaWQgMCxcbiAgICBhbmltYXRpb25EZWxheSA9IHZvaWQgMDtcblxuaWYgKF9pbkRPTTIuZGVmYXVsdCkge1xuICB2YXIgX2dldFRyYW5zaXRpb25Qcm9wZXJ0ID0gZ2V0VHJhbnNpdGlvblByb3BlcnRpZXMoKTtcblxuICBwcmVmaXggPSBfZ2V0VHJhbnNpdGlvblByb3BlcnQucHJlZml4O1xuICBleHBvcnRzLnRyYW5zaXRpb25FbmQgPSB0cmFuc2l0aW9uRW5kID0gX2dldFRyYW5zaXRpb25Qcm9wZXJ0LnRyYW5zaXRpb25FbmQ7XG4gIGV4cG9ydHMuYW5pbWF0aW9uRW5kID0gYW5pbWF0aW9uRW5kID0gX2dldFRyYW5zaXRpb25Qcm9wZXJ0LmFuaW1hdGlvbkVuZDtcblxuXG4gIGV4cG9ydHMudHJhbnNmb3JtID0gdHJhbnNmb3JtID0gcHJlZml4ICsgJy0nICsgdHJhbnNmb3JtO1xuICBleHBvcnRzLnRyYW5zaXRpb25Qcm9wZXJ0eSA9IHRyYW5zaXRpb25Qcm9wZXJ0eSA9IHByZWZpeCArICctdHJhbnNpdGlvbi1wcm9wZXJ0eSc7XG4gIGV4cG9ydHMudHJhbnNpdGlvbkR1cmF0aW9uID0gdHJhbnNpdGlvbkR1cmF0aW9uID0gcHJlZml4ICsgJy10cmFuc2l0aW9uLWR1cmF0aW9uJztcbiAgZXhwb3J0cy50cmFuc2l0aW9uRGVsYXkgPSB0cmFuc2l0aW9uRGVsYXkgPSBwcmVmaXggKyAnLXRyYW5zaXRpb24tZGVsYXknO1xuICBleHBvcnRzLnRyYW5zaXRpb25UaW1pbmcgPSB0cmFuc2l0aW9uVGltaW5nID0gcHJlZml4ICsgJy10cmFuc2l0aW9uLXRpbWluZy1mdW5jdGlvbic7XG5cbiAgZXhwb3J0cy5hbmltYXRpb25OYW1lID0gYW5pbWF0aW9uTmFtZSA9IHByZWZpeCArICctYW5pbWF0aW9uLW5hbWUnO1xuICBleHBvcnRzLmFuaW1hdGlvbkR1cmF0aW9uID0gYW5pbWF0aW9uRHVyYXRpb24gPSBwcmVmaXggKyAnLWFuaW1hdGlvbi1kdXJhdGlvbic7XG4gIGV4cG9ydHMuYW5pbWF0aW9uVGltaW5nID0gYW5pbWF0aW9uVGltaW5nID0gcHJlZml4ICsgJy1hbmltYXRpb24tZGVsYXknO1xuICBleHBvcnRzLmFuaW1hdGlvbkRlbGF5ID0gYW5pbWF0aW9uRGVsYXkgPSBwcmVmaXggKyAnLWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb24nO1xufVxuXG5leHBvcnRzLnRyYW5zZm9ybSA9IHRyYW5zZm9ybTtcbmV4cG9ydHMudHJhbnNpdGlvblByb3BlcnR5ID0gdHJhbnNpdGlvblByb3BlcnR5O1xuZXhwb3J0cy50cmFuc2l0aW9uVGltaW5nID0gdHJhbnNpdGlvblRpbWluZztcbmV4cG9ydHMudHJhbnNpdGlvbkRlbGF5ID0gdHJhbnNpdGlvbkRlbGF5O1xuZXhwb3J0cy50cmFuc2l0aW9uRHVyYXRpb24gPSB0cmFuc2l0aW9uRHVyYXRpb247XG5leHBvcnRzLnRyYW5zaXRpb25FbmQgPSB0cmFuc2l0aW9uRW5kO1xuZXhwb3J0cy5hbmltYXRpb25OYW1lID0gYW5pbWF0aW9uTmFtZTtcbmV4cG9ydHMuYW5pbWF0aW9uRHVyYXRpb24gPSBhbmltYXRpb25EdXJhdGlvbjtcbmV4cG9ydHMuYW5pbWF0aW9uVGltaW5nID0gYW5pbWF0aW9uVGltaW5nO1xuZXhwb3J0cy5hbmltYXRpb25EZWxheSA9IGFuaW1hdGlvbkRlbGF5O1xuZXhwb3J0cy5hbmltYXRpb25FbmQgPSBhbmltYXRpb25FbmQ7XG5leHBvcnRzLmRlZmF1bHQgPSB7XG4gIHRyYW5zZm9ybTogdHJhbnNmb3JtLFxuICBlbmQ6IHRyYW5zaXRpb25FbmQsXG4gIHByb3BlcnR5OiB0cmFuc2l0aW9uUHJvcGVydHksXG4gIHRpbWluZzogdHJhbnNpdGlvblRpbWluZyxcbiAgZGVsYXk6IHRyYW5zaXRpb25EZWxheSxcbiAgZHVyYXRpb246IHRyYW5zaXRpb25EdXJhdGlvblxufTtcblxuXG5mdW5jdGlvbiBnZXRUcmFuc2l0aW9uUHJvcGVydGllcygpIHtcbiAgdmFyIHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jykuc3R5bGU7XG5cbiAgdmFyIHZlbmRvck1hcCA9IHtcbiAgICBPOiBmdW5jdGlvbiBPKGUpIHtcbiAgICAgIHJldHVybiAnbycgKyBlLnRvTG93ZXJDYXNlKCk7XG4gICAgfSxcbiAgICBNb3o6IGZ1bmN0aW9uIE1veihlKSB7XG4gICAgICByZXR1cm4gZS50b0xvd2VyQ2FzZSgpO1xuICAgIH0sXG4gICAgV2Via2l0OiBmdW5jdGlvbiBXZWJraXQoZSkge1xuICAgICAgcmV0dXJuICd3ZWJraXQnICsgZTtcbiAgICB9LFxuICAgIG1zOiBmdW5jdGlvbiBtcyhlKSB7XG4gICAgICByZXR1cm4gJ01TJyArIGU7XG4gICAgfVxuICB9O1xuXG4gIHZhciB2ZW5kb3JzID0gT2JqZWN0LmtleXModmVuZG9yTWFwKTtcblxuICB2YXIgdHJhbnNpdGlvbkVuZCA9IHZvaWQgMCxcbiAgICAgIGFuaW1hdGlvbkVuZCA9IHZvaWQgMDtcbiAgdmFyIHByZWZpeCA9ICcnO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdmVuZG9ycy5sZW5ndGg7IGkrKykge1xuICAgIHZhciB2ZW5kb3IgPSB2ZW5kb3JzW2ldO1xuXG4gICAgaWYgKHZlbmRvciArICdUcmFuc2l0aW9uUHJvcGVydHknIGluIHN0eWxlKSB7XG4gICAgICBwcmVmaXggPSAnLScgKyB2ZW5kb3IudG9Mb3dlckNhc2UoKTtcbiAgICAgIHRyYW5zaXRpb25FbmQgPSB2ZW5kb3JNYXBbdmVuZG9yXSgnVHJhbnNpdGlvbkVuZCcpO1xuICAgICAgYW5pbWF0aW9uRW5kID0gdmVuZG9yTWFwW3ZlbmRvcl0oJ0FuaW1hdGlvbkVuZCcpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgaWYgKCF0cmFuc2l0aW9uRW5kICYmICd0cmFuc2l0aW9uUHJvcGVydHknIGluIHN0eWxlKSB0cmFuc2l0aW9uRW5kID0gJ3RyYW5zaXRpb25lbmQnO1xuXG4gIGlmICghYW5pbWF0aW9uRW5kICYmICdhbmltYXRpb25OYW1lJyBpbiBzdHlsZSkgYW5pbWF0aW9uRW5kID0gJ2FuaW1hdGlvbmVuZCc7XG5cbiAgc3R5bGUgPSBudWxsO1xuXG4gIHJldHVybiB7IGFuaW1hdGlvbkVuZDogYW5pbWF0aW9uRW5kLCB0cmFuc2l0aW9uRW5kOiB0cmFuc2l0aW9uRW5kLCBwcmVmaXg6IHByZWZpeCB9O1xufSIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGNhbWVsaXplU3R5bGVOYW1lO1xuXG52YXIgX2NhbWVsaXplID0gcmVxdWlyZSgnLi9jYW1lbGl6ZScpO1xuXG52YXIgX2NhbWVsaXplMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NhbWVsaXplKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIG1zUGF0dGVybiA9IC9eLW1zLS87IC8qKlxuICAgICAgICAgICAgICAgICAgICAgICAgICAqIENvcHlyaWdodCAyMDE0LTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgKiBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvYmxvYi8yYWViOGEyYTZiZWIwMDYxN2E0MjE3ZjdmODI4NDkyNGZhMmFkODE5L3NyYy92ZW5kb3IvY29yZS9jYW1lbGl6ZVN0eWxlTmFtZS5qc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAqL1xuZnVuY3Rpb24gY2FtZWxpemVTdHlsZU5hbWUoc3RyaW5nKSB7XG4gIHJldHVybiAoMCwgX2NhbWVsaXplMi5kZWZhdWx0KShzdHJpbmcucmVwbGFjZShtc1BhdHRlcm4sICdtcy0nKSk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9jbGFzc0NhbGxDaGVjazIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vY2xhc3NDYWxsQ2hlY2tcIikpO1xuXG52YXIgX2NyZWF0ZUNsYXNzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9jcmVhdGVDbGFzc1wiKSk7XG5cbnZhciBfc3R5bGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJkb20taGVscGVycy9zdHlsZVwiKSk7XG5cbnZhciBfb3duZXJEb2N1bWVudCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImRvbS1oZWxwZXJzL293bmVyRG9jdW1lbnRcIikpO1xuXG52YXIgX3Njcm9sbGJhclNpemUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJkb20taGVscGVycy91dGlsL3Njcm9sbGJhclNpemVcIikpO1xuXG52YXIgX2lzT3ZlcmZsb3dpbmcgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2lzT3ZlcmZsb3dpbmdcIikpO1xuXG52YXIgX21hbmFnZUFyaWFIaWRkZW4gPSByZXF1aXJlKFwiLi9tYW5hZ2VBcmlhSGlkZGVuXCIpO1xuXG5mdW5jdGlvbiBmaW5kSW5kZXhPZihkYXRhLCBjYWxsYmFjaykge1xuICB2YXIgaWR4ID0gLTE7XG4gIGRhdGEuc29tZShmdW5jdGlvbiAoaXRlbSwgaW5kZXgpIHtcbiAgICBpZiAoY2FsbGJhY2soaXRlbSkpIHtcbiAgICAgIGlkeCA9IGluZGV4O1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9KTtcbiAgcmV0dXJuIGlkeDtcbn1cblxuZnVuY3Rpb24gZ2V0UGFkZGluZ1JpZ2h0KG5vZGUpIHtcbiAgcmV0dXJuIHBhcnNlSW50KCgwLCBfc3R5bGUuZGVmYXVsdCkobm9kZSwgJ3BhZGRpbmdSaWdodCcpIHx8IDAsIDEwKTtcbn1cblxuZnVuY3Rpb24gc2V0Q29udGFpbmVyU3R5bGUoZGF0YSwgY29udGFpbmVyKSB7XG4gIHZhciBzdHlsZSA9IHtcbiAgICBvdmVyZmxvdzogJ2hpZGRlbidcbiAgfTsgLy8gV2UgYXJlIG9ubHkgaW50ZXJlc3RlZCBpbiB0aGUgYWN0dWFsIGBzdHlsZWAgaGVyZSBiZWNhdXNlIHdlIHdpbGwgb3ZlcnJpZGUgaXQuXG5cbiAgZGF0YS5zdHlsZSA9IHtcbiAgICBvdmVyZmxvdzogY29udGFpbmVyLnN0eWxlLm92ZXJmbG93LFxuICAgIHBhZGRpbmdSaWdodDogY29udGFpbmVyLnN0eWxlLnBhZGRpbmdSaWdodFxuICB9O1xuXG4gIGlmIChkYXRhLm92ZXJmbG93aW5nKSB7XG4gICAgdmFyIHNjcm9sbGJhclNpemUgPSAoMCwgX3Njcm9sbGJhclNpemUuZGVmYXVsdCkoKTsgLy8gVXNlIGNvbXB1dGVkIHN0eWxlLCBoZXJlIHRvIGdldCB0aGUgcmVhbCBwYWRkaW5nIHRvIGFkZCBvdXIgc2Nyb2xsYmFyIHdpZHRoLlxuXG4gICAgc3R5bGUucGFkZGluZ1JpZ2h0ID0gXCJcIi5jb25jYXQoZ2V0UGFkZGluZ1JpZ2h0KGNvbnRhaW5lcikgKyBzY3JvbGxiYXJTaXplLCBcInB4XCIpOyAvLyAubXVpLWZpeGVkIGlzIGEgZ2xvYmFsIGhlbHBlci5cblxuICAgIHZhciBmaXhlZE5vZGVzID0gKDAsIF9vd25lckRvY3VtZW50LmRlZmF1bHQpKGNvbnRhaW5lcikucXVlcnlTZWxlY3RvckFsbCgnLm11aS1maXhlZCcpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBmaXhlZE5vZGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICB2YXIgcGFkZGluZ1JpZ2h0ID0gZ2V0UGFkZGluZ1JpZ2h0KGZpeGVkTm9kZXNbaV0pO1xuICAgICAgZGF0YS5wcmV2UGFkZGluZ3MucHVzaChwYWRkaW5nUmlnaHQpO1xuICAgICAgZml4ZWROb2Rlc1tpXS5zdHlsZS5wYWRkaW5nUmlnaHQgPSBcIlwiLmNvbmNhdChwYWRkaW5nUmlnaHQgKyBzY3JvbGxiYXJTaXplLCBcInB4XCIpO1xuICAgIH1cbiAgfVxuXG4gIE9iamVjdC5rZXlzKHN0eWxlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICBjb250YWluZXIuc3R5bGVba2V5XSA9IHN0eWxlW2tleV07XG4gIH0pO1xufVxuXG5mdW5jdGlvbiByZW1vdmVDb250YWluZXJTdHlsZShkYXRhLCBjb250YWluZXIpIHtcbiAgT2JqZWN0LmtleXMoZGF0YS5zdHlsZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgY29udGFpbmVyLnN0eWxlW2tleV0gPSBkYXRhLnN0eWxlW2tleV07XG4gIH0pO1xuICB2YXIgZml4ZWROb2RlcyA9ICgwLCBfb3duZXJEb2N1bWVudC5kZWZhdWx0KShjb250YWluZXIpLnF1ZXJ5U2VsZWN0b3JBbGwoJy5tdWktZml4ZWQnKTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGZpeGVkTm9kZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBmaXhlZE5vZGVzW2ldLnN0eWxlLnBhZGRpbmdSaWdodCA9IFwiXCIuY29uY2F0KGRhdGEucHJldlBhZGRpbmdzW2ldLCBcInB4XCIpO1xuICB9XG59XG4vKipcbiAqIEBpZ25vcmUgLSBkbyBub3QgZG9jdW1lbnQuXG4gKlxuICogUHJvcGVyIHN0YXRlIG1hbmFnbWVudCBmb3IgY29udGFpbmVycyBhbmQgdGhlIG1vZGFscyBpbiB0aG9zZSBjb250YWluZXJzLlxuICogU2ltcGxpZmllZCwgYnV0IGluc3BpcmVkIGJ5IHJlYWN0LW92ZXJsYXkncyBNb2RhbE1hbmFnZXIgY2xhc3NcbiAqIFVzZWQgYnkgdGhlIE1vZGFsIHRvIGVuc3VyZSBwcm9wZXIgc3R5bGluZyBvZiBjb250YWluZXJzLlxuICovXG5cblxudmFyIE1vZGFsTWFuYWdlciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIE1vZGFsTWFuYWdlcigpIHtcbiAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gICAgKDAsIF9jbGFzc0NhbGxDaGVjazIuZGVmYXVsdCkodGhpcywgTW9kYWxNYW5hZ2VyKTtcbiAgICB2YXIgX29wdGlvbnMkaGlkZVNpYmxpbmdOID0gb3B0aW9ucy5oaWRlU2libGluZ05vZGVzLFxuICAgICAgICBoaWRlU2libGluZ05vZGVzID0gX29wdGlvbnMkaGlkZVNpYmxpbmdOID09PSB2b2lkIDAgPyB0cnVlIDogX29wdGlvbnMkaGlkZVNpYmxpbmdOLFxuICAgICAgICBfb3B0aW9ucyRoYW5kbGVDb250YWkgPSBvcHRpb25zLmhhbmRsZUNvbnRhaW5lck92ZXJmbG93LFxuICAgICAgICBoYW5kbGVDb250YWluZXJPdmVyZmxvdyA9IF9vcHRpb25zJGhhbmRsZUNvbnRhaSA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9vcHRpb25zJGhhbmRsZUNvbnRhaTtcbiAgICB0aGlzLmhpZGVTaWJsaW5nTm9kZXMgPSBoaWRlU2libGluZ05vZGVzO1xuICAgIHRoaXMuaGFuZGxlQ29udGFpbmVyT3ZlcmZsb3cgPSBoYW5kbGVDb250YWluZXJPdmVyZmxvdzsgLy8gdGhpcy5tb2RhbHNbbW9kYWxJZHhdID0gbW9kYWxcblxuICAgIHRoaXMubW9kYWxzID0gW107IC8vIHRoaXMuY29udGFpbmVyc1tjb250YWluZXJJZHhdID0gY29udGFpbmVyXG5cbiAgICB0aGlzLmNvbnRhaW5lcnMgPSBbXTsgLy8gdGhpcy5kYXRhW2NvbnRhaW5lcklkeF0gPSB7XG4gICAgLy8gICBtb2RhbHM6IFtdLFxuICAgIC8vIH1cblxuICAgIHRoaXMuZGF0YSA9IFtdO1xuICB9XG5cbiAgKDAsIF9jcmVhdGVDbGFzczIuZGVmYXVsdCkoTW9kYWxNYW5hZ2VyLCBbe1xuICAgIGtleTogXCJhZGRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gYWRkKG1vZGFsLCBjb250YWluZXIpIHtcbiAgICAgIHZhciBtb2RhbElkeCA9IHRoaXMubW9kYWxzLmluZGV4T2YobW9kYWwpO1xuXG4gICAgICBpZiAobW9kYWxJZHggIT09IC0xKSB7XG4gICAgICAgIHJldHVybiBtb2RhbElkeDtcbiAgICAgIH1cblxuICAgICAgbW9kYWxJZHggPSB0aGlzLm1vZGFscy5sZW5ndGg7XG4gICAgICB0aGlzLm1vZGFscy5wdXNoKG1vZGFsKTtcblxuICAgICAgaWYgKHRoaXMuaGlkZVNpYmxpbmdOb2Rlcykge1xuICAgICAgICAoMCwgX21hbmFnZUFyaWFIaWRkZW4uaGlkZVNpYmxpbmdzKShjb250YWluZXIsIG1vZGFsLm1vdW50Tm9kZSk7XG4gICAgICB9XG5cbiAgICAgIHZhciBjb250YWluZXJJZHggPSB0aGlzLmNvbnRhaW5lcnMuaW5kZXhPZihjb250YWluZXIpO1xuXG4gICAgICBpZiAoY29udGFpbmVySWR4ICE9PSAtMSkge1xuICAgICAgICB0aGlzLmRhdGFbY29udGFpbmVySWR4XS5tb2RhbHMucHVzaChtb2RhbCk7XG4gICAgICAgIHJldHVybiBtb2RhbElkeDtcbiAgICAgIH1cblxuICAgICAgdmFyIGRhdGEgPSB7XG4gICAgICAgIG1vZGFsczogW21vZGFsXSxcbiAgICAgICAgb3ZlcmZsb3dpbmc6ICgwLCBfaXNPdmVyZmxvd2luZy5kZWZhdWx0KShjb250YWluZXIpLFxuICAgICAgICBwcmV2UGFkZGluZ3M6IFtdXG4gICAgICB9O1xuXG4gICAgICBpZiAodGhpcy5oYW5kbGVDb250YWluZXJPdmVyZmxvdykge1xuICAgICAgICBzZXRDb250YWluZXJTdHlsZShkYXRhLCBjb250YWluZXIpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmNvbnRhaW5lcnMucHVzaChjb250YWluZXIpO1xuICAgICAgdGhpcy5kYXRhLnB1c2goZGF0YSk7XG4gICAgICByZXR1cm4gbW9kYWxJZHg7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlbW92ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW1vdmUobW9kYWwpIHtcbiAgICAgIHZhciBtb2RhbElkeCA9IHRoaXMubW9kYWxzLmluZGV4T2YobW9kYWwpO1xuXG4gICAgICBpZiAobW9kYWxJZHggPT09IC0xKSB7XG4gICAgICAgIHJldHVybiBtb2RhbElkeDtcbiAgICAgIH1cblxuICAgICAgdmFyIGNvbnRhaW5lcklkeCA9IGZpbmRJbmRleE9mKHRoaXMuZGF0YSwgZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgcmV0dXJuIGl0ZW0ubW9kYWxzLmluZGV4T2YobW9kYWwpICE9PSAtMTtcbiAgICAgIH0pO1xuICAgICAgdmFyIGRhdGEgPSB0aGlzLmRhdGFbY29udGFpbmVySWR4XTtcbiAgICAgIHZhciBjb250YWluZXIgPSB0aGlzLmNvbnRhaW5lcnNbY29udGFpbmVySWR4XTtcbiAgICAgIGRhdGEubW9kYWxzLnNwbGljZShkYXRhLm1vZGFscy5pbmRleE9mKG1vZGFsKSwgMSk7XG4gICAgICB0aGlzLm1vZGFscy5zcGxpY2UobW9kYWxJZHgsIDEpOyAvLyBJZiB0aGF0IHdhcyB0aGUgbGFzdCBtb2RhbCBpbiBhIGNvbnRhaW5lciwgY2xlYW4gdXAgdGhlIGNvbnRhaW5lci5cblxuICAgICAgaWYgKGRhdGEubW9kYWxzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICBpZiAodGhpcy5oYW5kbGVDb250YWluZXJPdmVyZmxvdykge1xuICAgICAgICAgIHJlbW92ZUNvbnRhaW5lclN0eWxlKGRhdGEsIGNvbnRhaW5lcik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5oaWRlU2libGluZ05vZGVzKSB7XG4gICAgICAgICAgKDAsIF9tYW5hZ2VBcmlhSGlkZGVuLnNob3dTaWJsaW5ncykoY29udGFpbmVyLCBtb2RhbC5tb3VudE5vZGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5jb250YWluZXJzLnNwbGljZShjb250YWluZXJJZHgsIDEpO1xuICAgICAgICB0aGlzLmRhdGEuc3BsaWNlKGNvbnRhaW5lcklkeCwgMSk7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuaGlkZVNpYmxpbmdOb2Rlcykge1xuICAgICAgICAvLyBPdGhlcndpc2UgbWFrZSBzdXJlIHRoZSBuZXh0IHRvcCBtb2RhbCBpcyB2aXNpYmxlIHRvIGEgc2NyZWFuIHJlYWRlci5cbiAgICAgICAgKDAsIF9tYW5hZ2VBcmlhSGlkZGVuLmFyaWFIaWRkZW4pKGZhbHNlLCBkYXRhLm1vZGFsc1tkYXRhLm1vZGFscy5sZW5ndGggLSAxXS5tb3VudE5vZGUpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbW9kYWxJZHg7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImlzVG9wTW9kYWxcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gaXNUb3BNb2RhbChtb2RhbCkge1xuICAgICAgcmV0dXJuICEhdGhpcy5tb2RhbHMubGVuZ3RoICYmIHRoaXMubW9kYWxzW3RoaXMubW9kYWxzLmxlbmd0aCAtIDFdID09PSBtb2RhbDtcbiAgICB9XG4gIH1dKTtcbiAgcmV0dXJuIE1vZGFsTWFuYWdlcjtcbn0oKTtcblxudmFyIF9kZWZhdWx0ID0gTW9kYWxNYW5hZ2VyO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJkZWZhdWx0XCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9Sb290UmVmLmRlZmF1bHQ7XG4gIH1cbn0pO1xuXG52YXIgX1Jvb3RSZWYgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL1Jvb3RSZWZcIikpOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGFjdGl2ZUVsZW1lbnQ7XG5cbnZhciBfb3duZXJEb2N1bWVudCA9IHJlcXVpcmUoJy4vb3duZXJEb2N1bWVudCcpO1xuXG52YXIgX293bmVyRG9jdW1lbnQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfb3duZXJEb2N1bWVudCk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIGFjdGl2ZUVsZW1lbnQoKSB7XG4gIHZhciBkb2MgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6ICgwLCBfb3duZXJEb2N1bWVudDIuZGVmYXVsdCkoKTtcblxuICB0cnkge1xuICAgIHJldHVybiBkb2MuYWN0aXZlRWxlbWVudDtcbiAgfSBjYXRjaCAoZSkgey8qIGllIHRocm93cyBpZiBubyBhY3RpdmUgZWxlbWVudCAqL31cbn1cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVmYXVsdFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfRGlhbG9nLmRlZmF1bHQ7XG4gIH1cbn0pO1xuXG52YXIgX0RpYWxvZyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vRGlhbG9nXCIpKTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlZmF1bHRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX0Nzc0Jhc2VsaW5lLmRlZmF1bHQ7XG4gIH1cbn0pO1xuXG52YXIgX0Nzc0Jhc2VsaW5lID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9Dc3NCYXNlbGluZVwiKSk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJkZWZhdWx0XCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9DaGlwLmRlZmF1bHQ7XG4gIH1cbn0pO1xuXG52YXIgX0NoaXAgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0NoaXBcIikpOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVmYXVsdFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfQ2hlY2tib3guZGVmYXVsdDtcbiAgfVxufSk7XG5cbnZhciBfQ2hlY2tib3ggPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0NoZWNrYm94XCIpKTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlZmF1bHRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX0NhcmRNZWRpYS5kZWZhdWx0O1xuICB9XG59KTtcblxudmFyIF9DYXJkTWVkaWEgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0NhcmRNZWRpYVwiKSk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJkZWZhdWx0XCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9DYXJkSGVhZGVyLmRlZmF1bHQ7XG4gIH1cbn0pO1xuXG52YXIgX0NhcmRIZWFkZXIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0NhcmRIZWFkZXJcIikpOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVmYXVsdFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfQ2FyZEFjdGlvbnMuZGVmYXVsdDtcbiAgfVxufSk7XG5cbnZhciBfQ2FyZEFjdGlvbnMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0NhcmRBY3Rpb25zXCIpKTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlZmF1bHRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX0JvdHRvbU5hdmlnYXRpb25BY3Rpb24uZGVmYXVsdDtcbiAgfVxufSk7XG5cbnZhciBfQm90dG9tTmF2aWdhdGlvbkFjdGlvbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vQm90dG9tTmF2aWdhdGlvbkFjdGlvblwiKSk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJkZWZhdWx0XCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9Cb3R0b21OYXZpZ2F0aW9uLmRlZmF1bHQ7XG4gIH1cbn0pO1xuXG52YXIgX0JvdHRvbU5hdmlnYXRpb24gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0JvdHRvbU5hdmlnYXRpb25cIikpOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVmYXVsdFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfQmFkZ2UuZGVmYXVsdDtcbiAgfVxufSk7XG5cbnZhciBfQmFkZ2UgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0JhZGdlXCIpKTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuc3R5bGVzID0gdm9pZCAwO1xuXG52YXIgX2V4dGVuZHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2V4dGVuZHNcIikpO1xuXG52YXIgX2RlZmluZVByb3BlcnR5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9kZWZpbmVQcm9wZXJ0eVwiKSk7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCIpKTtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKTtcblxudmFyIF9jbGFzc25hbWVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY2xhc3NuYW1lc1wiKSk7XG5cbnZhciBfd2l0aFN0eWxlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3N0eWxlcy93aXRoU3R5bGVzXCIpKTtcblxudmFyIHN0eWxlcyA9IGZ1bmN0aW9uIHN0eWxlcyh0aGVtZSkge1xuICByZXR1cm4ge1xuICAgIHJvb3Q6IHtcbiAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsXG4gICAgICBmbGV4U2hyaW5rOiAwLFxuICAgICAgd2lkdGg6IHRoZW1lLnNwYWNpbmcudW5pdCAqIDUsXG4gICAgICBoZWlnaHQ6IHRoZW1lLnNwYWNpbmcudW5pdCAqIDUsXG4gICAgICBmb250RmFtaWx5OiB0aGVtZS50eXBvZ3JhcGh5LmZvbnRGYW1pbHksXG4gICAgICBmb250U2l6ZTogdGhlbWUudHlwb2dyYXBoeS5weFRvUmVtKDIwKSxcbiAgICAgIGJvcmRlclJhZGl1czogJzUwJScsXG4gICAgICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gICAgICB1c2VyU2VsZWN0OiAnbm9uZSdcbiAgICB9LFxuICAgIGNvbG9yRGVmYXVsdDoge1xuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuYmFja2dyb3VuZC5kZWZhdWx0LFxuICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLnR5cGUgPT09ICdsaWdodCcgPyB0aGVtZS5wYWxldHRlLmdyZXlbNDAwXSA6IHRoZW1lLnBhbGV0dGUuZ3JleVs2MDBdXG4gICAgfSxcbiAgICBpbWc6IHtcbiAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICAgIHRleHRBbGlnbjogJ2NlbnRlcicsXG4gICAgICAvLyBIYW5kbGUgbm9uLXNxdWFyZSBpbWFnZS4gVGhlIHByb3BlcnR5IGlzbid0IHN1cHBvcnRlZCBieSBJRTExLlxuICAgICAgb2JqZWN0Rml0OiAnY292ZXInXG4gICAgfVxuICB9O1xufTtcblxuZXhwb3J0cy5zdHlsZXMgPSBzdHlsZXM7XG5cbmZ1bmN0aW9uIEF2YXRhcihwcm9wcykge1xuICB2YXIgYWx0ID0gcHJvcHMuYWx0LFxuICAgICAgY2hpbGRyZW5Qcm9wID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBjaGlsZHJlbkNsYXNzTmFtZVByb3AgPSBwcm9wcy5jaGlsZHJlbkNsYXNzTmFtZSxcbiAgICAgIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY2xhc3NOYW1lUHJvcCA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIENvbXBvbmVudCA9IHByb3BzLmNvbXBvbmVudCxcbiAgICAgIGltZ1Byb3BzID0gcHJvcHMuaW1nUHJvcHMsXG4gICAgICBzaXplcyA9IHByb3BzLnNpemVzLFxuICAgICAgc3JjID0gcHJvcHMuc3JjLFxuICAgICAgc3JjU2V0ID0gcHJvcHMuc3JjU2V0LFxuICAgICAgb3RoZXIgPSAoMCwgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMi5kZWZhdWx0KShwcm9wcywgW1wiYWx0XCIsIFwiY2hpbGRyZW5cIiwgXCJjaGlsZHJlbkNsYXNzTmFtZVwiLCBcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJjb21wb25lbnRcIiwgXCJpbWdQcm9wc1wiLCBcInNpemVzXCIsIFwic3JjXCIsIFwic3JjU2V0XCJdKTtcbiAgdmFyIGNsYXNzTmFtZSA9ICgwLCBfY2xhc3NuYW1lcy5kZWZhdWx0KShjbGFzc2VzLnJvb3QsICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKHt9LCBjbGFzc2VzLmNvbG9yRGVmYXVsdCwgY2hpbGRyZW5Qcm9wICYmICFzcmMgJiYgIXNyY1NldCksIGNsYXNzTmFtZVByb3ApO1xuICB2YXIgY2hpbGRyZW4gPSBudWxsO1xuXG4gIGlmIChjaGlsZHJlblByb3ApIHtcbiAgICBpZiAoY2hpbGRyZW5DbGFzc05hbWVQcm9wICYmIHR5cGVvZiBjaGlsZHJlblByb3AgIT09ICdzdHJpbmcnICYmIF9yZWFjdC5kZWZhdWx0LmlzVmFsaWRFbGVtZW50KGNoaWxkcmVuUHJvcCkpIHtcbiAgICAgIHZhciBjaGlsZHJlbkNsYXNzTmFtZSA9ICgwLCBfY2xhc3NuYW1lcy5kZWZhdWx0KShjaGlsZHJlbkNsYXNzTmFtZVByb3AsIGNoaWxkcmVuUHJvcC5wcm9wcy5jbGFzc05hbWUpO1xuICAgICAgY2hpbGRyZW4gPSBfcmVhY3QuZGVmYXVsdC5jbG9uZUVsZW1lbnQoY2hpbGRyZW5Qcm9wLCB7XG4gICAgICAgIGNsYXNzTmFtZTogY2hpbGRyZW5DbGFzc05hbWVcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBjaGlsZHJlbiA9IGNoaWxkcmVuUHJvcDtcbiAgICB9XG4gIH0gZWxzZSBpZiAoc3JjIHx8IHNyY1NldCkge1xuICAgIGNoaWxkcmVuID0gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImltZ1wiLCAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHtcbiAgICAgIGFsdDogYWx0LFxuICAgICAgc3JjOiBzcmMsXG4gICAgICBzcmNTZXQ6IHNyY1NldCxcbiAgICAgIHNpemVzOiBzaXplcyxcbiAgICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5pbWdcbiAgICB9LCBpbWdQcm9wcykpO1xuICB9XG5cbiAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHtcbiAgICBjbGFzc05hbWU6IGNsYXNzTmFtZVxuICB9LCBvdGhlciksIGNoaWxkcmVuKTtcbn1cblxuQXZhdGFyLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqXG4gICAqIFVzZWQgaW4gY29tYmluYXRpb24gd2l0aCBgc3JjYCBvciBgc3JjU2V0YCB0b1xuICAgKiBwcm92aWRlIGFuIGFsdCBhdHRyaWJ1dGUgZm9yIHRoZSByZW5kZXJlZCBgaW1nYCBlbGVtZW50LlxuICAgKi9cbiAgYWx0OiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBVc2VkIHRvIHJlbmRlciBpY29uIG9yIHRleHQgZWxlbWVudHMgaW5zaWRlIHRoZSBBdmF0YXIuXG4gICAqIGBzcmNgIGFuZCBgYWx0YCBwcm9wcyB3aWxsIG5vdCBiZSB1c2VkIGFuZCBubyBgaW1nYCB3aWxsXG4gICAqIGJlIHJlbmRlcmVkIGJ5IGRlZmF1bHQuXG4gICAqXG4gICAqIFRoaXMgY2FuIGJlIGFuIGVsZW1lbnQsIG9yIGp1c3QgYSBzdHJpbmcuXG4gICAqL1xuICBjaGlsZHJlbjogX3Byb3BUeXBlcy5kZWZhdWx0Lm5vZGUsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICogVGhlIGNsYXNzTmFtZSBvZiB0aGUgY2hpbGQgZWxlbWVudC5cbiAgICogVXNlZCBieSBDaGlwIGFuZCBMaXN0SXRlbUljb24gdG8gc3R5bGUgdGhlIEF2YXRhciBpY29uLlxuICAgKi9cbiAgY2hpbGRyZW5DbGFzc05hbWU6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzLWFwaSkgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBET00gZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZywgX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmNdKSxcblxuICAvKipcbiAgICogQXR0cmlidXRlcyBhcHBsaWVkIHRvIHRoZSBgaW1nYCBlbGVtZW50IHdoZW4gdGhlIGNvbXBvbmVudFxuICAgKiBpcyB1c2VkIHRvIGRpc3BsYXkgYW4gaW1hZ2UuXG4gICAqL1xuICBpbWdQcm9wczogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdCxcblxuICAvKipcbiAgICogVGhlIGBzaXplc2AgYXR0cmlidXRlIGZvciB0aGUgYGltZ2AgZWxlbWVudC5cbiAgICovXG4gIHNpemVzOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgYHNyY2AgYXR0cmlidXRlIGZvciB0aGUgYGltZ2AgZWxlbWVudC5cbiAgICovXG4gIHNyYzogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGBzcmNTZXRgIGF0dHJpYnV0ZSBmb3IgdGhlIGBpbWdgIGVsZW1lbnQuXG4gICAqL1xuICBzcmNTZXQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmdcbn0gOiB7fTtcbkF2YXRhci5kZWZhdWx0UHJvcHMgPSB7XG4gIGNvbXBvbmVudDogJ2Rpdidcbn07XG5cbnZhciBfZGVmYXVsdCA9ICgwLCBfd2l0aFN0eWxlcy5kZWZhdWx0KShzdHlsZXMsIHtcbiAgbmFtZTogJ011aUF2YXRhcidcbn0pKEF2YXRhcik7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xudmFyIGdyZWVuID0ge1xuICA1MDogJyNlOGY1ZTknLFxuICAxMDA6ICcjYzhlNmM5JyxcbiAgMjAwOiAnI2E1ZDZhNycsXG4gIDMwMDogJyM4MWM3ODQnLFxuICA0MDA6ICcjNjZiYjZhJyxcbiAgNTAwOiAnIzRjYWY1MCcsXG4gIDYwMDogJyM0M2EwNDcnLFxuICA3MDA6ICcjMzg4ZTNjJyxcbiAgODAwOiAnIzJlN2QzMicsXG4gIDkwMDogJyMxYjVlMjAnLFxuICBBMTAwOiAnI2I5ZjZjYScsXG4gIEEyMDA6ICcjNjlmMGFlJyxcbiAgQTQwMDogJyMwMGU2NzYnLFxuICBBNzAwOiAnIzAwYzg1Mydcbn07XG52YXIgX2RlZmF1bHQgPSBncmVlbjtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiY29tbW9uXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9jb21tb24uZGVmYXVsdDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJyZWRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX3JlZC5kZWZhdWx0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInBpbmtcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX3BpbmsuZGVmYXVsdDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJwdXJwbGVcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX3B1cnBsZS5kZWZhdWx0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlZXBQdXJwbGVcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX2RlZXBQdXJwbGUuZGVmYXVsdDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJpbmRpZ29cIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX2luZGlnby5kZWZhdWx0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImJsdWVcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX2JsdWUuZGVmYXVsdDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJsaWdodEJsdWVcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX2xpZ2h0Qmx1ZS5kZWZhdWx0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImN5YW5cIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX2N5YW4uZGVmYXVsdDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJ0ZWFsXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF90ZWFsLmRlZmF1bHQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZ3JlZW5cIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX2dyZWVuLmRlZmF1bHQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwibGlnaHRHcmVlblwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfbGlnaHRHcmVlbi5kZWZhdWx0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImxpbWVcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX2xpbWUuZGVmYXVsdDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJ5ZWxsb3dcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX3llbGxvdy5kZWZhdWx0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImFtYmVyXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9hbWJlci5kZWZhdWx0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIm9yYW5nZVwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfb3JhbmdlLmRlZmF1bHQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVlcE9yYW5nZVwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfZGVlcE9yYW5nZS5kZWZhdWx0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImJyb3duXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9icm93bi5kZWZhdWx0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImdyZXlcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX2dyZXkuZGVmYXVsdDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJibHVlR3JleVwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfYmx1ZUdyZXkuZGVmYXVsdDtcbiAgfVxufSk7XG5cbnZhciBfY29tbW9uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9jb21tb25cIikpO1xuXG52YXIgX3JlZCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vcmVkXCIpKTtcblxudmFyIF9waW5rID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9waW5rXCIpKTtcblxudmFyIF9wdXJwbGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3B1cnBsZVwiKSk7XG5cbnZhciBfZGVlcFB1cnBsZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vZGVlcFB1cnBsZVwiKSk7XG5cbnZhciBfaW5kaWdvID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9pbmRpZ29cIikpO1xuXG52YXIgX2JsdWUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2JsdWVcIikpO1xuXG52YXIgX2xpZ2h0Qmx1ZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vbGlnaHRCbHVlXCIpKTtcblxudmFyIF9jeWFuID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9jeWFuXCIpKTtcblxudmFyIF90ZWFsID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi90ZWFsXCIpKTtcblxudmFyIF9ncmVlbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vZ3JlZW5cIikpO1xuXG52YXIgX2xpZ2h0R3JlZW4gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2xpZ2h0R3JlZW5cIikpO1xuXG52YXIgX2xpbWUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2xpbWVcIikpO1xuXG52YXIgX3llbGxvdyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4veWVsbG93XCIpKTtcblxudmFyIF9hbWJlciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vYW1iZXJcIikpO1xuXG52YXIgX29yYW5nZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vb3JhbmdlXCIpKTtcblxudmFyIF9kZWVwT3JhbmdlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9kZWVwT3JhbmdlXCIpKTtcblxudmFyIF9icm93biA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vYnJvd25cIikpO1xuXG52YXIgX2dyZXkgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2dyZXlcIikpO1xuXG52YXIgX2JsdWVHcmV5ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9ibHVlR3JleVwiKSk7IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX3NldFN0YXRpYyA9IHJlcXVpcmUoJy4vc2V0U3RhdGljJyk7XG5cbnZhciBfc2V0U3RhdGljMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3NldFN0YXRpYyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBzZXREaXNwbGF5TmFtZSA9IGZ1bmN0aW9uIHNldERpc3BsYXlOYW1lKGRpc3BsYXlOYW1lKSB7XG4gIHJldHVybiAoMCwgX3NldFN0YXRpYzIuZGVmYXVsdCkoJ2Rpc3BsYXlOYW1lJywgZGlzcGxheU5hbWUpO1xufTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gc2V0RGlzcGxheU5hbWU7IiwidmFyIHBJRSA9IHJlcXVpcmUoJy4vX29iamVjdC1waWUnKTtcbnZhciBjcmVhdGVEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIElFOF9ET01fREVGSU5FID0gcmVxdWlyZSgnLi9faWU4LWRvbS1kZWZpbmUnKTtcbnZhciBnT1BEID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcblxuZXhwb3J0cy5mID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IGdPUEQgOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUCkge1xuICBPID0gdG9JT2JqZWN0KE8pO1xuICBQID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gIGlmIChJRThfRE9NX0RFRklORSkgdHJ5IHtcbiAgICByZXR1cm4gZ09QRChPLCBQKTtcbiAgfSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG4gIGlmIChoYXMoTywgUCkpIHJldHVybiBjcmVhdGVEZXNjKCFwSUUuZi5jYWxsKE8sIFApLCBPW1BdKTtcbn07XG4iLCIvLyAxOS4xLjIuNyAvIDE1LjIuMy40IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKE8pXG52YXIgJGtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cy1pbnRlcm5hbCcpO1xudmFyIGhpZGRlbktleXMgPSByZXF1aXJlKCcuL19lbnVtLWJ1Zy1rZXlzJykuY29uY2F0KCdsZW5ndGgnLCAncHJvdG90eXBlJyk7XG5cbmV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIHx8IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoTykge1xuICByZXR1cm4gJGtleXMoTywgaGlkZGVuS2V5cyk7XG59O1xuIiwiZXhwb3J0cy5mID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbiIsInZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChpdCkuc2xpY2UoOCwgLTEpO1xufTtcbiIsInZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgYXJyYXlJbmRleE9mID0gcmVxdWlyZSgnLi9fYXJyYXktaW5jbHVkZXMnKShmYWxzZSk7XG52YXIgSUVfUFJPVE8gPSByZXF1aXJlKCcuL19zaGFyZWQta2V5JykoJ0lFX1BST1RPJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iamVjdCwgbmFtZXMpIHtcbiAgdmFyIE8gPSB0b0lPYmplY3Qob2JqZWN0KTtcbiAgdmFyIGkgPSAwO1xuICB2YXIgcmVzdWx0ID0gW107XG4gIHZhciBrZXk7XG4gIGZvciAoa2V5IGluIE8pIGlmIChrZXkgIT0gSUVfUFJPVE8pIGhhcyhPLCBrZXkpICYmIHJlc3VsdC5wdXNoKGtleSk7XG4gIC8vIERvbid0IGVudW0gYnVnICYgaGlkZGVuIGtleXNcbiAgd2hpbGUgKG5hbWVzLmxlbmd0aCA+IGkpIGlmIChoYXMoTywga2V5ID0gbmFtZXNbaSsrXSkpIHtcbiAgICB+YXJyYXlJbmRleE9mKHJlc3VsdCwga2V5KSB8fCByZXN1bHQucHVzaChrZXkpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19oaWRlJyk7XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBkb2N1bWVudCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLmRvY3VtZW50O1xuLy8gdHlwZW9mIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgaXMgJ29iamVjdCcgaW4gb2xkIElFXG52YXIgaXMgPSBpc09iamVjdChkb2N1bWVudCkgJiYgaXNPYmplY3QoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXMgPyBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGl0KSA6IHt9O1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gIXJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHJlcXVpcmUoJy4vX2RvbS1jcmVhdGUnKSgnZGl2JyksICdhJywgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH0gfSkuYSAhPSA3O1xufSk7XG4iLCIvLyBvcHRpb25hbCAvIHNpbXBsZSBjb250ZXh0IGJpbmRpbmdcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChmbiwgdGhhdCwgbGVuZ3RoKSB7XG4gIGFGdW5jdGlvbihmbik7XG4gIGlmICh0aGF0ID09PSB1bmRlZmluZWQpIHJldHVybiBmbjtcbiAgc3dpdGNoIChsZW5ndGgpIHtcbiAgICBjYXNlIDE6IHJldHVybiBmdW5jdGlvbiAoYSkge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSk7XG4gICAgfTtcbiAgICBjYXNlIDI6IHJldHVybiBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYik7XG4gICAgfTtcbiAgICBjYXNlIDM6IHJldHVybiBmdW5jdGlvbiAoYSwgYiwgYykge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYiwgYyk7XG4gICAgfTtcbiAgfVxuICByZXR1cm4gZnVuY3Rpb24gKC8qIC4uLmFyZ3MgKi8pIHtcbiAgICByZXR1cm4gZm4uYXBwbHkodGhhdCwgYXJndW1lbnRzKTtcbiAgfTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgTElCUkFSWSA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG52YXIgJGl0ZXJDcmVhdGUgPSByZXF1aXJlKCcuL19pdGVyLWNyZWF0ZScpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcbnZhciBJVEVSQVRPUiA9IHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpO1xudmFyIEJVR0dZID0gIShbXS5rZXlzICYmICduZXh0JyBpbiBbXS5rZXlzKCkpOyAvLyBTYWZhcmkgaGFzIGJ1Z2d5IGl0ZXJhdG9ycyB3L28gYG5leHRgXG52YXIgRkZfSVRFUkFUT1IgPSAnQEBpdGVyYXRvcic7XG52YXIgS0VZUyA9ICdrZXlzJztcbnZhciBWQUxVRVMgPSAndmFsdWVzJztcblxudmFyIHJldHVyblRoaXMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChCYXNlLCBOQU1FLCBDb25zdHJ1Y3RvciwgbmV4dCwgREVGQVVMVCwgSVNfU0VULCBGT1JDRUQpIHtcbiAgJGl0ZXJDcmVhdGUoQ29uc3RydWN0b3IsIE5BTUUsIG5leHQpO1xuICB2YXIgZ2V0TWV0aG9kID0gZnVuY3Rpb24gKGtpbmQpIHtcbiAgICBpZiAoIUJVR0dZICYmIGtpbmQgaW4gcHJvdG8pIHJldHVybiBwcm90b1traW5kXTtcbiAgICBzd2l0Y2ggKGtpbmQpIHtcbiAgICAgIGNhc2UgS0VZUzogcmV0dXJuIGZ1bmN0aW9uIGtleXMoKSB7IHJldHVybiBuZXcgQ29uc3RydWN0b3IodGhpcywga2luZCk7IH07XG4gICAgICBjYXNlIFZBTFVFUzogcmV0dXJuIGZ1bmN0aW9uIHZhbHVlcygpIHsgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTsgfTtcbiAgICB9IHJldHVybiBmdW5jdGlvbiBlbnRyaWVzKCkgeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9O1xuICB9O1xuICB2YXIgVEFHID0gTkFNRSArICcgSXRlcmF0b3InO1xuICB2YXIgREVGX1ZBTFVFUyA9IERFRkFVTFQgPT0gVkFMVUVTO1xuICB2YXIgVkFMVUVTX0JVRyA9IGZhbHNlO1xuICB2YXIgcHJvdG8gPSBCYXNlLnByb3RvdHlwZTtcbiAgdmFyICRuYXRpdmUgPSBwcm90b1tJVEVSQVRPUl0gfHwgcHJvdG9bRkZfSVRFUkFUT1JdIHx8IERFRkFVTFQgJiYgcHJvdG9bREVGQVVMVF07XG4gIHZhciAkZGVmYXVsdCA9ICRuYXRpdmUgfHwgZ2V0TWV0aG9kKERFRkFVTFQpO1xuICB2YXIgJGVudHJpZXMgPSBERUZBVUxUID8gIURFRl9WQUxVRVMgPyAkZGVmYXVsdCA6IGdldE1ldGhvZCgnZW50cmllcycpIDogdW5kZWZpbmVkO1xuICB2YXIgJGFueU5hdGl2ZSA9IE5BTUUgPT0gJ0FycmF5JyA/IHByb3RvLmVudHJpZXMgfHwgJG5hdGl2ZSA6ICRuYXRpdmU7XG4gIHZhciBtZXRob2RzLCBrZXksIEl0ZXJhdG9yUHJvdG90eXBlO1xuICAvLyBGaXggbmF0aXZlXG4gIGlmICgkYW55TmF0aXZlKSB7XG4gICAgSXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90b3R5cGVPZigkYW55TmF0aXZlLmNhbGwobmV3IEJhc2UoKSkpO1xuICAgIGlmIChJdGVyYXRvclByb3RvdHlwZSAhPT0gT2JqZWN0LnByb3RvdHlwZSAmJiBJdGVyYXRvclByb3RvdHlwZS5uZXh0KSB7XG4gICAgICAvLyBTZXQgQEB0b1N0cmluZ1RhZyB0byBuYXRpdmUgaXRlcmF0b3JzXG4gICAgICBzZXRUb1N0cmluZ1RhZyhJdGVyYXRvclByb3RvdHlwZSwgVEFHLCB0cnVlKTtcbiAgICAgIC8vIGZpeCBmb3Igc29tZSBvbGQgZW5naW5lc1xuICAgICAgaWYgKCFMSUJSQVJZICYmIHR5cGVvZiBJdGVyYXRvclByb3RvdHlwZVtJVEVSQVRPUl0gIT0gJ2Z1bmN0aW9uJykgaGlkZShJdGVyYXRvclByb3RvdHlwZSwgSVRFUkFUT1IsIHJldHVyblRoaXMpO1xuICAgIH1cbiAgfVxuICAvLyBmaXggQXJyYXkje3ZhbHVlcywgQEBpdGVyYXRvcn0ubmFtZSBpbiBWOCAvIEZGXG4gIGlmIChERUZfVkFMVUVTICYmICRuYXRpdmUgJiYgJG5hdGl2ZS5uYW1lICE9PSBWQUxVRVMpIHtcbiAgICBWQUxVRVNfQlVHID0gdHJ1ZTtcbiAgICAkZGVmYXVsdCA9IGZ1bmN0aW9uIHZhbHVlcygpIHsgcmV0dXJuICRuYXRpdmUuY2FsbCh0aGlzKTsgfTtcbiAgfVxuICAvLyBEZWZpbmUgaXRlcmF0b3JcbiAgaWYgKCghTElCUkFSWSB8fCBGT1JDRUQpICYmIChCVUdHWSB8fCBWQUxVRVNfQlVHIHx8ICFwcm90b1tJVEVSQVRPUl0pKSB7XG4gICAgaGlkZShwcm90bywgSVRFUkFUT1IsICRkZWZhdWx0KTtcbiAgfVxuICAvLyBQbHVnIGZvciBsaWJyYXJ5XG4gIEl0ZXJhdG9yc1tOQU1FXSA9ICRkZWZhdWx0O1xuICBJdGVyYXRvcnNbVEFHXSA9IHJldHVyblRoaXM7XG4gIGlmIChERUZBVUxUKSB7XG4gICAgbWV0aG9kcyA9IHtcbiAgICAgIHZhbHVlczogREVGX1ZBTFVFUyA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKFZBTFVFUyksXG4gICAgICBrZXlzOiBJU19TRVQgPyAkZGVmYXVsdCA6IGdldE1ldGhvZChLRVlTKSxcbiAgICAgIGVudHJpZXM6ICRlbnRyaWVzXG4gICAgfTtcbiAgICBpZiAoRk9SQ0VEKSBmb3IgKGtleSBpbiBtZXRob2RzKSB7XG4gICAgICBpZiAoIShrZXkgaW4gcHJvdG8pKSByZWRlZmluZShwcm90bywga2V5LCBtZXRob2RzW2tleV0pO1xuICAgIH0gZWxzZSAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChCVUdHWSB8fCBWQUxVRVNfQlVHKSwgTkFNRSwgbWV0aG9kcyk7XG4gIH1cbiAgcmV0dXJuIG1ldGhvZHM7XG59O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfaXRlcmF0b3IgPSByZXF1aXJlKFwiLi4vY29yZS1qcy9zeW1ib2wvaXRlcmF0b3JcIik7XG5cbnZhciBfaXRlcmF0b3IyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaXRlcmF0b3IpO1xuXG52YXIgX3N5bWJvbCA9IHJlcXVpcmUoXCIuLi9jb3JlLWpzL3N5bWJvbFwiKTtcblxudmFyIF9zeW1ib2wyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc3ltYm9sKTtcblxudmFyIF90eXBlb2YgPSB0eXBlb2YgX3N5bWJvbDIuZGVmYXVsdCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBfaXRlcmF0b3IyLmRlZmF1bHQgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBfc3ltYm9sMi5kZWZhdWx0ID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBfc3ltYm9sMi5kZWZhdWx0ICYmIG9iaiAhPT0gX3N5bWJvbDIuZGVmYXVsdC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZXhwb3J0cy5kZWZhdWx0ID0gdHlwZW9mIF9zeW1ib2wyLmRlZmF1bHQgPT09IFwiZnVuY3Rpb25cIiAmJiBfdHlwZW9mKF9pdGVyYXRvcjIuZGVmYXVsdCkgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7XG4gIHJldHVybiB0eXBlb2Ygb2JqID09PSBcInVuZGVmaW5lZFwiID8gXCJ1bmRlZmluZWRcIiA6IF90eXBlb2Yob2JqKTtcbn0gOiBmdW5jdGlvbiAob2JqKSB7XG4gIHJldHVybiBvYmogJiYgdHlwZW9mIF9zeW1ib2wyLmRlZmF1bHQgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IF9zeW1ib2wyLmRlZmF1bHQgJiYgb2JqICE9PSBfc3ltYm9sMi5kZWZhdWx0LnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqID09PSBcInVuZGVmaW5lZFwiID8gXCJ1bmRlZmluZWRcIiA6IF90eXBlb2Yob2JqKTtcbn07IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuLyoqXG4gKiBOYW1lc3BhY2VzIHRvIGF2b2lkIGNvbmZsaWN0cyBvbiB0aGUgY29udGV4dC5cbiAqL1xudmFyIGpzcyA9IGV4cG9ydHMuanNzID0gJzY0YTU1ZDU3OGY4NTZkMjU4ZGMzNDViMDk0YTJhMmIzJztcbnZhciBzaGVldHNSZWdpc3RyeSA9IGV4cG9ydHMuc2hlZXRzUmVnaXN0cnkgPSAnZDRiZDBiYWFjYmM1MmJiZDQ4YmJiOWViMjQzNDRlY2QnO1xudmFyIG1hbmFnZXJzID0gZXhwb3J0cy5tYW5hZ2VycyA9ICdiNzY4Yjc4OTE5NTA0ZmJhOWRlMmMwMzU0NWM1Y2QzYSc7XG52YXIgc2hlZXRPcHRpb25zID0gZXhwb3J0cy5zaGVldE9wdGlvbnMgPSAnNmZjNTcwZDZiZDYxMzgzODE5ZDBmOWU3NDA3YzQ1MmQnOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbnZhciBnZXREaXNwbGF5TmFtZSA9IGZ1bmN0aW9uIGdldERpc3BsYXlOYW1lKENvbXBvbmVudCkge1xuICBpZiAodHlwZW9mIENvbXBvbmVudCA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gQ29tcG9uZW50O1xuICB9XG5cbiAgaWYgKCFDb21wb25lbnQpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG5cbiAgcmV0dXJuIENvbXBvbmVudC5kaXNwbGF5TmFtZSB8fCBDb21wb25lbnQubmFtZSB8fCAnQ29tcG9uZW50Jztcbn07XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGdldERpc3BsYXlOYW1lOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF9saW5rUnVsZSA9IHJlcXVpcmUoJy4vdXRpbHMvbGlua1J1bGUnKTtcblxudmFyIF9saW5rUnVsZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9saW5rUnVsZSk7XG5cbnZhciBfUnVsZUxpc3QgPSByZXF1aXJlKCcuL1J1bGVMaXN0Jyk7XG5cbnZhciBfUnVsZUxpc3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfUnVsZUxpc3QpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbi8qIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11c2UtYmVmb3JlLWRlZmluZSAqL1xudmFyIFN0eWxlU2hlZXQgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFN0eWxlU2hlZXQoc3R5bGVzLCBvcHRpb25zKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTdHlsZVNoZWV0KTtcblxuICAgIHRoaXMudXBkYXRlID0gZnVuY3Rpb24gKG5hbWUsIGRhdGEpIHtcbiAgICAgIGlmICh0eXBlb2YgbmFtZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgX3RoaXMucnVsZXMudXBkYXRlKG5hbWUsIGRhdGEpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX3RoaXMucnVsZXMudXBkYXRlKG5hbWUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH07XG5cbiAgICB0aGlzLmF0dGFjaGVkID0gZmFsc2U7XG4gICAgdGhpcy5kZXBsb3llZCA9IGZhbHNlO1xuICAgIHRoaXMubGlua2VkID0gZmFsc2U7XG4gICAgdGhpcy5jbGFzc2VzID0ge307XG4gICAgdGhpcy5vcHRpb25zID0gX2V4dGVuZHMoe30sIG9wdGlvbnMsIHtcbiAgICAgIHNoZWV0OiB0aGlzLFxuICAgICAgcGFyZW50OiB0aGlzLFxuICAgICAgY2xhc3NlczogdGhpcy5jbGFzc2VzXG4gICAgfSk7XG4gICAgdGhpcy5yZW5kZXJlciA9IG5ldyBvcHRpb25zLlJlbmRlcmVyKHRoaXMpO1xuICAgIHRoaXMucnVsZXMgPSBuZXcgX1J1bGVMaXN0MlsnZGVmYXVsdCddKHRoaXMub3B0aW9ucyk7XG5cbiAgICBmb3IgKHZhciBfbmFtZSBpbiBzdHlsZXMpIHtcbiAgICAgIHRoaXMucnVsZXMuYWRkKF9uYW1lLCBzdHlsZXNbX25hbWVdKTtcbiAgICB9XG5cbiAgICB0aGlzLnJ1bGVzLnByb2Nlc3MoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBdHRhY2ggcmVuZGVyYWJsZSB0byB0aGUgcmVuZGVyIHRyZWUuXG4gICAqL1xuXG5cbiAgX2NyZWF0ZUNsYXNzKFN0eWxlU2hlZXQsIFt7XG4gICAga2V5OiAnYXR0YWNoJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gYXR0YWNoKCkge1xuICAgICAgaWYgKHRoaXMuYXR0YWNoZWQpIHJldHVybiB0aGlzO1xuICAgICAgaWYgKCF0aGlzLmRlcGxveWVkKSB0aGlzLmRlcGxveSgpO1xuICAgICAgdGhpcy5yZW5kZXJlci5hdHRhY2goKTtcbiAgICAgIGlmICghdGhpcy5saW5rZWQgJiYgdGhpcy5vcHRpb25zLmxpbmspIHRoaXMubGluaygpO1xuICAgICAgdGhpcy5hdHRhY2hlZCA9IHRydWU7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmUgcmVuZGVyYWJsZSBmcm9tIHJlbmRlciB0cmVlLlxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdkZXRhY2gnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkZXRhY2goKSB7XG4gICAgICBpZiAoIXRoaXMuYXR0YWNoZWQpIHJldHVybiB0aGlzO1xuICAgICAgdGhpcy5yZW5kZXJlci5kZXRhY2goKTtcbiAgICAgIHRoaXMuYXR0YWNoZWQgPSBmYWxzZTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZCBhIHJ1bGUgdG8gdGhlIGN1cnJlbnQgc3R5bGVzaGVldC5cbiAgICAgKiBXaWxsIGluc2VydCBhIHJ1bGUgYWxzbyBhZnRlciB0aGUgc3R5bGVzaGVldCBoYXMgYmVlbiByZW5kZXJlZCBmaXJzdCB0aW1lLlxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdhZGRSdWxlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gYWRkUnVsZShuYW1lLCBkZWNsLCBvcHRpb25zKSB7XG4gICAgICB2YXIgcXVldWUgPSB0aGlzLnF1ZXVlO1xuXG4gICAgICAvLyBQbHVnaW5zIGNhbiBjcmVhdGUgcnVsZXMuXG4gICAgICAvLyBJbiBvcmRlciB0byBwcmVzZXJ2ZSB0aGUgcmlnaHQgb3JkZXIsIHdlIG5lZWQgdG8gcXVldWUgYWxsIGAuYWRkUnVsZWAgY2FsbHMsXG4gICAgICAvLyB3aGljaCBoYXBwZW4gYWZ0ZXIgdGhlIGZpcnN0IGBydWxlcy5hZGQoKWAgY2FsbC5cblxuICAgICAgaWYgKHRoaXMuYXR0YWNoZWQgJiYgIXF1ZXVlKSB0aGlzLnF1ZXVlID0gW107XG5cbiAgICAgIHZhciBydWxlID0gdGhpcy5ydWxlcy5hZGQobmFtZSwgZGVjbCwgb3B0aW9ucyk7XG4gICAgICB0aGlzLm9wdGlvbnMuanNzLnBsdWdpbnMub25Qcm9jZXNzUnVsZShydWxlKTtcblxuICAgICAgaWYgKHRoaXMuYXR0YWNoZWQpIHtcbiAgICAgICAgaWYgKCF0aGlzLmRlcGxveWVkKSByZXR1cm4gcnVsZTtcbiAgICAgICAgLy8gRG9uJ3QgaW5zZXJ0IHJ1bGUgZGlyZWN0bHkgaWYgdGhlcmUgaXMgbm8gc3RyaW5naWZpZWQgdmVyc2lvbiB5ZXQuXG4gICAgICAgIC8vIEl0IHdpbGwgYmUgaW5zZXJ0ZWQgYWxsIHRvZ2V0aGVyIHdoZW4gLmF0dGFjaCBpcyBjYWxsZWQuXG4gICAgICAgIGlmIChxdWV1ZSkgcXVldWUucHVzaChydWxlKTtlbHNlIHtcbiAgICAgICAgICB0aGlzLmluc2VydFJ1bGUocnVsZSk7XG4gICAgICAgICAgaWYgKHRoaXMucXVldWUpIHtcbiAgICAgICAgICAgIHRoaXMucXVldWUuZm9yRWFjaCh0aGlzLmluc2VydFJ1bGUsIHRoaXMpO1xuICAgICAgICAgICAgdGhpcy5xdWV1ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJ1bGU7XG4gICAgICB9XG5cbiAgICAgIC8vIFdlIGNhbid0IGFkZCBydWxlcyB0byBhIGRldGFjaGVkIHN0eWxlIG5vZGUuXG4gICAgICAvLyBXZSB3aWxsIHJlZGVwbG95IHRoZSBzaGVldCBvbmNlIHVzZXIgd2lsbCBhdHRhY2ggaXQuXG4gICAgICB0aGlzLmRlcGxveWVkID0gZmFsc2U7XG5cbiAgICAgIHJldHVybiBydWxlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEluc2VydCBydWxlIGludG8gdGhlIFN0eWxlU2hlZXRcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnaW5zZXJ0UnVsZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGluc2VydFJ1bGUocnVsZSkge1xuICAgICAgdmFyIHJlbmRlcmFibGUgPSB0aGlzLnJlbmRlcmVyLmluc2VydFJ1bGUocnVsZSk7XG4gICAgICBpZiAocmVuZGVyYWJsZSAmJiB0aGlzLm9wdGlvbnMubGluaykgKDAsIF9saW5rUnVsZTJbJ2RlZmF1bHQnXSkocnVsZSwgcmVuZGVyYWJsZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGFuZCBhZGQgcnVsZXMuXG4gICAgICogV2lsbCByZW5kZXIgYWxzbyBhZnRlciBTdHlsZSBTaGVldCB3YXMgcmVuZGVyZWQgdGhlIGZpcnN0IHRpbWUuXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2FkZFJ1bGVzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gYWRkUnVsZXMoc3R5bGVzLCBvcHRpb25zKSB7XG4gICAgICB2YXIgYWRkZWQgPSBbXTtcbiAgICAgIGZvciAodmFyIF9uYW1lMiBpbiBzdHlsZXMpIHtcbiAgICAgICAgYWRkZWQucHVzaCh0aGlzLmFkZFJ1bGUoX25hbWUyLCBzdHlsZXNbX25hbWUyXSwgb3B0aW9ucykpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFkZGVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCBhIHJ1bGUgYnkgbmFtZS5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnZ2V0UnVsZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldFJ1bGUobmFtZSkge1xuICAgICAgcmV0dXJuIHRoaXMucnVsZXMuZ2V0KG5hbWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERlbGV0ZSBhIHJ1bGUgYnkgbmFtZS5cbiAgICAgKiBSZXR1cm5zIGB0cnVlYDogaWYgcnVsZSBoYXMgYmVlbiBkZWxldGVkIGZyb20gdGhlIERPTS5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnZGVsZXRlUnVsZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRlbGV0ZVJ1bGUobmFtZSkge1xuICAgICAgdmFyIHJ1bGUgPSB0aGlzLnJ1bGVzLmdldChuYW1lKTtcblxuICAgICAgaWYgKCFydWxlKSByZXR1cm4gZmFsc2U7XG5cbiAgICAgIHRoaXMucnVsZXMucmVtb3ZlKHJ1bGUpO1xuXG4gICAgICBpZiAodGhpcy5hdHRhY2hlZCAmJiBydWxlLnJlbmRlcmFibGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVuZGVyZXIuZGVsZXRlUnVsZShydWxlLnJlbmRlcmFibGUpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgaW5kZXggb2YgYSBydWxlLlxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdpbmRleE9mJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gaW5kZXhPZihydWxlKSB7XG4gICAgICByZXR1cm4gdGhpcy5ydWxlcy5pbmRleE9mKHJ1bGUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERlcGxveSBwdXJlIENTUyBzdHJpbmcgdG8gYSByZW5kZXJhYmxlLlxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdkZXBsb3knLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkZXBsb3koKSB7XG4gICAgICB0aGlzLnJlbmRlcmVyLmRlcGxveSgpO1xuICAgICAgdGhpcy5kZXBsb3llZCA9IHRydWU7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBMaW5rIHJlbmRlcmFibGUgQ1NTIHJ1bGVzIGZyb20gc2hlZXQgd2l0aCB0aGVpciBjb3JyZXNwb25kaW5nIG1vZGVscy5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnbGluaycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGxpbmsoKSB7XG4gICAgICB2YXIgY3NzUnVsZXMgPSB0aGlzLnJlbmRlcmVyLmdldFJ1bGVzKCk7XG5cbiAgICAgIC8vIElzIHVuZGVmaW5lZCB3aGVuIFZpcnR1YWxSZW5kZXJlciBpcyB1c2VkLlxuICAgICAgaWYgKGNzc1J1bGVzKSB0aGlzLnJ1bGVzLmxpbmsoY3NzUnVsZXMpO1xuICAgICAgdGhpcy5saW5rZWQgPSB0cnVlO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXBkYXRlIHRoZSBmdW5jdGlvbiB2YWx1ZXMgd2l0aCBhIG5ldyBkYXRhLlxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICd0b1N0cmluZycsXG5cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnQgcnVsZXMgdG8gYSBDU1Mgc3RyaW5nLlxuICAgICAqL1xuICAgIHZhbHVlOiBmdW5jdGlvbiB0b1N0cmluZyhvcHRpb25zKSB7XG4gICAgICByZXR1cm4gdGhpcy5ydWxlcy50b1N0cmluZyhvcHRpb25zKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gU3R5bGVTaGVldDtcbn0oKTtcblxuZXhwb3J0c1snZGVmYXVsdCddID0gU3R5bGVTaGVldDsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfd2FybmluZyA9IHJlcXVpcmUoJ3dhcm5pbmcnKTtcblxudmFyIF93YXJuaW5nMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3dhcm5pbmcpO1xuXG52YXIgX1N0eWxlU2hlZXQgPSByZXF1aXJlKCcuLi9TdHlsZVNoZWV0Jyk7XG5cbnZhciBfU3R5bGVTaGVldDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9TdHlsZVNoZWV0KTtcblxudmFyIF9tb2R1bGVJZCA9IHJlcXVpcmUoJy4vbW9kdWxlSWQnKTtcblxudmFyIF9tb2R1bGVJZDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9tb2R1bGVJZCk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblxudmFyIG1heFJ1bGVzID0gMWUxMDtcblxuXG52YXIgZW52ID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlY7XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHdoaWNoIGdlbmVyYXRlcyB1bmlxdWUgY2xhc3MgbmFtZXMgYmFzZWQgb24gY291bnRlcnMuXG4gKiBXaGVuIG5ldyBnZW5lcmF0b3IgZnVuY3Rpb24gaXMgY3JlYXRlZCwgcnVsZSBjb3VudGVyIGlzIHJlc2V0ZWQuXG4gKiBXZSBuZWVkIHRvIHJlc2V0IHRoZSBydWxlIGNvdW50ZXIgZm9yIFNTUiBmb3IgZWFjaCByZXF1ZXN0LlxuICovXG5cbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHJ1bGVDb3VudGVyID0gMDtcbiAgdmFyIGRlZmF1bHRQcmVmaXggPSBlbnYgPT09ICdwcm9kdWN0aW9uJyA/ICdjJyA6ICcnO1xuXG4gIHJldHVybiBmdW5jdGlvbiAocnVsZSwgc2hlZXQpIHtcbiAgICBydWxlQ291bnRlciArPSAxO1xuXG4gICAgaWYgKHJ1bGVDb3VudGVyID4gbWF4UnVsZXMpIHtcbiAgICAgICgwLCBfd2FybmluZzJbJ2RlZmF1bHQnXSkoZmFsc2UsICdbSlNTXSBZb3UgbWlnaHQgaGF2ZSBhIG1lbW9yeSBsZWFrLiBSdWxlIGNvdW50ZXIgaXMgYXQgJXMuJywgcnVsZUNvdW50ZXIpO1xuICAgIH1cblxuICAgIHZhciBwcmVmaXggPSBkZWZhdWx0UHJlZml4O1xuICAgIHZhciBqc3NJZCA9ICcnO1xuXG4gICAgaWYgKHNoZWV0KSB7XG4gICAgICBwcmVmaXggPSBzaGVldC5vcHRpb25zLmNsYXNzTmFtZVByZWZpeCB8fCBkZWZhdWx0UHJlZml4O1xuICAgICAgaWYgKHNoZWV0Lm9wdGlvbnMuanNzLmlkICE9IG51bGwpIGpzc0lkICs9IHNoZWV0Lm9wdGlvbnMuanNzLmlkO1xuICAgIH1cblxuICAgIGlmIChlbnYgPT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgcmV0dXJuICcnICsgcHJlZml4ICsgX21vZHVsZUlkMlsnZGVmYXVsdCddICsganNzSWQgKyBydWxlQ291bnRlcjtcbiAgICB9XG5cbiAgICByZXR1cm4gcHJlZml4ICsgcnVsZS5rZXkgKyAnLScgKyBfbW9kdWxlSWQyWydkZWZhdWx0J10gKyAoanNzSWQgJiYgJy0nICsganNzSWQpICsgJy0nICsgcnVsZUNvdW50ZXI7XG4gIH07XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBsaW5rUnVsZTtcbi8qKlxuICogTGluayBydWxlIHdpdGggQ1NTU3R5bGVSdWxlIGFuZCBuZXN0ZWQgcnVsZXMgd2l0aCBjb3JyZXNwb25kaW5nIG5lc3RlZCBjc3NSdWxlcyBpZiBib3RoIGV4aXN0cy5cbiAqL1xuZnVuY3Rpb24gbGlua1J1bGUocnVsZSwgY3NzUnVsZSkge1xuICBydWxlLnJlbmRlcmFibGUgPSBjc3NSdWxlO1xuICBpZiAocnVsZS5ydWxlcyAmJiBjc3NSdWxlLmNzc1J1bGVzKSBydWxlLnJ1bGVzLmxpbmsoY3NzUnVsZS5jc3NSdWxlcyk7XG59IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX3N5bWJvbE9ic2VydmFibGUgPSByZXF1aXJlKCdzeW1ib2wtb2JzZXJ2YWJsZScpO1xuXG52YXIgX3N5bWJvbE9ic2VydmFibGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc3ltYm9sT2JzZXJ2YWJsZSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblxuZXhwb3J0c1snZGVmYXVsdCddID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAmJiB2YWx1ZVtfc3ltYm9sT2JzZXJ2YWJsZTJbJ2RlZmF1bHQnXV0gJiYgdmFsdWUgPT09IHZhbHVlW19zeW1ib2xPYnNlcnZhYmxlMlsnZGVmYXVsdCddXSgpO1xufTsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbi8qKlxuICogU2hlZXRzIHJlZ2lzdHJ5IHRvIGFjY2VzcyB0aGVtIGFsbCBhdCBvbmUgcGxhY2UuXG4gKi9cbnZhciBTaGVldHNSZWdpc3RyeSA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gU2hlZXRzUmVnaXN0cnkoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFNoZWV0c1JlZ2lzdHJ5KTtcblxuICAgIHRoaXMucmVnaXN0cnkgPSBbXTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhTaGVldHNSZWdpc3RyeSwgW3tcbiAgICBrZXk6ICdhZGQnLFxuXG5cbiAgICAvKipcbiAgICAgKiBSZWdpc3RlciBhIFN0eWxlIFNoZWV0LlxuICAgICAqL1xuICAgIHZhbHVlOiBmdW5jdGlvbiBhZGQoc2hlZXQpIHtcbiAgICAgIHZhciByZWdpc3RyeSA9IHRoaXMucmVnaXN0cnk7XG4gICAgICB2YXIgaW5kZXggPSBzaGVldC5vcHRpb25zLmluZGV4O1xuXG5cbiAgICAgIGlmIChyZWdpc3RyeS5pbmRleE9mKHNoZWV0KSAhPT0gLTEpIHJldHVybjtcblxuICAgICAgaWYgKHJlZ2lzdHJ5Lmxlbmd0aCA9PT0gMCB8fCBpbmRleCA+PSB0aGlzLmluZGV4KSB7XG4gICAgICAgIHJlZ2lzdHJ5LnB1c2goc2hlZXQpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIEZpbmQgYSBwb3NpdGlvbi5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmVnaXN0cnkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKHJlZ2lzdHJ5W2ldLm9wdGlvbnMuaW5kZXggPiBpbmRleCkge1xuICAgICAgICAgIHJlZ2lzdHJ5LnNwbGljZShpLCAwLCBzaGVldCk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVzZXQgdGhlIHJlZ2lzdHJ5LlxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdyZXNldCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlc2V0KCkge1xuICAgICAgdGhpcy5yZWdpc3RyeSA9IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZSBhIFN0eWxlIFNoZWV0LlxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdyZW1vdmUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW1vdmUoc2hlZXQpIHtcbiAgICAgIHZhciBpbmRleCA9IHRoaXMucmVnaXN0cnkuaW5kZXhPZihzaGVldCk7XG4gICAgICB0aGlzLnJlZ2lzdHJ5LnNwbGljZShpbmRleCwgMSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydCBhbGwgYXR0YWNoZWQgc2hlZXRzIHRvIGEgQ1NTIHN0cmluZy5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAndG9TdHJpbmcnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB0b1N0cmluZyhvcHRpb25zKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZWdpc3RyeS5maWx0ZXIoZnVuY3Rpb24gKHNoZWV0KSB7XG4gICAgICAgIHJldHVybiBzaGVldC5hdHRhY2hlZDtcbiAgICAgIH0pLm1hcChmdW5jdGlvbiAoc2hlZXQpIHtcbiAgICAgICAgcmV0dXJuIHNoZWV0LnRvU3RyaW5nKG9wdGlvbnMpO1xuICAgICAgfSkuam9pbignXFxuJyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnaW5kZXgnLFxuXG5cbiAgICAvKipcbiAgICAgKiBDdXJyZW50IGhpZ2hlc3QgaW5kZXggbnVtYmVyLlxuICAgICAqL1xuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMucmVnaXN0cnkubGVuZ3RoID09PSAwID8gMCA6IHRoaXMucmVnaXN0cnlbdGhpcy5yZWdpc3RyeS5sZW5ndGggLSAxXS5vcHRpb25zLmluZGV4O1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBTaGVldHNSZWdpc3RyeTtcbn0oKTtcblxuZXhwb3J0c1snZGVmYXVsdCddID0gU2hlZXRzUmVnaXN0cnk7IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5jcmVhdGUgPSBleHBvcnRzLmNyZWF0ZUdlbmVyYXRlQ2xhc3NOYW1lID0gZXhwb3J0cy5zaGVldHMgPSBleHBvcnRzLlJ1bGVMaXN0ID0gZXhwb3J0cy5TaGVldHNNYW5hZ2VyID0gZXhwb3J0cy5TaGVldHNSZWdpc3RyeSA9IGV4cG9ydHMudG9Dc3NWYWx1ZSA9IGV4cG9ydHMuZ2V0RHluYW1pY1N0eWxlcyA9IHVuZGVmaW5lZDtcblxudmFyIF9nZXREeW5hbWljU3R5bGVzID0gcmVxdWlyZSgnLi91dGlscy9nZXREeW5hbWljU3R5bGVzJyk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnZ2V0RHluYW1pY1N0eWxlcycsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2dldER5bmFtaWNTdHlsZXMpWydkZWZhdWx0J107XG4gIH1cbn0pO1xuXG52YXIgX3RvQ3NzVmFsdWUgPSByZXF1aXJlKCcuL3V0aWxzL3RvQ3NzVmFsdWUnKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICd0b0Nzc1ZhbHVlJywge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdG9Dc3NWYWx1ZSlbJ2RlZmF1bHQnXTtcbiAgfVxufSk7XG5cbnZhciBfU2hlZXRzUmVnaXN0cnkgPSByZXF1aXJlKCcuL1NoZWV0c1JlZ2lzdHJ5Jyk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnU2hlZXRzUmVnaXN0cnknLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9TaGVldHNSZWdpc3RyeSlbJ2RlZmF1bHQnXTtcbiAgfVxufSk7XG5cbnZhciBfU2hlZXRzTWFuYWdlciA9IHJlcXVpcmUoJy4vU2hlZXRzTWFuYWdlcicpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ1NoZWV0c01hbmFnZXInLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9TaGVldHNNYW5hZ2VyKVsnZGVmYXVsdCddO1xuICB9XG59KTtcblxudmFyIF9SdWxlTGlzdCA9IHJlcXVpcmUoJy4vUnVsZUxpc3QnKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdSdWxlTGlzdCcsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1J1bGVMaXN0KVsnZGVmYXVsdCddO1xuICB9XG59KTtcblxudmFyIF9zaGVldHMgPSByZXF1aXJlKCcuL3NoZWV0cycpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ3NoZWV0cycsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3NoZWV0cylbJ2RlZmF1bHQnXTtcbiAgfVxufSk7XG5cbnZhciBfY3JlYXRlR2VuZXJhdGVDbGFzc05hbWUgPSByZXF1aXJlKCcuL3V0aWxzL2NyZWF0ZUdlbmVyYXRlQ2xhc3NOYW1lJyk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnY3JlYXRlR2VuZXJhdGVDbGFzc05hbWUnLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVHZW5lcmF0ZUNsYXNzTmFtZSlbJ2RlZmF1bHQnXTtcbiAgfVxufSk7XG5cbnZhciBfSnNzID0gcmVxdWlyZSgnLi9Kc3MnKTtcblxudmFyIF9Kc3MyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfSnNzKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgSnNzLlxuICovXG52YXIgY3JlYXRlID0gZXhwb3J0cy5jcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUob3B0aW9ucykge1xuICByZXR1cm4gbmV3IF9Kc3MyWydkZWZhdWx0J10ob3B0aW9ucyk7XG59O1xuXG4vKipcbiAqIEEgZ2xvYmFsIEpzcyBpbnN0YW5jZS5cbiAqL1xuZXhwb3J0c1snZGVmYXVsdCddID0gY3JlYXRlKCk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfanNzR2xvYmFsID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwianNzLWdsb2JhbFwiKSk7XG5cbnZhciBfanNzTmVzdGVkID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwianNzLW5lc3RlZFwiKSk7XG5cbnZhciBfanNzQ2FtZWxDYXNlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwianNzLWNhbWVsLWNhc2VcIikpO1xuXG52YXIgX2pzc0RlZmF1bHRVbml0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwianNzLWRlZmF1bHQtdW5pdFwiKSk7XG5cbnZhciBfanNzVmVuZG9yUHJlZml4ZXIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJqc3MtdmVuZG9yLXByZWZpeGVyXCIpKTtcblxudmFyIF9qc3NQcm9wc1NvcnQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJqc3MtcHJvcHMtc29ydFwiKSk7XG5cbi8vIFN1YnNldCBvZiBqc3MtcHJlc2V0LWRlZmF1bHQgd2l0aCBvbmx5IHRoZSBwbHVnaW5zIHRoZSBNYXRlcmlhbC1VSVxuLy8gY29tcG9uZW50cyBhcmUgdXNpbmcuXG5mdW5jdGlvbiBqc3NQcmVzZXQoKSB7XG4gIHJldHVybiB7XG4gICAgcGx1Z2luczogWygwLCBfanNzR2xvYmFsLmRlZmF1bHQpKCksICgwLCBfanNzTmVzdGVkLmRlZmF1bHQpKCksICgwLCBfanNzQ2FtZWxDYXNlLmRlZmF1bHQpKCksICgwLCBfanNzRGVmYXVsdFVuaXQuZGVmYXVsdCkoKSwgKDAsIF9qc3NWZW5kb3JQcmVmaXhlci5kZWZhdWx0KSgpLCAoMCwgX2pzc1Byb3BzU29ydC5kZWZhdWx0KSgpXVxuICB9O1xufVxuXG52YXIgX2RlZmF1bHQgPSBqc3NQcmVzZXQ7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcbnZhciByZWQgPSB7XG4gIDUwOiAnI2ZmZWJlZScsXG4gIDEwMDogJyNmZmNkZDInLFxuICAyMDA6ICcjZWY5YTlhJyxcbiAgMzAwOiAnI2U1NzM3MycsXG4gIDQwMDogJyNlZjUzNTAnLFxuICA1MDA6ICcjZjQ0MzM2JyxcbiAgNjAwOiAnI2U1MzkzNScsXG4gIDcwMDogJyNkMzJmMmYnLFxuICA4MDA6ICcjYzYyODI4JyxcbiAgOTAwOiAnI2I3MWMxYycsXG4gIEExMDA6ICcjZmY4YTgwJyxcbiAgQTIwMDogJyNmZjUyNTInLFxuICBBNDAwOiAnI2ZmMTc0NCcsXG4gIEE3MDA6ICcjZDUwMDAwJ1xufTtcbnZhciBfZGVmYXVsdCA9IHJlZDtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xudmFyIGdyZXkgPSB7XG4gIDUwOiAnI2ZhZmFmYScsXG4gIDEwMDogJyNmNWY1ZjUnLFxuICAyMDA6ICcjZWVlZWVlJyxcbiAgMzAwOiAnI2UwZTBlMCcsXG4gIDQwMDogJyNiZGJkYmQnLFxuICA1MDA6ICcjOWU5ZTllJyxcbiAgNjAwOiAnIzc1NzU3NScsXG4gIDcwMDogJyM2MTYxNjEnLFxuICA4MDA6ICcjNDI0MjQyJyxcbiAgOTAwOiAnIzIxMjEyMScsXG4gIEExMDA6ICcjZDVkNWQ1JyxcbiAgQTIwMDogJyNhYWFhYWEnLFxuICBBNDAwOiAnIzMwMzAzMCcsXG4gIEE3MDA6ICcjNjE2MTYxJ1xufTtcbnZhciBfZGVmYXVsdCA9IGdyZXk7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcbnZhciBwaW5rID0ge1xuICA1MDogJyNmY2U0ZWMnLFxuICAxMDA6ICcjZjhiYmQwJyxcbiAgMjAwOiAnI2Y0OGZiMScsXG4gIDMwMDogJyNmMDYyOTInLFxuICA0MDA6ICcjZWM0MDdhJyxcbiAgNTAwOiAnI2U5MWU2MycsXG4gIDYwMDogJyNkODFiNjAnLFxuICA3MDA6ICcjYzIxODViJyxcbiAgODAwOiAnI2FkMTQ1NycsXG4gIDkwMDogJyM4ODBlNGYnLFxuICBBMTAwOiAnI2ZmODBhYicsXG4gIEEyMDA6ICcjZmY0MDgxJyxcbiAgQTQwMDogJyNmNTAwNTcnLFxuICBBNzAwOiAnI2M1MTE2Midcbn07XG52YXIgX2RlZmF1bHQgPSBwaW5rO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG52YXIgaW5kaWdvID0ge1xuICA1MDogJyNlOGVhZjYnLFxuICAxMDA6ICcjYzVjYWU5JyxcbiAgMjAwOiAnIzlmYThkYScsXG4gIDMwMDogJyM3OTg2Y2InLFxuICA0MDA6ICcjNWM2YmMwJyxcbiAgNTAwOiAnIzNmNTFiNScsXG4gIDYwMDogJyMzOTQ5YWInLFxuICA3MDA6ICcjMzAzZjlmJyxcbiAgODAwOiAnIzI4MzU5MycsXG4gIDkwMDogJyMxYTIzN2UnLFxuICBBMTAwOiAnIzhjOWVmZicsXG4gIEEyMDA6ICcjNTM2ZGZlJyxcbiAgQTQwMDogJyMzZDVhZmUnLFxuICBBNzAwOiAnIzMwNGZmZSdcbn07XG52YXIgX2RlZmF1bHQgPSBpbmRpZ287XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGNyZWF0ZUdlbmVyYXRlQ2xhc3NOYW1lO1xuXG52YXIgX3dhcm5pbmcgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJ3YXJuaW5nXCIpKTtcblxuLyogZXNsaW50LWRpc2FibGUgbm8tdW5kZXJzY29yZS1kYW5nbGUgKi9cbi8vIFBlb3BsZSBtaWdodCBidW5kbGUgdGhpcyBjbGFzc25hbWUgZ2VuZXJhdG9yIHR3aWNlLlxuLy8gV2UgbmVlZCB0byB1c2UgYSBnbG9iYWwuXG5nbG9iYWwuX19NVUlfR0VORVJBVE9SX0NPVU5URVJfXyA9IDA7IC8vIFJldHVybnMgYSBmdW5jdGlvbiB3aGljaCBnZW5lcmF0ZXMgdW5pcXVlIGNsYXNzIG5hbWVzIGJhc2VkIG9uIGNvdW50ZXJzLlxuLy8gV2hlbiBuZXcgZ2VuZXJhdG9yIGZ1bmN0aW9uIGlzIGNyZWF0ZWQsIHJ1bGUgY291bnRlciBpcyByZXNldC5cbi8vIFdlIG5lZWQgdG8gcmVzZXQgdGhlIHJ1bGUgY291bnRlciBmb3IgU1NSIGZvciBlYWNoIHJlcXVlc3QuXG4vL1xuLy8gSXQncyBpbnNwaXJlZCBieVxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2Nzc2luanMvanNzL2Jsb2IvNGU2YTA1ZGQzZjdiNjU3MmZkZDNhYjIxNjg2MWQ5ZTQ0NmMyMDMzMS9zcmMvdXRpbHMvY3JlYXRlR2VuZXJhdGVDbGFzc05hbWUuanNcblxuZnVuY3Rpb24gY3JlYXRlR2VuZXJhdGVDbGFzc05hbWUoKSB7XG4gIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgdmFyIF9vcHRpb25zJGRhbmdlcm91c2x5VSA9IG9wdGlvbnMuZGFuZ2Vyb3VzbHlVc2VHbG9iYWxDU1MsXG4gICAgICBkYW5nZXJvdXNseVVzZUdsb2JhbENTUyA9IF9vcHRpb25zJGRhbmdlcm91c2x5VSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfb3B0aW9ucyRkYW5nZXJvdXNseVUsXG4gICAgICBfb3B0aW9ucyRwcm9kdWN0aW9uUHIgPSBvcHRpb25zLnByb2R1Y3Rpb25QcmVmaXgsXG4gICAgICBwcm9kdWN0aW9uUHJlZml4ID0gX29wdGlvbnMkcHJvZHVjdGlvblByID09PSB2b2lkIDAgPyAnanNzJyA6IF9vcHRpb25zJHByb2R1Y3Rpb25QcjtcbiAgdmFyIGVzY2FwZVJlZ2V4ID0gLyhbW1xcXS4jKiQ+PCt+PXxeOigpLFwiJ2BcXHNdKS9nO1xuICB2YXIgcnVsZUNvdW50ZXIgPSAwOyAvLyAtIEhNUiBjYW4gbGVhZCB0byBtYW55IGNsYXNzIG5hbWUgZ2VuZXJhdG9ycyBiZWluZyBpbnN0YW50aWF0ZWQsXG4gIC8vIHNvIHRoZSB3YXJuaW5nIGlzIG9ubHkgdHJpZ2dlcmVkIGluIHByb2R1Y3Rpb24uXG4gIC8vIC0gV2UgZXhwZWN0IGEgY2xhc3MgbmFtZSBnZW5lcmF0b3IgdG8gYmUgaW5zdGFudGlhdGVkIHBlciBuZXcgcmVxdWVzdCBvbiB0aGUgc2VydmVyLFxuICAvLyBzbyB0aGUgd2FybmluZyBpcyBvbmx5IHRyaWdnZXJlZCBjbGllbnQgc2lkZS5cblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJyAmJiB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICAgIGdsb2JhbC5fX01VSV9HRU5FUkFUT1JfQ09VTlRFUl9fICs9IDE7XG5cbiAgICBpZiAoZ2xvYmFsLl9fTVVJX0dFTkVSQVRPUl9DT1VOVEVSX18gPiAyKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgY29uc29sZS5lcnJvcihbJ01hdGVyaWFsLVVJOiB3ZSBoYXZlIGRldGVjdGVkIG1vcmUgdGhhbiBuZWVkZWQgY3JlYXRpb24gb2YgdGhlIGNsYXNzIG5hbWUgZ2VuZXJhdG9yLicsICdZb3Ugc2hvdWxkIG9ubHkgdXNlIG9uZSBjbGFzcyBuYW1lIGdlbmVyYXRvciBvbiB0aGUgY2xpZW50IHNpZGUuJywgJ0lmIHlvdSBkbyBvdGhlcndpc2UsIHlvdSB0YWtlIHRoZSByaXNrIHRvIGhhdmUgY29uZmxpY3RpbmcgY2xhc3MgbmFtZXMgaW4gcHJvZHVjdGlvbi4nXS5qb2luKCdcXG4nKSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChydWxlLCBzdHlsZVNoZWV0KSB7XG4gICAgcnVsZUNvdW50ZXIgKz0gMTtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyAoMCwgX3dhcm5pbmcuZGVmYXVsdCkocnVsZUNvdW50ZXIgPCAxZTEwLCBbJ01hdGVyaWFsLVVJOiB5b3UgbWlnaHQgaGF2ZSBhIG1lbW9yeSBsZWFrLicsICdUaGUgcnVsZUNvdW50ZXIgaXMgbm90IHN1cHBvc2VkIHRvIGdyb3cgdGhhdCBtdWNoLiddLmpvaW4oJycpKSA6IHZvaWQgMDsgLy8gQ29kZSBicmFuY2ggdGhlIHdob2xlIGJsb2NrIGF0IHRoZSBleHBlbnNlIG9mIG1vcmUgY29kZS5cblxuICAgIGlmIChkYW5nZXJvdXNseVVzZUdsb2JhbENTUykge1xuICAgICAgaWYgKHN0eWxlU2hlZXQgJiYgc3R5bGVTaGVldC5vcHRpb25zLmNsYXNzTmFtZVByZWZpeCkge1xuICAgICAgICB2YXIgcHJlZml4ID0gc3R5bGVTaGVldC5vcHRpb25zLmNsYXNzTmFtZVByZWZpeDsgLy8gU2FuaXRpemUgdGhlIHN0cmluZyBhcyB3aWxsIGJlIHVzZWQgdG8gcHJlZml4IHRoZSBnZW5lcmF0ZWQgY2xhc3MgbmFtZS5cblxuICAgICAgICBwcmVmaXggPSBwcmVmaXgucmVwbGFjZShlc2NhcGVSZWdleCwgJy0nKTtcblxuICAgICAgICBpZiAocHJlZml4Lm1hdGNoKC9eTXVpLykpIHtcbiAgICAgICAgICByZXR1cm4gXCJcIi5jb25jYXQocHJlZml4LCBcIi1cIikuY29uY2F0KHJ1bGUua2V5KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgcmV0dXJuIFwiXCIuY29uY2F0KHByZWZpeCwgXCItXCIpLmNvbmNhdChydWxlLmtleSwgXCItXCIpLmNvbmNhdChydWxlQ291bnRlcik7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIFwiXCIuY29uY2F0KHByb2R1Y3Rpb25QcmVmaXgpLmNvbmNhdChydWxlQ291bnRlcik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBcIlwiLmNvbmNhdChydWxlLmtleSwgXCItXCIpLmNvbmNhdChydWxlQ291bnRlcik7XG4gICAgfVxuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHJldHVybiBcIlwiLmNvbmNhdChwcm9kdWN0aW9uUHJlZml4KS5jb25jYXQocnVsZUNvdW50ZXIpO1xuICAgIH1cblxuICAgIGlmIChzdHlsZVNoZWV0ICYmIHN0eWxlU2hlZXQub3B0aW9ucy5jbGFzc05hbWVQcmVmaXgpIHtcbiAgICAgIHZhciBfcHJlZml4ID0gc3R5bGVTaGVldC5vcHRpb25zLmNsYXNzTmFtZVByZWZpeDsgLy8gU2FuaXRpemUgdGhlIHN0cmluZyBhcyB3aWxsIGJlIHVzZWQgdG8gcHJlZml4IHRoZSBnZW5lcmF0ZWQgY2xhc3MgbmFtZS5cblxuICAgICAgX3ByZWZpeCA9IF9wcmVmaXgucmVwbGFjZShlc2NhcGVSZWdleCwgJy0nKTtcbiAgICAgIHJldHVybiBcIlwiLmNvbmNhdChfcHJlZml4LCBcIi1cIikuY29uY2F0KHJ1bGUua2V5LCBcIi1cIikuY29uY2F0KHJ1bGVDb3VudGVyKTtcbiAgICB9XG5cbiAgICByZXR1cm4gXCJcIi5jb25jYXQocnVsZS5rZXksIFwiLVwiKS5jb25jYXQocnVsZUNvdW50ZXIpO1xuICB9O1xufSIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2ludGVyb3BSZXF1aXJlV2lsZGNhcmRcIik7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfb2JqZWN0U3ByZWFkMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9vYmplY3RTcHJlYWRcIikpO1xuXG52YXIgX2RlZmluZVByb3BlcnR5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9kZWZpbmVQcm9wZXJ0eVwiKSk7XG5cbnZhciBfY2xhc3NDYWxsQ2hlY2syID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2NsYXNzQ2FsbENoZWNrXCIpKTtcblxudmFyIF9jcmVhdGVDbGFzczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vY3JlYXRlQ2xhc3NcIikpO1xuXG52YXIgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5cIikpO1xuXG52YXIgX2luaGVyaXRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9pbmhlcml0c1wiKSk7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbnZhciBfd2FybmluZyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIndhcm5pbmdcIikpO1xuXG52YXIgX2JyY2FzdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImJyY2FzdFwiKSk7XG5cbnZhciBfdGhlbWVMaXN0ZW5lciA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCIuL3RoZW1lTGlzdGVuZXJcIikpO1xuXG52YXIgX2V4YWN0UHJvcCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3V0aWxzL2V4YWN0UHJvcFwiKSk7XG5cbi8qKlxuICogVGhpcyBjb21wb25lbnQgdGFrZXMgYSBgdGhlbWVgIHByb3BlcnR5LlxuICogSXQgbWFrZXMgdGhlIGB0aGVtZWAgYXZhaWxhYmxlIGRvd24gdGhlIFJlYWN0IHRyZWUgdGhhbmtzIHRvIFJlYWN0IGNvbnRleHQuXG4gKiBUaGlzIGNvbXBvbmVudCBzaG91bGQgcHJlZmVyYWJseSBiZSB1c2VkIGF0ICoqdGhlIHJvb3Qgb2YgeW91ciBjb21wb25lbnQgdHJlZSoqLlxuICovXG52YXIgTXVpVGhlbWVQcm92aWRlciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICAoMCwgX2luaGVyaXRzMi5kZWZhdWx0KShNdWlUaGVtZVByb3ZpZGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBNdWlUaGVtZVByb3ZpZGVyKHByb3BzLCBjb250ZXh0KSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgKDAsIF9jbGFzc0NhbGxDaGVjazIuZGVmYXVsdCkodGhpcywgTXVpVGhlbWVQcm92aWRlcik7XG4gICAgX3RoaXMgPSAoMCwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yLmRlZmF1bHQpKHRoaXMsIChNdWlUaGVtZVByb3ZpZGVyLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTXVpVGhlbWVQcm92aWRlcikpLmNhbGwodGhpcywgcHJvcHMsIGNvbnRleHQpKTsgLy8gR2V0IHRoZSBvdXRlciB0aGVtZSBmcm9tIHRoZSBjb250ZXh0LCBjYW4gYmUgbnVsbFxuXG4gICAgX3RoaXMuYnJvYWRjYXN0ID0gKDAsIF9icmNhc3QuZGVmYXVsdCkoKTtcbiAgICBfdGhpcy51bnN1YnNjcmliZUlkID0gbnVsbDtcbiAgICBfdGhpcy5vdXRlclRoZW1lID0gbnVsbDtcbiAgICBfdGhpcy5vdXRlclRoZW1lID0gX3RoZW1lTGlzdGVuZXIuZGVmYXVsdC5pbml0aWFsKGNvbnRleHQpOyAvLyBQcm9wYWdhdGUgdGhlIHRoZW1lIHNvIGl0IGNhbiBiZSBhY2Nlc3NlZCBieSB0aGUgY2hpbGRyZW5cblxuICAgIF90aGlzLmJyb2FkY2FzdC5zZXRTdGF0ZShfdGhpcy5tZXJnZU91dGVyTG9jYWxUaGVtZShfdGhpcy5wcm9wcy50aGVtZSkpO1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgKDAsIF9jcmVhdGVDbGFzczIuZGVmYXVsdCkoTXVpVGhlbWVQcm92aWRlciwgW3tcbiAgICBrZXk6IFwiZ2V0Q2hpbGRDb250ZXh0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldENoaWxkQ29udGV4dCgpIHtcbiAgICAgIHZhciBfcmVmO1xuXG4gICAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBzaGVldHNNYW5hZ2VyID0gX3Byb3BzLnNoZWV0c01hbmFnZXIsXG4gICAgICAgICAgZGlzYWJsZVN0eWxlc0dlbmVyYXRpb24gPSBfcHJvcHMuZGlzYWJsZVN0eWxlc0dlbmVyYXRpb247XG4gICAgICB2YXIgbXVpVGhlbWVQcm92aWRlck9wdGlvbnMgPSB0aGlzLmNvbnRleHQubXVpVGhlbWVQcm92aWRlck9wdGlvbnMgfHwge307XG5cbiAgICAgIGlmIChzaGVldHNNYW5hZ2VyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgbXVpVGhlbWVQcm92aWRlck9wdGlvbnMuc2hlZXRzTWFuYWdlciA9IHNoZWV0c01hbmFnZXI7XG4gICAgICB9XG5cbiAgICAgIGlmIChkaXNhYmxlU3R5bGVzR2VuZXJhdGlvbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIG11aVRoZW1lUHJvdmlkZXJPcHRpb25zLmRpc2FibGVTdHlsZXNHZW5lcmF0aW9uID0gZGlzYWJsZVN0eWxlc0dlbmVyYXRpb247XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBfcmVmID0ge30sICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKF9yZWYsIF90aGVtZUxpc3RlbmVyLkNIQU5ORUwsIHRoaXMuYnJvYWRjYXN0KSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX3JlZiwgXCJtdWlUaGVtZVByb3ZpZGVyT3B0aW9uc1wiLCBtdWlUaGVtZVByb3ZpZGVyT3B0aW9ucyksIF9yZWY7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImNvbXBvbmVudERpZE1vdW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIC8vIFN1YnNjcmliZSBvbiB0aGUgb3V0ZXIgdGhlbWUsIGlmIHByZXNlbnRcbiAgICAgIHRoaXMudW5zdWJzY3JpYmVJZCA9IF90aGVtZUxpc3RlbmVyLmRlZmF1bHQuc3Vic2NyaWJlKHRoaXMuY29udGV4dCwgZnVuY3Rpb24gKG91dGVyVGhlbWUpIHtcbiAgICAgICAgX3RoaXMyLm91dGVyVGhlbWUgPSBvdXRlclRoZW1lOyAvLyBGb3J3YXJkIHRoZSBwYXJlbnQgdGhlbWUgdXBkYXRlIHRvIHRoZSBjaGlsZHJlblxuXG4gICAgICAgIF90aGlzMi5icm9hZGNhc3Quc2V0U3RhdGUoX3RoaXMyLm1lcmdlT3V0ZXJMb2NhbFRoZW1lKF90aGlzMi5wcm9wcy50aGVtZSkpO1xuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImNvbXBvbmVudERpZFVwZGF0ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzKSB7XG4gICAgICAvLyBQcm9wYWdhdGUgYSBsb2NhbCB0aGVtZSB1cGRhdGVcbiAgICAgIGlmICh0aGlzLnByb3BzLnRoZW1lICE9PSBwcmV2UHJvcHMudGhlbWUpIHtcbiAgICAgICAgdGhpcy5icm9hZGNhc3Quc2V0U3RhdGUodGhpcy5tZXJnZU91dGVyTG9jYWxUaGVtZSh0aGlzLnByb3BzLnRoZW1lKSk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImNvbXBvbmVudFdpbGxVbm1vdW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgaWYgKHRoaXMudW5zdWJzY3JpYmVJZCAhPT0gbnVsbCkge1xuICAgICAgICBfdGhlbWVMaXN0ZW5lci5kZWZhdWx0LnVuc3Vic2NyaWJlKHRoaXMuY29udGV4dCwgdGhpcy51bnN1YnNjcmliZUlkKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwibWVyZ2VPdXRlckxvY2FsVGhlbWVcIixcbiAgICAvLyBTaW1wbGUgbWVyZ2UgYmV0d2VlbiB0aGUgb3V0ZXIgdGhlbWUgYW5kIHRoZSBsb2NhbCB0aGVtZVxuICAgIHZhbHVlOiBmdW5jdGlvbiBtZXJnZU91dGVyTG9jYWxUaGVtZShsb2NhbFRoZW1lKSB7XG4gICAgICAvLyBUbyBzdXBwb3J0IGNvbXBvc2l0aW9uIG9mIHRoZW1lLlxuICAgICAgaWYgKHR5cGVvZiBsb2NhbFRoZW1lID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/ICgwLCBfd2FybmluZy5kZWZhdWx0KSh0aGlzLm91dGVyVGhlbWUsIFsnTWF0ZXJpYWwtVUk6IHlvdSBhcmUgcHJvdmlkaW5nIGEgdGhlbWUgZnVuY3Rpb24gcHJvcGVydHkgJyArICd0byB0aGUgTXVpVGhlbWVQcm92aWRlciBjb21wb25lbnQ6JywgJzxNdWlUaGVtZVByb3ZpZGVyIHRoZW1lPXtvdXRlclRoZW1lID0+IG91dGVyVGhlbWV9IC8+JywgJycsICdIb3dldmVyLCBubyBvdXRlciB0aGVtZSBpcyBwcmVzZW50LicsICdNYWtlIHN1cmUgYSB0aGVtZSBpcyBhbHJlYWR5IGluamVjdGVkIGhpZ2hlciBpbiB0aGUgUmVhY3QgdHJlZSAnICsgJ29yIHByb3ZpZGUgYSB0aGVtZSBvYmplY3QuJ10uam9pbignXFxuJykpIDogdm9pZCAwO1xuICAgICAgICByZXR1cm4gbG9jYWxUaGVtZSh0aGlzLm91dGVyVGhlbWUpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIXRoaXMub3V0ZXJUaGVtZSkge1xuICAgICAgICByZXR1cm4gbG9jYWxUaGVtZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuICgwLCBfb2JqZWN0U3ByZWFkMi5kZWZhdWx0KSh7fSwgdGhpcy5vdXRlclRoZW1lLCBsb2NhbFRoZW1lKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIC8vIFRPRE8gbW92ZSB0aGUgc2hlZXRzTWFuYWdlciBwcm9wZXJ0eSB0byBhIGRpZmZlcmVudCBjb21wb25lbnQuXG4gICAgICAvLyB3YXJuaW5nKFxuICAgICAgLy8gICB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyB8fCB0aGlzLnByb3BzLnNoZWV0c01hbmFnZXIsXG4gICAgICAvLyAgIFtcbiAgICAgIC8vICAgICAnTWF0ZXJpYWwtVUk6IHlvdSBuZWVkIHRvIHByb3ZpZGUgYSBzaGVldHNNYW5hZ2VyIHRvIHRoZSBNdWlUaGVtZVByb3ZpZGVyICcgK1xuICAgICAgLy8gICAgICAgJ3doZW4gcmVuZGVyaW5nIG9uIHRoZSBzZXJ2ZXIuJyxcbiAgICAgIC8vICAgICAnSWYgeW91IGRvIG5vdCwgeW91IG1pZ2h0IGV4cGVyaWVuY2UgYSBtZW1vcnkgbGVhaycsXG4gICAgICAvLyAgIF0uam9pbignXFxuJyksXG4gICAgICAvLyApO1xuICAgICAgcmV0dXJuIHRoaXMucHJvcHMuY2hpbGRyZW47XG4gICAgfVxuICB9XSk7XG4gIHJldHVybiBNdWlUaGVtZVByb3ZpZGVyO1xufShfcmVhY3QuZGVmYXVsdC5Db21wb25lbnQpO1xuXG5NdWlUaGVtZVByb3ZpZGVyLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqXG4gICAqIFlvdSBjYW4gd3JhcCBhIG5vZGUuXG4gICAqL1xuICBjaGlsZHJlbjogX3Byb3BUeXBlcy5kZWZhdWx0Lm5vZGUuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogWW91IGNhbiBkaXNhYmxlIHRoZSBnZW5lcmF0aW9uIG9mIHRoZSBzdHlsZXMgd2l0aCB0aGlzIG9wdGlvbi5cbiAgICogSXQgY2FuIGJlIHVzZWZ1bCB3aGVuIHRyYXZlcnNpbmcgdGhlIFJlYWN0IHRyZWUgb3V0c2lkZSBvZiB0aGUgSFRNTFxuICAgKiByZW5kZXJpbmcgc3RlcCBvbiB0aGUgc2VydmVyLlxuICAgKiBMZXQncyBzYXkgeW91IGFyZSB1c2luZyByZWFjdC1hcG9sbG8gdG8gZXh0cmFjdCBhbGxcbiAgICogdGhlIHF1ZXJpZXMgbWFkZSBieSB0aGUgaW50ZXJmYWNlIHNlcnZlciBzaWRlLlxuICAgKiBZb3UgY2FuIHNpZ25pZmljYW50bHkgc3BlZWQgdXAgdGhlIHRyYXZlcnNhbCB3aXRoIHRoaXMgcHJvcGVydHkuXG4gICAqL1xuICBkaXNhYmxlU3R5bGVzR2VuZXJhdGlvbjogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSBzaGVldHNNYW5hZ2VyIGlzIHVzZWQgdG8gZGVkdXBsaWNhdGUgc3R5bGUgc2hlZXQgaW5qZWN0aW9uIGluIHRoZSBwYWdlLlxuICAgKiBJdCdzIGRlZHVwbGljYXRpbmcgdXNpbmcgdGhlICh0aGVtZSwgc3R5bGVzKSBjb3VwbGUuXG4gICAqIE9uIHRoZSBzZXJ2ZXIsIHlvdSBzaG91bGQgcHJvdmlkZSBhIG5ldyBpbnN0YW5jZSBmb3IgZWFjaCByZXF1ZXN0LlxuICAgKi9cbiAgc2hlZXRzTWFuYWdlcjogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdCxcblxuICAvKipcbiAgICogQSB0aGVtZSBvYmplY3QuXG4gICAqL1xuICB0aGVtZTogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdCwgX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmNdKS5pc1JlcXVpcmVkXG59IDoge307XG5NdWlUaGVtZVByb3ZpZGVyLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/ICgwLCBfZXhhY3RQcm9wLmRlZmF1bHQpKE11aVRoZW1lUHJvdmlkZXIucHJvcFR5cGVzLCAnTXVpVGhlbWVQcm92aWRlcicpIDoge307XG5NdWlUaGVtZVByb3ZpZGVyLmNoaWxkQ29udGV4dFR5cGVzID0gKDAsIF9vYmplY3RTcHJlYWQyLmRlZmF1bHQpKHt9LCBfdGhlbWVMaXN0ZW5lci5kZWZhdWx0LmNvbnRleHRUeXBlcywge1xuICBtdWlUaGVtZVByb3ZpZGVyT3B0aW9uczogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdFxufSk7XG5NdWlUaGVtZVByb3ZpZGVyLmNvbnRleHRUeXBlcyA9ICgwLCBfb2JqZWN0U3ByZWFkMi5kZWZhdWx0KSh7fSwgX3RoZW1lTGlzdGVuZXIuZGVmYXVsdC5jb250ZXh0VHlwZXMsIHtcbiAgbXVpVGhlbWVQcm92aWRlck9wdGlvbnM6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3Rcbn0pO1xudmFyIF9kZWZhdWx0ID0gTXVpVGhlbWVQcm92aWRlcjtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gIGlmICh0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkge1xuICAgIGRlZmluZShbJ2V4cG9ydHMnXSwgZmFjdG9yeSk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGV4cG9ydHMgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBmYWN0b3J5KGV4cG9ydHMpO1xuICB9IGVsc2Uge1xuICAgIHZhciBtb2QgPSB7XG4gICAgICBleHBvcnRzOiB7fVxuICAgIH07XG4gICAgZmFjdG9yeShtb2QuZXhwb3J0cyk7XG4gICAgZ2xvYmFsLmFyZVBhdGhzRXF1YWwgPSBtb2QuZXhwb3J0cztcbiAgfVxufSkodGhpcywgZnVuY3Rpb24gKGV4cG9ydHMpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG4gIH0pO1xuXG4gIHZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBvYmo7XG4gIH0gOiBmdW5jdGlvbiAob2JqKSB7XG4gICAgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7XG4gIH07XG5cbiAgLyoqXG4gICAqIENvbXBhcmVzIHR3byBwYXRoIGFycmF5cyBvZiBMYXRMbmcgb2JqZWN0cy5cbiAgICovXG5cbiAgdmFyIGFyZVBhdGhzRXF1YWwgPSBleHBvcnRzLmFyZVBhdGhzRXF1YWwgPSBmdW5jdGlvbiBhcmVQYXRoc0VxdWFsKHBhdGhBLCBwYXRoQikge1xuICAgIGlmIChwYXRoQSA9PT0gcGF0aEIpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAoIUFycmF5LmlzQXJyYXkocGF0aEEpIHx8ICFBcnJheS5pc0FycmF5KHBhdGhCKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAocGF0aEEubGVuZ3RoICE9PSBwYXRoQi5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXRoQS5sZW5ndGg7ICsraSkge1xuICAgICAgaWYgKHBhdGhBW2ldID09PSBwYXRoQltpXSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmICghaXNWYWxpZExhdExuZyhwYXRoQVtpXSkgfHwgIWlzVmFsaWRMYXRMbmcocGF0aEJbaV0pKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmIChwYXRoQltpXS5sYXQgIT09IHBhdGhBW2ldLmxhdCB8fCBwYXRoQltpXS5sbmcgIT09IHBhdGhBW2ldLmxuZykge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9O1xuXG4gIC8qKlxuICAgKiBIZWxwZXIgdGhhdCBjaGVja3Mgd2hldGhlciBhbiBhcnJheSBjb25zaXN0cyBvZiBvYmplY3RzXG4gICAqIHdpdGggbGF0IGFuZCBsbmcgcHJvcGVydGllc1xuICAgKiBAcGFyYW0ge29iamVjdH0gZWxlbSB0aGUgZWxlbWVudCB0byBjaGVja1xuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gd2hldGhlciBvciBub3QgaXQncyB2YWxpZFxuICAgKi9cbiAgdmFyIGlzVmFsaWRMYXRMbmcgPSBmdW5jdGlvbiBpc1ZhbGlkTGF0TG5nKGVsZW0pIHtcbiAgICByZXR1cm4gZWxlbSAhPT0gbnVsbCAmJiAodHlwZW9mIGVsZW0gPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKGVsZW0pKSA9PT0gJ29iamVjdCcgJiYgZWxlbS5oYXNPd25Qcm9wZXJ0eSgnbGF0JykgJiYgZWxlbS5oYXNPd25Qcm9wZXJ0eSgnbG5nJyk7XG4gIH07XG59KTsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEB0eXBlY2hlY2tzXG4gKiBcbiAqL1xuXG4vKmVzbGludC1kaXNhYmxlIG5vLXNlbGYtY29tcGFyZSAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogaW5saW5lZCBPYmplY3QuaXMgcG9seWZpbGwgdG8gYXZvaWQgcmVxdWlyaW5nIGNvbnN1bWVycyBzaGlwIHRoZWlyIG93blxuICogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvT2JqZWN0L2lzXG4gKi9cbmZ1bmN0aW9uIGlzKHgsIHkpIHtcbiAgLy8gU2FtZVZhbHVlIGFsZ29yaXRobVxuICBpZiAoeCA9PT0geSkge1xuICAgIC8vIFN0ZXBzIDEtNSwgNy0xMFxuICAgIC8vIFN0ZXBzIDYuYi02LmU6ICswICE9IC0wXG4gICAgLy8gQWRkZWQgdGhlIG5vbnplcm8geSBjaGVjayB0byBtYWtlIEZsb3cgaGFwcHksIGJ1dCBpdCBpcyByZWR1bmRhbnRcbiAgICByZXR1cm4geCAhPT0gMCB8fCB5ICE9PSAwIHx8IDEgLyB4ID09PSAxIC8geTtcbiAgfSBlbHNlIHtcbiAgICAvLyBTdGVwIDYuYTogTmFOID09IE5hTlxuICAgIHJldHVybiB4ICE9PSB4ICYmIHkgIT09IHk7XG4gIH1cbn1cblxuLyoqXG4gKiBQZXJmb3JtcyBlcXVhbGl0eSBieSBpdGVyYXRpbmcgdGhyb3VnaCBrZXlzIG9uIGFuIG9iamVjdCBhbmQgcmV0dXJuaW5nIGZhbHNlXG4gKiB3aGVuIGFueSBrZXkgaGFzIHZhbHVlcyB3aGljaCBhcmUgbm90IHN0cmljdGx5IGVxdWFsIGJldHdlZW4gdGhlIGFyZ3VtZW50cy5cbiAqIFJldHVybnMgdHJ1ZSB3aGVuIHRoZSB2YWx1ZXMgb2YgYWxsIGtleXMgYXJlIHN0cmljdGx5IGVxdWFsLlxuICovXG5mdW5jdGlvbiBzaGFsbG93RXF1YWwob2JqQSwgb2JqQikge1xuICBpZiAoaXMob2JqQSwgb2JqQikpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGlmICh0eXBlb2Ygb2JqQSAhPT0gJ29iamVjdCcgfHwgb2JqQSA9PT0gbnVsbCB8fCB0eXBlb2Ygb2JqQiAhPT0gJ29iamVjdCcgfHwgb2JqQiA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBrZXlzQSA9IE9iamVjdC5rZXlzKG9iakEpO1xuICB2YXIga2V5c0IgPSBPYmplY3Qua2V5cyhvYmpCKTtcblxuICBpZiAoa2V5c0EubGVuZ3RoICE9PSBrZXlzQi5sZW5ndGgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvLyBUZXN0IGZvciBBJ3Mga2V5cyBkaWZmZXJlbnQgZnJvbSBCLlxuICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXNBLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKCFoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iakIsIGtleXNBW2ldKSB8fCAhaXMob2JqQVtrZXlzQVtpXV0sIG9iakJba2V5c0FbaV1dKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNoYWxsb3dFcXVhbDsiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzeW1ib2xPYnNlcnZhYmxlUG9ueWZpbGwocm9vdCkge1xuXHR2YXIgcmVzdWx0O1xuXHR2YXIgU3ltYm9sID0gcm9vdC5TeW1ib2w7XG5cblx0aWYgKHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicpIHtcblx0XHRpZiAoU3ltYm9sLm9ic2VydmFibGUpIHtcblx0XHRcdHJlc3VsdCA9IFN5bWJvbC5vYnNlcnZhYmxlO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXN1bHQgPSBTeW1ib2woJ29ic2VydmFibGUnKTtcblx0XHRcdFN5bWJvbC5vYnNlcnZhYmxlID0gcmVzdWx0O1xuXHRcdH1cblx0fSBlbHNlIHtcblx0XHRyZXN1bHQgPSAnQEBvYnNlcnZhYmxlJztcblx0fVxuXG5cdHJldHVybiByZXN1bHQ7XG59O1xuIiwidmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9iaiwga2V5cykgeyB2YXIgdGFyZ2V0ID0ge307IGZvciAodmFyIGkgaW4gb2JqKSB7IGlmIChrZXlzLmluZGV4T2YoaSkgPj0gMCkgY29udGludWU7IGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgaSkpIGNvbnRpbnVlOyB0YXJnZXRbaV0gPSBvYmpbaV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbmltcG9ydCB7IENvbXBvbmVudCwgY3JlYXRlRWxlbWVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5cbnZhciBNYW5hZ2VyID0gZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgX2luaGVyaXRzKE1hbmFnZXIsIF9Db21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIE1hbmFnZXIoKSB7XG4gICAgdmFyIF9yZWY7XG5cbiAgICB2YXIgX3RlbXAsIF90aGlzLCBfcmV0O1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE1hbmFnZXIpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuIF9yZXQgPSAoX3RlbXAgPSAoX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoX3JlZiA9IE1hbmFnZXIuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihNYW5hZ2VyKSkuY2FsbC5hcHBseShfcmVmLCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMuX3NldFRhcmdldE5vZGUgPSBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgX3RoaXMuX3RhcmdldE5vZGUgPSBub2RlO1xuICAgIH0sIF90aGlzLl9nZXRUYXJnZXROb2RlID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIF90aGlzLl90YXJnZXROb2RlO1xuICAgIH0sIF90ZW1wKSwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsIF9yZXQpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKE1hbmFnZXIsIFt7XG4gICAga2V5OiAnZ2V0Q2hpbGRDb250ZXh0JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0Q2hpbGRDb250ZXh0KCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcG9wcGVyTWFuYWdlcjoge1xuICAgICAgICAgIHNldFRhcmdldE5vZGU6IHRoaXMuX3NldFRhcmdldE5vZGUsXG4gICAgICAgICAgZ2V0VGFyZ2V0Tm9kZTogdGhpcy5fZ2V0VGFyZ2V0Tm9kZVxuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3JlbmRlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIHRhZyA9IF9wcm9wcy50YWcsXG4gICAgICAgICAgY2hpbGRyZW4gPSBfcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgICAgcmVzdFByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9wcm9wcywgWyd0YWcnLCAnY2hpbGRyZW4nXSk7XG5cbiAgICAgIGlmICh0YWcgIT09IGZhbHNlKSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVFbGVtZW50KHRhZywgcmVzdFByb3BzLCBjaGlsZHJlbik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gY2hpbGRyZW47XG4gICAgICB9XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIE1hbmFnZXI7XG59KENvbXBvbmVudCk7XG5cbk1hbmFnZXIuY2hpbGRDb250ZXh0VHlwZXMgPSB7XG4gIHBvcHBlck1hbmFnZXI6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZFxufTtcbk1hbmFnZXIucHJvcFR5cGVzID0ge1xuICB0YWc6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5ib29sXSksXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubm9kZSwgUHJvcFR5cGVzLmZ1bmNdKVxufTtcbk1hbmFnZXIuZGVmYXVsdFByb3BzID0ge1xuICB0YWc6ICdkaXYnXG59O1xuXG5cbmV4cG9ydCBkZWZhdWx0IE1hbmFnZXI7IiwidmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9iaiwga2V5cykgeyB2YXIgdGFyZ2V0ID0ge307IGZvciAodmFyIGkgaW4gb2JqKSB7IGlmIChrZXlzLmluZGV4T2YoaSkgPj0gMCkgY29udGludWU7IGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgaSkpIGNvbnRpbnVlOyB0YXJnZXRbaV0gPSBvYmpbaV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5pbXBvcnQgeyBjcmVhdGVFbGVtZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcblxudmFyIFRhcmdldCA9IGZ1bmN0aW9uIFRhcmdldChwcm9wcywgY29udGV4dCkge1xuICB2YXIgX3Byb3BzJGNvbXBvbmVudCA9IHByb3BzLmNvbXBvbmVudCxcbiAgICAgIGNvbXBvbmVudCA9IF9wcm9wcyRjb21wb25lbnQgPT09IHVuZGVmaW5lZCA/ICdkaXYnIDogX3Byb3BzJGNvbXBvbmVudCxcbiAgICAgIGlubmVyUmVmID0gcHJvcHMuaW5uZXJSZWYsXG4gICAgICBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgcmVzdFByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbJ2NvbXBvbmVudCcsICdpbm5lclJlZicsICdjaGlsZHJlbiddKTtcblxuICB2YXIgcG9wcGVyTWFuYWdlciA9IGNvbnRleHQucG9wcGVyTWFuYWdlcjtcblxuICB2YXIgdGFyZ2V0UmVmID0gZnVuY3Rpb24gdGFyZ2V0UmVmKG5vZGUpIHtcbiAgICBwb3BwZXJNYW5hZ2VyLnNldFRhcmdldE5vZGUobm9kZSk7XG4gICAgaWYgKHR5cGVvZiBpbm5lclJlZiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgaW5uZXJSZWYobm9kZSk7XG4gICAgfVxuICB9O1xuXG4gIGlmICh0eXBlb2YgY2hpbGRyZW4gPT09ICdmdW5jdGlvbicpIHtcbiAgICB2YXIgdGFyZ2V0UHJvcHMgPSB7IHJlZjogdGFyZ2V0UmVmIH07XG4gICAgcmV0dXJuIGNoaWxkcmVuKHsgdGFyZ2V0UHJvcHM6IHRhcmdldFByb3BzLCByZXN0UHJvcHM6IHJlc3RQcm9wcyB9KTtcbiAgfVxuXG4gIHZhciBjb21wb25lbnRQcm9wcyA9IF9leHRlbmRzKHt9LCByZXN0UHJvcHMpO1xuXG4gIGlmICh0eXBlb2YgY29tcG9uZW50ID09PSAnc3RyaW5nJykge1xuICAgIGNvbXBvbmVudFByb3BzLnJlZiA9IHRhcmdldFJlZjtcbiAgfSBlbHNlIHtcbiAgICBjb21wb25lbnRQcm9wcy5pbm5lclJlZiA9IHRhcmdldFJlZjtcbiAgfVxuXG4gIHJldHVybiBjcmVhdGVFbGVtZW50KGNvbXBvbmVudCwgY29tcG9uZW50UHJvcHMsIGNoaWxkcmVuKTtcbn07XG5cblRhcmdldC5jb250ZXh0VHlwZXMgPSB7XG4gIHBvcHBlck1hbmFnZXI6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZFxufTtcblxuVGFyZ2V0LnByb3BUeXBlcyA9IHtcbiAgY29tcG9uZW50OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubm9kZSwgUHJvcFR5cGVzLmZ1bmNdKSxcbiAgaW5uZXJSZWY6IFByb3BUeXBlcy5mdW5jLFxuICBjaGlsZHJlbjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm5vZGUsIFByb3BUeXBlcy5mdW5jXSlcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFRhcmdldDsiLCJ2YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob2JqLCBrZXlzKSB7IHZhciB0YXJnZXQgPSB7fTsgZm9yICh2YXIgaSBpbiBvYmopIHsgaWYgKGtleXMuaW5kZXhPZihpKSA+PSAwKSBjb250aW51ZTsgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBpKSkgY29udGludWU7IHRhcmdldFtpXSA9IG9ialtpXTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuaW1wb3J0IHsgQ29tcG9uZW50LCBjcmVhdGVFbGVtZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBQb3BwZXJKUyBmcm9tICdwb3BwZXIuanMnO1xuXG5leHBvcnQgdmFyIHBsYWNlbWVudHMgPSBQb3BwZXJKUy5wbGFjZW1lbnRzO1xuXG52YXIgUG9wcGVyID0gZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFBvcHBlciwgX0NvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gUG9wcGVyKCkge1xuICAgIHZhciBfcmVmO1xuXG4gICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBQb3BwZXIpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuIF9yZXQgPSAoX3RlbXAgPSAoX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoX3JlZiA9IFBvcHBlci5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKFBvcHBlcikpLmNhbGwuYXBwbHkoX3JlZiwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLnN0YXRlID0ge30sIF90aGlzLl9zZXRBcnJvd05vZGUgPSBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgX3RoaXMuX2Fycm93Tm9kZSA9IG5vZGU7XG4gICAgfSwgX3RoaXMuX2dldFRhcmdldE5vZGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoX3RoaXMucHJvcHMudGFyZ2V0KSB7XG4gICAgICAgIHJldHVybiBfdGhpcy5wcm9wcy50YXJnZXQ7XG4gICAgICB9IGVsc2UgaWYgKCFfdGhpcy5jb250ZXh0LnBvcHBlck1hbmFnZXIgfHwgIV90aGlzLmNvbnRleHQucG9wcGVyTWFuYWdlci5nZXRUYXJnZXROb2RlKCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUYXJnZXQgbWlzc2luZy4gUG9wcGVyIG11c3QgYmUgZ2l2ZW4gYSB0YXJnZXQgZnJvbSB0aGUgUG9wcGVyIE1hbmFnZXIsIG9yIGFzIGEgcHJvcC4nKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBfdGhpcy5jb250ZXh0LnBvcHBlck1hbmFnZXIuZ2V0VGFyZ2V0Tm9kZSgpO1xuICAgIH0sIF90aGlzLl9nZXRPZmZzZXRzID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgIHJldHVybiBPYmplY3Qua2V5cyhkYXRhLm9mZnNldHMpLm1hcChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIHJldHVybiBkYXRhLm9mZnNldHNba2V5XTtcbiAgICAgIH0pO1xuICAgIH0sIF90aGlzLl9pc0RhdGFEaXJ0eSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICBpZiAoX3RoaXMuc3RhdGUuZGF0YSkge1xuICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoX3RoaXMuX2dldE9mZnNldHMoX3RoaXMuc3RhdGUuZGF0YSkpICE9PSBKU09OLnN0cmluZ2lmeShfdGhpcy5fZ2V0T2Zmc2V0cyhkYXRhKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9LCBfdGhpcy5fdXBkYXRlU3RhdGVNb2RpZmllciA9IHtcbiAgICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgICBvcmRlcjogOTAwLFxuICAgICAgZm46IGZ1bmN0aW9uIGZuKGRhdGEpIHtcbiAgICAgICAgaWYgKF90aGlzLl9pc0RhdGFEaXJ0eShkYXRhKSkge1xuICAgICAgICAgIF90aGlzLnNldFN0YXRlKHsgZGF0YTogZGF0YSB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgIH1cbiAgICB9LCBfdGhpcy5fZ2V0UG9wcGVyU3R5bGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgZGF0YSA9IF90aGlzLnN0YXRlLmRhdGE7XG5cblxuICAgICAgaWYgKCFfdGhpcy5fcG9wcGVyIHx8ICFkYXRhKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICAgICAgcG9pbnRlckV2ZW50czogJ25vbmUnLFxuICAgICAgICAgIG9wYWNpdHk6IDBcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIF9leHRlbmRzKHtcbiAgICAgICAgcG9zaXRpb246IGRhdGEub2Zmc2V0cy5wb3BwZXIucG9zaXRpb25cbiAgICAgIH0sIGRhdGEuc3R5bGVzKTtcbiAgICB9LCBfdGhpcy5fZ2V0UG9wcGVyUGxhY2VtZW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIF90aGlzLnN0YXRlLmRhdGEgPyBfdGhpcy5zdGF0ZS5kYXRhLnBsYWNlbWVudCA6IHVuZGVmaW5lZDtcbiAgICB9LCBfdGhpcy5fZ2V0UG9wcGVySGlkZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiAhIV90aGlzLnN0YXRlLmRhdGEgJiYgX3RoaXMuc3RhdGUuZGF0YS5oaWRlID8gJycgOiB1bmRlZmluZWQ7XG4gICAgfSwgX3RoaXMuX2dldEFycm93U3R5bGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoIV90aGlzLnN0YXRlLmRhdGEgfHwgIV90aGlzLnN0YXRlLmRhdGEub2Zmc2V0cy5hcnJvdykge1xuICAgICAgICByZXR1cm4ge307XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgX3RoaXMkc3RhdGUkZGF0YSRvZmZzID0gX3RoaXMuc3RhdGUuZGF0YS5vZmZzZXRzLmFycm93LFxuICAgICAgICAgICAgdG9wID0gX3RoaXMkc3RhdGUkZGF0YSRvZmZzLnRvcCxcbiAgICAgICAgICAgIGxlZnQgPSBfdGhpcyRzdGF0ZSRkYXRhJG9mZnMubGVmdDtcblxuICAgICAgICByZXR1cm4geyB0b3A6IHRvcCwgbGVmdDogbGVmdCB9O1xuICAgICAgfVxuICAgIH0sIF90aGlzLl9oYW5kbGVQb3BwZXJSZWYgPSBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgX3RoaXMuX3BvcHBlck5vZGUgPSBub2RlO1xuICAgICAgaWYgKG5vZGUpIHtcbiAgICAgICAgX3RoaXMuX2NyZWF0ZVBvcHBlcigpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX3RoaXMuX2Rlc3Ryb3lQb3BwZXIoKTtcbiAgICAgIH1cbiAgICAgIGlmIChfdGhpcy5wcm9wcy5pbm5lclJlZikge1xuICAgICAgICBfdGhpcy5wcm9wcy5pbm5lclJlZihub2RlKTtcbiAgICAgIH1cbiAgICB9LCBfdGhpcy5fc2NoZWR1bGVVcGRhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpcy5fcG9wcGVyICYmIF90aGlzLl9wb3BwZXIuc2NoZWR1bGVVcGRhdGUoKTtcbiAgICB9LCBfdGVtcCksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhQb3BwZXIsIFt7XG4gICAga2V5OiAnZ2V0Q2hpbGRDb250ZXh0JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0Q2hpbGRDb250ZXh0KCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcG9wcGVyOiB7XG4gICAgICAgICAgc2V0QXJyb3dOb2RlOiB0aGlzLl9zZXRBcnJvd05vZGUsXG4gICAgICAgICAgZ2V0QXJyb3dTdHlsZTogdGhpcy5fZ2V0QXJyb3dTdHlsZVxuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2NvbXBvbmVudERpZFVwZGF0ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZShsYXN0UHJvcHMpIHtcbiAgICAgIGlmIChsYXN0UHJvcHMucGxhY2VtZW50ICE9PSB0aGlzLnByb3BzLnBsYWNlbWVudCB8fCBsYXN0UHJvcHMuZXZlbnRzRW5hYmxlZCAhPT0gdGhpcy5wcm9wcy5ldmVudHNFbmFibGVkIHx8IGxhc3RQcm9wcy50YXJnZXQgIT09IHRoaXMucHJvcHMudGFyZ2V0KSB7XG4gICAgICAgIHRoaXMuX2Rlc3Ryb3lQb3BwZXIoKTtcbiAgICAgICAgdGhpcy5fY3JlYXRlUG9wcGVyKCk7XG4gICAgICB9XG4gICAgICBpZiAobGFzdFByb3BzLmNoaWxkcmVuICE9PSB0aGlzLnByb3BzLmNoaWxkcmVuKSB7XG4gICAgICAgIHRoaXMuX3NjaGVkdWxlVXBkYXRlKCk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnY29tcG9uZW50V2lsbFVubW91bnQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgIHRoaXMuX2Rlc3Ryb3lQb3BwZXIoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdfY3JlYXRlUG9wcGVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2NyZWF0ZVBvcHBlcigpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBwbGFjZW1lbnQgPSBfcHJvcHMucGxhY2VtZW50LFxuICAgICAgICAgIGV2ZW50c0VuYWJsZWQgPSBfcHJvcHMuZXZlbnRzRW5hYmxlZCxcbiAgICAgICAgICBwb3NpdGlvbkZpeGVkID0gX3Byb3BzLnBvc2l0aW9uRml4ZWQ7XG5cbiAgICAgIHZhciBtb2RpZmllcnMgPSBfZXh0ZW5kcyh7fSwgdGhpcy5wcm9wcy5tb2RpZmllcnMsIHtcbiAgICAgICAgYXBwbHlTdHlsZTogeyBlbmFibGVkOiBmYWxzZSB9LFxuICAgICAgICB1cGRhdGVTdGF0ZTogdGhpcy5fdXBkYXRlU3RhdGVNb2RpZmllclxuICAgICAgfSk7XG4gICAgICBpZiAodGhpcy5fYXJyb3dOb2RlKSB7XG4gICAgICAgIG1vZGlmaWVycy5hcnJvdyA9IF9leHRlbmRzKHt9LCB0aGlzLnByb3BzLm1vZGlmaWVycy5hcnJvdyB8fCB7fSwge1xuICAgICAgICAgIGVsZW1lbnQ6IHRoaXMuX2Fycm93Tm9kZVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHRoaXMuX3BvcHBlciA9IG5ldyBQb3BwZXJKUyh0aGlzLl9nZXRUYXJnZXROb2RlKCksIHRoaXMuX3BvcHBlck5vZGUsIHtcbiAgICAgICAgcGxhY2VtZW50OiBwbGFjZW1lbnQsXG4gICAgICAgIHBvc2l0aW9uRml4ZWQ6IHBvc2l0aW9uRml4ZWQsXG4gICAgICAgIGV2ZW50c0VuYWJsZWQ6IGV2ZW50c0VuYWJsZWQsXG4gICAgICAgIG1vZGlmaWVyczogbW9kaWZpZXJzXG4gICAgICB9KTtcblxuICAgICAgLy8gVE9ETzogbG9vayBpbnRvIHNldFRpbWVvdXQgc2NoZWR1bGVVcGRhdGUgY2FsbCwgd2l0aG91dCBpdCwgdGhlIHBvcHBlciB3aWxsIG5vdCBwb3NpdGlvbiBwcm9wZXJseSBvbiBjcmVhdGlvblxuICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBfdGhpczIuX3NjaGVkdWxlVXBkYXRlKCk7XG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdfZGVzdHJveVBvcHBlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9kZXN0cm95UG9wcGVyKCkge1xuICAgICAgaWYgKHRoaXMuX3BvcHBlcikge1xuICAgICAgICB0aGlzLl9wb3BwZXIuZGVzdHJveSgpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3JlbmRlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfcHJvcHMyID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBjb21wb25lbnQgPSBfcHJvcHMyLmNvbXBvbmVudCxcbiAgICAgICAgICBpbm5lclJlZiA9IF9wcm9wczIuaW5uZXJSZWYsXG4gICAgICAgICAgcGxhY2VtZW50ID0gX3Byb3BzMi5wbGFjZW1lbnQsXG4gICAgICAgICAgZXZlbnRzRW5hYmxlZCA9IF9wcm9wczIuZXZlbnRzRW5hYmxlZCxcbiAgICAgICAgICBwb3NpdGlvbkZpeGVkID0gX3Byb3BzMi5wb3NpdGlvbkZpeGVkLFxuICAgICAgICAgIG1vZGlmaWVycyA9IF9wcm9wczIubW9kaWZpZXJzLFxuICAgICAgICAgIGNoaWxkcmVuID0gX3Byb3BzMi5jaGlsZHJlbixcbiAgICAgICAgICByZXN0UHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3Byb3BzMiwgWydjb21wb25lbnQnLCAnaW5uZXJSZWYnLCAncGxhY2VtZW50JywgJ2V2ZW50c0VuYWJsZWQnLCAncG9zaXRpb25GaXhlZCcsICdtb2RpZmllcnMnLCAnY2hpbGRyZW4nXSk7XG5cbiAgICAgIHZhciBwb3BwZXJTdHlsZSA9IHRoaXMuX2dldFBvcHBlclN0eWxlKCk7XG4gICAgICB2YXIgcG9wcGVyUGxhY2VtZW50ID0gdGhpcy5fZ2V0UG9wcGVyUGxhY2VtZW50KCk7XG4gICAgICB2YXIgcG9wcGVySGlkZSA9IHRoaXMuX2dldFBvcHBlckhpZGUoKTtcblxuICAgICAgaWYgKHR5cGVvZiBjaGlsZHJlbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB2YXIgcG9wcGVyUHJvcHMgPSB7XG4gICAgICAgICAgcmVmOiB0aGlzLl9oYW5kbGVQb3BwZXJSZWYsXG4gICAgICAgICAgc3R5bGU6IHBvcHBlclN0eWxlLFxuICAgICAgICAgICdkYXRhLXBsYWNlbWVudCc6IHBvcHBlclBsYWNlbWVudCxcbiAgICAgICAgICAnZGF0YS14LW91dC1vZi1ib3VuZGFyaWVzJzogcG9wcGVySGlkZVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gY2hpbGRyZW4oe1xuICAgICAgICAgIHBvcHBlclByb3BzOiBwb3BwZXJQcm9wcyxcbiAgICAgICAgICByZXN0UHJvcHM6IHJlc3RQcm9wcyxcbiAgICAgICAgICBzY2hlZHVsZVVwZGF0ZTogdGhpcy5fc2NoZWR1bGVVcGRhdGVcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHZhciBjb21wb25lbnRQcm9wcyA9IF9leHRlbmRzKHt9LCByZXN0UHJvcHMsIHtcbiAgICAgICAgc3R5bGU6IF9leHRlbmRzKHt9LCByZXN0UHJvcHMuc3R5bGUsIHBvcHBlclN0eWxlKSxcbiAgICAgICAgJ2RhdGEtcGxhY2VtZW50JzogcG9wcGVyUGxhY2VtZW50LFxuICAgICAgICAnZGF0YS14LW91dC1vZi1ib3VuZGFyaWVzJzogcG9wcGVySGlkZVxuICAgICAgfSk7XG5cbiAgICAgIGlmICh0eXBlb2YgY29tcG9uZW50ID09PSAnc3RyaW5nJykge1xuICAgICAgICBjb21wb25lbnRQcm9wcy5yZWYgPSB0aGlzLl9oYW5kbGVQb3BwZXJSZWY7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb21wb25lbnRQcm9wcy5pbm5lclJlZiA9IHRoaXMuX2hhbmRsZVBvcHBlclJlZjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNyZWF0ZUVsZW1lbnQoY29tcG9uZW50LCBjb21wb25lbnRQcm9wcywgY2hpbGRyZW4pO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBQb3BwZXI7XG59KENvbXBvbmVudCk7XG5cblBvcHBlci5jb250ZXh0VHlwZXMgPSB7XG4gIHBvcHBlck1hbmFnZXI6IFByb3BUeXBlcy5vYmplY3Rcbn07XG5Qb3BwZXIuY2hpbGRDb250ZXh0VHlwZXMgPSB7XG4gIHBvcHBlcjogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkXG59O1xuUG9wcGVyLnByb3BUeXBlcyA9IHtcbiAgY29tcG9uZW50OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubm9kZSwgUHJvcFR5cGVzLmZ1bmNdKSxcbiAgaW5uZXJSZWY6IFByb3BUeXBlcy5mdW5jLFxuICBwbGFjZW1lbnQ6IFByb3BUeXBlcy5vbmVPZihwbGFjZW1lbnRzKSxcbiAgZXZlbnRzRW5hYmxlZDogUHJvcFR5cGVzLmJvb2wsXG4gIHBvc2l0aW9uRml4ZWQ6IFByb3BUeXBlcy5ib29sLFxuICBtb2RpZmllcnM6IFByb3BUeXBlcy5vYmplY3QsXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubm9kZSwgUHJvcFR5cGVzLmZ1bmNdKSxcbiAgdGFyZ2V0OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtcbiAgLy8gdGhlIGZvbGxvd2luZyBjaGVjayBpcyBuZWVkZWQgZm9yIFNTUlxuICBQcm9wVHlwZXMuaW5zdGFuY2VPZih0eXBlb2YgRWxlbWVudCAhPT0gJ3VuZGVmaW5lZCcgPyBFbGVtZW50IDogT2JqZWN0KSwgUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBnZXRCb3VuZGluZ0NsaWVudFJlY3Q6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgY2xpZW50V2lkdGg6IFByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZCxcbiAgICBjbGllbnRIZWlnaHQ6IFByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZFxuICB9KV0pXG59O1xuUG9wcGVyLmRlZmF1bHRQcm9wcyA9IHtcbiAgY29tcG9uZW50OiAnZGl2JyxcbiAgcGxhY2VtZW50OiAnYm90dG9tJyxcbiAgZXZlbnRzRW5hYmxlZDogdHJ1ZSxcbiAgcG9zaXRpb25GaXhlZDogZmFsc2UsXG4gIG1vZGlmaWVyczoge31cbn07XG5cblxuZXhwb3J0IGRlZmF1bHQgUG9wcGVyOyIsInZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhvYmosIGtleXMpIHsgdmFyIHRhcmdldCA9IHt9OyBmb3IgKHZhciBpIGluIG9iaikgeyBpZiAoa2V5cy5pbmRleE9mKGkpID49IDApIGNvbnRpbnVlOyBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGkpKSBjb250aW51ZTsgdGFyZ2V0W2ldID0gb2JqW2ldOyB9IHJldHVybiB0YXJnZXQ7IH1cblxuaW1wb3J0IHsgY3JlYXRlRWxlbWVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5cbnZhciBBcnJvdyA9IGZ1bmN0aW9uIEFycm93KHByb3BzLCBjb250ZXh0KSB7XG4gIHZhciBfcHJvcHMkY29tcG9uZW50ID0gcHJvcHMuY29tcG9uZW50LFxuICAgICAgY29tcG9uZW50ID0gX3Byb3BzJGNvbXBvbmVudCA9PT0gdW5kZWZpbmVkID8gJ3NwYW4nIDogX3Byb3BzJGNvbXBvbmVudCxcbiAgICAgIGlubmVyUmVmID0gcHJvcHMuaW5uZXJSZWYsXG4gICAgICBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgcmVzdFByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbJ2NvbXBvbmVudCcsICdpbm5lclJlZicsICdjaGlsZHJlbiddKTtcblxuICB2YXIgcG9wcGVyID0gY29udGV4dC5wb3BwZXI7XG5cbiAgdmFyIGFycm93UmVmID0gZnVuY3Rpb24gYXJyb3dSZWYobm9kZSkge1xuICAgIHBvcHBlci5zZXRBcnJvd05vZGUobm9kZSk7XG4gICAgaWYgKHR5cGVvZiBpbm5lclJlZiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgaW5uZXJSZWYobm9kZSk7XG4gICAgfVxuICB9O1xuICB2YXIgYXJyb3dTdHlsZSA9IHBvcHBlci5nZXRBcnJvd1N0eWxlKCk7XG5cbiAgaWYgKHR5cGVvZiBjaGlsZHJlbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHZhciBhcnJvd1Byb3BzID0ge1xuICAgICAgcmVmOiBhcnJvd1JlZixcbiAgICAgIHN0eWxlOiBhcnJvd1N0eWxlXG4gICAgfTtcbiAgICByZXR1cm4gY2hpbGRyZW4oeyBhcnJvd1Byb3BzOiBhcnJvd1Byb3BzLCByZXN0UHJvcHM6IHJlc3RQcm9wcyB9KTtcbiAgfVxuXG4gIHZhciBjb21wb25lbnRQcm9wcyA9IF9leHRlbmRzKHt9LCByZXN0UHJvcHMsIHtcbiAgICBzdHlsZTogX2V4dGVuZHMoe30sIGFycm93U3R5bGUsIHJlc3RQcm9wcy5zdHlsZSlcbiAgfSk7XG5cbiAgaWYgKHR5cGVvZiBjb21wb25lbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgY29tcG9uZW50UHJvcHMucmVmID0gYXJyb3dSZWY7XG4gIH0gZWxzZSB7XG4gICAgY29tcG9uZW50UHJvcHMuaW5uZXJSZWYgPSBhcnJvd1JlZjtcbiAgfVxuXG4gIHJldHVybiBjcmVhdGVFbGVtZW50KGNvbXBvbmVudCwgY29tcG9uZW50UHJvcHMsIGNoaWxkcmVuKTtcbn07XG5cbkFycm93LmNvbnRleHRUeXBlcyA9IHtcbiAgcG9wcGVyOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWRcbn07XG5cbkFycm93LnByb3BUeXBlcyA9IHtcbiAgY29tcG9uZW50OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubm9kZSwgUHJvcFR5cGVzLmZ1bmNdKSxcbiAgaW5uZXJSZWY6IFByb3BUeXBlcy5mdW5jLFxuICBjaGlsZHJlbjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm5vZGUsIFByb3BUeXBlcy5mdW5jXSlcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEFycm93OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX2NyZWF0ZVN2Z0ljb24gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWxzL2NyZWF0ZVN2Z0ljb25cIikpO1xuXG52YXIgX2RlZmF1bHQgPSAoMCwgX2NyZWF0ZVN2Z0ljb24uZGVmYXVsdCkoX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImdcIiwgbnVsbCwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICBkOiBcIk03LjQxIDE1LjQxTDEyIDEwLjgzbDQuNTkgNC41OEwxOCAxNGwtNi02LTYgNnpcIlxufSkpLCAnS2V5Ym9hcmRBcnJvd1VwJyk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX2NyZWF0ZVN2Z0ljb24gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWxzL2NyZWF0ZVN2Z0ljb25cIikpO1xuXG52YXIgX2RlZmF1bHQgPSAoMCwgX2NyZWF0ZVN2Z0ljb24uZGVmYXVsdCkoX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImdcIiwgbnVsbCwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICBkOiBcIk0zIDE3LjI1VjIxaDMuNzVMMTcuODEgOS45NGwtMy43NS0zLjc1TDMgMTcuMjV6TTIwLjcxIDcuMDRjLjM5LS4zOS4zOS0xLjAyIDAtMS40MWwtMi4zNC0yLjM0Yy0uMzktLjM5LTEuMDItLjM5LTEuNDEgMGwtMS44MyAxLjgzIDMuNzUgMy43NSAxLjgzLTEuODN6XCJcbn0pKSwgJ01vZGVFZGl0Jyk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX2NyZWF0ZVN2Z0ljb24gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWxzL2NyZWF0ZVN2Z0ljb25cIikpO1xuXG52YXIgX2RlZmF1bHQgPSAoMCwgX2NyZWF0ZVN2Z0ljb24uZGVmYXVsdCkoX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImdcIiwgbnVsbCwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICBkOiBcIk0xOSAxM2gtNnY2aC0ydi02SDV2LTJoNlY1aDJ2Nmg2djJ6XCJcbn0pKSwgJ0FkZCcpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxuLy8gRXh0ZW5kZWQgdmVyc2lvbiBvZiAlIHdpdGggbmVnYXRpdmUgaW50ZWdlciBzdXBwb3J0LlxuZnVuY3Rpb24gbW9kKG4sIG0pIHtcbiAgdmFyIHEgPSBuICUgbTtcbiAgcmV0dXJuIHEgPCAwID8gcSArIG0gOiBxO1xufVxuXG52YXIgX2RlZmF1bHQgPSBtb2Q7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIGdldERpc3BsYXlTYW1lU2xpZGUgPSBmdW5jdGlvbiBnZXREaXNwbGF5U2FtZVNsaWRlKHByb3BzLCBuZXh0UHJvcHMpIHtcbiAgdmFyIGRpc3BsYXlTYW1lU2xpZGUgPSBmYWxzZTtcblxuICBpZiAocHJvcHMuY2hpbGRyZW4ubGVuZ3RoICYmIG5leHRQcm9wcy5jaGlsZHJlbi5sZW5ndGgpIHtcbiAgICB2YXIgb2xkQ2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbltwcm9wcy5pbmRleF07XG4gICAgdmFyIG9sZEtleSA9IG9sZENoaWxkcmVuID8gb2xkQ2hpbGRyZW4ua2V5IDogJ2VtcHR5JztcblxuICAgIGlmIChvbGRLZXkgIT09IG51bGwpIHtcbiAgICAgIHZhciBuZXdDaGlsZHJlbiA9IG5leHRQcm9wcy5jaGlsZHJlbltuZXh0UHJvcHMuaW5kZXhdO1xuICAgICAgdmFyIG5ld0tleSA9IG5ld0NoaWxkcmVuID8gbmV3Q2hpbGRyZW4ua2V5IDogJ2VtcHR5JztcblxuICAgICAgaWYgKG9sZEtleSA9PT0gbmV3S2V5KSB7XG4gICAgICAgIGRpc3BsYXlTYW1lU2xpZGUgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBkaXNwbGF5U2FtZVNsaWRlO1xufTtcblxudmFyIF9kZWZhdWx0ID0gZ2V0RGlzcGxheVNhbWVTbGlkZTtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gY29tcHV0ZUluZGV4O1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX2NvbnN0YW50ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9jb25zdGFudFwiKSk7XG5cbmZ1bmN0aW9uIGNvbXB1dGVJbmRleChwYXJhbXMpIHtcbiAgdmFyIGNoaWxkcmVuID0gcGFyYW1zLmNoaWxkcmVuLFxuICAgICAgc3RhcnRJbmRleCA9IHBhcmFtcy5zdGFydEluZGV4LFxuICAgICAgc3RhcnRYID0gcGFyYW1zLnN0YXJ0WCxcbiAgICAgIHBhZ2VYID0gcGFyYW1zLnBhZ2VYLFxuICAgICAgdmlld0xlbmd0aCA9IHBhcmFtcy52aWV3TGVuZ3RoLFxuICAgICAgcmVzaXN0YW5jZSA9IHBhcmFtcy5yZXNpc3RhbmNlO1xuICB2YXIgaW5kZXhNYXggPSBfcmVhY3QuZGVmYXVsdC5DaGlsZHJlbi5jb3VudChjaGlsZHJlbikgLSAxO1xuICB2YXIgaW5kZXggPSBzdGFydEluZGV4ICsgKHN0YXJ0WCAtIHBhZ2VYKSAvIHZpZXdMZW5ndGg7XG4gIHZhciBuZXdTdGFydFg7XG5cbiAgaWYgKCFyZXNpc3RhbmNlKSB7XG4gICAgLy8gUmVzZXQgdGhlIHN0YXJ0aW5nIHBvaW50XG4gICAgaWYgKGluZGV4IDwgMCkge1xuICAgICAgaW5kZXggPSAwO1xuICAgICAgbmV3U3RhcnRYID0gKGluZGV4IC0gc3RhcnRJbmRleCkgKiB2aWV3TGVuZ3RoICsgcGFnZVg7XG4gICAgfSBlbHNlIGlmIChpbmRleCA+IGluZGV4TWF4KSB7XG4gICAgICBpbmRleCA9IGluZGV4TWF4O1xuICAgICAgbmV3U3RhcnRYID0gKGluZGV4IC0gc3RhcnRJbmRleCkgKiB2aWV3TGVuZ3RoICsgcGFnZVg7XG4gICAgfVxuICB9IGVsc2UgaWYgKGluZGV4IDwgMCkge1xuICAgIGluZGV4ID0gTWF0aC5leHAoaW5kZXggKiBfY29uc3RhbnQuZGVmYXVsdC5SRVNJU1RBTkNFX0NPRUYpIC0gMTtcbiAgfSBlbHNlIGlmIChpbmRleCA+IGluZGV4TWF4KSB7XG4gICAgaW5kZXggPSBpbmRleE1heCArIDEgLSBNYXRoLmV4cCgoaW5kZXhNYXggLSBpbmRleCkgKiBfY29uc3RhbnQuZGVmYXVsdC5SRVNJU1RBTkNFX0NPRUYpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBpbmRleDogaW5kZXgsXG4gICAgc3RhcnRYOiBuZXdTdGFydFhcbiAgfTtcbn0iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF93YXJuaW5nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwid2FybmluZ1wiKSk7XG5cbnZhciBjaGVja0luZGV4Qm91bmRzID0gZnVuY3Rpb24gY2hlY2tJbmRleEJvdW5kcyhwcm9wcykge1xuICB2YXIgaW5kZXggPSBwcm9wcy5pbmRleCxcbiAgICAgIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW47XG5cbiAgdmFyIGNoaWxkcmVuQ291bnQgPSBfcmVhY3QuZGVmYXVsdC5DaGlsZHJlbi5jb3VudChjaGlsZHJlbik7XG5cbiAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gKDAsIF93YXJuaW5nLmRlZmF1bHQpKGluZGV4ID49IDAgJiYgaW5kZXggPD0gY2hpbGRyZW5Db3VudCwgXCJyZWFjdC1zd2lwZWFibGUtdmlldzogdGhlIG5ldyBpbmRleDogXCIuY29uY2F0KGluZGV4LCBcIiBpcyBvdXQgb2YgYm91bmRzOiBbMC1cIikuY29uY2F0KGNoaWxkcmVuQ291bnQsIFwiXS5cIikpIDogdm9pZCAwO1xufTtcblxudmFyIF9kZWZhdWx0ID0gY2hlY2tJbmRleEJvdW5kcztcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiY2hlY2tJbmRleEJvdW5kc1wiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfY2hlY2tJbmRleEJvdW5kcy5kZWZhdWx0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImNvbXB1dGVJbmRleFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfY29tcHV0ZUluZGV4LmRlZmF1bHQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiY29uc3RhbnRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX2NvbnN0YW50LmRlZmF1bHQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZ2V0RGlzcGxheVNhbWVTbGlkZVwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfZ2V0RGlzcGxheVNhbWVTbGlkZS5kZWZhdWx0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIm1vZFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfbW9kLmRlZmF1bHQ7XG4gIH1cbn0pO1xuXG52YXIgX2NoZWNrSW5kZXhCb3VuZHMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2NoZWNrSW5kZXhCb3VuZHNcIikpO1xuXG52YXIgX2NvbXB1dGVJbmRleCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vY29tcHV0ZUluZGV4XCIpKTtcblxudmFyIF9jb25zdGFudCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vY29uc3RhbnRcIikpO1xuXG52YXIgX2dldERpc3BsYXlTYW1lU2xpZGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2dldERpc3BsYXlTYW1lU2xpZGVcIikpO1xuXG52YXIgX21vZCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vbW9kXCIpKTsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfaW5ET00gPSByZXF1aXJlKCcuLi91dGlsL2luRE9NJyk7XG5cbnZhciBfaW5ET00yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaW5ET00pO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgb2ZmID0gZnVuY3Rpb24gb2ZmKCkge307XG5pZiAoX2luRE9NMi5kZWZhdWx0KSB7XG4gIG9mZiA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcikgcmV0dXJuIGZ1bmN0aW9uIChub2RlLCBldmVudE5hbWUsIGhhbmRsZXIsIGNhcHR1cmUpIHtcbiAgICAgIHJldHVybiBub2RlLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCBoYW5kbGVyLCBjYXB0dXJlIHx8IGZhbHNlKTtcbiAgICB9O2Vsc2UgaWYgKGRvY3VtZW50LmF0dGFjaEV2ZW50KSByZXR1cm4gZnVuY3Rpb24gKG5vZGUsIGV2ZW50TmFtZSwgaGFuZGxlcikge1xuICAgICAgcmV0dXJuIG5vZGUuZGV0YWNoRXZlbnQoJ29uJyArIGV2ZW50TmFtZSwgaGFuZGxlcik7XG4gICAgfTtcbiAgfSgpO1xufVxuXG5leHBvcnRzLmRlZmF1bHQgPSBvZmY7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfaW5ET00gPSByZXF1aXJlKCcuLi91dGlsL2luRE9NJyk7XG5cbnZhciBfaW5ET00yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaW5ET00pO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgb24gPSBmdW5jdGlvbiBvbigpIHt9O1xuaWYgKF9pbkRPTTIuZGVmYXVsdCkge1xuICBvbiA9IGZ1bmN0aW9uICgpIHtcblxuICAgIGlmIChkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKSByZXR1cm4gZnVuY3Rpb24gKG5vZGUsIGV2ZW50TmFtZSwgaGFuZGxlciwgY2FwdHVyZSkge1xuICAgICAgcmV0dXJuIG5vZGUuYWRkRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIGhhbmRsZXIsIGNhcHR1cmUgfHwgZmFsc2UpO1xuICAgIH07ZWxzZSBpZiAoZG9jdW1lbnQuYXR0YWNoRXZlbnQpIHJldHVybiBmdW5jdGlvbiAobm9kZSwgZXZlbnROYW1lLCBoYW5kbGVyKSB7XG4gICAgICByZXR1cm4gbm9kZS5hdHRhY2hFdmVudCgnb24nICsgZXZlbnROYW1lLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICBlID0gZSB8fCB3aW5kb3cuZXZlbnQ7XG4gICAgICAgIGUudGFyZ2V0ID0gZS50YXJnZXQgfHwgZS5zcmNFbGVtZW50O1xuICAgICAgICBlLmN1cnJlbnRUYXJnZXQgPSBub2RlO1xuICAgICAgICBoYW5kbGVyLmNhbGwobm9kZSwgZSk7XG4gICAgICB9KTtcbiAgICB9O1xuICB9KCk7XG59XG5cbmV4cG9ydHMuZGVmYXVsdCA9IG9uO1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmdldERvbVRyZWVTaGFwZXMgPSBnZXREb21UcmVlU2hhcGVzO1xuZXhwb3J0cy5maW5kTmF0aXZlSGFuZGxlciA9IGZpbmROYXRpdmVIYW5kbGVyO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX2V4dGVuZHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2V4dGVuZHNcIikpO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiKSk7XG5cbnZhciBfY2xhc3NDYWxsQ2hlY2syID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2NsYXNzQ2FsbENoZWNrXCIpKTtcblxudmFyIF9jcmVhdGVDbGFzczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vY3JlYXRlQ2xhc3NcIikpO1xuXG52YXIgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5cIikpO1xuXG52YXIgX2luaGVyaXRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9pbmhlcml0c1wiKSk7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbnZhciBfd2FybmluZyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIndhcm5pbmdcIikpO1xuXG52YXIgX3Byb3BlcnRpZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJkb20taGVscGVycy90cmFuc2l0aW9uL3Byb3BlcnRpZXNcIikpO1xuXG52YXIgX29uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiZG9tLWhlbHBlcnMvZXZlbnRzL29uXCIpKTtcblxudmFyIF9vZmYgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJkb20taGVscGVycy9ldmVudHMvb2ZmXCIpKTtcblxudmFyIF9yZWFjdFN3aXBlYWJsZVZpZXdzQ29yZSA9IHJlcXVpcmUoXCJyZWFjdC1zd2lwZWFibGUtdmlld3MtY29yZVwiKTtcblxuZnVuY3Rpb24gYWRkRXZlbnRMaXN0ZW5lckVuaGFuY2VkKG5vZGUsIGV2ZW50LCBoYW5kbGVyLCBvcHRpb25zKSB7XG4gICgwLCBfb24uZGVmYXVsdCkobm9kZSwgZXZlbnQsIGhhbmRsZXIsIG9wdGlvbnMpO1xuICByZXR1cm4ge1xuICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgKDAsIF9vZmYuZGVmYXVsdCkobm9kZSwgZXZlbnQsIGhhbmRsZXIsIG9wdGlvbnMpO1xuICAgIH1cbiAgfTtcbn1cblxudmFyIHN0eWxlSW5qZWN0ZWQgPSBmYWxzZTsgLy8gU3VwcG9ydCBvbGQgdmVyc2lvbiBvZiBpT1MgYW5kIElFIDEwLlxuLy8gVG8gYmUgZGVsZXRlZCBpbiAyMDE5LlxuXG5mdW5jdGlvbiBpbmplY3RTdHlsZSgpIHtcbiAgLy8gSW5qZWN0IG9uY2UgZm9yIGFsbCB0aGUgaW5zdGFuY2VzXG4gIGlmICghc3R5bGVJbmplY3RlZCkge1xuICAgIHZhciBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gICAgc3R5bGUuaW5uZXJIVE1MID0gXCJcXG4gICAgICAucmVhY3Qtc3dpcGVhYmxlLXZpZXctY29udGFpbmVyIHtcXG4gICAgICAgIGRpc3BsYXk6IC13ZWJraXQtYm94O1xcbiAgICAgICAgZGlzcGxheTogLW1zLWZsZXhib3g7XFxuICAgICAgfVxcbiAgICAgIC5yZWFjdC1zd2lwZWFibGUtdmlldy1jb250YWluZXIgPiBkaXYge1xcbiAgICAgICAgLW1zLWZsZXgtbmVnYXRpdmU6IDA7XFxuICAgICAgfVxcbiAgICBcIjtcblxuICAgIGlmIChkb2N1bWVudC5ib2R5KSB7XG4gICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHN0eWxlKTtcbiAgICB9XG5cbiAgICBzdHlsZUluamVjdGVkID0gdHJ1ZTtcbiAgfVxufVxuXG52YXIgc3R5bGVzID0ge1xuICBjb250YWluZXI6IHtcbiAgICBkaXJlY3Rpb246ICdsdHInLFxuICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICB3aWxsQ2hhbmdlOiAndHJhbnNmb3JtJ1xuICB9LFxuICBzbGlkZToge1xuICAgIHdpZHRoOiAnMTAwJScsXG4gICAgV2Via2l0RmxleFNocmluazogMCxcbiAgICBmbGV4U2hyaW5rOiAwLFxuICAgIG92ZXJmbG93OiAnYXV0bydcbiAgfVxufTtcbnZhciBheGlzUHJvcGVydGllcyA9IHtcbiAgcm9vdDoge1xuICAgIHg6IHtcbiAgICAgIG92ZXJmbG93WDogJ2hpZGRlbidcbiAgICB9LFxuICAgICd4LXJldmVyc2UnOiB7XG4gICAgICBvdmVyZmxvd1g6ICdoaWRkZW4nXG4gICAgfSxcbiAgICB5OiB7XG4gICAgICBvdmVyZmxvd1k6ICdoaWRkZW4nXG4gICAgfSxcbiAgICAneS1yZXZlcnNlJzoge1xuICAgICAgb3ZlcmZsb3dZOiAnaGlkZGVuJ1xuICAgIH1cbiAgfSxcbiAgZmxleERpcmVjdGlvbjoge1xuICAgIHg6ICdyb3cnLFxuICAgICd4LXJldmVyc2UnOiAncm93LXJldmVyc2UnLFxuICAgIHk6ICdjb2x1bW4nLFxuICAgICd5LXJldmVyc2UnOiAnY29sdW1uLXJldmVyc2UnXG4gIH0sXG4gIHRyYW5zZm9ybToge1xuICAgIHg6IGZ1bmN0aW9uIHgodHJhbnNsYXRlKSB7XG4gICAgICByZXR1cm4gXCJ0cmFuc2xhdGUoXCIuY29uY2F0KC10cmFuc2xhdGUsIFwiJSwgMClcIik7XG4gICAgfSxcbiAgICAneC1yZXZlcnNlJzogZnVuY3Rpb24geFJldmVyc2UodHJhbnNsYXRlKSB7XG4gICAgICByZXR1cm4gXCJ0cmFuc2xhdGUoXCIuY29uY2F0KHRyYW5zbGF0ZSwgXCIlLCAwKVwiKTtcbiAgICB9LFxuICAgIHk6IGZ1bmN0aW9uIHkodHJhbnNsYXRlKSB7XG4gICAgICByZXR1cm4gXCJ0cmFuc2xhdGUoMCwgXCIuY29uY2F0KC10cmFuc2xhdGUsIFwiJSlcIik7XG4gICAgfSxcbiAgICAneS1yZXZlcnNlJzogZnVuY3Rpb24geVJldmVyc2UodHJhbnNsYXRlKSB7XG4gICAgICByZXR1cm4gXCJ0cmFuc2xhdGUoMCwgXCIuY29uY2F0KHRyYW5zbGF0ZSwgXCIlKVwiKTtcbiAgICB9XG4gIH0sXG4gIGxlbmd0aDoge1xuICAgIHg6ICd3aWR0aCcsXG4gICAgJ3gtcmV2ZXJzZSc6ICd3aWR0aCcsXG4gICAgeTogJ2hlaWdodCcsXG4gICAgJ3ktcmV2ZXJzZSc6ICdoZWlnaHQnXG4gIH0sXG4gIHJvdGF0aW9uTWF0cml4OiB7XG4gICAgeDoge1xuICAgICAgeDogWzEsIDBdLFxuICAgICAgeTogWzAsIDFdXG4gICAgfSxcbiAgICAneC1yZXZlcnNlJzoge1xuICAgICAgeDogWy0xLCAwXSxcbiAgICAgIHk6IFswLCAxXVxuICAgIH0sXG4gICAgeToge1xuICAgICAgeDogWzAsIDFdLFxuICAgICAgeTogWzEsIDBdXG4gICAgfSxcbiAgICAneS1yZXZlcnNlJzoge1xuICAgICAgeDogWzAsIC0xXSxcbiAgICAgIHk6IFsxLCAwXVxuICAgIH1cbiAgfSxcbiAgc2Nyb2xsUG9zaXRpb246IHtcbiAgICB4OiAnc2Nyb2xsTGVmdCcsXG4gICAgJ3gtcmV2ZXJzZSc6ICdzY3JvbGxMZWZ0JyxcbiAgICB5OiAnc2Nyb2xsVG9wJyxcbiAgICAneS1yZXZlcnNlJzogJ3Njcm9sbFRvcCdcbiAgfSxcbiAgc2Nyb2xsTGVuZ3RoOiB7XG4gICAgeDogJ3Njcm9sbFdpZHRoJyxcbiAgICAneC1yZXZlcnNlJzogJ3Njcm9sbFdpZHRoJyxcbiAgICB5OiAnc2Nyb2xsSGVpZ2h0JyxcbiAgICAneS1yZXZlcnNlJzogJ3Njcm9sbEhlaWdodCdcbiAgfSxcbiAgY2xpZW50TGVuZ3RoOiB7XG4gICAgeDogJ2NsaWVudFdpZHRoJyxcbiAgICAneC1yZXZlcnNlJzogJ2NsaWVudFdpZHRoJyxcbiAgICB5OiAnY2xpZW50SGVpZ2h0JyxcbiAgICAneS1yZXZlcnNlJzogJ2NsaWVudEhlaWdodCdcbiAgfVxufTtcblxuZnVuY3Rpb24gY3JlYXRlVHJhbnNpdGlvbihwcm9wZXJ0eSwgb3B0aW9ucykge1xuICB2YXIgZHVyYXRpb24gPSBvcHRpb25zLmR1cmF0aW9uLFxuICAgICAgZWFzZUZ1bmN0aW9uID0gb3B0aW9ucy5lYXNlRnVuY3Rpb24sXG4gICAgICBkZWxheSA9IG9wdGlvbnMuZGVsYXk7XG4gIHJldHVybiBcIlwiLmNvbmNhdChwcm9wZXJ0eSwgXCIgXCIpLmNvbmNhdChkdXJhdGlvbiwgXCIgXCIpLmNvbmNhdChlYXNlRnVuY3Rpb24sIFwiIFwiKS5jb25jYXQoZGVsYXkpO1xufSAvLyBXZSBhcmUgdXNpbmcgYSAyeDIgcm90YXRpb24gbWF0cml4LlxuXG5cbmZ1bmN0aW9uIGFwcGx5Um90YXRpb25NYXRyaXgodG91Y2gsIGF4aXMpIHtcbiAgdmFyIHJvdGF0aW9uTWF0cml4ID0gYXhpc1Byb3BlcnRpZXMucm90YXRpb25NYXRyaXhbYXhpc107XG4gIHJldHVybiB7XG4gICAgcGFnZVg6IHJvdGF0aW9uTWF0cml4LnhbMF0gKiB0b3VjaC5wYWdlWCArIHJvdGF0aW9uTWF0cml4LnhbMV0gKiB0b3VjaC5wYWdlWSxcbiAgICBwYWdlWTogcm90YXRpb25NYXRyaXgueVswXSAqIHRvdWNoLnBhZ2VYICsgcm90YXRpb25NYXRyaXgueVsxXSAqIHRvdWNoLnBhZ2VZXG4gIH07XG59XG5cbmZ1bmN0aW9uIGFkYXB0TW91c2UoZXZlbnQpIHtcbiAgZXZlbnQudG91Y2hlcyA9IFt7XG4gICAgcGFnZVg6IGV2ZW50LnBhZ2VYLFxuICAgIHBhZ2VZOiBldmVudC5wYWdlWVxuICB9XTtcbiAgcmV0dXJuIGV2ZW50O1xufVxuXG5mdW5jdGlvbiBnZXREb21UcmVlU2hhcGVzKGVsZW1lbnQsIHJvb3ROb2RlKSB7XG4gIHZhciBkb21UcmVlU2hhcGVzID0gW107XG5cbiAgd2hpbGUgKGVsZW1lbnQgJiYgZWxlbWVudCAhPT0gcm9vdE5vZGUpIHtcbiAgICAvLyBXZSByZWFjaCBhIFN3aXBlYWJsZSBWaWV3LCBubyBuZWVkIHRvIGxvb2sgaGlnaGVyIGluIHRoZSBkb20gdHJlZS5cbiAgICBpZiAoZWxlbWVudC5oYXNBdHRyaWJ1dGUoJ2RhdGEtc3dpcGVhYmxlJykpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIHZhciBzdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpO1xuXG4gICAgaWYgKCAvLyBJZ25vcmUgdGhlIHNjcm9sbCBjaGlsZHJlbiBpZiB0aGUgZWxlbWVudCBpcyBhYnNvbHV0ZSBwb3NpdGlvbmVkLlxuICAgIHN0eWxlLmdldFByb3BlcnR5VmFsdWUoJ3Bvc2l0aW9uJykgPT09ICdhYnNvbHV0ZScgfHwgLy8gSWdub3JlIHRoZSBzY3JvbGwgY2hpbGRyZW4gaWYgdGhlIGVsZW1lbnQgaGFzIGFuIG92ZXJmbG93WCBoaWRkZW5cbiAgICBzdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKCdvdmVyZmxvdy14JykgPT09ICdoaWRkZW4nKSB7XG4gICAgICBkb21UcmVlU2hhcGVzID0gW107XG4gICAgfSBlbHNlIGlmIChlbGVtZW50LmNsaWVudFdpZHRoID4gMCAmJiBlbGVtZW50LnNjcm9sbFdpZHRoID4gZWxlbWVudC5jbGllbnRXaWR0aCB8fCBlbGVtZW50LmNsaWVudEhlaWdodCA+IDAgJiYgZWxlbWVudC5zY3JvbGxIZWlnaHQgPiBlbGVtZW50LmNsaWVudEhlaWdodCkge1xuICAgICAgLy8gSWdub3JlIHRoZSBub2RlcyB0aGF0IGhhdmUgbm8gd2lkdGguXG4gICAgICAvLyBLZWVwIGVsZW1lbnRzIHdpdGggYSBzY3JvbGxcbiAgICAgIGRvbVRyZWVTaGFwZXMucHVzaCh7XG4gICAgICAgIGVsZW1lbnQ6IGVsZW1lbnQsXG4gICAgICAgIHNjcm9sbFdpZHRoOiBlbGVtZW50LnNjcm9sbFdpZHRoLFxuICAgICAgICBzY3JvbGxIZWlnaHQ6IGVsZW1lbnQuc2Nyb2xsSGVpZ2h0LFxuICAgICAgICBjbGllbnRXaWR0aDogZWxlbWVudC5jbGllbnRXaWR0aCxcbiAgICAgICAgY2xpZW50SGVpZ2h0OiBlbGVtZW50LmNsaWVudEhlaWdodCxcbiAgICAgICAgc2Nyb2xsTGVmdDogZWxlbWVudC5zY3JvbGxMZWZ0LFxuICAgICAgICBzY3JvbGxUb3A6IGVsZW1lbnQuc2Nyb2xsVG9wXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBlbGVtZW50ID0gZWxlbWVudC5wYXJlbnROb2RlO1xuICB9XG5cbiAgcmV0dXJuIGRvbVRyZWVTaGFwZXM7XG59IC8vIFdlIGNhbiBvbmx5IGhhdmUgb25lIG5vZGUgYXQgdGhlIHRpbWUgY2xhaW1pbmcgb3duZXJzaGlwIGZvciBoYW5kbGluZyB0aGUgc3dpcGUuXG4vLyBPdGhlcndpc2UsIHRoZSBVWCB3b3VsZCBiZSBjb25mdXNpbmcuXG4vLyBUaGF0J3Mgd2h5IHdlIHVzZSBhIHNpbmdsZXRvbiBoZXJlLlxuXG5cbnZhciBub2RlV2hvQ2xhaW1lZFRoZVNjcm9sbCA9IG51bGw7XG5cbmZ1bmN0aW9uIGZpbmROYXRpdmVIYW5kbGVyKHBhcmFtcykge1xuICB2YXIgZG9tVHJlZVNoYXBlcyA9IHBhcmFtcy5kb21UcmVlU2hhcGVzLFxuICAgICAgcGFnZVggPSBwYXJhbXMucGFnZVgsXG4gICAgICBzdGFydFggPSBwYXJhbXMuc3RhcnRYLFxuICAgICAgYXhpcyA9IHBhcmFtcy5heGlzO1xuICByZXR1cm4gZG9tVHJlZVNoYXBlcy5zb21lKGZ1bmN0aW9uIChzaGFwZSkge1xuICAgIC8vIERldGVybWluZSBpZiB3ZSBhcmUgZ29pbmcgYmFja3dhcmQgb3IgZm9yd2FyZC5cbiAgICB2YXIgZ29pbmdGb3J3YXJkID0gcGFnZVggPj0gc3RhcnRYO1xuXG4gICAgaWYgKGF4aXMgPT09ICd4JyB8fCBheGlzID09PSAneScpIHtcbiAgICAgIGdvaW5nRm9yd2FyZCA9ICFnb2luZ0ZvcndhcmQ7XG4gICAgfVxuXG4gICAgdmFyIHNjcm9sbFBvc2l0aW9uID0gc2hhcGVbYXhpc1Byb3BlcnRpZXMuc2Nyb2xsUG9zaXRpb25bYXhpc11dO1xuICAgIHZhciBhcmVOb3RBdFN0YXJ0ID0gc2Nyb2xsUG9zaXRpb24gPiAwO1xuICAgIHZhciBhcmVOb3RBdEVuZCA9IHNjcm9sbFBvc2l0aW9uICsgc2hhcGVbYXhpc1Byb3BlcnRpZXMuY2xpZW50TGVuZ3RoW2F4aXNdXSA8IHNoYXBlW2F4aXNQcm9wZXJ0aWVzLnNjcm9sbExlbmd0aFtheGlzXV07XG5cbiAgICBpZiAoZ29pbmdGb3J3YXJkICYmIGFyZU5vdEF0RW5kIHx8ICFnb2luZ0ZvcndhcmQgJiYgYXJlTm90QXRTdGFydCkge1xuICAgICAgbm9kZVdob0NsYWltZWRUaGVTY3JvbGwgPSBzaGFwZS5lbGVtZW50O1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9KTtcbn1cblxudmFyIFN3aXBlYWJsZVZpZXdzID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gICgwLCBfaW5oZXJpdHMyLmRlZmF1bHQpKFN3aXBlYWJsZVZpZXdzLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBTd2lwZWFibGVWaWV3cyhwcm9wcywgY29udGV4dCkge1xuICAgIHZhciBfdGhpcztcblxuICAgICgwLCBfY2xhc3NDYWxsQ2hlY2syLmRlZmF1bHQpKHRoaXMsIFN3aXBlYWJsZVZpZXdzKTtcbiAgICBfdGhpcyA9ICgwLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIuZGVmYXVsdCkodGhpcywgKFN3aXBlYWJsZVZpZXdzLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoU3dpcGVhYmxlVmlld3MpKS5jYWxsKHRoaXMsIHByb3BzLCBjb250ZXh0KSk7XG4gICAgX3RoaXMucm9vdE5vZGUgPSBudWxsO1xuICAgIF90aGlzLmNvbnRhaW5lck5vZGUgPSBudWxsO1xuICAgIF90aGlzLmlnbm9yZU5leHRTY3JvbGxFdmVudHMgPSBmYWxzZTtcbiAgICBfdGhpcy52aWV3TGVuZ3RoID0gMDtcbiAgICBfdGhpcy5zdGFydFggPSAwO1xuICAgIF90aGlzLmxhc3RYID0gMDtcbiAgICBfdGhpcy52eCA9IDA7XG4gICAgX3RoaXMuc3RhcnRZID0gMDtcbiAgICBfdGhpcy5pc1N3aXBpbmcgPSB1bmRlZmluZWQ7XG4gICAgX3RoaXMuc3RhcnRlZCA9IGZhbHNlO1xuICAgIF90aGlzLnN0YXJ0SW5kZXggPSAwO1xuICAgIF90aGlzLnRyYW5zaXRpb25MaXN0ZW5lciA9IG51bGw7XG4gICAgX3RoaXMudG91Y2hNb3ZlTGlzdGVuZXIgPSBudWxsO1xuICAgIF90aGlzLmFjdGl2ZVNsaWRlID0gbnVsbDtcbiAgICBfdGhpcy5pbmRleEN1cnJlbnQgPSBudWxsO1xuXG4gICAgX3RoaXMuaGFuZGxlU3dpcGVTdGFydCA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgdmFyIGF4aXMgPSBfdGhpcy5wcm9wcy5heGlzOyAvLyBMYXRlbmN5IGFuZCByYXBpZCByZXJlbmRlcnMgb24gc29tZSBkZXZpY2VzIGNhbiBsZWF2ZVxuICAgICAgLy8gYSBwZXJpb2Qgd2hlcmUgcm9vdE5vZGUgYnJpZWZseSBlcXVhbHMgbnVsbC5cblxuICAgICAgaWYgKF90aGlzLnJvb3ROb2RlID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIHRvdWNoID0gYXBwbHlSb3RhdGlvbk1hdHJpeChldmVudC50b3VjaGVzWzBdLCBheGlzKTtcbiAgICAgIF90aGlzLnZpZXdMZW5ndGggPSBfdGhpcy5yb290Tm9kZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVtheGlzUHJvcGVydGllcy5sZW5ndGhbYXhpc11dO1xuICAgICAgX3RoaXMuc3RhcnRYID0gdG91Y2gucGFnZVg7XG4gICAgICBfdGhpcy5sYXN0WCA9IHRvdWNoLnBhZ2VYO1xuICAgICAgX3RoaXMudnggPSAwO1xuICAgICAgX3RoaXMuc3RhcnRZID0gdG91Y2gucGFnZVk7XG4gICAgICBfdGhpcy5pc1N3aXBpbmcgPSB1bmRlZmluZWQ7XG4gICAgICBfdGhpcy5zdGFydGVkID0gdHJ1ZTtcbiAgICAgIHZhciBjb21wdXRlZFN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoX3RoaXMuY29udGFpbmVyTm9kZSk7XG4gICAgICB2YXIgdHJhbnNmb3JtID0gY29tcHV0ZWRTdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKCctd2Via2l0LXRyYW5zZm9ybScpIHx8IGNvbXB1dGVkU3R5bGUuZ2V0UHJvcGVydHlWYWx1ZSgndHJhbnNmb3JtJyk7XG5cbiAgICAgIGlmICh0cmFuc2Zvcm0gJiYgdHJhbnNmb3JtICE9PSAnbm9uZScpIHtcbiAgICAgICAgdmFyIHRyYW5zZm9ybVZhbHVlcyA9IHRyYW5zZm9ybS5zcGxpdCgnKCcpWzFdLnNwbGl0KCcpJylbMF0uc3BsaXQoJywnKTtcbiAgICAgICAgdmFyIHJvb3RTdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKF90aGlzLnJvb3ROb2RlKTtcbiAgICAgICAgdmFyIHRyYW5mb3JtTm9ybWFsaXplZCA9IGFwcGx5Um90YXRpb25NYXRyaXgoe1xuICAgICAgICAgIHBhZ2VYOiBwYXJzZUludCh0cmFuc2Zvcm1WYWx1ZXNbNF0sIDEwKSxcbiAgICAgICAgICBwYWdlWTogcGFyc2VJbnQodHJhbnNmb3JtVmFsdWVzWzVdLCAxMClcbiAgICAgICAgfSwgYXhpcyk7XG4gICAgICAgIF90aGlzLnN0YXJ0SW5kZXggPSAtdHJhbmZvcm1Ob3JtYWxpemVkLnBhZ2VYIC8gKF90aGlzLnZpZXdMZW5ndGggLSBwYXJzZUludChyb290U3R5bGUucGFkZGluZ0xlZnQsIDEwKSAtIHBhcnNlSW50KHJvb3RTdHlsZS5wYWRkaW5nUmlnaHQsIDEwKSkgfHwgMDtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlU3dpcGVNb3ZlID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAvLyBUaGUgdG91Y2ggc3RhcnQgZXZlbnQgY2FuIGJlIGNhbmNlbC5cbiAgICAgIC8vIE1ha2VzIHN1cmUgd2Ugc2V0IGEgc3RhcnRpbmcgcG9pbnQuXG4gICAgICBpZiAoIV90aGlzLnN0YXJ0ZWQpIHtcbiAgICAgICAgX3RoaXMuaGFuZGxlVG91Y2hTdGFydChldmVudCk7XG5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSAvLyBMYXRlbmN5IGFuZCByYXBpZCByZXJlbmRlcnMgb24gc29tZSBkZXZpY2VzXG4gICAgICAvLyBjYW4gbGVhdmUgYSBwZXJpb2Qgd2hlcmUgcm9vdE5vZGUgYnJpZWZseSBlcXVhbHMgbnVsbC5cblxuXG4gICAgICBpZiAoX3RoaXMucm9vdE5vZGUgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSAvLyBXZSBhcmUgbm90IHN1cHBvc2VkIHRvIGhhbmxkZSB0aGlzIHRvdWNoIG1vdmUuXG5cblxuICAgICAgaWYgKG5vZGVXaG9DbGFpbWVkVGhlU2Nyb2xsICE9PSBudWxsICYmIG5vZGVXaG9DbGFpbWVkVGhlU2Nyb2xsICE9PSBfdGhpcy5yb290Tm9kZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IF90aGlzLnByb3BzLFxuICAgICAgICAgIGF4aXMgPSBfdGhpcyRwcm9wcy5heGlzLFxuICAgICAgICAgIGNoaWxkcmVuID0gX3RoaXMkcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgICAgaWdub3JlTmF0aXZlU2Nyb2xsID0gX3RoaXMkcHJvcHMuaWdub3JlTmF0aXZlU2Nyb2xsLFxuICAgICAgICAgIG9uU3dpdGNoaW5nID0gX3RoaXMkcHJvcHMub25Td2l0Y2hpbmcsXG4gICAgICAgICAgcmVzaXN0YW5jZSA9IF90aGlzJHByb3BzLnJlc2lzdGFuY2U7XG4gICAgICB2YXIgdG91Y2ggPSBhcHBseVJvdGF0aW9uTWF0cml4KGV2ZW50LnRvdWNoZXNbMF0sIGF4aXMpOyAvLyBXZSBkb24ndCBrbm93IHlldC5cblxuICAgICAgaWYgKF90aGlzLmlzU3dpcGluZyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHZhciBkeCA9IE1hdGguYWJzKHRvdWNoLnBhZ2VYIC0gX3RoaXMuc3RhcnRYKTtcbiAgICAgICAgdmFyIGR5ID0gTWF0aC5hYnModG91Y2gucGFnZVkgLSBfdGhpcy5zdGFydFkpO1xuICAgICAgICB2YXIgaXNTd2lwaW5nID0gZHggPiBkeSAmJiBkeCA+IF9yZWFjdFN3aXBlYWJsZVZpZXdzQ29yZS5jb25zdGFudC5VTkNFUlRBSU5UWV9USFJFU0hPTEQ7IC8vIFdlIGxldCB0aGUgcGFyZW50IGhhbmRsZSB0aGUgc2Nyb2xsLlxuXG4gICAgICAgIGlmICghcmVzaXN0YW5jZSAmJiAoYXhpcyA9PT0gJ3knIHx8IGF4aXMgPT09ICd5LXJldmVyc2UnKSAmJiAoX3RoaXMuaW5kZXhDdXJyZW50ID09PSAwICYmIF90aGlzLnN0YXJ0WCA8IHRvdWNoLnBhZ2VYIHx8IF90aGlzLmluZGV4Q3VycmVudCA9PT0gX3JlYWN0LmRlZmF1bHQuQ2hpbGRyZW4uY291bnQoX3RoaXMucHJvcHMuY2hpbGRyZW4pIC0gMSAmJiBfdGhpcy5zdGFydFggPiB0b3VjaC5wYWdlWCkpIHtcbiAgICAgICAgICBfdGhpcy5pc1N3aXBpbmcgPSBmYWxzZTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH0gLy8gV2UgYXJlIGxpa2VseSB0byBiZSBzd2lwaW5nLCBsZXQncyBwcmV2ZW50IHRoZSBzY3JvbGwgZXZlbnQuXG5cblxuICAgICAgICBpZiAoZHggPiBkeSkge1xuICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNTd2lwaW5nID09PSB0cnVlIHx8IGR5ID4gX3JlYWN0U3dpcGVhYmxlVmlld3NDb3JlLmNvbnN0YW50LlVOQ0VSVEFJTlRZX1RIUkVTSE9MRCkge1xuICAgICAgICAgIF90aGlzLmlzU3dpcGluZyA9IGlzU3dpcGluZztcbiAgICAgICAgICBfdGhpcy5zdGFydFggPSB0b3VjaC5wYWdlWDsgLy8gU2hpZnQgdGhlIHN0YXJ0aW5nIHBvaW50LlxuXG4gICAgICAgICAgcmV0dXJuOyAvLyBMZXQncyB3YWl0IHRoZSBuZXh0IHRvdWNoIGV2ZW50IHRvIG1vdmUgc29tZXRoaW5nLlxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChfdGhpcy5pc1N3aXBpbmcgIT09IHRydWUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSAvLyBXZSBhcmUgc3dpcGluZywgbGV0J3MgcHJldmVudCB0aGUgc2Nyb2xsIGV2ZW50LlxuXG5cbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7IC8vIExvdyBQYXNzIGZpbHRlci5cblxuICAgICAgX3RoaXMudnggPSBfdGhpcy52eCAqIDAuNSArICh0b3VjaC5wYWdlWCAtIF90aGlzLmxhc3RYKSAqIDAuNTtcbiAgICAgIF90aGlzLmxhc3RYID0gdG91Y2gucGFnZVg7XG5cbiAgICAgIHZhciBfY29tcHV0ZUluZGV4ID0gKDAsIF9yZWFjdFN3aXBlYWJsZVZpZXdzQ29yZS5jb21wdXRlSW5kZXgpKHtcbiAgICAgICAgY2hpbGRyZW46IGNoaWxkcmVuLFxuICAgICAgICByZXNpc3RhbmNlOiByZXNpc3RhbmNlLFxuICAgICAgICBwYWdlWDogdG91Y2gucGFnZVgsXG4gICAgICAgIHN0YXJ0SW5kZXg6IF90aGlzLnN0YXJ0SW5kZXgsXG4gICAgICAgIHN0YXJ0WDogX3RoaXMuc3RhcnRYLFxuICAgICAgICB2aWV3TGVuZ3RoOiBfdGhpcy52aWV3TGVuZ3RoXG4gICAgICB9KSxcbiAgICAgICAgICBpbmRleCA9IF9jb21wdXRlSW5kZXguaW5kZXgsXG4gICAgICAgICAgc3RhcnRYID0gX2NvbXB1dGVJbmRleC5zdGFydFg7IC8vIEFkZCBzdXBwb3J0IGZvciBuYXRpdmUgc2Nyb2xsIGVsZW1lbnRzLlxuXG5cbiAgICAgIGlmIChub2RlV2hvQ2xhaW1lZFRoZVNjcm9sbCA9PT0gbnVsbCAmJiAhaWdub3JlTmF0aXZlU2Nyb2xsKSB7XG4gICAgICAgIHZhciBkb21UcmVlU2hhcGVzID0gZ2V0RG9tVHJlZVNoYXBlcyhldmVudC50YXJnZXQsIF90aGlzLnJvb3ROb2RlKTtcbiAgICAgICAgdmFyIGhhc0ZvdW5kTmF0aXZlSGFuZGxlciA9IGZpbmROYXRpdmVIYW5kbGVyKHtcbiAgICAgICAgICBkb21UcmVlU2hhcGVzOiBkb21UcmVlU2hhcGVzLFxuICAgICAgICAgIHN0YXJ0WDogX3RoaXMuc3RhcnRYLFxuICAgICAgICAgIHBhZ2VYOiB0b3VjaC5wYWdlWCxcbiAgICAgICAgICBheGlzOiBheGlzXG4gICAgICAgIH0pOyAvLyBXZSBhYm9ydCB0aGUgdG91Y2ggbW92ZSBoYW5kbGVyLlxuXG4gICAgICAgIGlmIChoYXNGb3VuZE5hdGl2ZUhhbmRsZXIpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH0gLy8gV2UgYXJlIG1vdmluZyB0b3dhcmQgdGhlIGVkZ2VzLlxuXG5cbiAgICAgIGlmIChzdGFydFgpIHtcbiAgICAgICAgX3RoaXMuc3RhcnRYID0gc3RhcnRYO1xuICAgICAgfSBlbHNlIGlmIChub2RlV2hvQ2xhaW1lZFRoZVNjcm9sbCA9PT0gbnVsbCkge1xuICAgICAgICBub2RlV2hvQ2xhaW1lZFRoZVNjcm9sbCA9IF90aGlzLnJvb3ROb2RlO1xuICAgICAgfVxuXG4gICAgICBfdGhpcy5zZXRJbmRleEN1cnJlbnQoaW5kZXgpO1xuXG4gICAgICB2YXIgY2FsbGJhY2sgPSBmdW5jdGlvbiBjYWxsYmFjaygpIHtcbiAgICAgICAgaWYgKG9uU3dpdGNoaW5nKSB7XG4gICAgICAgICAgb25Td2l0Y2hpbmcoaW5kZXgsICdtb3ZlJyk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIGlmIChfdGhpcy5zdGF0ZS5kaXNwbGF5U2FtZVNsaWRlIHx8ICFfdGhpcy5zdGF0ZS5pc0RyYWdnaW5nKSB7XG4gICAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICBkaXNwbGF5U2FtZVNsaWRlOiBmYWxzZSxcbiAgICAgICAgICBpc0RyYWdnaW5nOiB0cnVlXG4gICAgICAgIH0sIGNhbGxiYWNrKTtcbiAgICAgIH1cblxuICAgICAgY2FsbGJhY2soKTtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlU3dpcGVFbmQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBub2RlV2hvQ2xhaW1lZFRoZVNjcm9sbCA9IG51bGw7IC8vIFRoZSB0b3VjaCBzdGFydCBldmVudCBjYW4gYmUgY2FuY2VsLlxuICAgICAgLy8gTWFrZXMgc3VyZSB0aGF0IGEgc3RhcnRpbmcgcG9pbnQgaXMgc2V0LlxuXG4gICAgICBpZiAoIV90aGlzLnN0YXJ0ZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBfdGhpcy5zdGFydGVkID0gZmFsc2U7XG5cbiAgICAgIGlmIChfdGhpcy5pc1N3aXBpbmcgIT09IHRydWUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgaW5kZXhMYXRlc3QgPSBfdGhpcy5zdGF0ZS5pbmRleExhdGVzdDtcbiAgICAgIHZhciBpbmRleEN1cnJlbnQgPSBfdGhpcy5pbmRleEN1cnJlbnQ7XG4gICAgICB2YXIgZGVsdGEgPSBpbmRleExhdGVzdCAtIGluZGV4Q3VycmVudDtcbiAgICAgIHZhciBpbmRleE5ldzsgLy8gUXVpY2sgbW92ZW1lbnRcblxuICAgICAgaWYgKE1hdGguYWJzKF90aGlzLnZ4KSA+IF90aGlzLnByb3BzLnRocmVzaG9sZCkge1xuICAgICAgICBpZiAoX3RoaXMudnggPiAwKSB7XG4gICAgICAgICAgaW5kZXhOZXcgPSBNYXRoLmZsb29yKGluZGV4Q3VycmVudCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaW5kZXhOZXcgPSBNYXRoLmNlaWwoaW5kZXhDdXJyZW50KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChNYXRoLmFicyhkZWx0YSkgPiBfdGhpcy5wcm9wcy5oeXN0ZXJlc2lzKSB7XG4gICAgICAgIC8vIFNvbWUgaHlzdGVyZXNpcyB3aXRoIGluZGV4TGF0ZXN0LlxuICAgICAgICBpbmRleE5ldyA9IGRlbHRhID4gMCA/IE1hdGguZmxvb3IoaW5kZXhDdXJyZW50KSA6IE1hdGguY2VpbChpbmRleEN1cnJlbnQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaW5kZXhOZXcgPSBpbmRleExhdGVzdDtcbiAgICAgIH1cblxuICAgICAgdmFyIGluZGV4TWF4ID0gX3JlYWN0LmRlZmF1bHQuQ2hpbGRyZW4uY291bnQoX3RoaXMucHJvcHMuY2hpbGRyZW4pIC0gMTtcblxuICAgICAgaWYgKGluZGV4TmV3IDwgMCkge1xuICAgICAgICBpbmRleE5ldyA9IDA7XG4gICAgICB9IGVsc2UgaWYgKGluZGV4TmV3ID4gaW5kZXhNYXgpIHtcbiAgICAgICAgaW5kZXhOZXcgPSBpbmRleE1heDtcbiAgICAgIH1cblxuICAgICAgX3RoaXMuc2V0SW5kZXhDdXJyZW50KGluZGV4TmV3KTtcblxuICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICBpbmRleExhdGVzdDogaW5kZXhOZXcsXG4gICAgICAgIGlzRHJhZ2dpbmc6IGZhbHNlXG4gICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChfdGhpcy5wcm9wcy5vblN3aXRjaGluZykge1xuICAgICAgICAgIF90aGlzLnByb3BzLm9uU3dpdGNoaW5nKGluZGV4TmV3LCAnZW5kJyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoX3RoaXMucHJvcHMub25DaGFuZ2VJbmRleCAmJiBpbmRleE5ldyAhPT0gaW5kZXhMYXRlc3QpIHtcbiAgICAgICAgICBfdGhpcy5wcm9wcy5vbkNoYW5nZUluZGV4KGluZGV4TmV3LCBpbmRleExhdGVzdCwge1xuICAgICAgICAgICAgcmVhc29uOiAnc3dpcGUnXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gLy8gTWFudWFsbHkgY2FsbGluZyBoYW5kbGVUcmFuc2l0aW9uRW5kIGluIHRoYXQgY2FzZSBhcyBpc24ndCBvdGhlcndpc2UuXG5cblxuICAgICAgICBpZiAoaW5kZXhDdXJyZW50ID09PSBpbmRleExhdGVzdCkge1xuICAgICAgICAgIF90aGlzLmhhbmRsZVRyYW5zaXRpb25FbmQoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZVRvdWNoU3RhcnQgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGlmIChfdGhpcy5wcm9wcy5vblRvdWNoU3RhcnQpIHtcbiAgICAgICAgX3RoaXMucHJvcHMub25Ub3VjaFN0YXJ0KGV2ZW50KTtcbiAgICAgIH1cblxuICAgICAgX3RoaXMuaGFuZGxlU3dpcGVTdGFydChldmVudCk7XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZVRvdWNoRW5kID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBpZiAoX3RoaXMucHJvcHMub25Ub3VjaEVuZCkge1xuICAgICAgICBfdGhpcy5wcm9wcy5vblRvdWNoRW5kKGV2ZW50KTtcbiAgICAgIH1cblxuICAgICAgX3RoaXMuaGFuZGxlU3dpcGVFbmQoZXZlbnQpO1xuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVNb3VzZURvd24gPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGlmIChfdGhpcy5wcm9wcy5vbk1vdXNlRG93bikge1xuICAgICAgICBfdGhpcy5wcm9wcy5vbk1vdXNlRG93bihldmVudCk7XG4gICAgICB9XG5cbiAgICAgIGV2ZW50LnBlcnNpc3QoKTtcblxuICAgICAgX3RoaXMuaGFuZGxlU3dpcGVTdGFydChhZGFwdE1vdXNlKGV2ZW50KSk7XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZU1vdXNlVXAgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGlmIChfdGhpcy5wcm9wcy5vbk1vdXNlVXApIHtcbiAgICAgICAgX3RoaXMucHJvcHMub25Nb3VzZVVwKGV2ZW50KTtcbiAgICAgIH1cblxuICAgICAgX3RoaXMuaGFuZGxlU3dpcGVFbmQoYWRhcHRNb3VzZShldmVudCkpO1xuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVNb3VzZUxlYXZlID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBpZiAoX3RoaXMucHJvcHMub25Nb3VzZUxlYXZlKSB7XG4gICAgICAgIF90aGlzLnByb3BzLm9uTW91c2VMZWF2ZShldmVudCk7XG4gICAgICB9IC8vIEZpbHRlciBvdXQgZXZlbnRzXG5cblxuICAgICAgaWYgKF90aGlzLnN0YXJ0ZWQpIHtcbiAgICAgICAgX3RoaXMuaGFuZGxlU3dpcGVFbmQoYWRhcHRNb3VzZShldmVudCkpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVNb3VzZU1vdmUgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGlmIChfdGhpcy5wcm9wcy5vbk1vdXNlTW92ZSkge1xuICAgICAgICBfdGhpcy5wcm9wcy5vbk1vdXNlTW92ZShldmVudCk7XG4gICAgICB9IC8vIEZpbHRlciBvdXQgZXZlbnRzXG5cblxuICAgICAgaWYgKF90aGlzLnN0YXJ0ZWQpIHtcbiAgICAgICAgX3RoaXMuaGFuZGxlU3dpcGVNb3ZlKGFkYXB0TW91c2UoZXZlbnQpKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlU2Nyb2xsID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBpZiAoX3RoaXMucHJvcHMub25TY3JvbGwpIHtcbiAgICAgICAgX3RoaXMucHJvcHMub25TY3JvbGwoZXZlbnQpO1xuICAgICAgfSAvLyBJZ25vcmUgZXZlbnRzIGJ1YmJsaW5nIHVwLlxuXG5cbiAgICAgIGlmIChldmVudC50YXJnZXQgIT09IF90aGlzLnJvb3ROb2RlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKF90aGlzLmlnbm9yZU5leHRTY3JvbGxFdmVudHMpIHtcbiAgICAgICAgX3RoaXMuaWdub3JlTmV4dFNjcm9sbEV2ZW50cyA9IGZhbHNlO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBpbmRleExhdGVzdCA9IF90aGlzLnN0YXRlLmluZGV4TGF0ZXN0O1xuICAgICAgdmFyIGluZGV4TmV3ID0gTWF0aC5jZWlsKGV2ZW50LnRhcmdldC5zY3JvbGxMZWZ0IC8gZXZlbnQudGFyZ2V0LmNsaWVudFdpZHRoKSArIGluZGV4TGF0ZXN0O1xuICAgICAgX3RoaXMuaWdub3JlTmV4dFNjcm9sbEV2ZW50cyA9IHRydWU7IC8vIFJlc2V0IHRoZSBzY3JvbGwgcG9zaXRpb24uXG5cbiAgICAgIGV2ZW50LnRhcmdldC5zY3JvbGxMZWZ0ID0gMDtcblxuICAgICAgaWYgKF90aGlzLnByb3BzLm9uQ2hhbmdlSW5kZXggJiYgaW5kZXhOZXcgIT09IGluZGV4TGF0ZXN0KSB7XG4gICAgICAgIF90aGlzLnByb3BzLm9uQ2hhbmdlSW5kZXgoaW5kZXhOZXcsIGluZGV4TGF0ZXN0LCB7XG4gICAgICAgICAgcmVhc29uOiAnZm9jdXMnXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfdGhpcy51cGRhdGVIZWlnaHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoX3RoaXMuYWN0aXZlU2xpZGUgIT09IG51bGwpIHtcbiAgICAgICAgdmFyIGNoaWxkID0gX3RoaXMuYWN0aXZlU2xpZGUuY2hpbGRyZW5bMF07XG5cbiAgICAgICAgaWYgKGNoaWxkICE9PSB1bmRlZmluZWQgJiYgY2hpbGQub2Zmc2V0SGVpZ2h0ICE9PSB1bmRlZmluZWQgJiYgX3RoaXMuc3RhdGUuaGVpZ2h0TGF0ZXN0ICE9PSBjaGlsZC5vZmZzZXRIZWlnaHQpIHtcbiAgICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBoZWlnaHRMYXRlc3Q6IGNoaWxkLm9mZnNldEhlaWdodFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAoMCwgX3JlYWN0U3dpcGVhYmxlVmlld3NDb3JlLmNoZWNrSW5kZXhCb3VuZHMpKF90aGlzLnByb3BzKTtcbiAgICB9XG5cbiAgICBfdGhpcy5zZXRJbmRleEN1cnJlbnQoX3RoaXMucHJvcHMuaW5kZXgpO1xuXG4gICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICBpbmRleExhdGVzdDogX3RoaXMucHJvcHMuaW5kZXgsXG4gICAgICAvLyBTZXQgdG8gdHJ1ZSBhcyBzb29uIGFzIHRoZSBjb21wb25lbnQgaXMgc3dpcGluZy5cbiAgICAgIC8vIEl0J3MgdGhlIHN0YXRlIGNvdW50ZXIgcGFydCBvZiB0aGlzLmlzU3dpcGluZy5cbiAgICAgIGlzRHJhZ2dpbmc6IGZhbHNlLFxuICAgICAgLy8gSGVscCB3aXRoIFNTUiBsb2dpYyBhbmQgbGF6eSBsb2FkaW5nIGxvZ2ljLlxuICAgICAgaXNGaXJzdFJlbmRlcjogdHJ1ZSxcbiAgICAgIGhlaWdodExhdGVzdDogMCxcbiAgICAgIC8vIExldCB0aGUgcmVuZGVyIG1ldGhvZCB0aGF0IHdlIGFyZSBnb2luZyB0byBkaXNwbGF5IHRoZSBzYW1lIHNsaWRlIHRoYW4gcHJldmlvdXNseS5cbiAgICAgIGRpc3BsYXlTYW1lU2xpZGU6IHRydWVcbiAgICB9O1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gICgwLCBfY3JlYXRlQ2xhc3MyLmRlZmF1bHQpKFN3aXBlYWJsZVZpZXdzLCBbe1xuICAgIGtleTogXCJnZXRDaGlsZENvbnRleHRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0Q2hpbGRDb250ZXh0KCkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIHN3aXBlYWJsZVZpZXdzOiB7XG4gICAgICAgICAgc2xpZGVVcGRhdGVIZWlnaHQ6IGZ1bmN0aW9uIHNsaWRlVXBkYXRlSGVpZ2h0KCkge1xuICAgICAgICAgICAgX3RoaXMyLnVwZGF0ZUhlaWdodCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY29tcG9uZW50RGlkTW91bnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgICAgLy8gU3Vic2NyaWJlIHRvIHRyYW5zaXRpb24gZW5kIGV2ZW50cy5cbiAgICAgIHRoaXMudHJhbnNpdGlvbkxpc3RlbmVyID0gYWRkRXZlbnRMaXN0ZW5lckVuaGFuY2VkKHRoaXMuY29udGFpbmVyTm9kZSwgX3Byb3BlcnRpZXMuZGVmYXVsdC5lbmQsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICBpZiAoZXZlbnQudGFyZ2V0ICE9PSBfdGhpczMuY29udGFpbmVyTm9kZSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIF90aGlzMy5oYW5kbGVUcmFuc2l0aW9uRW5kKCk7XG4gICAgICB9KTsgLy8gQmxvY2sgdGhlIHRocmVhZCB0byBoYW5kbGUgdGhhdCBldmVudC5cblxuICAgICAgdGhpcy50b3VjaE1vdmVMaXN0ZW5lciA9IGFkZEV2ZW50TGlzdGVuZXJFbmhhbmNlZCh0aGlzLnJvb3ROb2RlLCAndG91Y2htb3ZlJywgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIC8vIEhhbmRsaW5nIHRvdWNoIGV2ZW50cyBpcyBkaXNhYmxlZC5cbiAgICAgICAgaWYgKF90aGlzMy5wcm9wcy5kaXNhYmxlZCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIF90aGlzMy5oYW5kbGVTd2lwZU1vdmUoZXZlbnQpO1xuICAgICAgfSwge1xuICAgICAgICBwYXNzaXZlOiBmYWxzZVxuICAgICAgfSk7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC9uby1kaWQtbW91bnQtc2V0LXN0YXRlXG5cbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBpc0ZpcnN0UmVuZGVyOiBmYWxzZVxuICAgICAgfSk7XG4gICAgICBpbmplY3RTdHlsZSgpOyAvLyBTZW5kIGFsbCBmdW5jdGlvbnMgaW4gYW4gb2JqZWN0IGlmIGFjdGlvbiBwYXJhbSBpcyBzZXQuXG5cbiAgICAgIGlmICh0aGlzLnByb3BzLmFjdGlvbikge1xuICAgICAgICB0aGlzLnByb3BzLmFjdGlvbih7XG4gICAgICAgICAgdXBkYXRlSGVpZ2h0OiB0aGlzLnVwZGF0ZUhlaWdodFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgICAgdmFyIGluZGV4ID0gbmV4dFByb3BzLmluZGV4O1xuXG4gICAgICBpZiAodHlwZW9mIGluZGV4ID09PSAnbnVtYmVyJyAmJiBpbmRleCAhPT0gdGhpcy5wcm9wcy5pbmRleCkge1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgICgwLCBfcmVhY3RTd2lwZWFibGVWaWV3c0NvcmUuY2hlY2tJbmRleEJvdW5kcykobmV4dFByb3BzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuc2V0SW5kZXhDdXJyZW50KGluZGV4KTtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgLy8gSWYgdHJ1ZSwgd2UgYXJlIGdvaW5nIHRvIGNoYW5nZSB0aGUgY2hpbGRyZW4uIFdlIHNob3Vkbid0IGFuaW1hdGUgaXQuXG4gICAgICAgICAgZGlzcGxheVNhbWVTbGlkZTogKDAsIF9yZWFjdFN3aXBlYWJsZVZpZXdzQ29yZS5nZXREaXNwbGF5U2FtZVNsaWRlKSh0aGlzLnByb3BzLCBuZXh0UHJvcHMpLFxuICAgICAgICAgIGluZGV4TGF0ZXN0OiBpbmRleFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY29tcG9uZW50V2lsbFVubW91bnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICB0aGlzLnRyYW5zaXRpb25MaXN0ZW5lci5yZW1vdmUoKTtcbiAgICAgIHRoaXMudG91Y2hNb3ZlTGlzdGVuZXIucmVtb3ZlKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInNldEluZGV4Q3VycmVudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRJbmRleEN1cnJlbnQoaW5kZXhDdXJyZW50KSB7XG4gICAgICBpZiAoIXRoaXMucHJvcHMuYW5pbWF0ZVRyYW5zaXRpb25zICYmIHRoaXMuaW5kZXhDdXJyZW50ICE9PSBpbmRleEN1cnJlbnQpIHtcbiAgICAgICAgdGhpcy5oYW5kbGVUcmFuc2l0aW9uRW5kKCk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuaW5kZXhDdXJyZW50ID0gaW5kZXhDdXJyZW50O1xuXG4gICAgICBpZiAodGhpcy5jb250YWluZXJOb2RlKSB7XG4gICAgICAgIHZhciBheGlzID0gdGhpcy5wcm9wcy5heGlzO1xuICAgICAgICB2YXIgdHJhbnNmb3JtID0gYXhpc1Byb3BlcnRpZXMudHJhbnNmb3JtW2F4aXNdKGluZGV4Q3VycmVudCAqIDEwMCk7XG4gICAgICAgIHRoaXMuY29udGFpbmVyTm9kZS5zdHlsZS5XZWJraXRUcmFuc2Zvcm0gPSB0cmFuc2Zvcm07XG4gICAgICAgIHRoaXMuY29udGFpbmVyTm9kZS5zdHlsZS50cmFuc2Zvcm0gPSB0cmFuc2Zvcm07XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImhhbmRsZVRyYW5zaXRpb25FbmRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gaGFuZGxlVHJhbnNpdGlvbkVuZCgpIHtcbiAgICAgIGlmICghdGhpcy5wcm9wcy5vblRyYW5zaXRpb25FbmQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSAvLyBGaWx0ZXJzIG91dCB3aGVuIGNoYW5naW5nIHRoZSBjaGlsZHJlblxuXG5cbiAgICAgIGlmICh0aGlzLnN0YXRlLmRpc3BsYXlTYW1lU2xpZGUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSAvLyBUaGUgcmVzdCBjYWxsYmFjayBpcyB0cmlnZ2VyZWQgd2hlbiBzd2lwaW5nLiBJdCdzIGp1c3Qgbm9pc2UuXG4gICAgICAvLyBXZSBmaWx0ZXIgaXQgb3V0LlxuXG5cbiAgICAgIGlmICghdGhpcy5zdGF0ZS5pc0RyYWdnaW5nKSB7XG4gICAgICAgIHRoaXMucHJvcHMub25UcmFuc2l0aW9uRW5kKCk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX3RoaXM0ID0gdGhpcztcblxuICAgICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgYWN0aW9uID0gX3Byb3BzLmFjdGlvbixcbiAgICAgICAgICBhbmltYXRlSGVpZ2h0ID0gX3Byb3BzLmFuaW1hdGVIZWlnaHQsXG4gICAgICAgICAgYW5pbWF0ZVRyYW5zaXRpb25zID0gX3Byb3BzLmFuaW1hdGVUcmFuc2l0aW9ucyxcbiAgICAgICAgICBheGlzID0gX3Byb3BzLmF4aXMsXG4gICAgICAgICAgY2hpbGRyZW4gPSBfcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgICAgY29udGFpbmVyU3R5bGVQcm9wID0gX3Byb3BzLmNvbnRhaW5lclN0eWxlLFxuICAgICAgICAgIGRpc2FibGVkID0gX3Byb3BzLmRpc2FibGVkLFxuICAgICAgICAgIGRpc2FibGVMYXp5TG9hZGluZyA9IF9wcm9wcy5kaXNhYmxlTGF6eUxvYWRpbmcsXG4gICAgICAgICAgZW5hYmxlTW91c2VFdmVudHMgPSBfcHJvcHMuZW5hYmxlTW91c2VFdmVudHMsXG4gICAgICAgICAgaHlzdGVyZXNpcyA9IF9wcm9wcy5oeXN0ZXJlc2lzLFxuICAgICAgICAgIGlnbm9yZU5hdGl2ZVNjcm9sbCA9IF9wcm9wcy5pZ25vcmVOYXRpdmVTY3JvbGwsXG4gICAgICAgICAgaW5kZXggPSBfcHJvcHMuaW5kZXgsXG4gICAgICAgICAgb25DaGFuZ2VJbmRleCA9IF9wcm9wcy5vbkNoYW5nZUluZGV4LFxuICAgICAgICAgIG9uU3dpdGNoaW5nID0gX3Byb3BzLm9uU3dpdGNoaW5nLFxuICAgICAgICAgIG9uVHJhbnNpdGlvbkVuZCA9IF9wcm9wcy5vblRyYW5zaXRpb25FbmQsXG4gICAgICAgICAgcmVzaXN0YW5jZSA9IF9wcm9wcy5yZXNpc3RhbmNlLFxuICAgICAgICAgIHNsaWRlU3R5bGVQcm9wID0gX3Byb3BzLnNsaWRlU3R5bGUsXG4gICAgICAgICAgc2xpZGVDbGFzc05hbWUgPSBfcHJvcHMuc2xpZGVDbGFzc05hbWUsXG4gICAgICAgICAgc3ByaW5nQ29uZmlnID0gX3Byb3BzLnNwcmluZ0NvbmZpZyxcbiAgICAgICAgICBzdHlsZSA9IF9wcm9wcy5zdHlsZSxcbiAgICAgICAgICB0aHJlc2hvbGQgPSBfcHJvcHMudGhyZXNob2xkLFxuICAgICAgICAgIG90aGVyID0gKDAsIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIuZGVmYXVsdCkoX3Byb3BzLCBbXCJhY3Rpb25cIiwgXCJhbmltYXRlSGVpZ2h0XCIsIFwiYW5pbWF0ZVRyYW5zaXRpb25zXCIsIFwiYXhpc1wiLCBcImNoaWxkcmVuXCIsIFwiY29udGFpbmVyU3R5bGVcIiwgXCJkaXNhYmxlZFwiLCBcImRpc2FibGVMYXp5TG9hZGluZ1wiLCBcImVuYWJsZU1vdXNlRXZlbnRzXCIsIFwiaHlzdGVyZXNpc1wiLCBcImlnbm9yZU5hdGl2ZVNjcm9sbFwiLCBcImluZGV4XCIsIFwib25DaGFuZ2VJbmRleFwiLCBcIm9uU3dpdGNoaW5nXCIsIFwib25UcmFuc2l0aW9uRW5kXCIsIFwicmVzaXN0YW5jZVwiLCBcInNsaWRlU3R5bGVcIiwgXCJzbGlkZUNsYXNzTmFtZVwiLCBcInNwcmluZ0NvbmZpZ1wiLCBcInN0eWxlXCIsIFwidGhyZXNob2xkXCJdKTtcbiAgICAgIHZhciBfc3RhdGUgPSB0aGlzLnN0YXRlLFxuICAgICAgICAgIGRpc3BsYXlTYW1lU2xpZGUgPSBfc3RhdGUuZGlzcGxheVNhbWVTbGlkZSxcbiAgICAgICAgICBoZWlnaHRMYXRlc3QgPSBfc3RhdGUuaGVpZ2h0TGF0ZXN0LFxuICAgICAgICAgIGlzRHJhZ2dpbmcgPSBfc3RhdGUuaXNEcmFnZ2luZyxcbiAgICAgICAgICBpc0ZpcnN0UmVuZGVyID0gX3N0YXRlLmlzRmlyc3RSZW5kZXIsXG4gICAgICAgICAgaW5kZXhMYXRlc3QgPSBfc3RhdGUuaW5kZXhMYXRlc3Q7XG4gICAgICB2YXIgdG91Y2hFdmVudHMgPSAhZGlzYWJsZWQgPyB7XG4gICAgICAgIG9uVG91Y2hTdGFydDogdGhpcy5oYW5kbGVUb3VjaFN0YXJ0LFxuICAgICAgICBvblRvdWNoRW5kOiB0aGlzLmhhbmRsZVRvdWNoRW5kXG4gICAgICB9IDoge307XG4gICAgICB2YXIgbW91c2VFdmVudHMgPSAhZGlzYWJsZWQgJiYgZW5hYmxlTW91c2VFdmVudHMgPyB7XG4gICAgICAgIG9uTW91c2VEb3duOiB0aGlzLmhhbmRsZU1vdXNlRG93bixcbiAgICAgICAgb25Nb3VzZVVwOiB0aGlzLmhhbmRsZU1vdXNlVXAsXG4gICAgICAgIG9uTW91c2VMZWF2ZTogdGhpcy5oYW5kbGVNb3VzZUxlYXZlLFxuICAgICAgICBvbk1vdXNlTW92ZTogdGhpcy5oYW5kbGVNb3VzZU1vdmVcbiAgICAgIH0gOiB7fTsgLy8gVGhlcmUgaXMgbm8gcG9pbnQgdG8gYW5pbWF0ZSBpZiB3ZSBhcmUgYWxyZWFkeSBwcm92aWRpbmcgYSBoZWlnaHQuXG5cbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/ICgwLCBfd2FybmluZy5kZWZhdWx0KSghYW5pbWF0ZUhlaWdodCB8fCAhY29udGFpbmVyU3R5bGVQcm9wIHx8ICFjb250YWluZXJTdHlsZVByb3AuaGVpZ2h0LCBcInJlYWN0LXN3aXBlYWJsZS12aWV3OiBZb3UgYXJlIHNldHRpbmcgYW5pbWF0ZUhlaWdodCB0byB0cnVlIGJ1dCB5b3UgYXJlXFxuYWxzbyBwcm92aWRpbmcgYSBjdXN0b20gaGVpZ2h0LlxcblRoZSBjdXN0b20gaGVpZ2h0IGhhcyBhIGhpZ2hlciBwcmlvcml0eSB0aGFuIHRoZSBhbmltYXRlSGVpZ2h0IHByb3BlcnR5LlxcblNvIGFuaW1hdGVIZWlnaHQgaXMgbW9zdCBsaWtlbHkgaGF2aW5nIG5vIGVmZmVjdCBhdCBhbGwuXCIpIDogdm9pZCAwO1xuICAgICAgdmFyIHNsaWRlU3R5bGUgPSAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHt9LCBzdHlsZXMuc2xpZGUsIHNsaWRlU3R5bGVQcm9wKTtcbiAgICAgIHZhciB0cmFuc2l0aW9uO1xuICAgICAgdmFyIFdlYmtpdFRyYW5zaXRpb247XG5cbiAgICAgIGlmIChpc0RyYWdnaW5nIHx8ICFhbmltYXRlVHJhbnNpdGlvbnMgfHwgZGlzcGxheVNhbWVTbGlkZSkge1xuICAgICAgICB0cmFuc2l0aW9uID0gJ2FsbCAwcyBlYXNlIDBzJztcbiAgICAgICAgV2Via2l0VHJhbnNpdGlvbiA9ICdhbGwgMHMgZWFzZSAwcyc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0cmFuc2l0aW9uID0gY3JlYXRlVHJhbnNpdGlvbigndHJhbnNmb3JtJywgc3ByaW5nQ29uZmlnKTtcbiAgICAgICAgV2Via2l0VHJhbnNpdGlvbiA9IGNyZWF0ZVRyYW5zaXRpb24oJy13ZWJraXQtdHJhbnNmb3JtJywgc3ByaW5nQ29uZmlnKTtcblxuICAgICAgICBpZiAoaGVpZ2h0TGF0ZXN0ICE9PSAwKSB7XG4gICAgICAgICAgdmFyIGFkZGl0aW9uYWxUcmFuc3Rpb24gPSBcIiwgXCIuY29uY2F0KGNyZWF0ZVRyYW5zaXRpb24oJ2hlaWdodCcsIHNwcmluZ0NvbmZpZykpO1xuICAgICAgICAgIHRyYW5zaXRpb24gKz0gYWRkaXRpb25hbFRyYW5zdGlvbjtcbiAgICAgICAgICBXZWJraXRUcmFuc2l0aW9uICs9IGFkZGl0aW9uYWxUcmFuc3Rpb247XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdmFyIGNvbnRhaW5lclN0eWxlID0ge1xuICAgICAgICBoZWlnaHQ6IG51bGwsXG4gICAgICAgIFdlYmtpdEZsZXhEaXJlY3Rpb246IGF4aXNQcm9wZXJ0aWVzLmZsZXhEaXJlY3Rpb25bYXhpc10sXG4gICAgICAgIGZsZXhEaXJlY3Rpb246IGF4aXNQcm9wZXJ0aWVzLmZsZXhEaXJlY3Rpb25bYXhpc10sXG4gICAgICAgIFdlYmtpdFRyYW5zaXRpb246IFdlYmtpdFRyYW5zaXRpb24sXG4gICAgICAgIHRyYW5zaXRpb246IHRyYW5zaXRpb25cbiAgICAgIH07IC8vIEFwcGx5IHRoZSBzdHlsZXMgZm9yIFNTUiBjb25zaWRlcmF0aW9uc1xuXG4gICAgICBpZiAoZGlzYWJsZUxhenlMb2FkaW5nIHx8ICFpc0ZpcnN0UmVuZGVyKSB7XG4gICAgICAgIHZhciB0cmFuc2Zvcm0gPSBheGlzUHJvcGVydGllcy50cmFuc2Zvcm1bYXhpc10odGhpcy5pbmRleEN1cnJlbnQgKiAxMDApO1xuICAgICAgICBjb250YWluZXJTdHlsZS5XZWJraXRUcmFuc2Zvcm0gPSB0cmFuc2Zvcm07XG4gICAgICAgIGNvbnRhaW5lclN0eWxlLnRyYW5zZm9ybSA9IHRyYW5zZm9ybTtcbiAgICAgIH1cblxuICAgICAgaWYgKGFuaW1hdGVIZWlnaHQpIHtcbiAgICAgICAgY29udGFpbmVyU3R5bGUuaGVpZ2h0ID0gaGVpZ2h0TGF0ZXN0O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImRpdlwiLCAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHtcbiAgICAgICAgcmVmOiBmdW5jdGlvbiByZWYobm9kZSkge1xuICAgICAgICAgIF90aGlzNC5yb290Tm9kZSA9IG5vZGU7XG4gICAgICAgIH0sXG4gICAgICAgIHN0eWxlOiAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHt9LCBheGlzUHJvcGVydGllcy5yb290W2F4aXNdLCBzdHlsZSlcbiAgICAgIH0sIG90aGVyLCB0b3VjaEV2ZW50cywgbW91c2VFdmVudHMsIHtcbiAgICAgICAgb25TY3JvbGw6IHRoaXMuaGFuZGxlU2Nyb2xsXG4gICAgICB9KSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICAgIHJlZjogZnVuY3Rpb24gcmVmKG5vZGUpIHtcbiAgICAgICAgICBfdGhpczQuY29udGFpbmVyTm9kZSA9IG5vZGU7XG4gICAgICAgIH0sXG4gICAgICAgIHN0eWxlOiAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHt9LCBjb250YWluZXJTdHlsZSwgc3R5bGVzLmNvbnRhaW5lciwgY29udGFpbmVyU3R5bGVQcm9wKSxcbiAgICAgICAgY2xhc3NOYW1lOiBcInJlYWN0LXN3aXBlYWJsZS12aWV3LWNvbnRhaW5lclwiXG4gICAgICB9LCBfcmVhY3QuZGVmYXVsdC5DaGlsZHJlbi5tYXAoY2hpbGRyZW4sIGZ1bmN0aW9uIChjaGlsZCwgaW5kZXhDaGlsZCkge1xuICAgICAgICBpZiAoIWRpc2FibGVMYXp5TG9hZGluZyAmJiBpc0ZpcnN0UmVuZGVyICYmIGluZGV4Q2hpbGQgIT09IGluZGV4TGF0ZXN0KSB7XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyAoMCwgX3dhcm5pbmcuZGVmYXVsdCkoX3JlYWN0LmRlZmF1bHQuaXNWYWxpZEVsZW1lbnQoY2hpbGQpLCBcInJlYWN0LXN3aXBlYWJsZS12aWV3OiBvbmUgb2YgdGhlIGNoaWxkcmVuIHByb3ZpZGVkIGlzIGludmFsaWQ6IFwiLmNvbmNhdChjaGlsZCwgXCIuXFxuV2UgYXJlIGV4cGVjdGluZyBhIHZhbGlkIFJlYWN0IEVsZW1lbnRcIikpIDogdm9pZCAwO1xuICAgICAgICB2YXIgcmVmO1xuICAgICAgICB2YXIgaGlkZGVuID0gdHJ1ZTtcblxuICAgICAgICBpZiAoaW5kZXhDaGlsZCA9PT0gaW5kZXhMYXRlc3QpIHtcbiAgICAgICAgICBoaWRkZW4gPSBmYWxzZTtcblxuICAgICAgICAgIGlmIChhbmltYXRlSGVpZ2h0KSB7XG4gICAgICAgICAgICByZWYgPSBmdW5jdGlvbiByZWYobm9kZSkge1xuICAgICAgICAgICAgICBfdGhpczQuYWN0aXZlU2xpZGUgPSBub2RlO1xuXG4gICAgICAgICAgICAgIF90aGlzNC51cGRhdGVIZWlnaHQoKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHNsaWRlU3R5bGUub3ZlcmZsb3dZID0gJ2hpZGRlbic7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgICAgIHJlZjogcmVmLFxuICAgICAgICAgIHN0eWxlOiBzbGlkZVN0eWxlLFxuICAgICAgICAgIGNsYXNzTmFtZTogc2xpZGVDbGFzc05hbWUsXG4gICAgICAgICAgXCJhcmlhLWhpZGRlblwiOiBoaWRkZW4sXG4gICAgICAgICAgXCJkYXRhLXN3aXBlYWJsZVwiOiBcInRydWVcIlxuICAgICAgICB9LCBjaGlsZCk7XG4gICAgICB9KSkpO1xuICAgIH1cbiAgfV0pO1xuICByZXR1cm4gU3dpcGVhYmxlVmlld3M7XG59KF9yZWFjdC5kZWZhdWx0LkNvbXBvbmVudCk7IC8vIEFkZGVkIGFzIGFuIGFkcyBmb3IgcGVvcGxlIHVzaW5nIHRoZSBSZWFjdCBkZXYgdG9vbHMgaW4gcHJvZHVjdGlvbi5cbi8vIFNvIHRoZXkga25vdywgdGhlIHRvb2wgdXNlZCB0byBidWlsZCB0aGUgYXdlc29tZSBVSSB0aGV5XG4vLyBhcmUgbG9va2luZyBhdC9yZXRybyBlbmdpbmVlcmluZy5cblxuXG5Td2lwZWFibGVWaWV3cy5kaXNwbGF5TmFtZSA9ICdSZWFjdFN3aXBhYmxlVmlldyc7XG5Td2lwZWFibGVWaWV3cy5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIC8qKlxuICAgKiBUaGlzIGlzIGNhbGxiYWNrIHByb3BlcnR5LiBJdCdzIGNhbGxlZCBieSB0aGUgY29tcG9uZW50IG9uIG1vdW50LlxuICAgKiBUaGlzIGlzIHVzZWZ1bCB3aGVuIHlvdSB3YW50IHRvIHRyaWdnZXIgYW4gYWN0aW9uIHByb2dyYW1tYXRpY2FsbHkuXG4gICAqIEl0IGN1cnJlbnRseSBvbmx5IHN1cHBvcnRzIHVwZGF0ZUhlaWdodCgpIGFjdGlvbi5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGFjdGlvbnMgVGhpcyBvYmplY3QgY29udGFpbnMgYWxsIHBvc2libGUgYWN0aW9uc1xuICAgKiB0aGF0IGNhbiBiZSB0cmlnZ2VyZWQgcHJvZ3JhbW1hdGljYWxseS5cbiAgICovXG4gIGFjdGlvbjogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGhlaWdodCBvZiB0aGUgY29udGFpbmVyIHdpbGwgYmUgYW5pbWF0ZWQgdG8gbWF0Y2ggdGhlIGN1cnJlbnQgc2xpZGUgaGVpZ2h0LlxuICAgKiBBbmltYXRpbmcgYW5vdGhlciBzdHlsZSBwcm9wZXJ0eSBoYXMgYSBuZWdhdGl2ZSBpbXBhY3QgcmVnYXJkaW5nIHBlcmZvcm1hbmNlLlxuICAgKi9cbiAgYW5pbWF0ZUhlaWdodDogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGBmYWxzZWAsIGNoYW5nZXMgdG8gdGhlIGluZGV4IHByb3Agd2lsbCBub3QgY2F1c2UgYW4gYW5pbWF0ZWQgdHJhbnNpdGlvbi5cbiAgICovXG4gIGFuaW1hdGVUcmFuc2l0aW9uczogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSBheGlzIG9uIHdoaWNoIHRoZSBzbGlkZXMgd2lsbCBzbGlkZS5cbiAgICovXG4gIGF4aXM6IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZihbJ3gnLCAneC1yZXZlcnNlJywgJ3knLCAneS1yZXZlcnNlJ10pLFxuXG4gIC8qKlxuICAgKiBVc2UgdGhpcyBwcm9wZXJ0eSB0byBwcm92aWRlIHlvdXIgc2xpZGVzLlxuICAgKi9cbiAgY2hpbGRyZW46IF9wcm9wVHlwZXMuZGVmYXVsdC5ub2RlLmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIFRoaXMgaXMgdGhlIGlubGluZWQgc3R5bGUgdGhhdCB3aWxsIGJlIGFwcGxpZWRcbiAgICogdG8gZWFjaCBzbGlkZSBjb250YWluZXIuXG4gICAqL1xuICBjb250YWluZXJTdHlsZTogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCBpdCB3aWxsIGRpc2FibGUgdG91Y2ggZXZlbnRzLlxuICAgKiBUaGlzIGlzIHVzZWZ1bCB3aGVuIHlvdSB3YW50IHRvIHByb2hpYml0IHRoZSB1c2VyIGZyb20gY2hhbmdpbmcgc2xpZGVzLlxuICAgKi9cbiAgZGlzYWJsZWQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGlzIGlzIHRoZSBjb25maWcgdXNlZCB0byBkaXNhYmxlIGxhenlsb2RpbmcsXG4gICAqIGlmIGB0cnVlYCB3aWxsIHJlbmRlciBhbGwgdGhlIHZpZXdzIGluIGZpcnN0IHJlbmRlcmluZy5cbiAgICovXG4gIGRpc2FibGVMYXp5TG9hZGluZzogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgaXQgd2lsbCBlbmFibGUgbW91c2UgZXZlbnRzLlxuICAgKiBUaGlzIHdpbGwgYWxsb3cgdGhlIHVzZXIgdG8gcGVyZm9ybSB0aGUgcmVsZXZhbnQgc3dpcGUgYWN0aW9ucyB3aXRoIGEgbW91c2UuXG4gICAqL1xuICBlbmFibGVNb3VzZUV2ZW50czogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIENvbmZpZ3VyZSBoeXN0ZXJlc2lzIGJldHdlZW4gc2xpZGVzLiBUaGlzIHZhbHVlIGRldGVybWluZXMgaG93IGZhclxuICAgKiBzaG91bGQgdXNlciBzd2lwZSB0byBzd2l0Y2ggc2xpZGUuXG4gICAqL1xuICBoeXN0ZXJlc2lzOiBfcHJvcFR5cGVzLmRlZmF1bHQubnVtYmVyLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIGl0IHdpbGwgaWdub3JlIG5hdGl2ZSBzY3JvbGwgY29udGFpbmVyLlxuICAgKiBJdCBjYW4gYmUgdXNlZCB0byBmaWx0ZXIgb3V0IGZhbHNlIHBvc2l0aXZlIHRoYXQgYmxvY2tzIHRoZSBzd2lwZS5cbiAgICovXG4gIGlnbm9yZU5hdGl2ZVNjcm9sbDogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoaXMgaXMgdGhlIGluZGV4IG9mIHRoZSBzbGlkZSB0byBzaG93LlxuICAgKiBUaGlzIGlzIHVzZWZ1bCB3aGVuIHlvdSB3YW50IHRvIGNoYW5nZSB0aGUgZGVmYXVsdCBzbGlkZSBzaG93bi5cbiAgICogT3Igd2hlbiB5b3UgaGF2ZSB0YWJzIGxpbmtlZCB0byBlYWNoIHNsaWRlLlxuICAgKi9cbiAgaW5kZXg6IF9wcm9wVHlwZXMuZGVmYXVsdC5udW1iZXIsXG5cbiAgLyoqXG4gICAqIFRoaXMgaXMgY2FsbGJhY2sgcHJvcC4gSXQncyBjYWxsIGJ5IHRoZVxuICAgKiBjb21wb25lbnQgd2hlbiB0aGUgc2hvd24gc2xpZGUgY2hhbmdlIGFmdGVyIGEgc3dpcGUgbWFkZSBieSB0aGUgdXNlci5cbiAgICogVGhpcyBpcyB1c2VmdWwgd2hlbiB5b3UgaGF2ZSB0YWJzIGxpbmtlZCB0byBlYWNoIHNsaWRlLlxuICAgKlxuICAgKiBAcGFyYW0ge2ludGVnZXJ9IGluZGV4IFRoaXMgaXMgdGhlIGN1cnJlbnQgaW5kZXggb2YgdGhlIHNsaWRlLlxuICAgKiBAcGFyYW0ge2ludGVnZXJ9IGluZGV4TGF0ZXN0IFRoaXMgaXMgdGhlIG9sZGVzdCBpbmRleCBvZiB0aGUgc2xpZGUuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBtZXRhIE1ldGEgZGF0YSBjb250YWluaW5nIG1vcmUgaW5mb3JtYXRpb24gYWJvdXQgdGhlIGV2ZW50LlxuICAgKi9cbiAgb25DaGFuZ2VJbmRleDogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uTW91c2VEb3duOiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25Nb3VzZUxlYXZlOiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25Nb3VzZU1vdmU6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbk1vdXNlVXA6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvblNjcm9sbDogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIFRoaXMgaXMgY2FsbGJhY2sgcHJvcC4gSXQncyBjYWxsZWQgYnkgdGhlXG4gICAqIGNvbXBvbmVudCB3aGVuIHRoZSBzbGlkZSBzd2l0Y2hpbmcuXG4gICAqIFRoaXMgaXMgdXNlZnVsIHdoZW4geW91IHdhbnQgdG8gaW1wbGVtZW50IHNvbWV0aGluZyBjb3JyZXNwb25kaW5nXG4gICAqIHRvIHRoZSBjdXJyZW50IHNsaWRlIHBvc2l0aW9uLlxuICAgKlxuICAgKiBAcGFyYW0ge2ludGVnZXJ9IGluZGV4IFRoaXMgaXMgdGhlIGN1cnJlbnQgaW5kZXggb2YgdGhlIHNsaWRlLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdHlwZSBDYW4gYmUgZWl0aGVyIGBtb3ZlYCBvciBgZW5kYC5cbiAgICovXG4gIG9uU3dpdGNoaW5nOiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25Ub3VjaEVuZDogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uVG91Y2hNb3ZlOiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25Ub3VjaFN0YXJ0OiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYyxcblxuICAvKipcbiAgICogVGhlIGNhbGxiYWNrIHRoYXQgZmlyZXMgd2hlbiB0aGUgYW5pbWF0aW9uIGNvbWVzIHRvIGEgcmVzdC5cbiAgICogVGhpcyBpcyB1c2VmdWwgdG8gZGVmZXIgQ1BVIGludGVuc2l2ZSB0YXNrLlxuICAgKi9cbiAgb25UcmFuc2l0aW9uRW5kOiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYyxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCBpdCB3aWxsIGFkZCBib3VuZHMgZWZmZWN0IG9uIHRoZSBlZGdlcy5cbiAgICovXG4gIHJlc2lzdGFuY2U6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGlzIGlzIHRoZSBjbGFzc05hbWUgdGhhdCB3aWxsIGJlIGFwcGxpZWRcbiAgICogb24gdGhlIHNsaWRlIGNvbXBvbmVudC5cbiAgICovXG4gIHNsaWRlQ2xhc3NOYW1lOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGlzIGlzIHRoZSBpbmxpbmVkIHN0eWxlIHRoYXQgd2lsbCBiZSBhcHBsaWVkXG4gICAqIG9uIHRoZSBzbGlkZSBjb21wb25lbnQuXG4gICAqL1xuICBzbGlkZVN0eWxlOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBUaGlzIGlzIHRoZSBjb25maWcgdXNlZCB0byBjcmVhdGUgQ1NTIHRyYW5zaXRpb25zLlxuICAgKiBUaGlzIGlzIHVzZWZ1bCB0byBjaGFuZ2UgdGhlIGR5bmFtaWMgb2YgdGhlIHRyYW5zaXRpb24uXG4gICAqL1xuICBzcHJpbmdDb25maWc6IF9wcm9wVHlwZXMuZGVmYXVsdC5zaGFwZSh7XG4gICAgZHVyYXRpb246IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsXG4gICAgZWFzZUZ1bmN0aW9uOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuICAgIGRlbGF5OiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nXG4gIH0pLFxuXG4gIC8qKlxuICAgKiBUaGlzIGlzIHRoZSBpbmxpbmVkIHN0eWxlIHRoYXQgd2lsbCBiZSBhcHBsaWVkXG4gICAqIG9uIHRoZSByb290IGNvbXBvbmVudC5cbiAgICovXG4gIHN0eWxlOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBUaGlzIGlzIHRoZSB0aHJlc2hvbGQgdXNlZCBmb3IgZGV0ZWN0aW5nIGEgcXVpY2sgc3dpcGUuXG4gICAqIElmIHRoZSBjb21wdXRlZCBzcGVlZCBpcyBhYm92ZSB0aGlzIHZhbHVlLCB0aGUgaW5kZXggY2hhbmdlLlxuICAgKi9cbiAgdGhyZXNob2xkOiBfcHJvcFR5cGVzLmRlZmF1bHQubnVtYmVyXG59IDoge307XG5Td2lwZWFibGVWaWV3cy5kZWZhdWx0UHJvcHMgPSB7XG4gIGFuaW1hdGVIZWlnaHQ6IGZhbHNlLFxuICBhbmltYXRlVHJhbnNpdGlvbnM6IHRydWUsXG4gIGF4aXM6ICd4JyxcbiAgZGlzYWJsZWQ6IGZhbHNlLFxuICBkaXNhYmxlTGF6eUxvYWRpbmc6IGZhbHNlLFxuICBlbmFibGVNb3VzZUV2ZW50czogZmFsc2UsXG4gIGh5c3RlcmVzaXM6IDAuNixcbiAgaWdub3JlTmF0aXZlU2Nyb2xsOiBmYWxzZSxcbiAgaW5kZXg6IDAsXG4gIHRocmVzaG9sZDogNSxcbiAgc3ByaW5nQ29uZmlnOiB7XG4gICAgZHVyYXRpb246ICcwLjM1cycsXG4gICAgZWFzZUZ1bmN0aW9uOiAnY3ViaWMtYmV6aWVyKDAuMTUsIDAuMywgMC4yNSwgMSknLFxuICAgIGRlbGF5OiAnMHMnXG4gIH0sXG4gIHJlc2lzdGFuY2U6IGZhbHNlXG59O1xuU3dpcGVhYmxlVmlld3MuY2hpbGRDb250ZXh0VHlwZXMgPSB7XG4gIHN3aXBlYWJsZVZpZXdzOiBfcHJvcFR5cGVzLmRlZmF1bHQuc2hhcGUoe1xuICAgIHNsaWRlVXBkYXRlSGVpZ2h0OiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuY1xuICB9KVxufTtcbnZhciBfZGVmYXVsdCA9IFN3aXBlYWJsZVZpZXdzO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfU3dpcGVhYmxlVmlld3MgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL1N3aXBlYWJsZVZpZXdzXCIpKTtcblxudmFyIF9kZWZhdWx0ID0gX1N3aXBlYWJsZVZpZXdzLmRlZmF1bHQ7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9jcmVhdGVTdmdJY29uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlscy9jcmVhdGVTdmdJY29uXCIpKTtcblxudmFyIF9kZWZhdWx0ID0gKDAsIF9jcmVhdGVTdmdJY29uLmRlZmF1bHQpKF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJnXCIsIG51bGwsIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgZDogXCJNMTguOTIgNi4wMUMxOC43MiA1LjQyIDE4LjE2IDUgMTcuNSA1aC0xMWMtLjY2IDAtMS4yMS40Mi0xLjQyIDEuMDFMMyAxMnY4YzAgLjU1LjQ1IDEgMSAxaDFjLjU1IDAgMS0uNDUgMS0xdi0xaDEydjFjMCAuNTUuNDUgMSAxIDFoMWMuNTUgMCAxLS40NSAxLTF2LThsLTIuMDgtNS45OXpNNi41IDE2Yy0uODMgMC0xLjUtLjY3LTEuNS0xLjVTNS42NyAxMyA2LjUgMTNzMS41LjY3IDEuNSAxLjVTNy4zMyAxNiA2LjUgMTZ6bTExIDBjLS44MyAwLTEuNS0uNjctMS41LTEuNXMuNjctMS41IDEuNS0xLjUgMS41LjY3IDEuNSAxLjUtLjY3IDEuNS0xLjUgMS41ek01IDExbDEuNS00LjVoMTFMMTkgMTFINXpcIlxufSkpLCAnRGlyZWN0aW9uc0NhcicpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgUmVhY3RET00gZnJvbSBcInJlYWN0LWRvbVwiO1xuXG5pbXBvcnQgQnV0dG9uIGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL0J1dHRvbic7XG5cbmNsYXNzIFJlcVJpZGVCdXR0b24gZXh0ZW5kcyBDb21wb25lbnQge1xuICAgIFxuICAgIFxuXG4gICAgcmVuZGVyKCkge1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgIFBsYWNlSG9sZGVyXG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKTtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFJlcVJpZGVCdXR0b247IiwiLyoqXG4gKiBFeHBvc2UgYHJlcXVlc3RBbmltYXRpb25GcmFtZSgpYC5cbiAqL1xuXG5leHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lXG4gIHx8IHdpbmRvdy53ZWJraXRSZXF1ZXN0QW5pbWF0aW9uRnJhbWVcbiAgfHwgd2luZG93Lm1velJlcXVlc3RBbmltYXRpb25GcmFtZVxuICB8fCBmYWxsYmFjaztcblxuLyoqXG4gKiBGYWxsYmFjayBpbXBsZW1lbnRhdGlvbi5cbiAqL1xuXG52YXIgcHJldiA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuZnVuY3Rpb24gZmFsbGJhY2soZm4pIHtcbiAgdmFyIGN1cnIgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgdmFyIG1zID0gTWF0aC5tYXgoMCwgMTYgLSAoY3VyciAtIHByZXYpKTtcbiAgdmFyIHJlcSA9IHNldFRpbWVvdXQoZm4sIG1zKTtcbiAgcHJldiA9IGN1cnI7XG4gIHJldHVybiByZXE7XG59XG5cbi8qKlxuICogQ2FuY2VsLlxuICovXG5cbnZhciBjYW5jZWwgPSB3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWVcbiAgfHwgd2luZG93LndlYmtpdENhbmNlbEFuaW1hdGlvbkZyYW1lXG4gIHx8IHdpbmRvdy5tb3pDYW5jZWxBbmltYXRpb25GcmFtZVxuICB8fCB3aW5kb3cuY2xlYXJUaW1lb3V0O1xuXG5leHBvcnRzLmNhbmNlbCA9IGZ1bmN0aW9uKGlkKXtcbiAgY2FuY2VsLmNhbGwod2luZG93LCBpZCk7XG59O1xuIiwiXG4vLyBlYXNpbmcgZnVuY3Rpb25zIGZyb20gXCJUd2Vlbi5qc1wiXG5cbmV4cG9ydHMubGluZWFyID0gZnVuY3Rpb24obil7XG4gIHJldHVybiBuO1xufTtcblxuZXhwb3J0cy5pblF1YWQgPSBmdW5jdGlvbihuKXtcbiAgcmV0dXJuIG4gKiBuO1xufTtcblxuZXhwb3J0cy5vdXRRdWFkID0gZnVuY3Rpb24obil7XG4gIHJldHVybiBuICogKDIgLSBuKTtcbn07XG5cbmV4cG9ydHMuaW5PdXRRdWFkID0gZnVuY3Rpb24obil7XG4gIG4gKj0gMjtcbiAgaWYgKG4gPCAxKSByZXR1cm4gMC41ICogbiAqIG47XG4gIHJldHVybiAtIDAuNSAqICgtLW4gKiAobiAtIDIpIC0gMSk7XG59O1xuXG5leHBvcnRzLmluQ3ViZSA9IGZ1bmN0aW9uKG4pe1xuICByZXR1cm4gbiAqIG4gKiBuO1xufTtcblxuZXhwb3J0cy5vdXRDdWJlID0gZnVuY3Rpb24obil7XG4gIHJldHVybiAtLW4gKiBuICogbiArIDE7XG59O1xuXG5leHBvcnRzLmluT3V0Q3ViZSA9IGZ1bmN0aW9uKG4pe1xuICBuICo9IDI7XG4gIGlmIChuIDwgMSkgcmV0dXJuIDAuNSAqIG4gKiBuICogbjtcbiAgcmV0dXJuIDAuNSAqICgobiAtPSAyICkgKiBuICogbiArIDIpO1xufTtcblxuZXhwb3J0cy5pblF1YXJ0ID0gZnVuY3Rpb24obil7XG4gIHJldHVybiBuICogbiAqIG4gKiBuO1xufTtcblxuZXhwb3J0cy5vdXRRdWFydCA9IGZ1bmN0aW9uKG4pe1xuICByZXR1cm4gMSAtICgtLW4gKiBuICogbiAqIG4pO1xufTtcblxuZXhwb3J0cy5pbk91dFF1YXJ0ID0gZnVuY3Rpb24obil7XG4gIG4gKj0gMjtcbiAgaWYgKG4gPCAxKSByZXR1cm4gMC41ICogbiAqIG4gKiBuICogbjtcbiAgcmV0dXJuIC0wLjUgKiAoKG4gLT0gMikgKiBuICogbiAqIG4gLSAyKTtcbn07XG5cbmV4cG9ydHMuaW5RdWludCA9IGZ1bmN0aW9uKG4pe1xuICByZXR1cm4gbiAqIG4gKiBuICogbiAqIG47XG59XG5cbmV4cG9ydHMub3V0UXVpbnQgPSBmdW5jdGlvbihuKXtcbiAgcmV0dXJuIC0tbiAqIG4gKiBuICogbiAqIG4gKyAxO1xufVxuXG5leHBvcnRzLmluT3V0UXVpbnQgPSBmdW5jdGlvbihuKXtcbiAgbiAqPSAyO1xuICBpZiAobiA8IDEpIHJldHVybiAwLjUgKiBuICogbiAqIG4gKiBuICogbjtcbiAgcmV0dXJuIDAuNSAqICgobiAtPSAyKSAqIG4gKiBuICogbiAqIG4gKyAyKTtcbn07XG5cbmV4cG9ydHMuaW5TaW5lID0gZnVuY3Rpb24obil7XG4gIHJldHVybiAxIC0gTWF0aC5jb3MobiAqIE1hdGguUEkgLyAyICk7XG59O1xuXG5leHBvcnRzLm91dFNpbmUgPSBmdW5jdGlvbihuKXtcbiAgcmV0dXJuIE1hdGguc2luKG4gKiBNYXRoLlBJIC8gMik7XG59O1xuXG5leHBvcnRzLmluT3V0U2luZSA9IGZ1bmN0aW9uKG4pe1xuICByZXR1cm4gLjUgKiAoMSAtIE1hdGguY29zKE1hdGguUEkgKiBuKSk7XG59O1xuXG5leHBvcnRzLmluRXhwbyA9IGZ1bmN0aW9uKG4pe1xuICByZXR1cm4gMCA9PSBuID8gMCA6IE1hdGgucG93KDEwMjQsIG4gLSAxKTtcbn07XG5cbmV4cG9ydHMub3V0RXhwbyA9IGZ1bmN0aW9uKG4pe1xuICByZXR1cm4gMSA9PSBuID8gbiA6IDEgLSBNYXRoLnBvdygyLCAtMTAgKiBuKTtcbn07XG5cbmV4cG9ydHMuaW5PdXRFeHBvID0gZnVuY3Rpb24obil7XG4gIGlmICgwID09IG4pIHJldHVybiAwO1xuICBpZiAoMSA9PSBuKSByZXR1cm4gMTtcbiAgaWYgKChuICo9IDIpIDwgMSkgcmV0dXJuIC41ICogTWF0aC5wb3coMTAyNCwgbiAtIDEpO1xuICByZXR1cm4gLjUgKiAoLU1hdGgucG93KDIsIC0xMCAqIChuIC0gMSkpICsgMik7XG59O1xuXG5leHBvcnRzLmluQ2lyYyA9IGZ1bmN0aW9uKG4pe1xuICByZXR1cm4gMSAtIE1hdGguc3FydCgxIC0gbiAqIG4pO1xufTtcblxuZXhwb3J0cy5vdXRDaXJjID0gZnVuY3Rpb24obil7XG4gIHJldHVybiBNYXRoLnNxcnQoMSAtICgtLW4gKiBuKSk7XG59O1xuXG5leHBvcnRzLmluT3V0Q2lyYyA9IGZ1bmN0aW9uKG4pe1xuICBuICo9IDJcbiAgaWYgKG4gPCAxKSByZXR1cm4gLTAuNSAqIChNYXRoLnNxcnQoMSAtIG4gKiBuKSAtIDEpO1xuICByZXR1cm4gMC41ICogKE1hdGguc3FydCgxIC0gKG4gLT0gMikgKiBuKSArIDEpO1xufTtcblxuZXhwb3J0cy5pbkJhY2sgPSBmdW5jdGlvbihuKXtcbiAgdmFyIHMgPSAxLjcwMTU4O1xuICByZXR1cm4gbiAqIG4gKiAoKCBzICsgMSApICogbiAtIHMpO1xufTtcblxuZXhwb3J0cy5vdXRCYWNrID0gZnVuY3Rpb24obil7XG4gIHZhciBzID0gMS43MDE1ODtcbiAgcmV0dXJuIC0tbiAqIG4gKiAoKHMgKyAxKSAqIG4gKyBzKSArIDE7XG59O1xuXG5leHBvcnRzLmluT3V0QmFjayA9IGZ1bmN0aW9uKG4pe1xuICB2YXIgcyA9IDEuNzAxNTggKiAxLjUyNTtcbiAgaWYgKCAoIG4gKj0gMiApIDwgMSApIHJldHVybiAwLjUgKiAoIG4gKiBuICogKCAoIHMgKyAxICkgKiBuIC0gcyApICk7XG4gIHJldHVybiAwLjUgKiAoICggbiAtPSAyICkgKiBuICogKCAoIHMgKyAxICkgKiBuICsgcyApICsgMiApO1xufTtcblxuZXhwb3J0cy5pbkJvdW5jZSA9IGZ1bmN0aW9uKG4pe1xuICByZXR1cm4gMSAtIGV4cG9ydHMub3V0Qm91bmNlKDEgLSBuKTtcbn07XG5cbmV4cG9ydHMub3V0Qm91bmNlID0gZnVuY3Rpb24obil7XG4gIGlmICggbiA8ICggMSAvIDIuNzUgKSApIHtcbiAgICByZXR1cm4gNy41NjI1ICogbiAqIG47XG4gIH0gZWxzZSBpZiAoIG4gPCAoIDIgLyAyLjc1ICkgKSB7XG4gICAgcmV0dXJuIDcuNTYyNSAqICggbiAtPSAoIDEuNSAvIDIuNzUgKSApICogbiArIDAuNzU7XG4gIH0gZWxzZSBpZiAoIG4gPCAoIDIuNSAvIDIuNzUgKSApIHtcbiAgICByZXR1cm4gNy41NjI1ICogKCBuIC09ICggMi4yNSAvIDIuNzUgKSApICogbiArIDAuOTM3NTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gNy41NjI1ICogKCBuIC09ICggMi42MjUgLyAyLjc1ICkgKSAqIG4gKyAwLjk4NDM3NTtcbiAgfVxufTtcblxuZXhwb3J0cy5pbk91dEJvdW5jZSA9IGZ1bmN0aW9uKG4pe1xuICBpZiAobiA8IC41KSByZXR1cm4gZXhwb3J0cy5pbkJvdW5jZShuICogMikgKiAuNTtcbiAgcmV0dXJuIGV4cG9ydHMub3V0Qm91bmNlKG4gKiAyIC0gMSkgKiAuNSArIC41O1xufTtcblxuLy8gYWxpYXNlc1xuXG5leHBvcnRzWydpbi1xdWFkJ10gPSBleHBvcnRzLmluUXVhZDtcbmV4cG9ydHNbJ291dC1xdWFkJ10gPSBleHBvcnRzLm91dFF1YWQ7XG5leHBvcnRzWydpbi1vdXQtcXVhZCddID0gZXhwb3J0cy5pbk91dFF1YWQ7XG5leHBvcnRzWydpbi1jdWJlJ10gPSBleHBvcnRzLmluQ3ViZTtcbmV4cG9ydHNbJ291dC1jdWJlJ10gPSBleHBvcnRzLm91dEN1YmU7XG5leHBvcnRzWydpbi1vdXQtY3ViZSddID0gZXhwb3J0cy5pbk91dEN1YmU7XG5leHBvcnRzWydpbi1xdWFydCddID0gZXhwb3J0cy5pblF1YXJ0O1xuZXhwb3J0c1snb3V0LXF1YXJ0J10gPSBleHBvcnRzLm91dFF1YXJ0O1xuZXhwb3J0c1snaW4tb3V0LXF1YXJ0J10gPSBleHBvcnRzLmluT3V0UXVhcnQ7XG5leHBvcnRzWydpbi1xdWludCddID0gZXhwb3J0cy5pblF1aW50O1xuZXhwb3J0c1snb3V0LXF1aW50J10gPSBleHBvcnRzLm91dFF1aW50O1xuZXhwb3J0c1snaW4tb3V0LXF1aW50J10gPSBleHBvcnRzLmluT3V0UXVpbnQ7XG5leHBvcnRzWydpbi1zaW5lJ10gPSBleHBvcnRzLmluU2luZTtcbmV4cG9ydHNbJ291dC1zaW5lJ10gPSBleHBvcnRzLm91dFNpbmU7XG5leHBvcnRzWydpbi1vdXQtc2luZSddID0gZXhwb3J0cy5pbk91dFNpbmU7XG5leHBvcnRzWydpbi1leHBvJ10gPSBleHBvcnRzLmluRXhwbztcbmV4cG9ydHNbJ291dC1leHBvJ10gPSBleHBvcnRzLm91dEV4cG87XG5leHBvcnRzWydpbi1vdXQtZXhwbyddID0gZXhwb3J0cy5pbk91dEV4cG87XG5leHBvcnRzWydpbi1jaXJjJ10gPSBleHBvcnRzLmluQ2lyYztcbmV4cG9ydHNbJ291dC1jaXJjJ10gPSBleHBvcnRzLm91dENpcmM7XG5leHBvcnRzWydpbi1vdXQtY2lyYyddID0gZXhwb3J0cy5pbk91dENpcmM7XG5leHBvcnRzWydpbi1iYWNrJ10gPSBleHBvcnRzLmluQmFjaztcbmV4cG9ydHNbJ291dC1iYWNrJ10gPSBleHBvcnRzLm91dEJhY2s7XG5leHBvcnRzWydpbi1vdXQtYmFjayddID0gZXhwb3J0cy5pbk91dEJhY2s7XG5leHBvcnRzWydpbi1ib3VuY2UnXSA9IGV4cG9ydHMuaW5Cb3VuY2U7XG5leHBvcnRzWydvdXQtYm91bmNlJ10gPSBleHBvcnRzLm91dEJvdW5jZTtcbmV4cG9ydHNbJ2luLW91dC1ib3VuY2UnXSA9IGV4cG9ydHMuaW5PdXRCb3VuY2U7XG4iLCIvKipcbiAqIE1vZHVsZSBkZXBlbmRlbmNpZXMuXG4gKi9cblxudmFyIHR5cGU7XG50cnkge1xuICB0eXBlID0gcmVxdWlyZSgnY29tcG9uZW50LXR5cGUnKTtcbn0gY2F0Y2ggKF8pIHtcbiAgdHlwZSA9IHJlcXVpcmUoJ3R5cGUnKTtcbn1cblxuLyoqXG4gKiBNb2R1bGUgZXhwb3J0cy5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGNsb25lO1xuXG4vKipcbiAqIENsb25lcyBvYmplY3RzLlxuICpcbiAqIEBwYXJhbSB7TWl4ZWR9IGFueSBvYmplY3RcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gY2xvbmUob2JqKXtcbiAgc3dpdGNoICh0eXBlKG9iaikpIHtcbiAgICBjYXNlICdvYmplY3QnOlxuICAgICAgdmFyIGNvcHkgPSB7fTtcbiAgICAgIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICAgICAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgY29weVtrZXldID0gY2xvbmUob2JqW2tleV0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gY29weTtcblxuICAgIGNhc2UgJ2FycmF5JzpcbiAgICAgIHZhciBjb3B5ID0gbmV3IEFycmF5KG9iai5sZW5ndGgpO1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBvYmoubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIGNvcHlbaV0gPSBjbG9uZShvYmpbaV0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNvcHk7XG5cbiAgICBjYXNlICdyZWdleHAnOlxuICAgICAgLy8gZnJvbSBtaWxsZXJtZWRlaXJvcy9hbWQtdXRpbHMgLSBNSVRcbiAgICAgIHZhciBmbGFncyA9ICcnO1xuICAgICAgZmxhZ3MgKz0gb2JqLm11bHRpbGluZSA/ICdtJyA6ICcnO1xuICAgICAgZmxhZ3MgKz0gb2JqLmdsb2JhbCA/ICdnJyA6ICcnO1xuICAgICAgZmxhZ3MgKz0gb2JqLmlnbm9yZUNhc2UgPyAnaScgOiAnJztcbiAgICAgIHJldHVybiBuZXcgUmVnRXhwKG9iai5zb3VyY2UsIGZsYWdzKTtcblxuICAgIGNhc2UgJ2RhdGUnOlxuICAgICAgcmV0dXJuIG5ldyBEYXRlKG9iai5nZXRUaW1lKCkpO1xuXG4gICAgZGVmYXVsdDogLy8gc3RyaW5nLCBudW1iZXIsIGJvb2xlYW4sIOKAplxuICAgICAgcmV0dXJuIG9iajtcbiAgfVxufVxuIiwiXG4vKipcbiAqIEV4cG9zZSBgRW1pdHRlcmAuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBFbWl0dGVyO1xuXG4vKipcbiAqIEluaXRpYWxpemUgYSBuZXcgYEVtaXR0ZXJgLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gRW1pdHRlcihvYmopIHtcbiAgaWYgKG9iaikgcmV0dXJuIG1peGluKG9iaik7XG59O1xuXG4vKipcbiAqIE1peGluIHRoZSBlbWl0dGVyIHByb3BlcnRpZXMuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9ialxuICogQHJldHVybiB7T2JqZWN0fVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gbWl4aW4ob2JqKSB7XG4gIGZvciAodmFyIGtleSBpbiBFbWl0dGVyLnByb3RvdHlwZSkge1xuICAgIG9ialtrZXldID0gRW1pdHRlci5wcm90b3R5cGVba2V5XTtcbiAgfVxuICByZXR1cm4gb2JqO1xufVxuXG4vKipcbiAqIExpc3RlbiBvbiB0aGUgZ2l2ZW4gYGV2ZW50YCB3aXRoIGBmbmAuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50XG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxuICogQHJldHVybiB7RW1pdHRlcn1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuRW1pdHRlci5wcm90b3R5cGUub24gPVxuRW1pdHRlci5wcm90b3R5cGUuYWRkRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uKGV2ZW50LCBmbil7XG4gIHRoaXMuX2NhbGxiYWNrcyA9IHRoaXMuX2NhbGxiYWNrcyB8fCB7fTtcbiAgKHRoaXMuX2NhbGxiYWNrc1snJCcgKyBldmVudF0gPSB0aGlzLl9jYWxsYmFja3NbJyQnICsgZXZlbnRdIHx8IFtdKVxuICAgIC5wdXNoKGZuKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIEFkZHMgYW4gYGV2ZW50YCBsaXN0ZW5lciB0aGF0IHdpbGwgYmUgaW52b2tlZCBhIHNpbmdsZVxuICogdGltZSB0aGVuIGF1dG9tYXRpY2FsbHkgcmVtb3ZlZC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gZXZlbnRcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXG4gKiBAcmV0dXJuIHtFbWl0dGVyfVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5FbWl0dGVyLnByb3RvdHlwZS5vbmNlID0gZnVuY3Rpb24oZXZlbnQsIGZuKXtcbiAgZnVuY3Rpb24gb24oKSB7XG4gICAgdGhpcy5vZmYoZXZlbnQsIG9uKTtcbiAgICBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9XG5cbiAgb24uZm4gPSBmbjtcbiAgdGhpcy5vbihldmVudCwgb24pO1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogUmVtb3ZlIHRoZSBnaXZlbiBjYWxsYmFjayBmb3IgYGV2ZW50YCBvciBhbGxcbiAqIHJlZ2lzdGVyZWQgY2FsbGJhY2tzLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBldmVudFxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cbiAqIEByZXR1cm4ge0VtaXR0ZXJ9XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbkVtaXR0ZXIucHJvdG90eXBlLm9mZiA9XG5FbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lciA9XG5FbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVBbGxMaXN0ZW5lcnMgPVxuRW1pdHRlci5wcm90b3R5cGUucmVtb3ZlRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uKGV2ZW50LCBmbil7XG4gIHRoaXMuX2NhbGxiYWNrcyA9IHRoaXMuX2NhbGxiYWNrcyB8fCB7fTtcblxuICAvLyBhbGxcbiAgaWYgKDAgPT0gYXJndW1lbnRzLmxlbmd0aCkge1xuICAgIHRoaXMuX2NhbGxiYWNrcyA9IHt9O1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLy8gc3BlY2lmaWMgZXZlbnRcbiAgdmFyIGNhbGxiYWNrcyA9IHRoaXMuX2NhbGxiYWNrc1snJCcgKyBldmVudF07XG4gIGlmICghY2FsbGJhY2tzKSByZXR1cm4gdGhpcztcblxuICAvLyByZW1vdmUgYWxsIGhhbmRsZXJzXG4gIGlmICgxID09IGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICBkZWxldGUgdGhpcy5fY2FsbGJhY2tzWyckJyArIGV2ZW50XTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8vIHJlbW92ZSBzcGVjaWZpYyBoYW5kbGVyXG4gIHZhciBjYjtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBjYWxsYmFja3MubGVuZ3RoOyBpKyspIHtcbiAgICBjYiA9IGNhbGxiYWNrc1tpXTtcbiAgICBpZiAoY2IgPT09IGZuIHx8IGNiLmZuID09PSBmbikge1xuICAgICAgY2FsbGJhY2tzLnNwbGljZShpLCAxKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogRW1pdCBgZXZlbnRgIHdpdGggdGhlIGdpdmVuIGFyZ3MuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50XG4gKiBAcGFyYW0ge01peGVkfSAuLi5cbiAqIEByZXR1cm4ge0VtaXR0ZXJ9XG4gKi9cblxuRW1pdHRlci5wcm90b3R5cGUuZW1pdCA9IGZ1bmN0aW9uKGV2ZW50KXtcbiAgdGhpcy5fY2FsbGJhY2tzID0gdGhpcy5fY2FsbGJhY2tzIHx8IHt9O1xuICB2YXIgYXJncyA9IFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKVxuICAgICwgY2FsbGJhY2tzID0gdGhpcy5fY2FsbGJhY2tzWyckJyArIGV2ZW50XTtcblxuICBpZiAoY2FsbGJhY2tzKSB7XG4gICAgY2FsbGJhY2tzID0gY2FsbGJhY2tzLnNsaWNlKDApO1xuICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBjYWxsYmFja3MubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcbiAgICAgIGNhbGxiYWNrc1tpXS5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogUmV0dXJuIGFycmF5IG9mIGNhbGxiYWNrcyBmb3IgYGV2ZW50YC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gZXZlbnRcbiAqIEByZXR1cm4ge0FycmF5fVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5FbWl0dGVyLnByb3RvdHlwZS5saXN0ZW5lcnMgPSBmdW5jdGlvbihldmVudCl7XG4gIHRoaXMuX2NhbGxiYWNrcyA9IHRoaXMuX2NhbGxiYWNrcyB8fCB7fTtcbiAgcmV0dXJuIHRoaXMuX2NhbGxiYWNrc1snJCcgKyBldmVudF0gfHwgW107XG59O1xuXG4vKipcbiAqIENoZWNrIGlmIHRoaXMgZW1pdHRlciBoYXMgYGV2ZW50YCBoYW5kbGVycy5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gZXZlbnRcbiAqIEByZXR1cm4ge0Jvb2xlYW59XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbkVtaXR0ZXIucHJvdG90eXBlLmhhc0xpc3RlbmVycyA9IGZ1bmN0aW9uKGV2ZW50KXtcbiAgcmV0dXJuICEhIHRoaXMubGlzdGVuZXJzKGV2ZW50KS5sZW5ndGg7XG59O1xuIiwiXG4vKipcbiAqIE1vZHVsZSBkZXBlbmRlbmNpZXMuXG4gKi9cblxudmFyIEVtaXR0ZXIgPSByZXF1aXJlKCdlbWl0dGVyJyk7XG52YXIgY2xvbmUgPSByZXF1aXJlKCdjbG9uZScpO1xudmFyIHR5cGUgPSByZXF1aXJlKCd0eXBlJyk7XG52YXIgZWFzZSA9IHJlcXVpcmUoJ2Vhc2UnKTtcblxuLyoqXG4gKiBFeHBvc2UgYFR3ZWVuYC5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IFR3ZWVuO1xuXG4vKipcbiAqIEluaXRpYWxpemUgYSBuZXcgYFR3ZWVuYCB3aXRoIGBvYmpgLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fEFycmF5fSBvYmpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gVHdlZW4ob2JqKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBUd2VlbikpIHJldHVybiBuZXcgVHdlZW4ob2JqKTtcbiAgdGhpcy5fZnJvbSA9IG9iajtcbiAgdGhpcy5lYXNlKCdsaW5lYXInKTtcbiAgdGhpcy5kdXJhdGlvbig1MDApO1xufVxuXG4vKipcbiAqIE1peGluIGVtaXR0ZXIuXG4gKi9cblxuRW1pdHRlcihUd2Vlbi5wcm90b3R5cGUpO1xuXG4vKipcbiAqIFJlc2V0IHRoZSB0d2Vlbi5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblR3ZWVuLnByb3RvdHlwZS5yZXNldCA9IGZ1bmN0aW9uKCl7XG4gIHRoaXMuaXNBcnJheSA9ICdhcnJheScgPT09IHR5cGUodGhpcy5fZnJvbSk7XG4gIHRoaXMuX2N1cnIgPSBjbG9uZSh0aGlzLl9mcm9tKTtcbiAgdGhpcy5fZG9uZSA9IGZhbHNlO1xuICB0aGlzLl9zdGFydCA9IERhdGUubm93KCk7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBUd2VlbiB0byBgb2JqYCBhbmQgcmVzZXQgaW50ZXJuYWwgc3RhdGUuXG4gKlxuICogICAgdHdlZW4udG8oeyB4OiA1MCwgeTogMTAwIH0pXG4gKlxuICogQHBhcmFtIHtPYmplY3R8QXJyYXl9IG9ialxuICogQHJldHVybiB7VHdlZW59IHNlbGZcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuVHdlZW4ucHJvdG90eXBlLnRvID0gZnVuY3Rpb24ob2JqKXtcbiAgdGhpcy5yZXNldCgpO1xuICB0aGlzLl90byA9IG9iajtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFNldCBkdXJhdGlvbiB0byBgbXNgIFs1MDBdLlxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBtc1xuICogQHJldHVybiB7VHdlZW59IHNlbGZcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuVHdlZW4ucHJvdG90eXBlLmR1cmF0aW9uID0gZnVuY3Rpb24obXMpe1xuICB0aGlzLl9kdXJhdGlvbiA9IG1zO1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogU2V0IGVhc2luZyBmdW5jdGlvbiB0byBgZm5gLlxuICpcbiAqICAgIHR3ZWVuLmVhc2UoJ2luLW91dC1zaW5lJylcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ3xGdW5jdGlvbn0gZm5cbiAqIEByZXR1cm4ge1R3ZWVufVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5Ud2Vlbi5wcm90b3R5cGUuZWFzZSA9IGZ1bmN0aW9uKGZuKXtcbiAgZm4gPSAnZnVuY3Rpb24nID09IHR5cGVvZiBmbiA/IGZuIDogZWFzZVtmbl07XG4gIGlmICghZm4pIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ludmFsaWQgZWFzaW5nIGZ1bmN0aW9uJyk7XG4gIHRoaXMuX2Vhc2UgPSBmbjtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFN0b3AgdGhlIHR3ZWVuIGFuZCBpbW1lZGlhdGVseSBlbWl0IFwic3RvcFwiIGFuZCBcImVuZFwiLlxuICpcbiAqIEByZXR1cm4ge1R3ZWVufVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5Ud2Vlbi5wcm90b3R5cGUuc3RvcCA9IGZ1bmN0aW9uKCl7XG4gIHRoaXMuc3RvcHBlZCA9IHRydWU7XG4gIHRoaXMuX2RvbmUgPSB0cnVlO1xuICB0aGlzLmVtaXQoJ3N0b3AnKTtcbiAgdGhpcy5lbWl0KCdlbmQnKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFBlcmZvcm0gYSBzdGVwLlxuICpcbiAqIEByZXR1cm4ge1R3ZWVufSBzZWxmXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Ud2Vlbi5wcm90b3R5cGUuc3RlcCA9IGZ1bmN0aW9uKCl7XG4gIGlmICh0aGlzLl9kb25lKSByZXR1cm47XG5cbiAgLy8gZHVyYXRpb25cbiAgdmFyIGR1cmF0aW9uID0gdGhpcy5fZHVyYXRpb247XG4gIHZhciBub3cgPSBEYXRlLm5vdygpO1xuICB2YXIgZGVsdGEgPSBub3cgLSB0aGlzLl9zdGFydDtcbiAgdmFyIGRvbmUgPSBkZWx0YSA+PSBkdXJhdGlvbjtcblxuICAvLyBjb21wbGV0ZVxuICBpZiAoZG9uZSkge1xuICAgIHRoaXMuX2Zyb20gPSB0aGlzLl90bztcbiAgICB0aGlzLl91cGRhdGUodGhpcy5fdG8pO1xuICAgIHRoaXMuX2RvbmUgPSB0cnVlO1xuICAgIHRoaXMuZW1pdCgnZW5kJyk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvLyB0d2VlblxuICB2YXIgZnJvbSA9IHRoaXMuX2Zyb207XG4gIHZhciB0byA9IHRoaXMuX3RvO1xuICB2YXIgY3VyciA9IHRoaXMuX2N1cnI7XG4gIHZhciBmbiA9IHRoaXMuX2Vhc2U7XG4gIHZhciBwID0gKG5vdyAtIHRoaXMuX3N0YXJ0KSAvIGR1cmF0aW9uO1xuICB2YXIgbiA9IGZuKHApO1xuXG4gIC8vIGFycmF5XG4gIGlmICh0aGlzLmlzQXJyYXkpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGZyb20ubGVuZ3RoOyArK2kpIHtcbiAgICAgIGN1cnJbaV0gPSBmcm9tW2ldICsgKHRvW2ldIC0gZnJvbVtpXSkgKiBuO1xuICAgIH1cblxuICAgIHRoaXMuX3VwZGF0ZShjdXJyKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8vIG9iamVjaFxuICBmb3IgKHZhciBrIGluIGZyb20pIHtcbiAgICBjdXJyW2tdID0gZnJvbVtrXSArICh0b1trXSAtIGZyb21ba10pICogbjtcbiAgfVxuXG4gIHRoaXMuX3VwZGF0ZShjdXJyKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFNldCB1cGRhdGUgZnVuY3Rpb24gdG8gYGZuYCBvclxuICogd2hlbiBubyBhcmd1bWVudCBpcyBnaXZlbiB0aGlzIHBlcmZvcm1zXG4gKiBhIFwic3RlcFwiLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXG4gKiBAcmV0dXJuIHtUd2Vlbn0gc2VsZlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5Ud2Vlbi5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24oZm4pe1xuICBpZiAoMCA9PSBhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gdGhpcy5zdGVwKCk7XG4gIHRoaXMuX3VwZGF0ZSA9IGZuO1xuICByZXR1cm4gdGhpcztcbn07IiwiLyoqXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzLlxuICovXG5cbnZhciBUd2VlbiA9IHJlcXVpcmUoJ3R3ZWVuJyk7XG52YXIgcmFmID0gcmVxdWlyZSgncmFmJyk7XG5cbi8qKlxuICogRXhwb3NlIGBzY3JvbGxUb2AuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBzY3JvbGxUbztcblxuLyoqXG4gKiBTY3JvbGwgdG8gYCh4LCB5KWAuXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IHhcbiAqIEBwYXJhbSB7TnVtYmVyfSB5XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIHNjcm9sbFRvKHgsIHksIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgLy8gc3RhcnQgcG9zaXRpb25cbiAgdmFyIHN0YXJ0ID0gc2Nyb2xsKCk7XG5cbiAgLy8gc2V0dXAgdHdlZW5cbiAgdmFyIHR3ZWVuID0gVHdlZW4oc3RhcnQpXG4gICAgLmVhc2Uob3B0aW9ucy5lYXNlIHx8ICdvdXQtY2lyYycpXG4gICAgLnRvKHsgdG9wOiB5LCBsZWZ0OiB4IH0pXG4gICAgLmR1cmF0aW9uKG9wdGlvbnMuZHVyYXRpb24gfHwgMTAwMCk7XG5cbiAgLy8gc2Nyb2xsXG4gIHR3ZWVuLnVwZGF0ZShmdW5jdGlvbihvKXtcbiAgICB3aW5kb3cuc2Nyb2xsVG8oby5sZWZ0IHwgMCwgby50b3AgfCAwKTtcbiAgfSk7XG5cbiAgLy8gaGFuZGxlIGVuZFxuICB0d2Vlbi5vbignZW5kJywgZnVuY3Rpb24oKXtcbiAgICBhbmltYXRlID0gZnVuY3Rpb24oKXt9O1xuICB9KTtcblxuICAvLyBhbmltYXRlXG4gIGZ1bmN0aW9uIGFuaW1hdGUoKSB7XG4gICAgcmFmKGFuaW1hdGUpO1xuICAgIHR3ZWVuLnVwZGF0ZSgpO1xuICB9XG5cbiAgYW5pbWF0ZSgpO1xuICBcbiAgcmV0dXJuIHR3ZWVuO1xufVxuXG4vKipcbiAqIFJldHVybiBzY3JvbGwgcG9zaXRpb24uXG4gKlxuICogQHJldHVybiB7T2JqZWN0fVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gc2Nyb2xsKCkge1xuICB2YXIgeSA9IHdpbmRvdy5wYWdlWU9mZnNldCB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wO1xuICB2YXIgeCA9IHdpbmRvdy5wYWdlWE9mZnNldCB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsTGVmdDtcbiAgcmV0dXJuIHsgdG9wOiB5LCBsZWZ0OiB4IH07XG59XG4iLCJ2YXIgUmVhY3RET00gPSByZXF1aXJlKCdyZWFjdC1kb20nKTtcbnZhciBzY3JvbGwgPSByZXF1aXJlKCdzY3JvbGwtdG8nKTtcblxuZnVuY3Rpb24gY2FsY3VsYXRlU2Nyb2xsT2Zmc2V0KGVsZW1lbnQsIG9mZnNldCwgYWxpZ25tZW50KSB7XG4gIHZhciBib2R5ID0gZG9jdW1lbnQuYm9keSxcbiAgICAgIGh0bWwgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gIHZhciBlbGVtZW50UmVjdCA9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gIHZhciBjbGllbnRIZWlnaHQgPSBodG1sLmNsaWVudEhlaWdodDtcbiAgdmFyIGRvY3VtZW50SGVpZ2h0ID0gTWF0aC5tYXgoIGJvZHkuc2Nyb2xsSGVpZ2h0LCBib2R5Lm9mZnNldEhlaWdodCwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBodG1sLmNsaWVudEhlaWdodCwgaHRtbC5zY3JvbGxIZWlnaHQsIGh0bWwub2Zmc2V0SGVpZ2h0ICk7XG4gIG9mZnNldCA9IG9mZnNldCB8fCAwOyAvLyBhZGRpdGlvbmFsIG9mZnNldCB0byB0b3BcbiAgdmFyIHNjcm9sbFBvc2l0aW9uO1xuICBzd2l0Y2goYWxpZ25tZW50KSB7XG4gICAgICBjYXNlICd0b3AnOiBzY3JvbGxQb3NpdGlvbiA9IGVsZW1lbnRSZWN0LnRvcDsgYnJlYWs7XG4gICAgICBjYXNlICdtaWRkbGUnOiBzY3JvbGxQb3NpdGlvbiA9IGVsZW1lbnRSZWN0LmJvdHRvbSAtIGNsaWVudEhlaWdodCAvIDIgLSBlbGVtZW50UmVjdC5oZWlnaHQgLyAyOyBicmVhaztcbiAgICAgIGNhc2UgJ2JvdHRvbSc6IHNjcm9sbFBvc2l0aW9uID0gZWxlbWVudFJlY3QuYm90dG9tIC0gY2xpZW50SGVpZ2h0OyBicmVhaztcbiAgICAgIGRlZmF1bHQ6IHNjcm9sbFBvc2l0aW9uID0gZWxlbWVudFJlY3QuYm90dG9tIC0gY2xpZW50SGVpZ2h0IC8gMiAtIGVsZW1lbnRSZWN0LmhlaWdodCAvIDI7IGJyZWFrOyAvL2RlZmF1bCB0byBtaWRkbGVcbiAgICB9XG4gIHZhciBtYXhTY3JvbGxQb3NpdGlvbiA9IGRvY3VtZW50SGVpZ2h0IC0gY2xpZW50SGVpZ2h0O1xuICByZXR1cm4gTWF0aC5taW4oc2Nyb2xsUG9zaXRpb24gKyBvZmZzZXQgKyB3aW5kb3cucGFnZVlPZmZzZXQsXG4gICAgICAgICAgICAgICAgICBtYXhTY3JvbGxQb3NpdGlvbik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHJlZiwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7XG4gICAgb2Zmc2V0OiAwLFxuICAgIGFsaWduOiAnbWlkZGxlJ1xuICB9O1xuICB2YXIgZWxlbWVudCA9IFJlYWN0RE9NLmZpbmRET01Ob2RlKHJlZik7XG4gIGlmIChlbGVtZW50ID09PSBudWxsKSByZXR1cm4gMDtcbiAgcmV0dXJuIHNjcm9sbCgwLCBjYWxjdWxhdGVTY3JvbGxPZmZzZXQoZWxlbWVudCwgb3B0aW9ucy5vZmZzZXQsIG9wdGlvbnMuYWxpZ24pLCBvcHRpb25zKTtcbn07IiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyB3aXRoU3R5bGVzIH0gZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvc3R5bGVzJztcblxuaW1wb3J0IHNjcm9sbFRvQ29tcG9uZW50IGZyb20gJ3JlYWN0LXNjcm9sbC10by1jb21wb25lbnQnO1xuXG4vLyBDb21wb25lbnRcbmltcG9ydCBSZXFSaWRlQnV0dG9uIGZyb20gJy4vUmVxUmlkZUJ1dHRvbic7XG5cbi8vIFVJXG5pbXBvcnQgVGV4dEZpZWxkIGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL1RleHRGaWVsZCc7XG5pbXBvcnQgR3JpZCBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9HcmlkJztcbmltcG9ydCBCdXR0b24gZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvQnV0dG9uJztcbmltcG9ydCBDYXJkIGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL0NhcmQnO1xuaW1wb3J0IENhcmRDb250ZW50IGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL0NhcmRDb250ZW50JztcbmltcG9ydCBUeXBvZ3JhcGh5IGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL1R5cG9ncmFwaHknO1xuaW1wb3J0IHsgQ2FyZEFjdGlvbnMsIEljb25CdXR0b24gfSBmcm9tIFwiQG1hdGVyaWFsLXVpL2NvcmVcIjtcbmltcG9ydCBEaXJlY3Rpb25zQ2FyIGZyb20gJ0BtYXRlcmlhbC11aS9pY29ucy9EaXJlY3Rpb25zQ2FyJztcbmltcG9ydCBBdmF0YXIgZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvQXZhdGFyJztcbmltcG9ydCBTdmdJY29uIGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL1N2Z0ljb24nO1xuXG5cbi8vIFRhYiBSZWxhdGVkXG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBTd2lwZWFibGVWaWV3cyBmcm9tICdyZWFjdC1zd2lwZWFibGUtdmlld3MnO1xuaW1wb3J0IEFwcEJhciBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9BcHBCYXInO1xuaW1wb3J0IFRhYnMgZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvVGFicyc7XG5pbXBvcnQgVGFiIGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL1RhYic7XG5pbXBvcnQgWm9vbSBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9ab29tJztcbmltcG9ydCBBZGRJY29uIGZyb20gJ0BtYXRlcmlhbC11aS9pY29ucy9BZGQnO1xuaW1wb3J0IEVkaXRJY29uIGZyb20gJ0BtYXRlcmlhbC11aS9pY29ucy9Nb2RlRWRpdCc7XG5pbXBvcnQgVXBJY29uIGZyb20gJ0BtYXRlcmlhbC11aS9pY29ucy9LZXlib2FyZEFycm93VXAnO1xuaW1wb3J0IGdyZWVuIGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL2NvbG9ycy9ncmVlbic7XG5cbi8vIEdyaWRMaXN0XG5pbXBvcnQgR3JpZExpc3QgZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvR3JpZExpc3QnO1xuaW1wb3J0IEdyaWRMaXN0VGlsZSBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9HcmlkTGlzdFRpbGUnO1xuXG5mdW5jdGlvbiBUYWJDb250YWluZXIocHJvcHMpIHtcbiAgICBjb25zdCB7IGNoaWxkcmVuLCBkaXIgfSA9IHByb3BzO1xuXG4gICAgcmV0dXJuIChcbiAgICAgICAgPFR5cG9ncmFwaHkgY29tcG9uZW50PVwiZGl2XCIgZGlyPXtkaXJ9IHN0eWxlPXt7IHBhZGRpbmc6IDggKiAzIH19PlxuICAgICAgICAgICAge2NoaWxkcmVufVxuICAgICAgICA8L1R5cG9ncmFwaHk+XG4gICAgKTtcbn1cblxuVGFiQ29udGFpbmVyLnByb3BUeXBlcyA9IHtcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUuaXNSZXF1aXJlZCxcbiAgICBkaXI6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbn07XG5cbmNvbnN0IHN0eWxlcyA9IHRoZW1lID0+ICh7XG4gICAgd3JhcHBlcjoge1xuICAgICAgICBoZWlnaHQ6ICc0MCUnLFxuICAgICAgICB3aWR0aDogJzEwMCUnLFxuXG4gICAgfSxcbiAgICBncmlkX2l0ZW06IHtcbiAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgaGVpZ2h0OiAnOTBweCdcbiAgICB9LFxuICAgIGNhcmQ6IHtcbiAgICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICAgIGRpc3BsYXk6IFwiZmxleFwiLFxuICAgICAgICBmbGV4RGlyZWN0aW9uOiBcInJvd1wiLFxuICAgICAgICBhbGlnbkNvbnRlbnQ6IFwiY2VudGVyXCIsXG4gICAgICAgIGFsaWduSXRlbXM6IFwiY2VudGVyXCJcbiAgICB9LFxuXG4gICAgcm9vdDoge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUuYmFja2dyb3VuZC5wYXBlcixcbiAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgICAgIG1pbkhlaWdodDogJzQwJScsXG4gICAgfSxcbiAgICBmYWI6IHtcbiAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICAgIGJvdHRvbTogdGhlbWUuc3BhY2luZy51bml0ICogMixcbiAgICAgICAgcmlnaHQ6IHRoZW1lLnNwYWNpbmcudW5pdCAqIDIsXG4gICAgfSxcbiAgICBmYWJHcmVlbjoge1xuICAgICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5jb21tb24ud2hpdGUsXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogZ3JlZW5bNTAwXSxcbiAgICB9LFxuXG4gICAgLy8gR3JpZExpc3RcbiAgICBncmlkTGlzdDoge1xuICAgICAgICAvLyBmbGV4V3JhcDogJ25vd3JhcCcsXG4gICAgICAgIC8vIGZsZXhEaXJlY3Rpb246ICdjb2x1bW4nLFxuICAgICAgICAvLyAvLyBQcm9tb3RlIHRoZSBsaXN0IGludG8gaGlzIG93biBsYXllciBvbiBDaHJvbWUuIFRoaXMgY29zdCBtZW1vcnkgYnV0IGhlbHBzIGtlZXBpbmcgaGlnaCBGUFMuXG4gICAgICAgIC8vIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZVooMCknLFxuICAgIH0sXG5cbiAgICBpY29uOiB7XG4gICAgICAgIHdpZHRoOiBcIjEwJVwiXG4gICAgfSxcbiAgICBjb250ZW50OiB7XG4gICAgICAgIHdpZHRoOiBcIjcwJVwiLFxuICAgIH0sXG4gICAgcHJpY2U6IHtcbiAgICAgICAgZm9udFNpemU6IDIwXG4gICAgfSxcbiAgICBuYW1lOiB7XG4gICAgICAgIGZvbnRTaXplOiAxMixcbiAgICAgICAgbWFyZ2luVG9wOiA4XG4gICAgfSxcbiAgICByZXF1ZXN0OiB7XG4gICAgICAgIHRleHRBbGlnbjogXCJjZW50ZXJcIixcbiAgICB9LFxuICAgIGF2YXRhcjoge1xuICAgICAgICAvLyB3aWR0aDogMzAsXG4gICAgICAgIC8vIGhlaWdodDogMzBcbiAgICB9XG59KTtcblxuY2xhc3MgQ2FyZFRhYmxlIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgICAgIHZhbHVlOiAwXG4gICAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgaGFuZGxlQ2hhbmdlID0gKGV2ZW50LCB2YWx1ZSkgPT4ge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHsgdmFsdWUgfSk7XG4gICAgfTtcbiAgICBcbiAgICBoYW5kbGVDaGFuZ2VJbmRleCA9IGluZGV4ID0+IHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IHZhbHVlOiBpbmRleCB9KTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogXG4gICAgICovXG4gICAgcmVxdWVzdFJpZGUgPSAoY29tcGFueSwgcHJvZHVjdF9uYW1lLCBwcm9kdWN0X2lkKSA9PiB7XG5cbiAgICAgICAgY29uc3QgZGVwYXJMYXQgPSB0aGlzLnByb3BzLmRlcGFyTGF0O1xuICAgICAgICBjb25zdCBkZXBhckxuZyA9IHRoaXMucHJvcHMuZGVwYXJMbmc7XG4gICAgICAgIGNvbnN0IGRlc3RMYXQgPSB0aGlzLnByb3BzLmRlc3RMYXQ7XG4gICAgICAgIGNvbnN0IGRlc3RMbmcgPSB0aGlzLnByb3BzLmRlc3RMbmc7XG4gICAgICAgIGNvbnN0IGRlcGFyQWRkciA9IHRoaXMucHJvcHMuZGVwYXJBZGRyO1xuICAgICAgICBjb25zdCBkZXN0QWRkciA9IHRoaXMucHJvcHMuZGVzdEFkZHI7XG5cbiAgICAgICAgdmFyIGRlZXBMaW5rID0gdW5kZWZpbmVkO1xuICAgICAgICBpZiAoY29tcGFueSAmJiBkZXBhckxhdCAmJiBkZXBhckxuZyAmJiBkZXN0TGF0ICYmIGRlc3RMbmcpIHtcbiAgICAgICAgICAgIGlmIChjb21wYW55ID09IFwidWJlclwiKSB7XG4gICAgICAgICAgICAgICAgZGVlcExpbmsgPSBcInViZXI6Ly8/Y2xpZW50X2lkPWpPT1VzNDg0ZERwZDVadFZ4VDVBOGNwOUNFa25ONXN6JmFjdGlvbj1zZXRQaWNrdXBcIiArXG4gICAgICAgICAgICAgICAgICAgIGAmcGlja3VwW2xhdGl0dWRlXT0ke2RlcGFyTGF0fSZwaWNrdXBbbG9uZ2l0dWRlXT0ke2RlcGFyTG5nfSZwaWNrdXBbbmlja25hbWVdPSR7ZGVwYXJBZGRyfWAgKyAgIC8vIFBpY2sgVXAgbG9jYXRpb25cbiAgICAgICAgICAgICAgICAgICAgYCZkcm9wb2ZmW2xhdGl0dWRlXT0ke2Rlc3RMYXR9JmRyb3BvZmZbbG9uZ2l0dWRlXT0ke2Rlc3RMbmd9JmRyb3BvZmZbbmlja25hbWVdPSR7ZGVzdEFkZHJ9YCArIC8vIERyb3Agb2ZmIGxvY2F0aW9uXG4gICAgICAgICAgICAgICAgICAgIGAmcHJvZHVjdF9pZD0ke3Byb2R1Y3RfaWR9YDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY29tcGFueSA9PSBcImx5ZnRcIikge1xuICAgICAgICAgICAgICAgIGRlZXBMaW5rID0gYGx5ZnQ6Ly9yaWRldHlwZT9pZD0ke3Byb2R1Y3RfaWR9JiZwYXJ0bmVyPVdYX3ZJaGNIV0Vkd2AgK1xuICAgICAgICAgICAgICAgICAgICBgcGlja3VwW2xhdGl0dWRlXT0ke2RlcGFyTGF0fSZwaWNrdXBbbG9uZ2l0dWRlXT0ke2RlcGFyTG5nfWAgK1xuICAgICAgICAgICAgICAgICAgICBgJmRlc3RpbmF0aW9uW2xhdGl0dWRlXT0ke2Rlc3RMYXR9JmRlc3RpbmF0aW9uW2xvbmdpdHVkZV09JHtkZXN0TG5nfWA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjb25zb2xlLmxvZyhwcm9kdWN0X25hbWUsIGRlZXBMaW5rKTtcblxuICAgICAgICB3aW5kb3cubG9jYXRpb24gPSBkZWVwTGluaztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAZGVwcmVjYXRlZFxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBjbGFzc2VzICBcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gcHJpY2VEYXRhXG4gICAgICovXG4gICAgY2FyZEZhY3RvcnkgPSAoY2xhc3NlcywgdGhlbWUsIGRhdGEpID0+IHtcbiAgICAgICAgY29uc29sZS5sb2coZGF0YSk7XG4gICAgICAgIGlmICghZGF0YSkge1xuICAgICAgICAgICAgZGF0YSA9IFtdXG4gICAgICAgIH1cblxuICAgICAgICB2YXIgcHJpY2VEYXRhID0gZGF0YS5zbGljZSgpO1xuXG4gICAgICAgIHByaWNlRGF0YS5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgICAgICByZXR1cm4gKGEubWluX2VzdGltYXRlIC0gYi5taW5fZXN0aW1hdGUpO1xuICAgICAgICB9KTtcblxuICAgICAgICBjb25zb2xlLmxvZyhwcmljZURhdGEpO1xuXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICBwcmljZURhdGEubWFwKChpdGVtLCBpKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgPEdyaWQgaXRlbSBjbGFzc05hbWU9e2NsYXNzZXMuZ3JpZF9pdGVtfSBrZXk9e2l9PlxuICAgICAgICAgICAgICAgICAgICAgICAgPENhcmQgY2xhc3NOYW1lPXtjbGFzc2VzLmNhcmR9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxDYXJkQ29udGVudCBjbGFzc05hbWU9e2NsYXNzZXMuaWNvbn0gPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8SWNvbkJ1dHRvbiB2YXJpYW50PVwiY29udGFpbmVkXCIgY29sb3I9XCJwcmltYXJ5XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8RGlyZWN0aW9uc0NhciAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L0ljb25CdXR0b24+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9DYXJkQ29udGVudD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Q2FyZENvbnRlbnQgY2xhc3NOYW1lPXtjbGFzc2VzLmNvbnRlbnR9ID5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPFR5cG9ncmFwaHkgdmFyaWFudD1cImhlYWRsaW5lXCIgY29tcG9uZW50PVwicFwiIGNsYXNzTmFtZT17Y2xhc3Nlcy5wcmljZX0gPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHtpdGVtLm1pbl9lc3RpbWF0ZX0gLSAke2l0ZW0ubWF4X2VzdGltYXRlfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L1R5cG9ncmFwaHk+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxUeXBvZ3JhcGh5IGNvbG9yPVwidGV4dFNlY29uZGFyeVwiIGNsYXNzTmFtZT17Y2xhc3Nlcy5uYW1lfSA+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7aXRlbS5kaXNwbGF5X25hbWV9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvVHlwb2dyYXBoeT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L0NhcmRDb250ZW50PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxDYXJkQ29udGVudCBjbGFzc05hbWU9e2NsYXNzZXMucmVxdWVzdH0gPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8QnV0dG9uIHNpemU9XCJzbWFsbFwiIGNvbG9yPVwicHJpbWFyeVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB0aGlzLnJlcXVlc3RSaWRlKGl0ZW0uY29tcGFueSwgaXRlbS5kaXNwbGF5X25hbWUsIGl0ZW0ucHJvZHVjdF9pZCl9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgU2NoZWR1bGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxUeXBvZ3JhcGh5IGNvbG9yPVwidGV4dFNlY29uZGFyeVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRVRBOiB7aXRlbS5kaXN0YW5jZX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9UeXBvZ3JhcGh5PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvQ2FyZENvbnRlbnQ+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L0NhcmQ+XG4gICAgICAgICAgICAgICAgICAgIDwvR3JpZD5cbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAcGFyYW0ge29iZWpjdH0gY2xhc3Nlc1xuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBlc3REYXRhXG4gICAgICovXG4gICAgdGFiRmFjdG9yeSA9IChjbGFzc2VzLCB0aGVtZSwgZGF0YSkgPT4ge1xuICAgICAgICB2YXIgZGF0YSA9IGRhdGEgfHwgW107XG5cbiAgICAgICAgLy8gLy8gU29ydCBEYXRhXG4gICAgICAgIHZhciBwcmljZURhdGEgPSBkYXRhLnNsaWNlKCk7XG5cbiAgICAgICAgdmFyIHRpbWVEYXRhID0gZGF0YS5zbGljZSgpO1xuXG4gICAgICAgIHByaWNlRGF0YS5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgICAgICByZXR1cm4gKGEubWluX2VzdGltYXRlIC0gYi5taW5fZXN0aW1hdGUpO1xuICAgICAgICB9KTtcblxuICAgICAgICB0aW1lRGF0YS5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgICAgICByZXR1cm4gKGEuZXRhIC0gYi5ldGEpO1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyBVSVxuICAgICAgICBjb25zdCB0cmFuc2l0aW9uRHVyYXRpb24gPSB7XG4gICAgICAgICAgICBlbnRlcjogdGhlbWUudHJhbnNpdGlvbnMuZHVyYXRpb24uZW50ZXJpbmdTY3JlZW4sXG4gICAgICAgICAgICBleGl0OiB0aGVtZS50cmFuc2l0aW9ucy5kdXJhdGlvbi5sZWF2aW5nU2NyZWVuLFxuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IGZhYnMgPSBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgY29sb3I6ICdwcmltYXJ5JyxcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU6IGNsYXNzZXMuZmFiLFxuICAgICAgICAgICAgICAgIGljb246IDxBZGRJY29uIC8+LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBjb2xvcjogJ3NlY29uZGFyeScsXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzLmZhYixcbiAgICAgICAgICAgICAgICBpY29uOiA8RWRpdEljb24gLz4sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGNvbG9yOiAnaW5oZXJpdCcsXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKGNsYXNzZXMuZmFiLCBjbGFzc2VzLmZhYkdyZWVuKSxcbiAgICAgICAgICAgICAgICBpY29uOiA8VXBJY29uIC8+LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgXTtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17Y2xhc3Nlcy5yb290fT5cbiAgICAgICAgICAgICAgICA8QXBwQmFyIHBvc2l0aW9uPVwic3RhdGljXCIgY29sb3I9XCJkZWZhdWx0XCI+XG4gICAgICAgICAgICAgICAgICAgIDxUYWJzXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17dGhpcy5zdGF0ZS52YWx1ZX1cbiAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLmhhbmRsZUNoYW5nZX1cbiAgICAgICAgICAgICAgICAgICAgICAgIGluZGljYXRvckNvbG9yPVwicHJpbWFyeVwiXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0Q29sb3I9XCJwcmltYXJ5XCJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bGxXaWR0aFxuICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICAgICA8VGFiIGxhYmVsPVwiUHJpY2VcIiAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgPFRhYiBsYWJlbD1cIlRpbWVcIiAvPlxuICAgICAgICAgICAgICAgICAgICA8L1RhYnM+XG4gICAgICAgICAgICAgICAgPC9BcHBCYXI+XG4gICAgICAgICAgICAgICAgPFN3aXBlYWJsZVZpZXdzXG4gICAgICAgICAgICAgICAgICAgIGF4aXM9e3RoZW1lLmRpcmVjdGlvbiA9PT0gJ3J0bCcgPyAneC1yZXZlcnNlJyA6ICd4J31cbiAgICAgICAgICAgICAgICAgICAgaW5kZXg9e3RoaXMuc3RhdGUudmFsdWV9XG4gICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlSW5kZXg9e3RoaXMuaGFuZGxlQ2hhbmdlSW5kZXh9XG4gICAgICAgICAgICAgICAgPiAgIFxuICAgICAgICAgICAgICAgICAgICA8VGFiQ29udGFpbmVyIGRpcj17dGhlbWUuZGlyZWN0aW9ufT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxHcmlkTGlzdCBjbGFzc05hbWU9e2NsYXNzZXMuZ3JpZExpc3R9IGNvbHM9ezF9IGNlbGxIZWlnaHQ9XCJhdXRvXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyAgIHByaWNlRGF0YS5tYXAoaXRlbSA9PiA8R3JpZExpc3RUaWxlIGtleT17aXRlbS5wcm9kdWN0X2lkfT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxDYXJkIGNsYXNzTmFtZT17Y2xhc3Nlcy5jYXJkfT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Q2FyZENvbnRlbnQgY2xhc3NOYW1lPXtjbGFzc2VzLmljb259ID5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgey8qIDxJY29uQnV0dG9uIHZhcmlhbnQ9XCJjb250YWluZWRcIiBjb2xvcj1cInByaW1hcnlcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxEaXJlY3Rpb25zQ2FyIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvSWNvbkJ1dHRvbj4gKi99XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxBdmF0YXJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNsYXNzTmFtZT17Y2xhc3Nlcy5hdmF0YXJ9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbHQ9XCJjb21wYW55XCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNyYz17XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGl0ZW0uY29tcGFueSA9PSBcInViZXJcIikgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBcIi9zdGF0aWMvaW1hZ2VzL3ViZXJfcmlkZXNfYXBpX2ljb25fMXhfNjRweC5wbmdcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogXCIvc3RhdGljL2ltYWdlcy9MeWZ0X0xvZ29fUGluay5wbmdcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvQ2FyZENvbnRlbnQ+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPENhcmRDb250ZW50IGNsYXNzTmFtZT17Y2xhc3Nlcy5jb250ZW50fSA+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxUeXBvZ3JhcGh5IHZhcmlhbnQ9XCJoZWFkbGluZVwiIGNvbXBvbmVudD1cInBcIiBjbGFzc05hbWU9e2NsYXNzZXMucHJpY2V9ID5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICR7aXRlbS5taW5fZXN0aW1hdGV9IC0gJHtpdGVtLm1heF9lc3RpbWF0ZX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9UeXBvZ3JhcGh5PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8VHlwb2dyYXBoeSBjb2xvcj1cInRleHRTZWNvbmRhcnlcIiBjbGFzc05hbWU9e2NsYXNzZXMubmFtZX0gPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge2l0ZW0uZGlzcGxheV9uYW1lfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L1R5cG9ncmFwaHk+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9DYXJkQ29udGVudD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Q2FyZENvbnRlbnQgY2xhc3NOYW1lPXtjbGFzc2VzLnJlcXVlc3R9ID5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgey8qIDxSZXFSaWRlQnV0dG9uIG9uQ2xpY2s9eyB0aGlzLnJlcXVlc3RSaWRlIH0gLz4gKi99XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxCdXR0b24gc2l6ZT1cInNtYWxsXCIgY29sb3I9XCJwcmltYXJ5XCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHRoaXMucmVxdWVzdFJpZGUoaXRlbS5jb21wYW55LCBpdGVtLmRpc3BsYXlfbmFtZSwgaXRlbS5wcm9kdWN0X2lkKX0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTY2hlZHVsZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPFR5cG9ncmFwaHkgY29sb3I9XCJ0ZXh0U2Vjb25kYXJ5XCIgbm9XcmFwPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge2l0ZW0uZXRhIC8gNjB9IG1pbnMgYXdheVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L1R5cG9ncmFwaHk+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9DYXJkQ29udGVudD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvQ2FyZD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9HcmlkTGlzdFRpbGU+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgPC9HcmlkTGlzdD5cbiAgICAgICAgICAgICAgICAgICAgPC9UYWJDb250YWluZXI+XG4gICAgICAgICAgICAgICAgICAgIDxUYWJDb250YWluZXIgZGlyPXt0aGVtZS5kaXJlY3Rpb259PlxuICAgICAgICAgICAgICAgICAgICAgICAgPEdyaWRMaXN0IGNsYXNzTmFtZT17Y2xhc3Nlcy5ncmlkTGlzdH0gY29scz17MX0gY2VsbEhlaWdodD1cImF1dG9cIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7ICAgdGltZURhdGEubWFwKGl0ZW0gPT4gPEdyaWRMaXN0VGlsZSBrZXk9e2l0ZW0ucHJvZHVjdF9pZH0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Q2FyZCBjbGFzc05hbWU9e2NsYXNzZXMuY2FyZH0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPENhcmRDb250ZW50IGNsYXNzTmFtZT17Y2xhc3Nlcy5pY29ufSA+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsvKiA8SWNvbkJ1dHRvbiB2YXJpYW50PVwiY29udGFpbmVkXCIgY29sb3I9XCJwcmltYXJ5XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8RGlyZWN0aW9uc0NhciAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L0ljb25CdXR0b24+ICovfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8QXZhdGFyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjbGFzc05hbWU9e2NsYXNzZXMuYXZhdGFyfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWx0PVwiY29tcGFueVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcmM9e1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChpdGVtLmNvbXBhbnkgPT0gXCJ1YmVyXCIpIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gXCIvc3RhdGljL2ltYWdlcy91YmVyX3JpZGVzX2FwaV9pY29uXzF4XzY0cHgucG5nXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IFwiL3N0YXRpYy9pbWFnZXMvTHlmdF9Mb2dvX1BpbmsucG5nXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L0NhcmRDb250ZW50PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxDYXJkQ29udGVudCBjbGFzc05hbWU9e2NsYXNzZXMuY29udGVudH0gPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8VHlwb2dyYXBoeSB2YXJpYW50PVwiaGVhZGxpbmVcIiBjb21wb25lbnQ9XCJwXCIgY2xhc3NOYW1lPXtjbGFzc2VzLnByaWNlfSA+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAke2l0ZW0ubWluX2VzdGltYXRlfSAtICR7aXRlbS5tYXhfZXN0aW1hdGV9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvVHlwb2dyYXBoeT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPFR5cG9ncmFwaHkgY29sb3I9XCJ0ZXh0U2Vjb25kYXJ5XCIgY2xhc3NOYW1lPXtjbGFzc2VzLm5hbWV9ID5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtpdGVtLmRpc3BsYXlfbmFtZX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9UeXBvZ3JhcGh5PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvQ2FyZENvbnRlbnQ+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPENhcmRDb250ZW50IGNsYXNzTmFtZT17Y2xhc3Nlcy5yZXF1ZXN0fSA+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsvKiA8UmVxUmlkZUJ1dHRvbiBvbkNsaWNrPXsgdGhpcy5yZXF1ZXN0UmlkZSB9IC8+ICovfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8QnV0dG9uIHNpemU9XCJzbWFsbFwiIGNvbG9yPVwicHJpbWFyeVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB0aGlzLnJlcXVlc3RSaWRlKGl0ZW0uY29tcGFueSwgaXRlbS5kaXNwbGF5X25hbWUsIGl0ZW0ucHJvZHVjdF9pZCl9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgU2NoZWR1bGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvQnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8VHlwb2dyYXBoeSBjb2xvcj1cInRleHRTZWNvbmRhcnlcIiBub1dyYXA+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7aXRlbS5ldGEgLyA2MH0gbWlucyBhd2F5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvVHlwb2dyYXBoeT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L0NhcmRDb250ZW50PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9DYXJkPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L0dyaWRMaXN0VGlsZT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICA8L0dyaWRMaXN0PlxuICAgICAgICAgICAgICAgICAgICA8L1RhYkNvbnRhaW5lcj5cbiAgICAgICAgICAgICAgICA8L1N3aXBlYWJsZVZpZXdzPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgLy8gTGlmZUN5Y2VsIEhvb2tzXG5cbiAgICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJDYXJkVGFibGUgbW91bnRlZFwiKTtcbiAgICAgICAgc2Nyb2xsVG9Db21wb25lbnQodGhpcy5jYXJkVGFibGUsIHtcbiAgICAgICAgICAgIGFsaWduOiAndG9wJyxcbiAgICAgICAgICAgIG9mZnNldDogLTEwMFxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIGNvbnN0IHsgZXN0RGF0YSB9ID0gdGhpcy5wcm9wcztcblxuICAgICAgICBjb25zdCB7IGxvYWRpbmcgfSA9IHRoaXMucHJvcHM7XG5cbiAgICAgICAgY29uc3QgeyBjbGFzc2VzLCB0aGVtZSB9ID0gdGhpcy5wcm9wcztcblxuICAgICAgICBjb25zdCB0ZXN0Q2FyZCA9IChcbiAgICAgICAgICAgIDxHcmlkIGl0ZW0gY2xhc3NOYW1lPXtjbGFzc2VzLmdyaWRfaXRlbX0gPlxuICAgICAgICAgICAgICAgIDxDYXJkIGNsYXNzTmFtZT17Y2xhc3Nlcy5jYXJkfT5cbiAgICAgICAgICAgICAgICAgICAgPENhcmRDb250ZW50IGNsYXNzTmFtZT17Y2xhc3Nlcy5pY29ufSA+XG4gICAgICAgICAgICAgICAgICAgICAgICA8QXZhdGFyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWx0PVwiVWJlclwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3JjPVwiL3N0YXRpYy9pbWFnZXMvdWJlcl9yaWRlc19hcGlfaWNvbl8yeF83MHB4LnBuZ1wiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtjbGFzc2VzLmF2YXRhcn1cbiAgICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICB7LyogPFN2Z0ljb25cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21wb25lbnQ9e1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAvPiAqL31cbiAgICAgICAgICAgICAgICAgICAgPC9DYXJkQ29udGVudD5cbiAgICAgICAgICAgICAgICAgICAgPENhcmRDb250ZW50IGNsYXNzTmFtZT17Y2xhc3Nlcy5jb250ZW50fSA+XG4gICAgICAgICAgICAgICAgICAgICAgICA8VHlwb2dyYXBoeSB2YXJpYW50PVwiaGVhZGxpbmVcIiBjb21wb25lbnQ9XCJwXCIgY2xhc3NOYW1lPXtjbGFzc2VzLnByaWNlfSA+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJDggfiAkOVxuICAgICAgICAgICAgICAgICAgICAgICAgPC9UeXBvZ3JhcGh5PlxuICAgICAgICAgICAgICAgICAgICAgICAgPFR5cG9ncmFwaHkgY29sb3I9XCJ0ZXh0U2Vjb25kYXJ5XCIgY2xhc3NOYW1lPXtjbGFzc2VzLm5hbWV9ID5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBUZXN0IENhcmRcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvVHlwb2dyYXBoeT5cbiAgICAgICAgICAgICAgICAgICAgPC9DYXJkQ29udGVudD5cbiAgICAgICAgICAgICAgICAgICAgPENhcmRDb250ZW50IGNsYXNzTmFtZT17Y2xhc3Nlcy5yZXF1ZXN0fSA+XG4gICAgICAgICAgICAgICAgICAgICAgICB7LyogPFJlcVJpZGVCdXR0b24gb25DbGljaz17IHRoaXMucmVxdWVzdFJpZGUgfSAvPiAqL31cbiAgICAgICAgICAgICAgICAgICAgICAgIDxCdXR0b24gc2l6ZT1cInNtYWxsXCIgY29sb3I9XCJwcmltYXJ5XCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB0aGlzLnJlcXVlc3RSaWRlKFwiVGFnXCIpfT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBTY2hlZHVsZVxuICAgICAgICAgICAgICAgICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgICAgICAgICAgICAgICAgICA8VHlwb2dyYXBoeSBjb2xvcj1cInRleHRTZWNvbmRhcnlcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBFVEE6IDNtaW5zXG4gICAgICAgICAgICAgICAgICAgICAgICA8L1R5cG9ncmFwaHk+XG4gICAgICAgICAgICAgICAgICAgIDwvQ2FyZENvbnRlbnQ+XG4gICAgICAgICAgICAgICAgPC9DYXJkPlxuICAgICAgICAgICAgPC9HcmlkPlxuICAgICAgICApO1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxHcmlkIGl0ZW0gY2xhc3NOYW1lPXtjbGFzc2VzLndyYXBwZXJ9IHJlZj17KHNlY3Rpb24pID0+IHsgdGhpcy5jYXJkVGFibGUgPSBzZWN0aW9uOyB9fT5cbiAgICAgICAgICAgICAgICA8R3JpZCBjb250YWluZXIgc3BhY2luZz17MTZ9PlxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlc3REYXRhICYmIFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50YWJGYWN0b3J5KGNsYXNzZXMsIHRoZW1lLCBlc3REYXRhKVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgPC9HcmlkPlxuICAgICAgICAgICAgPC9HcmlkPlxuICAgICAgICApO1xuICAgIH1cbn1cblxuQ2FyZFRhYmxlLnByb3BUeXBlcyA9IHtcbiAgICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWRcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7IHdpdGhUaGVtZTogdHJ1ZSB9KShDYXJkVGFibGUpOyIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgd2l0aFdpZHRoIGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL3dpdGhXaWR0aCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgd2l0aFN0eWxlcyB9IGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL3N0eWxlcyc7XG5cbi8vIFVJXG5pbXBvcnQgR3JpZCBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9HcmlkJztcbmltcG9ydCBCdXR0b24gZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvQnV0dG9uJztcbmltcG9ydCBJY29uQnV0dG9uIGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL0ljb25CdXR0b24nO1xuaW1wb3J0IENpcmN1bGFyUHJvZ3Jlc3MgZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvQ2lyY3VsYXJQcm9ncmVzcyc7XG5pbXBvcnQgU2VhcmNoIGZyb20gJ0BtYXRlcmlhbC11aS9pY29ucy9TZWFyY2gnO1xuXG5jb25zdCBzdHlsZXMgPSB0aGVtZSA9PiAoe1xuICAgIGNvbnRhaW5lcjoge1xuICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICB0ZXh0QWxpZ246ICdjZW50ZXInXG4gICAgfVxufSk7XG5cbmZ1bmN0aW9uIFNlYXJjaEJ1dHRvbiAocHJvcHMpIHtcbiAgICBjb25zdCB7IGNsYXNzZXMgfSA9IHByb3BzO1xuICAgIHJldHVybiAoXG4gICAgICAgIDxHcmlkIGl0ZW0gY2xhc3NOYW1lPXtjbGFzc2VzLmNvbnRhaW5lcn0gPlxuICAgICAgICAgICAgPEljb25CdXR0b24gdmFyaWFudD1cImNvbnRhaW5lZFwiIGNvbG9yPVwicHJpbWFyeVwiIG9uQ2xpY2sgPSB7IHByb3BzLm9uQ2xpY2sgfSA+XG4gICAgICAgICAgICAgICAgPFNlYXJjaCAvPlxuICAgICAgICAgICAgPC9JY29uQnV0dG9uPlxuICAgICAgICA8L0dyaWQ+XG4gICAgKVxufVxuXG5TZWFyY2hCdXR0b24ucHJvcFR5cGVzID0ge1xuICAgIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcbiAgICBvbkNsaWNrOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkXG59XG5cbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzKShTZWFyY2hCdXR0b24pO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfY3JlYXRlU3ZnSWNvbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbHMvY3JlYXRlU3ZnSWNvblwiKSk7XG5cbnZhciBfZGVmYXVsdCA9ICgwLCBfY3JlYXRlU3ZnSWNvbi5kZWZhdWx0KShfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiZ1wiLCBudWxsLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gIGQ6IFwiTTEyIDJDOC4xMyAyIDUgNS4xMyA1IDljMCA1LjI1IDcgMTMgNyAxM3M3LTcuNzUgNy0xM2MwLTMuODctMy4xMy03LTctN3ptMCA5LjVjLTEuMzggMC0yLjUtMS4xMi0yLjUtMi41czEuMTItMi41IDIuNS0yLjUgMi41IDEuMTIgMi41IDIuNS0xLjEyIDIuNS0yLjUgMi41elwiXG59KSksICdMb2NhdGlvbk9uJyk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgd2l0aFdpZHRoIGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL3dpdGhXaWR0aCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgd2l0aFN0eWxlcyB9IGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL3N0eWxlcyc7XG5cbi8vIFVJXG5pbXBvcnQgR3JpZCBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9HcmlkJztcbmltcG9ydCBUZXh0RmllbGQgZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvVGV4dEZpZWxkJztcbmltcG9ydCBJbnB1dCBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9JbnB1dCc7XG5pbXBvcnQgSW5wdXRBZG9ybm1lbnQgZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvSW5wdXRBZG9ybm1lbnQnO1xuaW1wb3J0IEljb25CdXR0b24gZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvSWNvbkJ1dHRvbic7XG5pbXBvcnQgTG9jYXRpb25PbiBmcm9tICdAbWF0ZXJpYWwtdWkvaWNvbnMvTG9jYXRpb25Pbic7XG5pbXBvcnQgU2VhcmNoIGZyb20gJ0BtYXRlcmlhbC11aS9pY29ucy9TZWFyY2gnO1xuaW1wb3J0IEZvcm1Db250cm9sIGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL0Zvcm1Db250cm9sJztcbmltcG9ydCBJbnB1dExhYmVsIGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL0lucHV0TGFiZWwnO1xuXG5jb25zdCBzdHlsZXMgPSB0aGVtZSA9PiAoe1xuICAgIHdyYXBwZXI6IHtcbiAgICAgICAgaGVpZ2h0OiBcIjMwJVwiLFxuICAgICAgICB3aWR0aDogXCIxMDAlXCJcbiAgICB9XG59KTtcblxuY2xhc3MgSW5wdXRGaWVsZCBleHRlbmRzIENvbXBvbmVudCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuZGVwYXJBQyA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5kZXN0QUMgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMubWFwcyA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgICAgIGN1cnJlbnRMb2M6IGZhbHNlLFxuICAgICAgICAgICAgZGVwYXJUZXh0OiB1bmRlZmluZWQsXG4gICAgICAgICAgICBkZXN0VGV4dDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgcGFyZW50RGVwYXJUZXh0OiB1bmRlZmluZWQsXG4gICAgICAgICAgICBwYXJlbnREZXN0VGV4dDogdW5kZWZpbmVkXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBMb2FkIGF1dG9jb21wbGV0ZSAmIGFkZCBldmVudCBsaXN0ZW5lclxuICAgICAqL1xuICAgIGxvYWRBdXRvQ29tcGxldGUgPSAoKSA9PiB7XG4gICAgICAgIGlmICh0aGlzLnByb3BzICYmIHRoaXMucHJvcHMuZ29vZ2xlKSB7XG5cbiAgICAgICAgICAgIC8vIEZpbmQgcHJvcHNcbiAgICAgICAgICAgIGNvbnN0IHsgZ29vZ2xlIH0gPSB0aGlzLnByb3BzO1xuICAgICAgICAgICAgY29uc3QgbWFwcyA9IGdvb2dsZS5tYXBzO1xuXG4gICAgICAgICAgICAvLyBGaW5kIGhvb2sgbm9kZXNcbiAgICAgICAgICAgIGNvbnN0IGRlcGFyTm9kZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdkZXBhclJlZicpO1xuICAgICAgICAgICAgY29uc3QgZGVzdE5vZGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZGVzdFJlZicpO1xuXG4gICAgICAgICAgICAvLyBJbnN0YW50aWF0ZSBtYXAgY29tcG9uZW50cyB0byB0aGUgbm9kZXNcbiAgICAgICAgICAgIHZhciBkZXBhckFDID0gbmV3IG1hcHMucGxhY2VzLkF1dG9jb21wbGV0ZShkZXBhck5vZGUpO1xuICAgICAgICAgICAgdmFyIGRlc3RBQyA9IG5ldyBtYXBzLnBsYWNlcy5BdXRvY29tcGxldGUoZGVzdE5vZGUpO1xuXG4gICAgICAgICAgICBkZXBhckFDLmFkZExpc3RlbmVyKCdwbGFjZV9jaGFuZ2VkJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgIHZhciBwbGFjZSA9IGRlcGFyQUMuZ2V0UGxhY2UoKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhwbGFjZSk7XG5cbiAgICAgICAgICAgICAgIFxuXG4gICAgICAgICAgICAgICAgaWYgKCFwbGFjZS5nZW9tZXRyeSkge1xuICAgICAgICAgICAgICAgICAgICBhbGVydChcIkRldGFpbHMgdW5hdmFpbGFibGUgZm9yIGlucHV0OiBcIiArIHBsYWNlLm5hbWUgKyBcIi5cIik7XG4gICAgICAgICAgICAgICAgICAgIC8vIFRPRE86IEhhbmRsZSBlZGdlIGNhc2VcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnByb3BzLnVwZGF0ZUxvY2F0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHJvcHMudXBkYXRlTG9jYXRpb24oXCJkZXBhclwiLCBwbGFjZS5nZW9tZXRyeS5sb2NhdGlvbi50b0pTT04oKSwgcGxhY2UuZm9ybWF0dGVkX2FkZHJlc3MpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAvLyBUT0RPOiBzbWFydGVyIHdheSB0byBzZXQgZGVwYXJWYWwgbG9sXG4gICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgICAgICBkZXBhclRleHQ6IHBsYWNlLmZvcm1hdHRlZF9hZGRyZXNzXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgZGVzdEFDLmFkZExpc3RlbmVyKCdwbGFjZV9jaGFuZ2VkJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgIHZhciBwbGFjZSA9IGRlc3RBQy5nZXRQbGFjZSgpO1xuXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2cocGxhY2UpO1xuXG4gICAgICAgICAgICAgICAgaWYgKCFwbGFjZS5nZW9tZXRyeSkge1xuICAgICAgICAgICAgICAgICAgICBhbGVydChcIkRldGFpbHMgdW5hdmFpbGFibGUgZm9yIGlucHV0OiBcIiArIHBsYWNlLm5hbWUgKyBcIi5cIik7XG4gICAgICAgICAgICAgICAgICAgIC8vIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5wcm9wcy51cGRhdGVMb2NhdGlvbikge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIltkZXN0XVwiLCAgcGxhY2UuZ2VvbWV0cnkubG9jYXRpb24udG9KU09OKCkpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnByb3BzLnVwZGF0ZUxvY2F0aW9uKFwiZGVzdFwiLCBwbGFjZS5nZW9tZXRyeS5sb2NhdGlvbi50b0pTT04oKSwgcGxhY2UuZm9ybWF0dGVkX2FkZHJlc3MpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgICAgICAvLyBkZXN0VGV4dDogdGhpcy5wYXJzZVBsYWNlTmFtZShwbGFjZS5hZGRyZXNzX2NvbXBvbmVudHMpXG4gICAgICAgICAgICAgICAgICAgIGRlc3RUZXh0OiBwbGFjZS5mb3JtYXR0ZWRfYWRkcmVzc1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBcbiAgICAvKipcbiAgICAgKiBcbiAgICAgKi9cbiAgICBwYXJzZVBsYWNlTmFtZSA9IChwbGFjZSkgPT4ge1xuICAgICAgICAvLyBUT0RPOiBIYW5kbGUgRWRnZSBDYXNlOyBJdGVyYXRlIHRocm91Z2ggYHBsYWNlYCBhcnJheSBhbmQgY2hlY2sgXCJ0YWdzXCJcbiAgICAgICAgdmFyIHN0cmVldE51bWJlciA9IHBsYWNlWzBdLmxvbmdfbmFtZTtcbiAgICAgICAgdmFyIHJvdXRlID0gcGxhY2VbMV0ubG9uZ19uYW1lO1xuICAgICAgICB2YXIgbG9jYWxpdHkgPSBwbGFjZVszXS5sb25nX25hbWU7XG4gICAgICAgIHZhciBhZG1pbl9hcmVhX2x2MSA9IHBsYWNlWzVdLnNob3J0X25hbWU7XG4gICAgICAgIHZhciBjb3VudHJ5ID0gcGxhY2VbNl0uc2hvcnRfbmFtZTtcbiAgICAgICAgcmV0dXJuIHN0cmVldE51bWJlciArIFwiIFwiICsgcm91dGUgK1wiLCBcIiArIGxvY2FsaXR5ICsgXCIsIFwiICsgYWRtaW5fYXJlYV9sdjEgKyBcIiwgXCIgKyBjb3VudHJ5O1xuXG4gICAgfVxuXG4gICAgaGFuZGxlQ2hhbmdlID0gbmFtZSA9PiBldmVudCA9PiB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgW25hbWVdOiBldmVudC50YXJnZXQudmFsdWVcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gRGV0YWNoIGN1cnJlbnQgbG9jIHN0YXRlXG4gICAgICAgIGlmIChuYW1lID09IFwiZGVwYXJUZXh0XCIpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgIGN1cnJlbnRMb2M6IGZhbHNlXG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFldmVudC50YXJnZXQudmFsdWUpIHtcbiAgICAgICAgICAgIC8vIFVwZGF0ZSBsb2NhdGlvblxuICAgICAgICAgICAgbGV0IHRhZztcbiAgICAgICAgICAgIGlmIChuYW1lID09IFwiZGVwYXJUZXh0XCIpIHtcbiAgICAgICAgICAgICAgICB0YWcgPSBcImRlcGFyXCI7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRhZyA9IFwiZGVzdFwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5wcm9wcy51cGRhdGVMb2NhdGlvbih0YWcsIHVuZGVmaW5lZCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBoYW5kbGVDbGljayA9IChlKSA9PiB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTZWxlY3QgYWxsIHRleHQgZmllbGQgd2hlbiBjbGlja2VkLlxuICAgICAgICAgKi9cbiAgICAgICAgZS50YXJnZXQuc2VsZWN0KCk7XG4gICAgfVxuXG4gICAgZ2V0Q3VycmVudExvY2F0aW9uID0gKCkgPT4ge1xuICAgICAgICBjb25zdCB7IGhhbmRsZUN1cnJlbnRMb2NhdGlvbiB9ID0gdGhpcy5wcm9wcztcblxuICAgICAgICB2YXIgeyBnb29nbGUgfSA9IHRoaXMucHJvcHM7XG5cbiAgICAgICAgdmFyIGdlb2NvZGVyID0gbmV3IGdvb2dsZS5tYXBzLkdlb2NvZGVyO1xuICAgICAgICBcbiAgICAgICAgXG5cbiAgICAgICAgdmFyIHJlcyA9IGhhbmRsZUN1cnJlbnRMb2NhdGlvbigpOyAgLy8gQSBQcm9taXNlXG4gICAgICAgIHJlcy50aGVuKChwb3NpdGlvbikgPT4ge1xuICAgICAgICAgICAgaWYgKCFwb3NpdGlvbikge1xuICAgICAgICAgICAgICAgIGFsZXJ0KFwiTG9jYXRpb24gYWNjZXNzIGRlbmllZC5cIik7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgbGF0bG5nID0ge1xuICAgICAgICAgICAgICAgIGxhdDogcG9zaXRpb24uY29vcmRzLmxhdGl0dWRlLFxuICAgICAgICAgICAgICAgIGxuZzogcG9zaXRpb24uY29vcmRzLmxvbmdpdHVkZVxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgY29uc3QgZGVwYXJOb2RlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2RlcGFyUmVmJyk7XG4gICAgICAgICAgICBjb25zdCBpbnB1dE5vZGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnaW5wdXRMYWJlbCcpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBnZW9jb2Rlci5nZW9jb2RlKHsnbG9jYXRpb24nOiBsYXRsbmd9LCBmdW5jdGlvbiAocmVzdWx0cywgc3RhdHVzKSB7XG4gICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2cocmVzdWx0cyk7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgICAgIGRlcGFyVGV4dDogcmVzdWx0c1swXS5mb3JtYXR0ZWRfYWRkcmVzcyxcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudExvYzogdHJ1ZVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfS5iaW5kKHRoaXMpKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiBMaWZlIEN5Y2xlIG1ldGhvZHNcbiAgICAgKi9cbiAgICBjb21wb25lbnREaWRNb3VudCA9ICgpID0+IHtcbiAgICAgICAgdGhpcy5sb2FkQXV0b0NvbXBsZXRlKCk7XG4gICAgICAgIHRoaXMuZ2V0Q3VycmVudExvY2F0aW9uKCk7XG4gICAgfVxuXG4gICAgY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wcywgcHJldlN0YXRlcykge1xuICAgICAgICAvKiogXG4gICAgICAgICAqIChGaXhlZCkgXG4gICAgICAgICAqIFR3by13YXlzIHVwZGF0ZVxuICAgICAgICAgKiAtIEZyb20gaW5wdXQgdGV4dGZpZWxkIChBdXRvQ29tcGxldGUgb25DaGFuZ2UpXG4gICAgICAgICAqIC0gRnJvbSBwYXJlbnQgc3RhdGUgKE1hcCBtYXJrZXIgZHJhZ2VuZClcbiAgICAgICAgKi9cbiAgICAgICAgY29uc3QgeyBkZXBhckFkZHIsIGRlc3RBZGRyIH0gPSB0aGlzLnByb3BzO1xuICAgICAgICAvLyBjb25zb2xlLmxvZyhcIltJbnB1dEZpZWxkXSBVcGRhdGUgQWRkclwiLCBkZXBhckFkZHIsIHByZXZTdGF0ZXMuZGVwYXJUZXh0LCBkZXN0QWRkciwgcHJldlN0YXRlcy5kZXN0VGV4dCk7XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKFwiW3Byb3AuZGVwYXJdXCIsIGRlcGFyQWRkciwgXCJbcHJldlN0YXRlLmRlcGFyXVwiLCBwcmV2U3RhdGVzLmRlcGFyVGV4dCk7XG5cbiAgICAgICAgdmFyIGRlcGFyRmxhZyA9IGZhbHNlO1xuICAgICAgICB2YXIgZGVzdEZsYWcgPSBmYWxzZTtcblxuICAgICAgICBpZiAocHJldlN0YXRlcy5wYXJlbnREZXBhclRleHQgIT0gZGVwYXJBZGRyKSB7XG4gICAgICAgICAgICBkZXBhckZsYWcgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHByZXZTdGF0ZXMucGFyZW50RGVzdFRleHQgIT0gZGVzdEFkZHIpIHtcbiAgICAgICAgICAgIGRlc3RGbGFnID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChkZXBhckZsYWcgJiYgZGVzdEZsYWcpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgIGRlcGFyVGV4dDogZGVwYXJBZGRyLFxuICAgICAgICAgICAgICAgIHBhcmVudERlcGFyVGV4dDogZGVwYXJBZGRyLFxuICAgICAgICAgICAgICAgIGRlc3RUZXh0OiBkZXN0QWRkcixcbiAgICAgICAgICAgICAgICBwYXJlbnREZXN0VGV4dDogZGVzdEFkZHJcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2UgaWYgKGRlcGFyRmxhZykge1xuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgZGVwYXJUZXh0OiBkZXBhckFkZHIsXG4gICAgICAgICAgICAgICAgcGFyZW50RGVwYXJUZXh0OiBkZXBhckFkZHJcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0gZWxzZSBpZiAoZGVzdEZsYWcpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgIGRlc3RUZXh0OiBkZXN0QWRkcixcbiAgICAgICAgICAgICAgICBwYXJlbnREZXN0VGV4dDogZGVzdEFkZHJcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgY29uc3QgeyBjbGFzc2VzIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgICAgIGNvbnN0IHsgaGFuZGxlQ3VycmVudExvY2F0aW9uLCBoYW5kbGVTZWFyY2ggfSA9IHRoaXMucHJvcHM7XG4gICAgICAgIFxuICAgICAgICBjb25zdCB7IGRlcGFyQWRkciwgZGVzdEFkZHIgfSA9IHRoaXMucHJvcHM7XG5cbiAgICAgICAgLy8gY29uc29sZS5sb2coXCJbSW5wdXRGaWVsZF0gVXBkYXRlIEFkZHJcIiwgZGVwYXJBZGRyLCB0aGlzLnN0YXRlLmRlcGFyVGV4dCwgZGVzdEFkZHIsIHRoaXMuc3RhdGUuZGVzdFRleHQpO1xuXG4gICAgICAgIC8vIGlmIChkZXBhckFkZHIgIT0gdGhpcy5zdGF0ZS5kZXBhclRleHQpIHtcbiAgICAgICAgLy8gICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAvLyAgICAgICAgIGRlcGFyVGV4dDogZGVwYXJBZGRyXG4gICAgICAgIC8vICAgICB9KVxuICAgICAgICAvLyB9XG5cbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxHcmlkIGl0ZW0gY2xhc3NOYW1lPXtjbGFzc2VzLndyYXBwZXJ9PlxuICAgICAgICAgICAgICAgIDxHcmlkIGNvbnRhaW5lciBkaXJlY3Rpb249J3JvdycgY2xhc3NOYW1lPXtjbGFzc2VzLmNvbnRhaW5lcn0+XG4gICAgICAgICAgICAgICAgICAgIDxHcmlkIGl0ZW0geHM9ezEyfSBzbT17MTJ9IGNsYXNzTmFtZT17Y2xhc3Nlcy5pdGVtfT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxGb3JtQ29udHJvbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbj1cIm5vcm1hbFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVsbFdpZHRoPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgICB0aGlzLnN0YXRlLmN1cnJlbnRMb2NcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyA8SW5wdXRMYWJlbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9XCJpbnB1dExhYmVsXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNocmluaz17dHJ1ZX0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBEZXBhcnR1cmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9JbnB1dExhYmVsPlxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogPElucHV0TGFiZWxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkPVwiaW5wdXRMYWJlbFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRGVwYXJ0dXJlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvSW5wdXRMYWJlbD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPElucHV0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkPVwiZGVwYXJSZWZcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2NsYXNzZXMudGV4dEZpZWxkfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbD1cIkRlcGFydHVyZVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bGxXaWR0aFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdXRvRm9jdXNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kQWRvcm5tZW50PXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPElucHV0QWRvcm5tZW50IHBvc2l0aW9uPVwiZW5kXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8SWNvbkJ1dHRvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhcmlhbnQ9XCJjb250YWluZWRcIiBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcj1cInByaW1hcnlcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9e3RoaXMuZ2V0Q3VycmVudExvY2F0aW9ufT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8TG9jYXRpb25PbiAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9JY29uQnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L0lucHV0QWRvcm5tZW50PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXt0aGlzLnN0YXRlLmRlcGFyVGV4dH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e3RoaXMuaGFuZGxlQ2hhbmdlKFwiZGVwYXJUZXh0XCIpfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBvbktleURvd249e3RoaXMuaGFuZGxlS2V5RG93bigpfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXsoZSkgPT4gdGhpcy5oYW5kbGVDbGljayhlKX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvRm9ybUNvbnRyb2w+XG4gICAgICAgICAgICAgICAgICAgIDwvR3JpZD5cbiAgICAgICAgICAgICAgICAgICAgPEdyaWQgaXRlbSB4cz17MTJ9IHNtPXsxMn0gY2xhc3NOYW1lPXtjbGFzc2VzLml0ZW19PlxuICAgICAgICAgICAgICAgICAgICAgICAgPFRleHRGaWVsZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkPVwiZGVzdFJlZlwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtjbGFzc2VzLnRleHRGaWVsZH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbD1cIkRlc3RpbmF0aW9uXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW49XCJub3JtYWxcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bGxXaWR0aFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIElucHV0UHJvcHM9IHt7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZEFkb3JubWVudDogKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPElucHV0QWRvcm5tZW50IHBvc2l0aW9uPVwiZW5kXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPEljb25CdXR0b25cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyaWFudD1cImNvbnRhaW5lZFwiIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcj1cInByaW1hcnlcIiBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17aGFuZGxlU2VhcmNofSA+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8U2VhcmNoIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9JY29uQnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9JbnB1dEFkb3JubWVudD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXt0aGlzLnN0YXRlLmRlc3RUZXh0fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLmhhbmRsZUNoYW5nZShcImRlc3RUZXh0XCIpfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eyhlKSA9PiB0aGlzLmhhbmRsZUNsaWNrKGUpfVxuICAgICAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgPC9HcmlkPlxuICAgICAgICAgICAgICAgIDwvR3JpZD5cbiAgICAgICAgICAgIDwvR3JpZD5cbiAgICAgICAgKTtcbiAgICB9O1xufVxuXG5JbnB1dEZpZWxkLnByb3BUeXBlcyA9IHtcbiAgICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWRcbn07XG5cblxuZXhwb3J0IGRlZmF1bHQgd2l0aFdpZHRoKCkod2l0aFN0eWxlcyhzdHlsZXMpKElucHV0RmllbGQpKTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX2V4dGVuZHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2V4dGVuZHNcIikpO1xuXG52YXIgX29iamVjdFNwcmVhZDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vb2JqZWN0U3ByZWFkXCIpKTtcblxudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIikpO1xuXG52YXIgX2NsYXNzQ2FsbENoZWNrMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9jbGFzc0NhbGxDaGVja1wiKSk7XG5cbnZhciBfY3JlYXRlQ2xhc3MyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2NyZWF0ZUNsYXNzXCIpKTtcblxudmFyIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuXCIpKTtcblxudmFyIF9pbmhlcml0czIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vaW5oZXJpdHNcIikpO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xuXG52YXIgX1RyYW5zaXRpb24gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdC10cmFuc2l0aW9uLWdyb3VwL1RyYW5zaXRpb25cIikpO1xuXG52YXIgX3RyYW5zaXRpb25zID0gcmVxdWlyZShcIi4uL3N0eWxlcy90cmFuc2l0aW9uc1wiKTtcblxudmFyIF93aXRoVGhlbWUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9zdHlsZXMvd2l0aFRoZW1lXCIpKTtcblxudmFyIF91dGlscyA9IHJlcXVpcmUoXCIuLi90cmFuc2l0aW9ucy91dGlsc1wiKTtcblxuLy8gQGluaGVyaXRlZENvbXBvbmVudCBUcmFuc2l0aW9uXG52YXIgc3R5bGVzID0ge1xuICBlbnRlcmluZzoge1xuICAgIHRyYW5zZm9ybTogJ3NjYWxlKDEpJ1xuICB9LFxuICBlbnRlcmVkOiB7XG4gICAgdHJhbnNmb3JtOiAnc2NhbGUoMSknXG4gIH1cbn07XG4vKipcbiAqIFRoZSBab29tIHRyYW5zaXRpb24gY2FuIGJlIHVzZWQgZm9yIHRoZSBmbG9hdGluZyB2YXJpYW50IG9mIHRoZVxuICogW0J1dHRvbl0oaHR0cHM6Ly9tYXRlcmlhbC11aS5jb20vZGVtb3MvYnV0dG9ucy8jZmxvYXRpbmctYWN0aW9uLWJ1dHRvbnMpIGNvbXBvbmVudC5cbiAqIEl0IHVzZXMgW3JlYWN0LXRyYW5zaXRpb24tZ3JvdXBdKGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFjdGpzL3JlYWN0LXRyYW5zaXRpb24tZ3JvdXApIGludGVybmFsbHkuXG4gKi9cblxudmFyIFpvb20gPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgKDAsIF9pbmhlcml0czIuZGVmYXVsdCkoWm9vbSwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gWm9vbSgpIHtcbiAgICB2YXIgX3JlZjtcblxuICAgIHZhciBfdGVtcCwgX3RoaXM7XG5cbiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMi5kZWZhdWx0KSh0aGlzLCBab29tKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gKDAsIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMi5kZWZhdWx0KShfdGhpcywgKF90ZW1wID0gX3RoaXMgPSAoMCwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yLmRlZmF1bHQpKHRoaXMsIChfcmVmID0gWm9vbS5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKFpvb20pKS5jYWxsLmFwcGx5KF9yZWYsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMuaGFuZGxlRW50ZXIgPSBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgdmFyIHRoZW1lID0gX3RoaXMucHJvcHMudGhlbWU7XG4gICAgICAoMCwgX3V0aWxzLnJlZmxvdykobm9kZSk7IC8vIFNvIHRoZSBhbmltYXRpb24gYWx3YXlzIHN0YXJ0IGZyb20gdGhlIHN0YXJ0LlxuXG4gICAgICB2YXIgdHJhbnNpdGlvblByb3BzID0gKDAsIF91dGlscy5nZXRUcmFuc2l0aW9uUHJvcHMpKF90aGlzLnByb3BzLCB7XG4gICAgICAgIG1vZGU6ICdlbnRlcidcbiAgICAgIH0pO1xuICAgICAgbm9kZS5zdHlsZS53ZWJraXRUcmFuc2l0aW9uID0gdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCd0cmFuc2Zvcm0nLCB0cmFuc2l0aW9uUHJvcHMpO1xuICAgICAgbm9kZS5zdHlsZS50cmFuc2l0aW9uID0gdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCd0cmFuc2Zvcm0nLCB0cmFuc2l0aW9uUHJvcHMpO1xuXG4gICAgICBpZiAoX3RoaXMucHJvcHMub25FbnRlcikge1xuICAgICAgICBfdGhpcy5wcm9wcy5vbkVudGVyKG5vZGUpO1xuICAgICAgfVxuICAgIH0sIF90aGlzLmhhbmRsZUV4aXQgPSBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgdmFyIHRoZW1lID0gX3RoaXMucHJvcHMudGhlbWU7XG4gICAgICB2YXIgdHJhbnNpdGlvblByb3BzID0gKDAsIF91dGlscy5nZXRUcmFuc2l0aW9uUHJvcHMpKF90aGlzLnByb3BzLCB7XG4gICAgICAgIG1vZGU6ICdleGl0J1xuICAgICAgfSk7XG4gICAgICBub2RlLnN0eWxlLndlYmtpdFRyYW5zaXRpb24gPSB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ3RyYW5zZm9ybScsIHRyYW5zaXRpb25Qcm9wcyk7XG4gICAgICBub2RlLnN0eWxlLnRyYW5zaXRpb24gPSB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ3RyYW5zZm9ybScsIHRyYW5zaXRpb25Qcm9wcyk7XG5cbiAgICAgIGlmIChfdGhpcy5wcm9wcy5vbkV4aXQpIHtcbiAgICAgICAgX3RoaXMucHJvcHMub25FeGl0KG5vZGUpO1xuICAgICAgfVxuICAgIH0sIF90ZW1wKSk7XG4gIH1cblxuICAoMCwgX2NyZWF0ZUNsYXNzMi5kZWZhdWx0KShab29tLCBbe1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgY2hpbGRyZW4gPSBfcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgICAgb25FbnRlciA9IF9wcm9wcy5vbkVudGVyLFxuICAgICAgICAgIG9uRXhpdCA9IF9wcm9wcy5vbkV4aXQsXG4gICAgICAgICAgc3R5bGVQcm9wID0gX3Byb3BzLnN0eWxlLFxuICAgICAgICAgIHRoZW1lID0gX3Byb3BzLnRoZW1lLFxuICAgICAgICAgIG90aGVyID0gKDAsIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIuZGVmYXVsdCkoX3Byb3BzLCBbXCJjaGlsZHJlblwiLCBcIm9uRW50ZXJcIiwgXCJvbkV4aXRcIiwgXCJzdHlsZVwiLCBcInRoZW1lXCJdKTtcbiAgICAgIHZhciBzdHlsZSA9ICgwLCBfb2JqZWN0U3ByZWFkMi5kZWZhdWx0KSh7fSwgc3R5bGVQcm9wLCBfcmVhY3QuZGVmYXVsdC5pc1ZhbGlkRWxlbWVudChjaGlsZHJlbikgPyBjaGlsZHJlbi5wcm9wcy5zdHlsZSA6IHt9KTtcbiAgICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9UcmFuc2l0aW9uLmRlZmF1bHQsICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe1xuICAgICAgICBhcHBlYXI6IHRydWUsXG4gICAgICAgIG9uRW50ZXI6IHRoaXMuaGFuZGxlRW50ZXIsXG4gICAgICAgIG9uRXhpdDogdGhpcy5oYW5kbGVFeGl0XG4gICAgICB9LCBvdGhlciksIGZ1bmN0aW9uIChzdGF0ZSwgY2hpbGRQcm9wcykge1xuICAgICAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY2xvbmVFbGVtZW50KGNoaWxkcmVuLCAoMCwgX29iamVjdFNwcmVhZDIuZGVmYXVsdCkoe1xuICAgICAgICAgIHN0eWxlOiAoMCwgX29iamVjdFNwcmVhZDIuZGVmYXVsdCkoe1xuICAgICAgICAgICAgdHJhbnNmb3JtOiAnc2NhbGUoMCknLFxuICAgICAgICAgICAgd2lsbENoYW5nZTogJ3RyYW5zZm9ybSdcbiAgICAgICAgICB9LCBzdHlsZXNbc3RhdGVdLCBzdHlsZSlcbiAgICAgICAgfSwgY2hpbGRQcm9wcykpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XSk7XG4gIHJldHVybiBab29tO1xufShfcmVhY3QuZGVmYXVsdC5Db21wb25lbnQpO1xuXG5ab29tLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqXG4gICAqIEEgc2luZ2xlIGNoaWxkIGNvbnRlbnQgZWxlbWVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzLmRlZmF1bHQuZWxlbWVudCwgX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmNdKSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgY29tcG9uZW50IHdpbGwgdHJhbnNpdGlvbiBpbi5cbiAgICovXG4gIGluOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25FbnRlcjogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uRXhpdDogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHN0eWxlOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICB0aGVtZTogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBUaGUgZHVyYXRpb24gZm9yIHRoZSB0cmFuc2l0aW9uLCBpbiBtaWxsaXNlY29uZHMuXG4gICAqIFlvdSBtYXkgc3BlY2lmeSBhIHNpbmdsZSB0aW1lb3V0IGZvciBhbGwgdHJhbnNpdGlvbnMsIG9yIGluZGl2aWR1YWxseSB3aXRoIGFuIG9iamVjdC5cbiAgICovXG4gIHRpbWVvdXQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMuZGVmYXVsdC5udW1iZXIsIF9wcm9wVHlwZXMuZGVmYXVsdC5zaGFwZSh7XG4gICAgZW50ZXI6IF9wcm9wVHlwZXMuZGVmYXVsdC5udW1iZXIsXG4gICAgZXhpdDogX3Byb3BUeXBlcy5kZWZhdWx0Lm51bWJlclxuICB9KV0pXG59IDoge307XG5ab29tLmRlZmF1bHRQcm9wcyA9IHtcbiAgdGltZW91dDoge1xuICAgIGVudGVyOiBfdHJhbnNpdGlvbnMuZHVyYXRpb24uZW50ZXJpbmdTY3JlZW4sXG4gICAgZXhpdDogX3RyYW5zaXRpb25zLmR1cmF0aW9uLmxlYXZpbmdTY3JlZW5cbiAgfVxufTtcblxudmFyIF9kZWZhdWx0ID0gKDAsIF93aXRoVGhlbWUuZGVmYXVsdCkoKShab29tKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vaW50ZXJvcFJlcXVpcmVXaWxkY2FyZFwiKTtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9leHRlbmRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9leHRlbmRzXCIpKTtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKTtcblxudmFyIF93aXRoV2lkdGggPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwiLi4vd2l0aFdpZHRoXCIpKTtcblxuLyoqXG4gKiBEaWFsb2cgd2lsbCByZXNwb25zaXZlbHkgYmUgZnVsbCBzY3JlZW4gKmF0IG9yIGJlbG93KiB0aGUgZ2l2ZW4gYnJlYWtwb2ludFxuICogKGRlZmF1bHRzIHRvICdzbScgZm9yIG1vYmlsZSBkZXZpY2VzKS5cbiAqIE5vdGljZSB0aGF0IHRoaXMgSGlnaGVyLW9yZGVyIENvbXBvbmVudCBpcyBpbmNvbXBhdGlibGUgd2l0aCBzZXJ2ZXIgc2lkZSByZW5kZXJpbmcuXG4gKi9cbnZhciB3aXRoTW9iaWxlRGlhbG9nID0gZnVuY3Rpb24gd2l0aE1vYmlsZURpYWxvZygpIHtcbiAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICByZXR1cm4gZnVuY3Rpb24gKENvbXBvbmVudCkge1xuICAgIHZhciBfb3B0aW9ucyRicmVha3BvaW50ID0gb3B0aW9ucy5icmVha3BvaW50LFxuICAgICAgICBicmVha3BvaW50ID0gX29wdGlvbnMkYnJlYWtwb2ludCA9PT0gdm9pZCAwID8gJ3NtJyA6IF9vcHRpb25zJGJyZWFrcG9pbnQ7XG5cbiAgICBmdW5jdGlvbiBXaXRoTW9iaWxlRGlhbG9nKHByb3BzKSB7XG4gICAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChDb21wb25lbnQsICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe1xuICAgICAgICBmdWxsU2NyZWVuOiAoMCwgX3dpdGhXaWR0aC5pc1dpZHRoRG93bikoYnJlYWtwb2ludCwgcHJvcHMud2lkdGgpXG4gICAgICB9LCBwcm9wcykpO1xuICAgIH1cblxuICAgIFdpdGhNb2JpbGVEaWFsb2cucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAgICAgd2lkdGg6IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZihbJ3hzJywgJ3NtJywgJ21kJywgJ2xnJywgJ3hsJ10pLmlzUmVxdWlyZWRcbiAgICB9IDoge307XG4gICAgcmV0dXJuICgwLCBfd2l0aFdpZHRoLmRlZmF1bHQpKCkoV2l0aE1vYmlsZURpYWxvZyk7XG4gIH07XG59O1xuXG52YXIgX2RlZmF1bHQgPSB3aXRoTW9iaWxlRGlhbG9nO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLnN0eWxlcyA9IHZvaWQgMDtcblxudmFyIF9leHRlbmRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9leHRlbmRzXCIpKTtcblxudmFyIF9vYmplY3RTcHJlYWQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL29iamVjdFNwcmVhZFwiKSk7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCIpKTtcblxudmFyIF9jbGFzc0NhbGxDaGVjazIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vY2xhc3NDYWxsQ2hlY2tcIikpO1xuXG52YXIgX2NyZWF0ZUNsYXNzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9jcmVhdGVDbGFzc1wiKSk7XG5cbnZhciBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vcG9zc2libGVDb25zdHJ1Y3RvclJldHVyblwiKSk7XG5cbnZhciBfaW5oZXJpdHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2luaGVyaXRzXCIpKTtcblxudmFyIF9kZWZpbmVQcm9wZXJ0eTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vZGVmaW5lUHJvcGVydHlcIikpO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xuXG52YXIgX3JlYWN0RXZlbnRMaXN0ZW5lciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0LWV2ZW50LWxpc3RlbmVyXCIpKTtcblxudmFyIF9kZWJvdW5jZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImRlYm91bmNlXCIpKTtcblxudmFyIF93YXJuaW5nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwid2FybmluZ1wiKSk7XG5cbnZhciBfY2xhc3NuYW1lcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImNsYXNzbmFtZXNcIikpO1xuXG52YXIgX3JlYWN0UG9wcGVyID0gcmVxdWlyZShcInJlYWN0LXBvcHBlclwiKTtcblxudmFyIF9oZWxwZXJzID0gcmVxdWlyZShcIi4uL3V0aWxzL2hlbHBlcnNcIik7XG5cbnZhciBfUm9vdFJlZiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL1Jvb3RSZWZcIikpO1xuXG52YXIgX1BvcnRhbCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL1BvcnRhbFwiKSk7XG5cbnZhciBfY29tbW9uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vY29sb3JzL2NvbW1vblwiKSk7XG5cbnZhciBfd2l0aFN0eWxlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3N0eWxlcy93aXRoU3R5bGVzXCIpKTtcblxuLyogZXNsaW50LWRpc2FibGUgcmVhY3Qvbm8tbXVsdGktY29tcCwgbm8tdW5kZXJzY29yZS1kYW5nbGUgKi9cbnZhciBzdHlsZXMgPSBmdW5jdGlvbiBzdHlsZXModGhlbWUpIHtcbiAgcmV0dXJuIHtcbiAgICBwb3BwZXI6IHtcbiAgICAgIHpJbmRleDogdGhlbWUuekluZGV4LnRvb2x0aXAsXG4gICAgICBwb2ludGVyRXZlbnRzOiAnbm9uZScsXG4gICAgICAnJiRvcGVuJzoge1xuICAgICAgICBwb2ludGVyRXZlbnRzOiAnYXV0bydcbiAgICAgIH1cbiAgICB9LFxuICAgIG9wZW46IHt9LFxuICAgIHRvb2x0aXA6IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS5ncmV5WzcwMF0sXG4gICAgICBib3JkZXJSYWRpdXM6IDIsXG4gICAgICBjb2xvcjogX2NvbW1vbi5kZWZhdWx0LndoaXRlLFxuICAgICAgZm9udEZhbWlseTogdGhlbWUudHlwb2dyYXBoeS5mb250RmFtaWx5LFxuICAgICAgb3BhY2l0eTogMCxcbiAgICAgIHRyYW5zZm9ybTogJ3NjYWxlKDApJyxcbiAgICAgIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZShbJ29wYWNpdHknLCAndHJhbnNmb3JtJ10sIHtcbiAgICAgICAgZHVyYXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmR1cmF0aW9uLnNob3J0ZXN0LFxuICAgICAgICBlYXNpbmc6IHRoZW1lLnRyYW5zaXRpb25zLmVhc2luZy5lYXNlSW5cbiAgICAgIH0pLFxuICAgICAgbWluSGVpZ2h0OiAwLFxuICAgICAgcGFkZGluZzogXCJcIi5jb25jYXQodGhlbWUuc3BhY2luZy51bml0IC8gMiwgXCJweCBcIikuY29uY2F0KHRoZW1lLnNwYWNpbmcudW5pdCwgXCJweFwiKSxcbiAgICAgIGZvbnRTaXplOiB0aGVtZS50eXBvZ3JhcGh5LnB4VG9SZW0oMTApLFxuICAgICAgbGluZUhlaWdodDogXCJcIi5jb25jYXQodGhlbWUudHlwb2dyYXBoeS5yb3VuZCgxNCAvIDEwKSwgXCJlbVwiKSxcbiAgICAgICcmJG9wZW4nOiB7XG4gICAgICAgIG9wYWNpdHk6IDAuOSxcbiAgICAgICAgdHJhbnNmb3JtOiAnc2NhbGUoMSknLFxuICAgICAgICB0cmFuc2l0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoWydvcGFjaXR5JywgJ3RyYW5zZm9ybSddLCB7XG4gICAgICAgICAgZHVyYXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmR1cmF0aW9uLnNob3J0ZXN0LFxuICAgICAgICAgIGVhc2luZzogdGhlbWUudHJhbnNpdGlvbnMuZWFzaW5nLmVhc2VPdXRcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9LFxuICAgIHRvdWNoOiB7XG4gICAgICBwYWRkaW5nOiBcIlwiLmNvbmNhdCh0aGVtZS5zcGFjaW5nLnVuaXQsIFwicHggXCIpLmNvbmNhdCh0aGVtZS5zcGFjaW5nLnVuaXQgKiAyLCBcInB4XCIpLFxuICAgICAgZm9udFNpemU6IHRoZW1lLnR5cG9ncmFwaHkucHhUb1JlbSgxNCksXG4gICAgICBsaW5lSGVpZ2h0OiBcIlwiLmNvbmNhdCh0aGVtZS50eXBvZ3JhcGh5LnJvdW5kKDE2IC8gMTQpLCBcImVtXCIpXG4gICAgfSxcbiAgICB0b29sdGlwUGxhY2VtZW50TGVmdDogKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoe1xuICAgICAgdHJhbnNmb3JtT3JpZ2luOiAncmlnaHQgY2VudGVyJyxcbiAgICAgIG1hcmdpbjogXCIwIFwiLmNvbmNhdCh0aGVtZS5zcGFjaW5nLnVuaXQgKiAzLCBcInB4XCIpXG4gICAgfSwgdGhlbWUuYnJlYWtwb2ludHMudXAoJ3NtJyksIHtcbiAgICAgIG1hcmdpbjogJzAgMTRweCdcbiAgICB9KSxcbiAgICB0b29sdGlwUGxhY2VtZW50UmlnaHQ6ICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKHtcbiAgICAgIHRyYW5zZm9ybU9yaWdpbjogJ2xlZnQgY2VudGVyJyxcbiAgICAgIG1hcmdpbjogXCIwIFwiLmNvbmNhdCh0aGVtZS5zcGFjaW5nLnVuaXQgKiAzLCBcInB4XCIpXG4gICAgfSwgdGhlbWUuYnJlYWtwb2ludHMudXAoJ3NtJyksIHtcbiAgICAgIG1hcmdpbjogJzAgMTRweCdcbiAgICB9KSxcbiAgICB0b29sdGlwUGxhY2VtZW50VG9wOiAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KSh7XG4gICAgICB0cmFuc2Zvcm1PcmlnaW46ICdjZW50ZXIgYm90dG9tJyxcbiAgICAgIG1hcmdpbjogXCJcIi5jb25jYXQodGhlbWUuc3BhY2luZy51bml0ICogMywgXCJweCAwXCIpXG4gICAgfSwgdGhlbWUuYnJlYWtwb2ludHMudXAoJ3NtJyksIHtcbiAgICAgIG1hcmdpbjogJzE0cHggMCdcbiAgICB9KSxcbiAgICB0b29sdGlwUGxhY2VtZW50Qm90dG9tOiAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KSh7XG4gICAgICB0cmFuc2Zvcm1PcmlnaW46ICdjZW50ZXIgdG9wJyxcbiAgICAgIG1hcmdpbjogXCJcIi5jb25jYXQodGhlbWUuc3BhY2luZy51bml0ICogMywgXCJweCAwXCIpXG4gICAgfSwgdGhlbWUuYnJlYWtwb2ludHMudXAoJ3NtJyksIHtcbiAgICAgIG1hcmdpbjogJzE0cHggMCdcbiAgICB9KVxuICB9O1xufTtcblxuZXhwb3J0cy5zdHlsZXMgPSBzdHlsZXM7XG5cbmZ1bmN0aW9uIGZsaXBQbGFjZW1lbnQocGxhY2VtZW50KSB7XG4gIHN3aXRjaCAocGxhY2VtZW50KSB7XG4gICAgY2FzZSAnYm90dG9tLWVuZCc6XG4gICAgICByZXR1cm4gJ2JvdHRvbS1zdGFydCc7XG5cbiAgICBjYXNlICdib3R0b20tc3RhcnQnOlxuICAgICAgcmV0dXJuICdib3R0b20tZW5kJztcblxuICAgIGNhc2UgJ3RvcC1lbmQnOlxuICAgICAgcmV0dXJuICd0b3Atc3RhcnQnO1xuXG4gICAgY2FzZSAndG9wLXN0YXJ0JzpcbiAgICAgIHJldHVybiAndG9wLWVuZCc7XG5cbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHBsYWNlbWVudDtcbiAgfVxufVxuXG52YXIgVG9vbHRpcCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICAoMCwgX2luaGVyaXRzMi5kZWZhdWx0KShUb29sdGlwLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBUb29sdGlwKHByb3BzKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgKDAsIF9jbGFzc0NhbGxDaGVjazIuZGVmYXVsdCkodGhpcywgVG9vbHRpcCk7XG4gICAgX3RoaXMgPSAoMCwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yLmRlZmF1bHQpKHRoaXMsIChUb29sdGlwLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoVG9vbHRpcCkpLmNhbGwodGhpcywgcHJvcHMpKTtcbiAgICBfdGhpcy5zdGF0ZSA9IHt9O1xuICAgIF90aGlzLmVudGVyVGltZXIgPSBudWxsO1xuICAgIF90aGlzLmxlYXZlVGltZXIgPSBudWxsO1xuICAgIF90aGlzLnRvdWNoVGltZXIgPSBudWxsO1xuICAgIF90aGlzLmNsb3NlVGltZXIgPSBudWxsO1xuICAgIF90aGlzLmlzQ29udHJvbGxlZCA9IG51bGw7XG4gICAgX3RoaXMucG9wcGVyID0gbnVsbDtcbiAgICBfdGhpcy5jaGlsZHJlbiA9IG51bGw7XG4gICAgX3RoaXMuaWdub3JlTm9uVG91Y2hFdmVudHMgPSBmYWxzZTtcbiAgICBfdGhpcy5oYW5kbGVSZXNpemUgPSAoMCwgX2RlYm91bmNlLmRlZmF1bHQpKGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChfdGhpcy5wb3BwZXIpIHtcbiAgICAgICAgX3RoaXMucG9wcGVyLl9wb3BwZXIuc2NoZWR1bGVVcGRhdGUoKTtcbiAgICAgIH1cbiAgICB9LCAxNjYpO1xuXG4gICAgX3RoaXMuaGFuZGxlRW50ZXIgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IF90aGlzLnByb3BzLFxuICAgICAgICAgIGNoaWxkcmVuID0gX3RoaXMkcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgICAgZW50ZXJEZWxheSA9IF90aGlzJHByb3BzLmVudGVyRGVsYXk7XG4gICAgICB2YXIgY2hpbGRyZW5Qcm9wcyA9IGNoaWxkcmVuLnByb3BzO1xuXG4gICAgICBpZiAoZXZlbnQudHlwZSA9PT0gJ2ZvY3VzJyAmJiBjaGlsZHJlblByb3BzLm9uRm9jdXMpIHtcbiAgICAgICAgY2hpbGRyZW5Qcm9wcy5vbkZvY3VzKGV2ZW50KTtcbiAgICAgIH1cblxuICAgICAgaWYgKGV2ZW50LnR5cGUgPT09ICdtb3VzZW92ZXInICYmIGNoaWxkcmVuUHJvcHMub25Nb3VzZU92ZXIpIHtcbiAgICAgICAgY2hpbGRyZW5Qcm9wcy5vbk1vdXNlT3ZlcihldmVudCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChfdGhpcy5pZ25vcmVOb25Ub3VjaEV2ZW50cyAmJiBldmVudC50eXBlICE9PSAndG91Y2hzdGFydCcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBjbGVhclRpbWVvdXQoX3RoaXMuZW50ZXJUaW1lcik7XG4gICAgICBjbGVhclRpbWVvdXQoX3RoaXMubGVhdmVUaW1lcik7XG5cbiAgICAgIGlmIChlbnRlckRlbGF5KSB7XG4gICAgICAgIGV2ZW50LnBlcnNpc3QoKTtcbiAgICAgICAgX3RoaXMuZW50ZXJUaW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIF90aGlzLmhhbmRsZU9wZW4oZXZlbnQpO1xuICAgICAgICB9LCBlbnRlckRlbGF5KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF90aGlzLmhhbmRsZU9wZW4oZXZlbnQpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVPcGVuID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBpZiAoIV90aGlzLmlzQ29udHJvbGxlZCkge1xuICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgb3BlbjogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgaWYgKF90aGlzLnByb3BzLm9uT3Blbikge1xuICAgICAgICBfdGhpcy5wcm9wcy5vbk9wZW4oZXZlbnQsIHRydWUpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVMZWF2ZSA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzMiA9IF90aGlzLnByb3BzLFxuICAgICAgICAgIGNoaWxkcmVuID0gX3RoaXMkcHJvcHMyLmNoaWxkcmVuLFxuICAgICAgICAgIGxlYXZlRGVsYXkgPSBfdGhpcyRwcm9wczIubGVhdmVEZWxheTtcbiAgICAgIHZhciBjaGlsZHJlblByb3BzID0gY2hpbGRyZW4ucHJvcHM7XG5cbiAgICAgIGlmIChldmVudC50eXBlID09PSAnYmx1cicgJiYgY2hpbGRyZW5Qcm9wcy5vbkJsdXIpIHtcbiAgICAgICAgY2hpbGRyZW5Qcm9wcy5vbkJsdXIoZXZlbnQpO1xuICAgICAgfVxuXG4gICAgICBpZiAoZXZlbnQudHlwZSA9PT0gJ21vdXNlbGVhdmUnICYmIGNoaWxkcmVuUHJvcHMub25Nb3VzZUxlYXZlKSB7XG4gICAgICAgIGNoaWxkcmVuUHJvcHMub25Nb3VzZUxlYXZlKGV2ZW50KTtcbiAgICAgIH1cblxuICAgICAgY2xlYXJUaW1lb3V0KF90aGlzLmVudGVyVGltZXIpO1xuICAgICAgY2xlYXJUaW1lb3V0KF90aGlzLmxlYXZlVGltZXIpO1xuXG4gICAgICBpZiAobGVhdmVEZWxheSkge1xuICAgICAgICBldmVudC5wZXJzaXN0KCk7XG4gICAgICAgIF90aGlzLmxlYXZlVGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBfdGhpcy5oYW5kbGVDbG9zZShldmVudCk7XG4gICAgICAgIH0sIGxlYXZlRGVsYXkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX3RoaXMuaGFuZGxlQ2xvc2UoZXZlbnQpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVDbG9zZSA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgaWYgKCFfdGhpcy5pc0NvbnRyb2xsZWQpIHtcbiAgICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgIG9wZW46IGZhbHNlXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBpZiAoX3RoaXMucHJvcHMub25DbG9zZSkge1xuICAgICAgICBfdGhpcy5wcm9wcy5vbkNsb3NlKGV2ZW50LCBmYWxzZSk7XG4gICAgICB9XG5cbiAgICAgIGNsZWFyVGltZW91dChfdGhpcy5jbG9zZVRpbWVyKTtcbiAgICAgIF90aGlzLmNsb3NlVGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMuaWdub3JlTm9uVG91Y2hFdmVudHMgPSBmYWxzZTtcbiAgICAgIH0sIF90aGlzLnByb3BzLnRoZW1lLnRyYW5zaXRpb25zLmR1cmF0aW9uLnNob3J0ZXN0KTtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlVG91Y2hTdGFydCA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgX3RoaXMuaWdub3JlTm9uVG91Y2hFdmVudHMgPSB0cnVlO1xuICAgICAgdmFyIF90aGlzJHByb3BzMyA9IF90aGlzLnByb3BzLFxuICAgICAgICAgIGNoaWxkcmVuID0gX3RoaXMkcHJvcHMzLmNoaWxkcmVuLFxuICAgICAgICAgIGVudGVyVG91Y2hEZWxheSA9IF90aGlzJHByb3BzMy5lbnRlclRvdWNoRGVsYXk7XG4gICAgICB2YXIgY2hpbGRyZW5Qcm9wcyA9IGNoaWxkcmVuLnByb3BzO1xuXG4gICAgICBpZiAoY2hpbGRyZW5Qcm9wcy5vblRvdWNoU3RhcnQpIHtcbiAgICAgICAgY2hpbGRyZW5Qcm9wcy5vblRvdWNoU3RhcnQoZXZlbnQpO1xuICAgICAgfVxuXG4gICAgICBjbGVhclRpbWVvdXQoX3RoaXMubGVhdmVUaW1lcik7XG4gICAgICBjbGVhclRpbWVvdXQoX3RoaXMuY2xvc2VUaW1lcik7XG4gICAgICBjbGVhclRpbWVvdXQoX3RoaXMudG91Y2hUaW1lcik7XG4gICAgICBldmVudC5wZXJzaXN0KCk7XG4gICAgICBfdGhpcy50b3VjaFRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzLmhhbmRsZUVudGVyKGV2ZW50KTtcbiAgICAgIH0sIGVudGVyVG91Y2hEZWxheSk7XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZVRvdWNoRW5kID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHM0ID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgY2hpbGRyZW4gPSBfdGhpcyRwcm9wczQuY2hpbGRyZW4sXG4gICAgICAgICAgbGVhdmVUb3VjaERlbGF5ID0gX3RoaXMkcHJvcHM0LmxlYXZlVG91Y2hEZWxheTtcbiAgICAgIHZhciBjaGlsZHJlblByb3BzID0gY2hpbGRyZW4ucHJvcHM7XG5cbiAgICAgIGlmIChjaGlsZHJlblByb3BzLm9uVG91Y2hFbmQpIHtcbiAgICAgICAgY2hpbGRyZW5Qcm9wcy5vblRvdWNoRW5kKGV2ZW50KTtcbiAgICAgIH1cblxuICAgICAgY2xlYXJUaW1lb3V0KF90aGlzLnRvdWNoVGltZXIpO1xuICAgICAgY2xlYXJUaW1lb3V0KF90aGlzLmxlYXZlVGltZXIpO1xuICAgICAgZXZlbnQucGVyc2lzdCgpO1xuICAgICAgX3RoaXMubGVhdmVUaW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICBfdGhpcy5oYW5kbGVDbG9zZShldmVudCk7XG4gICAgICB9LCBsZWF2ZVRvdWNoRGVsYXkpO1xuICAgIH07XG5cbiAgICBfdGhpcy5pc0NvbnRyb2xsZWQgPSBwcm9wcy5vcGVuICE9IG51bGw7XG5cbiAgICBpZiAoIV90aGlzLmlzQ29udHJvbGxlZCkge1xuICAgICAgLy8gbm90IGNvbnRyb2xsZWQsIHVzZSBpbnRlcm5hbCBzdGF0ZVxuICAgICAgX3RoaXMuc3RhdGUub3BlbiA9IGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gICgwLCBfY3JlYXRlQ2xhc3MyLmRlZmF1bHQpKFRvb2x0aXAsIFt7XG4gICAga2V5OiBcImNvbXBvbmVudERpZE1vdW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gKDAsIF93YXJuaW5nLmRlZmF1bHQpKCF0aGlzLmNoaWxkcmVuIHx8ICF0aGlzLmNoaWxkcmVuLmRpc2FibGVkIHx8ICF0aGlzLmNoaWxkcmVuLnRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ2J1dHRvbicsIFsnTWF0ZXJpYWwtVUk6IHlvdSBhcmUgcHJvdmlkaW5nIGEgZGlzYWJsZWQgYGJ1dHRvbmAgY2hpbGQgdG8gdGhlIFRvb2x0aXAgY29tcG9uZW50LicsICdBIGRpc2FibGVkIGVsZW1lbnQgZG9lcyBub3QgZmlyZSBldmVudHMuJywgXCJUb29sdGlwIG5lZWRzIHRvIGxpc3RlbiB0byB0aGUgY2hpbGQgZWxlbWVudCdzIGV2ZW50cyB0byBkaXNwbGF5IHRoZSB0aXRsZS5cIiwgJycsICdQbGFjZSBhIGBkaXZgIGNvbnRhaW5lciBvbiB0b3Agb2YgdGhlIGVsZW1lbnQuJ10uam9pbignXFxuJykpIDogdm9pZCAwO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJjb21wb25lbnRXaWxsVW5tb3VudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aGlzLmVudGVyVGltZXIpO1xuICAgICAgY2xlYXJUaW1lb3V0KHRoaXMubGVhdmVUaW1lcik7XG4gICAgICBjbGVhclRpbWVvdXQodGhpcy50b3VjaFRpbWVyKTtcbiAgICAgIGNsZWFyVGltZW91dCh0aGlzLmNsb3NlVGltZXIpO1xuICAgICAgdGhpcy5oYW5kbGVSZXNpemUuY2xlYXIoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBjaGlsZHJlbiA9IF9wcm9wcy5jaGlsZHJlbixcbiAgICAgICAgICBjbGFzc2VzID0gX3Byb3BzLmNsYXNzZXMsXG4gICAgICAgICAgY2xhc3NOYW1lID0gX3Byb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgICBkaXNhYmxlRm9jdXNMaXN0ZW5lciA9IF9wcm9wcy5kaXNhYmxlRm9jdXNMaXN0ZW5lcixcbiAgICAgICAgICBkaXNhYmxlSG92ZXJMaXN0ZW5lciA9IF9wcm9wcy5kaXNhYmxlSG92ZXJMaXN0ZW5lcixcbiAgICAgICAgICBkaXNhYmxlVG91Y2hMaXN0ZW5lciA9IF9wcm9wcy5kaXNhYmxlVG91Y2hMaXN0ZW5lcixcbiAgICAgICAgICBlbnRlckRlbGF5ID0gX3Byb3BzLmVudGVyRGVsYXksXG4gICAgICAgICAgZW50ZXJUb3VjaERlbGF5ID0gX3Byb3BzLmVudGVyVG91Y2hEZWxheSxcbiAgICAgICAgICBpZCA9IF9wcm9wcy5pZCxcbiAgICAgICAgICBsZWF2ZURlbGF5ID0gX3Byb3BzLmxlYXZlRGVsYXksXG4gICAgICAgICAgbGVhdmVUb3VjaERlbGF5ID0gX3Byb3BzLmxlYXZlVG91Y2hEZWxheSxcbiAgICAgICAgICBvbkNsb3NlID0gX3Byb3BzLm9uQ2xvc2UsXG4gICAgICAgICAgb25PcGVuID0gX3Byb3BzLm9uT3BlbixcbiAgICAgICAgICBvcGVuUHJvcCA9IF9wcm9wcy5vcGVuLFxuICAgICAgICAgIHBsYWNlbWVudFByb3AgPSBfcHJvcHMucGxhY2VtZW50LFxuICAgICAgICAgIF9wcm9wcyRQb3BwZXJQcm9wcyA9IF9wcm9wcy5Qb3BwZXJQcm9wcztcbiAgICAgIF9wcm9wcyRQb3BwZXJQcm9wcyA9IF9wcm9wcyRQb3BwZXJQcm9wcyA9PT0gdm9pZCAwID8ge30gOiBfcHJvcHMkUG9wcGVyUHJvcHM7XG4gICAgICB2YXIgUG9wcGVyQ2xhc3NOYW1lID0gX3Byb3BzJFBvcHBlclByb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgICBQb3BwZXJQcm9wcyA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyLmRlZmF1bHQpKF9wcm9wcyRQb3BwZXJQcm9wcywgW1wiY2xhc3NOYW1lXCJdKSxcbiAgICAgICAgICB0aGVtZSA9IF9wcm9wcy50aGVtZSxcbiAgICAgICAgICB0aXRsZSA9IF9wcm9wcy50aXRsZSxcbiAgICAgICAgICBvdGhlciA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyLmRlZmF1bHQpKF9wcm9wcywgW1wiY2hpbGRyZW5cIiwgXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwiZGlzYWJsZUZvY3VzTGlzdGVuZXJcIiwgXCJkaXNhYmxlSG92ZXJMaXN0ZW5lclwiLCBcImRpc2FibGVUb3VjaExpc3RlbmVyXCIsIFwiZW50ZXJEZWxheVwiLCBcImVudGVyVG91Y2hEZWxheVwiLCBcImlkXCIsIFwibGVhdmVEZWxheVwiLCBcImxlYXZlVG91Y2hEZWxheVwiLCBcIm9uQ2xvc2VcIiwgXCJvbk9wZW5cIiwgXCJvcGVuXCIsIFwicGxhY2VtZW50XCIsIFwiUG9wcGVyUHJvcHNcIiwgXCJ0aGVtZVwiLCBcInRpdGxlXCJdKTtcbiAgICAgIHZhciBwbGFjZW1lbnQgPSB0aGVtZS5kaXJlY3Rpb24gPT09ICdydGwnID8gZmxpcFBsYWNlbWVudChwbGFjZW1lbnRQcm9wKSA6IHBsYWNlbWVudFByb3A7XG4gICAgICB2YXIgb3BlbiA9IHRoaXMuaXNDb250cm9sbGVkID8gb3BlblByb3AgOiB0aGlzLnN0YXRlLm9wZW47XG4gICAgICB2YXIgY2hpbGRyZW5Qcm9wcyA9IHtcbiAgICAgICAgJ2FyaWEtZGVzY3JpYmVkYnknOiBpZFxuICAgICAgfTsgLy8gVGhlcmUgaXMgbm8gcG9pbnQgYXQgZGlzcGxheWluZyBhbiBlbXB0eSB0b29sdGlwLlxuXG4gICAgICBpZiAodGl0bGUgPT09ICcnKSB7XG4gICAgICAgIG9wZW4gPSBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFkaXNhYmxlVG91Y2hMaXN0ZW5lcikge1xuICAgICAgICBjaGlsZHJlblByb3BzLm9uVG91Y2hTdGFydCA9IHRoaXMuaGFuZGxlVG91Y2hTdGFydDtcbiAgICAgICAgY2hpbGRyZW5Qcm9wcy5vblRvdWNoRW5kID0gdGhpcy5oYW5kbGVUb3VjaEVuZDtcbiAgICAgIH1cblxuICAgICAgaWYgKCFkaXNhYmxlSG92ZXJMaXN0ZW5lcikge1xuICAgICAgICBjaGlsZHJlblByb3BzLm9uTW91c2VPdmVyID0gdGhpcy5oYW5kbGVFbnRlcjtcbiAgICAgICAgY2hpbGRyZW5Qcm9wcy5vbk1vdXNlTGVhdmUgPSB0aGlzLmhhbmRsZUxlYXZlO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWRpc2FibGVGb2N1c0xpc3RlbmVyKSB7XG4gICAgICAgIGNoaWxkcmVuUHJvcHMub25Gb2N1cyA9IHRoaXMuaGFuZGxlRW50ZXI7XG4gICAgICAgIGNoaWxkcmVuUHJvcHMub25CbHVyID0gdGhpcy5oYW5kbGVMZWF2ZTtcbiAgICAgIH1cblxuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gKDAsIF93YXJuaW5nLmRlZmF1bHQpKCFjaGlsZHJlbi5wcm9wcy50aXRsZSwgWydNYXRlcmlhbC1VSTogeW91IGhhdmUgYmVlbiBwcm92aWRpbmcgYSBgdGl0bGVgIHByb3BlcnR5IHRvIHRoZSBjaGlsZCBvZiA8VG9vbHRpcCAvPi4nLCBcIlJlbW92ZSB0aGlzIHRpdGxlIHByb3BlcnR5IGBcIi5jb25jYXQoY2hpbGRyZW4ucHJvcHMudGl0bGUsIFwiYCBvciB0aGUgVG9vbHRpcCBjb21wb25lbnQuXCIpXS5qb2luKCdcXG4nKSkgOiB2b2lkIDA7XG4gICAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3RQb3BwZXIuTWFuYWdlciwgKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7XG4gICAgICAgIHRhZzogZmFsc2VcbiAgICAgIH0sIG90aGVyKSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3RFdmVudExpc3RlbmVyLmRlZmF1bHQsIHtcbiAgICAgICAgdGFyZ2V0OiBcIndpbmRvd1wiLFxuICAgICAgICBvblJlc2l6ZTogdGhpcy5oYW5kbGVSZXNpemVcbiAgICAgIH0pLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdFBvcHBlci5UYXJnZXQsIG51bGwsIGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgICAgIHZhciB0YXJnZXRQcm9wcyA9IF9yZWYudGFyZ2V0UHJvcHM7XG4gICAgICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9Sb290UmVmLmRlZmF1bHQsIHtcbiAgICAgICAgICByb290UmVmOiBmdW5jdGlvbiByb290UmVmKG5vZGUpIHtcbiAgICAgICAgICAgIF90aGlzMi5jaGlsZHJlbiA9IG5vZGU7XG4gICAgICAgICAgICB0YXJnZXRQcm9wcy5yZWYoX3RoaXMyLmNoaWxkcmVuKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNsb25lRWxlbWVudChjaGlsZHJlbiwgY2hpbGRyZW5Qcm9wcykpO1xuICAgICAgfSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX1BvcnRhbC5kZWZhdWx0LCBudWxsLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdFBvcHBlci5Qb3BwZXIsICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe1xuICAgICAgICBwbGFjZW1lbnQ6IHBsYWNlbWVudCxcbiAgICAgICAgZXZlbnRzRW5hYmxlZDogb3BlbixcbiAgICAgICAgY2xhc3NOYW1lOiAoMCwgX2NsYXNzbmFtZXMuZGVmYXVsdCkoY2xhc3Nlcy5wb3BwZXIsICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKHt9LCBjbGFzc2VzLm9wZW4sIG9wZW4pLCBQb3BwZXJDbGFzc05hbWUpLFxuICAgICAgICByZWY6IGZ1bmN0aW9uIHJlZihub2RlKSB7XG4gICAgICAgICAgX3RoaXMyLnBvcHBlciA9IG5vZGU7XG4gICAgICAgIH1cbiAgICAgIH0sIFBvcHBlclByb3BzKSwgZnVuY3Rpb24gKF9yZWYyKSB7XG4gICAgICAgIHZhciBwb3BwZXJQcm9wcyA9IF9yZWYyLnBvcHBlclByb3BzLFxuICAgICAgICAgICAgcmVzdFByb3BzID0gX3JlZjIucmVzdFByb3BzO1xuICAgICAgICB2YXIgYWN0dWFsUGxhY2VtZW50ID0gKHBvcHBlclByb3BzWydkYXRhLXBsYWNlbWVudCddIHx8IHBsYWNlbWVudCkuc3BsaXQoJy0nKVswXTtcbiAgICAgICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7fSwgcG9wcGVyUHJvcHMsIHJlc3RQcm9wcywge1xuICAgICAgICAgIHN0eWxlOiAoMCwgX29iamVjdFNwcmVhZDIuZGVmYXVsdCkoe30sIHBvcHBlclByb3BzLnN0eWxlLCB7XG4gICAgICAgICAgICB0b3A6IHBvcHBlclByb3BzLnN0eWxlLnRvcCB8fCAwLFxuICAgICAgICAgICAgbGVmdDogcG9wcGVyUHJvcHMuc3R5bGUubGVmdCB8fCAwXG4gICAgICAgICAgfSwgcmVzdFByb3BzLnN0eWxlKVxuICAgICAgICB9KSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICAgICAgaWQ6IGlkLFxuICAgICAgICAgIHJvbGU6IFwidG9vbHRpcFwiLFxuICAgICAgICAgIFwiYXJpYS1oaWRkZW5cIjogIW9wZW4sXG4gICAgICAgICAgY2xhc3NOYW1lOiAoMCwgX2NsYXNzbmFtZXMuZGVmYXVsdCkoY2xhc3Nlcy50b29sdGlwLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KSh7fSwgY2xhc3Nlcy5vcGVuLCBvcGVuKSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoe30sIGNsYXNzZXMudG91Y2gsIF90aGlzMi5pZ25vcmVOb25Ub3VjaEV2ZW50cyksIGNsYXNzZXNbXCJ0b29sdGlwUGxhY2VtZW50XCIuY29uY2F0KCgwLCBfaGVscGVycy5jYXBpdGFsaXplKShhY3R1YWxQbGFjZW1lbnQpKV0pXG4gICAgICAgIH0sIHRpdGxlKSk7XG4gICAgICB9KSkpO1xuICAgIH1cbiAgfV0pO1xuICByZXR1cm4gVG9vbHRpcDtcbn0oX3JlYWN0LmRlZmF1bHQuQ29tcG9uZW50KTtcblxuVG9vbHRpcC5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIC8qKlxuICAgKiBUb29sdGlwIHJlZmVyZW5jZSBlbGVtZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IF9wcm9wVHlwZXMuZGVmYXVsdC5lbGVtZW50LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzLWFwaSkgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBEbyBub3QgcmVzcG9uZCB0byBmb2N1cyBldmVudHMuXG4gICAqL1xuICBkaXNhYmxlRm9jdXNMaXN0ZW5lcjogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIERvIG5vdCByZXNwb25kIHRvIGhvdmVyIGV2ZW50cy5cbiAgICovXG4gIGRpc2FibGVIb3Zlckxpc3RlbmVyOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogRG8gbm90IHJlc3BvbmQgdG8gbG9uZyBwcmVzcyB0b3VjaCBldmVudHMuXG4gICAqL1xuICBkaXNhYmxlVG91Y2hMaXN0ZW5lcjogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIHdhaXQgYmVmb3JlIHNob3dpbmcgdGhlIHRvb2x0aXAuXG4gICAqIFRoaXMgcHJvcGVydHkgd29uJ3QgaW1wYWN0IHRoZSBlbnRlciB0b3VjaCBkZWxheSAoYGVudGVyVG91Y2hEZWxheWApLlxuICAgKi9cbiAgZW50ZXJEZWxheTogX3Byb3BUeXBlcy5kZWZhdWx0Lm51bWJlcixcblxuICAvKipcbiAgICogVGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgYSB1c2VyIG11c3QgdG91Y2ggdGhlIGVsZW1lbnQgYmVmb3JlIHNob3dpbmcgdGhlIHRvb2x0aXAuXG4gICAqL1xuICBlbnRlclRvdWNoRGVsYXk6IF9wcm9wVHlwZXMuZGVmYXVsdC5udW1iZXIsXG5cbiAgLyoqXG4gICAqIFRoZSByZWxhdGlvbnNoaXAgYmV0d2VlbiB0aGUgdG9vbHRpcCBhbmQgdGhlIHdyYXBwZXIgY29tcG9uZW50IGlzIG5vdCBjbGVhciBmcm9tIHRoZSBET00uXG4gICAqIEJ5IHByb3ZpZGluZyB0aGlzIHByb3BlcnR5LCB3ZSBjYW4gdXNlIGFyaWEtZGVzY3JpYmVkYnkgdG8gc29sdmUgdGhlIGFjY2Vzc2liaWxpdHkgaXNzdWUuXG4gICAqL1xuICBpZDogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gd2FpdCBiZWZvcmUgaGlkaW5nIHRoZSB0b29sdGlwLlxuICAgKiBUaGlzIHByb3BlcnR5IHdvbid0IGltcGFjdCB0aGUgbGVhdmUgdG91Y2ggZGVsYXkgKGBsZWF2ZVRvdWNoRGVsYXlgKS5cbiAgICovXG4gIGxlYXZlRGVsYXk6IF9wcm9wVHlwZXMuZGVmYXVsdC5udW1iZXIsXG5cbiAgLyoqXG4gICAqIFRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIGFmdGVyIHRoZSB1c2VyIHN0b3BzIHRvdWNoaW5nIGFuIGVsZW1lbnQgYmVmb3JlIGhpZGluZyB0aGUgdG9vbHRpcC5cbiAgICovXG4gIGxlYXZlVG91Y2hEZWxheTogX3Byb3BUeXBlcy5kZWZhdWx0Lm51bWJlcixcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgdG9vbHRpcCByZXF1ZXN0cyB0byBiZSBjbG9zZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBldmVudCBUaGUgZXZlbnQgc291cmNlIG9mIHRoZSBjYWxsYmFja1xuICAgKi9cbiAgb25DbG9zZTogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIHRvb2x0aXAgcmVxdWVzdHMgdG8gYmUgb3Blbi5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGV2ZW50IFRoZSBldmVudCBzb3VyY2Ugb2YgdGhlIGNhbGxiYWNrXG4gICAqL1xuICBvbk9wZW46IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSB0b29sdGlwIGlzIHNob3duLlxuICAgKi9cbiAgb3BlbjogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIFRvb2x0aXAgcGxhY2VtZW50XG4gICAqL1xuICBwbGFjZW1lbnQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZihbJ2JvdHRvbS1lbmQnLCAnYm90dG9tLXN0YXJ0JywgJ2JvdHRvbScsICdsZWZ0LWVuZCcsICdsZWZ0LXN0YXJ0JywgJ2xlZnQnLCAncmlnaHQtZW5kJywgJ3JpZ2h0LXN0YXJ0JywgJ3JpZ2h0JywgJ3RvcC1lbmQnLCAndG9wLXN0YXJ0JywgJ3RvcCddKSxcblxuICAvKipcbiAgICogUHJvcGVydGllcyBhcHBsaWVkIHRvIHRoZSBgUG9wcGVyYCBlbGVtZW50LlxuICAgKi9cbiAgUG9wcGVyUHJvcHM6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHRoZW1lOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIFRvb2x0aXAgdGl0bGUuIFplcm8tbGVuZ3RoIHRpdGxlcyBzdHJpbmcgYXJlIG5ldmVyIGRpc3BsYXllZC5cbiAgICovXG4gIHRpdGxlOiBfcHJvcFR5cGVzLmRlZmF1bHQubm9kZS5pc1JlcXVpcmVkXG59IDoge307XG5Ub29sdGlwLmRlZmF1bHRQcm9wcyA9IHtcbiAgZGlzYWJsZUZvY3VzTGlzdGVuZXI6IGZhbHNlLFxuICBkaXNhYmxlSG92ZXJMaXN0ZW5lcjogZmFsc2UsXG4gIGRpc2FibGVUb3VjaExpc3RlbmVyOiBmYWxzZSxcbiAgZW50ZXJEZWxheTogMCxcbiAgZW50ZXJUb3VjaERlbGF5OiAxMDAwLFxuICBsZWF2ZURlbGF5OiAwLFxuICBsZWF2ZVRvdWNoRGVsYXk6IDE1MDAsXG4gIHBsYWNlbWVudDogJ2JvdHRvbSdcbn07XG5cbnZhciBfZGVmYXVsdCA9ICgwLCBfd2l0aFN0eWxlcy5kZWZhdWx0KShzdHlsZXMsIHtcbiAgbmFtZTogJ011aVRvb2x0aXAnLFxuICB3aXRoVGhlbWU6IHRydWVcbn0pKFRvb2x0aXApO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9leHRlbmRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9leHRlbmRzXCIpKTtcblxudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIikpO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3dhcm5pbmcgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJ3YXJuaW5nXCIpKTtcblxudmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKTtcblxudmFyIF9JbnB1dCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL0lucHV0XCIpKTtcblxudmFyIF9JbnB1dExhYmVsID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vSW5wdXRMYWJlbFwiKSk7XG5cbnZhciBfRm9ybUNvbnRyb2wgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9Gb3JtQ29udHJvbFwiKSk7XG5cbnZhciBfRm9ybUhlbHBlclRleHQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9Gb3JtSGVscGVyVGV4dFwiKSk7XG5cbnZhciBfU2VsZWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vU2VsZWN0XCIpKTtcblxuLy8gQGluaGVyaXRlZENvbXBvbmVudCBGb3JtQ29udHJvbFxuXG4vKipcbiAqIFRoZSBgVGV4dEZpZWxkYCBpcyBhIGNvbnZlbmllbmNlIHdyYXBwZXIgZm9yIHRoZSBtb3N0IGNvbW1vbiBjYXNlcyAoODAlKS5cbiAqIEl0IGNhbm5vdCBiZSBhbGwgdGhpbmdzIHRvIGFsbCBwZW9wbGUsIG90aGVyd2lzZSB0aGUgQVBJIHdvdWxkIGdyb3cgb3V0IG9mIGNvbnRyb2wuXG4gKlxuICogIyMgQWR2YW5jZWQgQ29uZmlndXJhdGlvblxuICpcbiAqIEl0J3MgaW1wb3J0YW50IHRvIHVuZGVyc3RhbmQgdGhhdCB0aGUgdGV4dCBmaWVsZCBpcyBhIHNpbXBsZSBhYnN0cmFjdGlvblxuICogb24gdG9wIG9mIHRoZSBmb2xsb3dpbmcgY29tcG9uZW50czpcbiAqIC0gW0Zvcm1Db250cm9sXSgvYXBpL2Zvcm0tY29udHJvbClcbiAqIC0gW0lucHV0TGFiZWxdKC9hcGkvaW5wdXQtbGFiZWwpXG4gKiAtIFtJbnB1dF0oL2FwaS9pbnB1dClcbiAqIC0gW0Zvcm1IZWxwZXJUZXh0XSgvYXBpL2Zvcm0taGVscGVyLXRleHQpXG4gKlxuICogSWYgeW91IHdpc2ggdG8gYWx0ZXIgdGhlIHByb3BlcnRpZXMgYXBwbGllZCB0byB0aGUgbmF0aXZlIGlucHV0LCB5b3UgY2FuIGRvIHNvIGFzIGZvbGxvd3M6XG4gKlxuICogYGBganN4XG4gKiBjb25zdCBpbnB1dFByb3BzID0ge1xuICogICBzdGVwOiAzMDAsXG4gKiB9O1xuICpcbiAqIHJldHVybiA8VGV4dEZpZWxkIGlkPVwidGltZVwiIHR5cGU9XCJ0aW1lXCIgaW5wdXRQcm9wcz17aW5wdXRQcm9wc30gLz47XG4gKiBgYGBcbiAqXG4gKiBGb3IgYWR2YW5jZWQgY2FzZXMsIHBsZWFzZSBsb29rIGF0IHRoZSBzb3VyY2Ugb2YgVGV4dEZpZWxkIGJ5IGNsaWNraW5nIG9uIHRoZVxuICogXCJFZGl0IHRoaXMgcGFnZVwiIGJ1dHRvbiBhYm92ZS4gQ29uc2lkZXIgZWl0aGVyOlxuICogLSB1c2luZyB0aGUgdXBwZXIgY2FzZSBwcm9wcyBmb3IgcGFzc2luZyB2YWx1ZXMgZGlyZWN0bHkgdG8gdGhlIGNvbXBvbmVudHNcbiAqIC0gdXNpbmcgdGhlIHVuZGVybHlpbmcgY29tcG9uZW50cyBkaXJlY3RseSBhcyBzaG93biBpbiB0aGUgZGVtb3NcbiAqL1xuZnVuY3Rpb24gVGV4dEZpZWxkKHByb3BzKSB7XG4gIHZhciBhdXRvQ29tcGxldGUgPSBwcm9wcy5hdXRvQ29tcGxldGUsXG4gICAgICBhdXRvRm9jdXMgPSBwcm9wcy5hdXRvRm9jdXMsXG4gICAgICBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgZGVmYXVsdFZhbHVlID0gcHJvcHMuZGVmYXVsdFZhbHVlLFxuICAgICAgZGlzYWJsZWQgPSBwcm9wcy5kaXNhYmxlZCxcbiAgICAgIGVycm9yID0gcHJvcHMuZXJyb3IsXG4gICAgICBGb3JtSGVscGVyVGV4dFByb3BzID0gcHJvcHMuRm9ybUhlbHBlclRleHRQcm9wcyxcbiAgICAgIGZ1bGxXaWR0aCA9IHByb3BzLmZ1bGxXaWR0aCxcbiAgICAgIGhlbHBlclRleHQgPSBwcm9wcy5oZWxwZXJUZXh0LFxuICAgICAgaWQgPSBwcm9wcy5pZCxcbiAgICAgIElucHV0TGFiZWxQcm9wcyA9IHByb3BzLklucHV0TGFiZWxQcm9wcyxcbiAgICAgIGlucHV0UHJvcHMgPSBwcm9wcy5pbnB1dFByb3BzLFxuICAgICAgSW5wdXRQcm9wcyA9IHByb3BzLklucHV0UHJvcHMsXG4gICAgICBpbnB1dFJlZiA9IHByb3BzLmlucHV0UmVmLFxuICAgICAgbGFiZWwgPSBwcm9wcy5sYWJlbCxcbiAgICAgIG11bHRpbGluZSA9IHByb3BzLm11bHRpbGluZSxcbiAgICAgIG5hbWUgPSBwcm9wcy5uYW1lLFxuICAgICAgb25CbHVyID0gcHJvcHMub25CbHVyLFxuICAgICAgb25DaGFuZ2UgPSBwcm9wcy5vbkNoYW5nZSxcbiAgICAgIG9uRm9jdXMgPSBwcm9wcy5vbkZvY3VzLFxuICAgICAgcGxhY2Vob2xkZXIgPSBwcm9wcy5wbGFjZWhvbGRlcixcbiAgICAgIHJlcXVpcmVkID0gcHJvcHMucmVxdWlyZWQsXG4gICAgICByb3dzID0gcHJvcHMucm93cyxcbiAgICAgIHJvd3NNYXggPSBwcm9wcy5yb3dzTWF4LFxuICAgICAgc2VsZWN0ID0gcHJvcHMuc2VsZWN0LFxuICAgICAgU2VsZWN0UHJvcHMgPSBwcm9wcy5TZWxlY3RQcm9wcyxcbiAgICAgIHR5cGUgPSBwcm9wcy50eXBlLFxuICAgICAgdmFsdWUgPSBwcm9wcy52YWx1ZSxcbiAgICAgIG90aGVyID0gKDAsIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIuZGVmYXVsdCkocHJvcHMsIFtcImF1dG9Db21wbGV0ZVwiLCBcImF1dG9Gb2N1c1wiLCBcImNoaWxkcmVuXCIsIFwiY2xhc3NOYW1lXCIsIFwiZGVmYXVsdFZhbHVlXCIsIFwiZGlzYWJsZWRcIiwgXCJlcnJvclwiLCBcIkZvcm1IZWxwZXJUZXh0UHJvcHNcIiwgXCJmdWxsV2lkdGhcIiwgXCJoZWxwZXJUZXh0XCIsIFwiaWRcIiwgXCJJbnB1dExhYmVsUHJvcHNcIiwgXCJpbnB1dFByb3BzXCIsIFwiSW5wdXRQcm9wc1wiLCBcImlucHV0UmVmXCIsIFwibGFiZWxcIiwgXCJtdWx0aWxpbmVcIiwgXCJuYW1lXCIsIFwib25CbHVyXCIsIFwib25DaGFuZ2VcIiwgXCJvbkZvY3VzXCIsIFwicGxhY2Vob2xkZXJcIiwgXCJyZXF1aXJlZFwiLCBcInJvd3NcIiwgXCJyb3dzTWF4XCIsIFwic2VsZWN0XCIsIFwiU2VsZWN0UHJvcHNcIiwgXCJ0eXBlXCIsIFwidmFsdWVcIl0pO1xuICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyAoMCwgX3dhcm5pbmcuZGVmYXVsdCkoIXNlbGVjdCB8fCBCb29sZWFuKGNoaWxkcmVuKSwgJ01hdGVyaWFsLVVJOiBgY2hpbGRyZW5gIG11c3QgYmUgcGFzc2VkIHdoZW4gdXNpbmcgdGhlIGBUZXh0RmllbGRgIGNvbXBvbmVudCB3aXRoIGBzZWxlY3RgLicpIDogdm9pZCAwO1xuICB2YXIgaGVscGVyVGV4dElkID0gaGVscGVyVGV4dCAmJiBpZCA/IFwiXCIuY29uY2F0KGlkLCBcIi1oZWxwZXItdGV4dFwiKSA6IHVuZGVmaW5lZDtcblxuICB2YXIgSW5wdXRFbGVtZW50ID0gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfSW5wdXQuZGVmYXVsdCwgKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7XG4gICAgYXV0b0NvbXBsZXRlOiBhdXRvQ29tcGxldGUsXG4gICAgYXV0b0ZvY3VzOiBhdXRvRm9jdXMsXG4gICAgZGVmYXVsdFZhbHVlOiBkZWZhdWx0VmFsdWUsXG4gICAgZGlzYWJsZWQ6IGRpc2FibGVkLFxuICAgIGZ1bGxXaWR0aDogZnVsbFdpZHRoLFxuICAgIG11bHRpbGluZTogbXVsdGlsaW5lLFxuICAgIG5hbWU6IG5hbWUsXG4gICAgcm93czogcm93cyxcbiAgICByb3dzTWF4OiByb3dzTWF4LFxuICAgIHR5cGU6IHR5cGUsXG4gICAgdmFsdWU6IHZhbHVlLFxuICAgIGlkOiBpZCxcbiAgICBpbnB1dFJlZjogaW5wdXRSZWYsXG4gICAgb25CbHVyOiBvbkJsdXIsXG4gICAgb25DaGFuZ2U6IG9uQ2hhbmdlLFxuICAgIG9uRm9jdXM6IG9uRm9jdXMsXG4gICAgcGxhY2Vob2xkZXI6IHBsYWNlaG9sZGVyLFxuICAgIGlucHV0UHJvcHM6IGlucHV0UHJvcHNcbiAgfSwgSW5wdXRQcm9wcykpO1xuXG4gIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9Gb3JtQ29udHJvbC5kZWZhdWx0LCAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHtcbiAgICBcImFyaWEtZGVzY3JpYmVkYnlcIjogaGVscGVyVGV4dElkLFxuICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lLFxuICAgIGVycm9yOiBlcnJvcixcbiAgICBmdWxsV2lkdGg6IGZ1bGxXaWR0aCxcbiAgICByZXF1aXJlZDogcmVxdWlyZWRcbiAgfSwgb3RoZXIpLCBsYWJlbCAmJiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9JbnB1dExhYmVsLmRlZmF1bHQsICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe1xuICAgIGh0bWxGb3I6IGlkXG4gIH0sIElucHV0TGFiZWxQcm9wcyksIGxhYmVsKSwgc2VsZWN0ID8gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfU2VsZWN0LmRlZmF1bHQsICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe1xuICAgIHZhbHVlOiB2YWx1ZSxcbiAgICBpbnB1dDogSW5wdXRFbGVtZW50XG4gIH0sIFNlbGVjdFByb3BzKSwgY2hpbGRyZW4pIDogSW5wdXRFbGVtZW50LCBoZWxwZXJUZXh0ICYmIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX0Zvcm1IZWxwZXJUZXh0LmRlZmF1bHQsICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe1xuICAgIGlkOiBoZWxwZXJUZXh0SWRcbiAgfSwgRm9ybUhlbHBlclRleHRQcm9wcyksIGhlbHBlclRleHQpKTtcbn1cblxuVGV4dEZpZWxkLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqXG4gICAqIFRoaXMgcHJvcGVydHkgaGVscHMgdXNlcnMgdG8gZmlsbCBmb3JtcyBmYXN0ZXIsIGVzcGVjaWFsbHkgb24gbW9iaWxlIGRldmljZXMuXG4gICAqIFRoZSBuYW1lIGNhbiBiZSBjb25mdXNpbmcsIGFzIGl0J3MgbW9yZSBsaWtlIGFuIGF1dG9maWxsLlxuICAgKiBZb3UgY2FuIGxlYXJuIG1vcmUgYWJvdXQgaXQgaGVyZTpcbiAgICogaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZm9ybS1jb250cm9sLWluZnJhc3RydWN0dXJlLmh0bWwjYXV0b2ZpbGxcbiAgICovXG4gIGF1dG9Db21wbGV0ZTogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgaW5wdXQgd2lsbCBiZSBmb2N1c2VkIGR1cmluZyB0aGUgZmlyc3QgbW91bnQuXG4gICAqL1xuICBhdXRvRm9jdXM6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjaGlsZHJlbjogX3Byb3BUeXBlcy5kZWZhdWx0Lm5vZGUsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGRlZmF1bHQgdmFsdWUgb2YgdGhlIGBJbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIGRlZmF1bHRWYWx1ZTogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZywgX3Byb3BUeXBlcy5kZWZhdWx0Lm51bWJlcl0pLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBpbnB1dCB3aWxsIGJlIGRpc2FibGVkLlxuICAgKi9cbiAgZGlzYWJsZWQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBsYWJlbCB3aWxsIGJlIGRpc3BsYXllZCBpbiBhbiBlcnJvciBzdGF0ZS5cbiAgICovXG4gIGVycm9yOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogUHJvcGVydGllcyBhcHBsaWVkIHRvIHRoZSBgRm9ybUhlbHBlclRleHRgIGVsZW1lbnQuXG4gICAqL1xuICBGb3JtSGVscGVyVGV4dFByb3BzOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBpbnB1dCB3aWxsIHRha2UgdXAgdGhlIGZ1bGwgd2lkdGggb2YgaXRzIGNvbnRhaW5lci5cbiAgICovXG4gIGZ1bGxXaWR0aDogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSBoZWxwZXIgdGV4dCBjb250ZW50LlxuICAgKi9cbiAgaGVscGVyVGV4dDogX3Byb3BUeXBlcy5kZWZhdWx0Lm5vZGUsXG5cbiAgLyoqXG4gICAqIFRoZSBpZCBvZiB0aGUgYGlucHV0YCBlbGVtZW50LlxuICAgKiBVc2UgdGhhdCBwcm9wZXJ0eSB0byBtYWtlIGBsYWJlbGAgYW5kIGBoZWxwZXJUZXh0YCBhY2Nlc3NpYmxlIGZvciBzY3JlZW4gcmVhZGVycy5cbiAgICovXG4gIGlkOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBQcm9wZXJ0aWVzIGFwcGxpZWQgdG8gdGhlIGBJbnB1dExhYmVsYCBlbGVtZW50LlxuICAgKi9cbiAgSW5wdXRMYWJlbFByb3BzOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBQcm9wZXJ0aWVzIGFwcGxpZWQgdG8gdGhlIGBJbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIElucHV0UHJvcHM6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QsXG5cbiAgLyoqXG4gICAqIEF0dHJpYnV0ZXMgYXBwbGllZCB0byB0aGUgbmF0aXZlIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIGlucHV0UHJvcHM6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QsXG5cbiAgLyoqXG4gICAqIFVzZSB0aGF0IHByb3BlcnR5IHRvIHBhc3MgYSByZWYgY2FsbGJhY2sgdG8gdGhlIG5hdGl2ZSBpbnB1dCBjb21wb25lbnQuXG4gICAqL1xuICBpbnB1dFJlZjogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsIF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3RdKSxcblxuICAvKipcbiAgICogVGhlIGxhYmVsIGNvbnRlbnQuXG4gICAqL1xuICBsYWJlbDogX3Byb3BUeXBlcy5kZWZhdWx0Lm5vZGUsXG5cbiAgLyoqXG4gICAqIElmIGBkZW5zZWAgb3IgYG5vcm1hbGAsIHdpbGwgYWRqdXN0IHZlcnRpY2FsIHNwYWNpbmcgb2YgdGhpcyBhbmQgY29udGFpbmVkIGNvbXBvbmVudHMuXG4gICAqL1xuICBtYXJnaW46IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZihbJ25vbmUnLCAnZGVuc2UnLCAnbm9ybWFsJ10pLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIGEgdGV4dGFyZWEgZWxlbWVudCB3aWxsIGJlIHJlbmRlcmVkIGluc3RlYWQgb2YgYW4gaW5wdXQuXG4gICAqL1xuICBtdWx0aWxpbmU6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBOYW1lIGF0dHJpYnV0ZSBvZiB0aGUgYGlucHV0YCBlbGVtZW50LlxuICAgKi9cbiAgbmFtZTogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25CbHVyOiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgdmFsdWUgaXMgY2hhbmdlZC5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGV2ZW50IFRoZSBldmVudCBzb3VyY2Ugb2YgdGhlIGNhbGxiYWNrLlxuICAgKiBZb3UgY2FuIHB1bGwgb3V0IHRoZSBuZXcgdmFsdWUgYnkgYWNjZXNzaW5nIGBldmVudC50YXJnZXQudmFsdWVgLlxuICAgKi9cbiAgb25DaGFuZ2U6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkZvY3VzOiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYyxcblxuICAvKipcbiAgICogVGhlIHNob3J0IGhpbnQgZGlzcGxheWVkIGluIHRoZSBpbnB1dCBiZWZvcmUgdGhlIHVzZXIgZW50ZXJzIGEgdmFsdWUuXG4gICAqL1xuICBwbGFjZWhvbGRlcjogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgbGFiZWwgaXMgZGlzcGxheWVkIGFzIHJlcXVpcmVkLlxuICAgKi9cbiAgcmVxdWlyZWQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBOdW1iZXIgb2Ygcm93cyB0byBkaXNwbGF5IHdoZW4gbXVsdGlsaW5lIG9wdGlvbiBpcyBzZXQgdG8gdHJ1ZS5cbiAgICovXG4gIHJvd3M6IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsIF9wcm9wVHlwZXMuZGVmYXVsdC5udW1iZXJdKSxcblxuICAvKipcbiAgICogTWF4aW11bSBudW1iZXIgb2Ygcm93cyB0byBkaXNwbGF5IHdoZW4gbXVsdGlsaW5lIG9wdGlvbiBpcyBzZXQgdG8gdHJ1ZS5cbiAgICovXG4gIHJvd3NNYXg6IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsIF9wcm9wVHlwZXMuZGVmYXVsdC5udW1iZXJdKSxcblxuICAvKipcbiAgICogUmVuZGVyIGEgYFNlbGVjdGAgZWxlbWVudCB3aGlsZSBwYXNzaW5nIHRoZSBgSW5wdXRgIGVsZW1lbnQgdG8gYFNlbGVjdGAgYXMgYGlucHV0YCBwYXJhbWV0ZXIuXG4gICAqIElmIHRoaXMgb3B0aW9uIGlzIHNldCB5b3UgbXVzdCBwYXNzIHRoZSBvcHRpb25zIG9mIHRoZSBzZWxlY3QgYXMgY2hpbGRyZW4uXG4gICAqL1xuICBzZWxlY3Q6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBQcm9wZXJ0aWVzIGFwcGxpZWQgdG8gdGhlIGBTZWxlY3RgIGVsZW1lbnQuXG4gICAqL1xuICBTZWxlY3RQcm9wczogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdCxcblxuICAvKipcbiAgICogVHlwZSBhdHRyaWJ1dGUgb2YgdGhlIGBJbnB1dGAgZWxlbWVudC4gSXQgc2hvdWxkIGJlIGEgdmFsaWQgSFRNTDUgaW5wdXQgdHlwZS5cbiAgICovXG4gIHR5cGU6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSB2YWx1ZSBvZiB0aGUgYElucHV0YCBlbGVtZW50LCByZXF1aXJlZCBmb3IgYSBjb250cm9sbGVkIGNvbXBvbmVudC5cbiAgICovXG4gIHZhbHVlOiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLCBfcHJvcFR5cGVzLmRlZmF1bHQubnVtYmVyLCBfcHJvcFR5cGVzLmRlZmF1bHQuYXJyYXlPZihfcHJvcFR5cGVzLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLCBfcHJvcFR5cGVzLmRlZmF1bHQubnVtYmVyXSkpXSlcbn0gOiB7fTtcblRleHRGaWVsZC5kZWZhdWx0UHJvcHMgPSB7XG4gIHJlcXVpcmVkOiBmYWxzZSxcbiAgc2VsZWN0OiBmYWxzZVxufTtcbnZhciBfZGVmYXVsdCA9IFRleHRGaWVsZDtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5zdHlsZXMgPSB2b2lkIDA7XG5cbnZhciBfZXh0ZW5kczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vZXh0ZW5kc1wiKSk7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCIpKTtcblxudmFyIF9jbGFzc0NhbGxDaGVjazIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vY2xhc3NDYWxsQ2hlY2tcIikpO1xuXG52YXIgX2NyZWF0ZUNsYXNzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9jcmVhdGVDbGFzc1wiKSk7XG5cbnZhciBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vcG9zc2libGVDb25zdHJ1Y3RvclJldHVyblwiKSk7XG5cbnZhciBfaW5oZXJpdHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2luaGVyaXRzXCIpKTtcblxudmFyIF9kZWZpbmVQcm9wZXJ0eTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vZGVmaW5lUHJvcGVydHlcIikpO1xuXG52YXIgX29iamVjdFNwcmVhZDMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vb2JqZWN0U3ByZWFkXCIpKTtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKTtcblxudmFyIF9jbGFzc25hbWVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY2xhc3NuYW1lc1wiKSk7XG5cbnZhciBfd2l0aFN0eWxlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3N0eWxlcy93aXRoU3R5bGVzXCIpKTtcblxudmFyIF9CdXR0b25CYXNlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vQnV0dG9uQmFzZVwiKSk7XG5cbnZhciBfaGVscGVycyA9IHJlcXVpcmUoXCIuLi91dGlscy9oZWxwZXJzXCIpO1xuXG4vLyBAaW5oZXJpdGVkQ29tcG9uZW50IEJ1dHRvbkJhc2VcbnZhciBzdHlsZXMgPSBmdW5jdGlvbiBzdHlsZXModGhlbWUpIHtcbiAgcmV0dXJuIHtcbiAgICByb290OiAoMCwgX29iamVjdFNwcmVhZDMuZGVmYXVsdCkoe30sIHRoZW1lLnR5cG9ncmFwaHkuYnV0dG9uLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KSh7XG4gICAgICBtYXhXaWR0aDogMjY0LFxuICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgICBtaW5XaWR0aDogNzIsXG4gICAgICBwYWRkaW5nOiAwLFxuICAgICAgbWluSGVpZ2h0OiA0OCxcbiAgICAgIGZsZXhTaHJpbms6IDAsXG4gICAgICBvdmVyZmxvdzogJ2hpZGRlbidcbiAgICB9LCB0aGVtZS5icmVha3BvaW50cy51cCgnbWQnKSwge1xuICAgICAgbWluV2lkdGg6IDE2MFxuICAgIH0pKSxcbiAgICBsYWJlbEljb246IHtcbiAgICAgIG1pbkhlaWdodDogNzJcbiAgICB9LFxuICAgIHRleHRDb2xvckluaGVyaXQ6IHtcbiAgICAgIGNvbG9yOiAnaW5oZXJpdCcsXG4gICAgICBvcGFjaXR5OiAwLjcsXG4gICAgICAnJiRzZWxlY3RlZCc6IHtcbiAgICAgICAgb3BhY2l0eTogMVxuICAgICAgfSxcbiAgICAgICcmJGRpc2FibGVkJzoge1xuICAgICAgICBvcGFjaXR5OiAwLjRcbiAgICAgIH1cbiAgICB9LFxuICAgIHRleHRDb2xvclByaW1hcnk6IHtcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnRleHQuc2Vjb25kYXJ5LFxuICAgICAgJyYkc2VsZWN0ZWQnOiB7XG4gICAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnByaW1hcnkubWFpblxuICAgICAgfSxcbiAgICAgICcmJGRpc2FibGVkJzoge1xuICAgICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS50ZXh0LmRpc2FibGVkXG4gICAgICB9XG4gICAgfSxcbiAgICB0ZXh0Q29sb3JTZWNvbmRhcnk6IHtcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnRleHQuc2Vjb25kYXJ5LFxuICAgICAgJyYkc2VsZWN0ZWQnOiB7XG4gICAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnNlY29uZGFyeS5tYWluXG4gICAgICB9LFxuICAgICAgJyYkZGlzYWJsZWQnOiB7XG4gICAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnRleHQuZGlzYWJsZWRcbiAgICAgIH1cbiAgICB9LFxuICAgIHNlbGVjdGVkOiB7fSxcbiAgICBkaXNhYmxlZDoge30sXG4gICAgZnVsbFdpZHRoOiB7XG4gICAgICBmbGV4U2hyaW5rOiAxLFxuICAgICAgZmxleEdyb3c6IDFcbiAgICB9LFxuICAgIHdyYXBwZXI6IHtcbiAgICAgIGRpc3BsYXk6ICdpbmxpbmUtZmxleCcsXG4gICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcbiAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICBmbGV4RGlyZWN0aW9uOiAnY29sdW1uJ1xuICAgIH0sXG4gICAgbGFiZWxDb250YWluZXI6ICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKHtcbiAgICAgIHBhZGRpbmdUb3A6IDYsXG4gICAgICBwYWRkaW5nQm90dG9tOiA2LFxuICAgICAgcGFkZGluZ0xlZnQ6IDEyLFxuICAgICAgcGFkZGluZ1JpZ2h0OiAxMlxuICAgIH0sIHRoZW1lLmJyZWFrcG9pbnRzLnVwKCdtZCcpLCB7XG4gICAgICBwYWRkaW5nTGVmdDogdGhlbWUuc3BhY2luZy51bml0ICogMyxcbiAgICAgIHBhZGRpbmdSaWdodDogdGhlbWUuc3BhY2luZy51bml0ICogM1xuICAgIH0pLFxuICAgIGxhYmVsOiAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KSh7XG4gICAgICBmb250U2l6ZTogdGhlbWUudHlwb2dyYXBoeS5weFRvUmVtKDE0KSxcbiAgICAgIHdoaXRlU3BhY2U6ICdub3JtYWwnXG4gICAgfSwgdGhlbWUuYnJlYWtwb2ludHMudXAoJ21kJyksIHtcbiAgICAgIGZvbnRTaXplOiB0aGVtZS50eXBvZ3JhcGh5LnB4VG9SZW0oMTMpXG4gICAgfSksXG4gICAgbGFiZWxXcmFwcGVkOiAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KSh7fSwgdGhlbWUuYnJlYWtwb2ludHMuZG93bignc20nKSwge1xuICAgICAgZm9udFNpemU6IHRoZW1lLnR5cG9ncmFwaHkucHhUb1JlbSgxMilcbiAgICB9KVxuICB9O1xufTtcblxuZXhwb3J0cy5zdHlsZXMgPSBzdHlsZXM7XG5cbnZhciBUYWIgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgKDAsIF9pbmhlcml0czIuZGVmYXVsdCkoVGFiLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBUYWIoKSB7XG4gICAgdmFyIF9yZWY7XG5cbiAgICB2YXIgX3RlbXAsIF90aGlzO1xuXG4gICAgKDAsIF9jbGFzc0NhbGxDaGVjazIuZGVmYXVsdCkodGhpcywgVGFiKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gKDAsIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMi5kZWZhdWx0KShfdGhpcywgKF90ZW1wID0gX3RoaXMgPSAoMCwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yLmRlZmF1bHQpKHRoaXMsIChfcmVmID0gVGFiLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoVGFiKSkuY2FsbC5hcHBseShfcmVmLCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzLnN0YXRlID0ge1xuICAgICAgbGFiZWxXcmFwcGVkOiBmYWxzZVxuICAgIH0sIF90aGlzLmhhbmRsZUNoYW5nZSA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgb25DaGFuZ2UgPSBfdGhpcyRwcm9wcy5vbkNoYW5nZSxcbiAgICAgICAgICB2YWx1ZSA9IF90aGlzJHByb3BzLnZhbHVlLFxuICAgICAgICAgIG9uQ2xpY2sgPSBfdGhpcyRwcm9wcy5vbkNsaWNrO1xuXG4gICAgICBpZiAob25DaGFuZ2UpIHtcbiAgICAgICAgb25DaGFuZ2UoZXZlbnQsIHZhbHVlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKG9uQ2xpY2spIHtcbiAgICAgICAgb25DbGljayhldmVudCk7XG4gICAgICB9XG4gICAgfSwgX3RoaXMubGFiZWwgPSB1bmRlZmluZWQsIF90aGlzLmNoZWNrVGV4dFdyYXAgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoX3RoaXMubGFiZWwpIHtcbiAgICAgICAgdmFyIGxhYmVsV3JhcHBlZCA9IF90aGlzLmxhYmVsLmdldENsaWVudFJlY3RzKCkubGVuZ3RoID4gMTtcblxuICAgICAgICBpZiAoX3RoaXMuc3RhdGUubGFiZWxXcmFwcGVkICE9PSBsYWJlbFdyYXBwZWQpIHtcbiAgICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBsYWJlbFdyYXBwZWQ6IGxhYmVsV3JhcHBlZFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwgX3RlbXApKTtcbiAgfVxuXG4gICgwLCBfY3JlYXRlQ2xhc3MyLmRlZmF1bHQpKFRhYiwgW3tcbiAgICBrZXk6IFwiY29tcG9uZW50RGlkTW91bnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICB0aGlzLmNoZWNrVGV4dFdyYXAoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY29tcG9uZW50RGlkVXBkYXRlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMsIHByZXZTdGF0ZSkge1xuICAgICAgaWYgKHRoaXMuc3RhdGUubGFiZWxXcmFwcGVkID09PSBwcmV2U3RhdGUubGFiZWxXcmFwcGVkKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBdCBjZXJ0YWluIHRleHQgYW5kIHRhYiBsZW5ndGhzLCBhIGxhcmdlciBmb250IHNpemUgbWF5IHdyYXAgdG8gdHdvIGxpbmVzIHdoaWxlIHRoZSBzbWFsbGVyXG4gICAgICAgICAqIGZvbnQgc2l6ZSBzdGlsbCBvbmx5IHJlcXVpcmVzIG9uZSBsaW5lLiAgVGhpcyBjaGVjayB3aWxsIHByZXZlbnQgYW4gaW5maW5pdGUgcmVuZGVyIGxvb3BcbiAgICAgICAgICogZnJvbiBvY2N1cnJpbmcgaW4gdGhhdCBzY2VuYXJpby5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuY2hlY2tUZXh0V3JhcCgpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXMsXG4gICAgICAgICAgX2NsYXNzTmFtZXMyO1xuXG4gICAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBjbGFzc2VzID0gX3Byb3BzLmNsYXNzZXMsXG4gICAgICAgICAgY2xhc3NOYW1lUHJvcCA9IF9wcm9wcy5jbGFzc05hbWUsXG4gICAgICAgICAgZGlzYWJsZWQgPSBfcHJvcHMuZGlzYWJsZWQsXG4gICAgICAgICAgZnVsbFdpZHRoID0gX3Byb3BzLmZ1bGxXaWR0aCxcbiAgICAgICAgICBpY29uID0gX3Byb3BzLmljb24sXG4gICAgICAgICAgaW5kaWNhdG9yID0gX3Byb3BzLmluZGljYXRvcixcbiAgICAgICAgICBsYWJlbFByb3AgPSBfcHJvcHMubGFiZWwsXG4gICAgICAgICAgb25DaGFuZ2UgPSBfcHJvcHMub25DaGFuZ2UsXG4gICAgICAgICAgc2VsZWN0ZWQgPSBfcHJvcHMuc2VsZWN0ZWQsXG4gICAgICAgICAgdGV4dENvbG9yID0gX3Byb3BzLnRleHRDb2xvcixcbiAgICAgICAgICB2YWx1ZSA9IF9wcm9wcy52YWx1ZSxcbiAgICAgICAgICBvdGhlciA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyLmRlZmF1bHQpKF9wcm9wcywgW1wiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcImRpc2FibGVkXCIsIFwiZnVsbFdpZHRoXCIsIFwiaWNvblwiLCBcImluZGljYXRvclwiLCBcImxhYmVsXCIsIFwib25DaGFuZ2VcIiwgXCJzZWxlY3RlZFwiLCBcInRleHRDb2xvclwiLCBcInZhbHVlXCJdKTtcbiAgICAgIHZhciBsYWJlbDtcblxuICAgICAgaWYgKGxhYmVsUHJvcCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGxhYmVsID0gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcInNwYW5cIiwge1xuICAgICAgICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5sYWJlbENvbnRhaW5lclxuICAgICAgICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7XG4gICAgICAgICAgY2xhc3NOYW1lOiAoMCwgX2NsYXNzbmFtZXMuZGVmYXVsdCkoY2xhc3Nlcy5sYWJlbCwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoe30sIGNsYXNzZXMubGFiZWxXcmFwcGVkLCB0aGlzLnN0YXRlLmxhYmVsV3JhcHBlZCkpLFxuICAgICAgICAgIHJlZjogZnVuY3Rpb24gcmVmKG5vZGUpIHtcbiAgICAgICAgICAgIF90aGlzMi5sYWJlbCA9IG5vZGU7XG4gICAgICAgICAgfVxuICAgICAgICB9LCBsYWJlbFByb3ApKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGNsYXNzTmFtZSA9ICgwLCBfY2xhc3NuYW1lcy5kZWZhdWx0KShjbGFzc2VzLnJvb3QsIGNsYXNzZXNbXCJ0ZXh0Q29sb3JcIi5jb25jYXQoKDAsIF9oZWxwZXJzLmNhcGl0YWxpemUpKHRleHRDb2xvcikpXSwgKF9jbGFzc05hbWVzMiA9IHt9LCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lczIsIGNsYXNzZXMuZGlzYWJsZWQsIGRpc2FibGVkKSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2NsYXNzTmFtZXMyLCBjbGFzc2VzLnNlbGVjdGVkLCBzZWxlY3RlZCksICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKF9jbGFzc05hbWVzMiwgY2xhc3Nlcy5sYWJlbEljb24sIGljb24gJiYgbGFiZWwpLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lczIsIGNsYXNzZXMuZnVsbFdpZHRoLCBmdWxsV2lkdGgpLCBfY2xhc3NOYW1lczIpLCBjbGFzc05hbWVQcm9wKTtcbiAgICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9CdXR0b25CYXNlLmRlZmF1bHQsICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe1xuICAgICAgICBmb2N1c1JpcHBsZTogdHJ1ZSxcbiAgICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWUsXG4gICAgICAgIHJvbGU6IFwidGFiXCIsXG4gICAgICAgIFwiYXJpYS1zZWxlY3RlZFwiOiBzZWxlY3RlZCxcbiAgICAgICAgZGlzYWJsZWQ6IGRpc2FibGVkXG4gICAgICB9LCBvdGhlciwge1xuICAgICAgICBvbkNsaWNrOiB0aGlzLmhhbmRsZUNoYW5nZVxuICAgICAgfSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzLndyYXBwZXJcbiAgICAgIH0sIGljb24sIGxhYmVsKSwgaW5kaWNhdG9yKTtcbiAgICB9XG4gIH1dKTtcbiAgcmV0dXJuIFRhYjtcbn0oX3JlYWN0LmRlZmF1bHQuQ29tcG9uZW50KTtcblxuVGFiLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzLWFwaSkgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSB0YWIgd2lsbCBiZSBkaXNhYmxlZC5cbiAgICovXG4gIGRpc2FibGVkOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgZnVsbFdpZHRoOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogVGhlIGljb24gZWxlbWVudC5cbiAgICovXG4gIGljb246IF9wcm9wVHlwZXMuZGVmYXVsdC5ub2RlLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqIEZvciBzZXJ2ZXIgc2lkZSByZW5kZXJpbmcgY29uc2lkZXJhdGlvbiwgd2UgbGV0IHRoZSBzZWxlY3RlZCB0YWJcbiAgICogcmVuZGVyIHRoZSBpbmRpY2F0b3IuXG4gICAqL1xuICBpbmRpY2F0b3I6IF9wcm9wVHlwZXMuZGVmYXVsdC5ub2RlLFxuXG4gIC8qKlxuICAgKiBUaGUgbGFiZWwgZWxlbWVudC5cbiAgICovXG4gIGxhYmVsOiBfcHJvcFR5cGVzLmRlZmF1bHQubm9kZSxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25DaGFuZ2U6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkNsaWNrOiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgc2VsZWN0ZWQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICB0ZXh0Q29sb3I6IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZihbJ3NlY29uZGFyeScsICdwcmltYXJ5JywgJ2luaGVyaXQnXSksXG5cbiAgLyoqXG4gICAqIFlvdSBjYW4gcHJvdmlkZSB5b3VyIG93biB2YWx1ZS4gT3RoZXJ3aXNlLCB3ZSBmYWxsYmFjayB0byB0aGUgY2hpbGQgcG9zaXRpb24gaW5kZXguXG4gICAqL1xuICB2YWx1ZTogX3Byb3BUeXBlcy5kZWZhdWx0LmFueVxufSA6IHt9O1xuVGFiLmRlZmF1bHRQcm9wcyA9IHtcbiAgZGlzYWJsZWQ6IGZhbHNlLFxuICB0ZXh0Q29sb3I6ICdpbmhlcml0J1xufTtcblxudmFyIF9kZWZhdWx0ID0gKDAsIF93aXRoU3R5bGVzLmRlZmF1bHQpKHN0eWxlcywge1xuICBuYW1lOiAnTXVpVGFiJ1xufSkoVGFiKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLnN0eWxlcyA9IHZvaWQgMDtcblxudmFyIF9leHRlbmRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9leHRlbmRzXCIpKTtcblxudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIikpO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xuXG52YXIgX2NsYXNzbmFtZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJjbGFzc25hbWVzXCIpKTtcblxudmFyIF9LZXlib2FyZEFycm93TGVmdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL2ludGVybmFsL3N2Zy1pY29ucy9LZXlib2FyZEFycm93TGVmdFwiKSk7XG5cbnZhciBfS2V5Ym9hcmRBcnJvd1JpZ2h0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vaW50ZXJuYWwvc3ZnLWljb25zL0tleWJvYXJkQXJyb3dSaWdodFwiKSk7XG5cbnZhciBfd2l0aFN0eWxlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3N0eWxlcy93aXRoU3R5bGVzXCIpKTtcblxudmFyIF9CdXR0b25CYXNlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vQnV0dG9uQmFzZVwiKSk7XG5cbnZhciBzdHlsZXMgPSBmdW5jdGlvbiBzdHlsZXModGhlbWUpIHtcbiAgcmV0dXJuIHtcbiAgICByb290OiB7XG4gICAgICBjb2xvcjogJ2luaGVyaXQnLFxuICAgICAgZmxleDogXCIwIDAgXCIuY29uY2F0KHRoZW1lLnNwYWNpbmcudW5pdCAqIDcsIFwicHhcIilcbiAgICB9XG4gIH07XG59O1xuLyoqXG4gKiBAaWdub3JlIC0gaW50ZXJuYWwgY29tcG9uZW50LlxuICovXG5cblxuZXhwb3J0cy5zdHlsZXMgPSBzdHlsZXM7XG5cbnZhciBfcmVmID0gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfS2V5Ym9hcmRBcnJvd0xlZnQuZGVmYXVsdCwgbnVsbCk7XG5cbnZhciBfcmVmMiA9IF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX0tleWJvYXJkQXJyb3dSaWdodC5kZWZhdWx0LCBudWxsKTtcblxuZnVuY3Rpb24gVGFiU2Nyb2xsQnV0dG9uKHByb3BzKSB7XG4gIHZhciBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZVByb3AgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBkaXJlY3Rpb24gPSBwcm9wcy5kaXJlY3Rpb24sXG4gICAgICBvbkNsaWNrID0gcHJvcHMub25DbGljayxcbiAgICAgIHZpc2libGUgPSBwcm9wcy52aXNpYmxlLFxuICAgICAgb3RoZXIgPSAoMCwgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMi5kZWZhdWx0KShwcm9wcywgW1wiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcImRpcmVjdGlvblwiLCBcIm9uQ2xpY2tcIiwgXCJ2aXNpYmxlXCJdKTtcbiAgdmFyIGNsYXNzTmFtZSA9ICgwLCBfY2xhc3NuYW1lcy5kZWZhdWx0KShjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZVByb3ApO1xuXG4gIGlmICghdmlzaWJsZSkge1xuICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lXG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfQnV0dG9uQmFzZS5kZWZhdWx0LCAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHtcbiAgICBjbGFzc05hbWU6IGNsYXNzTmFtZSxcbiAgICBvbkNsaWNrOiBvbkNsaWNrLFxuICAgIHRhYkluZGV4OiAtMVxuICB9LCBvdGhlciksIGRpcmVjdGlvbiA9PT0gJ2xlZnQnID8gX3JlZiA6IF9yZWYyKTtcbn1cblxuVGFiU2Nyb2xsQnV0dG9uLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzLWFwaSkgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBXaGljaCBkaXJlY3Rpb24gc2hvdWxkIHRoZSBidXR0b24gaW5kaWNhdGU/XG4gICAqL1xuICBkaXJlY3Rpb246IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZihbJ2xlZnQnLCAncmlnaHQnXSksXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIHRvIGV4ZWN1dGUgZm9yIGJ1dHRvbiBwcmVzcy5cbiAgICovXG4gIG9uQ2xpY2s6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBTaG91bGQgdGhlIGJ1dHRvbiBiZSBwcmVzZW50IG9yIGp1c3QgY29uc3VtZSBzcGFjZS5cbiAgICovXG4gIHZpc2libGU6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sXG59IDoge307XG5UYWJTY3JvbGxCdXR0b24uZGVmYXVsdFByb3BzID0ge1xuICB2aXNpYmxlOiB0cnVlXG59O1xuXG52YXIgX2RlZmF1bHQgPSAoMCwgX3dpdGhTdHlsZXMuZGVmYXVsdCkoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlUYWJTY3JvbGxCdXR0b24nXG59KShUYWJTY3JvbGxCdXR0b24pO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuc3R5bGVzID0gdm9pZCAwO1xuXG52YXIgX2V4dGVuZHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2V4dGVuZHNcIikpO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiKSk7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbnZhciBfY2xhc3NuYW1lcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImNsYXNzbmFtZXNcIikpO1xuXG52YXIgX3dpdGhTdHlsZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9zdHlsZXMvd2l0aFN0eWxlc1wiKSk7XG5cbnZhciBfaGVscGVycyA9IHJlcXVpcmUoXCIuLi91dGlscy9oZWxwZXJzXCIpO1xuXG52YXIgc3R5bGVzID0gZnVuY3Rpb24gc3R5bGVzKHRoZW1lKSB7XG4gIHJldHVybiB7XG4gICAgcm9vdDoge1xuICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICBoZWlnaHQ6IDIsXG4gICAgICBib3R0b206IDAsXG4gICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgdHJhbnNpdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCksXG4gICAgICB3aWxsQ2hhbmdlOiAnbGVmdCwgd2lkdGgnXG4gICAgfSxcbiAgICBjb2xvclByaW1hcnk6IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS5wcmltYXJ5Lm1haW5cbiAgICB9LFxuICAgIGNvbG9yU2Vjb25kYXJ5OiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUuc2Vjb25kYXJ5Lm1haW5cbiAgICB9XG4gIH07XG59O1xuLyoqXG4gKiBAaWdub3JlIC0gaW50ZXJuYWwgY29tcG9uZW50LlxuICovXG5cblxuZXhwb3J0cy5zdHlsZXMgPSBzdHlsZXM7XG5cbmZ1bmN0aW9uIFRhYkluZGljYXRvcihwcm9wcykge1xuICB2YXIgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBjb2xvciA9IHByb3BzLmNvbG9yLFxuICAgICAgb3RoZXIgPSAoMCwgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMi5kZWZhdWx0KShwcm9wcywgW1wiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcImNvbG9yXCJdKTtcbiAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe1xuICAgIGNsYXNzTmFtZTogKDAsIF9jbGFzc25hbWVzLmRlZmF1bHQpKGNsYXNzZXMucm9vdCwgY2xhc3Nlc1tcImNvbG9yXCIuY29uY2F0KCgwLCBfaGVscGVycy5jYXBpdGFsaXplKShjb2xvcikpXSwgY2xhc3NOYW1lKVxuICB9LCBvdGhlcikpO1xufVxuXG5UYWJJbmRpY2F0b3IucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MtYXBpKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICogVGhlIGNvbG9yIG9mIHRoZSB0YWIgaW5kaWNhdG9yLlxuICAgKi9cbiAgY29sb3I6IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZihbJ3ByaW1hcnknLCAnc2Vjb25kYXJ5J10pXG59IDoge307XG5cbnZhciBfZGVmYXVsdCA9ICgwLCBfd2l0aFN0eWxlcy5kZWZhdWx0KShzdHlsZXMpKFRhYkluZGljYXRvcik7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX2NsYXNzQ2FsbENoZWNrMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9jbGFzc0NhbGxDaGVja1wiKSk7XG5cbnZhciBfY3JlYXRlQ2xhc3MyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2NyZWF0ZUNsYXNzXCIpKTtcblxudmFyIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuXCIpKTtcblxudmFyIF9pbmhlcml0czIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vaW5oZXJpdHNcIikpO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xuXG52YXIgX3JlYWN0RXZlbnRMaXN0ZW5lciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0LWV2ZW50LWxpc3RlbmVyXCIpKTtcblxudmFyIF9kZWJvdW5jZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImRlYm91bmNlXCIpKTtcblxudmFyIHN0eWxlcyA9IHtcbiAgd2lkdGg6ICcxMDBweCcsXG4gIGhlaWdodDogJzEwMHB4JyxcbiAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gIHRvcDogJy0xMDAwMHB4JyxcbiAgb3ZlcmZsb3c6ICdzY3JvbGwnLFxuICBtc092ZXJmbG93U3R5bGU6ICdzY3JvbGxiYXInXG59O1xuLyoqXG4gKiBAaWdub3JlIC0gaW50ZXJuYWwgY29tcG9uZW50LlxuICogVGhlIGNvbXBvbmVudCBpcyBvcmlnaW5hdGVzIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL1NUT1JJUy9yZWFjdC1zY3JvbGxiYXItc2l6ZS5cbiAqIEl0IGhhcyBiZWVuIG1vdmVkIGludG8gdGhlIGNvcmUgaW4gb3JkZXIgdG8gbWluaW1pemUgdGhlIGJ1bmRsZSBzaXplLlxuICovXG5cbnZhciBTY3JvbGxiYXJTaXplID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gICgwLCBfaW5oZXJpdHMyLmRlZmF1bHQpKFNjcm9sbGJhclNpemUsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFNjcm9sbGJhclNpemUoKSB7XG4gICAgdmFyIF9yZWY7XG5cbiAgICB2YXIgX3RlbXAsIF90aGlzO1xuXG4gICAgKDAsIF9jbGFzc0NhbGxDaGVjazIuZGVmYXVsdCkodGhpcywgU2Nyb2xsYmFyU2l6ZSk7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuICgwLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIuZGVmYXVsdCkoX3RoaXMsIChfdGVtcCA9IF90aGlzID0gKDAsIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMi5kZWZhdWx0KSh0aGlzLCAoX3JlZiA9IFNjcm9sbGJhclNpemUuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihTY3JvbGxiYXJTaXplKSkuY2FsbC5hcHBseShfcmVmLCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzLnNldE1lYXN1cmVtZW50cyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICghX3RoaXMubm9kZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIF90aGlzLnNjcm9sbGJhckhlaWdodCA9IF90aGlzLm5vZGUub2Zmc2V0SGVpZ2h0IC0gX3RoaXMubm9kZS5jbGllbnRIZWlnaHQ7XG4gICAgICBfdGhpcy5zY3JvbGxiYXJXaWR0aCA9IF90aGlzLm5vZGUub2Zmc2V0V2lkdGggLSBfdGhpcy5ub2RlLmNsaWVudFdpZHRoO1xuICAgIH0sIF90aGlzLmhhbmRsZVJlc2l6ZSA9ICgwLCBfZGVib3VuY2UuZGVmYXVsdCkoZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIG9uQ2hhbmdlID0gX3RoaXMucHJvcHMub25DaGFuZ2U7XG4gICAgICB2YXIgcHJldkhlaWdodCA9IF90aGlzLnNjcm9sbGJhckhlaWdodDtcbiAgICAgIHZhciBwcmV2V2lkdGggPSBfdGhpcy5zY3JvbGxiYXJXaWR0aDtcblxuICAgICAgX3RoaXMuc2V0TWVhc3VyZW1lbnRzKCk7XG5cbiAgICAgIGlmIChwcmV2SGVpZ2h0ICE9PSBfdGhpcy5zY3JvbGxiYXJIZWlnaHQgfHwgcHJldldpZHRoICE9PSBfdGhpcy5zY3JvbGxiYXJXaWR0aCkge1xuICAgICAgICBvbkNoYW5nZSh7XG4gICAgICAgICAgc2Nyb2xsYmFySGVpZ2h0OiBfdGhpcy5zY3JvbGxiYXJIZWlnaHQsXG4gICAgICAgICAgc2Nyb2xsYmFyV2lkdGg6IF90aGlzLnNjcm9sbGJhcldpZHRoXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0sIDE2NiksIF90ZW1wKSk7XG4gIH1cblxuICAoMCwgX2NyZWF0ZUNsYXNzMi5kZWZhdWx0KShTY3JvbGxiYXJTaXplLCBbe1xuICAgIGtleTogXCJjb21wb25lbnREaWRNb3VudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgIHRoaXMuc2V0TWVhc3VyZW1lbnRzKCk7XG4gICAgICB0aGlzLnByb3BzLm9uTG9hZCh7XG4gICAgICAgIHNjcm9sbGJhckhlaWdodDogdGhpcy5zY3JvbGxiYXJIZWlnaHQsXG4gICAgICAgIHNjcm9sbGJhcldpZHRoOiB0aGlzLnNjcm9sbGJhcldpZHRoXG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY29tcG9uZW50V2lsbFVubW91bnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICB0aGlzLmhhbmRsZVJlc2l6ZS5jbGVhcigpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICAvLyBDb3JyZXNwb25kcyB0byAxMCBmcmFtZXMgYXQgNjAgSHouXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICB2YXIgb25DaGFuZ2UgPSB0aGlzLnByb3BzLm9uQ2hhbmdlO1xuICAgICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgbnVsbCwgb25DaGFuZ2UgPyBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdEV2ZW50TGlzdGVuZXIuZGVmYXVsdCwge1xuICAgICAgICB0YXJnZXQ6IFwid2luZG93XCIsXG4gICAgICAgIG9uUmVzaXplOiB0aGlzLmhhbmRsZVJlc2l6ZVxuICAgICAgfSkgOiBudWxsLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgICAgc3R5bGU6IHN0eWxlcyxcbiAgICAgICAgcmVmOiBmdW5jdGlvbiByZWYobm9kZSkge1xuICAgICAgICAgIF90aGlzMi5ub2RlID0gbm9kZTtcbiAgICAgICAgfVxuICAgICAgfSkpO1xuICAgIH1cbiAgfV0pO1xuICByZXR1cm4gU2Nyb2xsYmFyU2l6ZTtcbn0oX3JlYWN0LmRlZmF1bHQuQ29tcG9uZW50KTtcblxuU2Nyb2xsYmFyU2l6ZS5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIG9uQ2hhbmdlOiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYy5pc1JlcXVpcmVkLFxuICBvbkxvYWQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLmlzUmVxdWlyZWRcbn0gOiB7fTtcbnZhciBfZGVmYXVsdCA9IFNjcm9sbGJhclNpemU7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJ2YXIgd2luO1xuXG5pZiAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHdpbiA9IHdpbmRvdztcbn0gZWxzZSBpZiAodHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHdpbiA9IGdsb2JhbDtcbn0gZWxzZSBpZiAodHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIpe1xuICAgIHdpbiA9IHNlbGY7XG59IGVsc2Uge1xuICAgIHdpbiA9IHt9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHdpbjtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCdnbG9iYWwnKVxuXG4vKipcbiAqIGByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKWBcbiAqL1xuXG52YXIgcmVxdWVzdCA9IGdsb2JhbC5yZXF1ZXN0QW5pbWF0aW9uRnJhbWVcbiAgfHwgZ2xvYmFsLndlYmtpdFJlcXVlc3RBbmltYXRpb25GcmFtZVxuICB8fCBnbG9iYWwubW96UmVxdWVzdEFuaW1hdGlvbkZyYW1lXG4gIHx8IGZhbGxiYWNrXG5cbnZhciBwcmV2ID0gK25ldyBEYXRlXG5mdW5jdGlvbiBmYWxsYmFjayAoZm4pIHtcbiAgdmFyIGN1cnIgPSArbmV3IERhdGVcbiAgdmFyIG1zID0gTWF0aC5tYXgoMCwgMTYgLSAoY3VyciAtIHByZXYpKVxuICB2YXIgcmVxID0gc2V0VGltZW91dChmbiwgbXMpXG4gIHJldHVybiBwcmV2ID0gY3VyciwgcmVxXG59XG5cbi8qKlxuICogYGNhbmNlbEFuaW1hdGlvbkZyYW1lKClgXG4gKi9cblxudmFyIGNhbmNlbCA9IGdsb2JhbC5jYW5jZWxBbmltYXRpb25GcmFtZVxuICB8fCBnbG9iYWwud2Via2l0Q2FuY2VsQW5pbWF0aW9uRnJhbWVcbiAgfHwgZ2xvYmFsLm1vekNhbmNlbEFuaW1hdGlvbkZyYW1lXG4gIHx8IGNsZWFyVGltZW91dFxuXG5pZiAoRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQpIHtcbiAgcmVxdWVzdCA9IHJlcXVlc3QuYmluZChnbG9iYWwpXG4gIGNhbmNlbCA9IGNhbmNlbC5iaW5kKGdsb2JhbClcbn1cblxuZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWVzdFxuZXhwb3J0cy5jYW5jZWwgPSBjYW5jZWxcbiIsInZhciByYWYgPSByZXF1aXJlKCdyYWZsJylcbnZhciBFX05PU0NST0xMID0gbmV3IEVycm9yKCdFbGVtZW50IGFscmVhZHkgYXQgdGFyZ2V0IHNjcm9sbCBwb3NpdGlvbicpXG52YXIgRV9DQU5DRUxMRUQgPSBuZXcgRXJyb3IoJ1Njcm9sbCBjYW5jZWxsZWQnKVxudmFyIG1pbiA9IE1hdGgubWluXG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBsZWZ0OiBtYWtlKCdzY3JvbGxMZWZ0JyksXG4gIHRvcDogbWFrZSgnc2Nyb2xsVG9wJylcbn1cblxuZnVuY3Rpb24gbWFrZSAocHJvcCkge1xuICByZXR1cm4gZnVuY3Rpb24gc2Nyb2xsIChlbCwgdG8sIG9wdHMsIGNiKSB7XG4gICAgb3B0cyA9IG9wdHMgfHwge31cblxuICAgIGlmICh0eXBlb2Ygb3B0cyA9PSAnZnVuY3Rpb24nKSBjYiA9IG9wdHMsIG9wdHMgPSB7fVxuICAgIGlmICh0eXBlb2YgY2IgIT0gJ2Z1bmN0aW9uJykgY2IgPSBub29wXG5cbiAgICB2YXIgc3RhcnQgPSArbmV3IERhdGVcbiAgICB2YXIgZnJvbSA9IGVsW3Byb3BdXG4gICAgdmFyIGVhc2UgPSBvcHRzLmVhc2UgfHwgaW5PdXRTaW5lXG4gICAgdmFyIGR1cmF0aW9uID0gIWlzTmFOKG9wdHMuZHVyYXRpb24pID8gK29wdHMuZHVyYXRpb24gOiAzNTBcbiAgICB2YXIgY2FuY2VsbGVkID0gZmFsc2VcblxuICAgIHJldHVybiBmcm9tID09PSB0byA/XG4gICAgICBjYihFX05PU0NST0xMLCBlbFtwcm9wXSkgOlxuICAgICAgcmFmKGFuaW1hdGUpLCBjYW5jZWxcblxuICAgIGZ1bmN0aW9uIGNhbmNlbCAoKSB7XG4gICAgICBjYW5jZWxsZWQgPSB0cnVlXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYW5pbWF0ZSAodGltZXN0YW1wKSB7XG4gICAgICBpZiAoY2FuY2VsbGVkKSByZXR1cm4gY2IoRV9DQU5DRUxMRUQsIGVsW3Byb3BdKVxuXG4gICAgICB2YXIgbm93ID0gK25ldyBEYXRlXG4gICAgICB2YXIgdGltZSA9IG1pbigxLCAoKG5vdyAtIHN0YXJ0KSAvIGR1cmF0aW9uKSlcbiAgICAgIHZhciBlYXNlZCA9IGVhc2UodGltZSlcblxuICAgICAgZWxbcHJvcF0gPSAoZWFzZWQgKiAodG8gLSBmcm9tKSkgKyBmcm9tXG5cbiAgICAgIHRpbWUgPCAxID8gcmFmKGFuaW1hdGUpIDogcmFmKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY2IobnVsbCwgZWxbcHJvcF0pXG4gICAgICB9KVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBpbk91dFNpbmUgKG4pIHtcbiAgcmV0dXJuIDAuNSAqICgxIC0gTWF0aC5jb3MoTWF0aC5QSSAqIG4pKVxufVxuXG5mdW5jdGlvbiBub29wICgpIHt9XG4iLCJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG4vLyBCYXNlZCBvbiBodHRwczovL2dpdGh1Yi5jb20vcmVhY3QtYm9vdHN0cmFwL2RvbS1oZWxwZXJzL2Jsb2IvbWFzdGVyL3NyYy91dGlsL2luRE9NLmpzXHJcbnZhciBpbkRPTSA9ICEhKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5kb2N1bWVudCAmJiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7XHJcbnZhciBjYWNoZWRUeXBlO1xyXG5mdW5jdGlvbiBfc2V0U2Nyb2xsVHlwZSh0eXBlKSB7XHJcbiAgICBjYWNoZWRUeXBlID0gdHlwZTtcclxufVxyXG5leHBvcnRzLl9zZXRTY3JvbGxUeXBlID0gX3NldFNjcm9sbFR5cGU7XHJcbi8vIEJhc2VkIG9uIHRoZSBqcXVlcnkgcGx1Z2luIGh0dHBzOi8vZ2l0aHViLmNvbS9vdGhyZWUvanF1ZXJ5LnJ0bC1zY3JvbGwtdHlwZVxyXG5mdW5jdGlvbiBkZXRlY3RTY3JvbGxUeXBlKCkge1xyXG4gICAgaWYgKGNhY2hlZFR5cGUpIHtcclxuICAgICAgICByZXR1cm4gY2FjaGVkVHlwZTtcclxuICAgIH1cclxuICAgIGlmICghaW5ET00gfHwgIXdpbmRvdy5kb2N1bWVudC5ib2R5KSB7XHJcbiAgICAgICAgcmV0dXJuICdpbmRldGVybWluYXRlJztcclxuICAgIH1cclxuICAgIHZhciBkdW1teSA9IHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIGR1bW15LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCdBQkNEJykpO1xyXG4gICAgZHVtbXkuZGlyID0gJ3J0bCc7XHJcbiAgICBkdW1teS5zdHlsZS5mb250U2l6ZSA9ICcxNHB4JztcclxuICAgIGR1bW15LnN0eWxlLndpZHRoID0gJzRweCc7XHJcbiAgICBkdW1teS5zdHlsZS5oZWlnaHQgPSAnMXB4JztcclxuICAgIGR1bW15LnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJztcclxuICAgIGR1bW15LnN0eWxlLnRvcCA9ICctMTAwMHB4JztcclxuICAgIGR1bW15LnN0eWxlLm92ZXJmbG93ID0gJ3Njcm9sbCc7XHJcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGR1bW15KTtcclxuICAgIGNhY2hlZFR5cGUgPSAncmV2ZXJzZSc7XHJcbiAgICBpZiAoZHVtbXkuc2Nyb2xsTGVmdCA+IDApIHtcclxuICAgICAgICBjYWNoZWRUeXBlID0gJ2RlZmF1bHQnO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgZHVtbXkuc2Nyb2xsTGVmdCA9IDE7XHJcbiAgICAgICAgaWYgKGR1bW15LnNjcm9sbExlZnQgPT09IDApIHtcclxuICAgICAgICAgICAgY2FjaGVkVHlwZSA9ICduZWdhdGl2ZSc7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChkdW1teSk7XHJcbiAgICByZXR1cm4gY2FjaGVkVHlwZTtcclxufVxyXG5leHBvcnRzLmRldGVjdFNjcm9sbFR5cGUgPSBkZXRlY3RTY3JvbGxUeXBlO1xyXG4vLyBCYXNlZCBvbiBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjQzOTQzNzZcclxuZnVuY3Rpb24gZ2V0Tm9ybWFsaXplZFNjcm9sbExlZnQoZWxlbWVudCwgZGlyZWN0aW9uKSB7XHJcbiAgICB2YXIgc2Nyb2xsTGVmdCA9IGVsZW1lbnQuc2Nyb2xsTGVmdDtcclxuICAgIC8vIFBlcmZvcm0gdGhlIGNhbGN1bGF0aW9ucyBvbmx5IHdoZW4gZGlyZWN0aW9uIGlzIHJ0bCB0byBhdm9pZCBtZXNzaW5nIHVwIHRoZSBsdHIgYmFoYXZpb3JcclxuICAgIGlmIChkaXJlY3Rpb24gIT09ICdydGwnKSB7XHJcbiAgICAgICAgcmV0dXJuIHNjcm9sbExlZnQ7XHJcbiAgICB9XHJcbiAgICB2YXIgdHlwZSA9IGRldGVjdFNjcm9sbFR5cGUoKTtcclxuICAgIGlmICh0eXBlID09PSAnaW5kZXRlcm1pbmF0ZScpIHtcclxuICAgICAgICByZXR1cm4gTnVtYmVyLk5hTjtcclxuICAgIH1cclxuICAgIHN3aXRjaCAodHlwZSkge1xyXG4gICAgICAgIGNhc2UgJ25lZ2F0aXZlJzpcclxuICAgICAgICAgICAgcmV0dXJuIGVsZW1lbnQuc2Nyb2xsV2lkdGggLSBlbGVtZW50LmNsaWVudFdpZHRoICsgc2Nyb2xsTGVmdDtcclxuICAgICAgICBjYXNlICdyZXZlcnNlJzpcclxuICAgICAgICAgICAgcmV0dXJuIGVsZW1lbnQuc2Nyb2xsV2lkdGggLSBlbGVtZW50LmNsaWVudFdpZHRoIC0gc2Nyb2xsTGVmdDtcclxuICAgIH1cclxuICAgIHJldHVybiBzY3JvbGxMZWZ0O1xyXG59XHJcbmV4cG9ydHMuZ2V0Tm9ybWFsaXplZFNjcm9sbExlZnQgPSBnZXROb3JtYWxpemVkU2Nyb2xsTGVmdDtcclxuZnVuY3Rpb24gc2V0Tm9ybWFsaXplZFNjcm9sbExlZnQoZWxlbWVudCwgc2Nyb2xsTGVmdCwgZGlyZWN0aW9uKSB7XHJcbiAgICAvLyBQZXJmb3JtIHRoZSBjYWxjdWxhdGlvbnMgb25seSB3aGVuIGRpcmVjdGlvbiBpcyBydGwgdG8gYXZvaWQgbWVzc2luZyB1cCB0aGUgbHRyIGJhaGF2aW9yXHJcbiAgICBpZiAoZGlyZWN0aW9uICE9PSAncnRsJykge1xyXG4gICAgICAgIGVsZW1lbnQuc2Nyb2xsTGVmdCA9IHNjcm9sbExlZnQ7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgdmFyIHR5cGUgPSBkZXRlY3RTY3JvbGxUeXBlKCk7XHJcbiAgICBpZiAodHlwZSA9PT0gJ2luZGV0ZXJtaW5hdGUnKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgc3dpdGNoICh0eXBlKSB7XHJcbiAgICAgICAgY2FzZSAnbmVnYXRpdmUnOlxyXG4gICAgICAgICAgICBlbGVtZW50LnNjcm9sbExlZnQgPSBlbGVtZW50LmNsaWVudFdpZHRoIC0gZWxlbWVudC5zY3JvbGxXaWR0aCArIHNjcm9sbExlZnQ7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgJ3JldmVyc2UnOlxyXG4gICAgICAgICAgICBlbGVtZW50LnNjcm9sbExlZnQgPSBlbGVtZW50LnNjcm9sbFdpZHRoIC0gZWxlbWVudC5jbGllbnRXaWR0aCAtIHNjcm9sbExlZnQ7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgIGVsZW1lbnQuc2Nyb2xsTGVmdCA9IHNjcm9sbExlZnQ7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuc2V0Tm9ybWFsaXplZFNjcm9sbExlZnQgPSBzZXROb3JtYWxpemVkU2Nyb2xsTGVmdDtcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLnN0eWxlcyA9IHZvaWQgMDtcblxudmFyIF9leHRlbmRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9leHRlbmRzXCIpKTtcblxudmFyIF9vYmplY3RTcHJlYWQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL29iamVjdFNwcmVhZFwiKSk7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCIpKTtcblxudmFyIF9jbGFzc0NhbGxDaGVjazIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vY2xhc3NDYWxsQ2hlY2tcIikpO1xuXG52YXIgX2NyZWF0ZUNsYXNzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9jcmVhdGVDbGFzc1wiKSk7XG5cbnZhciBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vcG9zc2libGVDb25zdHJ1Y3RvclJldHVyblwiKSk7XG5cbnZhciBfaW5oZXJpdHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2luaGVyaXRzXCIpKTtcblxudmFyIF9kZWZpbmVQcm9wZXJ0eTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vZGVmaW5lUHJvcGVydHlcIikpO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xuXG52YXIgX3dhcm5pbmcgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJ3YXJuaW5nXCIpKTtcblxudmFyIF9jbGFzc25hbWVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY2xhc3NuYW1lc1wiKSk7XG5cbnZhciBfcmVhY3RFdmVudExpc3RlbmVyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3QtZXZlbnQtbGlzdGVuZXJcIikpO1xuXG52YXIgX2RlYm91bmNlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiZGVib3VuY2VcIikpO1xuXG52YXIgX25vcm1hbGl6ZVNjcm9sbExlZnQgPSByZXF1aXJlKFwibm9ybWFsaXplLXNjcm9sbC1sZWZ0XCIpO1xuXG52YXIgX3Njcm9sbCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInNjcm9sbFwiKSk7XG5cbnZhciBfU2Nyb2xsYmFyU2l6ZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vU2Nyb2xsYmFyU2l6ZVwiKSk7XG5cbnZhciBfd2l0aFN0eWxlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3N0eWxlcy93aXRoU3R5bGVzXCIpKTtcblxudmFyIF9UYWJJbmRpY2F0b3IgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL1RhYkluZGljYXRvclwiKSk7XG5cbnZhciBfVGFiU2Nyb2xsQnV0dG9uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9UYWJTY3JvbGxCdXR0b25cIikpO1xuXG52YXIgc3R5bGVzID0gZnVuY3Rpb24gc3R5bGVzKHRoZW1lKSB7XG4gIHJldHVybiB7XG4gICAgcm9vdDoge1xuICAgICAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICAgICAgbWluSGVpZ2h0OiA0OCxcbiAgICAgIFdlYmtpdE92ZXJmbG93U2Nyb2xsaW5nOiAndG91Y2gnIC8vIEFkZCBpT1MgbW9tZW50dW0gc2Nyb2xsaW5nLlxuXG4gICAgfSxcbiAgICBmbGV4Q29udGFpbmVyOiB7XG4gICAgICBkaXNwbGF5OiAnZmxleCdcbiAgICB9LFxuICAgIHNjcm9sbGVyOiB7XG4gICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgIGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snLFxuICAgICAgZmxleDogJzEgMSBhdXRvJyxcbiAgICAgIHdoaXRlU3BhY2U6ICdub3dyYXAnXG4gICAgfSxcbiAgICBmaXhlZDoge1xuICAgICAgb3ZlcmZsb3dYOiAnaGlkZGVuJyxcbiAgICAgIHdpZHRoOiAnMTAwJSdcbiAgICB9LFxuICAgIHNjcm9sbGFibGU6IHtcbiAgICAgIG92ZXJmbG93WDogJ3Njcm9sbCdcbiAgICB9LFxuICAgIGNlbnRlcmVkOiB7XG4gICAgICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcidcbiAgICB9LFxuICAgIHNjcm9sbEJ1dHRvbnM6IHt9LFxuICAgIHNjcm9sbEJ1dHRvbnNBdXRvOiAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KSh7fSwgdGhlbWUuYnJlYWtwb2ludHMuZG93bigneHMnKSwge1xuICAgICAgZGlzcGxheTogJ25vbmUnXG4gICAgfSksXG4gICAgaW5kaWNhdG9yOiB7fVxuICB9O1xufTtcblxuZXhwb3J0cy5zdHlsZXMgPSBzdHlsZXM7XG5cbnZhciBUYWJzID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gICgwLCBfaW5oZXJpdHMyLmRlZmF1bHQpKFRhYnMsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFRhYnMoKSB7XG4gICAgdmFyIF9yZWY7XG5cbiAgICB2YXIgX3RlbXAsIF90aGlzO1xuXG4gICAgKDAsIF9jbGFzc0NhbGxDaGVjazIuZGVmYXVsdCkodGhpcywgVGFicyk7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuICgwLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIuZGVmYXVsdCkoX3RoaXMsIChfdGVtcCA9IF90aGlzID0gKDAsIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMi5kZWZhdWx0KSh0aGlzLCAoX3JlZiA9IFRhYnMuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihUYWJzKSkuY2FsbC5hcHBseShfcmVmLCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzLnN0YXRlID0ge1xuICAgICAgaW5kaWNhdG9yU3R5bGU6IHt9LFxuICAgICAgc2Nyb2xsZXJTdHlsZToge1xuICAgICAgICBtYXJnaW5Cb3R0b206IDBcbiAgICAgIH0sXG4gICAgICBzaG93TGVmdFNjcm9sbDogZmFsc2UsXG4gICAgICBzaG93UmlnaHRTY3JvbGw6IGZhbHNlLFxuICAgICAgbW91bnRlZDogZmFsc2VcbiAgICB9LCBfdGhpcy5nZXRDb25kaXRpb25hbEVsZW1lbnRzID0gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgY2xhc3NlcyA9IF90aGlzJHByb3BzLmNsYXNzZXMsXG4gICAgICAgICAgc2Nyb2xsYWJsZSA9IF90aGlzJHByb3BzLnNjcm9sbGFibGUsXG4gICAgICAgICAgU2Nyb2xsQnV0dG9uQ29tcG9uZW50ID0gX3RoaXMkcHJvcHMuU2Nyb2xsQnV0dG9uQ29tcG9uZW50LFxuICAgICAgICAgIHNjcm9sbEJ1dHRvbnMgPSBfdGhpcyRwcm9wcy5zY3JvbGxCdXR0b25zLFxuICAgICAgICAgIHRoZW1lID0gX3RoaXMkcHJvcHMudGhlbWU7XG4gICAgICB2YXIgY29uZGl0aW9uYWxFbGVtZW50cyA9IHt9O1xuICAgICAgY29uZGl0aW9uYWxFbGVtZW50cy5zY3JvbGxiYXJTaXplTGlzdGVuZXIgPSBzY3JvbGxhYmxlID8gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfU2Nyb2xsYmFyU2l6ZS5kZWZhdWx0LCB7XG4gICAgICAgIG9uTG9hZDogX3RoaXMuaGFuZGxlU2Nyb2xsYmFyU2l6ZUNoYW5nZSxcbiAgICAgICAgb25DaGFuZ2U6IF90aGlzLmhhbmRsZVNjcm9sbGJhclNpemVDaGFuZ2VcbiAgICAgIH0pIDogbnVsbDtcbiAgICAgIHZhciBzaG93U2Nyb2xsQnV0dG9ucyA9IHNjcm9sbGFibGUgJiYgKHNjcm9sbEJ1dHRvbnMgPT09ICdhdXRvJyB8fCBzY3JvbGxCdXR0b25zID09PSAnb24nKTtcbiAgICAgIGNvbmRpdGlvbmFsRWxlbWVudHMuc2Nyb2xsQnV0dG9uTGVmdCA9IHNob3dTY3JvbGxCdXR0b25zID8gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChTY3JvbGxCdXR0b25Db21wb25lbnQsIHtcbiAgICAgICAgZGlyZWN0aW9uOiB0aGVtZSAmJiB0aGVtZS5kaXJlY3Rpb24gPT09ICdydGwnID8gJ3JpZ2h0JyA6ICdsZWZ0JyxcbiAgICAgICAgb25DbGljazogX3RoaXMuaGFuZGxlTGVmdFNjcm9sbENsaWNrLFxuICAgICAgICB2aXNpYmxlOiBfdGhpcy5zdGF0ZS5zaG93TGVmdFNjcm9sbCxcbiAgICAgICAgY2xhc3NOYW1lOiAoMCwgX2NsYXNzbmFtZXMuZGVmYXVsdCkoY2xhc3Nlcy5zY3JvbGxCdXR0b25zLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KSh7fSwgY2xhc3Nlcy5zY3JvbGxCdXR0b25zQXV0bywgc2Nyb2xsQnV0dG9ucyA9PT0gJ2F1dG8nKSlcbiAgICAgIH0pIDogbnVsbDtcbiAgICAgIGNvbmRpdGlvbmFsRWxlbWVudHMuc2Nyb2xsQnV0dG9uUmlnaHQgPSBzaG93U2Nyb2xsQnV0dG9ucyA/IF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoU2Nyb2xsQnV0dG9uQ29tcG9uZW50LCB7XG4gICAgICAgIGRpcmVjdGlvbjogdGhlbWUgJiYgdGhlbWUuZGlyZWN0aW9uID09PSAncnRsJyA/ICdsZWZ0JyA6ICdyaWdodCcsXG4gICAgICAgIG9uQ2xpY2s6IF90aGlzLmhhbmRsZVJpZ2h0U2Nyb2xsQ2xpY2ssXG4gICAgICAgIHZpc2libGU6IF90aGlzLnN0YXRlLnNob3dSaWdodFNjcm9sbCxcbiAgICAgICAgY2xhc3NOYW1lOiAoMCwgX2NsYXNzbmFtZXMuZGVmYXVsdCkoY2xhc3Nlcy5zY3JvbGxCdXR0b25zLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KSh7fSwgY2xhc3Nlcy5zY3JvbGxCdXR0b25zQXV0bywgc2Nyb2xsQnV0dG9ucyA9PT0gJ2F1dG8nKSlcbiAgICAgIH0pIDogbnVsbDtcbiAgICAgIHJldHVybiBjb25kaXRpb25hbEVsZW1lbnRzO1xuICAgIH0sIF90aGlzLmdldFRhYnNNZXRhID0gZnVuY3Rpb24gKHZhbHVlLCBkaXJlY3Rpb24pIHtcbiAgICAgIHZhciB0YWJzTWV0YTtcblxuICAgICAgaWYgKF90aGlzLnRhYnMpIHtcbiAgICAgICAgdmFyIHJlY3QgPSBfdGhpcy50YWJzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpOyAvLyBjcmVhdGUgYSBuZXcgb2JqZWN0IHdpdGggQ2xpZW50UmVjdCBjbGFzcyBwcm9wcyArIHNjcm9sbExlZnRcblxuXG4gICAgICAgIHRhYnNNZXRhID0ge1xuICAgICAgICAgIGNsaWVudFdpZHRoOiBfdGhpcy50YWJzID8gX3RoaXMudGFicy5jbGllbnRXaWR0aCA6IDAsXG4gICAgICAgICAgc2Nyb2xsTGVmdDogX3RoaXMudGFicyA/IF90aGlzLnRhYnMuc2Nyb2xsTGVmdCA6IDAsXG4gICAgICAgICAgc2Nyb2xsTGVmdE5vcm1hbGl6ZWQ6IF90aGlzLnRhYnMgPyAoMCwgX25vcm1hbGl6ZVNjcm9sbExlZnQuZ2V0Tm9ybWFsaXplZFNjcm9sbExlZnQpKF90aGlzLnRhYnMsIGRpcmVjdGlvbikgOiAwLFxuICAgICAgICAgIHNjcm9sbFdpZHRoOiBfdGhpcy50YWJzID8gX3RoaXMudGFicy5zY3JvbGxXaWR0aCA6IDAsXG4gICAgICAgICAgbGVmdDogcmVjdC5sZWZ0LFxuICAgICAgICAgIHJpZ2h0OiByZWN0LnJpZ2h0XG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIHZhciB0YWJNZXRhO1xuXG4gICAgICBpZiAoX3RoaXMudGFicyAmJiB2YWx1ZSAhPT0gZmFsc2UpIHtcbiAgICAgICAgdmFyIGNoaWxkcmVuID0gX3RoaXMudGFicy5jaGlsZHJlblswXS5jaGlsZHJlbjtcblxuICAgICAgICBpZiAoY2hpbGRyZW4ubGVuZ3RoID4gMCkge1xuICAgICAgICAgIHZhciB0YWIgPSBjaGlsZHJlbltfdGhpcy52YWx1ZVRvSW5kZXhbdmFsdWVdXTtcbiAgICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyAoMCwgX3dhcm5pbmcuZGVmYXVsdCkodGFiLCBcIk1hdGVyaWFsLVVJOiB0aGUgdmFsdWUgcHJvdmlkZWQgYFwiLmNvbmNhdCh2YWx1ZSwgXCJgIGlzIGludmFsaWRcIikpIDogdm9pZCAwO1xuICAgICAgICAgIHRhYk1ldGEgPSB0YWIgPyB0YWIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkgOiBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIHRhYnNNZXRhOiB0YWJzTWV0YSxcbiAgICAgICAgdGFiTWV0YTogdGFiTWV0YVxuICAgICAgfTtcbiAgICB9LCBfdGhpcy50YWJzID0gdW5kZWZpbmVkLCBfdGhpcy52YWx1ZVRvSW5kZXggPSB7fSwgX3RoaXMuaGFuZGxlUmVzaXplID0gKDAsIF9kZWJvdW5jZS5kZWZhdWx0KShmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpcy51cGRhdGVJbmRpY2F0b3JTdGF0ZShfdGhpcy5wcm9wcyk7XG5cbiAgICAgIF90aGlzLnVwZGF0ZVNjcm9sbEJ1dHRvblN0YXRlKCk7XG4gICAgfSwgMTY2KSwgX3RoaXMuaGFuZGxlTGVmdFNjcm9sbENsaWNrID0gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKF90aGlzLnRhYnMpIHtcbiAgICAgICAgX3RoaXMubW92ZVRhYnNTY3JvbGwoLV90aGlzLnRhYnMuY2xpZW50V2lkdGgpO1xuICAgICAgfVxuICAgIH0sIF90aGlzLmhhbmRsZVJpZ2h0U2Nyb2xsQ2xpY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoX3RoaXMudGFicykge1xuICAgICAgICBfdGhpcy5tb3ZlVGFic1Njcm9sbChfdGhpcy50YWJzLmNsaWVudFdpZHRoKTtcbiAgICAgIH1cbiAgICB9LCBfdGhpcy5oYW5kbGVTY3JvbGxiYXJTaXplQ2hhbmdlID0gZnVuY3Rpb24gKF9yZWYyKSB7XG4gICAgICB2YXIgc2Nyb2xsYmFySGVpZ2h0ID0gX3JlZjIuc2Nyb2xsYmFySGVpZ2h0O1xuXG4gICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIHNjcm9sbGVyU3R5bGU6IHtcbiAgICAgICAgICBtYXJnaW5Cb3R0b206IC1zY3JvbGxiYXJIZWlnaHRcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSwgX3RoaXMuaGFuZGxlVGFic1Njcm9sbCA9ICgwLCBfZGVib3VuY2UuZGVmYXVsdCkoZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMudXBkYXRlU2Nyb2xsQnV0dG9uU3RhdGUoKTtcbiAgICB9LCAxNjYpLCBfdGhpcy5tb3ZlVGFic1Njcm9sbCA9IGZ1bmN0aW9uIChkZWx0YSkge1xuICAgICAgdmFyIHRoZW1lID0gX3RoaXMucHJvcHMudGhlbWU7XG5cbiAgICAgIGlmIChfdGhpcy50YWJzKSB7XG4gICAgICAgIHZhciBtdWx0aXBsaWVyID0gdGhlbWUuZGlyZWN0aW9uID09PSAncnRsJyA/IC0xIDogMTtcbiAgICAgICAgdmFyIG5leHRTY3JvbGxMZWZ0ID0gX3RoaXMudGFicy5zY3JvbGxMZWZ0ICsgZGVsdGEgKiBtdWx0aXBsaWVyOyAvLyBGaXggZm9yIEVkZ2VcblxuICAgICAgICB2YXIgaW52ZXJ0ID0gdGhlbWUuZGlyZWN0aW9uID09PSAncnRsJyAmJiAoMCwgX25vcm1hbGl6ZVNjcm9sbExlZnQuZGV0ZWN0U2Nyb2xsVHlwZSkoKSA9PT0gJ3JldmVyc2UnID8gLTEgOiAxO1xuXG4gICAgICAgIF9zY3JvbGwuZGVmYXVsdC5sZWZ0KF90aGlzLnRhYnMsIGludmVydCAqIG5leHRTY3JvbGxMZWZ0KTtcbiAgICAgIH1cbiAgICB9LCBfdGhpcy5zY3JvbGxTZWxlY3RlZEludG9WaWV3ID0gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzMiA9IF90aGlzLnByb3BzLFxuICAgICAgICAgIHRoZW1lID0gX3RoaXMkcHJvcHMyLnRoZW1lLFxuICAgICAgICAgIHZhbHVlID0gX3RoaXMkcHJvcHMyLnZhbHVlO1xuXG4gICAgICB2YXIgX3RoaXMkZ2V0VGFic01ldGEgPSBfdGhpcy5nZXRUYWJzTWV0YSh2YWx1ZSwgdGhlbWUuZGlyZWN0aW9uKSxcbiAgICAgICAgICB0YWJzTWV0YSA9IF90aGlzJGdldFRhYnNNZXRhLnRhYnNNZXRhLFxuICAgICAgICAgIHRhYk1ldGEgPSBfdGhpcyRnZXRUYWJzTWV0YS50YWJNZXRhO1xuXG4gICAgICBpZiAoIXRhYk1ldGEgfHwgIXRhYnNNZXRhKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHRhYk1ldGEubGVmdCA8IHRhYnNNZXRhLmxlZnQpIHtcbiAgICAgICAgLy8gbGVmdCBzaWRlIG9mIGJ1dHRvbiBpcyBvdXQgb2Ygdmlld1xuICAgICAgICB2YXIgbmV4dFNjcm9sbExlZnQgPSB0YWJzTWV0YS5zY3JvbGxMZWZ0ICsgKHRhYk1ldGEubGVmdCAtIHRhYnNNZXRhLmxlZnQpO1xuXG4gICAgICAgIF9zY3JvbGwuZGVmYXVsdC5sZWZ0KF90aGlzLnRhYnMsIG5leHRTY3JvbGxMZWZ0KTtcbiAgICAgIH0gZWxzZSBpZiAodGFiTWV0YS5yaWdodCA+IHRhYnNNZXRhLnJpZ2h0KSB7XG4gICAgICAgIC8vIHJpZ2h0IHNpZGUgb2YgYnV0dG9uIGlzIG91dCBvZiB2aWV3XG4gICAgICAgIHZhciBfbmV4dFNjcm9sbExlZnQgPSB0YWJzTWV0YS5zY3JvbGxMZWZ0ICsgKHRhYk1ldGEucmlnaHQgLSB0YWJzTWV0YS5yaWdodCk7XG5cbiAgICAgICAgX3Njcm9sbC5kZWZhdWx0LmxlZnQoX3RoaXMudGFicywgX25leHRTY3JvbGxMZWZ0KTtcbiAgICAgIH1cbiAgICB9LCBfdGhpcy51cGRhdGVTY3JvbGxCdXR0b25TdGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wczMgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICBzY3JvbGxhYmxlID0gX3RoaXMkcHJvcHMzLnNjcm9sbGFibGUsXG4gICAgICAgICAgc2Nyb2xsQnV0dG9ucyA9IF90aGlzJHByb3BzMy5zY3JvbGxCdXR0b25zLFxuICAgICAgICAgIHRoZW1lID0gX3RoaXMkcHJvcHMzLnRoZW1lO1xuXG4gICAgICBpZiAoX3RoaXMudGFicyAmJiBzY3JvbGxhYmxlICYmIHNjcm9sbEJ1dHRvbnMgIT09ICdvZmYnKSB7XG4gICAgICAgIHZhciBfdGhpcyR0YWJzID0gX3RoaXMudGFicyxcbiAgICAgICAgICAgIHNjcm9sbFdpZHRoID0gX3RoaXMkdGFicy5zY3JvbGxXaWR0aCxcbiAgICAgICAgICAgIGNsaWVudFdpZHRoID0gX3RoaXMkdGFicy5jbGllbnRXaWR0aDtcbiAgICAgICAgdmFyIHNjcm9sbExlZnQgPSAoMCwgX25vcm1hbGl6ZVNjcm9sbExlZnQuZ2V0Tm9ybWFsaXplZFNjcm9sbExlZnQpKF90aGlzLnRhYnMsIHRoZW1lLmRpcmVjdGlvbik7XG4gICAgICAgIHZhciBzaG93TGVmdFNjcm9sbCA9IHRoZW1lLmRpcmVjdGlvbiA9PT0gJ3J0bCcgPyBzY3JvbGxXaWR0aCA+IGNsaWVudFdpZHRoICsgc2Nyb2xsTGVmdCA6IHNjcm9sbExlZnQgPiAwO1xuICAgICAgICB2YXIgc2hvd1JpZ2h0U2Nyb2xsID0gdGhlbWUuZGlyZWN0aW9uID09PSAncnRsJyA/IHNjcm9sbExlZnQgPiAwIDogc2Nyb2xsV2lkdGggPiBjbGllbnRXaWR0aCArIHNjcm9sbExlZnQ7XG5cbiAgICAgICAgaWYgKHNob3dMZWZ0U2Nyb2xsICE9PSBfdGhpcy5zdGF0ZS5zaG93TGVmdFNjcm9sbCB8fCBzaG93UmlnaHRTY3JvbGwgIT09IF90aGlzLnN0YXRlLnNob3dSaWdodFNjcm9sbCkge1xuICAgICAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIHNob3dMZWZ0U2Nyb2xsOiBzaG93TGVmdFNjcm9sbCxcbiAgICAgICAgICAgIHNob3dSaWdodFNjcm9sbDogc2hvd1JpZ2h0U2Nyb2xsXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCBfdGVtcCkpO1xuICB9XG5cbiAgKDAsIF9jcmVhdGVDbGFzczIuZGVmYXVsdCkoVGFicywgW3tcbiAgICBrZXk6IFwiY29tcG9uZW50RGlkTW91bnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3Qvbm8tZGlkLW1vdW50LXNldC1zdGF0ZVxuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIG1vdW50ZWQ6IHRydWVcbiAgICAgIH0pO1xuICAgICAgdGhpcy51cGRhdGVJbmRpY2F0b3JTdGF0ZSh0aGlzLnByb3BzKTtcbiAgICAgIHRoaXMudXBkYXRlU2Nyb2xsQnV0dG9uU3RhdGUoKTtcblxuICAgICAgaWYgKHRoaXMucHJvcHMuYWN0aW9uKSB7XG4gICAgICAgIHRoaXMucHJvcHMuYWN0aW9uKHtcbiAgICAgICAgICB1cGRhdGVJbmRpY2F0b3I6IHRoaXMuaGFuZGxlUmVzaXplXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJjb21wb25lbnREaWRVcGRhdGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wcywgcHJldlN0YXRlKSB7XG4gICAgICB0aGlzLnVwZGF0ZVNjcm9sbEJ1dHRvblN0YXRlKCk7IC8vIFRoZSBpbmRleCBtaWdodCBoYXZlIGNoYW5nZWQgYXQgdGhlIHNhbWUgdGltZS5cbiAgICAgIC8vIFdlIG5lZWQgdG8gY2hlY2sgYWdhaW4gdGhlIHJpZ2h0IGluZGljYXRvciBwb3NpdGlvbi5cblxuICAgICAgdGhpcy51cGRhdGVJbmRpY2F0b3JTdGF0ZSh0aGlzLnByb3BzKTtcblxuICAgICAgaWYgKHRoaXMuc3RhdGUuaW5kaWNhdG9yU3R5bGUgIT09IHByZXZTdGF0ZS5pbmRpY2F0b3JTdHlsZSkge1xuICAgICAgICB0aGlzLnNjcm9sbFNlbGVjdGVkSW50b1ZpZXcoKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY29tcG9uZW50V2lsbFVubW91bnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICB0aGlzLmhhbmRsZVJlc2l6ZS5jbGVhcigpO1xuICAgICAgdGhpcy5oYW5kbGVUYWJzU2Nyb2xsLmNsZWFyKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInVwZGF0ZUluZGljYXRvclN0YXRlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZUluZGljYXRvclN0YXRlKHByb3BzKSB7XG4gICAgICB2YXIgdGhlbWUgPSBwcm9wcy50aGVtZSxcbiAgICAgICAgICB2YWx1ZSA9IHByb3BzLnZhbHVlO1xuXG4gICAgICB2YXIgX2dldFRhYnNNZXRhID0gdGhpcy5nZXRUYWJzTWV0YSh2YWx1ZSwgdGhlbWUuZGlyZWN0aW9uKSxcbiAgICAgICAgICB0YWJzTWV0YSA9IF9nZXRUYWJzTWV0YS50YWJzTWV0YSxcbiAgICAgICAgICB0YWJNZXRhID0gX2dldFRhYnNNZXRhLnRhYk1ldGE7XG5cbiAgICAgIHZhciBsZWZ0ID0gMDtcblxuICAgICAgaWYgKHRhYk1ldGEgJiYgdGFic01ldGEpIHtcbiAgICAgICAgdmFyIGNvcnJlY3Rpb24gPSB0aGVtZS5kaXJlY3Rpb24gPT09ICdydGwnID8gdGFic01ldGEuc2Nyb2xsTGVmdE5vcm1hbGl6ZWQgKyB0YWJzTWV0YS5jbGllbnRXaWR0aCAtIHRhYnNNZXRhLnNjcm9sbFdpZHRoIDogdGFic01ldGEuc2Nyb2xsTGVmdDtcbiAgICAgICAgbGVmdCA9IHRhYk1ldGEubGVmdCAtIHRhYnNNZXRhLmxlZnQgKyBjb3JyZWN0aW9uO1xuICAgICAgfVxuXG4gICAgICB2YXIgaW5kaWNhdG9yU3R5bGUgPSB7XG4gICAgICAgIGxlZnQ6IGxlZnQsXG4gICAgICAgIC8vIE1heSBiZSB3cm9uZyB1bnRpbCB0aGUgZm9udCBpcyBsb2FkZWQuXG4gICAgICAgIHdpZHRoOiB0YWJNZXRhID8gdGFiTWV0YS53aWR0aCA6IDBcbiAgICAgIH07XG5cbiAgICAgIGlmICgoaW5kaWNhdG9yU3R5bGUubGVmdCAhPT0gdGhpcy5zdGF0ZS5pbmRpY2F0b3JTdHlsZS5sZWZ0IHx8IGluZGljYXRvclN0eWxlLndpZHRoICE9PSB0aGlzLnN0YXRlLmluZGljYXRvclN0eWxlLndpZHRoKSAmJiAhTnVtYmVyLmlzTmFOKGluZGljYXRvclN0eWxlLmxlZnQpICYmICFOdW1iZXIuaXNOYU4oaW5kaWNhdG9yU3R5bGUud2lkdGgpKSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgIGluZGljYXRvclN0eWxlOiBpbmRpY2F0b3JTdHlsZVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfY2xhc3NOYW1lczMsXG4gICAgICAgICAgX3RoaXMyID0gdGhpcztcblxuICAgICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgYWN0aW9uID0gX3Byb3BzLmFjdGlvbixcbiAgICAgICAgICBjZW50ZXJlZCA9IF9wcm9wcy5jZW50ZXJlZCxcbiAgICAgICAgICBjaGlsZHJlblByb3AgPSBfcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgICAgY2xhc3NlcyA9IF9wcm9wcy5jbGFzc2VzLFxuICAgICAgICAgIGNsYXNzTmFtZVByb3AgPSBfcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICAgIGZ1bGxXaWR0aCA9IF9wcm9wcy5mdWxsV2lkdGgsXG4gICAgICAgICAgaW5kaWNhdG9yQ29sb3IgPSBfcHJvcHMuaW5kaWNhdG9yQ29sb3IsXG4gICAgICAgICAgb25DaGFuZ2UgPSBfcHJvcHMub25DaGFuZ2UsXG4gICAgICAgICAgc2Nyb2xsYWJsZSA9IF9wcm9wcy5zY3JvbGxhYmxlLFxuICAgICAgICAgIFNjcm9sbEJ1dHRvbkNvbXBvbmVudCA9IF9wcm9wcy5TY3JvbGxCdXR0b25Db21wb25lbnQsXG4gICAgICAgICAgc2Nyb2xsQnV0dG9ucyA9IF9wcm9wcy5zY3JvbGxCdXR0b25zLFxuICAgICAgICAgIF9wcm9wcyRUYWJJbmRpY2F0b3JQciA9IF9wcm9wcy5UYWJJbmRpY2F0b3JQcm9wcyxcbiAgICAgICAgICBUYWJJbmRpY2F0b3JQcm9wcyA9IF9wcm9wcyRUYWJJbmRpY2F0b3JQciA9PT0gdm9pZCAwID8ge30gOiBfcHJvcHMkVGFiSW5kaWNhdG9yUHIsXG4gICAgICAgICAgdGV4dENvbG9yID0gX3Byb3BzLnRleHRDb2xvcixcbiAgICAgICAgICB0aGVtZSA9IF9wcm9wcy50aGVtZSxcbiAgICAgICAgICB2YWx1ZSA9IF9wcm9wcy52YWx1ZSxcbiAgICAgICAgICBvdGhlciA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyLmRlZmF1bHQpKF9wcm9wcywgW1wiYWN0aW9uXCIsIFwiY2VudGVyZWRcIiwgXCJjaGlsZHJlblwiLCBcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJmdWxsV2lkdGhcIiwgXCJpbmRpY2F0b3JDb2xvclwiLCBcIm9uQ2hhbmdlXCIsIFwic2Nyb2xsYWJsZVwiLCBcIlNjcm9sbEJ1dHRvbkNvbXBvbmVudFwiLCBcInNjcm9sbEJ1dHRvbnNcIiwgXCJUYWJJbmRpY2F0b3JQcm9wc1wiLCBcInRleHRDb2xvclwiLCBcInRoZW1lXCIsIFwidmFsdWVcIl0pO1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gKDAsIF93YXJuaW5nLmRlZmF1bHQpKCFjZW50ZXJlZCB8fCAhc2Nyb2xsYWJsZSwgJ01hdGVyaWFsLVVJOiB5b3UgY2FuIG5vdCB1c2UgdGhlIGBjZW50ZXJlZD17dHJ1ZX1gIGFuZCBgc2Nyb2xsYWJsZT17dHJ1ZX1gIHByb3BlcnRpZXMgJyArICdhdCB0aGUgc2FtZSB0aW1lIG9uIGEgYFRhYnNgIGNvbXBvbmVudC4nKSA6IHZvaWQgMDtcbiAgICAgIHZhciBjbGFzc05hbWUgPSAoMCwgX2NsYXNzbmFtZXMuZGVmYXVsdCkoY2xhc3Nlcy5yb290LCBjbGFzc05hbWVQcm9wKTtcbiAgICAgIHZhciBzY3JvbGxlckNsYXNzTmFtZSA9ICgwLCBfY2xhc3NuYW1lcy5kZWZhdWx0KShjbGFzc2VzLnNjcm9sbGVyLCAoX2NsYXNzTmFtZXMzID0ge30sICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKF9jbGFzc05hbWVzMywgY2xhc3Nlcy5maXhlZCwgIXNjcm9sbGFibGUpLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lczMsIGNsYXNzZXMuc2Nyb2xsYWJsZSwgc2Nyb2xsYWJsZSksIF9jbGFzc05hbWVzMykpO1xuICAgICAgdmFyIGZsZXhDb250YWluZXJDbGFzc05hbWUgPSAoMCwgX2NsYXNzbmFtZXMuZGVmYXVsdCkoY2xhc3Nlcy5mbGV4Q29udGFpbmVyLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KSh7fSwgY2xhc3Nlcy5jZW50ZXJlZCwgY2VudGVyZWQgJiYgIXNjcm9sbGFibGUpKTtcblxuICAgICAgdmFyIGluZGljYXRvciA9IF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX1RhYkluZGljYXRvci5kZWZhdWx0LCAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHtcbiAgICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzLmluZGljYXRvcixcbiAgICAgICAgY29sb3I6IGluZGljYXRvckNvbG9yXG4gICAgICB9LCBUYWJJbmRpY2F0b3JQcm9wcywge1xuICAgICAgICBzdHlsZTogKDAsIF9vYmplY3RTcHJlYWQyLmRlZmF1bHQpKHt9LCB0aGlzLnN0YXRlLmluZGljYXRvclN0eWxlLCBUYWJJbmRpY2F0b3JQcm9wcy5zdHlsZSlcbiAgICAgIH0pKTtcblxuICAgICAgdGhpcy52YWx1ZVRvSW5kZXggPSB7fTtcbiAgICAgIHZhciBjaGlsZEluZGV4ID0gMDtcblxuICAgICAgdmFyIGNoaWxkcmVuID0gX3JlYWN0LmRlZmF1bHQuQ2hpbGRyZW4ubWFwKGNoaWxkcmVuUHJvcCwgZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICAgIGlmICghX3JlYWN0LmRlZmF1bHQuaXNWYWxpZEVsZW1lbnQoY2hpbGQpKSB7XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgY2hpbGRWYWx1ZSA9IGNoaWxkLnByb3BzLnZhbHVlID09PSB1bmRlZmluZWQgPyBjaGlsZEluZGV4IDogY2hpbGQucHJvcHMudmFsdWU7XG4gICAgICAgIF90aGlzMi52YWx1ZVRvSW5kZXhbY2hpbGRWYWx1ZV0gPSBjaGlsZEluZGV4O1xuICAgICAgICB2YXIgc2VsZWN0ZWQgPSBjaGlsZFZhbHVlID09PSB2YWx1ZTtcbiAgICAgICAgY2hpbGRJbmRleCArPSAxO1xuICAgICAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY2xvbmVFbGVtZW50KGNoaWxkLCB7XG4gICAgICAgICAgZnVsbFdpZHRoOiBmdWxsV2lkdGgsXG4gICAgICAgICAgaW5kaWNhdG9yOiBzZWxlY3RlZCAmJiAhX3RoaXMyLnN0YXRlLm1vdW50ZWQgJiYgaW5kaWNhdG9yLFxuICAgICAgICAgIHNlbGVjdGVkOiBzZWxlY3RlZCxcbiAgICAgICAgICBvbkNoYW5nZTogb25DaGFuZ2UsXG4gICAgICAgICAgdGV4dENvbG9yOiB0ZXh0Q29sb3IsXG4gICAgICAgICAgdmFsdWU6IGNoaWxkVmFsdWVcbiAgICAgICAgfSk7XG4gICAgICB9KTtcblxuICAgICAgdmFyIGNvbmRpdGlvbmFsRWxlbWVudHMgPSB0aGlzLmdldENvbmRpdGlvbmFsRWxlbWVudHMoKTtcbiAgICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe1xuICAgICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZVxuICAgICAgfSwgb3RoZXIpLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdEV2ZW50TGlzdGVuZXIuZGVmYXVsdCwge1xuICAgICAgICB0YXJnZXQ6IFwid2luZG93XCIsXG4gICAgICAgIG9uUmVzaXplOiB0aGlzLmhhbmRsZVJlc2l6ZVxuICAgICAgfSksIGNvbmRpdGlvbmFsRWxlbWVudHMuc2Nyb2xsYmFyU2l6ZUxpc3RlbmVyLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzLmZsZXhDb250YWluZXJcbiAgICAgIH0sIGNvbmRpdGlvbmFsRWxlbWVudHMuc2Nyb2xsQnV0dG9uTGVmdCwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICAgIGNsYXNzTmFtZTogc2Nyb2xsZXJDbGFzc05hbWUsXG4gICAgICAgIHN0eWxlOiB0aGlzLnN0YXRlLnNjcm9sbGVyU3R5bGUsXG4gICAgICAgIHJlZjogZnVuY3Rpb24gcmVmKG5vZGUpIHtcbiAgICAgICAgICBfdGhpczIudGFicyA9IG5vZGU7XG4gICAgICAgIH0sXG4gICAgICAgIHJvbGU6IFwidGFibGlzdFwiLFxuICAgICAgICBvblNjcm9sbDogdGhpcy5oYW5kbGVUYWJzU2Nyb2xsXG4gICAgICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBmbGV4Q29udGFpbmVyQ2xhc3NOYW1lXG4gICAgICB9LCBjaGlsZHJlbiksIHRoaXMuc3RhdGUubW91bnRlZCAmJiBpbmRpY2F0b3IpLCBjb25kaXRpb25hbEVsZW1lbnRzLnNjcm9sbEJ1dHRvblJpZ2h0KSk7XG4gICAgfVxuICB9XSk7XG4gIHJldHVybiBUYWJzO1xufShfcmVhY3QuZGVmYXVsdC5Db21wb25lbnQpO1xuXG5UYWJzLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIGNvbXBvbmVudCBtb3VudHMuXG4gICAqIFRoaXMgaXMgdXNlZnVsIHdoZW4geW91IHdhbnQgdG8gdHJpZ2dlciBhbiBhY3Rpb24gcHJvZ3JhbW1hdGljYWxseS5cbiAgICogSXQgY3VycmVudGx5IG9ubHkgc3VwcG9ydHMgYHVwZGF0ZUluZGljYXRvcigpYCBhY3Rpb24uXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBhY3Rpb25zIFRoaXMgb2JqZWN0IGNvbnRhaW5zIGFsbCBwb3NzaWJsZSBhY3Rpb25zXG4gICAqIHRoYXQgY2FuIGJlIHRyaWdnZXJlZCBwcm9ncmFtbWF0aWNhbGx5LlxuICAgKi9cbiAgYWN0aW9uOiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYyxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgdGFicyB3aWxsIGJlIGNlbnRlcmVkLlxuICAgKiBUaGlzIHByb3BlcnR5IGlzIGludGVuZGVkIGZvciBsYXJnZSB2aWV3cy5cbiAgICovXG4gIGNlbnRlcmVkOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBfcHJvcFR5cGVzLmRlZmF1bHQubm9kZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MtYXBpKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIHRhYnMgd2lsbCBncm93IHRvIHVzZSBhbGwgdGhlIGF2YWlsYWJsZSBzcGFjZS5cbiAgICogVGhpcyBwcm9wZXJ0eSBpcyBpbnRlbmRlZCBmb3Igc21hbGwgdmlld3MsIGxpa2Ugb24gbW9iaWxlLlxuICAgKi9cbiAgZnVsbFdpZHRoOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogRGV0ZXJtaW5lcyB0aGUgY29sb3Igb2YgdGhlIGluZGljYXRvci5cbiAgICovXG4gIGluZGljYXRvckNvbG9yOiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2YoWydzZWNvbmRhcnknLCAncHJpbWFyeSddKSxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgdmFsdWUgY2hhbmdlcy5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGV2ZW50IFRoZSBldmVudCBzb3VyY2Ugb2YgdGhlIGNhbGxiYWNrXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSBXZSBkZWZhdWx0IHRvIHRoZSBpbmRleCBvZiB0aGUgY2hpbGRcbiAgICovXG4gIG9uQ2hhbmdlOiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYyxcblxuICAvKipcbiAgICogVHJ1ZSBpbnZva2VzIHNjcm9sbGluZyBwcm9wZXJ0aWVzIGFuZCBhbGxvdyBmb3IgaG9yaXpvbnRhbGx5IHNjcm9sbGluZ1xuICAgKiAob3Igc3dpcGluZykgdGhlIHRhYiBiYXIuXG4gICAqL1xuICBzY3JvbGxhYmxlOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIHRvIHJlbmRlciB0aGUgc2Nyb2xsIGJ1dHRvbnMuXG4gICAqL1xuICBTY3JvbGxCdXR0b25Db21wb25lbnQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsIF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jXSksXG5cbiAgLyoqXG4gICAqIERldGVybWluZSBiZWhhdmlvciBvZiBzY3JvbGwgYnV0dG9ucyB3aGVuIHRhYnMgYXJlIHNldCB0byBzY3JvbGxcbiAgICogYGF1dG9gIHdpbGwgb25seSBwcmVzZW50IHRoZW0gb24gbWVkaXVtIGFuZCBsYXJnZXIgdmlld3BvcnRzXG4gICAqIGBvbmAgd2lsbCBhbHdheXMgcHJlc2VudCB0aGVtXG4gICAqIGBvZmZgIHdpbGwgbmV2ZXIgcHJlc2VudCB0aGVtXG4gICAqL1xuICBzY3JvbGxCdXR0b25zOiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2YoWydhdXRvJywgJ29uJywgJ29mZiddKSxcblxuICAvKipcbiAgICogUHJvcGVydGllcyBhcHBsaWVkIHRvIHRoZSBgVGFiSW5kaWNhdG9yYCBlbGVtZW50LlxuICAgKi9cbiAgVGFiSW5kaWNhdG9yUHJvcHM6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QsXG5cbiAgLyoqXG4gICAqIERldGVybWluZXMgdGhlIGNvbG9yIG9mIHRoZSBgVGFiYC5cbiAgICovXG4gIHRleHRDb2xvcjogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mKFsnc2Vjb25kYXJ5JywgJ3ByaW1hcnknLCAnaW5oZXJpdCddKSxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgdGhlbWU6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogVGhlIHZhbHVlIG9mIHRoZSBjdXJyZW50bHkgc2VsZWN0ZWQgYFRhYmAuXG4gICAqIElmIHlvdSBkb24ndCB3YW50IGFueSBzZWxlY3RlZCBgVGFiYCwgeW91IGNhbiBzZXQgdGhpcyBwcm9wZXJ0eSB0byBgZmFsc2VgLlxuICAgKi9cbiAgdmFsdWU6IF9wcm9wVHlwZXMuZGVmYXVsdC5hbnlcbn0gOiB7fTtcblRhYnMuZGVmYXVsdFByb3BzID0ge1xuICBjZW50ZXJlZDogZmFsc2UsXG4gIGZ1bGxXaWR0aDogZmFsc2UsXG4gIGluZGljYXRvckNvbG9yOiAnc2Vjb25kYXJ5JyxcbiAgc2Nyb2xsYWJsZTogZmFsc2UsXG4gIFNjcm9sbEJ1dHRvbkNvbXBvbmVudDogX1RhYlNjcm9sbEJ1dHRvbi5kZWZhdWx0LFxuICBzY3JvbGxCdXR0b25zOiAnYXV0bycsXG4gIHRleHRDb2xvcjogJ2luaGVyaXQnXG59O1xuXG52YXIgX2RlZmF1bHQgPSAoMCwgX3dpdGhTdHlsZXMuZGVmYXVsdCkoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlUYWJzJyxcbiAgd2l0aFRoZW1lOiB0cnVlXG59KShUYWJzKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfcHVyZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlY29tcG9zZS9wdXJlXCIpKTtcblxudmFyIF9TdmdJY29uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vLi4vU3ZnSWNvblwiKSk7XG5cbnZhciBfcmVmID0gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICBkOiBcIk0yMCAxMmwtMS40MS0xLjQxTDEzIDE2LjE3VjRoLTJ2MTIuMTdsLTUuNTgtNS41OUw0IDEybDggOCA4LTh6XCJcbn0pO1xuXG4vKipcbiAqIEBpZ25vcmUgLSBpbnRlcm5hbCBjb21wb25lbnQuXG4gKi9cbnZhciBBcnJvd0Rvd253YXJkID0gZnVuY3Rpb24gQXJyb3dEb3dud2FyZChwcm9wcykge1xuICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfU3ZnSWNvbi5kZWZhdWx0LCBwcm9wcywgX3JlZik7XG59O1xuXG5BcnJvd0Rvd253YXJkID0gKDAsIF9wdXJlLmRlZmF1bHQpKEFycm93RG93bndhcmQpO1xuQXJyb3dEb3dud2FyZC5tdWlOYW1lID0gJ1N2Z0ljb24nO1xudmFyIF9kZWZhdWx0ID0gQXJyb3dEb3dud2FyZDtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5zdHlsZXMgPSB2b2lkIDA7XG5cbnZhciBfZXh0ZW5kczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vZXh0ZW5kc1wiKSk7XG5cbnZhciBfZGVmaW5lUHJvcGVydHkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2RlZmluZVByb3BlcnR5XCIpKTtcblxudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIikpO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xuXG52YXIgX2NsYXNzbmFtZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJjbGFzc25hbWVzXCIpKTtcblxudmFyIF9BcnJvd0Rvd253YXJkID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vaW50ZXJuYWwvc3ZnLWljb25zL0Fycm93RG93bndhcmRcIikpO1xuXG52YXIgX3dpdGhTdHlsZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9zdHlsZXMvd2l0aFN0eWxlc1wiKSk7XG5cbnZhciBfQnV0dG9uQmFzZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL0J1dHRvbkJhc2VcIikpO1xuXG52YXIgX2hlbHBlcnMgPSByZXF1aXJlKFwiLi4vdXRpbHMvaGVscGVyc1wiKTtcblxuLy8gQGluaGVyaXRlZENvbXBvbmVudCBCdXR0b25CYXNlXG52YXIgc3R5bGVzID0gZnVuY3Rpb24gc3R5bGVzKHRoZW1lKSB7XG4gIHJldHVybiB7XG4gICAgcm9vdDoge1xuICAgICAgY3Vyc29yOiAncG9pbnRlcicsXG4gICAgICBkaXNwbGF5OiAnaW5saW5lLWZsZXgnLFxuICAgICAganVzdGlmeUNvbnRlbnQ6ICdmbGV4LXN0YXJ0JyxcbiAgICAgIGZsZXhEaXJlY3Rpb246ICdpbmhlcml0JyxcbiAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgJyY6aG92ZXInOiB7XG4gICAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnRleHQucHJpbWFyeVxuICAgICAgfSxcbiAgICAgICcmOmZvY3VzJzoge1xuICAgICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS50ZXh0LnByaW1hcnlcbiAgICAgIH1cbiAgICB9LFxuICAgIGFjdGl2ZToge1xuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUudGV4dC5wcmltYXJ5LFxuICAgICAgJyYgJGljb24nOiB7XG4gICAgICAgIG9wYWNpdHk6IDFcbiAgICAgIH1cbiAgICB9LFxuICAgIGljb246IHtcbiAgICAgIGhlaWdodDogMTYsXG4gICAgICBtYXJnaW5SaWdodDogNCxcbiAgICAgIG1hcmdpbkxlZnQ6IDQsXG4gICAgICBvcGFjaXR5OiAwLFxuICAgICAgdHJhbnNpdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKFsnb3BhY2l0eScsICd0cmFuc2Zvcm0nXSwge1xuICAgICAgICBkdXJhdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuZHVyYXRpb24uc2hvcnRlclxuICAgICAgfSksXG4gICAgICB1c2VyU2VsZWN0OiAnbm9uZScsXG4gICAgICB3aWR0aDogMTZcbiAgICB9LFxuICAgIGljb25EaXJlY3Rpb25EZXNjOiB7XG4gICAgICB0cmFuc2Zvcm06ICdyb3RhdGUoMGRlZyknXG4gICAgfSxcbiAgICBpY29uRGlyZWN0aW9uQXNjOiB7XG4gICAgICB0cmFuc2Zvcm06ICdyb3RhdGUoMTgwZGVnKSdcbiAgICB9XG4gIH07XG59O1xuLyoqXG4gKiBBIGJ1dHRvbiBiYXNlZCBsYWJlbCBmb3IgcGxhY2luZyBpbnNpZGUgYFRhYmxlQ2VsbGAgZm9yIGNvbHVtbiBzb3J0aW5nLlxuICovXG5cblxuZXhwb3J0cy5zdHlsZXMgPSBzdHlsZXM7XG5cbmZ1bmN0aW9uIFRhYmxlU29ydExhYmVsKHByb3BzKSB7XG4gIHZhciBhY3RpdmUgPSBwcm9wcy5hY3RpdmUsXG4gICAgICBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBkaXJlY3Rpb24gPSBwcm9wcy5kaXJlY3Rpb24sXG4gICAgICBvdGhlciA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyLmRlZmF1bHQpKHByb3BzLCBbXCJhY3RpdmVcIiwgXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwiY2hpbGRyZW5cIiwgXCJkaXJlY3Rpb25cIl0pO1xuICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfQnV0dG9uQmFzZS5kZWZhdWx0LCAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHtcbiAgICBjbGFzc05hbWU6ICgwLCBfY2xhc3NuYW1lcy5kZWZhdWx0KShjbGFzc2VzLnJvb3QsICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKHt9LCBjbGFzc2VzLmFjdGl2ZSwgYWN0aXZlKSwgY2xhc3NOYW1lKSxcbiAgICBjb21wb25lbnQ6IFwic3BhblwiLFxuICAgIGRpc2FibGVSaXBwbGU6IHRydWVcbiAgfSwgb3RoZXIpLCBjaGlsZHJlbiwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfQXJyb3dEb3dud2FyZC5kZWZhdWx0LCB7XG4gICAgY2xhc3NOYW1lOiAoMCwgX2NsYXNzbmFtZXMuZGVmYXVsdCkoY2xhc3Nlcy5pY29uLCBjbGFzc2VzW1wiaWNvbkRpcmVjdGlvblwiLmNvbmNhdCgoMCwgX2hlbHBlcnMuY2FwaXRhbGl6ZSkoZGlyZWN0aW9uKSldKVxuICB9KSk7XG59XG5cblRhYmxlU29ydExhYmVsLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGxhYmVsIHdpbGwgaGF2ZSB0aGUgYWN0aXZlIHN0eWxpbmcgKHNob3VsZCBiZSB0cnVlIGZvciB0aGUgc29ydGVkIGNvbHVtbikuXG4gICAqL1xuICBhY3RpdmU6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBMYWJlbCBjb250ZW50cywgdGhlIGFycm93IHdpbGwgYmUgYXBwZW5kZWQgYXV0b21hdGljYWxseS5cbiAgICovXG4gIGNoaWxkcmVuOiBfcHJvcFR5cGVzLmRlZmF1bHQubm9kZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MtYXBpKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBjdXJyZW50IHNvcnQgZGlyZWN0aW9uLlxuICAgKi9cbiAgZGlyZWN0aW9uOiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2YoWydhc2MnLCAnZGVzYyddKVxufSA6IHt9O1xuVGFibGVTb3J0TGFiZWwuZGVmYXVsdFByb3BzID0ge1xuICBhY3RpdmU6IGZhbHNlLFxuICBkaXJlY3Rpb246ICdkZXNjJ1xufTtcblxudmFyIF9kZWZhdWx0ID0gKDAsIF93aXRoU3R5bGVzLmRlZmF1bHQpKHN0eWxlcywge1xuICBuYW1lOiAnTXVpVGFibGVTb3J0TGFiZWwnXG59KShUYWJsZVNvcnRMYWJlbCk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5zdHlsZXMgPSB2b2lkIDA7XG5cbnZhciBfZXh0ZW5kczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vZXh0ZW5kc1wiKSk7XG5cbnZhciBfZGVmaW5lUHJvcGVydHkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2RlZmluZVByb3BlcnR5XCIpKTtcblxudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIikpO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xuXG52YXIgX2NsYXNzbmFtZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJjbGFzc25hbWVzXCIpKTtcblxudmFyIF93aXRoU3R5bGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vc3R5bGVzL3dpdGhTdHlsZXNcIikpO1xuXG52YXIgc3R5bGVzID0gZnVuY3Rpb24gc3R5bGVzKHRoZW1lKSB7XG4gIHJldHVybiB7XG4gICAgcm9vdDoge1xuICAgICAgY29sb3I6ICdpbmhlcml0JyxcbiAgICAgIGRpc3BsYXk6ICd0YWJsZS1yb3cnLFxuICAgICAgaGVpZ2h0OiA0OCxcbiAgICAgIHZlcnRpY2FsQWxpZ246ICdtaWRkbGUnLFxuICAgICAgLy8gV2UgZGlzYWJsZSB0aGUgZm9jdXMgcmluZyBmb3IgbW91c2UsIHRvdWNoIGFuZCBrZXlib2FyZCB1c2Vycy5cbiAgICAgIG91dGxpbmU6ICdub25lJyxcbiAgICAgICcmJHNlbGVjdGVkJzoge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUudHlwZSA9PT0gJ2xpZ2h0JyA/ICdyZ2JhKDAsIDAsIDAsIDAuMDQpJyAvLyBncmV5WzEwMF1cbiAgICAgICAgOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjA4KSdcbiAgICAgIH0sXG4gICAgICAnJiRob3Zlcjpob3Zlcic6IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLnR5cGUgPT09ICdsaWdodCcgPyAncmdiYSgwLCAwLCAwLCAwLjA3KScgLy8gZ3JleVsyMDBdXG4gICAgICAgIDogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC4xNCknXG4gICAgICB9XG4gICAgfSxcbiAgICBzZWxlY3RlZDoge30sXG4gICAgaG92ZXI6IHt9LFxuICAgIGhlYWQ6IHtcbiAgICAgIGhlaWdodDogNTZcbiAgICB9LFxuICAgIGZvb3Rlcjoge1xuICAgICAgaGVpZ2h0OiA1NlxuICAgIH1cbiAgfTtcbn07XG4vKipcbiAqIFdpbGwgYXV0b21hdGljYWxseSBzZXQgZHluYW1pYyByb3cgaGVpZ2h0XG4gKiBiYXNlZCBvbiB0aGUgbWF0ZXJpYWwgdGFibGUgZWxlbWVudCBwYXJlbnQgKGhlYWQsIGJvZHksIGV0YykuXG4gKi9cblxuXG5leHBvcnRzLnN0eWxlcyA9IHN0eWxlcztcblxuZnVuY3Rpb24gVGFibGVSb3cocHJvcHMsIGNvbnRleHQpIHtcbiAgdmFyIF9jbGFzc05hbWVzO1xuXG4gIHZhciBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZVByb3AgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBDb21wb25lbnQgPSBwcm9wcy5jb21wb25lbnQsXG4gICAgICBob3ZlciA9IHByb3BzLmhvdmVyLFxuICAgICAgc2VsZWN0ZWQgPSBwcm9wcy5zZWxlY3RlZCxcbiAgICAgIG90aGVyID0gKDAsIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIuZGVmYXVsdCkocHJvcHMsIFtcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJjb21wb25lbnRcIiwgXCJob3ZlclwiLCBcInNlbGVjdGVkXCJdKTtcbiAgdmFyIHRhYmxlID0gY29udGV4dC50YWJsZTtcbiAgdmFyIGNsYXNzTmFtZSA9ICgwLCBfY2xhc3NuYW1lcy5kZWZhdWx0KShjbGFzc2VzLnJvb3QsIChfY2xhc3NOYW1lcyA9IHt9LCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lcywgY2xhc3Nlcy5oZWFkLCB0YWJsZSAmJiB0YWJsZS5oZWFkKSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2NsYXNzTmFtZXMsIGNsYXNzZXMuZm9vdGVyLCB0YWJsZSAmJiB0YWJsZS5mb290ZXIpLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lcywgY2xhc3Nlcy5ob3ZlciwgdGFibGUgJiYgaG92ZXIpLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lcywgY2xhc3Nlcy5zZWxlY3RlZCwgdGFibGUgJiYgc2VsZWN0ZWQpLCBfY2xhc3NOYW1lcyksIGNsYXNzTmFtZVByb3ApO1xuICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChDb21wb25lbnQsICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe1xuICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lXG4gIH0sIG90aGVyKSk7XG59XG5cblRhYmxlUm93LnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqXG4gICAqIFNob3VsZCBiZSB2YWxpZCA8dHI+IGNoaWxkcmVuIHN1Y2ggYXMgYFRhYmxlQ2VsbGAuXG4gICAqL1xuICBjaGlsZHJlbjogX3Byb3BUeXBlcy5kZWZhdWx0Lm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzLWFwaSkgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBET00gZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZywgX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmNdKSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgdGFibGUgcm93IHdpbGwgc2hhZGUgb24gaG92ZXIuXG4gICAqL1xuICBob3ZlcjogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIHRhYmxlIHJvdyB3aWxsIGhhdmUgdGhlIHNlbGVjdGVkIHNoYWRpbmcuXG4gICAqL1xuICBzZWxlY3RlZDogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2xcbn0gOiB7fTtcblRhYmxlUm93LmRlZmF1bHRQcm9wcyA9IHtcbiAgY29tcG9uZW50OiAndHInLFxuICBob3ZlcjogZmFsc2UsXG4gIHNlbGVjdGVkOiBmYWxzZVxufTtcblRhYmxlUm93LmNvbnRleHRUeXBlcyA9IHtcbiAgdGFibGU6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3Rcbn07XG5cbnZhciBfZGVmYXVsdCA9ICgwLCBfd2l0aFN0eWxlcy5kZWZhdWx0KShzdHlsZXMsIHtcbiAgbmFtZTogJ011aVRhYmxlUm93J1xufSkoVGFibGVSb3cpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9leHRlbmRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9leHRlbmRzXCIpKTtcblxudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIikpO1xuXG52YXIgX2NsYXNzQ2FsbENoZWNrMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9jbGFzc0NhbGxDaGVja1wiKSk7XG5cbnZhciBfY3JlYXRlQ2xhc3MyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2NyZWF0ZUNsYXNzXCIpKTtcblxudmFyIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuXCIpKTtcblxudmFyIF9pbmhlcml0czIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vaW5oZXJpdHNcIikpO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xuXG52YXIgX0tleWJvYXJkQXJyb3dMZWZ0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vaW50ZXJuYWwvc3ZnLWljb25zL0tleWJvYXJkQXJyb3dMZWZ0XCIpKTtcblxudmFyIF9LZXlib2FyZEFycm93UmlnaHQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9pbnRlcm5hbC9zdmctaWNvbnMvS2V5Ym9hcmRBcnJvd1JpZ2h0XCIpKTtcblxudmFyIF93aXRoVGhlbWUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9zdHlsZXMvd2l0aFRoZW1lXCIpKTtcblxudmFyIF9JY29uQnV0dG9uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vSWNvbkJ1dHRvblwiKSk7XG5cbnZhciBfcmVmMiA9IF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX0tleWJvYXJkQXJyb3dSaWdodC5kZWZhdWx0LCBudWxsKTtcblxudmFyIF9yZWYzID0gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfS2V5Ym9hcmRBcnJvd0xlZnQuZGVmYXVsdCwgbnVsbCk7XG5cbnZhciBfcmVmNCA9IF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX0tleWJvYXJkQXJyb3dMZWZ0LmRlZmF1bHQsIG51bGwpO1xuXG52YXIgX3JlZjUgPSBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9LZXlib2FyZEFycm93UmlnaHQuZGVmYXVsdCwgbnVsbCk7XG5cbi8qKlxuICogQGlnbm9yZSAtIGludGVybmFsIGNvbXBvbmVudC5cbiAqL1xudmFyIFRhYmxlUGFnaW5hdGlvbkFjdGlvbnMgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgKDAsIF9pbmhlcml0czIuZGVmYXVsdCkoVGFibGVQYWdpbmF0aW9uQWN0aW9ucywgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gVGFibGVQYWdpbmF0aW9uQWN0aW9ucygpIHtcbiAgICB2YXIgX3JlZjtcblxuICAgIHZhciBfdGVtcCwgX3RoaXM7XG5cbiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMi5kZWZhdWx0KSh0aGlzLCBUYWJsZVBhZ2luYXRpb25BY3Rpb25zKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gKDAsIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMi5kZWZhdWx0KShfdGhpcywgKF90ZW1wID0gX3RoaXMgPSAoMCwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yLmRlZmF1bHQpKHRoaXMsIChfcmVmID0gVGFibGVQYWdpbmF0aW9uQWN0aW9ucy5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKFRhYmxlUGFnaW5hdGlvbkFjdGlvbnMpKS5jYWxsLmFwcGx5KF9yZWYsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMuaGFuZGxlQmFja0J1dHRvbkNsaWNrID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBfdGhpcy5wcm9wcy5vbkNoYW5nZVBhZ2UoZXZlbnQsIF90aGlzLnByb3BzLnBhZ2UgLSAxKTtcbiAgICB9LCBfdGhpcy5oYW5kbGVOZXh0QnV0dG9uQ2xpY2sgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIF90aGlzLnByb3BzLm9uQ2hhbmdlUGFnZShldmVudCwgX3RoaXMucHJvcHMucGFnZSArIDEpO1xuICAgIH0sIF90ZW1wKSk7XG4gIH1cblxuICAoMCwgX2NyZWF0ZUNsYXNzMi5kZWZhdWx0KShUYWJsZVBhZ2luYXRpb25BY3Rpb25zLCBbe1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgYmFja0ljb25CdXR0b25Qcm9wcyA9IF9wcm9wcy5iYWNrSWNvbkJ1dHRvblByb3BzLFxuICAgICAgICAgIGNvdW50ID0gX3Byb3BzLmNvdW50LFxuICAgICAgICAgIG5leHRJY29uQnV0dG9uUHJvcHMgPSBfcHJvcHMubmV4dEljb25CdXR0b25Qcm9wcyxcbiAgICAgICAgICBvbkNoYW5nZVBhZ2UgPSBfcHJvcHMub25DaGFuZ2VQYWdlLFxuICAgICAgICAgIHBhZ2UgPSBfcHJvcHMucGFnZSxcbiAgICAgICAgICByb3dzUGVyUGFnZSA9IF9wcm9wcy5yb3dzUGVyUGFnZSxcbiAgICAgICAgICB0aGVtZSA9IF9wcm9wcy50aGVtZSxcbiAgICAgICAgICBvdGhlciA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyLmRlZmF1bHQpKF9wcm9wcywgW1wiYmFja0ljb25CdXR0b25Qcm9wc1wiLCBcImNvdW50XCIsIFwibmV4dEljb25CdXR0b25Qcm9wc1wiLCBcIm9uQ2hhbmdlUGFnZVwiLCBcInBhZ2VcIiwgXCJyb3dzUGVyUGFnZVwiLCBcInRoZW1lXCJdKTtcbiAgICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIG90aGVyLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9JY29uQnV0dG9uLmRlZmF1bHQsICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe1xuICAgICAgICBvbkNsaWNrOiB0aGlzLmhhbmRsZUJhY2tCdXR0b25DbGljayxcbiAgICAgICAgZGlzYWJsZWQ6IHBhZ2UgPT09IDBcbiAgICAgIH0sIGJhY2tJY29uQnV0dG9uUHJvcHMpLCB0aGVtZS5kaXJlY3Rpb24gPT09ICdydGwnID8gX3JlZjIgOiBfcmVmMyksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX0ljb25CdXR0b24uZGVmYXVsdCwgKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7XG4gICAgICAgIG9uQ2xpY2s6IHRoaXMuaGFuZGxlTmV4dEJ1dHRvbkNsaWNrLFxuICAgICAgICBkaXNhYmxlZDogcGFnZSA+PSBNYXRoLmNlaWwoY291bnQgLyByb3dzUGVyUGFnZSkgLSAxXG4gICAgICB9LCBuZXh0SWNvbkJ1dHRvblByb3BzKSwgdGhlbWUuZGlyZWN0aW9uID09PSAncnRsJyA/IF9yZWY0IDogX3JlZjUpKTtcbiAgICB9XG4gIH1dKTtcbiAgcmV0dXJuIFRhYmxlUGFnaW5hdGlvbkFjdGlvbnM7XG59KF9yZWFjdC5kZWZhdWx0LkNvbXBvbmVudCk7XG5cblRhYmxlUGFnaW5hdGlvbkFjdGlvbnMucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKipcbiAgICogUHJvcGVydGllcyBhcHBsaWVkIHRvIHRoZSBiYWNrIGFycm93IGBJY29uQnV0dG9uYCBlbGVtZW50LlxuICAgKi9cbiAgYmFja0ljb25CdXR0b25Qcm9wczogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdCxcblxuICAvKipcbiAgICogVGhlIHRvdGFsIG51bWJlciBvZiByb3dzLlxuICAgKi9cbiAgY291bnQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5udW1iZXIuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogUHJvcGVydGllcyBhcHBsaWVkIHRvIHRoZSBuZXh0IGFycm93IGBJY29uQnV0dG9uYCBlbGVtZW50LlxuICAgKi9cbiAgbmV4dEljb25CdXR0b25Qcm9wczogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdCxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgcGFnZSBpcyBjaGFuZ2VkLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gZXZlbnQgVGhlIGV2ZW50IHNvdXJjZSBvZiB0aGUgY2FsbGJhY2tcbiAgICogQHBhcmFtIHtudW1iZXJ9IHBhZ2UgVGhlIHBhZ2Ugc2VsZWN0ZWRcbiAgICovXG4gIG9uQ2hhbmdlUGFnZTogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogVGhlIHplcm8tYmFzZWQgaW5kZXggb2YgdGhlIGN1cnJlbnQgcGFnZS5cbiAgICovXG4gIHBhZ2U6IF9wcm9wVHlwZXMuZGVmYXVsdC5udW1iZXIuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogVGhlIG51bWJlciBvZiByb3dzIHBlciBwYWdlLlxuICAgKi9cbiAgcm93c1BlclBhZ2U6IF9wcm9wVHlwZXMuZGVmYXVsdC5udW1iZXIuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgdGhlbWU6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QuaXNSZXF1aXJlZFxufSA6IHt9O1xuXG52YXIgX2RlZmF1bHQgPSAoMCwgX3dpdGhUaGVtZS5kZWZhdWx0KSgpKFRhYmxlUGFnaW5hdGlvbkFjdGlvbnMpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlZmF1bHRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX1RhYmxlUGFnaW5hdGlvbkFjdGlvbnMuZGVmYXVsdDtcbiAgfVxufSk7XG5cbnZhciBfVGFibGVQYWdpbmF0aW9uQWN0aW9ucyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vVGFibGVQYWdpbmF0aW9uQWN0aW9uc1wiKSk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLnN0eWxlcyA9IHZvaWQgMDtcblxudmFyIF9leHRlbmRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9leHRlbmRzXCIpKTtcblxudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIikpO1xuXG52YXIgX2NsYXNzQ2FsbENoZWNrMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9jbGFzc0NhbGxDaGVja1wiKSk7XG5cbnZhciBfY3JlYXRlQ2xhc3MyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2NyZWF0ZUNsYXNzXCIpKTtcblxudmFyIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuXCIpKTtcblxudmFyIF9pbmhlcml0czIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vaW5oZXJpdHNcIikpO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xuXG52YXIgX3dpdGhTdHlsZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9zdHlsZXMvd2l0aFN0eWxlc1wiKSk7XG5cbnZhciBfSW5wdXQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9JbnB1dFwiKSk7XG5cbnZhciBfTWVudUl0ZW0gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9NZW51SXRlbVwiKSk7XG5cbnZhciBfU2VsZWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vU2VsZWN0XCIpKTtcblxudmFyIF9UYWJsZUNlbGwgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9UYWJsZUNlbGxcIikpO1xuXG52YXIgX1Rvb2xiYXIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9Ub29sYmFyXCIpKTtcblxudmFyIF9UeXBvZ3JhcGh5ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vVHlwb2dyYXBoeVwiKSk7XG5cbnZhciBfVGFibGVQYWdpbmF0aW9uQWN0aW9ucyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL1RhYmxlUGFnaW5hdGlvbkFjdGlvbnNcIikpO1xuXG4vLyBAaW5oZXJpdGVkQ29tcG9uZW50IFRhYmxlQ2VsbFxudmFyIHN0eWxlcyA9IGZ1bmN0aW9uIHN0eWxlcyh0aGVtZSkge1xuICByZXR1cm4ge1xuICAgIHJvb3Q6IHtcbiAgICAgIGZvbnRTaXplOiB0aGVtZS50eXBvZ3JhcGh5LnB4VG9SZW0oMTIpLFxuICAgICAgLy8gSW5jcmVhc2UgdGhlIHNwZWNpZmljaXR5IHRvIG92ZXJyaWRlIFRhYmxlQ2VsbC5cbiAgICAgICcmOmxhc3QtY2hpbGQnOiB7XG4gICAgICAgIHBhZGRpbmc6IDBcbiAgICAgIH1cbiAgICB9LFxuICAgIHRvb2xiYXI6IHtcbiAgICAgIGhlaWdodDogNTYsXG4gICAgICBtaW5IZWlnaHQ6IDU2LFxuICAgICAgcGFkZGluZ1JpZ2h0OiAyXG4gICAgfSxcbiAgICBzcGFjZXI6IHtcbiAgICAgIGZsZXg6ICcxIDEgMTAwJSdcbiAgICB9LFxuICAgIG1lbnVJdGVtOiB7fSxcbiAgICBjYXB0aW9uOiB7XG4gICAgICBmbGV4U2hyaW5rOiAwXG4gICAgfSxcbiAgICBpbnB1dDoge1xuICAgICAgZm9udFNpemU6ICdpbmhlcml0JyxcbiAgICAgIGZsZXhTaHJpbms6IDBcbiAgICB9LFxuICAgIHNlbGVjdFJvb3Q6IHtcbiAgICAgIG1hcmdpblJpZ2h0OiB0aGVtZS5zcGFjaW5nLnVuaXQgKiA0LFxuICAgICAgbWFyZ2luTGVmdDogdGhlbWUuc3BhY2luZy51bml0LFxuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUudGV4dC5zZWNvbmRhcnlcbiAgICB9LFxuICAgIHNlbGVjdDoge1xuICAgICAgcGFkZGluZ0xlZnQ6IHRoZW1lLnNwYWNpbmcudW5pdCxcbiAgICAgIHBhZGRpbmdSaWdodDogdGhlbWUuc3BhY2luZy51bml0ICogMlxuICAgIH0sXG4gICAgc2VsZWN0SWNvbjoge1xuICAgICAgdG9wOiAxXG4gICAgfSxcbiAgICBhY3Rpb25zOiB7XG4gICAgICBmbGV4U2hyaW5rOiAwLFxuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUudGV4dC5zZWNvbmRhcnksXG4gICAgICBtYXJnaW5MZWZ0OiB0aGVtZS5zcGFjaW5nLnVuaXQgKiAyLjVcbiAgICB9XG4gIH07XG59O1xuLyoqXG4gKiBBIGBUYWJsZUNlbGxgIGJhc2VkIGNvbXBvbmVudCBmb3IgcGxhY2luZyBpbnNpZGUgYFRhYmxlRm9vdGVyYCBmb3IgcGFnaW5hdGlvbi5cbiAqL1xuXG5cbmV4cG9ydHMuc3R5bGVzID0gc3R5bGVzO1xuXG52YXIgVGFibGVQYWdpbmF0aW9uID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gICgwLCBfaW5oZXJpdHMyLmRlZmF1bHQpKFRhYmxlUGFnaW5hdGlvbiwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gVGFibGVQYWdpbmF0aW9uKCkge1xuICAgICgwLCBfY2xhc3NDYWxsQ2hlY2syLmRlZmF1bHQpKHRoaXMsIFRhYmxlUGFnaW5hdGlvbik7XG4gICAgcmV0dXJuICgwLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIuZGVmYXVsdCkodGhpcywgKFRhYmxlUGFnaW5hdGlvbi5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKFRhYmxlUGFnaW5hdGlvbikpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgKDAsIF9jcmVhdGVDbGFzczIuZGVmYXVsdCkoVGFibGVQYWdpbmF0aW9uLCBbe1xuICAgIGtleTogXCJjb21wb25lbnREaWRVcGRhdGVcIixcbiAgICAvLyBUaGlzIGxvZ2ljIHdvdWxkIGJlIGJldHRlciBoYW5kbGVkIG9uIHVzZXJzaWRlLlxuICAgIC8vIEhvd2V2ZXIsIHdlIGhhdmUgaXQganVzdCBpbiBjYXNlLlxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUoKSB7XG4gICAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBjb3VudCA9IF9wcm9wcy5jb3VudCxcbiAgICAgICAgICBvbkNoYW5nZVBhZ2UgPSBfcHJvcHMub25DaGFuZ2VQYWdlLFxuICAgICAgICAgIHBhZ2UgPSBfcHJvcHMucGFnZSxcbiAgICAgICAgICByb3dzUGVyUGFnZSA9IF9wcm9wcy5yb3dzUGVyUGFnZTtcbiAgICAgIHZhciBuZXdMYXN0UGFnZSA9IE1hdGgubWF4KDAsIE1hdGguY2VpbChjb3VudCAvIHJvd3NQZXJQYWdlKSAtIDEpO1xuXG4gICAgICBpZiAocGFnZSA+IG5ld0xhc3RQYWdlKSB7XG4gICAgICAgIG9uQ2hhbmdlUGFnZShudWxsLCBuZXdMYXN0UGFnZSk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX3Byb3BzMiA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgQWN0aW9uc0NvbXBvbmVudCA9IF9wcm9wczIuQWN0aW9uc0NvbXBvbmVudCxcbiAgICAgICAgICBiYWNrSWNvbkJ1dHRvblByb3BzID0gX3Byb3BzMi5iYWNrSWNvbkJ1dHRvblByb3BzLFxuICAgICAgICAgIGNsYXNzZXMgPSBfcHJvcHMyLmNsYXNzZXMsXG4gICAgICAgICAgY29sU3BhblByb3AgPSBfcHJvcHMyLmNvbFNwYW4sXG4gICAgICAgICAgQ29tcG9uZW50ID0gX3Byb3BzMi5jb21wb25lbnQsXG4gICAgICAgICAgY291bnQgPSBfcHJvcHMyLmNvdW50LFxuICAgICAgICAgIGxhYmVsRGlzcGxheWVkUm93cyA9IF9wcm9wczIubGFiZWxEaXNwbGF5ZWRSb3dzLFxuICAgICAgICAgIGxhYmVsUm93c1BlclBhZ2UgPSBfcHJvcHMyLmxhYmVsUm93c1BlclBhZ2UsXG4gICAgICAgICAgbmV4dEljb25CdXR0b25Qcm9wcyA9IF9wcm9wczIubmV4dEljb25CdXR0b25Qcm9wcyxcbiAgICAgICAgICBvbkNoYW5nZVBhZ2UgPSBfcHJvcHMyLm9uQ2hhbmdlUGFnZSxcbiAgICAgICAgICBvbkNoYW5nZVJvd3NQZXJQYWdlID0gX3Byb3BzMi5vbkNoYW5nZVJvd3NQZXJQYWdlLFxuICAgICAgICAgIHBhZ2UgPSBfcHJvcHMyLnBhZ2UsXG4gICAgICAgICAgcm93c1BlclBhZ2UgPSBfcHJvcHMyLnJvd3NQZXJQYWdlLFxuICAgICAgICAgIHJvd3NQZXJQYWdlT3B0aW9ucyA9IF9wcm9wczIucm93c1BlclBhZ2VPcHRpb25zLFxuICAgICAgICAgIFNlbGVjdFByb3BzID0gX3Byb3BzMi5TZWxlY3RQcm9wcyxcbiAgICAgICAgICBvdGhlciA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyLmRlZmF1bHQpKF9wcm9wczIsIFtcIkFjdGlvbnNDb21wb25lbnRcIiwgXCJiYWNrSWNvbkJ1dHRvblByb3BzXCIsIFwiY2xhc3Nlc1wiLCBcImNvbFNwYW5cIiwgXCJjb21wb25lbnRcIiwgXCJjb3VudFwiLCBcImxhYmVsRGlzcGxheWVkUm93c1wiLCBcImxhYmVsUm93c1BlclBhZ2VcIiwgXCJuZXh0SWNvbkJ1dHRvblByb3BzXCIsIFwib25DaGFuZ2VQYWdlXCIsIFwib25DaGFuZ2VSb3dzUGVyUGFnZVwiLCBcInBhZ2VcIiwgXCJyb3dzUGVyUGFnZVwiLCBcInJvd3NQZXJQYWdlT3B0aW9uc1wiLCBcIlNlbGVjdFByb3BzXCJdKTtcbiAgICAgIHZhciBjb2xTcGFuO1xuXG4gICAgICBpZiAoQ29tcG9uZW50ID09PSBfVGFibGVDZWxsLmRlZmF1bHQgfHwgQ29tcG9uZW50ID09PSAndGQnKSB7XG4gICAgICAgIGNvbFNwYW4gPSBjb2xTcGFuUHJvcCB8fCAxMDAwOyAvLyBjb2wtc3BhbiBvdmVyIGV2ZXJ5dGhpbmdcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHtcbiAgICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzLnJvb3QsXG4gICAgICAgIGNvbFNwYW46IGNvbFNwYW5cbiAgICAgIH0sIG90aGVyKSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfVG9vbGJhci5kZWZhdWx0LCB7XG4gICAgICAgIGNsYXNzTmFtZTogY2xhc3Nlcy50b29sYmFyXG4gICAgICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzLnNwYWNlclxuICAgICAgfSksIHJvd3NQZXJQYWdlT3B0aW9ucy5sZW5ndGggPiAxICYmIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX1R5cG9ncmFwaHkuZGVmYXVsdCwge1xuICAgICAgICB2YXJpYW50OiBcImNhcHRpb25cIixcbiAgICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzLmNhcHRpb25cbiAgICAgIH0sIGxhYmVsUm93c1BlclBhZ2UpLCByb3dzUGVyUGFnZU9wdGlvbnMubGVuZ3RoID4gMSAmJiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9TZWxlY3QuZGVmYXVsdCwgKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7XG4gICAgICAgIGNsYXNzZXM6IHtcbiAgICAgICAgICByb290OiBjbGFzc2VzLnNlbGVjdFJvb3QsXG4gICAgICAgICAgc2VsZWN0OiBjbGFzc2VzLnNlbGVjdCxcbiAgICAgICAgICBpY29uOiBjbGFzc2VzLnNlbGVjdEljb25cbiAgICAgICAgfSxcbiAgICAgICAgaW5wdXQ6IF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX0lucHV0LmRlZmF1bHQsIHtcbiAgICAgICAgICBjbGFzc05hbWU6IGNsYXNzZXMuaW5wdXQsXG4gICAgICAgICAgZGlzYWJsZVVuZGVybGluZTogdHJ1ZVxuICAgICAgICB9KSxcbiAgICAgICAgdmFsdWU6IHJvd3NQZXJQYWdlLFxuICAgICAgICBvbkNoYW5nZTogb25DaGFuZ2VSb3dzUGVyUGFnZVxuICAgICAgfSwgU2VsZWN0UHJvcHMpLCByb3dzUGVyUGFnZU9wdGlvbnMubWFwKGZ1bmN0aW9uIChyb3dzUGVyUGFnZU9wdGlvbikge1xuICAgICAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfTWVudUl0ZW0uZGVmYXVsdCwge1xuICAgICAgICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5tZW51SXRlbSxcbiAgICAgICAgICBrZXk6IHJvd3NQZXJQYWdlT3B0aW9uLFxuICAgICAgICAgIHZhbHVlOiByb3dzUGVyUGFnZU9wdGlvblxuICAgICAgICB9LCByb3dzUGVyUGFnZU9wdGlvbik7XG4gICAgICB9KSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX1R5cG9ncmFwaHkuZGVmYXVsdCwge1xuICAgICAgICB2YXJpYW50OiBcImNhcHRpb25cIixcbiAgICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzLmNhcHRpb25cbiAgICAgIH0sIGxhYmVsRGlzcGxheWVkUm93cyh7XG4gICAgICAgIGZyb206IGNvdW50ID09PSAwID8gMCA6IHBhZ2UgKiByb3dzUGVyUGFnZSArIDEsXG4gICAgICAgIHRvOiBNYXRoLm1pbihjb3VudCwgKHBhZ2UgKyAxKSAqIHJvd3NQZXJQYWdlKSxcbiAgICAgICAgY291bnQ6IGNvdW50LFxuICAgICAgICBwYWdlOiBwYWdlXG4gICAgICB9KSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoQWN0aW9uc0NvbXBvbmVudCwge1xuICAgICAgICBjbGFzc05hbWU6IGNsYXNzZXMuYWN0aW9ucyxcbiAgICAgICAgYmFja0ljb25CdXR0b25Qcm9wczogYmFja0ljb25CdXR0b25Qcm9wcyxcbiAgICAgICAgY291bnQ6IGNvdW50LFxuICAgICAgICBuZXh0SWNvbkJ1dHRvblByb3BzOiBuZXh0SWNvbkJ1dHRvblByb3BzLFxuICAgICAgICBvbkNoYW5nZVBhZ2U6IG9uQ2hhbmdlUGFnZSxcbiAgICAgICAgcGFnZTogcGFnZSxcbiAgICAgICAgcm93c1BlclBhZ2U6IHJvd3NQZXJQYWdlXG4gICAgICB9KSkpO1xuICAgIH1cbiAgfV0pO1xuICByZXR1cm4gVGFibGVQYWdpbmF0aW9uO1xufShfcmVhY3QuZGVmYXVsdC5Db21wb25lbnQpO1xuXG5UYWJsZVBhZ2luYXRpb24ucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciBkaXNwbGF5aW5nIHRoZSBhY3Rpb25zLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgRE9NIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBBY3Rpb25zQ29tcG9uZW50OiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLCBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuY10pLFxuXG4gIC8qKlxuICAgKiBQcm9wZXJ0aWVzIGFwcGxpZWQgdG8gdGhlIGJhY2sgYXJyb3cgYEljb25CdXR0b25gIGNvbXBvbmVudC5cbiAgICovXG4gIGJhY2tJY29uQnV0dG9uUHJvcHM6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzLWFwaSkgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY29sU3BhbjogX3Byb3BUeXBlcy5kZWZhdWx0Lm51bWJlcixcblxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgRE9NIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsIF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jXSksXG5cbiAgLyoqXG4gICAqIFRoZSB0b3RhbCBudW1iZXIgb2Ygcm93cy5cbiAgICovXG4gIGNvdW50OiBfcHJvcFR5cGVzLmRlZmF1bHQubnVtYmVyLmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEN1c3RvbWl6ZSB0aGUgZGlzcGxheWVkIHJvd3MgbGFiZWwuXG4gICAqL1xuICBsYWJlbERpc3BsYXllZFJvd3M6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBDdXN0b21pemUgdGhlIHJvd3MgcGVyIHBhZ2UgbGFiZWwuIEludm9rZWQgd2l0aCBhIGB7IGZyb20sIHRvLCBjb3VudCwgcGFnZSB9YFxuICAgKiBvYmplY3QuXG4gICAqL1xuICBsYWJlbFJvd3NQZXJQYWdlOiBfcHJvcFR5cGVzLmRlZmF1bHQubm9kZSxcblxuICAvKipcbiAgICogUHJvcGVydGllcyBhcHBsaWVkIHRvIHRoZSBuZXh0IGFycm93IGBJY29uQnV0dG9uYCBlbGVtZW50LlxuICAgKi9cbiAgbmV4dEljb25CdXR0b25Qcm9wczogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdCxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgcGFnZSBpcyBjaGFuZ2VkLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gZXZlbnQgVGhlIGV2ZW50IHNvdXJjZSBvZiB0aGUgY2FsbGJhY2tcbiAgICogQHBhcmFtIHtudW1iZXJ9IHBhZ2UgVGhlIHBhZ2Ugc2VsZWN0ZWRcbiAgICovXG4gIG9uQ2hhbmdlUGFnZTogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgbnVtYmVyIG9mIHJvd3MgcGVyIHBhZ2UgaXMgY2hhbmdlZC5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGV2ZW50IFRoZSBldmVudCBzb3VyY2Ugb2YgdGhlIGNhbGxiYWNrXG4gICAqL1xuICBvbkNoYW5nZVJvd3NQZXJQYWdlOiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYyxcblxuICAvKipcbiAgICogVGhlIHplcm8tYmFzZWQgaW5kZXggb2YgdGhlIGN1cnJlbnQgcGFnZS5cbiAgICovXG4gIHBhZ2U6IF9wcm9wVHlwZXMuZGVmYXVsdC5udW1iZXIuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogVGhlIG51bWJlciBvZiByb3dzIHBlciBwYWdlLlxuICAgKi9cbiAgcm93c1BlclBhZ2U6IF9wcm9wVHlwZXMuZGVmYXVsdC5udW1iZXIuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQ3VzdG9taXplcyB0aGUgb3B0aW9ucyBvZiB0aGUgcm93cyBwZXIgcGFnZSBzZWxlY3QgZmllbGQuIElmIGxlc3MgdGhhbiB0d28gb3B0aW9ucyBhcmVcbiAgICogYXZhaWxhYmxlLCBubyBzZWxlY3QgZmllbGQgd2lsbCBiZSBkaXNwbGF5ZWQuXG4gICAqL1xuICByb3dzUGVyUGFnZU9wdGlvbnM6IF9wcm9wVHlwZXMuZGVmYXVsdC5hcnJheSxcblxuICAvKipcbiAgICogUHJvcGVydGllcyBhcHBsaWVkIHRvIHRoZSByb3dzIHBlciBwYWdlIGBTZWxlY3RgIGVsZW1lbnQuXG4gICAqL1xuICBTZWxlY3RQcm9wczogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdFxufSA6IHt9O1xuVGFibGVQYWdpbmF0aW9uLmRlZmF1bHRQcm9wcyA9IHtcbiAgQWN0aW9uc0NvbXBvbmVudDogX1RhYmxlUGFnaW5hdGlvbkFjdGlvbnMuZGVmYXVsdCxcbiAgY29tcG9uZW50OiBfVGFibGVDZWxsLmRlZmF1bHQsXG4gIGxhYmVsRGlzcGxheWVkUm93czogZnVuY3Rpb24gbGFiZWxEaXNwbGF5ZWRSb3dzKF9yZWYpIHtcbiAgICB2YXIgZnJvbSA9IF9yZWYuZnJvbSxcbiAgICAgICAgdG8gPSBfcmVmLnRvLFxuICAgICAgICBjb3VudCA9IF9yZWYuY291bnQ7XG4gICAgcmV0dXJuIFwiXCIuY29uY2F0KGZyb20sIFwiLVwiKS5jb25jYXQodG8sIFwiIG9mIFwiKS5jb25jYXQoY291bnQpO1xuICB9LFxuICBsYWJlbFJvd3NQZXJQYWdlOiAnUm93cyBwZXIgcGFnZTonLFxuICByb3dzUGVyUGFnZU9wdGlvbnM6IFs1LCAxMCwgMjVdXG59O1xuXG52YXIgX2RlZmF1bHQgPSAoMCwgX3dpdGhTdHlsZXMuZGVmYXVsdCkoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlUYWJsZVBhZ2luYXRpb24nXG59KShUYWJsZVBhZ2luYXRpb24pO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9leHRlbmRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9leHRlbmRzXCIpKTtcblxudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIikpO1xuXG52YXIgX2NsYXNzQ2FsbENoZWNrMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9jbGFzc0NhbGxDaGVja1wiKSk7XG5cbnZhciBfY3JlYXRlQ2xhc3MyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2NyZWF0ZUNsYXNzXCIpKTtcblxudmFyIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuXCIpKTtcblxudmFyIF9pbmhlcml0czIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vaW5oZXJpdHNcIikpO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xuXG52YXIgX2NsYXNzbmFtZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJjbGFzc25hbWVzXCIpKTtcblxudmFyIF93aXRoU3R5bGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vc3R5bGVzL3dpdGhTdHlsZXNcIikpO1xuXG52YXIgc3R5bGVzID0ge1xuICByb290OiB7XG4gICAgZGlzcGxheTogJ3RhYmxlLWhlYWRlci1ncm91cCdcbiAgfVxufTtcblxudmFyIFRhYmxlSGVhZCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICAoMCwgX2luaGVyaXRzMi5kZWZhdWx0KShUYWJsZUhlYWQsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFRhYmxlSGVhZCgpIHtcbiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMi5kZWZhdWx0KSh0aGlzLCBUYWJsZUhlYWQpO1xuICAgIHJldHVybiAoMCwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yLmRlZmF1bHQpKHRoaXMsIChUYWJsZUhlYWQuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihUYWJsZUhlYWQpKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gICgwLCBfY3JlYXRlQ2xhc3MyLmRlZmF1bHQpKFRhYmxlSGVhZCwgW3tcbiAgICBrZXk6IFwiZ2V0Q2hpbGRDb250ZXh0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldENoaWxkQ29udGV4dCgpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgY2xhc3MtbWV0aG9kcy11c2UtdGhpc1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdGFibGU6IHtcbiAgICAgICAgICBoZWFkOiB0cnVlXG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBjbGFzc2VzID0gX3Byb3BzLmNsYXNzZXMsXG4gICAgICAgICAgY2xhc3NOYW1lID0gX3Byb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgICBDb21wb25lbnQgPSBfcHJvcHMuY29tcG9uZW50LFxuICAgICAgICAgIG90aGVyID0gKDAsIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIuZGVmYXVsdCkoX3Byb3BzLCBbXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29tcG9uZW50XCJdKTtcbiAgICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7XG4gICAgICAgIGNsYXNzTmFtZTogKDAsIF9jbGFzc25hbWVzLmRlZmF1bHQpKGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lKVxuICAgICAgfSwgb3RoZXIpKTtcbiAgICB9XG4gIH1dKTtcbiAgcmV0dXJuIFRhYmxlSGVhZDtcbn0oX3JlYWN0LmRlZmF1bHQuQ29tcG9uZW50KTtcblxuVGFibGVIZWFkLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQsIG5vcm1hbGx5IGBUYWJsZVJvd2AuXG4gICAqL1xuICBjaGlsZHJlbjogX3Byb3BUeXBlcy5kZWZhdWx0Lm5vZGUuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MtYXBpKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIERPTSBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgY29tcG9uZW50OiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLCBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuY10pXG59IDoge307XG5UYWJsZUhlYWQuZGVmYXVsdFByb3BzID0ge1xuICBjb21wb25lbnQ6ICd0aGVhZCdcbn07XG5UYWJsZUhlYWQuY2hpbGRDb250ZXh0VHlwZXMgPSB7XG4gIHRhYmxlOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0XG59O1xuXG52YXIgX2RlZmF1bHQgPSAoMCwgX3dpdGhTdHlsZXMuZGVmYXVsdCkoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlUYWJsZUhlYWQnXG59KShUYWJsZUhlYWQpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9leHRlbmRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9leHRlbmRzXCIpKTtcblxudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIikpO1xuXG52YXIgX2NsYXNzQ2FsbENoZWNrMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9jbGFzc0NhbGxDaGVja1wiKSk7XG5cbnZhciBfY3JlYXRlQ2xhc3MyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2NyZWF0ZUNsYXNzXCIpKTtcblxudmFyIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuXCIpKTtcblxudmFyIF9pbmhlcml0czIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vaW5oZXJpdHNcIikpO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xuXG52YXIgX2NsYXNzbmFtZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJjbGFzc25hbWVzXCIpKTtcblxudmFyIF93aXRoU3R5bGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vc3R5bGVzL3dpdGhTdHlsZXNcIikpO1xuXG52YXIgc3R5bGVzID0ge1xuICByb290OiB7XG4gICAgZGlzcGxheTogJ3RhYmxlLWZvb3Rlci1ncm91cCdcbiAgfVxufTtcblxudmFyIFRhYmxlRm9vdGVyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gICgwLCBfaW5oZXJpdHMyLmRlZmF1bHQpKFRhYmxlRm9vdGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBUYWJsZUZvb3RlcigpIHtcbiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMi5kZWZhdWx0KSh0aGlzLCBUYWJsZUZvb3Rlcik7XG4gICAgcmV0dXJuICgwLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIuZGVmYXVsdCkodGhpcywgKFRhYmxlRm9vdGVyLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoVGFibGVGb290ZXIpKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gICgwLCBfY3JlYXRlQ2xhc3MyLmRlZmF1bHQpKFRhYmxlRm9vdGVyLCBbe1xuICAgIGtleTogXCJnZXRDaGlsZENvbnRleHRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0Q2hpbGRDb250ZXh0KCkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBjbGFzcy1tZXRob2RzLXVzZS10aGlzXG4gICAgICByZXR1cm4ge1xuICAgICAgICB0YWJsZToge1xuICAgICAgICAgIGZvb3RlcjogdHJ1ZVxuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgY2xhc3NlcyA9IF9wcm9wcy5jbGFzc2VzLFxuICAgICAgICAgIGNsYXNzTmFtZSA9IF9wcm9wcy5jbGFzc05hbWUsXG4gICAgICAgICAgQ29tcG9uZW50ID0gX3Byb3BzLmNvbXBvbmVudCxcbiAgICAgICAgICBvdGhlciA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyLmRlZmF1bHQpKF9wcm9wcywgW1wiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcImNvbXBvbmVudFwiXSk7XG4gICAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChDb21wb25lbnQsICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe1xuICAgICAgICBjbGFzc05hbWU6ICgwLCBfY2xhc3NuYW1lcy5kZWZhdWx0KShjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSlcbiAgICAgIH0sIG90aGVyKSk7XG4gICAgfVxuICB9XSk7XG4gIHJldHVybiBUYWJsZUZvb3Rlcjtcbn0oX3JlYWN0LmRlZmF1bHQuQ29tcG9uZW50KTtcblxuVGFibGVGb290ZXIucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGNvbXBvbmVudCwgbm9ybWFsbHkgYFRhYmxlUm93YC5cbiAgICovXG4gIGNoaWxkcmVuOiBfcHJvcFR5cGVzLmRlZmF1bHQubm9kZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MtYXBpKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIERPTSBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgY29tcG9uZW50OiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLCBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuY10pXG59IDoge307XG5UYWJsZUZvb3Rlci5kZWZhdWx0UHJvcHMgPSB7XG4gIGNvbXBvbmVudDogJ3Rmb290J1xufTtcblRhYmxlRm9vdGVyLmNoaWxkQ29udGV4dFR5cGVzID0ge1xuICB0YWJsZTogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdFxufTtcblxudmFyIF9kZWZhdWx0ID0gKDAsIF93aXRoU3R5bGVzLmRlZmF1bHQpKHN0eWxlcywge1xuICBuYW1lOiAnTXVpVGFibGVGb290ZXInXG59KShUYWJsZUZvb3Rlcik7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5zdHlsZXMgPSB2b2lkIDA7XG5cbnZhciBfZXh0ZW5kczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vZXh0ZW5kc1wiKSk7XG5cbnZhciBfZGVmaW5lUHJvcGVydHkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2RlZmluZVByb3BlcnR5XCIpKTtcblxudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIikpO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xuXG52YXIgX2NsYXNzbmFtZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJjbGFzc25hbWVzXCIpKTtcblxudmFyIF93aXRoU3R5bGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vc3R5bGVzL3dpdGhTdHlsZXNcIikpO1xuXG52YXIgX2hlbHBlcnMgPSByZXF1aXJlKFwiLi4vdXRpbHMvaGVscGVyc1wiKTtcblxudmFyIF9jb2xvck1hbmlwdWxhdG9yID0gcmVxdWlyZShcIi4uL3N0eWxlcy9jb2xvck1hbmlwdWxhdG9yXCIpO1xuXG52YXIgc3R5bGVzID0gZnVuY3Rpb24gc3R5bGVzKHRoZW1lKSB7XG4gIHJldHVybiB7XG4gICAgcm9vdDoge1xuICAgICAgZGlzcGxheTogJ3RhYmxlLWNlbGwnLFxuICAgICAgdmVydGljYWxBbGlnbjogJ2luaGVyaXQnLFxuICAgICAgLy8gV29ya2Fyb3VuZCBmb3IgYSByZW5kZXJpbmcgYnVnIHdpdGggc3Bhbm5lZCBjb2x1bW5zIGluIENocm9tZSA2Mi4wLlxuICAgICAgLy8gUmVtb3ZlcyB0aGUgYWxwaGEgKHNldHMgaXQgdG8gMSksIGFuZCBsaWdodGVucyBvciBkYXJrZW5zIHRoZSB0aGVtZSBjb2xvci5cbiAgICAgIGJvcmRlckJvdHRvbTogXCIxcHggc29saWRcXG4gICAgXCIuY29uY2F0KHRoZW1lLnBhbGV0dGUudHlwZSA9PT0gJ2xpZ2h0JyA/ICgwLCBfY29sb3JNYW5pcHVsYXRvci5saWdodGVuKSgoMCwgX2NvbG9yTWFuaXB1bGF0b3IuZmFkZSkodGhlbWUucGFsZXR0ZS5kaXZpZGVyLCAxKSwgMC44OCkgOiAoMCwgX2NvbG9yTWFuaXB1bGF0b3IuZGFya2VuKSgoMCwgX2NvbG9yTWFuaXB1bGF0b3IuZmFkZSkodGhlbWUucGFsZXR0ZS5kaXZpZGVyLCAxKSwgMC44KSksXG4gICAgICB0ZXh0QWxpZ246ICdsZWZ0JyxcbiAgICAgIHBhZGRpbmc6IFwiXCIuY29uY2F0KHRoZW1lLnNwYWNpbmcudW5pdCAvIDIsIFwicHggXCIpLmNvbmNhdCh0aGVtZS5zcGFjaW5nLnVuaXQgKiA3LCBcInB4IFwiKS5jb25jYXQodGhlbWUuc3BhY2luZy51bml0IC8gMiwgXCJweCBcIikuY29uY2F0KHRoZW1lLnNwYWNpbmcudW5pdCAqIDMsIFwicHhcIiksXG4gICAgICAnJjpsYXN0LWNoaWxkJzoge1xuICAgICAgICBwYWRkaW5nUmlnaHQ6IHRoZW1lLnNwYWNpbmcudW5pdCAqIDNcbiAgICAgIH1cbiAgICB9LFxuICAgIGhlYWQ6IHtcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnRleHQuc2Vjb25kYXJ5LFxuICAgICAgZm9udFNpemU6IHRoZW1lLnR5cG9ncmFwaHkucHhUb1JlbSgxMiksXG4gICAgICBmb250V2VpZ2h0OiB0aGVtZS50eXBvZ3JhcGh5LmZvbnRXZWlnaHRNZWRpdW1cbiAgICB9LFxuICAgIGJvZHk6IHtcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnRleHQucHJpbWFyeSxcbiAgICAgIGZvbnRTaXplOiB0aGVtZS50eXBvZ3JhcGh5LnB4VG9SZW0oMTMpLFxuICAgICAgZm9udFdlaWdodDogdGhlbWUudHlwb2dyYXBoeS5mb250V2VpZ2h0UmVndWxhclxuICAgIH0sXG4gICAgZm9vdGVyOiB7XG4gICAgICBib3JkZXJCb3R0b206IDAsXG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS50ZXh0LnNlY29uZGFyeSxcbiAgICAgIGZvbnRTaXplOiB0aGVtZS50eXBvZ3JhcGh5LnB4VG9SZW0oMTIpXG4gICAgfSxcbiAgICBudW1lcmljOiB7XG4gICAgICB0ZXh0QWxpZ246ICdyaWdodCcsXG4gICAgICBmbGV4RGlyZWN0aW9uOiAncm93LXJldmVyc2UnIC8vIGNhbiBiZSBkeW5hbWljYWxseSBpbmhlcml0ZWQgYXQgcnVudGltZSBieSBjb250ZW50c1xuXG4gICAgfSxcbiAgICBwYWRkaW5nRGVuc2U6IHtcbiAgICAgIHBhZGRpbmdSaWdodDogdGhlbWUuc3BhY2luZy51bml0ICogM1xuICAgIH0sXG4gICAgcGFkZGluZ0NoZWNrYm94OiB7XG4gICAgICBwYWRkaW5nOiAnMCAxMnB4JyxcbiAgICAgICcmOmxhc3QtY2hpbGQnOiB7XG4gICAgICAgIHBhZGRpbmdSaWdodDogMTJcbiAgICAgIH1cbiAgICB9LFxuICAgIHBhZGRpbmdOb25lOiB7XG4gICAgICBwYWRkaW5nOiAwLFxuICAgICAgJyY6bGFzdC1jaGlsZCc6IHtcbiAgICAgICAgcGFkZGluZzogMFxuICAgICAgfVxuICAgIH1cbiAgfTtcbn07XG5cbmV4cG9ydHMuc3R5bGVzID0gc3R5bGVzO1xuXG5mdW5jdGlvbiBUYWJsZUNlbGwocHJvcHMsIGNvbnRleHQpIHtcbiAgdmFyIF9jbGFzc05hbWVzO1xuXG4gIHZhciBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBjbGFzc05hbWVQcm9wID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgY29tcG9uZW50ID0gcHJvcHMuY29tcG9uZW50LFxuICAgICAgc29ydERpcmVjdGlvbiA9IHByb3BzLnNvcnREaXJlY3Rpb24sXG4gICAgICBudW1lcmljID0gcHJvcHMubnVtZXJpYyxcbiAgICAgIHBhZGRpbmcgPSBwcm9wcy5wYWRkaW5nLFxuICAgICAgc2NvcGVQcm9wID0gcHJvcHMuc2NvcGUsXG4gICAgICB2YXJpYW50ID0gcHJvcHMudmFyaWFudCxcbiAgICAgIG90aGVyID0gKDAsIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIuZGVmYXVsdCkocHJvcHMsIFtcImNoaWxkcmVuXCIsIFwiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcImNvbXBvbmVudFwiLCBcInNvcnREaXJlY3Rpb25cIiwgXCJudW1lcmljXCIsIFwicGFkZGluZ1wiLCBcInNjb3BlXCIsIFwidmFyaWFudFwiXSk7XG4gIHZhciB0YWJsZSA9IGNvbnRleHQudGFibGU7XG4gIHZhciBDb21wb25lbnQ7XG5cbiAgaWYgKGNvbXBvbmVudCkge1xuICAgIENvbXBvbmVudCA9IGNvbXBvbmVudDtcbiAgfSBlbHNlIHtcbiAgICBDb21wb25lbnQgPSB0YWJsZSAmJiB0YWJsZS5oZWFkID8gJ3RoJyA6ICd0ZCc7XG4gIH1cblxuICB2YXIgc2NvcGUgPSBzY29wZVByb3A7XG5cbiAgaWYgKCFzY29wZSAmJiB0YWJsZSAmJiB0YWJsZS5oZWFkKSB7XG4gICAgc2NvcGUgPSAnY29sJztcbiAgfVxuXG4gIHZhciBjbGFzc05hbWUgPSAoMCwgX2NsYXNzbmFtZXMuZGVmYXVsdCkoY2xhc3Nlcy5yb290LCAoX2NsYXNzTmFtZXMgPSB7fSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2NsYXNzTmFtZXMsIGNsYXNzZXMuaGVhZCwgdmFyaWFudCA/IHZhcmlhbnQgPT09ICdoZWFkJyA6IHRhYmxlICYmIHRhYmxlLmhlYWQpLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lcywgY2xhc3Nlcy5ib2R5LCB2YXJpYW50ID8gdmFyaWFudCA9PT0gJ2JvZHknIDogdGFibGUgJiYgdGFibGUuYm9keSksICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKF9jbGFzc05hbWVzLCBjbGFzc2VzLmZvb3RlciwgdmFyaWFudCA/IHZhcmlhbnQgPT09ICdmb290ZXInIDogdGFibGUgJiYgdGFibGUuZm9vdGVyKSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2NsYXNzTmFtZXMsIGNsYXNzZXMubnVtZXJpYywgbnVtZXJpYyksICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKF9jbGFzc05hbWVzLCBjbGFzc2VzW1wicGFkZGluZ1wiLmNvbmNhdCgoMCwgX2hlbHBlcnMuY2FwaXRhbGl6ZSkocGFkZGluZykpXSwgcGFkZGluZyAhPT0gJ2RlZmF1bHQnKSwgX2NsYXNzTmFtZXMpLCBjbGFzc05hbWVQcm9wKTtcbiAgdmFyIGFyaWFTb3J0ID0gbnVsbDtcblxuICBpZiAoc29ydERpcmVjdGlvbikge1xuICAgIGFyaWFTb3J0ID0gc29ydERpcmVjdGlvbiA9PT0gJ2FzYycgPyAnYXNjZW5kaW5nJyA6ICdkZXNjZW5kaW5nJztcbiAgfVxuXG4gIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7XG4gICAgY2xhc3NOYW1lOiBjbGFzc05hbWUsXG4gICAgXCJhcmlhLXNvcnRcIjogYXJpYVNvcnQsXG4gICAgc2NvcGU6IHNjb3BlXG4gIH0sIG90aGVyKSwgY2hpbGRyZW4pO1xufVxuXG5UYWJsZUNlbGwucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKipcbiAgICogVGhlIHRhYmxlIGNlbGwgY29udGVudHMuXG4gICAqL1xuICBjaGlsZHJlbjogX3Byb3BUeXBlcy5kZWZhdWx0Lm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzLWFwaSkgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBET00gZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZywgX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmNdKSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCBjb250ZW50IHdpbGwgYWxpZ24gdG8gdGhlIHJpZ2h0LlxuICAgKi9cbiAgbnVtZXJpYzogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIHBhZGRpbmcgYXBwbGllZCB0byB0aGUgY2VsbC5cbiAgICovXG4gIHBhZGRpbmc6IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZihbJ2RlZmF1bHQnLCAnY2hlY2tib3gnLCAnZGVuc2UnLCAnbm9uZSddKSxcblxuICAvKipcbiAgICogU2V0IHNjb3BlIGF0dHJpYnV0ZS5cbiAgICovXG4gIHNjb3BlOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBTZXQgYXJpYS1zb3J0IGRpcmVjdGlvbi5cbiAgICovXG4gIHNvcnREaXJlY3Rpb246IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZihbJ2FzYycsICdkZXNjJywgZmFsc2VdKSxcblxuICAvKipcbiAgICogU3BlY2lmeSB0aGUgY2VsbCB0eXBlLlxuICAgKiBCeSBkZWZhdWx0LCB0aGUgVGFibGVIZWFkLCBUYWJsZUJvZHkgb3IgVGFibGVGb290ZXIgcGFyZW50IGNvbXBvbmVudCBzZXQgdGhlIHZhbHVlLlxuICAgKi9cbiAgdmFyaWFudDogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mKFsnaGVhZCcsICdib2R5JywgJ2Zvb3RlciddKVxufSA6IHt9O1xuVGFibGVDZWxsLmRlZmF1bHRQcm9wcyA9IHtcbiAgbnVtZXJpYzogZmFsc2UsXG4gIHBhZGRpbmc6ICdkZWZhdWx0J1xufTtcblRhYmxlQ2VsbC5jb250ZXh0VHlwZXMgPSB7XG4gIHRhYmxlOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0LmlzUmVxdWlyZWRcbn07XG5cbnZhciBfZGVmYXVsdCA9ICgwLCBfd2l0aFN0eWxlcy5kZWZhdWx0KShzdHlsZXMsIHtcbiAgbmFtZTogJ011aVRhYmxlQ2VsbCdcbn0pKFRhYmxlQ2VsbCk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX2V4dGVuZHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2V4dGVuZHNcIikpO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiKSk7XG5cbnZhciBfY2xhc3NDYWxsQ2hlY2syID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2NsYXNzQ2FsbENoZWNrXCIpKTtcblxudmFyIF9jcmVhdGVDbGFzczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vY3JlYXRlQ2xhc3NcIikpO1xuXG52YXIgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5cIikpO1xuXG52YXIgX2luaGVyaXRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9pbmhlcml0c1wiKSk7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbnZhciBfY2xhc3NuYW1lcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImNsYXNzbmFtZXNcIikpO1xuXG52YXIgX3dpdGhTdHlsZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9zdHlsZXMvd2l0aFN0eWxlc1wiKSk7XG5cbnZhciBzdHlsZXMgPSB7XG4gIHJvb3Q6IHtcbiAgICBkaXNwbGF5OiAndGFibGUtcm93LWdyb3VwJ1xuICB9XG59O1xuXG52YXIgVGFibGVCb2R5ID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gICgwLCBfaW5oZXJpdHMyLmRlZmF1bHQpKFRhYmxlQm9keSwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gVGFibGVCb2R5KCkge1xuICAgICgwLCBfY2xhc3NDYWxsQ2hlY2syLmRlZmF1bHQpKHRoaXMsIFRhYmxlQm9keSk7XG4gICAgcmV0dXJuICgwLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIuZGVmYXVsdCkodGhpcywgKFRhYmxlQm9keS5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKFRhYmxlQm9keSkpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgKDAsIF9jcmVhdGVDbGFzczIuZGVmYXVsdCkoVGFibGVCb2R5LCBbe1xuICAgIGtleTogXCJnZXRDaGlsZENvbnRleHRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0Q2hpbGRDb250ZXh0KCkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBjbGFzcy1tZXRob2RzLXVzZS10aGlzXG4gICAgICByZXR1cm4ge1xuICAgICAgICB0YWJsZToge1xuICAgICAgICAgIGJvZHk6IHRydWVcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGNsYXNzZXMgPSBfcHJvcHMuY2xhc3NlcyxcbiAgICAgICAgICBjbGFzc05hbWUgPSBfcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICAgIENvbXBvbmVudCA9IF9wcm9wcy5jb21wb25lbnQsXG4gICAgICAgICAgb3RoZXIgPSAoMCwgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMi5kZWZhdWx0KShfcHJvcHMsIFtcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJjb21wb25lbnRcIl0pO1xuICAgICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHtcbiAgICAgICAgY2xhc3NOYW1lOiAoMCwgX2NsYXNzbmFtZXMuZGVmYXVsdCkoY2xhc3Nlcy5yb290LCBjbGFzc05hbWUpXG4gICAgICB9LCBvdGhlcikpO1xuICAgIH1cbiAgfV0pO1xuICByZXR1cm4gVGFibGVCb2R5O1xufShfcmVhY3QuZGVmYXVsdC5Db21wb25lbnQpO1xuXG5UYWJsZUJvZHkucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGNvbXBvbmVudCwgbm9ybWFsbHkgYFRhYmxlUm93YC5cbiAgICovXG4gIGNoaWxkcmVuOiBfcHJvcFR5cGVzLmRlZmF1bHQubm9kZS5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2Nzcy1hcGkpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgRE9NIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsIF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jXSlcbn0gOiB7fTtcblRhYmxlQm9keS5kZWZhdWx0UHJvcHMgPSB7XG4gIGNvbXBvbmVudDogJ3Rib2R5J1xufTtcblRhYmxlQm9keS5jaGlsZENvbnRleHRUeXBlcyA9IHtcbiAgdGFibGU6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3Rcbn07XG5cbnZhciBfZGVmYXVsdCA9ICgwLCBfd2l0aFN0eWxlcy5kZWZhdWx0KShzdHlsZXMsIHtcbiAgbmFtZTogJ011aVRhYmxlQm9keSdcbn0pKFRhYmxlQm9keSk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5zdHlsZXMgPSB2b2lkIDA7XG5cbnZhciBfZXh0ZW5kczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vZXh0ZW5kc1wiKSk7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCIpKTtcblxudmFyIF9jbGFzc0NhbGxDaGVjazIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vY2xhc3NDYWxsQ2hlY2tcIikpO1xuXG52YXIgX2NyZWF0ZUNsYXNzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9jcmVhdGVDbGFzc1wiKSk7XG5cbnZhciBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vcG9zc2libGVDb25zdHJ1Y3RvclJldHVyblwiKSk7XG5cbnZhciBfaW5oZXJpdHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2luaGVyaXRzXCIpKTtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKTtcblxudmFyIF9jbGFzc25hbWVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY2xhc3NuYW1lc1wiKSk7XG5cbnZhciBfd2l0aFN0eWxlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3N0eWxlcy93aXRoU3R5bGVzXCIpKTtcblxudmFyIHN0eWxlcyA9IGZ1bmN0aW9uIHN0eWxlcyh0aGVtZSkge1xuICByZXR1cm4ge1xuICAgIHJvb3Q6IHtcbiAgICAgIGRpc3BsYXk6ICd0YWJsZScsXG4gICAgICBmb250RmFtaWx5OiB0aGVtZS50eXBvZ3JhcGh5LmZvbnRGYW1pbHksXG4gICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgYm9yZGVyQ29sbGFwc2U6ICdjb2xsYXBzZScsXG4gICAgICBib3JkZXJTcGFjaW5nOiAwXG4gICAgfVxuICB9O1xufTtcblxuZXhwb3J0cy5zdHlsZXMgPSBzdHlsZXM7XG5cbnZhciBUYWJsZSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICAoMCwgX2luaGVyaXRzMi5kZWZhdWx0KShUYWJsZSwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gVGFibGUoKSB7XG4gICAgKDAsIF9jbGFzc0NhbGxDaGVjazIuZGVmYXVsdCkodGhpcywgVGFibGUpO1xuICAgIHJldHVybiAoMCwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yLmRlZmF1bHQpKHRoaXMsIChUYWJsZS5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKFRhYmxlKSkuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICAoMCwgX2NyZWF0ZUNsYXNzMi5kZWZhdWx0KShUYWJsZSwgW3tcbiAgICBrZXk6IFwiZ2V0Q2hpbGRDb250ZXh0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldENoaWxkQ29udGV4dCgpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgY2xhc3MtbWV0aG9kcy11c2UtdGhpc1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdGFibGU6IHt9XG4gICAgICB9O1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgY2xhc3NlcyA9IF9wcm9wcy5jbGFzc2VzLFxuICAgICAgICAgIGNsYXNzTmFtZSA9IF9wcm9wcy5jbGFzc05hbWUsXG4gICAgICAgICAgQ29tcG9uZW50ID0gX3Byb3BzLmNvbXBvbmVudCxcbiAgICAgICAgICBvdGhlciA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyLmRlZmF1bHQpKF9wcm9wcywgW1wiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcImNvbXBvbmVudFwiXSk7XG4gICAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChDb21wb25lbnQsICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe1xuICAgICAgICBjbGFzc05hbWU6ICgwLCBfY2xhc3NuYW1lcy5kZWZhdWx0KShjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSlcbiAgICAgIH0sIG90aGVyKSk7XG4gICAgfVxuICB9XSk7XG4gIHJldHVybiBUYWJsZTtcbn0oX3JlYWN0LmRlZmF1bHQuQ29tcG9uZW50KTtcblxuVGFibGUucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIHRhYmxlLCBub3JtYWxseSBgVGFibGVIZWFkZXJgIGFuZCBgVGFibGVCb2R5YC5cbiAgICovXG4gIGNoaWxkcmVuOiBfcHJvcFR5cGVzLmRlZmF1bHQubm9kZS5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2Nzcy1hcGkpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgRE9NIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsIF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jXSlcbn0gOiB7fTtcblRhYmxlLmRlZmF1bHRQcm9wcyA9IHtcbiAgY29tcG9uZW50OiAndGFibGUnXG59O1xuVGFibGUuY2hpbGRDb250ZXh0VHlwZXMgPSB7XG4gIHRhYmxlOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0XG59O1xuXG52YXIgX2RlZmF1bHQgPSAoMCwgX3dpdGhTdHlsZXMuZGVmYXVsdCkoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlUYWJsZSdcbn0pKFRhYmxlKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLnN0eWxlcyA9IHZvaWQgMDtcblxudmFyIF9leHRlbmRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9leHRlbmRzXCIpKTtcblxudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIikpO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xuXG52YXIgX2NsYXNzbmFtZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJjbGFzc25hbWVzXCIpKTtcblxudmFyIF93aXRoU3R5bGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vc3R5bGVzL3dpdGhTdHlsZXNcIikpO1xuXG52YXIgX2hlbHBlcnMgPSByZXF1aXJlKFwiLi4vdXRpbHMvaGVscGVyc1wiKTtcblxudmFyIF9Td2l0Y2hCYXNlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vaW50ZXJuYWwvU3dpdGNoQmFzZVwiKSk7XG5cbnZhciBzdHlsZXMgPSBmdW5jdGlvbiBzdHlsZXModGhlbWUpIHtcbiAgcmV0dXJuIHtcbiAgICByb290OiB7XG4gICAgICBkaXNwbGF5OiAnaW5saW5lLWZsZXgnLFxuICAgICAgd2lkdGg6IDYyLFxuICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgICBmbGV4U2hyaW5rOiAwLFxuICAgICAgLy8gRm9yIGNvcnJlY3QgYWxpZ25tZW50IHdpdGggdGhlIHRleHQuXG4gICAgICB2ZXJ0aWNhbEFsaWduOiAnbWlkZGxlJ1xuICAgIH0sXG4gICAgaWNvbjoge1xuICAgICAgYm94U2hhZG93OiB0aGVtZS5zaGFkb3dzWzFdLFxuICAgICAgYmFja2dyb3VuZENvbG9yOiAnY3VycmVudENvbG9yJyxcbiAgICAgIHdpZHRoOiAyMCxcbiAgICAgIGhlaWdodDogMjAsXG4gICAgICBib3JkZXJSYWRpdXM6ICc1MCUnXG4gICAgfSxcbiAgICBpY29uQ2hlY2tlZDoge1xuICAgICAgYm94U2hhZG93OiB0aGVtZS5zaGFkb3dzWzJdXG4gICAgfSxcbiAgICBzd2l0Y2hCYXNlOiB7XG4gICAgICB6SW5kZXg6IDEsXG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS50eXBlID09PSAnbGlnaHQnID8gdGhlbWUucGFsZXR0ZS5ncmV5WzUwXSA6IHRoZW1lLnBhbGV0dGUuZ3JleVs0MDBdLFxuICAgICAgdHJhbnNpdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCd0cmFuc2Zvcm0nLCB7XG4gICAgICAgIGR1cmF0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5kdXJhdGlvbi5zaG9ydGVzdFxuICAgICAgfSlcbiAgICB9LFxuICAgIGNoZWNrZWQ6IHtcbiAgICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZVgoMTRweCknLFxuICAgICAgJyYgKyAkYmFyJzoge1xuICAgICAgICBvcGFjaXR5OiAwLjVcbiAgICAgIH1cbiAgICB9LFxuICAgIGNvbG9yUHJpbWFyeToge1xuICAgICAgJyYkY2hlY2tlZCc6IHtcbiAgICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUucHJpbWFyeS5tYWluLFxuICAgICAgICAnJiArICRiYXInOiB7XG4gICAgICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLnByaW1hcnkubWFpblxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBjb2xvclNlY29uZGFyeToge1xuICAgICAgJyYkY2hlY2tlZCc6IHtcbiAgICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuc2Vjb25kYXJ5Lm1haW4sXG4gICAgICAgICcmICsgJGJhcic6IHtcbiAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUuc2Vjb25kYXJ5Lm1haW5cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgZGlzYWJsZWQ6IHtcbiAgICAgICcmICsgJGJhcic6IHtcbiAgICAgICAgb3BhY2l0eTogdGhlbWUucGFsZXR0ZS50eXBlID09PSAnbGlnaHQnID8gMC4xMiA6IDAuMVxuICAgICAgfSxcbiAgICAgICcmICRpY29uJzoge1xuICAgICAgICBib3hTaGFkb3c6IHRoZW1lLnNoYWRvd3NbMV1cbiAgICAgIH0sXG4gICAgICAnJiRzd2l0Y2hCYXNlJzoge1xuICAgICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS50eXBlID09PSAnbGlnaHQnID8gdGhlbWUucGFsZXR0ZS5ncmV5WzQwMF0gOiB0aGVtZS5wYWxldHRlLmdyZXlbODAwXSxcbiAgICAgICAgJyYgKyAkYmFyJzoge1xuICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS50eXBlID09PSAnbGlnaHQnID8gdGhlbWUucGFsZXR0ZS5jb21tb24uYmxhY2sgOiB0aGVtZS5wYWxldHRlLmNvbW1vbi53aGl0ZVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBiYXI6IHtcbiAgICAgIGJvcmRlclJhZGl1czogNyxcbiAgICAgIGRpc3BsYXk6ICdibG9jaycsXG4gICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgIHdpZHRoOiAzNCxcbiAgICAgIGhlaWdodDogMTQsXG4gICAgICB0b3A6ICc1MCUnLFxuICAgICAgbGVmdDogJzUwJScsXG4gICAgICBtYXJnaW5Ub3A6IC03LFxuICAgICAgbWFyZ2luTGVmdDogLTE3LFxuICAgICAgdHJhbnNpdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKFsnb3BhY2l0eScsICdiYWNrZ3JvdW5kLWNvbG9yJ10sIHtcbiAgICAgICAgZHVyYXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmR1cmF0aW9uLnNob3J0ZXN0XG4gICAgICB9KSxcbiAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS50eXBlID09PSAnbGlnaHQnID8gdGhlbWUucGFsZXR0ZS5jb21tb24uYmxhY2sgOiB0aGVtZS5wYWxldHRlLmNvbW1vbi53aGl0ZSxcbiAgICAgIG9wYWNpdHk6IHRoZW1lLnBhbGV0dGUudHlwZSA9PT0gJ2xpZ2h0JyA/IDAuMzggOiAwLjNcbiAgICB9XG4gIH07XG59O1xuXG5leHBvcnRzLnN0eWxlcyA9IHN0eWxlcztcblxuZnVuY3Rpb24gU3dpdGNoKHByb3BzKSB7XG4gIHZhciBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIGNvbG9yID0gcHJvcHMuY29sb3IsXG4gICAgICBvdGhlciA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyLmRlZmF1bHQpKHByb3BzLCBbXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29sb3JcIl0pO1xuICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcInNwYW5cIiwge1xuICAgIGNsYXNzTmFtZTogKDAsIF9jbGFzc25hbWVzLmRlZmF1bHQpKGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lKVxuICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9Td2l0Y2hCYXNlLmRlZmF1bHQsICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe1xuICAgIGljb246IF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5pY29uXG4gICAgfSksXG4gICAgY2xhc3Nlczoge1xuICAgICAgcm9vdDogKDAsIF9jbGFzc25hbWVzLmRlZmF1bHQpKGNsYXNzZXMuc3dpdGNoQmFzZSwgY2xhc3Nlc1tcImNvbG9yXCIuY29uY2F0KCgwLCBfaGVscGVycy5jYXBpdGFsaXplKShjb2xvcikpXSksXG4gICAgICBjaGVja2VkOiBjbGFzc2VzLmNoZWNrZWQsXG4gICAgICBkaXNhYmxlZDogY2xhc3Nlcy5kaXNhYmxlZFxuICAgIH0sXG4gICAgY2hlY2tlZEljb246IF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICAgIGNsYXNzTmFtZTogKDAsIF9jbGFzc25hbWVzLmRlZmF1bHQpKGNsYXNzZXMuaWNvbiwgY2xhc3Nlcy5pY29uQ2hlY2tlZClcbiAgICB9KVxuICB9LCBvdGhlcikpLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7XG4gICAgY2xhc3NOYW1lOiBjbGFzc2VzLmJhclxuICB9KSk7XG59XG5cblN3aXRjaC5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBjb21wb25lbnQgaXMgY2hlY2tlZC5cbiAgICovXG4gIGNoZWNrZWQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMuZGVmYXVsdC5ib29sLCBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nXSksXG5cbiAgLyoqXG4gICAqIFRoZSBpY29uIHRvIGRpc3BsYXkgd2hlbiB0aGUgY29tcG9uZW50IGlzIGNoZWNrZWQuXG4gICAqL1xuICBjaGVja2VkSWNvbjogX3Byb3BUeXBlcy5kZWZhdWx0Lm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzLWFwaSkgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29sb3Igb2YgdGhlIGNvbXBvbmVudC4gSXQgc3VwcG9ydHMgdGhvc2UgdGhlbWUgY29sb3JzIHRoYXQgbWFrZSBzZW5zZSBmb3IgdGhpcyBjb21wb25lbnQuXG4gICAqL1xuICBjb2xvcjogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mKFsncHJpbWFyeScsICdzZWNvbmRhcnknLCAnZGVmYXVsdCddKSxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgZGVmYXVsdENoZWNrZWQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBzd2l0Y2ggd2lsbCBiZSBkaXNhYmxlZC5cbiAgICovXG4gIGRpc2FibGVkOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgcmlwcGxlIGVmZmVjdCB3aWxsIGJlIGRpc2FibGVkLlxuICAgKi9cbiAgZGlzYWJsZVJpcHBsZTogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSBpY29uIHRvIGRpc3BsYXkgd2hlbiB0aGUgY29tcG9uZW50IGlzIHVuY2hlY2tlZC5cbiAgICovXG4gIGljb246IF9wcm9wVHlwZXMuZGVmYXVsdC5ub2RlLFxuXG4gIC8qKlxuICAgKiBUaGUgaWQgb2YgdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIGlkOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBBdHRyaWJ1dGVzIGFwcGxpZWQgdG8gdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIGlucHV0UHJvcHM6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QsXG5cbiAgLyoqXG4gICAqIFVzZSB0aGF0IHByb3BlcnR5IHRvIHBhc3MgYSByZWYgY2FsbGJhY2sgdG8gdGhlIG5hdGl2ZSBpbnB1dCBjb21wb25lbnQuXG4gICAqL1xuICBpbnB1dFJlZjogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsIF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3RdKSxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgc3RhdGUgaXMgY2hhbmdlZC5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGV2ZW50IFRoZSBldmVudCBzb3VyY2Ugb2YgdGhlIGNhbGxiYWNrLlxuICAgKiBZb3UgY2FuIHB1bGwgb3V0IHRoZSBuZXcgdmFsdWUgYnkgYWNjZXNzaW5nIGBldmVudC50YXJnZXQuY2hlY2tlZGAuXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gY2hlY2tlZCBUaGUgYGNoZWNrZWRgIHZhbHVlIG9mIHRoZSBzd2l0Y2hcbiAgICovXG4gIG9uQ2hhbmdlOiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYyxcblxuICAvKipcbiAgICogVGhlIGlucHV0IGNvbXBvbmVudCBwcm9wZXJ0eSBgdHlwZWAuXG4gICAqL1xuICB0eXBlOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgdmFsdWUgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIHZhbHVlOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nXG59IDoge307XG5Td2l0Y2guZGVmYXVsdFByb3BzID0ge1xuICBjb2xvcjogJ3NlY29uZGFyeSdcbn07XG5cbnZhciBfZGVmYXVsdCA9ICgwLCBfd2l0aFN0eWxlcy5kZWZhdWx0KShzdHlsZXMsIHtcbiAgbmFtZTogJ011aVN3aXRjaCdcbn0pKFN3aXRjaCk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5zdHlsZXMgPSB2b2lkIDA7XG5cbnZhciBfZXh0ZW5kczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vZXh0ZW5kc1wiKSk7XG5cbnZhciBfZGVmaW5lUHJvcGVydHkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2RlZmluZVByb3BlcnR5XCIpKTtcblxudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIikpO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xuXG52YXIgX2NsYXNzbmFtZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJjbGFzc25hbWVzXCIpKTtcblxudmFyIF93aXRoU3R5bGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vc3R5bGVzL3dpdGhTdHlsZXNcIikpO1xuXG52YXIgX2hlbHBlcnMgPSByZXF1aXJlKFwiLi4vdXRpbHMvaGVscGVyc1wiKTtcblxudmFyIF9EcmF3ZXIgPSByZXF1aXJlKFwiLi4vRHJhd2VyL0RyYXdlclwiKTtcblxudmFyIHN0eWxlcyA9IGZ1bmN0aW9uIHN0eWxlcyh0aGVtZSkge1xuICByZXR1cm4ge1xuICAgIHJvb3Q6IHtcbiAgICAgIHBvc2l0aW9uOiAnZml4ZWQnLFxuICAgICAgdG9wOiAwLFxuICAgICAgbGVmdDogMCxcbiAgICAgIGhlaWdodDogJzEwMHZoJyxcbiAgICAgIHpJbmRleDogdGhlbWUuekluZGV4LmRyYXdlciAtIDFcbiAgICB9LFxuICAgIGRpc2NvdmVyeUFuY2hvckxlZnQ6IHtcbiAgICAgIHJpZ2h0OiAnYXV0bydcbiAgICB9LFxuICAgIGRpc2NvdmVyeUFuY2hvclJpZ2h0OiB7XG4gICAgICBsZWZ0OiAnYXV0bycsXG4gICAgICByaWdodDogMFxuICAgIH0sXG4gICAgZGlzY292ZXJ5QW5jaG9yVG9wOiB7XG4gICAgICBib3R0b206ICdhdXRvJyxcbiAgICAgIHJpZ2h0OiAwXG4gICAgfSxcbiAgICBkaXNjb3ZlcnlBbmNob3JCb3R0b206IHtcbiAgICAgIHRvcDogJ2F1dG8nLFxuICAgICAgYm90dG9tOiAwLFxuICAgICAgcmlnaHQ6IDBcbiAgICB9XG4gIH07XG59O1xuLyoqXG4gKiBAaWdub3JlIC0gaW50ZXJuYWwgY29tcG9uZW50LlxuICovXG5cblxuZXhwb3J0cy5zdHlsZXMgPSBzdHlsZXM7XG5cbmZ1bmN0aW9uIFN3aXBlQXJlYShwcm9wcykge1xuICB2YXIgYW5jaG9yID0gcHJvcHMuYW5jaG9yLFxuICAgICAgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBzd2lwZUFyZWFXaWR0aCA9IHByb3BzLnN3aXBlQXJlYVdpZHRoLFxuICAgICAgb3RoZXIgPSAoMCwgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMi5kZWZhdWx0KShwcm9wcywgW1wiYW5jaG9yXCIsIFwiY2xhc3Nlc1wiLCBcInN3aXBlQXJlYVdpZHRoXCJdKTtcbiAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7XG4gICAgY2xhc3NOYW1lOiAoMCwgX2NsYXNzbmFtZXMuZGVmYXVsdCkoY2xhc3Nlcy5yb290LCBjbGFzc2VzW1wiZGlzY292ZXJ5QW5jaG9yXCIuY29uY2F0KCgwLCBfaGVscGVycy5jYXBpdGFsaXplKShhbmNob3IpKV0pLFxuICAgIHN0eWxlOiAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KSh7fSwgKDAsIF9EcmF3ZXIuaXNIb3Jpem9udGFsKShwcm9wcykgPyAnd2lkdGgnIDogJ2hlaWdodCcsIHN3aXBlQXJlYVdpZHRoKVxuICB9LCBvdGhlcikpO1xufVxuXG5Td2lwZUFyZWEucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKipcbiAgICogU2lkZSBvbiB3aGljaCB0byBhdHRhY2ggdGhlIGRpc2NvdmVyeSBhcmVhLlxuICAgKi9cbiAgYW5jaG9yOiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2YoWydsZWZ0JywgJ3RvcCcsICdyaWdodCcsICdib3R0b20nXSkuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NlczogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBUaGUgd2lkdGggb2YgdGhlIGxlZnQgbW9zdCAob3IgcmlnaHQgbW9zdCkgYXJlYSBpbiBwaXhlbHMgd2hlcmUgdGhlXG4gICAqIGRyYXdlciBjYW4gYmUgc3dpcGVkIG9wZW4gZnJvbS5cbiAgICovXG4gIHN3aXBlQXJlYVdpZHRoOiBfcHJvcFR5cGVzLmRlZmF1bHQubnVtYmVyLmlzUmVxdWlyZWRcbn0gOiB7fTtcblxudmFyIF9kZWZhdWx0ID0gKDAsIF93aXRoU3R5bGVzLmRlZmF1bHQpKHN0eWxlcykoU3dpcGVBcmVhKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vaW50ZXJvcFJlcXVpcmVXaWxkY2FyZFwiKTtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMucmVzZXQgPSByZXNldDtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9leHRlbmRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9leHRlbmRzXCIpKTtcblxudmFyIF9vYmplY3RTcHJlYWQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL29iamVjdFNwcmVhZFwiKSk7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCIpKTtcblxudmFyIF9jbGFzc0NhbGxDaGVjazIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vY2xhc3NDYWxsQ2hlY2tcIikpO1xuXG52YXIgX2NyZWF0ZUNsYXNzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9jcmVhdGVDbGFzc1wiKSk7XG5cbnZhciBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vcG9zc2libGVDb25zdHJ1Y3RvclJldHVyblwiKSk7XG5cbnZhciBfaW5oZXJpdHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2luaGVyaXRzXCIpKTtcblxudmFyIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2Fzc2VydFRoaXNJbml0aWFsaXplZFwiKSk7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbnZhciBfcmVhY3REb20gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdC1kb21cIikpO1xuXG52YXIgX0RyYXdlciA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCIuLi9EcmF3ZXIvRHJhd2VyXCIpKTtcblxudmFyIF90cmFuc2l0aW9ucyA9IHJlcXVpcmUoXCIuLi9zdHlsZXMvdHJhbnNpdGlvbnNcIik7XG5cbnZhciBfd2l0aFRoZW1lID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vc3R5bGVzL3dpdGhUaGVtZVwiKSk7XG5cbnZhciBfdXRpbHMgPSByZXF1aXJlKFwiLi4vdHJhbnNpdGlvbnMvdXRpbHNcIik7XG5cbnZhciBfU3dpcGVBcmVhID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9Td2lwZUFyZWFcIikpO1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBjb25zaXN0ZW50LXRoaXMgKi9cbi8vIEBpbmhlcml0ZWRDb21wb25lbnQgRHJhd2VyXG4vLyBUaGlzIHZhbHVlIGlzIGNsb3NlZCB0byB3aGF0IGJyb3dzZXJzIGFyZSB1c2luZyBpbnRlcm5hbGx5IHRvXG4vLyB0cmlnZ2VyIGEgbmF0aXZlIHNjcm9sbC5cbnZhciBVTkNFUlRBSU5UWV9USFJFU0hPTEQgPSAzOyAvLyBweFxuLy8gV2UgY2FuIG9ubHkgaGF2ZSBvbmUgbm9kZSBhdCB0aGUgdGltZSBjbGFpbWluZyBvd25lcnNoaXAgZm9yIGhhbmRsaW5nIHRoZSBzd2lwZS5cbi8vIE90aGVyd2lzZSwgdGhlIFVYIHdvdWxkIGJlIGNvbmZ1c2luZy5cbi8vIFRoYXQncyB3aHkgd2UgdXNlIGEgc2luZ2xldG9uIGhlcmUuXG5cbnZhciBub2RlVGhhdENsYWltZWRUaGVTd2lwZSA9IG51bGw7IC8vIEV4cG9ydGVkIGZvciB0ZXN0IHB1cnBvc2VzLlxuXG5mdW5jdGlvbiByZXNldCgpIHtcbiAgbm9kZVRoYXRDbGFpbWVkVGhlU3dpcGUgPSBudWxsO1xufVxuLyogaXN0YW5idWwgaWdub3JlIGlmICovXG5cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIV9yZWFjdC5kZWZhdWx0LmNyZWF0ZUNvbnRleHQpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCdNYXRlcmlhbC1VSTogcmVhY3RAMTYuMy4wIG9yIGdyZWF0ZXIgaXMgcmVxdWlyZWQuJyk7XG59XG5cbnZhciBTd2lwZWFibGVEcmF3ZXIgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgKDAsIF9pbmhlcml0czIuZGVmYXVsdCkoU3dpcGVhYmxlRHJhd2VyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBTd2lwZWFibGVEcmF3ZXIoKSB7XG4gICAgdmFyIF9yZWY7XG5cbiAgICB2YXIgX3RlbXAsIF90aGlzO1xuXG4gICAgKDAsIF9jbGFzc0NhbGxDaGVjazIuZGVmYXVsdCkodGhpcywgU3dpcGVhYmxlRHJhd2VyKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gKDAsIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMi5kZWZhdWx0KShfdGhpcywgKF90ZW1wID0gX3RoaXMgPSAoMCwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yLmRlZmF1bHQpKHRoaXMsIChfcmVmID0gU3dpcGVhYmxlRHJhd2VyLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoU3dpcGVhYmxlRHJhd2VyKSkuY2FsbC5hcHBseShfcmVmLCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzLnN0YXRlID0ge30sIF90aGlzLmhhbmRsZUJvZHlUb3VjaFN0YXJ0ID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAvLyBXZSBhcmUgbm90IHN1cHBvc2VkIHRvIGhhbmxkZSB0aGlzIHRvdWNoIG1vdmUuXG4gICAgICBpZiAobm9kZVRoYXRDbGFpbWVkVGhlU3dpcGUgIT09IG51bGwgJiYgbm9kZVRoYXRDbGFpbWVkVGhlU3dpcGUgIT09ICgwLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkMi5kZWZhdWx0KShfdGhpcykpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgX3RoaXMkcHJvcHMgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICBkaXNhYmxlRGlzY292ZXJ5ID0gX3RoaXMkcHJvcHMuZGlzYWJsZURpc2NvdmVyeSxcbiAgICAgICAgICBkaXNhYmxlU3dpcGVUb09wZW4gPSBfdGhpcyRwcm9wcy5kaXNhYmxlU3dpcGVUb09wZW4sXG4gICAgICAgICAgb3BlbiA9IF90aGlzJHByb3BzLm9wZW4sXG4gICAgICAgICAgc3dpcGVBcmVhV2lkdGggPSBfdGhpcyRwcm9wcy5zd2lwZUFyZWFXaWR0aDtcbiAgICAgIHZhciBhbmNob3IgPSAoMCwgX0RyYXdlci5nZXRBbmNob3IpKF90aGlzLnByb3BzKTtcbiAgICAgIHZhciBjdXJyZW50WCA9IGFuY2hvciA9PT0gJ3JpZ2h0JyA/IGRvY3VtZW50LmJvZHkub2Zmc2V0V2lkdGggLSBldmVudC50b3VjaGVzWzBdLnBhZ2VYIDogZXZlbnQudG91Y2hlc1swXS5wYWdlWDtcbiAgICAgIHZhciBjdXJyZW50WSA9IGFuY2hvciA9PT0gJ2JvdHRvbScgPyB3aW5kb3cuaW5uZXJIZWlnaHQgLSBldmVudC50b3VjaGVzWzBdLmNsaWVudFkgOiBldmVudC50b3VjaGVzWzBdLmNsaWVudFk7XG5cbiAgICAgIGlmICghb3Blbikge1xuICAgICAgICBpZiAoZGlzYWJsZVN3aXBlVG9PcGVuKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCgwLCBfRHJhd2VyLmlzSG9yaXpvbnRhbCkoX3RoaXMucHJvcHMpKSB7XG4gICAgICAgICAgaWYgKGN1cnJlbnRYID4gc3dpcGVBcmVhV2lkdGgpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoY3VycmVudFkgPiBzd2lwZUFyZWFXaWR0aCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBub2RlVGhhdENsYWltZWRUaGVTd2lwZSA9ICgwLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkMi5kZWZhdWx0KShfdGhpcyk7XG4gICAgICBfdGhpcy5zdGFydFggPSBjdXJyZW50WDtcbiAgICAgIF90aGlzLnN0YXJ0WSA9IGN1cnJlbnRZO1xuXG4gICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIG1heWJlU3dpcGluZzogdHJ1ZVxuICAgICAgfSk7XG5cbiAgICAgIGlmICghb3BlbiAmJiBfdGhpcy5wYXBlcikge1xuICAgICAgICAvLyB0aGUgcmVmIG1heSBiZSBudWxsIHdoZW4gYSBwYXJlbnQgY29tcG9uZW50IHVwZGF0ZXMgd2hpbGUgc3dpcGluZ1xuICAgICAgICBfdGhpcy5zZXRQb3NpdGlvbihfdGhpcy5nZXRNYXhUcmFuc2xhdGUoKSArIChkaXNhYmxlRGlzY292ZXJ5ID8gMjAgOiAtc3dpcGVBcmVhV2lkdGgpLCB7XG4gICAgICAgICAgY2hhbmdlVHJhbnNpdGlvbjogZmFsc2VcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGRvY3VtZW50LmJvZHkuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgX3RoaXMuaGFuZGxlQm9keVRvdWNoTW92ZSwge1xuICAgICAgICBwYXNzaXZlOiBmYWxzZVxuICAgICAgfSk7XG4gICAgICBkb2N1bWVudC5ib2R5LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoZW5kJywgX3RoaXMuaGFuZGxlQm9keVRvdWNoRW5kKTsgLy8gaHR0cHM6Ly9wbHVzLmdvb2dsZS5jb20vK1BhdWxJcmlzaC9wb3N0cy9LVHdmbjFZMjIzOFxuXG4gICAgICBkb2N1bWVudC5ib2R5LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoY2FuY2VsJywgX3RoaXMuaGFuZGxlQm9keVRvdWNoRW5kKTtcbiAgICB9LCBfdGhpcy5oYW5kbGVCb2R5VG91Y2hNb3ZlID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAvLyB0aGUgcmVmIG1heSBiZSBudWxsIHdoZW4gYSBwYXJlbnQgY29tcG9uZW50IHVwZGF0ZXMgd2hpbGUgc3dpcGluZ1xuICAgICAgaWYgKCFfdGhpcy5wYXBlcikgcmV0dXJuO1xuICAgICAgdmFyIGFuY2hvciA9ICgwLCBfRHJhd2VyLmdldEFuY2hvcikoX3RoaXMucHJvcHMpO1xuICAgICAgdmFyIGhvcml6b250YWxTd2lwZSA9ICgwLCBfRHJhd2VyLmlzSG9yaXpvbnRhbCkoX3RoaXMucHJvcHMpO1xuICAgICAgdmFyIGN1cnJlbnRYID0gYW5jaG9yID09PSAncmlnaHQnID8gZG9jdW1lbnQuYm9keS5vZmZzZXRXaWR0aCAtIGV2ZW50LnRvdWNoZXNbMF0ucGFnZVggOiBldmVudC50b3VjaGVzWzBdLnBhZ2VYO1xuICAgICAgdmFyIGN1cnJlbnRZID0gYW5jaG9yID09PSAnYm90dG9tJyA/IHdpbmRvdy5pbm5lckhlaWdodCAtIGV2ZW50LnRvdWNoZXNbMF0uY2xpZW50WSA6IGV2ZW50LnRvdWNoZXNbMF0uY2xpZW50WTsgLy8gV2UgZG9uJ3Qga25vdyB5ZXQuXG5cbiAgICAgIGlmIChfdGhpcy5pc1N3aXBpbmcgPT0gbnVsbCkge1xuICAgICAgICB2YXIgZHggPSBNYXRoLmFicyhjdXJyZW50WCAtIF90aGlzLnN0YXJ0WCk7XG4gICAgICAgIHZhciBkeSA9IE1hdGguYWJzKGN1cnJlbnRZIC0gX3RoaXMuc3RhcnRZKTsgLy8gV2UgYXJlIGxpa2VseSB0byBiZSBzd2lwaW5nLCBsZXQncyBwcmV2ZW50IHRoZSBzY3JvbGwgZXZlbnQgb24gaU9TLlxuXG4gICAgICAgIGlmIChkeCA+IGR5KSB7XG4gICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBpc1N3aXBpbmcgPSBob3Jpem9udGFsU3dpcGUgPyBkeCA+IGR5ICYmIGR4ID4gVU5DRVJUQUlOVFlfVEhSRVNIT0xEIDogZHkgPiBkeCAmJiBkeSA+IFVOQ0VSVEFJTlRZX1RIUkVTSE9MRDtcblxuICAgICAgICBpZiAoaXNTd2lwaW5nID09PSB0cnVlIHx8IChob3Jpem9udGFsU3dpcGUgPyBkeSA+IFVOQ0VSVEFJTlRZX1RIUkVTSE9MRCA6IGR4ID4gVU5DRVJUQUlOVFlfVEhSRVNIT0xEKSkge1xuICAgICAgICAgIF90aGlzLmlzU3dpcGluZyA9IGlzU3dpcGluZztcblxuICAgICAgICAgIGlmICghaXNTd2lwaW5nKSB7XG4gICAgICAgICAgICBfdGhpcy5oYW5kbGVCb2R5VG91Y2hFbmQoZXZlbnQpO1xuXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfSAvLyBTaGlmdCB0aGUgc3RhcnRpbmcgcG9pbnQuXG5cblxuICAgICAgICAgIF90aGlzLnN0YXJ0WCA9IGN1cnJlbnRYO1xuICAgICAgICAgIF90aGlzLnN0YXJ0WSA9IGN1cnJlbnRZOyAvLyBDb21wZW5zYXRlIGZvciB0aGUgcGFydCBvZiB0aGUgZHJhd2VyIGRpc3BsYXllZCBvbiB0b3VjaCBzdGFydC5cblxuICAgICAgICAgIGlmICghX3RoaXMucHJvcHMuZGlzYWJsZURpc2NvdmVyeSAmJiAhX3RoaXMucHJvcHMub3Blbikge1xuICAgICAgICAgICAgaWYgKGhvcml6b250YWxTd2lwZSkge1xuICAgICAgICAgICAgICBfdGhpcy5zdGFydFggLT0gX3RoaXMucHJvcHMuc3dpcGVBcmVhV2lkdGg7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBfdGhpcy5zdGFydFkgLT0gX3RoaXMucHJvcHMuc3dpcGVBcmVhV2lkdGg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICghX3RoaXMuaXNTd2lwaW5nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH0gLy8gV2UgYXJlIHN3aXBpbmcsIGxldCdzIHByZXZlbnQgdGhlIHNjcm9sbCBldmVudCBvbiBpT1MuXG5cblxuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgX3RoaXMuc2V0UG9zaXRpb24oX3RoaXMuZ2V0VHJhbnNsYXRlKGhvcml6b250YWxTd2lwZSA/IGN1cnJlbnRYIDogY3VycmVudFkpKTtcbiAgICB9LCBfdGhpcy5oYW5kbGVCb2R5VG91Y2hFbmQgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIG5vZGVUaGF0Q2xhaW1lZFRoZVN3aXBlID0gbnVsbDtcblxuICAgICAgX3RoaXMucmVtb3ZlQm9keVRvdWNoTGlzdGVuZXJzKCk7XG5cbiAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgbWF5YmVTd2lwaW5nOiBmYWxzZVxuICAgICAgfSk7IC8vIFRoZSBzd2lwZSB3YXNuJ3Qgc3RhcnRlZC5cblxuXG4gICAgICBpZiAoIV90aGlzLmlzU3dpcGluZykge1xuICAgICAgICBfdGhpcy5pc1N3aXBpbmcgPSBudWxsO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBhbmNob3IgPSAoMCwgX0RyYXdlci5nZXRBbmNob3IpKF90aGlzLnByb3BzKTtcbiAgICAgIHZhciBjdXJyZW50O1xuXG4gICAgICBpZiAoKDAsIF9EcmF3ZXIuaXNIb3Jpem9udGFsKShfdGhpcy5wcm9wcykpIHtcbiAgICAgICAgY3VycmVudCA9IGFuY2hvciA9PT0gJ3JpZ2h0JyA/IGRvY3VtZW50LmJvZHkub2Zmc2V0V2lkdGggLSBldmVudC5jaGFuZ2VkVG91Y2hlc1swXS5wYWdlWCA6IGV2ZW50LmNoYW5nZWRUb3VjaGVzWzBdLnBhZ2VYO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY3VycmVudCA9IGFuY2hvciA9PT0gJ2JvdHRvbScgPyB3aW5kb3cuaW5uZXJIZWlnaHQgLSBldmVudC5jaGFuZ2VkVG91Y2hlc1swXS5jbGllbnRZIDogZXZlbnQuY2hhbmdlZFRvdWNoZXNbMF0uY2xpZW50WTtcbiAgICAgIH1cblxuICAgICAgdmFyIHRyYW5zbGF0ZVJhdGlvID0gX3RoaXMuZ2V0VHJhbnNsYXRlKGN1cnJlbnQpIC8gX3RoaXMuZ2V0TWF4VHJhbnNsYXRlKCk7IC8vIFdlIGhhdmUgdG8gb3BlbiBvciBjbG9zZSBhZnRlciBzZXR0aW5nIHN3aXBpbmcgdG8gbnVsbCxcbiAgICAgIC8vIGJlY2F1c2Ugb25seSB0aGVuIENTUyB0cmFuc2l0aW9uIGlzIGVuYWJsZWQuXG5cblxuICAgICAgaWYgKHRyYW5zbGF0ZVJhdGlvID4gMC41KSB7XG4gICAgICAgIGlmIChfdGhpcy5pc1N3aXBpbmcgJiYgIV90aGlzLnByb3BzLm9wZW4pIHtcbiAgICAgICAgICAvLyBSZXNldCB0aGUgcG9zaXRpb24sIHRoZSBzd2lwZSB3YXMgYWJvcnRlZC5cbiAgICAgICAgICBfdGhpcy5zZXRQb3NpdGlvbihfdGhpcy5nZXRNYXhUcmFuc2xhdGUoKSwge1xuICAgICAgICAgICAgbW9kZTogJ2VudGVyJ1xuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIF90aGlzLnByb3BzLm9uQ2xvc2UoKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChfdGhpcy5pc1N3aXBpbmcgJiYgIV90aGlzLnByb3BzLm9wZW4pIHtcbiAgICAgICAgX3RoaXMucHJvcHMub25PcGVuKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBSZXNldCB0aGUgcG9zaXRpb24sIHRoZSBzd2lwZSB3YXMgYWJvcnRlZC5cbiAgICAgICAgX3RoaXMuc2V0UG9zaXRpb24oMCwge1xuICAgICAgICAgIG1vZGU6ICdleGl0J1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgX3RoaXMuaXNTd2lwaW5nID0gbnVsbDtcbiAgICB9LCBfdGhpcy5iYWNrZHJvcCA9IG51bGwsIF90aGlzLnBhcGVyID0gbnVsbCwgX3RoaXMuaXNTd2lwaW5nID0gbnVsbCwgX3RoaXMuc3RhcnRYID0gbnVsbCwgX3RoaXMuc3RhcnRZID0gbnVsbCwgX3RoaXMuaGFuZGxlQmFja2Ryb3BSZWYgPSBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgX3RoaXMuYmFja2Ryb3AgPSBub2RlID8gX3JlYWN0RG9tLmRlZmF1bHQuZmluZERPTU5vZGUobm9kZSkgOiBudWxsO1xuICAgIH0sIF90aGlzLmhhbmRsZVBhcGVyUmVmID0gZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgIF90aGlzLnBhcGVyID0gbm9kZSA/IF9yZWFjdERvbS5kZWZhdWx0LmZpbmRET01Ob2RlKG5vZGUpIDogbnVsbDtcbiAgICB9LCBfdGVtcCkpO1xuICB9XG5cbiAgKDAsIF9jcmVhdGVDbGFzczIuZGVmYXVsdCkoU3dpcGVhYmxlRHJhd2VyLCBbe1xuICAgIGtleTogXCJjb21wb25lbnREaWRNb3VudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgIGlmICh0aGlzLnByb3BzLnZhcmlhbnQgPT09ICd0ZW1wb3JhcnknKSB7XG4gICAgICAgIHRoaXMubGlzdGVuVG91Y2hTdGFydCgpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJjb21wb25lbnREaWRVcGRhdGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wcykge1xuICAgICAgdmFyIHZhcmlhbnQgPSB0aGlzLnByb3BzLnZhcmlhbnQ7XG4gICAgICB2YXIgcHJldlZhcmlhbnQgPSBwcmV2UHJvcHMudmFyaWFudDtcblxuICAgICAgaWYgKHZhcmlhbnQgIT09IHByZXZWYXJpYW50KSB7XG4gICAgICAgIGlmICh2YXJpYW50ID09PSAndGVtcG9yYXJ5Jykge1xuICAgICAgICAgIHRoaXMubGlzdGVuVG91Y2hTdGFydCgpO1xuICAgICAgICB9IGVsc2UgaWYgKHByZXZWYXJpYW50ID09PSAndGVtcG9yYXJ5Jykge1xuICAgICAgICAgIHRoaXMucmVtb3ZlVG91Y2hTdGFydCgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImNvbXBvbmVudFdpbGxVbm1vdW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgdGhpcy5yZW1vdmVUb3VjaFN0YXJ0KCk7XG4gICAgICB0aGlzLnJlbW92ZUJvZHlUb3VjaExpc3RlbmVycygpOyAvLyBXZSBuZWVkIHRvIHJlbGVhc2UgdGhlIGxvY2suXG5cbiAgICAgIGlmIChub2RlVGhhdENsYWltZWRUaGVTd2lwZSA9PT0gdGhpcykge1xuICAgICAgICBub2RlVGhhdENsYWltZWRUaGVTd2lwZSA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImdldE1heFRyYW5zbGF0ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRNYXhUcmFuc2xhdGUoKSB7XG4gICAgICByZXR1cm4gKDAsIF9EcmF3ZXIuaXNIb3Jpem9udGFsKSh0aGlzLnByb3BzKSA/IHRoaXMucGFwZXIuY2xpZW50V2lkdGggOiB0aGlzLnBhcGVyLmNsaWVudEhlaWdodDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0VHJhbnNsYXRlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldFRyYW5zbGF0ZShjdXJyZW50KSB7XG4gICAgICB2YXIgc3RhcnQgPSAoMCwgX0RyYXdlci5pc0hvcml6b250YWwpKHRoaXMucHJvcHMpID8gdGhpcy5zdGFydFggOiB0aGlzLnN0YXJ0WTtcbiAgICAgIHJldHVybiBNYXRoLm1pbihNYXRoLm1heCh0aGlzLnByb3BzLm9wZW4gPyBzdGFydCAtIGN1cnJlbnQgOiB0aGlzLmdldE1heFRyYW5zbGF0ZSgpICsgc3RhcnQgLSBjdXJyZW50LCAwKSwgdGhpcy5nZXRNYXhUcmFuc2xhdGUoKSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInNldFBvc2l0aW9uXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldFBvc2l0aW9uKHRyYW5zbGF0ZSkge1xuICAgICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICAgICAgdmFyIF9vcHRpb25zJG1vZGUgPSBvcHRpb25zLm1vZGUsXG4gICAgICAgICAgbW9kZSA9IF9vcHRpb25zJG1vZGUgPT09IHZvaWQgMCA/IG51bGwgOiBfb3B0aW9ucyRtb2RlLFxuICAgICAgICAgIF9vcHRpb25zJGNoYW5nZVRyYW5zaSA9IG9wdGlvbnMuY2hhbmdlVHJhbnNpdGlvbixcbiAgICAgICAgICBjaGFuZ2VUcmFuc2l0aW9uID0gX29wdGlvbnMkY2hhbmdlVHJhbnNpID09PSB2b2lkIDAgPyB0cnVlIDogX29wdGlvbnMkY2hhbmdlVHJhbnNpO1xuICAgICAgdmFyIGFuY2hvciA9ICgwLCBfRHJhd2VyLmdldEFuY2hvcikodGhpcy5wcm9wcyk7XG4gICAgICB2YXIgcnRsVHJhbnNsYXRlTXVsdGlwbGllciA9IFsncmlnaHQnLCAnYm90dG9tJ10uaW5kZXhPZihhbmNob3IpICE9PSAtMSA/IDEgOiAtMTtcbiAgICAgIHZhciB0cmFuc2Zvcm0gPSAoMCwgX0RyYXdlci5pc0hvcml6b250YWwpKHRoaXMucHJvcHMpID8gXCJ0cmFuc2xhdGUoXCIuY29uY2F0KHJ0bFRyYW5zbGF0ZU11bHRpcGxpZXIgKiB0cmFuc2xhdGUsIFwicHgsIDApXCIpIDogXCJ0cmFuc2xhdGUoMCwgXCIuY29uY2F0KHJ0bFRyYW5zbGF0ZU11bHRpcGxpZXIgKiB0cmFuc2xhdGUsIFwicHgpXCIpO1xuICAgICAgdmFyIGRyYXdlclN0eWxlID0gdGhpcy5wYXBlci5zdHlsZTtcbiAgICAgIGRyYXdlclN0eWxlLndlYmtpdFRyYW5zZm9ybSA9IHRyYW5zZm9ybTtcbiAgICAgIGRyYXdlclN0eWxlLnRyYW5zZm9ybSA9IHRyYW5zZm9ybTtcbiAgICAgIHZhciB0cmFuc2l0aW9uID0gJyc7XG5cbiAgICAgIGlmIChtb2RlKSB7XG4gICAgICAgIHRyYW5zaXRpb24gPSB0aGlzLnByb3BzLnRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgnYWxsJywgKDAsIF91dGlscy5nZXRUcmFuc2l0aW9uUHJvcHMpKHtcbiAgICAgICAgICB0aW1lb3V0OiB0aGlzLnByb3BzLnRyYW5zaXRpb25EdXJhdGlvblxuICAgICAgICB9LCB7XG4gICAgICAgICAgbW9kZTogbW9kZVxuICAgICAgICB9KSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChjaGFuZ2VUcmFuc2l0aW9uKSB7XG4gICAgICAgIGRyYXdlclN0eWxlLndlYmtpdFRyYW5zaXRpb24gPSB0cmFuc2l0aW9uO1xuICAgICAgICBkcmF3ZXJTdHlsZS50cmFuc2l0aW9uID0gdHJhbnNpdGlvbjtcbiAgICAgIH1cblxuICAgICAgaWYgKCF0aGlzLnByb3BzLmRpc2FibGVCYWNrZHJvcFRyYW5zaXRpb24pIHtcbiAgICAgICAgdmFyIGJhY2tkcm9wU3R5bGUgPSB0aGlzLmJhY2tkcm9wLnN0eWxlO1xuICAgICAgICBiYWNrZHJvcFN0eWxlLm9wYWNpdHkgPSAxIC0gdHJhbnNsYXRlIC8gdGhpcy5nZXRNYXhUcmFuc2xhdGUoKTtcblxuICAgICAgICBpZiAoY2hhbmdlVHJhbnNpdGlvbikge1xuICAgICAgICAgIGJhY2tkcm9wU3R5bGUud2Via2l0VHJhbnNpdGlvbiA9IHRyYW5zaXRpb247XG4gICAgICAgICAgYmFja2Ryb3BTdHlsZS50cmFuc2l0aW9uID0gdHJhbnNpdGlvbjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJsaXN0ZW5Ub3VjaFN0YXJ0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGxpc3RlblRvdWNoU3RhcnQoKSB7XG4gICAgICBkb2N1bWVudC5ib2R5LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCB0aGlzLmhhbmRsZUJvZHlUb3VjaFN0YXJ0KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVtb3ZlVG91Y2hTdGFydFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW1vdmVUb3VjaFN0YXJ0KCkge1xuICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgdGhpcy5oYW5kbGVCb2R5VG91Y2hTdGFydCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlbW92ZUJvZHlUb3VjaExpc3RlbmVyc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW1vdmVCb2R5VG91Y2hMaXN0ZW5lcnMoKSB7XG4gICAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIHRoaXMuaGFuZGxlQm9keVRvdWNoTW92ZSwge1xuICAgICAgICBwYXNzaXZlOiBmYWxzZVxuICAgICAgfSk7XG4gICAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNoZW5kJywgdGhpcy5oYW5kbGVCb2R5VG91Y2hFbmQpO1xuICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaGNhbmNlbCcsIHRoaXMuaGFuZGxlQm9keVRvdWNoRW5kKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGRpc2FibGVCYWNrZHJvcFRyYW5zaXRpb24gPSBfcHJvcHMuZGlzYWJsZUJhY2tkcm9wVHJhbnNpdGlvbixcbiAgICAgICAgICBkaXNhYmxlRGlzY292ZXJ5ID0gX3Byb3BzLmRpc2FibGVEaXNjb3ZlcnksXG4gICAgICAgICAgZGlzYWJsZVN3aXBlVG9PcGVuID0gX3Byb3BzLmRpc2FibGVTd2lwZVRvT3BlbixcbiAgICAgICAgICBfcHJvcHMkTW9kYWxQcm9wcyA9IF9wcm9wcy5Nb2RhbFByb3BzO1xuICAgICAgX3Byb3BzJE1vZGFsUHJvcHMgPSBfcHJvcHMkTW9kYWxQcm9wcyA9PT0gdm9pZCAwID8ge30gOiBfcHJvcHMkTW9kYWxQcm9wcztcbiAgICAgIHZhciBCYWNrZHJvcFByb3BzID0gX3Byb3BzJE1vZGFsUHJvcHMuQmFja2Ryb3BQcm9wcyxcbiAgICAgICAgICBNb2RhbFByb3BzUHJvcCA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyLmRlZmF1bHQpKF9wcm9wcyRNb2RhbFByb3BzLCBbXCJCYWNrZHJvcFByb3BzXCJdKSxcbiAgICAgICAgICBvbk9wZW4gPSBfcHJvcHMub25PcGVuLFxuICAgICAgICAgIG9wZW4gPSBfcHJvcHMub3BlbixcbiAgICAgICAgICBQYXBlclByb3BzID0gX3Byb3BzLlBhcGVyUHJvcHMsXG4gICAgICAgICAgc3dpcGVBcmVhV2lkdGggPSBfcHJvcHMuc3dpcGVBcmVhV2lkdGgsXG4gICAgICAgICAgdmFyaWFudCA9IF9wcm9wcy52YXJpYW50LFxuICAgICAgICAgIG90aGVyID0gKDAsIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIuZGVmYXVsdCkoX3Byb3BzLCBbXCJkaXNhYmxlQmFja2Ryb3BUcmFuc2l0aW9uXCIsIFwiZGlzYWJsZURpc2NvdmVyeVwiLCBcImRpc2FibGVTd2lwZVRvT3BlblwiLCBcIk1vZGFsUHJvcHNcIiwgXCJvbk9wZW5cIiwgXCJvcGVuXCIsIFwiUGFwZXJQcm9wc1wiLCBcInN3aXBlQXJlYVdpZHRoXCIsIFwidmFyaWFudFwiXSk7XG4gICAgICB2YXIgbWF5YmVTd2lwaW5nID0gdGhpcy5zdGF0ZS5tYXliZVN3aXBpbmc7XG4gICAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QuZGVmYXVsdC5GcmFnbWVudCwgbnVsbCwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfRHJhd2VyLmRlZmF1bHQsICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe1xuICAgICAgICBvcGVuOiB2YXJpYW50ID09PSAndGVtcG9yYXJ5JyAmJiBtYXliZVN3aXBpbmcgPyB0cnVlIDogb3BlbixcbiAgICAgICAgdmFyaWFudDogdmFyaWFudCxcbiAgICAgICAgTW9kYWxQcm9wczogKDAsIF9vYmplY3RTcHJlYWQyLmRlZmF1bHQpKHtcbiAgICAgICAgICBCYWNrZHJvcFByb3BzOiAoMCwgX29iamVjdFNwcmVhZDIuZGVmYXVsdCkoe30sIEJhY2tkcm9wUHJvcHMsIHtcbiAgICAgICAgICAgIHJlZjogdGhpcy5oYW5kbGVCYWNrZHJvcFJlZlxuICAgICAgICAgIH0pXG4gICAgICAgIH0sIE1vZGFsUHJvcHNQcm9wKSxcbiAgICAgICAgUGFwZXJQcm9wczogKDAsIF9vYmplY3RTcHJlYWQyLmRlZmF1bHQpKHt9LCBQYXBlclByb3BzLCB7XG4gICAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAgIHBvaW50ZXJFdmVudHM6IHZhcmlhbnQgPT09ICd0ZW1wb3JhcnknICYmICFvcGVuID8gJ25vbmUnIDogJydcbiAgICAgICAgICB9LFxuICAgICAgICAgIHJlZjogdGhpcy5oYW5kbGVQYXBlclJlZlxuICAgICAgICB9KVxuICAgICAgfSwgb3RoZXIpKSwgIWRpc2FibGVEaXNjb3ZlcnkgJiYgIWRpc2FibGVTd2lwZVRvT3BlbiAmJiB2YXJpYW50ID09PSAndGVtcG9yYXJ5JyAmJiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9Td2lwZUFyZWEuZGVmYXVsdCwge1xuICAgICAgICBhbmNob3I6IG90aGVyLmFuY2hvcixcbiAgICAgICAgc3dpcGVBcmVhV2lkdGg6IHN3aXBlQXJlYVdpZHRoXG4gICAgICB9KSk7XG4gICAgfVxuICB9XSwgW3tcbiAgICBrZXk6IFwiZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyhuZXh0UHJvcHMsIHByZXZTdGF0ZSkge1xuICAgICAgaWYgKHR5cGVvZiBwcmV2U3RhdGUubWF5YmVTd2lwaW5nID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIG1heWJlU3dpcGluZzogZmFsc2UsXG4gICAgICAgICAgb3BlbjogbmV4dFByb3BzLm9wZW5cbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFuZXh0UHJvcHMub3BlbiAmJiBwcmV2U3RhdGUub3Blbikge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIG1heWJlU3dpcGluZzogZmFsc2UsXG4gICAgICAgICAgb3BlbjogbmV4dFByb3BzLm9wZW5cbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgb3BlbjogbmV4dFByb3BzLm9wZW5cbiAgICAgIH07XG4gICAgfVxuICB9XSk7XG4gIHJldHVybiBTd2lwZWFibGVEcmF3ZXI7XG59KF9yZWFjdC5kZWZhdWx0LkNvbXBvbmVudCk7XG5cblN3aXBlYWJsZURyYXdlci5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBhbmNob3I6IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZihbJ2xlZnQnLCAndG9wJywgJ3JpZ2h0JywgJ2JvdHRvbSddKSxcblxuICAvKipcbiAgICogRGlzYWJsZSB0aGUgYmFja2Ryb3AgdHJhbnNpdGlvbi5cbiAgICogVGhpcyBjYW4gaW1wcm92ZSB0aGUgRlBTIG9uIGxvdy1lbmQgZGV2aWNlcy5cbiAgICovXG4gIGRpc2FibGVCYWNrZHJvcFRyYW5zaXRpb246IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRvdWNoaW5nIHRoZSBzY3JlZW4gbmVhciB0aGUgZWRnZSBvZiB0aGUgZHJhd2VyIHdpbGwgbm90IHNsaWRlIGluIHRoZSBkcmF3ZXIgYSBiaXRcbiAgICogdG8gcHJvbW90ZSBhY2NpZGVudGFsIGRpc2NvdmVyeSBvZiB0aGUgc3dpcGUgZ2VzdHVyZS5cbiAgICovXG4gIGRpc2FibGVEaXNjb3Zlcnk6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHN3aXBlIHRvIG9wZW4gaXMgZGlzYWJsZWQuIFRoaXMgaXMgdXNlZnVsIGluIGJyb3dzZXJzIHdoZXJlIHN3aXBpbmcgdHJpZ2dlcnNcbiAgICogbmF2aWdhdGlvbiBhY3Rpb25zLiBTd2lwZSB0byBvcGVuIGlzIGRpc2FibGVkIG9uIGlPUyBicm93c2VycyBieSBkZWZhdWx0LlxuICAgKi9cbiAgZGlzYWJsZVN3aXBlVG9PcGVuOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgTW9kYWxQcm9wczogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdCxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgY29tcG9uZW50IHJlcXVlc3RzIHRvIGJlIGNsb3NlZC5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGV2ZW50IFRoZSBldmVudCBzb3VyY2Ugb2YgdGhlIGNhbGxiYWNrXG4gICAqL1xuICBvbkNsb3NlOiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYy5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBjb21wb25lbnQgcmVxdWVzdHMgdG8gYmUgb3BlbmVkLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gZXZlbnQgVGhlIGV2ZW50IHNvdXJjZSBvZiB0aGUgY2FsbGJhY2tcbiAgICovXG4gIG9uT3BlbjogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgZHJhd2VyIGlzIG9wZW4uXG4gICAqL1xuICBvcGVuOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBQYXBlclByb3BzOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBUaGUgd2lkdGggb2YgdGhlIGxlZnQgbW9zdCAob3IgcmlnaHQgbW9zdCkgYXJlYSBpbiBwaXhlbHMgd2hlcmUgdGhlXG4gICAqIGRyYXdlciBjYW4gYmUgc3dpcGVkIG9wZW4gZnJvbS5cbiAgICovXG4gIHN3aXBlQXJlYVdpZHRoOiBfcHJvcFR5cGVzLmRlZmF1bHQubnVtYmVyLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICB0aGVtZTogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBUaGUgZHVyYXRpb24gZm9yIHRoZSB0cmFuc2l0aW9uLCBpbiBtaWxsaXNlY29uZHMuXG4gICAqIFlvdSBtYXkgc3BlY2lmeSBhIHNpbmdsZSB0aW1lb3V0IGZvciBhbGwgdHJhbnNpdGlvbnMsIG9yIGluZGl2aWR1YWxseSB3aXRoIGFuIG9iamVjdC5cbiAgICovXG4gIHRyYW5zaXRpb25EdXJhdGlvbjogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlcy5kZWZhdWx0Lm51bWJlciwgX3Byb3BUeXBlcy5kZWZhdWx0LnNoYXBlKHtcbiAgICBlbnRlcjogX3Byb3BUeXBlcy5kZWZhdWx0Lm51bWJlcixcbiAgICBleGl0OiBfcHJvcFR5cGVzLmRlZmF1bHQubnVtYmVyXG4gIH0pXSksXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHZhcmlhbnQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZihbJ3Blcm1hbmVudCcsICdwZXJzaXN0ZW50JywgJ3RlbXBvcmFyeSddKVxufSA6IHt9O1xuU3dpcGVhYmxlRHJhd2VyLmRlZmF1bHRQcm9wcyA9IHtcbiAgYW5jaG9yOiAnbGVmdCcsXG4gIGRpc2FibGVCYWNrZHJvcFRyYW5zaXRpb246IGZhbHNlLFxuICBkaXNhYmxlRGlzY292ZXJ5OiBmYWxzZSxcbiAgZGlzYWJsZVN3aXBlVG9PcGVuOiB0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiAvaVBhZHxpUGhvbmV8aVBvZC8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSxcbiAgc3dpcGVBcmVhV2lkdGg6IDIwLFxuICB0cmFuc2l0aW9uRHVyYXRpb246IHtcbiAgICBlbnRlcjogX3RyYW5zaXRpb25zLmR1cmF0aW9uLmVudGVyaW5nU2NyZWVuLFxuICAgIGV4aXQ6IF90cmFuc2l0aW9ucy5kdXJhdGlvbi5sZWF2aW5nU2NyZWVuXG4gIH0sXG4gIHZhcmlhbnQ6ICd0ZW1wb3JhcnknIC8vIE1vYmlsZSBmaXJzdC5cblxufTtcblxudmFyIF9kZWZhdWx0ID0gKDAsIF93aXRoVGhlbWUuZGVmYXVsdCkoKShTd2lwZWFibGVEcmF3ZXIpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuc3R5bGVzID0gdm9pZCAwO1xuXG52YXIgX2V4dGVuZHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2V4dGVuZHNcIikpO1xuXG52YXIgX29iamVjdFNwcmVhZDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vb2JqZWN0U3ByZWFkXCIpKTtcblxudmFyIF9kZWZpbmVQcm9wZXJ0eTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vZGVmaW5lUHJvcGVydHlcIikpO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiKSk7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbnZhciBfY2xhc3NuYW1lcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImNsYXNzbmFtZXNcIikpO1xuXG52YXIgX3dpdGhTdHlsZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9zdHlsZXMvd2l0aFN0eWxlc1wiKSk7XG5cbnZhciBfUGFwZXIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9QYXBlclwiKSk7XG5cbnZhciBfU3RlcENvbm5lY3RvciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL1N0ZXBDb25uZWN0b3JcIikpO1xuXG4vLyBAaW5oZXJpdGVkQ29tcG9uZW50IFBhcGVyXG52YXIgc3R5bGVzID0gZnVuY3Rpb24gc3R5bGVzKHRoZW1lKSB7XG4gIHJldHVybiB7XG4gICAgcm9vdDoge1xuICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgcGFkZGluZzogdGhlbWUuc3BhY2luZy51bml0ICogM1xuICAgIH0sXG4gICAgaG9yaXpvbnRhbDoge1xuICAgICAgZmxleERpcmVjdGlvbjogJ3JvdycsXG4gICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJ1xuICAgIH0sXG4gICAgdmVydGljYWw6IHtcbiAgICAgIGZsZXhEaXJlY3Rpb246ICdjb2x1bW4nXG4gICAgfSxcbiAgICBhbHRlcm5hdGl2ZUxhYmVsOiB7XG4gICAgICBhbGlnbkl0ZW1zOiAnZmxleC1zdGFydCdcbiAgICB9XG4gIH07XG59O1xuXG5leHBvcnRzLnN0eWxlcyA9IHN0eWxlcztcblxuZnVuY3Rpb24gU3RlcHBlcihwcm9wcykge1xuICB2YXIgYWN0aXZlU3RlcCA9IHByb3BzLmFjdGl2ZVN0ZXAsXG4gICAgICBhbHRlcm5hdGl2ZUxhYmVsID0gcHJvcHMuYWx0ZXJuYXRpdmVMYWJlbCxcbiAgICAgIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZVByb3AgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBjb25uZWN0b3JQcm9wID0gcHJvcHMuY29ubmVjdG9yLFxuICAgICAgbm9uTGluZWFyID0gcHJvcHMubm9uTGluZWFyLFxuICAgICAgb3JpZW50YXRpb24gPSBwcm9wcy5vcmllbnRhdGlvbixcbiAgICAgIG90aGVyID0gKDAsIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIuZGVmYXVsdCkocHJvcHMsIFtcImFjdGl2ZVN0ZXBcIiwgXCJhbHRlcm5hdGl2ZUxhYmVsXCIsIFwiY2hpbGRyZW5cIiwgXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29ubmVjdG9yXCIsIFwibm9uTGluZWFyXCIsIFwib3JpZW50YXRpb25cIl0pO1xuICB2YXIgY2xhc3NOYW1lID0gKDAsIF9jbGFzc25hbWVzLmRlZmF1bHQpKGNsYXNzZXMucm9vdCwgY2xhc3Nlc1tvcmllbnRhdGlvbl0sICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKHt9LCBjbGFzc2VzLmFsdGVybmF0aXZlTGFiZWwsIGFsdGVybmF0aXZlTGFiZWwpLCBjbGFzc05hbWVQcm9wKTtcbiAgdmFyIGNvbm5lY3RvciA9IF9yZWFjdC5kZWZhdWx0LmlzVmFsaWRFbGVtZW50KGNvbm5lY3RvclByb3ApID8gX3JlYWN0LmRlZmF1bHQuY2xvbmVFbGVtZW50KGNvbm5lY3RvclByb3AsIHtcbiAgICBvcmllbnRhdGlvbjogb3JpZW50YXRpb25cbiAgfSkgOiBudWxsO1xuXG4gIHZhciBjaGlsZHJlbkFycmF5ID0gX3JlYWN0LmRlZmF1bHQuQ2hpbGRyZW4udG9BcnJheShjaGlsZHJlbik7XG5cbiAgdmFyIHN0ZXBzID0gY2hpbGRyZW5BcnJheS5tYXAoZnVuY3Rpb24gKHN0ZXAsIGluZGV4KSB7XG4gICAgdmFyIGNvbnRyb2xQcm9wcyA9IHtcbiAgICAgIGluZGV4OiBpbmRleCxcbiAgICAgIG9yaWVudGF0aW9uOiBvcmllbnRhdGlvbixcbiAgICAgIGFjdGl2ZTogZmFsc2UsXG4gICAgICBjb21wbGV0ZWQ6IGZhbHNlLFxuICAgICAgZGlzYWJsZWQ6IGZhbHNlLFxuICAgICAgbGFzdDogaW5kZXggKyAxID09PSBjaGlsZHJlbkFycmF5Lmxlbmd0aCxcbiAgICAgIGFsdGVybmF0aXZlTGFiZWw6IGFsdGVybmF0aXZlTGFiZWwsXG4gICAgICBjb25uZWN0b3I6IGNvbm5lY3RvclByb3BcbiAgICB9O1xuXG4gICAgaWYgKGFjdGl2ZVN0ZXAgPT09IGluZGV4KSB7XG4gICAgICBjb250cm9sUHJvcHMuYWN0aXZlID0gdHJ1ZTtcbiAgICB9IGVsc2UgaWYgKCFub25MaW5lYXIgJiYgYWN0aXZlU3RlcCA+IGluZGV4KSB7XG4gICAgICBjb250cm9sUHJvcHMuY29tcGxldGVkID0gdHJ1ZTtcbiAgICB9IGVsc2UgaWYgKCFub25MaW5lYXIgJiYgYWN0aXZlU3RlcCA8IGluZGV4KSB7XG4gICAgICBjb250cm9sUHJvcHMuZGlzYWJsZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBbIWFsdGVybmF0aXZlTGFiZWwgJiYgY29ubmVjdG9yICYmIGluZGV4ID4gMCAmJiBfcmVhY3QuZGVmYXVsdC5jbG9uZUVsZW1lbnQoY29ubmVjdG9yLCB7XG4gICAgICBrZXk6IGluZGV4IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgcmVhY3Qvbm8tYXJyYXktaW5kZXgta2V5XG5cbiAgICB9KSwgX3JlYWN0LmRlZmF1bHQuY2xvbmVFbGVtZW50KHN0ZXAsICgwLCBfb2JqZWN0U3ByZWFkMi5kZWZhdWx0KSh7fSwgY29udHJvbFByb3BzLCBzdGVwLnByb3BzKSldO1xuICB9KTtcbiAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX1BhcGVyLmRlZmF1bHQsICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe1xuICAgIHNxdWFyZTogdHJ1ZSxcbiAgICBlbGV2YXRpb246IDAsXG4gICAgY2xhc3NOYW1lOiBjbGFzc05hbWVcbiAgfSwgb3RoZXIpLCBzdGVwcyk7XG59XG5cblN0ZXBwZXIucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKipcbiAgICogU2V0IHRoZSBhY3RpdmUgc3RlcCAoemVybyBiYXNlZCBpbmRleCkuXG4gICAqL1xuICBhY3RpdmVTdGVwOiBfcHJvcFR5cGVzLmRlZmF1bHQubnVtYmVyLFxuXG4gIC8qKlxuICAgKiBJZiBzZXQgdG8gJ3RydWUnIGFuZCBvcmllbnRhdGlvbiBpcyBob3Jpem9udGFsLFxuICAgKiB0aGVuIHRoZSBzdGVwIGxhYmVsIHdpbGwgYmUgcG9zaXRpb25lZCB1bmRlciB0aGUgaWNvbi5cbiAgICovXG4gIGFsdGVybmF0aXZlTGFiZWw6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBUd28gb3IgbW9yZSBgPFN0ZXAgLz5gIGNvbXBvbmVudHMuXG4gICAqL1xuICBjaGlsZHJlbjogX3Byb3BUeXBlcy5kZWZhdWx0Lm5vZGUuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MtYXBpKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIEEgY29tcG9uZW50IHRvIGJlIHBsYWNlZCBiZXR3ZWVuIGVhY2ggc3RlcC5cbiAgICovXG4gIGNvbm5lY3RvcjogX3Byb3BUeXBlcy5kZWZhdWx0LmVsZW1lbnQsXG5cbiAgLyoqXG4gICAqIElmIHNldCB0aGUgYFN0ZXBwZXJgIHdpbGwgbm90IGFzc2lzdCBpbiBjb250cm9sbGluZyBzdGVwcyBmb3IgbGluZWFyIGZsb3cuXG4gICAqL1xuICBub25MaW5lYXI6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgc3RlcHBlciBvcmllbnRhdGlvbiAobGF5b3V0IGZsb3cgZGlyZWN0aW9uKS5cbiAgICovXG4gIG9yaWVudGF0aW9uOiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2YoWydob3Jpem9udGFsJywgJ3ZlcnRpY2FsJ10pXG59IDoge307XG5TdGVwcGVyLmRlZmF1bHRQcm9wcyA9IHtcbiAgYWN0aXZlU3RlcDogMCxcbiAgYWx0ZXJuYXRpdmVMYWJlbDogZmFsc2UsXG4gIGNvbm5lY3RvcjogX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfU3RlcENvbm5lY3Rvci5kZWZhdWx0LCBudWxsKSxcbiAgbm9uTGluZWFyOiBmYWxzZSxcbiAgb3JpZW50YXRpb246ICdob3Jpem9udGFsJ1xufTtcblN0ZXBwZXIubXVpTmFtZSA9ICdTdGVwcGVyJztcblxudmFyIF9kZWZhdWx0ID0gKDAsIF93aXRoU3R5bGVzLmRlZmF1bHQpKHN0eWxlcywge1xuICBuYW1lOiAnTXVpU3RlcHBlcidcbn0pKFN0ZXBwZXIpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuc3R5bGVzID0gdm9pZCAwO1xuXG52YXIgX2V4dGVuZHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2V4dGVuZHNcIikpO1xuXG52YXIgX2RlZmluZVByb3BlcnR5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9kZWZpbmVQcm9wZXJ0eVwiKSk7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCIpKTtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKTtcblxudmFyIF93YXJuaW5nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwid2FybmluZ1wiKSk7XG5cbnZhciBfY2xhc3NuYW1lcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImNsYXNzbmFtZXNcIikpO1xuXG52YXIgX0NvbGxhcHNlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vQ29sbGFwc2VcIikpO1xuXG52YXIgX3dpdGhTdHlsZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9zdHlsZXMvd2l0aFN0eWxlc1wiKSk7XG5cbnZhciBzdHlsZXMgPSBmdW5jdGlvbiBzdHlsZXModGhlbWUpIHtcbiAgcmV0dXJuIHtcbiAgICByb290OiB7XG4gICAgICBtYXJnaW5Ub3A6IHRoZW1lLnNwYWNpbmcudW5pdCxcbiAgICAgIG1hcmdpbkxlZnQ6IDEyLFxuICAgICAgLy8gaGFsZiBpY29uXG4gICAgICBwYWRkaW5nTGVmdDogdGhlbWUuc3BhY2luZy51bml0ICsgMTIsXG4gICAgICAvLyBtYXJnaW4gKyBoYWxmIGljb25cbiAgICAgIHBhZGRpbmdSaWdodDogdGhlbWUuc3BhY2luZy51bml0LFxuICAgICAgYm9yZGVyTGVmdDogXCIxcHggc29saWQgXCIuY29uY2F0KHRoZW1lLnBhbGV0dGUudHlwZSA9PT0gJ2xpZ2h0JyA/IHRoZW1lLnBhbGV0dGUuZ3JleVs0MDBdIDogdGhlbWUucGFsZXR0ZS5ncmV5WzYwMF0pXG4gICAgfSxcbiAgICBsYXN0OiB7XG4gICAgICBib3JkZXJMZWZ0OiAnbm9uZSdcbiAgICB9LFxuICAgIHRyYW5zaXRpb246IHt9XG4gIH07XG59O1xuXG5leHBvcnRzLnN0eWxlcyA9IHN0eWxlcztcblxuZnVuY3Rpb24gU3RlcENvbnRlbnQocHJvcHMpIHtcbiAgdmFyIGFjdGl2ZSA9IHByb3BzLmFjdGl2ZSxcbiAgICAgIGFsdGVybmF0aXZlTGFiZWwgPSBwcm9wcy5hbHRlcm5hdGl2ZUxhYmVsLFxuICAgICAgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgY29tcGxldGVkID0gcHJvcHMuY29tcGxldGVkLFxuICAgICAgbGFzdCA9IHByb3BzLmxhc3QsXG4gICAgICBvcHRpb25hbCA9IHByb3BzLm9wdGlvbmFsLFxuICAgICAgb3JpZW50YXRpb24gPSBwcm9wcy5vcmllbnRhdGlvbixcbiAgICAgIFRyYW5zaXRpb25Db21wb25lbnQgPSBwcm9wcy5UcmFuc2l0aW9uQ29tcG9uZW50LFxuICAgICAgdHJhbnNpdGlvbkR1cmF0aW9uUHJvcCA9IHByb3BzLnRyYW5zaXRpb25EdXJhdGlvbixcbiAgICAgIFRyYW5zaXRpb25Qcm9wcyA9IHByb3BzLlRyYW5zaXRpb25Qcm9wcyxcbiAgICAgIG90aGVyID0gKDAsIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIuZGVmYXVsdCkocHJvcHMsIFtcImFjdGl2ZVwiLCBcImFsdGVybmF0aXZlTGFiZWxcIiwgXCJjaGlsZHJlblwiLCBcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJjb21wbGV0ZWRcIiwgXCJsYXN0XCIsIFwib3B0aW9uYWxcIiwgXCJvcmllbnRhdGlvblwiLCBcIlRyYW5zaXRpb25Db21wb25lbnRcIiwgXCJ0cmFuc2l0aW9uRHVyYXRpb25cIiwgXCJUcmFuc2l0aW9uUHJvcHNcIl0pO1xuICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyAoMCwgX3dhcm5pbmcuZGVmYXVsdCkob3JpZW50YXRpb24gPT09ICd2ZXJ0aWNhbCcsICdNYXRlcmlhbC1VSTogPFN0ZXBDb250ZW50IC8+IGlzIG9ubHkgZGVzaWduZWQgZm9yIHVzZSB3aXRoIHRoZSB2ZXJ0aWNhbCBzdGVwcGVyLicpIDogdm9pZCAwO1xuICB2YXIgdHJhbnNpdGlvbkR1cmF0aW9uID0gdHJhbnNpdGlvbkR1cmF0aW9uUHJvcDtcblxuICBpZiAodHJhbnNpdGlvbkR1cmF0aW9uUHJvcCA9PT0gJ2F1dG8nICYmICFUcmFuc2l0aW9uQ29tcG9uZW50Lm11aVN1cHBvcnRBdXRvKSB7XG4gICAgdHJhbnNpdGlvbkR1cmF0aW9uID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7XG4gICAgY2xhc3NOYW1lOiAoMCwgX2NsYXNzbmFtZXMuZGVmYXVsdCkoY2xhc3Nlcy5yb290LCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KSh7fSwgY2xhc3Nlcy5sYXN0LCBsYXN0KSwgY2xhc3NOYW1lKVxuICB9LCBvdGhlciksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoVHJhbnNpdGlvbkNvbXBvbmVudCwgKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7XG4gICAgXCJpblwiOiBhY3RpdmUsXG4gICAgY2xhc3NOYW1lOiBjbGFzc2VzLnRyYW5zaXRpb24sXG4gICAgdGltZW91dDogdHJhbnNpdGlvbkR1cmF0aW9uLFxuICAgIHVubW91bnRPbkV4aXQ6IHRydWVcbiAgfSwgVHJhbnNpdGlvblByb3BzKSwgY2hpbGRyZW4pKTtcbn1cblxuU3RlcENvbnRlbnQucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKipcbiAgICogQGlnbm9yZVxuICAgKiBFeHBhbmRzIHRoZSBjb250ZW50LlxuICAgKi9cbiAgYWN0aXZlOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKiBTZXQgaW50ZXJuYWxseSBieSBTdGVwIHdoZW4gaXQncyBzdXBwbGllZCB3aXRoIHRoZSBhbHRlcm5hdGl2ZUxhYmVsIHByb3BlcnR5LlxuICAgKi9cbiAgYWx0ZXJuYXRpdmVMYWJlbDogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIFN0ZXAgY29udGVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBfcHJvcFR5cGVzLmRlZmF1bHQubm9kZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MtYXBpKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNvbXBsZXRlZDogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGxhc3Q6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqIFNldCBpbnRlcm5hbGx5IGJ5IFN0ZXAgd2hlbiBpdCdzIHN1cHBsaWVkIHdpdGggdGhlIG9wdGlvbmFsIHByb3BlcnR5LlxuICAgKi9cbiAgb3B0aW9uYWw6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvcmllbnRhdGlvbjogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mKFsnaG9yaXpvbnRhbCcsICd2ZXJ0aWNhbCddKSxcblxuICAvKipcbiAgICogQ29sbGFwc2UgY29tcG9uZW50LlxuICAgKi9cbiAgVHJhbnNpdGlvbkNvbXBvbmVudDogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIEFkanVzdCB0aGUgZHVyYXRpb24gb2YgdGhlIGNvbnRlbnQgZXhwYW5kIHRyYW5zaXRpb24uXG4gICAqIFBhc3NlZCBhcyBhIHByb3BlcnR5IHRvIHRoZSB0cmFuc2l0aW9uIGNvbXBvbmVudC5cbiAgICpcbiAgICogU2V0IHRvICdhdXRvJyB0byBhdXRvbWF0aWNhbGx5IGNhbGN1bGF0ZSB0cmFuc2l0aW9uIHRpbWUgYmFzZWQgb24gaGVpZ2h0LlxuICAgKi9cbiAgdHJhbnNpdGlvbkR1cmF0aW9uOiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzLmRlZmF1bHQubnVtYmVyLCBfcHJvcFR5cGVzLmRlZmF1bHQuc2hhcGUoe1xuICAgIGVudGVyOiBfcHJvcFR5cGVzLmRlZmF1bHQubnVtYmVyLFxuICAgIGV4aXQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5udW1iZXJcbiAgfSksIF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZihbJ2F1dG8nXSldKSxcblxuICAvKipcbiAgICogUHJvcGVydGllcyBhcHBsaWVkIHRvIHRoZSBgVHJhbnNpdGlvbmAgZWxlbWVudC5cbiAgICovXG4gIFRyYW5zaXRpb25Qcm9wczogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdFxufSA6IHt9O1xuU3RlcENvbnRlbnQuZGVmYXVsdFByb3BzID0ge1xuICBUcmFuc2l0aW9uQ29tcG9uZW50OiBfQ29sbGFwc2UuZGVmYXVsdCxcbiAgdHJhbnNpdGlvbkR1cmF0aW9uOiAnYXV0bydcbn07XG5cbnZhciBfZGVmYXVsdCA9ICgwLCBfd2l0aFN0eWxlcy5kZWZhdWx0KShzdHlsZXMsIHtcbiAgbmFtZTogJ011aVN0ZXBDb250ZW50J1xufSkoU3RlcENvbnRlbnQpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuc3R5bGVzID0gdm9pZCAwO1xuXG52YXIgX2V4dGVuZHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2V4dGVuZHNcIikpO1xuXG52YXIgX2RlZmluZVByb3BlcnR5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9kZWZpbmVQcm9wZXJ0eVwiKSk7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCIpKTtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKTtcblxudmFyIF9jbGFzc25hbWVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY2xhc3NuYW1lc1wiKSk7XG5cbnZhciBfd2l0aFN0eWxlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3N0eWxlcy93aXRoU3R5bGVzXCIpKTtcblxudmFyIHN0eWxlcyA9IGZ1bmN0aW9uIHN0eWxlcyh0aGVtZSkge1xuICByZXR1cm4ge1xuICAgIHJvb3Q6IHtcbiAgICAgIGZsZXg6ICcxIDEgYXV0bydcbiAgICB9LFxuICAgIGhvcml6b250YWw6IHt9LFxuICAgIHZlcnRpY2FsOiB7XG4gICAgICBtYXJnaW5MZWZ0OiAxMixcbiAgICAgIC8vIGhhbGYgaWNvblxuICAgICAgcGFkZGluZzogXCIwIDAgXCIuY29uY2F0KHRoZW1lLnNwYWNpbmcudW5pdCwgXCJweFwiKVxuICAgIH0sXG4gICAgYWx0ZXJuYXRpdmVMYWJlbDoge1xuICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICB0b3A6IHRoZW1lLnNwYWNpbmcudW5pdCArIDQsXG4gICAgICBsZWZ0OiAnY2FsYyg1MCUgKyAyMHB4KScsXG4gICAgICByaWdodDogJ2NhbGMoLTUwJSArIDIwcHgpJ1xuICAgIH0sXG4gICAgbGluZToge1xuICAgICAgZGlzcGxheTogJ2Jsb2NrJyxcbiAgICAgIGJvcmRlckNvbG9yOiB0aGVtZS5wYWxldHRlLnR5cGUgPT09ICdsaWdodCcgPyB0aGVtZS5wYWxldHRlLmdyZXlbNDAwXSA6IHRoZW1lLnBhbGV0dGUuZ3JleVs2MDBdXG4gICAgfSxcbiAgICBsaW5lSG9yaXpvbnRhbDoge1xuICAgICAgYm9yZGVyVG9wU3R5bGU6ICdzb2xpZCcsXG4gICAgICBib3JkZXJUb3BXaWR0aDogMVxuICAgIH0sXG4gICAgbGluZVZlcnRpY2FsOiB7XG4gICAgICBib3JkZXJMZWZ0U3R5bGU6ICdzb2xpZCcsXG4gICAgICBib3JkZXJMZWZ0V2lkdGg6IDEsXG4gICAgICBtaW5IZWlnaHQ6IHRoZW1lLnNwYWNpbmcudW5pdCAqIDNcbiAgICB9XG4gIH07XG59O1xuXG5leHBvcnRzLnN0eWxlcyA9IHN0eWxlcztcblxuZnVuY3Rpb24gU3RlcENvbm5lY3Rvcihwcm9wcykge1xuICB2YXIgX2NsYXNzTmFtZXMyO1xuXG4gIHZhciBhbHRlcm5hdGl2ZUxhYmVsID0gcHJvcHMuYWx0ZXJuYXRpdmVMYWJlbCxcbiAgICAgIGNsYXNzTmFtZVByb3AgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIG9yaWVudGF0aW9uID0gcHJvcHMub3JpZW50YXRpb24sXG4gICAgICBvdGhlciA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyLmRlZmF1bHQpKHByb3BzLCBbXCJhbHRlcm5hdGl2ZUxhYmVsXCIsIFwiY2xhc3NOYW1lXCIsIFwiY2xhc3Nlc1wiLCBcIm9yaWVudGF0aW9uXCJdKTtcbiAgdmFyIGNsYXNzTmFtZSA9ICgwLCBfY2xhc3NuYW1lcy5kZWZhdWx0KShjbGFzc2VzLnJvb3QsIGNsYXNzZXNbb3JpZW50YXRpb25dLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KSh7fSwgY2xhc3Nlcy5hbHRlcm5hdGl2ZUxhYmVsLCBhbHRlcm5hdGl2ZUxhYmVsKSwgY2xhc3NOYW1lUHJvcCk7XG4gIHZhciBsaW5lQ2xhc3NOYW1lID0gKDAsIF9jbGFzc25hbWVzLmRlZmF1bHQpKGNsYXNzZXMubGluZSwgKF9jbGFzc05hbWVzMiA9IHt9LCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lczIsIGNsYXNzZXMubGluZUhvcml6b250YWwsIG9yaWVudGF0aW9uID09PSAnaG9yaXpvbnRhbCcpLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lczIsIGNsYXNzZXMubGluZVZlcnRpY2FsLCBvcmllbnRhdGlvbiA9PT0gJ3ZlcnRpY2FsJyksIF9jbGFzc05hbWVzMikpO1xuICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImRpdlwiLCAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHtcbiAgICBjbGFzc05hbWU6IGNsYXNzTmFtZVxuICB9LCBvdGhlciksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICBjbGFzc05hbWU6IGxpbmVDbGFzc05hbWVcbiAgfSkpO1xufVxuXG5TdGVwQ29ubmVjdG9yLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICogU2V0IGludGVybmFsbHkgYnkgU3RlcCB3aGVuIGl0J3Mgc3VwcGxpZWQgd2l0aCB0aGUgYWx0ZXJuYXRpdmVMYWJlbCBwcm9wZXJ0eS5cbiAgICovXG4gIGFsdGVybmF0aXZlTGFiZWw6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2Nzcy1hcGkpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb3JpZW50YXRpb246IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZihbJ2hvcml6b250YWwnLCAndmVydGljYWwnXSlcbn0gOiB7fTtcblN0ZXBDb25uZWN0b3IuZGVmYXVsdFByb3BzID0ge1xuICBhbHRlcm5hdGl2ZUxhYmVsOiBmYWxzZSxcbiAgb3JpZW50YXRpb246ICdob3Jpem9udGFsJ1xufTtcblxudmFyIF9kZWZhdWx0ID0gKDAsIF93aXRoU3R5bGVzLmRlZmF1bHQpKHN0eWxlcywge1xuICBuYW1lOiAnTXVpU3RlcENvbm5lY3Rvcidcbn0pKFN0ZXBDb25uZWN0b3IpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuc3R5bGVzID0gdm9pZCAwO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xuXG52YXIgX2NsYXNzbmFtZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJjbGFzc25hbWVzXCIpKTtcblxudmFyIF93aXRoU3R5bGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vc3R5bGVzL3dpdGhTdHlsZXNcIikpO1xuXG52YXIgX1N2Z0ljb24gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9TdmdJY29uXCIpKTtcblxudmFyIHN0eWxlcyA9IGZ1bmN0aW9uIHN0eWxlcyh0aGVtZSkge1xuICByZXR1cm4ge1xuICAgIHJvb3Q6IHtcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnRleHQuZGlzYWJsZWRcbiAgICB9LFxuICAgIHRleHQ6IHtcbiAgICAgIGZpbGw6IHRoZW1lLnBhbGV0dGUucHJpbWFyeS5jb250cmFzdFRleHQsXG4gICAgICBmb250U2l6ZTogdGhlbWUudHlwb2dyYXBoeS5jYXB0aW9uLmZvbnRTaXplLFxuICAgICAgZm9udEZhbWlseTogdGhlbWUudHlwb2dyYXBoeS5mb250RmFtaWx5XG4gICAgfVxuICB9O1xufTtcbi8qKlxuICogQGlnbm9yZSAtIGludGVybmFsIGNvbXBvbmVudC5cbiAqL1xuXG5cbmV4cG9ydHMuc3R5bGVzID0gc3R5bGVzO1xuXG52YXIgX3JlZiA9IF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJjaXJjbGVcIiwge1xuICBjeDogXCIxMlwiLFxuICBjeTogXCIxMlwiLFxuICByOiBcIjEyXCJcbn0pO1xuXG5mdW5jdGlvbiBTdGVwUG9zaXRpb25JY29uKHByb3BzKSB7XG4gIHZhciBwb3NpdGlvbiA9IHByb3BzLnBvc2l0aW9uLFxuICAgICAgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWU7XG4gIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9TdmdJY29uLmRlZmF1bHQsIHtcbiAgICBjbGFzc05hbWU6ICgwLCBfY2xhc3NuYW1lcy5kZWZhdWx0KShjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSlcbiAgfSwgX3JlZiwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcInRleHRcIiwge1xuICAgIGNsYXNzTmFtZTogY2xhc3Nlcy50ZXh0LFxuICAgIHg6IFwiMTJcIixcbiAgICB5OiBcIjE2XCIsXG4gICAgdGV4dEFuY2hvcjogXCJtaWRkbGVcIlxuICB9LCBwb3NpdGlvbikpO1xufVxuXG5TdGVwUG9zaXRpb25JY29uLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzLWFwaSkgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgc3RlcCBwb3NpdGlvbiBhcyBhIG51bWJlci5cbiAgICovXG4gIHBvc2l0aW9uOiBfcHJvcFR5cGVzLmRlZmF1bHQubm9kZVxufSA6IHt9O1xuXG52YXIgX2RlZmF1bHQgPSAoMCwgX3dpdGhTdHlsZXMuZGVmYXVsdCkoc3R5bGVzKShTdGVwUG9zaXRpb25JY29uKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfcHVyZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlY29tcG9zZS9wdXJlXCIpKTtcblxudmFyIF9TdmdJY29uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vLi4vU3ZnSWNvblwiKSk7XG5cbnZhciBfcmVmID0gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICBkOiBcIk0xIDIxaDIyTDEyIDIgMSAyMXptMTItM2gtMnYtMmgydjJ6bTAtNGgtMnYtNGgydjR6XCJcbn0pO1xuXG4vKipcbiAqIEBpZ25vcmUgLSBpbnRlcm5hbCBjb21wb25lbnQuXG4gKi9cbnZhciBXYXJuaW5nID0gZnVuY3Rpb24gV2FybmluZyhwcm9wcykge1xuICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfU3ZnSWNvbi5kZWZhdWx0LCBwcm9wcywgX3JlZik7XG59O1xuXG5XYXJuaW5nID0gKDAsIF9wdXJlLmRlZmF1bHQpKFdhcm5pbmcpO1xuV2FybmluZy5tdWlOYW1lID0gJ1N2Z0ljb24nO1xudmFyIF9kZWZhdWx0ID0gV2FybmluZztcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3B1cmUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWNvbXBvc2UvcHVyZVwiKSk7XG5cbnZhciBfU3ZnSWNvbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uLy4uL1N2Z0ljb25cIikpO1xuXG52YXIgX3JlZiA9IF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgZDogXCJNMTIgMGExMiAxMiAwIDEgMCAwIDI0IDEyIDEyIDAgMCAwIDAtMjR6bS0yIDE3bC01LTUgMS40LTEuNCAzLjYgMy42IDcuNi03LjZMMTkgOGwtOSA5elwiXG59KTtcblxuLyoqXG4gKiBAaWdub3JlIC0gaW50ZXJuYWwgY29tcG9uZW50LlxuICovXG52YXIgQ2hlY2tDaXJjbGUgPSBmdW5jdGlvbiBDaGVja0NpcmNsZShwcm9wcykge1xuICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfU3ZnSWNvbi5kZWZhdWx0LCBwcm9wcywgX3JlZik7XG59O1xuXG5DaGVja0NpcmNsZSA9ICgwLCBfcHVyZS5kZWZhdWx0KShDaGVja0NpcmNsZSk7XG5DaGVja0NpcmNsZS5tdWlOYW1lID0gJ1N2Z0ljb24nO1xudmFyIF9kZWZhdWx0ID0gQ2hlY2tDaXJjbGU7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuc3R5bGVzID0gdm9pZCAwO1xuXG52YXIgX2RlZmluZVByb3BlcnR5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9kZWZpbmVQcm9wZXJ0eVwiKSk7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbnZhciBfY2xhc3NuYW1lcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImNsYXNzbmFtZXNcIikpO1xuXG52YXIgX0NoZWNrQ2lyY2xlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vaW50ZXJuYWwvc3ZnLWljb25zL0NoZWNrQ2lyY2xlXCIpKTtcblxudmFyIF9XYXJuaW5nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vaW50ZXJuYWwvc3ZnLWljb25zL1dhcm5pbmdcIikpO1xuXG52YXIgX3dpdGhTdHlsZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9zdHlsZXMvd2l0aFN0eWxlc1wiKSk7XG5cbnZhciBfU3RlcFBvc2l0aW9uSWNvbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vU3RlcFBvc2l0aW9uSWNvblwiKSk7XG5cbnZhciBzdHlsZXMgPSBmdW5jdGlvbiBzdHlsZXModGhlbWUpIHtcbiAgcmV0dXJuIHtcbiAgICByb290OiB7XG4gICAgICBkaXNwbGF5OiAnYmxvY2snLFxuICAgICAgJyYkYWN0aXZlJzoge1xuICAgICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5wcmltYXJ5Lm1haW5cbiAgICAgIH0sXG4gICAgICAnJiRjb21wbGV0ZWQnOiB7XG4gICAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnByaW1hcnkubWFpblxuICAgICAgfSxcbiAgICAgICcmJGVycm9yJzoge1xuICAgICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5lcnJvci5tYWluXG4gICAgICB9XG4gICAgfSxcbiAgICBhY3RpdmU6IHt9LFxuICAgIGNvbXBsZXRlZDoge30sXG4gICAgZXJyb3I6IHt9XG4gIH07XG59O1xuXG5leHBvcnRzLnN0eWxlcyA9IHN0eWxlcztcblxuZnVuY3Rpb24gU3RlcEljb24ocHJvcHMpIHtcbiAgdmFyIGNvbXBsZXRlZCA9IHByb3BzLmNvbXBsZXRlZCxcbiAgICAgIGljb24gPSBwcm9wcy5pY29uLFxuICAgICAgYWN0aXZlID0gcHJvcHMuYWN0aXZlLFxuICAgICAgZXJyb3IgPSBwcm9wcy5lcnJvcixcbiAgICAgIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzO1xuXG4gIGlmICh0eXBlb2YgaWNvbiA9PT0gJ251bWJlcicgfHwgdHlwZW9mIGljb24gPT09ICdzdHJpbmcnKSB7XG4gICAgaWYgKGVycm9yKSB7XG4gICAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfV2FybmluZy5kZWZhdWx0LCB7XG4gICAgICAgIGNsYXNzTmFtZTogKDAsIF9jbGFzc25hbWVzLmRlZmF1bHQpKGNsYXNzZXMucm9vdCwgY2xhc3Nlcy5lcnJvcilcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChjb21wbGV0ZWQpIHtcbiAgICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9DaGVja0NpcmNsZS5kZWZhdWx0LCB7XG4gICAgICAgIGNsYXNzTmFtZTogKDAsIF9jbGFzc25hbWVzLmRlZmF1bHQpKGNsYXNzZXMucm9vdCwgY2xhc3Nlcy5jb21wbGV0ZWQpXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfU3RlcFBvc2l0aW9uSWNvbi5kZWZhdWx0LCB7XG4gICAgICBjbGFzc05hbWU6ICgwLCBfY2xhc3NuYW1lcy5kZWZhdWx0KShjbGFzc2VzLnJvb3QsICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKHt9LCBjbGFzc2VzLmFjdGl2ZSwgYWN0aXZlKSksXG4gICAgICBwb3NpdGlvbjogaWNvblxuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIGljb247XG59XG5cblN0ZXBJY29uLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqXG4gICAqIFdoZXRoZXIgdGhpcyBzdGVwIGlzIGFjdGl2ZS5cbiAgICovXG4gIGFjdGl2ZTogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzLWFwaSkgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogTWFyayB0aGUgc3RlcCBhcyBjb21wbGV0ZWQuIElzIHBhc3NlZCB0byBjaGlsZCBjb21wb25lbnRzLlxuICAgKi9cbiAgY29tcGxldGVkOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogTWFyayB0aGUgc3RlcCBhcyBmYWlsZWQuXG4gICAqL1xuICBlcnJvcjogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSBpY29uIGRpc3BsYXllZCBieSB0aGUgc3RlcCBsYWJlbC5cbiAgICovXG4gIGljb246IF9wcm9wVHlwZXMuZGVmYXVsdC5ub2RlLmlzUmVxdWlyZWRcbn0gOiB7fTtcblN0ZXBJY29uLmRlZmF1bHRQcm9wcyA9IHtcbiAgYWN0aXZlOiBmYWxzZSxcbiAgY29tcGxldGVkOiBmYWxzZSxcbiAgZXJyb3I6IGZhbHNlXG59O1xuXG52YXIgX2RlZmF1bHQgPSAoMCwgX3dpdGhTdHlsZXMuZGVmYXVsdCkoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlTdGVwSWNvbidcbn0pKFN0ZXBJY29uKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLnN0eWxlcyA9IHZvaWQgMDtcblxudmFyIF9leHRlbmRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9leHRlbmRzXCIpKTtcblxudmFyIF9kZWZpbmVQcm9wZXJ0eTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vZGVmaW5lUHJvcGVydHlcIikpO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiKSk7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbnZhciBfY2xhc3NuYW1lcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImNsYXNzbmFtZXNcIikpO1xuXG52YXIgX3dpdGhTdHlsZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9zdHlsZXMvd2l0aFN0eWxlc1wiKSk7XG5cbnZhciBfVHlwb2dyYXBoeSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL1R5cG9ncmFwaHlcIikpO1xuXG52YXIgX1N0ZXBJY29uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vU3RlcEljb25cIikpO1xuXG52YXIgc3R5bGVzID0gZnVuY3Rpb24gc3R5bGVzKHRoZW1lKSB7XG4gIHJldHVybiB7XG4gICAgcm9vdDoge1xuICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICAnJiRhbHRlcm5hdGl2ZUxhYmVsJzoge1xuICAgICAgICBmbGV4RGlyZWN0aW9uOiAnY29sdW1uJ1xuICAgICAgfSxcbiAgICAgICcmJGRpc2FibGVkJzoge1xuICAgICAgICBjdXJzb3I6ICdkZWZhdWx0J1xuICAgICAgfVxuICAgIH0sXG4gICAgaG9yaXpvbnRhbDoge30sXG4gICAgdmVydGljYWw6IHt9LFxuICAgIGFjdGl2ZToge30sXG4gICAgY29tcGxldGVkOiB7fSxcbiAgICBhbHRlcm5hdGl2ZUxhYmVsOiB7fSxcbiAgICBlcnJvcjoge30sXG4gICAgZGlzYWJsZWQ6IHt9LFxuICAgIGxhYmVsOiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS50ZXh0LnNlY29uZGFyeSxcbiAgICAgICcmJGFjdGl2ZSc6IHtcbiAgICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUudGV4dC5wcmltYXJ5LFxuICAgICAgICBmb250V2VpZ2h0OiA1MDBcbiAgICAgIH0sXG4gICAgICAnJiRjb21wbGV0ZWQnOiB7XG4gICAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnRleHQucHJpbWFyeSxcbiAgICAgICAgZm9udFdlaWdodDogNTAwXG4gICAgICB9LFxuICAgICAgJyYkYWx0ZXJuYXRpdmVMYWJlbCc6IHtcbiAgICAgICAgdGV4dEFsaWduOiAnY2VudGVyJyxcbiAgICAgICAgbWFyZ2luVG9wOiB0aGVtZS5zcGFjaW5nLnVuaXQgKiAyXG4gICAgICB9LFxuICAgICAgJyYkZXJyb3InOiB7XG4gICAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLmVycm9yLm1haW5cbiAgICAgIH1cbiAgICB9LFxuICAgIGljb25Db250YWluZXI6IHtcbiAgICAgIHBhZGRpbmdSaWdodDogdGhlbWUuc3BhY2luZy51bml0LFxuICAgICAgJyYkYWx0ZXJuYXRpdmVMYWJlbCc6IHtcbiAgICAgICAgcGFkZGluZ1JpZ2h0OiAwXG4gICAgICB9XG4gICAgfSxcbiAgICBsYWJlbENvbnRhaW5lcjoge1xuICAgICAgd2lkdGg6ICcxMDAlJ1xuICAgIH1cbiAgfTtcbn07XG5cbmV4cG9ydHMuc3R5bGVzID0gc3R5bGVzO1xuXG5mdW5jdGlvbiBTdGVwTGFiZWwocHJvcHMpIHtcbiAgdmFyIF9jbGFzc05hbWVzLCBfY2xhc3NOYW1lczM7XG5cbiAgdmFyIGFjdGl2ZSA9IHByb3BzLmFjdGl2ZSxcbiAgICAgIGFsdGVybmF0aXZlTGFiZWwgPSBwcm9wcy5hbHRlcm5hdGl2ZUxhYmVsLFxuICAgICAgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY2xhc3NOYW1lUHJvcCA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIGNvbXBsZXRlZCA9IHByb3BzLmNvbXBsZXRlZCxcbiAgICAgIGRpc2FibGVkID0gcHJvcHMuZGlzYWJsZWQsXG4gICAgICBlcnJvciA9IHByb3BzLmVycm9yLFxuICAgICAgaWNvbiA9IHByb3BzLmljb24sXG4gICAgICBsYXN0ID0gcHJvcHMubGFzdCxcbiAgICAgIG9wdGlvbmFsID0gcHJvcHMub3B0aW9uYWwsXG4gICAgICBvcmllbnRhdGlvbiA9IHByb3BzLm9yaWVudGF0aW9uLFxuICAgICAgU3RlcEljb25Qcm9wcyA9IHByb3BzLlN0ZXBJY29uUHJvcHMsXG4gICAgICBvdGhlciA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyLmRlZmF1bHQpKHByb3BzLCBbXCJhY3RpdmVcIiwgXCJhbHRlcm5hdGl2ZUxhYmVsXCIsIFwiY2hpbGRyZW5cIiwgXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29tcGxldGVkXCIsIFwiZGlzYWJsZWRcIiwgXCJlcnJvclwiLCBcImljb25cIiwgXCJsYXN0XCIsIFwib3B0aW9uYWxcIiwgXCJvcmllbnRhdGlvblwiLCBcIlN0ZXBJY29uUHJvcHNcIl0pO1xuICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcInNwYW5cIiwgKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7XG4gICAgY2xhc3NOYW1lOiAoMCwgX2NsYXNzbmFtZXMuZGVmYXVsdCkoY2xhc3Nlcy5yb290LCBjbGFzc2VzW29yaWVudGF0aW9uXSwgKF9jbGFzc05hbWVzID0ge30sICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKF9jbGFzc05hbWVzLCBjbGFzc2VzLmRpc2FibGVkLCBkaXNhYmxlZCksICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKF9jbGFzc05hbWVzLCBjbGFzc2VzLmFsdGVybmF0aXZlTGFiZWwsIGFsdGVybmF0aXZlTGFiZWwpLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lcywgY2xhc3Nlcy5lcnJvciwgZXJyb3IpLCBfY2xhc3NOYW1lcyksIGNsYXNzTmFtZVByb3ApXG4gIH0sIG90aGVyKSwgaWNvbiAmJiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7XG4gICAgY2xhc3NOYW1lOiAoMCwgX2NsYXNzbmFtZXMuZGVmYXVsdCkoY2xhc3Nlcy5pY29uQ29udGFpbmVyLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KSh7fSwgY2xhc3Nlcy5hbHRlcm5hdGl2ZUxhYmVsLCBhbHRlcm5hdGl2ZUxhYmVsKSlcbiAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfU3RlcEljb24uZGVmYXVsdCwgKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7XG4gICAgY29tcGxldGVkOiBjb21wbGV0ZWQsXG4gICAgYWN0aXZlOiBhY3RpdmUsXG4gICAgZXJyb3I6IGVycm9yLFxuICAgIGljb246IGljb25cbiAgfSwgU3RlcEljb25Qcm9wcykpKSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcInNwYW5cIiwge1xuICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5sYWJlbENvbnRhaW5lclxuICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9UeXBvZ3JhcGh5LmRlZmF1bHQsIHtcbiAgICB2YXJpYW50OiBcImJvZHkxXCIsXG4gICAgY29tcG9uZW50OiBcInNwYW5cIixcbiAgICBjbGFzc05hbWU6ICgwLCBfY2xhc3NuYW1lcy5kZWZhdWx0KShjbGFzc2VzLmxhYmVsLCAoX2NsYXNzTmFtZXMzID0ge30sICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKF9jbGFzc05hbWVzMywgY2xhc3Nlcy5hbHRlcm5hdGl2ZUxhYmVsLCBhbHRlcm5hdGl2ZUxhYmVsKSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2NsYXNzTmFtZXMzLCBjbGFzc2VzLmNvbXBsZXRlZCwgY29tcGxldGVkKSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2NsYXNzTmFtZXMzLCBjbGFzc2VzLmFjdGl2ZSwgYWN0aXZlKSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2NsYXNzTmFtZXMzLCBjbGFzc2VzLmVycm9yLCBlcnJvciksIF9jbGFzc05hbWVzMykpXG4gIH0sIGNoaWxkcmVuKSwgb3B0aW9uYWwpKTtcbn1cblxuU3RlcExhYmVsLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICogU2V0cyB0aGUgc3RlcCBhcyBhY3RpdmUuIElzIHBhc3NlZCB0byBjaGlsZCBjb21wb25lbnRzLlxuICAgKi9cbiAgYWN0aXZlOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKiBTZXQgaW50ZXJuYWxseSBieSBTdGVwcGVyIHdoZW4gaXQncyBzdXBwbGllZCB3aXRoIHRoZSBhbHRlcm5hdGl2ZUxhYmVsIHByb3BlcnR5LlxuICAgKi9cbiAgYWx0ZXJuYXRpdmVMYWJlbDogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIEluIG1vc3QgY2FzZXMgd2lsbCBzaW1wbHkgYmUgYSBzdHJpbmcgY29udGFpbmluZyBhIHRpdGxlIGZvciB0aGUgbGFiZWwuXG4gICAqL1xuICBjaGlsZHJlbjogX3Byb3BUeXBlcy5kZWZhdWx0Lm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzLWFwaSkgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqIE1hcmsgdGhlIHN0ZXAgYXMgY29tcGxldGVkLiBJcyBwYXNzZWQgdG8gY2hpbGQgY29tcG9uZW50cy5cbiAgICovXG4gIGNvbXBsZXRlZDogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIE1hcmsgdGhlIHN0ZXAgYXMgZGlzYWJsZWQsIHdpbGwgYWxzbyBkaXNhYmxlIHRoZSBidXR0b24gaWZcbiAgICogYFN0ZXBMYWJlbEJ1dHRvbmAgaXMgYSBjaGlsZCBvZiBgU3RlcExhYmVsYC4gSXMgcGFzc2VkIHRvIGNoaWxkIGNvbXBvbmVudHMuXG4gICAqL1xuICBkaXNhYmxlZDogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIE1hcmsgdGhlIHN0ZXAgYXMgZmFpbGVkLlxuICAgKi9cbiAgZXJyb3I6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSB0aGUgZGVmYXVsdCBpY29uLlxuICAgKi9cbiAgaWNvbjogX3Byb3BUeXBlcy5kZWZhdWx0Lm5vZGUsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGxhc3Q6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgb3B0aW9uYWwgbm9kZSB0byBkaXNwbGF5LlxuICAgKi9cbiAgb3B0aW9uYWw6IF9wcm9wVHlwZXMuZGVmYXVsdC5ub2RlLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvcmllbnRhdGlvbjogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mKFsnaG9yaXpvbnRhbCcsICd2ZXJ0aWNhbCddKSxcblxuICAvKipcbiAgICogUHJvcGVydGllcyBhcHBsaWVkIHRvIHRoZSBgU3RlcEljb25gIGVsZW1lbnQuXG4gICAqL1xuICBTdGVwSWNvblByb3BzOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0XG59IDoge307XG5TdGVwTGFiZWwuZGVmYXVsdFByb3BzID0ge1xuICBhY3RpdmU6IGZhbHNlLFxuICBhbHRlcm5hdGl2ZUxhYmVsOiBmYWxzZSxcbiAgY29tcGxldGVkOiBmYWxzZSxcbiAgZGlzYWJsZWQ6IGZhbHNlLFxuICBlcnJvcjogZmFsc2UsXG4gIGxhc3Q6IGZhbHNlLFxuICBvcmllbnRhdGlvbjogJ2hvcml6b250YWwnXG59O1xuU3RlcExhYmVsLm11aU5hbWUgPSAnU3RlcExhYmVsJztcblxudmFyIF9kZWZhdWx0ID0gKDAsIF93aXRoU3R5bGVzLmRlZmF1bHQpKHN0eWxlcywge1xuICBuYW1lOiAnTXVpU3RlcExhYmVsJ1xufSkoU3RlcExhYmVsKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLnN0eWxlcyA9IHZvaWQgMDtcblxudmFyIF9leHRlbmRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9leHRlbmRzXCIpKTtcblxudmFyIF9kZWZpbmVQcm9wZXJ0eTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vZGVmaW5lUHJvcGVydHlcIikpO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiKSk7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbnZhciBfY2xhc3NuYW1lcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImNsYXNzbmFtZXNcIikpO1xuXG52YXIgX3dpdGhTdHlsZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9zdHlsZXMvd2l0aFN0eWxlc1wiKSk7XG5cbnZhciBfQnV0dG9uQmFzZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL0J1dHRvbkJhc2VcIikpO1xuXG52YXIgX1N0ZXBMYWJlbCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL1N0ZXBMYWJlbFwiKSk7XG5cbnZhciBfcmVhY3RIZWxwZXJzID0gcmVxdWlyZShcIi4uL3V0aWxzL3JlYWN0SGVscGVyc1wiKTtcblxuLy8gQGluaGVyaXRlZENvbXBvbmVudCBCdXR0b25CYXNlXG52YXIgc3R5bGVzID0gZnVuY3Rpb24gc3R5bGVzKHRoZW1lKSB7XG4gIHJldHVybiB7XG4gICAgcm9vdDoge1xuICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgIHBhZGRpbmc6IFwiXCIuY29uY2F0KHRoZW1lLnNwYWNpbmcudW5pdCAqIDMsIFwicHggXCIpLmNvbmNhdCh0aGVtZS5zcGFjaW5nLnVuaXQgKiAyLCBcInB4XCIpLFxuICAgICAgbWFyZ2luOiBcIlwiLmNvbmNhdCgtdGhlbWUuc3BhY2luZy51bml0ICogMywgXCJweCBcIikuY29uY2F0KC10aGVtZS5zcGFjaW5nLnVuaXQgKiAyLCBcInB4XCIpLFxuICAgICAgYm94U2l6aW5nOiAnY29udGVudC1ib3gnXG4gICAgfSxcbiAgICB2ZXJ0aWNhbDoge1xuICAgICAganVzdGlmeUNvbnRlbnQ6ICdsZWZ0J1xuICAgIH0sXG4gICAgdG91Y2hSaXBwbGU6IHtcbiAgICAgIGNvbG9yOiAncmdiYSgwLCAwLCAwLCAwLjMpJ1xuICAgIH1cbiAgfTtcbn07XG5cbmV4cG9ydHMuc3R5bGVzID0gc3R5bGVzO1xuXG5mdW5jdGlvbiBTdGVwQnV0dG9uKHByb3BzKSB7XG4gIHZhciBhY3RpdmUgPSBwcm9wcy5hY3RpdmUsXG4gICAgICBhbHRlcm5hdGl2ZUxhYmVsID0gcHJvcHMuYWx0ZXJuYXRpdmVMYWJlbCxcbiAgICAgIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZVByb3AgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBjb21wbGV0ZWQgPSBwcm9wcy5jb21wbGV0ZWQsXG4gICAgICBkaXNhYmxlZCA9IHByb3BzLmRpc2FibGVkLFxuICAgICAgaWNvbiA9IHByb3BzLmljb24sXG4gICAgICBsYXN0ID0gcHJvcHMubGFzdCxcbiAgICAgIG9wdGlvbmFsID0gcHJvcHMub3B0aW9uYWwsXG4gICAgICBvcmllbnRhdGlvbiA9IHByb3BzLm9yaWVudGF0aW9uLFxuICAgICAgb3RoZXIgPSAoMCwgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMi5kZWZhdWx0KShwcm9wcywgW1wiYWN0aXZlXCIsIFwiYWx0ZXJuYXRpdmVMYWJlbFwiLCBcImNoaWxkcmVuXCIsIFwiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcImNvbXBsZXRlZFwiLCBcImRpc2FibGVkXCIsIFwiaWNvblwiLCBcImxhc3RcIiwgXCJvcHRpb25hbFwiLCBcIm9yaWVudGF0aW9uXCJdKTtcbiAgdmFyIGNoaWxkUHJvcHMgPSB7XG4gICAgYWN0aXZlOiBhY3RpdmUsXG4gICAgYWx0ZXJuYXRpdmVMYWJlbDogYWx0ZXJuYXRpdmVMYWJlbCxcbiAgICBjb21wbGV0ZWQ6IGNvbXBsZXRlZCxcbiAgICBkaXNhYmxlZDogZGlzYWJsZWQsXG4gICAgaWNvbjogaWNvbixcbiAgICBvcHRpb25hbDogb3B0aW9uYWwsXG4gICAgb3JpZW50YXRpb246IG9yaWVudGF0aW9uXG4gIH07XG4gIHZhciBjaGlsZCA9ICgwLCBfcmVhY3RIZWxwZXJzLmlzTXVpRWxlbWVudCkoY2hpbGRyZW4sIFsnU3RlcExhYmVsJ10pID8gX3JlYWN0LmRlZmF1bHQuY2xvbmVFbGVtZW50KGNoaWxkcmVuLCBjaGlsZFByb3BzKSA6IF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX1N0ZXBMYWJlbC5kZWZhdWx0LCBjaGlsZFByb3BzLCBjaGlsZHJlbik7XG4gIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9CdXR0b25CYXNlLmRlZmF1bHQsICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe1xuICAgIGRpc2FibGVkOiBkaXNhYmxlZCxcbiAgICBUb3VjaFJpcHBsZVByb3BzOiB7XG4gICAgICBjbGFzc05hbWU6IGNsYXNzZXMudG91Y2hSaXBwbGVcbiAgICB9LFxuICAgIGNsYXNzTmFtZTogKDAsIF9jbGFzc25hbWVzLmRlZmF1bHQpKGNsYXNzZXMucm9vdCwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoe30sIGNsYXNzZXMudmVydGljYWwsIG9yaWVudGF0aW9uID09PSAndmVydGljYWwnKSwgY2xhc3NOYW1lUHJvcClcbiAgfSwgb3RoZXIpLCBjaGlsZCk7XG59XG5cblN0ZXBCdXR0b24ucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKipcbiAgICogQGlnbm9yZVxuICAgKiBQYXNzZWQgaW4gdmlhIGBTdGVwYCAtIHBhc3NlZCB0aHJvdWdoIHRvIGBTdGVwTGFiZWxgLlxuICAgKi9cbiAgYWN0aXZlOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKiBTZXQgaW50ZXJuYWxseSBieSBTdGVwcGVyIHdoZW4gaXQncyBzdXBwbGllZCB3aXRoIHRoZSBhbHRlcm5hdGl2ZUxhYmVsIHByb3BlcnR5LlxuICAgKi9cbiAgYWx0ZXJuYXRpdmVMYWJlbDogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIENhbiBiZSBhIGBTdGVwTGFiZWxgIG9yIGEgbm9kZSB0byBwbGFjZSBpbnNpZGUgYFN0ZXBMYWJlbGAgYXMgY2hpbGRyZW4uXG4gICAqL1xuICBjaGlsZHJlbjogX3Byb3BUeXBlcy5kZWZhdWx0Lm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzLWFwaSkgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqIFNldHMgY29tcGxldGVkIHN0eWxpbmcuIElzIHBhc3NlZCB0byBTdGVwTGFiZWwuXG4gICAqL1xuICBjb21wbGV0ZWQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqIERpc2FibGVzIHRoZSBidXR0b24gYW5kIHNldHMgZGlzYWJsZWQgc3R5bGluZy4gSXMgcGFzc2VkIHRvIFN0ZXBMYWJlbC5cbiAgICovXG4gIGRpc2FibGVkOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogVGhlIGljb24gZGlzcGxheWVkIGJ5IHRoZSBzdGVwIGxhYmVsLlxuICAgKi9cbiAgaWNvbjogX3Byb3BUeXBlcy5kZWZhdWx0Lm5vZGUsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGxhc3Q6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgb3B0aW9uYWwgbm9kZSB0byBkaXNwbGF5LlxuICAgKi9cbiAgb3B0aW9uYWw6IF9wcm9wVHlwZXMuZGVmYXVsdC5ub2RlLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvcmllbnRhdGlvbjogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mKFsnaG9yaXpvbnRhbCcsICd2ZXJ0aWNhbCddKVxufSA6IHt9O1xuXG52YXIgX2RlZmF1bHQgPSAoMCwgX3dpdGhTdHlsZXMuZGVmYXVsdCkoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlTdGVwQnV0dG9uJ1xufSkoU3RlcEJ1dHRvbik7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5zdHlsZXMgPSB2b2lkIDA7XG5cbnZhciBfZXh0ZW5kczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vZXh0ZW5kc1wiKSk7XG5cbnZhciBfb2JqZWN0U3ByZWFkMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9vYmplY3RTcHJlYWRcIikpO1xuXG52YXIgX2RlZmluZVByb3BlcnR5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9kZWZpbmVQcm9wZXJ0eVwiKSk7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCIpKTtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKTtcblxudmFyIF9jbGFzc25hbWVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY2xhc3NuYW1lc1wiKSk7XG5cbnZhciBfd2l0aFN0eWxlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3N0eWxlcy93aXRoU3R5bGVzXCIpKTtcblxudmFyIHN0eWxlcyA9IGZ1bmN0aW9uIHN0eWxlcyh0aGVtZSkge1xuICByZXR1cm4ge1xuICAgIHJvb3Q6IHt9LFxuICAgIGhvcml6b250YWw6IHtcbiAgICAgIHBhZGRpbmdMZWZ0OiB0aGVtZS5zcGFjaW5nLnVuaXQsXG4gICAgICBwYWRkaW5nUmlnaHQ6IHRoZW1lLnNwYWNpbmcudW5pdCxcbiAgICAgICcmOmZpcnN0LWNoaWxkJzoge1xuICAgICAgICBwYWRkaW5nTGVmdDogMFxuICAgICAgfSxcbiAgICAgICcmOmxhc3QtY2hpbGQnOiB7XG4gICAgICAgIHBhZGRpbmdSaWdodDogMFxuICAgICAgfVxuICAgIH0sXG4gICAgdmVydGljYWw6IHt9LFxuICAgIGFsdGVybmF0aXZlTGFiZWw6IHtcbiAgICAgIGZsZXg6IDEsXG4gICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJ1xuICAgIH1cbiAgfTtcbn07XG5cbmV4cG9ydHMuc3R5bGVzID0gc3R5bGVzO1xuXG5mdW5jdGlvbiBTdGVwKHByb3BzKSB7XG4gIHZhciBhY3RpdmUgPSBwcm9wcy5hY3RpdmUsXG4gICAgICBhbHRlcm5hdGl2ZUxhYmVsID0gcHJvcHMuYWx0ZXJuYXRpdmVMYWJlbCxcbiAgICAgIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZVByb3AgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBjb21wbGV0ZWQgPSBwcm9wcy5jb21wbGV0ZWQsXG4gICAgICBjb25uZWN0b3IgPSBwcm9wcy5jb25uZWN0b3IsXG4gICAgICBkaXNhYmxlZCA9IHByb3BzLmRpc2FibGVkLFxuICAgICAgaW5kZXggPSBwcm9wcy5pbmRleCxcbiAgICAgIGxhc3QgPSBwcm9wcy5sYXN0LFxuICAgICAgb3JpZW50YXRpb24gPSBwcm9wcy5vcmllbnRhdGlvbixcbiAgICAgIG90aGVyID0gKDAsIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIuZGVmYXVsdCkocHJvcHMsIFtcImFjdGl2ZVwiLCBcImFsdGVybmF0aXZlTGFiZWxcIiwgXCJjaGlsZHJlblwiLCBcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJjb21wbGV0ZWRcIiwgXCJjb25uZWN0b3JcIiwgXCJkaXNhYmxlZFwiLCBcImluZGV4XCIsIFwibGFzdFwiLCBcIm9yaWVudGF0aW9uXCJdKTtcbiAgdmFyIGNsYXNzTmFtZSA9ICgwLCBfY2xhc3NuYW1lcy5kZWZhdWx0KShjbGFzc2VzLnJvb3QsIGNsYXNzZXNbb3JpZW50YXRpb25dLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KSh7fSwgY2xhc3Nlcy5hbHRlcm5hdGl2ZUxhYmVsLCBhbHRlcm5hdGl2ZUxhYmVsKSwgY2xhc3NOYW1lUHJvcCk7XG4gIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe1xuICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lXG4gIH0sIG90aGVyKSwgX3JlYWN0LmRlZmF1bHQuQ2hpbGRyZW4ubWFwKGNoaWxkcmVuLCBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY2xvbmVFbGVtZW50KGNoaWxkLCAoMCwgX29iamVjdFNwcmVhZDIuZGVmYXVsdCkoe1xuICAgICAgYWN0aXZlOiBhY3RpdmUsXG4gICAgICBhbHRlcm5hdGl2ZUxhYmVsOiBhbHRlcm5hdGl2ZUxhYmVsLFxuICAgICAgY29tcGxldGVkOiBjb21wbGV0ZWQsXG4gICAgICBkaXNhYmxlZDogZGlzYWJsZWQsXG4gICAgICBpY29uOiBpbmRleCArIDEsXG4gICAgICBsYXN0OiBsYXN0LFxuICAgICAgb3JpZW50YXRpb246IG9yaWVudGF0aW9uXG4gICAgfSwgY2hpbGQucHJvcHMpKTtcbiAgfSksIGNvbm5lY3RvciAmJiBhbHRlcm5hdGl2ZUxhYmVsICYmICFsYXN0ICYmIF9yZWFjdC5kZWZhdWx0LmNsb25lRWxlbWVudChjb25uZWN0b3IsIHtcbiAgICBvcmllbnRhdGlvbjogb3JpZW50YXRpb24sXG4gICAgYWx0ZXJuYXRpdmVMYWJlbDogYWx0ZXJuYXRpdmVMYWJlbFxuICB9KSk7XG59XG5cblN0ZXAucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKipcbiAgICogU2V0cyB0aGUgc3RlcCBhcyBhY3RpdmUuIElzIHBhc3NlZCB0byBjaGlsZCBjb21wb25lbnRzLlxuICAgKi9cbiAgYWN0aXZlOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKiBTZXQgaW50ZXJuYWxseSBieSBTdGVwcGVyIHdoZW4gaXQncyBzdXBwbGllZCB3aXRoIHRoZSBhbHRlcm5hdGl2ZUxhYmVsIHByb3BlcnR5LlxuICAgKi9cbiAgYWx0ZXJuYXRpdmVMYWJlbDogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIFNob3VsZCBiZSBgU3RlcGAgc3ViLWNvbXBvbmVudHMgc3VjaCBhcyBgU3RlcExhYmVsYCwgYFN0ZXBDb250ZW50YC5cbiAgICovXG4gIGNoaWxkcmVuOiBfcHJvcFR5cGVzLmRlZmF1bHQubm9kZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MtYXBpKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIE1hcmsgdGhlIHN0ZXAgYXMgY29tcGxldGVkLiBJcyBwYXNzZWQgdG8gY2hpbGQgY29tcG9uZW50cy5cbiAgICovXG4gIGNvbXBsZXRlZDogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICogUGFzc2VkIGRvd24gZnJvbSBTdGVwcGVyIGlmIGFsdGVybmF0aXZlTGFiZWwgaXMgYWxzbyBzZXQuXG4gICAqL1xuICBjb25uZWN0b3I6IF9wcm9wVHlwZXMuZGVmYXVsdC5lbGVtZW50LFxuXG4gIC8qKlxuICAgKiBNYXJrIHRoZSBzdGVwIGFzIGRpc2FibGVkLCB3aWxsIGFsc28gZGlzYWJsZSB0aGUgYnV0dG9uIGlmXG4gICAqIGBTdGVwQnV0dG9uYCBpcyBhIGNoaWxkIG9mIGBTdGVwYC4gSXMgcGFzc2VkIHRvIGNoaWxkIGNvbXBvbmVudHMuXG4gICAqL1xuICBkaXNhYmxlZDogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICogVXNlZCBpbnRlcm5hbGx5IGZvciBudW1iZXJpbmcuXG4gICAqL1xuICBpbmRleDogX3Byb3BUeXBlcy5kZWZhdWx0Lm51bWJlcixcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgbGFzdDogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9yaWVudGF0aW9uOiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2YoWydob3Jpem9udGFsJywgJ3ZlcnRpY2FsJ10pXG59IDoge307XG5TdGVwLmRlZmF1bHRQcm9wcyA9IHtcbiAgYWN0aXZlOiBmYWxzZSxcbiAgY29tcGxldGVkOiBmYWxzZSxcbiAgZGlzYWJsZWQ6IGZhbHNlXG59O1xuXG52YXIgX2RlZmF1bHQgPSAoMCwgX3dpdGhTdHlsZXMuZGVmYXVsdCkoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlTdGVwJ1xufSkoU3RlcCk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5zdHlsZXMgPSB2b2lkIDA7XG5cbnZhciBfZXh0ZW5kczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vZXh0ZW5kc1wiKSk7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCIpKTtcblxudmFyIF9kZWZpbmVQcm9wZXJ0eTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vZGVmaW5lUHJvcGVydHlcIikpO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xuXG52YXIgX2NsYXNzbmFtZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJjbGFzc25hbWVzXCIpKTtcblxudmFyIF93aXRoU3R5bGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vc3R5bGVzL3dpdGhTdHlsZXNcIikpO1xuXG52YXIgX1BhcGVyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vUGFwZXJcIikpO1xuXG52YXIgX1R5cG9ncmFwaHkgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9UeXBvZ3JhcGh5XCIpKTtcblxudmFyIF9jb2xvck1hbmlwdWxhdG9yID0gcmVxdWlyZShcIi4uL3N0eWxlcy9jb2xvck1hbmlwdWxhdG9yXCIpO1xuXG4vLyBAaW5oZXJpdGVkQ29tcG9uZW50IFBhcGVyXG52YXIgc3R5bGVzID0gZnVuY3Rpb24gc3R5bGVzKHRoZW1lKSB7XG4gIHZhciBfcm9vdDtcblxuICB2YXIgZW1waGFzaXMgPSB0aGVtZS5wYWxldHRlLnR5cGUgPT09ICdsaWdodCcgPyAwLjggOiAwLjk4O1xuICB2YXIgYmFja2dyb3VuZENvbG9yID0gKDAsIF9jb2xvck1hbmlwdWxhdG9yLmVtcGhhc2l6ZSkodGhlbWUucGFsZXR0ZS5iYWNrZ3JvdW5kLmRlZmF1bHQsIGVtcGhhc2lzKTtcbiAgcmV0dXJuIHtcbiAgICByb290OiAoX3Jvb3QgPSB7XG4gICAgICBwb2ludGVyRXZlbnRzOiAnaW5pdGlhbCcsXG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5nZXRDb250cmFzdFRleHQoYmFja2dyb3VuZENvbG9yKSxcbiAgICAgIGJhY2tncm91bmRDb2xvcjogYmFja2dyb3VuZENvbG9yLFxuICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICBmbGV4V3JhcDogJ3dyYXAnLFxuICAgICAgcGFkZGluZzogXCI2cHggXCIuY29uY2F0KHRoZW1lLnNwYWNpbmcudW5pdCAqIDMsIFwicHhcIilcbiAgICB9LCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfcm9vdCwgdGhlbWUuYnJlYWtwb2ludHMudXAoJ21kJyksIHtcbiAgICAgIG1pbldpZHRoOiAyODgsXG4gICAgICBtYXhXaWR0aDogNTY4LFxuICAgICAgYm9yZGVyUmFkaXVzOiAyXG4gICAgfSksICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKF9yb290LCB0aGVtZS5icmVha3BvaW50cy5kb3duKCdzbScpLCB7XG4gICAgICBmbGV4R3JvdzogMVxuICAgIH0pLCBfcm9vdCksXG4gICAgbWVzc2FnZToge1xuICAgICAgcGFkZGluZzogXCJcIi5jb25jYXQodGhlbWUuc3BhY2luZy51bml0LCBcInB4IDBcIilcbiAgICB9LFxuICAgIGFjdGlvbjoge1xuICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICBtYXJnaW5MZWZ0OiAnYXV0bycsXG4gICAgICBwYWRkaW5nTGVmdDogdGhlbWUuc3BhY2luZy51bml0ICogMyxcbiAgICAgIG1hcmdpblJpZ2h0OiAtdGhlbWUuc3BhY2luZy51bml0XG4gICAgfVxuICB9O1xufTtcblxuZXhwb3J0cy5zdHlsZXMgPSBzdHlsZXM7XG5cbmZ1bmN0aW9uIFNuYWNrYmFyQ29udGVudChwcm9wcykge1xuICB2YXIgYWN0aW9uID0gcHJvcHMuYWN0aW9uLFxuICAgICAgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBtZXNzYWdlID0gcHJvcHMubWVzc2FnZSxcbiAgICAgIG90aGVyID0gKDAsIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIuZGVmYXVsdCkocHJvcHMsIFtcImFjdGlvblwiLCBcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJtZXNzYWdlXCJdKTtcbiAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX1BhcGVyLmRlZmF1bHQsICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe1xuICAgIGNvbXBvbmVudDogX1R5cG9ncmFwaHkuZGVmYXVsdCxcbiAgICBoZWFkbGluZU1hcHBpbmc6IHtcbiAgICAgIGJvZHkxOiAnZGl2J1xuICAgIH0sXG4gICAgcm9sZTogXCJhbGVydGRpYWxvZ1wiLFxuICAgIHNxdWFyZTogdHJ1ZSxcbiAgICBlbGV2YXRpb246IDYsXG4gICAgY2xhc3NOYW1lOiAoMCwgX2NsYXNzbmFtZXMuZGVmYXVsdCkoY2xhc3Nlcy5yb290LCBjbGFzc05hbWUpXG4gIH0sIG90aGVyKSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgY2xhc3NOYW1lOiBjbGFzc2VzLm1lc3NhZ2VcbiAgfSwgbWVzc2FnZSksIGFjdGlvbiA/IF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5hY3Rpb25cbiAgfSwgYWN0aW9uKSA6IG51bGwpO1xufVxuXG5TbmFja2JhckNvbnRlbnQucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKipcbiAgICogVGhlIGFjdGlvbiB0byBkaXNwbGF5LlxuICAgKi9cbiAgYWN0aW9uOiBfcHJvcFR5cGVzLmRlZmF1bHQubm9kZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MtYXBpKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBtZXNzYWdlIHRvIGRpc3BsYXkuXG4gICAqL1xuICBtZXNzYWdlOiBfcHJvcFR5cGVzLmRlZmF1bHQubm9kZVxufSA6IHt9O1xuXG52YXIgX2RlZmF1bHQgPSAoMCwgX3dpdGhTdHlsZXMuZGVmYXVsdCkoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlTbmFja2JhckNvbnRlbnQnXG59KShTbmFja2JhckNvbnRlbnQpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuc3R5bGVzID0gdm9pZCAwO1xuXG52YXIgX2V4dGVuZHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2V4dGVuZHNcIikpO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiKSk7XG5cbnZhciBfY2xhc3NDYWxsQ2hlY2syID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2NsYXNzQ2FsbENoZWNrXCIpKTtcblxudmFyIF9jcmVhdGVDbGFzczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vY3JlYXRlQ2xhc3NcIikpO1xuXG52YXIgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5cIikpO1xuXG52YXIgX2luaGVyaXRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9pbmhlcml0c1wiKSk7XG5cbnZhciBfZGVmaW5lUHJvcGVydHkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2RlZmluZVByb3BlcnR5XCIpKTtcblxudmFyIF9vYmplY3RTcHJlYWQ4ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL29iamVjdFNwcmVhZFwiKSk7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbnZhciBfY2xhc3NuYW1lcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImNsYXNzbmFtZXNcIikpO1xuXG52YXIgX3JlYWN0RXZlbnRMaXN0ZW5lciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0LWV2ZW50LWxpc3RlbmVyXCIpKTtcblxudmFyIF93aXRoU3R5bGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vc3R5bGVzL3dpdGhTdHlsZXNcIikpO1xuXG52YXIgX3RyYW5zaXRpb25zID0gcmVxdWlyZShcIi4uL3N0eWxlcy90cmFuc2l0aW9uc1wiKTtcblxudmFyIF9DbGlja0F3YXlMaXN0ZW5lciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL0NsaWNrQXdheUxpc3RlbmVyXCIpKTtcblxudmFyIF9oZWxwZXJzID0gcmVxdWlyZShcIi4uL3V0aWxzL2hlbHBlcnNcIik7XG5cbnZhciBfU2xpZGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9TbGlkZVwiKSk7XG5cbnZhciBfU25hY2tiYXJDb250ZW50ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vU25hY2tiYXJDb250ZW50XCIpKTtcblxudmFyIHN0eWxlcyA9IGZ1bmN0aW9uIHN0eWxlcyh0aGVtZSkge1xuICB2YXIgZ3V0dGVyID0gdGhlbWUuc3BhY2luZy51bml0ICogMztcbiAgdmFyIHRvcCA9IHtcbiAgICB0b3A6IDBcbiAgfTtcbiAgdmFyIGJvdHRvbSA9IHtcbiAgICBib3R0b206IDBcbiAgfTtcbiAgdmFyIHJpZ2h0ID0ge1xuICAgIGp1c3RpZnlDb250ZW50OiAnZmxleC1lbmQnXG4gIH07XG4gIHZhciBsZWZ0ID0ge1xuICAgIGp1c3RpZnlDb250ZW50OiAnZmxleC1zdGFydCdcbiAgfTtcbiAgdmFyIHRvcFNwYWNlID0ge1xuICAgIHRvcDogZ3V0dGVyXG4gIH07XG4gIHZhciBib3R0b21TcGFjZSA9IHtcbiAgICBib3R0b206IGd1dHRlclxuICB9O1xuICB2YXIgcmlnaHRTcGFjZSA9IHtcbiAgICByaWdodDogZ3V0dGVyXG4gIH07XG4gIHZhciBsZWZ0U3BhY2UgPSB7XG4gICAgbGVmdDogZ3V0dGVyXG4gIH07XG4gIHZhciBjZW50ZXIgPSB7XG4gICAgbGVmdDogJzUwJScsXG4gICAgcmlnaHQ6ICdhdXRvJyxcbiAgICB0cmFuc2Zvcm06ICd0cmFuc2xhdGVYKC01MCUpJ1xuICB9O1xuICByZXR1cm4ge1xuICAgIHJvb3Q6IHtcbiAgICAgIHpJbmRleDogdGhlbWUuekluZGV4LnNuYWNrYmFyLFxuICAgICAgcG9zaXRpb246ICdmaXhlZCcsXG4gICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICBsZWZ0OiAwLFxuICAgICAgcmlnaHQ6IDAsXG4gICAgICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsXG4gICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJ1xuICAgIH0sXG4gICAgYW5jaG9yT3JpZ2luVG9wQ2VudGVyOiAoMCwgX29iamVjdFNwcmVhZDguZGVmYXVsdCkoe30sIHRvcCwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoe30sIHRoZW1lLmJyZWFrcG9pbnRzLnVwKCdtZCcpLCAoMCwgX29iamVjdFNwcmVhZDguZGVmYXVsdCkoe30sIGNlbnRlcikpKSxcbiAgICBhbmNob3JPcmlnaW5Cb3R0b21DZW50ZXI6ICgwLCBfb2JqZWN0U3ByZWFkOC5kZWZhdWx0KSh7fSwgYm90dG9tLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KSh7fSwgdGhlbWUuYnJlYWtwb2ludHMudXAoJ21kJyksICgwLCBfb2JqZWN0U3ByZWFkOC5kZWZhdWx0KSh7fSwgY2VudGVyKSkpLFxuICAgIGFuY2hvck9yaWdpblRvcFJpZ2h0OiAoMCwgX29iamVjdFNwcmVhZDguZGVmYXVsdCkoe30sIHRvcCwgcmlnaHQsICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKHt9LCB0aGVtZS5icmVha3BvaW50cy51cCgnbWQnKSwgKDAsIF9vYmplY3RTcHJlYWQ4LmRlZmF1bHQpKHtcbiAgICAgIGxlZnQ6ICdhdXRvJ1xuICAgIH0sIHRvcFNwYWNlLCByaWdodFNwYWNlKSkpLFxuICAgIGFuY2hvck9yaWdpbkJvdHRvbVJpZ2h0OiAoMCwgX29iamVjdFNwcmVhZDguZGVmYXVsdCkoe30sIGJvdHRvbSwgcmlnaHQsICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKHt9LCB0aGVtZS5icmVha3BvaW50cy51cCgnbWQnKSwgKDAsIF9vYmplY3RTcHJlYWQ4LmRlZmF1bHQpKHtcbiAgICAgIGxlZnQ6ICdhdXRvJ1xuICAgIH0sIGJvdHRvbVNwYWNlLCByaWdodFNwYWNlKSkpLFxuICAgIGFuY2hvck9yaWdpblRvcExlZnQ6ICgwLCBfb2JqZWN0U3ByZWFkOC5kZWZhdWx0KSh7fSwgdG9wLCBsZWZ0LCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KSh7fSwgdGhlbWUuYnJlYWtwb2ludHMudXAoJ21kJyksICgwLCBfb2JqZWN0U3ByZWFkOC5kZWZhdWx0KSh7XG4gICAgICByaWdodDogJ2F1dG8nXG4gICAgfSwgdG9wU3BhY2UsIGxlZnRTcGFjZSkpKSxcbiAgICBhbmNob3JPcmlnaW5Cb3R0b21MZWZ0OiAoMCwgX29iamVjdFNwcmVhZDguZGVmYXVsdCkoe30sIGJvdHRvbSwgbGVmdCwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoe30sIHRoZW1lLmJyZWFrcG9pbnRzLnVwKCdtZCcpLCAoMCwgX29iamVjdFNwcmVhZDguZGVmYXVsdCkoe1xuICAgICAgcmlnaHQ6ICdhdXRvJ1xuICAgIH0sIGJvdHRvbVNwYWNlLCBsZWZ0U3BhY2UpKSlcbiAgfTtcbn07XG4vKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cblxuXG5leHBvcnRzLnN0eWxlcyA9IHN0eWxlcztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIV9yZWFjdC5kZWZhdWx0LmNyZWF0ZUNvbnRleHQpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCdNYXRlcmlhbC1VSTogcmVhY3RAMTYuMy4wIG9yIGdyZWF0ZXIgaXMgcmVxdWlyZWQuJyk7XG59XG5cbnZhciBTbmFja2JhciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICAoMCwgX2luaGVyaXRzMi5kZWZhdWx0KShTbmFja2JhciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gU25hY2tiYXIoKSB7XG4gICAgdmFyIF9yZWY7XG5cbiAgICB2YXIgX3RlbXAsIF90aGlzO1xuXG4gICAgKDAsIF9jbGFzc0NhbGxDaGVjazIuZGVmYXVsdCkodGhpcywgU25hY2tiYXIpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiAoMCwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yLmRlZmF1bHQpKF90aGlzLCAoX3RlbXAgPSBfdGhpcyA9ICgwLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIuZGVmYXVsdCkodGhpcywgKF9yZWYgPSBTbmFja2Jhci5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKFNuYWNrYmFyKSkuY2FsbC5hcHBseShfcmVmLCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzLnN0YXRlID0ge30sIF90aGlzLnRpbWVyQXV0b0hpZGUgPSBudWxsLCBfdGhpcy5oYW5kbGVNb3VzZUVudGVyID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBpZiAoX3RoaXMucHJvcHMub25Nb3VzZUVudGVyKSB7XG4gICAgICAgIF90aGlzLnByb3BzLm9uTW91c2VFbnRlcihldmVudCk7XG4gICAgICB9XG5cbiAgICAgIF90aGlzLmhhbmRsZVBhdXNlKCk7XG4gICAgfSwgX3RoaXMuaGFuZGxlTW91c2VMZWF2ZSA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgaWYgKF90aGlzLnByb3BzLm9uTW91c2VMZWF2ZSkge1xuICAgICAgICBfdGhpcy5wcm9wcy5vbk1vdXNlTGVhdmUoZXZlbnQpO1xuICAgICAgfVxuXG4gICAgICBfdGhpcy5oYW5kbGVSZXN1bWUoKTtcbiAgICB9LCBfdGhpcy5oYW5kbGVDbGlja0F3YXkgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGlmIChfdGhpcy5wcm9wcy5vbkNsb3NlKSB7XG4gICAgICAgIF90aGlzLnByb3BzLm9uQ2xvc2UoZXZlbnQsICdjbGlja2F3YXknKTtcbiAgICAgIH1cbiAgICB9LCBfdGhpcy5oYW5kbGVQYXVzZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGNsZWFyVGltZW91dChfdGhpcy50aW1lckF1dG9IaWRlKTtcbiAgICB9LCBfdGhpcy5oYW5kbGVSZXN1bWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoX3RoaXMucHJvcHMuYXV0b0hpZGVEdXJhdGlvbiAhPSBudWxsKSB7XG4gICAgICAgIGlmIChfdGhpcy5wcm9wcy5yZXN1bWVIaWRlRHVyYXRpb24gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIF90aGlzLnNldEF1dG9IaWRlVGltZXIoX3RoaXMucHJvcHMucmVzdW1lSGlkZUR1cmF0aW9uKTtcblxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIF90aGlzLnNldEF1dG9IaWRlVGltZXIoKF90aGlzLnByb3BzLmF1dG9IaWRlRHVyYXRpb24gfHwgMCkgKiAwLjUpO1xuICAgICAgfVxuICAgIH0sIF90aGlzLmhhbmRsZUV4aXRlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgZXhpdGVkOiB0cnVlXG4gICAgICB9KTtcbiAgICB9LCBfdGVtcCkpO1xuICB9XG5cbiAgKDAsIF9jcmVhdGVDbGFzczIuZGVmYXVsdCkoU25hY2tiYXIsIFt7XG4gICAga2V5OiBcImNvbXBvbmVudERpZE1vdW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgaWYgKHRoaXMucHJvcHMub3Blbikge1xuICAgICAgICB0aGlzLnNldEF1dG9IaWRlVGltZXIoKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY29tcG9uZW50RGlkVXBkYXRlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMpIHtcbiAgICAgIGlmIChwcmV2UHJvcHMub3BlbiAhPT0gdGhpcy5wcm9wcy5vcGVuKSB7XG4gICAgICAgIGlmICh0aGlzLnByb3BzLm9wZW4pIHtcbiAgICAgICAgICB0aGlzLnNldEF1dG9IaWRlVGltZXIoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy50aW1lckF1dG9IaWRlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJjb21wb25lbnRXaWxsVW5tb3VudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aGlzLnRpbWVyQXV0b0hpZGUpO1xuICAgIH0gLy8gVGltZXIgdGhhdCBjb250cm9scyBkZWxheSBiZWZvcmUgc25hY2tiYXIgYXV0byBoaWRlc1xuXG4gIH0sIHtcbiAgICBrZXk6IFwic2V0QXV0b0hpZGVUaW1lclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRBdXRvSGlkZVRpbWVyKCkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIHZhciBhdXRvSGlkZUR1cmF0aW9uID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBudWxsO1xuXG4gICAgICBpZiAoIXRoaXMucHJvcHMub25DbG9zZSB8fCB0aGlzLnByb3BzLmF1dG9IaWRlRHVyYXRpb24gPT0gbnVsbCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGNsZWFyVGltZW91dCh0aGlzLnRpbWVyQXV0b0hpZGUpO1xuICAgICAgdGhpcy50aW1lckF1dG9IaWRlID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghX3RoaXMyLnByb3BzLm9uQ2xvc2UgfHwgX3RoaXMyLnByb3BzLmF1dG9IaWRlRHVyYXRpb24gPT0gbnVsbCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIF90aGlzMi5wcm9wcy5vbkNsb3NlKG51bGwsICd0aW1lb3V0Jyk7XG4gICAgICB9LCBhdXRvSGlkZUR1cmF0aW9uIHx8IHRoaXMucHJvcHMuYXV0b0hpZGVEdXJhdGlvbiB8fCAwKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGFjdGlvbiA9IF9wcm9wcy5hY3Rpb24sXG4gICAgICAgICAgX3Byb3BzJGFuY2hvck9yaWdpbiA9IF9wcm9wcy5hbmNob3JPcmlnaW4sXG4gICAgICAgICAgdmVydGljYWwgPSBfcHJvcHMkYW5jaG9yT3JpZ2luLnZlcnRpY2FsLFxuICAgICAgICAgIGhvcml6b250YWwgPSBfcHJvcHMkYW5jaG9yT3JpZ2luLmhvcml6b250YWwsXG4gICAgICAgICAgYXV0b0hpZGVEdXJhdGlvbiA9IF9wcm9wcy5hdXRvSGlkZUR1cmF0aW9uLFxuICAgICAgICAgIGNoaWxkcmVuID0gX3Byb3BzLmNoaWxkcmVuLFxuICAgICAgICAgIGNsYXNzZXMgPSBfcHJvcHMuY2xhc3NlcyxcbiAgICAgICAgICBjbGFzc05hbWUgPSBfcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICAgIENvbnRlbnRQcm9wcyA9IF9wcm9wcy5Db250ZW50UHJvcHMsXG4gICAgICAgICAgZGlzYWJsZVdpbmRvd0JsdXJMaXN0ZW5lciA9IF9wcm9wcy5kaXNhYmxlV2luZG93Qmx1ckxpc3RlbmVyLFxuICAgICAgICAgIG1lc3NhZ2UgPSBfcHJvcHMubWVzc2FnZSxcbiAgICAgICAgICBvbkNsb3NlID0gX3Byb3BzLm9uQ2xvc2UsXG4gICAgICAgICAgb25FbnRlciA9IF9wcm9wcy5vbkVudGVyLFxuICAgICAgICAgIG9uRW50ZXJlZCA9IF9wcm9wcy5vbkVudGVyZWQsXG4gICAgICAgICAgb25FbnRlcmluZyA9IF9wcm9wcy5vbkVudGVyaW5nLFxuICAgICAgICAgIG9uRXhpdCA9IF9wcm9wcy5vbkV4aXQsXG4gICAgICAgICAgb25FeGl0ZWQgPSBfcHJvcHMub25FeGl0ZWQsXG4gICAgICAgICAgb25FeGl0aW5nID0gX3Byb3BzLm9uRXhpdGluZyxcbiAgICAgICAgICBvbk1vdXNlRW50ZXIgPSBfcHJvcHMub25Nb3VzZUVudGVyLFxuICAgICAgICAgIG9uTW91c2VMZWF2ZSA9IF9wcm9wcy5vbk1vdXNlTGVhdmUsXG4gICAgICAgICAgb3BlbiA9IF9wcm9wcy5vcGVuLFxuICAgICAgICAgIHJlc3VtZUhpZGVEdXJhdGlvbiA9IF9wcm9wcy5yZXN1bWVIaWRlRHVyYXRpb24sXG4gICAgICAgICAgVHJhbnNpdGlvbkNvbXBvbmVudCA9IF9wcm9wcy5UcmFuc2l0aW9uQ29tcG9uZW50LFxuICAgICAgICAgIHRyYW5zaXRpb25EdXJhdGlvbiA9IF9wcm9wcy50cmFuc2l0aW9uRHVyYXRpb24sXG4gICAgICAgICAgVHJhbnNpdGlvblByb3BzID0gX3Byb3BzLlRyYW5zaXRpb25Qcm9wcyxcbiAgICAgICAgICBvdGhlciA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyLmRlZmF1bHQpKF9wcm9wcywgW1wiYWN0aW9uXCIsIFwiYW5jaG9yT3JpZ2luXCIsIFwiYXV0b0hpZGVEdXJhdGlvblwiLCBcImNoaWxkcmVuXCIsIFwiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcIkNvbnRlbnRQcm9wc1wiLCBcImRpc2FibGVXaW5kb3dCbHVyTGlzdGVuZXJcIiwgXCJtZXNzYWdlXCIsIFwib25DbG9zZVwiLCBcIm9uRW50ZXJcIiwgXCJvbkVudGVyZWRcIiwgXCJvbkVudGVyaW5nXCIsIFwib25FeGl0XCIsIFwib25FeGl0ZWRcIiwgXCJvbkV4aXRpbmdcIiwgXCJvbk1vdXNlRW50ZXJcIiwgXCJvbk1vdXNlTGVhdmVcIiwgXCJvcGVuXCIsIFwicmVzdW1lSGlkZUR1cmF0aW9uXCIsIFwiVHJhbnNpdGlvbkNvbXBvbmVudFwiLCBcInRyYW5zaXRpb25EdXJhdGlvblwiLCBcIlRyYW5zaXRpb25Qcm9wc1wiXSk7IC8vIFNvIHdlIG9ubHkgcmVuZGVyIGFjdGl2ZSBzbmFja2JhcnMuXG5cbiAgICAgIGlmICghb3BlbiAmJiB0aGlzLnN0YXRlLmV4aXRlZCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX0NsaWNrQXdheUxpc3RlbmVyLmRlZmF1bHQsIHtcbiAgICAgICAgb25DbGlja0F3YXk6IHRoaXMuaGFuZGxlQ2xpY2tBd2F5XG4gICAgICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe1xuICAgICAgICBjbGFzc05hbWU6ICgwLCBfY2xhc3NuYW1lcy5kZWZhdWx0KShjbGFzc2VzLnJvb3QsIGNsYXNzZXNbXCJhbmNob3JPcmlnaW5cIi5jb25jYXQoKDAsIF9oZWxwZXJzLmNhcGl0YWxpemUpKHZlcnRpY2FsKSkuY29uY2F0KCgwLCBfaGVscGVycy5jYXBpdGFsaXplKShob3Jpem9udGFsKSldLCBjbGFzc05hbWUpLFxuICAgICAgICBvbk1vdXNlRW50ZXI6IHRoaXMuaGFuZGxlTW91c2VFbnRlcixcbiAgICAgICAgb25Nb3VzZUxlYXZlOiB0aGlzLmhhbmRsZU1vdXNlTGVhdmVcbiAgICAgIH0sIG90aGVyKSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3RFdmVudExpc3RlbmVyLmRlZmF1bHQsIHtcbiAgICAgICAgdGFyZ2V0OiBcIndpbmRvd1wiLFxuICAgICAgICBvbkZvY3VzOiBkaXNhYmxlV2luZG93Qmx1ckxpc3RlbmVyID8gdW5kZWZpbmVkIDogdGhpcy5oYW5kbGVSZXN1bWUsXG4gICAgICAgIG9uQmx1cjogZGlzYWJsZVdpbmRvd0JsdXJMaXN0ZW5lciA/IHVuZGVmaW5lZCA6IHRoaXMuaGFuZGxlUGF1c2VcbiAgICAgIH0pLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFRyYW5zaXRpb25Db21wb25lbnQsICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe1xuICAgICAgICBhcHBlYXI6IHRydWUsXG4gICAgICAgIFwiaW5cIjogb3BlbixcbiAgICAgICAgb25FbnRlcjogb25FbnRlcixcbiAgICAgICAgb25FbnRlcmVkOiBvbkVudGVyZWQsXG4gICAgICAgIG9uRW50ZXJpbmc6IG9uRW50ZXJpbmcsXG4gICAgICAgIG9uRXhpdDogb25FeGl0LFxuICAgICAgICBvbkV4aXRlZDogKDAsIF9oZWxwZXJzLmNyZWF0ZUNoYWluZWRGdW5jdGlvbikodGhpcy5oYW5kbGVFeGl0ZWQsIG9uRXhpdGVkKSxcbiAgICAgICAgb25FeGl0aW5nOiBvbkV4aXRpbmcsXG4gICAgICAgIHRpbWVvdXQ6IHRyYW5zaXRpb25EdXJhdGlvbixcbiAgICAgICAgZGlyZWN0aW9uOiB2ZXJ0aWNhbCA9PT0gJ3RvcCcgPyAnZG93bicgOiAndXAnXG4gICAgICB9LCBUcmFuc2l0aW9uUHJvcHMpLCBjaGlsZHJlbiB8fCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9TbmFja2JhckNvbnRlbnQuZGVmYXVsdCwgKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7XG4gICAgICAgIG1lc3NhZ2U6IG1lc3NhZ2UsXG4gICAgICAgIGFjdGlvbjogYWN0aW9uXG4gICAgICB9LCBDb250ZW50UHJvcHMpKSkpKTtcbiAgICB9XG4gIH1dLCBbe1xuICAgIGtleTogXCJnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzKG5leHRQcm9wcywgcHJldlN0YXRlKSB7XG4gICAgICBpZiAodHlwZW9mIHByZXZTdGF0ZS5leGl0ZWQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgZXhpdGVkOiAhbmV4dFByb3BzLm9wZW5cbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgaWYgKG5leHRQcm9wcy5vcGVuKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgZXhpdGVkOiBmYWxzZVxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1dKTtcbiAgcmV0dXJuIFNuYWNrYmFyO1xufShfcmVhY3QuZGVmYXVsdC5Db21wb25lbnQpO1xuXG5TbmFja2Jhci5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIC8qKlxuICAgKiBUaGUgYWN0aW9uIHRvIGRpc3BsYXkuXG4gICAqL1xuICBhY3Rpb246IF9wcm9wVHlwZXMuZGVmYXVsdC5ub2RlLFxuXG4gIC8qKlxuICAgKiBUaGUgYW5jaG9yIG9mIHRoZSBgU25hY2tiYXJgLlxuICAgKi9cbiAgYW5jaG9yT3JpZ2luOiBfcHJvcFR5cGVzLmRlZmF1bHQuc2hhcGUoe1xuICAgIGhvcml6b250YWw6IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMuZGVmYXVsdC5udW1iZXIsIF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZihbJ2xlZnQnLCAnY2VudGVyJywgJ3JpZ2h0J10pXSksXG4gICAgdmVydGljYWw6IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMuZGVmYXVsdC5udW1iZXIsIF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZihbJ3RvcCcsICdjZW50ZXInLCAnYm90dG9tJ10pXSlcbiAgfSksXG5cbiAgLyoqXG4gICAqIFRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIHdhaXQgYmVmb3JlIGF1dG9tYXRpY2FsbHkgY2FsbGluZyB0aGVcbiAgICogYG9uQ2xvc2VgIGZ1bmN0aW9uLiBgb25DbG9zZWAgc2hvdWxkIHRoZW4gc2V0IHRoZSBzdGF0ZSBvZiB0aGUgYG9wZW5gXG4gICAqIHByb3AgdG8gaGlkZSB0aGUgU25hY2tiYXIuIFRoaXMgYmVoYXZpb3IgaXMgZGlzYWJsZWQgYnkgZGVmYXVsdCB3aXRoXG4gICAqIHRoZSBgbnVsbGAgdmFsdWUuXG4gICAqL1xuICBhdXRvSGlkZUR1cmF0aW9uOiBfcHJvcFR5cGVzLmRlZmF1bHQubnVtYmVyLFxuXG4gIC8qKlxuICAgKiBJZiB5b3Ugd2lzaCB0aGUgdGFrZSBjb250cm9sIG92ZXIgdGhlIGNoaWxkcmVuIG9mIHRoZSBjb21wb25lbnQgeW91IGNhbiB1c2UgdGhpcyBwcm9wZXJ0eS5cbiAgICogV2hlbiB1c2VkLCB5b3UgcmVwbGFjZSB0aGUgYFNuYWNrYmFyQ29udGVudGAgY29tcG9uZW50IHdpdGggdGhlIGNoaWxkcmVuLlxuICAgKi9cbiAgY2hpbGRyZW46IF9wcm9wVHlwZXMuZGVmYXVsdC5lbGVtZW50LFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2Nzcy1hcGkpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxcblxuICAvKipcbiAgICogUHJvcGVydGllcyBhcHBsaWVkIHRvIHRoZSBgU25hY2tiYXJDb250ZW50YCBlbGVtZW50LlxuICAgKi9cbiAgQ29udGVudFByb3BzOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBgYXV0b0hpZGVEdXJhdGlvbmAgdGltZXIgd2lsbCBleHBpcmUgZXZlbiBpZiB0aGUgd2luZG93IGlzIG5vdCBmb2N1c2VkLlxuICAgKi9cbiAgZGlzYWJsZVdpbmRvd0JsdXJMaXN0ZW5lcjogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIFdoZW4gZGlzcGxheWluZyBtdWx0aXBsZSBjb25zZWN1dGl2ZSBTbmFja2JhcnMgZnJvbSBhIHBhcmVudCByZW5kZXJpbmcgYSBzaW5nbGVcbiAgICogPFNuYWNrYmFyLz4sIGFkZCB0aGUga2V5IHByb3BlcnR5IHRvIGVuc3VyZSBpbmRlcGVuZGVudCB0cmVhdG1lbnQgb2YgZWFjaCBtZXNzYWdlLlxuICAgKiBlLmcuIDxTbmFja2JhciBrZXk9e21lc3NhZ2V9IC8+LCBvdGhlcndpc2UsIHRoZSBtZXNzYWdlIG1heSB1cGRhdGUtaW4tcGxhY2UgYW5kXG4gICAqIGZlYXR1cmVzIHN1Y2ggYXMgYXV0b0hpZGVEdXJhdGlvbiBtYXkgYmUgY2FuY2VsZWQuXG4gICAqL1xuICBrZXk6IF9wcm9wVHlwZXMuZGVmYXVsdC5hbnksXG5cbiAgLyoqXG4gICAqIFRoZSBtZXNzYWdlIHRvIGRpc3BsYXkuXG4gICAqL1xuICBtZXNzYWdlOiBfcHJvcFR5cGVzLmRlZmF1bHQubm9kZSxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgY29tcG9uZW50IHJlcXVlc3RzIHRvIGJlIGNsb3NlZC5cbiAgICogVHlwaWNhbGx5IGBvbkNsb3NlYCBpcyB1c2VkIHRvIHNldCBzdGF0ZSBpbiB0aGUgcGFyZW50IGNvbXBvbmVudCxcbiAgICogd2hpY2ggaXMgdXNlZCB0byBjb250cm9sIHRoZSBgU25hY2tiYXJgIGBvcGVuYCBwcm9wLlxuICAgKiBUaGUgYHJlYXNvbmAgcGFyYW1ldGVyIGNhbiBvcHRpb25hbGx5IGJlIHVzZWQgdG8gY29udHJvbCB0aGUgcmVzcG9uc2UgdG8gYG9uQ2xvc2VgLFxuICAgKiBmb3IgZXhhbXBsZSBpZ25vcmluZyBgY2xpY2thd2F5YC5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGV2ZW50IFRoZSBldmVudCBzb3VyY2Ugb2YgdGhlIGNhbGxiYWNrXG4gICAqIEBwYXJhbSB7c3RyaW5nfSByZWFzb24gQ2FuIGJlOmBcInRpbWVvdXRcImAgKGBhdXRvSGlkZUR1cmF0aW9uYCBleHBpcmVkKSBvcjogYFwiY2xpY2thd2F5XCJgXG4gICAqL1xuICBvbkNsb3NlOiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgYmVmb3JlIHRoZSB0cmFuc2l0aW9uIGlzIGVudGVyaW5nLlxuICAgKi9cbiAgb25FbnRlcjogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIHRyYW5zaXRpb24gaGFzIGVudGVyZWQuXG4gICAqL1xuICBvbkVudGVyZWQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSB0cmFuc2l0aW9uIGlzIGVudGVyaW5nLlxuICAgKi9cbiAgb25FbnRlcmluZzogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGJlZm9yZSB0aGUgdHJhbnNpdGlvbiBpcyBleGl0aW5nLlxuICAgKi9cbiAgb25FeGl0OiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgdHJhbnNpdGlvbiBoYXMgZXhpdGVkLlxuICAgKi9cbiAgb25FeGl0ZWQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSB0cmFuc2l0aW9uIGlzIGV4aXRpbmcuXG4gICAqL1xuICBvbkV4aXRpbmc6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbk1vdXNlRW50ZXI6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbk1vdXNlTGVhdmU6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBJZiB0cnVlLCBgU25hY2tiYXJgIGlzIG9wZW4uXG4gICAqL1xuICBvcGVuOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogVGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gd2FpdCBiZWZvcmUgZGlzbWlzc2luZyBhZnRlciB1c2VyIGludGVyYWN0aW9uLlxuICAgKiBJZiBgYXV0b0hpZGVEdXJhdGlvbmAgcHJvcGVydHkgaXNuJ3Qgc3BlY2lmaWVkLCBpdCBkb2VzIG5vdGhpbmcuXG4gICAqIElmIGBhdXRvSGlkZUR1cmF0aW9uYCBwcm9wZXJ0eSBpcyBzcGVjaWZpZWQgYnV0IGByZXN1bWVIaWRlRHVyYXRpb25gIGlzbid0LFxuICAgKiB3ZSBkZWZhdWx0IHRvIGBhdXRvSGlkZUR1cmF0aW9uIC8gMmAgbXMuXG4gICAqL1xuICByZXN1bWVIaWRlRHVyYXRpb246IF9wcm9wVHlwZXMuZGVmYXVsdC5udW1iZXIsXG5cbiAgLyoqXG4gICAqIFRyYW5zaXRpb24gY29tcG9uZW50LlxuICAgKi9cbiAgVHJhbnNpdGlvbkNvbXBvbmVudDogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZywgX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmNdKSxcblxuICAvKipcbiAgICogVGhlIGR1cmF0aW9uIGZvciB0aGUgdHJhbnNpdGlvbiwgaW4gbWlsbGlzZWNvbmRzLlxuICAgKiBZb3UgbWF5IHNwZWNpZnkgYSBzaW5nbGUgdGltZW91dCBmb3IgYWxsIHRyYW5zaXRpb25zLCBvciBpbmRpdmlkdWFsbHkgd2l0aCBhbiBvYmplY3QuXG4gICAqL1xuICB0cmFuc2l0aW9uRHVyYXRpb246IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMuZGVmYXVsdC5udW1iZXIsIF9wcm9wVHlwZXMuZGVmYXVsdC5zaGFwZSh7XG4gICAgZW50ZXI6IF9wcm9wVHlwZXMuZGVmYXVsdC5udW1iZXIsXG4gICAgZXhpdDogX3Byb3BUeXBlcy5kZWZhdWx0Lm51bWJlclxuICB9KV0pLFxuXG4gIC8qKlxuICAgKiBQcm9wZXJ0aWVzIGFwcGxpZWQgdG8gdGhlIGBUcmFuc2l0aW9uYCBlbGVtZW50LlxuICAgKi9cbiAgVHJhbnNpdGlvblByb3BzOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0XG59IDoge307XG5TbmFja2Jhci5kZWZhdWx0UHJvcHMgPSB7XG4gIGFuY2hvck9yaWdpbjoge1xuICAgIHZlcnRpY2FsOiAnYm90dG9tJyxcbiAgICBob3Jpem9udGFsOiAnY2VudGVyJ1xuICB9LFxuICBkaXNhYmxlV2luZG93Qmx1ckxpc3RlbmVyOiBmYWxzZSxcbiAgVHJhbnNpdGlvbkNvbXBvbmVudDogX1NsaWRlLmRlZmF1bHQsXG4gIHRyYW5zaXRpb25EdXJhdGlvbjoge1xuICAgIGVudGVyOiBfdHJhbnNpdGlvbnMuZHVyYXRpb24uZW50ZXJpbmdTY3JlZW4sXG4gICAgZXhpdDogX3RyYW5zaXRpb25zLmR1cmF0aW9uLmxlYXZpbmdTY3JlZW5cbiAgfVxufTtcblxudmFyIF9kZWZhdWx0ID0gKDAsIF93aXRoU3R5bGVzLmRlZmF1bHQpKHN0eWxlcywge1xuICBmbGlwOiBmYWxzZSxcbiAgbmFtZTogJ011aVNuYWNrYmFyJ1xufSkoU25hY2tiYXIpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9leHRlbmRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9leHRlbmRzXCIpKTtcblxudmFyIF9kZWZpbmVQcm9wZXJ0eTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vZGVmaW5lUHJvcGVydHlcIikpO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiKSk7XG5cbnZhciBfb2JqZWN0U3ByZWFkMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9vYmplY3RTcHJlYWRcIikpO1xuXG52YXIgX3RvQ29uc3VtYWJsZUFycmF5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi90b0NvbnN1bWFibGVBcnJheVwiKSk7XG5cbnZhciBfY2xhc3NDYWxsQ2hlY2syID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2NsYXNzQ2FsbENoZWNrXCIpKTtcblxudmFyIF9jcmVhdGVDbGFzczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vY3JlYXRlQ2xhc3NcIikpO1xuXG52YXIgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5cIikpO1xuXG52YXIgX2luaGVyaXRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9pbmhlcml0c1wiKSk7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbnZhciBfY2xhc3NuYW1lcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImNsYXNzbmFtZXNcIikpO1xuXG52YXIgX2tleWNvZGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJrZXljb2RlXCIpKTtcblxudmFyIF9NZW51ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vTWVudS9NZW51XCIpKTtcblxudmFyIF9JbnB1dCA9IHJlcXVpcmUoXCIuLi9JbnB1dC9JbnB1dFwiKTtcblxuLyoqXG4gKiBAaWdub3JlIC0gaW50ZXJuYWwgY29tcG9uZW50LlxuICovXG52YXIgU2VsZWN0SW5wdXQgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgKDAsIF9pbmhlcml0czIuZGVmYXVsdCkoU2VsZWN0SW5wdXQsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFNlbGVjdElucHV0KCkge1xuICAgIHZhciBfcmVmO1xuXG4gICAgdmFyIF90ZW1wLCBfdGhpcztcblxuICAgICgwLCBfY2xhc3NDYWxsQ2hlY2syLmRlZmF1bHQpKHRoaXMsIFNlbGVjdElucHV0KTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gKDAsIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMi5kZWZhdWx0KShfdGhpcywgKF90ZW1wID0gX3RoaXMgPSAoMCwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yLmRlZmF1bHQpKHRoaXMsIChfcmVmID0gU2VsZWN0SW5wdXQuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihTZWxlY3RJbnB1dCkpLmNhbGwuYXBwbHkoX3JlZiwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIG9wZW46IGZhbHNlXG4gICAgfSwgX3RoaXMuaWdub3JlTmV4dEJsdXIgPSBmYWxzZSwgX3RoaXMuZGlzcGxheU5vZGUgPSBudWxsLCBfdGhpcy5kaXNwbGF5V2lkdGggPSBudWxsLCBfdGhpcy5pc09wZW5Db250cm9sbGVkID0gX3RoaXMucHJvcHMub3BlbiAhPT0gdW5kZWZpbmVkLCBfdGhpcy51cGRhdGVEaXNwbGF5V2lkdGggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBQZXJmb20gdGhlIGxheW91dCBjb21wdXRhdGlvbiBvdXRzaWRlIG9mIHRoZSByZW5kZXIgbWV0aG9kLlxuICAgICAgaWYgKF90aGlzLmRpc3BsYXlOb2RlKSB7XG4gICAgICAgIF90aGlzLmRpc3BsYXlXaWR0aCA9IF90aGlzLmRpc3BsYXlOb2RlLmNsaWVudFdpZHRoO1xuICAgICAgfVxuICAgIH0sIF90aGlzLnVwZGF0ZSA9IF90aGlzLmlzT3BlbkNvbnRyb2xsZWQgPyBmdW5jdGlvbiAoX3JlZjIpIHtcbiAgICAgIHZhciBldmVudCA9IF9yZWYyLmV2ZW50LFxuICAgICAgICAgIG9wZW4gPSBfcmVmMi5vcGVuO1xuXG4gICAgICBpZiAob3Blbikge1xuICAgICAgICBfdGhpcy5wcm9wcy5vbk9wZW4oZXZlbnQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX3RoaXMucHJvcHMub25DbG9zZShldmVudCk7XG4gICAgICB9XG4gICAgfSA6IGZ1bmN0aW9uIChfcmVmMykge1xuICAgICAgdmFyIG9wZW4gPSBfcmVmMy5vcGVuO1xuICAgICAgcmV0dXJuIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgb3Blbjogb3BlblxuICAgICAgfSk7XG4gICAgfSwgX3RoaXMuaGFuZGxlQ2xpY2sgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIC8vIE9wZW5pbmcgdGhlIG1lbnUgaXMgZ29pbmcgdG8gYmx1ciB0aGUuIEl0IHdpbGwgYmUgZm9jdXNlZCBiYWNrIHdoZW4gY2xvc2VkLlxuICAgICAgX3RoaXMuaWdub3JlTmV4dEJsdXIgPSB0cnVlO1xuXG4gICAgICBfdGhpcy51cGRhdGUoe1xuICAgICAgICBvcGVuOiB0cnVlLFxuICAgICAgICBldmVudDogZXZlbnRcbiAgICAgIH0pO1xuICAgIH0sIF90aGlzLmhhbmRsZUNsb3NlID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBfdGhpcy51cGRhdGUoe1xuICAgICAgICBvcGVuOiBmYWxzZSxcbiAgICAgICAgZXZlbnQ6IGV2ZW50XG4gICAgICB9KTtcbiAgICB9LCBfdGhpcy5oYW5kbGVJdGVtQ2xpY2sgPSBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgaWYgKCFfdGhpcy5wcm9wcy5tdWx0aXBsZSkge1xuICAgICAgICAgIF90aGlzLnVwZGF0ZSh7XG4gICAgICAgICAgICBvcGVuOiBmYWxzZSxcbiAgICAgICAgICAgIGV2ZW50OiBldmVudFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIF90aGlzJHByb3BzID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgICBvbkNoYW5nZSA9IF90aGlzJHByb3BzLm9uQ2hhbmdlLFxuICAgICAgICAgICAgbmFtZSA9IF90aGlzJHByb3BzLm5hbWU7XG5cbiAgICAgICAgaWYgKG9uQ2hhbmdlKSB7XG4gICAgICAgICAgdmFyIHZhbHVlO1xuICAgICAgICAgIHZhciB0YXJnZXQ7XG5cbiAgICAgICAgICBpZiAoZXZlbnQudGFyZ2V0KSB7XG4gICAgICAgICAgICB0YXJnZXQgPSBldmVudC50YXJnZXQ7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKF90aGlzLnByb3BzLm11bHRpcGxlKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IEFycmF5LmlzQXJyYXkoX3RoaXMucHJvcHMudmFsdWUpID8gKDAsIF90b0NvbnN1bWFibGVBcnJheTIuZGVmYXVsdCkoX3RoaXMucHJvcHMudmFsdWUpIDogW107XG4gICAgICAgICAgICB2YXIgaXRlbUluZGV4ID0gdmFsdWUuaW5kZXhPZihjaGlsZC5wcm9wcy52YWx1ZSk7XG5cbiAgICAgICAgICAgIGlmIChpdGVtSW5kZXggPT09IC0xKSB7XG4gICAgICAgICAgICAgIHZhbHVlLnB1c2goY2hpbGQucHJvcHMudmFsdWUpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdmFsdWUuc3BsaWNlKGl0ZW1JbmRleCwgMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhbHVlID0gY2hpbGQucHJvcHMudmFsdWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZXZlbnQucGVyc2lzdCgpO1xuICAgICAgICAgIGV2ZW50LnRhcmdldCA9ICgwLCBfb2JqZWN0U3ByZWFkMi5kZWZhdWx0KSh7fSwgdGFyZ2V0LCB7XG4gICAgICAgICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICAgICAgICBuYW1lOiBuYW1lXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgb25DaGFuZ2UoZXZlbnQsIGNoaWxkKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9LCBfdGhpcy5oYW5kbGVCbHVyID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBpZiAoX3RoaXMuaWdub3JlTmV4dEJsdXIgPT09IHRydWUpIHtcbiAgICAgICAgLy8gVGhlIHBhcmVudCBjb21wb25lbnRzIGFyZSByZWx5aW5nIG9uIHRoZSBidWJibGluZyBvZiB0aGUgZXZlbnQuXG4gICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICBfdGhpcy5pZ25vcmVOZXh0Qmx1ciA9IGZhbHNlO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChfdGhpcy5wcm9wcy5vbkJsdXIpIHtcbiAgICAgICAgX3RoaXMucHJvcHMub25CbHVyKGV2ZW50KTtcbiAgICAgIH1cbiAgICB9LCBfdGhpcy5oYW5kbGVLZXlEb3duID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBpZiAoX3RoaXMucHJvcHMucmVhZE9ubHkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoWydzcGFjZScsICd1cCcsICdkb3duJ10uaW5kZXhPZigoMCwgX2tleWNvZGUuZGVmYXVsdCkoZXZlbnQpKSAhPT0gLTEpIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTsgLy8gT3BlbmluZyB0aGUgbWVudSBpcyBnb2luZyB0byBibHVyIHRoZS4gSXQgd2lsbCBiZSBmb2N1c2VkIGJhY2sgd2hlbiBjbG9zZWQuXG5cbiAgICAgICAgX3RoaXMuaWdub3JlTmV4dEJsdXIgPSB0cnVlO1xuXG4gICAgICAgIF90aGlzLnVwZGF0ZSh7XG4gICAgICAgICAgb3BlbjogdHJ1ZSxcbiAgICAgICAgICBldmVudDogZXZlbnRcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSwgX3RoaXMuaGFuZGxlRGlzcGxheVJlZiA9IGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICBfdGhpcy5kaXNwbGF5Tm9kZSA9IG5vZGU7XG5cbiAgICAgIF90aGlzLnVwZGF0ZURpc3BsYXlXaWR0aCgpO1xuICAgIH0sIF90aGlzLmhhbmRsZUlucHV0UmVmID0gZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgIHZhciBpbnB1dFJlZiA9IF90aGlzLnByb3BzLmlucHV0UmVmO1xuXG4gICAgICBpZiAoIWlucHV0UmVmKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIG5vZGVQcm94eSA9IHtcbiAgICAgICAgbm9kZTogbm9kZSxcbiAgICAgICAgLy8gQnkgcGFzcyB0aGUgbmF0aXZlIGlucHV0IGFzIHdlIGV4cG9zZSBhIHJpY2ggb2JqZWN0IChhcnJheSkuXG4gICAgICAgIHZhbHVlOiBfdGhpcy5wcm9wcy52YWx1ZVxuICAgICAgfTtcblxuICAgICAgaWYgKHR5cGVvZiBpbnB1dFJlZiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBpbnB1dFJlZihub2RlUHJveHkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaW5wdXRSZWYuY3VycmVudCA9IG5vZGVQcm94eTtcbiAgICAgIH1cbiAgICB9LCBfdGVtcCkpO1xuICB9XG5cbiAgKDAsIF9jcmVhdGVDbGFzczIuZGVmYXVsdCkoU2VsZWN0SW5wdXQsIFt7XG4gICAga2V5OiBcImNvbXBvbmVudERpZE1vdW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgaWYgKHRoaXMuaXNPcGVuQ29udHJvbGxlZCAmJiB0aGlzLnByb3BzLm9wZW4pIHtcbiAgICAgICAgLy8gRm9jdXMgdGhlIGRpc3BsYXkgbm9kZSBzbyB0aGUgZm9jdXMgaXMgcmVzdG9yZWQgb24gdGhpcyBlbGVtZW50IG9uY2VcbiAgICAgICAgLy8gdGhlIG1lbnUgaXMgY2xvc2VkLlxuICAgICAgICB0aGlzLmRpc3BsYXlOb2RlLmZvY3VzKCk7IC8vIFJlcmVuZGVyIHdpdGggdGhlIHJlc29sdmUgYGRpc3BsYXlOb2RlYCByZWZlcmVuY2UuXG5cbiAgICAgICAgdGhpcy5mb3JjZVVwZGF0ZSgpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5wcm9wcy5hdXRvRm9jdXMpIHtcbiAgICAgICAgdGhpcy5kaXNwbGF5Tm9kZS5mb2N1cygpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJzaG91bGRDb21wb25lbnRVcGRhdGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2hvdWxkQ29tcG9uZW50VXBkYXRlKCkge1xuICAgICAgdGhpcy51cGRhdGVEaXNwbGF5V2lkdGgoKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGF1dG9XaWR0aCA9IF9wcm9wcy5hdXRvV2lkdGgsXG4gICAgICAgICAgY2hpbGRyZW4gPSBfcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgICAgY2xhc3NlcyA9IF9wcm9wcy5jbGFzc2VzLFxuICAgICAgICAgIGNsYXNzTmFtZSA9IF9wcm9wcy5jbGFzc05hbWUsXG4gICAgICAgICAgZGlzYWJsZWQgPSBfcHJvcHMuZGlzYWJsZWQsXG4gICAgICAgICAgZGlzcGxheUVtcHR5ID0gX3Byb3BzLmRpc3BsYXlFbXB0eSxcbiAgICAgICAgICBJY29uQ29tcG9uZW50ID0gX3Byb3BzLkljb25Db21wb25lbnQsXG4gICAgICAgICAgaW5wdXRSZWYgPSBfcHJvcHMuaW5wdXRSZWYsXG4gICAgICAgICAgX3Byb3BzJE1lbnVQcm9wcyA9IF9wcm9wcy5NZW51UHJvcHMsXG4gICAgICAgICAgTWVudVByb3BzID0gX3Byb3BzJE1lbnVQcm9wcyA9PT0gdm9pZCAwID8ge30gOiBfcHJvcHMkTWVudVByb3BzLFxuICAgICAgICAgIG11bHRpcGxlID0gX3Byb3BzLm11bHRpcGxlLFxuICAgICAgICAgIG5hbWUgPSBfcHJvcHMubmFtZSxcbiAgICAgICAgICBvbkJsdXIgPSBfcHJvcHMub25CbHVyLFxuICAgICAgICAgIG9uQ2hhbmdlID0gX3Byb3BzLm9uQ2hhbmdlLFxuICAgICAgICAgIG9uQ2xvc2UgPSBfcHJvcHMub25DbG9zZSxcbiAgICAgICAgICBvbkZvY3VzID0gX3Byb3BzLm9uRm9jdXMsXG4gICAgICAgICAgb25PcGVuID0gX3Byb3BzLm9uT3BlbixcbiAgICAgICAgICBvcGVuUHJvcCA9IF9wcm9wcy5vcGVuLFxuICAgICAgICAgIHJlYWRPbmx5ID0gX3Byb3BzLnJlYWRPbmx5LFxuICAgICAgICAgIHJlbmRlclZhbHVlID0gX3Byb3BzLnJlbmRlclZhbHVlLFxuICAgICAgICAgIFNlbGVjdERpc3BsYXlQcm9wcyA9IF9wcm9wcy5TZWxlY3REaXNwbGF5UHJvcHMsXG4gICAgICAgICAgdGFiSW5kZXhQcm9wID0gX3Byb3BzLnRhYkluZGV4LFxuICAgICAgICAgIF9wcm9wcyR0eXBlID0gX3Byb3BzLnR5cGUsXG4gICAgICAgICAgdHlwZSA9IF9wcm9wcyR0eXBlID09PSB2b2lkIDAgPyAnaGlkZGVuJyA6IF9wcm9wcyR0eXBlLFxuICAgICAgICAgIHZhbHVlID0gX3Byb3BzLnZhbHVlLFxuICAgICAgICAgIG90aGVyID0gKDAsIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIuZGVmYXVsdCkoX3Byb3BzLCBbXCJhdXRvV2lkdGhcIiwgXCJjaGlsZHJlblwiLCBcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJkaXNhYmxlZFwiLCBcImRpc3BsYXlFbXB0eVwiLCBcIkljb25Db21wb25lbnRcIiwgXCJpbnB1dFJlZlwiLCBcIk1lbnVQcm9wc1wiLCBcIm11bHRpcGxlXCIsIFwibmFtZVwiLCBcIm9uQmx1clwiLCBcIm9uQ2hhbmdlXCIsIFwib25DbG9zZVwiLCBcIm9uRm9jdXNcIiwgXCJvbk9wZW5cIiwgXCJvcGVuXCIsIFwicmVhZE9ubHlcIiwgXCJyZW5kZXJWYWx1ZVwiLCBcIlNlbGVjdERpc3BsYXlQcm9wc1wiLCBcInRhYkluZGV4XCIsIFwidHlwZVwiLCBcInZhbHVlXCJdKTtcbiAgICAgIHZhciBvcGVuID0gdGhpcy5pc09wZW5Db250cm9sbGVkICYmIHRoaXMuZGlzcGxheU5vZGUgPyBvcGVuUHJvcCA6IHRoaXMuc3RhdGUub3BlbjtcbiAgICAgIHZhciBkaXNwbGF5O1xuICAgICAgdmFyIGRpc3BsYXlTaW5nbGUgPSAnJztcbiAgICAgIHZhciBkaXNwbGF5TXVsdGlwbGUgPSBbXTtcbiAgICAgIHZhciBjb21wdXRlRGlzcGxheSA9IGZhbHNlOyAvLyBObyBuZWVkIHRvIGRpc3BsYXkgYW55IHZhbHVlIGlmIHRoZSBmaWVsZCBpcyBlbXB0eS5cblxuICAgICAgaWYgKCgwLCBfSW5wdXQuaXNGaWxsZWQpKHRoaXMucHJvcHMpIHx8IGRpc3BsYXlFbXB0eSkge1xuICAgICAgICBpZiAocmVuZGVyVmFsdWUpIHtcbiAgICAgICAgICBkaXNwbGF5ID0gcmVuZGVyVmFsdWUodmFsdWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbXB1dGVEaXNwbGF5ID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB2YXIgaXRlbXMgPSBfcmVhY3QuZGVmYXVsdC5DaGlsZHJlbi5tYXAoY2hpbGRyZW4sIGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICBpZiAoIV9yZWFjdC5kZWZhdWx0LmlzVmFsaWRFbGVtZW50KGNoaWxkKSkge1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHNlbGVjdGVkO1xuXG4gICAgICAgIGlmIChtdWx0aXBsZSkge1xuICAgICAgICAgIGlmICghQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTWF0ZXJpYWwtVUk6IHRoZSBgdmFsdWVgIHByb3BlcnR5IG11c3QgYmUgYW4gYXJyYXkgJyArICd3aGVuIHVzaW5nIHRoZSBgU2VsZWN0YCBjb21wb25lbnQgd2l0aCBgbXVsdGlwbGVgLicpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHNlbGVjdGVkID0gdmFsdWUuaW5kZXhPZihjaGlsZC5wcm9wcy52YWx1ZSkgIT09IC0xO1xuXG4gICAgICAgICAgaWYgKHNlbGVjdGVkICYmIGNvbXB1dGVEaXNwbGF5KSB7XG4gICAgICAgICAgICBkaXNwbGF5TXVsdGlwbGUucHVzaChjaGlsZC5wcm9wcy5jaGlsZHJlbik7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNlbGVjdGVkID0gdmFsdWUgPT09IGNoaWxkLnByb3BzLnZhbHVlO1xuXG4gICAgICAgICAgaWYgKHNlbGVjdGVkICYmIGNvbXB1dGVEaXNwbGF5KSB7XG4gICAgICAgICAgICBkaXNwbGF5U2luZ2xlID0gY2hpbGQucHJvcHMuY2hpbGRyZW47XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNsb25lRWxlbWVudChjaGlsZCwge1xuICAgICAgICAgIG9uQ2xpY2s6IF90aGlzMi5oYW5kbGVJdGVtQ2xpY2soY2hpbGQpLFxuICAgICAgICAgIHJvbGU6ICdvcHRpb24nLFxuICAgICAgICAgIHNlbGVjdGVkOiBzZWxlY3RlZCxcbiAgICAgICAgICB2YWx1ZTogdW5kZWZpbmVkLFxuICAgICAgICAgIC8vIFRoZSB2YWx1ZSBpcyBtb3N0IGxpa2VseSBub3QgYSB2YWxpZCBIVE1MIGF0dHJpYnV0ZS5cbiAgICAgICAgICAnZGF0YS12YWx1ZSc6IGNoaWxkLnByb3BzLnZhbHVlIC8vIEluc3RlYWQsIHdlIHByb3ZpZGUgaXQgYXMgYSBkYXRhIGF0dHJpYnV0ZS5cblxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoY29tcHV0ZURpc3BsYXkpIHtcbiAgICAgICAgZGlzcGxheSA9IG11bHRpcGxlID8gZGlzcGxheU11bHRpcGxlLmpvaW4oJywgJykgOiBkaXNwbGF5U2luZ2xlO1xuICAgICAgfVxuXG4gICAgICB2YXIgTWVudU1pbldpZHRoID0gdGhpcy5kaXNwbGF5Tm9kZSAmJiAhYXV0b1dpZHRoID8gdGhpcy5kaXNwbGF5V2lkdGggOiB1bmRlZmluZWQ7XG4gICAgICB2YXIgdGFiSW5kZXg7XG5cbiAgICAgIGlmICh0eXBlb2YgdGFiSW5kZXhQcm9wICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICB0YWJJbmRleCA9IHRhYkluZGV4UHJvcDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRhYkluZGV4ID0gZGlzYWJsZWQgPyBudWxsIDogMDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgICBjbGFzc05hbWU6IGNsYXNzZXMucm9vdFxuICAgICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImRpdlwiLCAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHtcbiAgICAgICAgY2xhc3NOYW1lOiAoMCwgX2NsYXNzbmFtZXMuZGVmYXVsdCkoY2xhc3Nlcy5zZWxlY3QsIGNsYXNzZXMuc2VsZWN0TWVudSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoe30sIGNsYXNzZXMuZGlzYWJsZWQsIGRpc2FibGVkKSwgY2xhc3NOYW1lKSxcbiAgICAgICAgcmVmOiB0aGlzLmhhbmRsZURpc3BsYXlSZWYsXG4gICAgICAgIFwiYXJpYS1wcmVzc2VkXCI6IG9wZW4gPyAndHJ1ZScgOiAnZmFsc2UnLFxuICAgICAgICB0YWJJbmRleDogdGFiSW5kZXgsXG4gICAgICAgIHJvbGU6IFwiYnV0dG9uXCIsXG4gICAgICAgIFwiYXJpYS1vd25zXCI6IG9wZW4gPyBcIm1lbnUtXCIuY29uY2F0KG5hbWUgfHwgJycpIDogbnVsbCxcbiAgICAgICAgXCJhcmlhLWhhc3BvcHVwXCI6IFwidHJ1ZVwiLFxuICAgICAgICBvbktleURvd246IHRoaXMuaGFuZGxlS2V5RG93bixcbiAgICAgICAgb25CbHVyOiB0aGlzLmhhbmRsZUJsdXIsXG4gICAgICAgIG9uQ2xpY2s6IGRpc2FibGVkIHx8IHJlYWRPbmx5ID8gbnVsbCA6IHRoaXMuaGFuZGxlQ2xpY2ssXG4gICAgICAgIG9uRm9jdXM6IG9uRm9jdXNcbiAgICAgIH0sIFNlbGVjdERpc3BsYXlQcm9wcyksIGRpc3BsYXkgfHwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcInNwYW5cIiwge1xuICAgICAgICBkYW5nZXJvdXNseVNldElubmVySFRNTDoge1xuICAgICAgICAgIF9faHRtbDogJyYjODIwMzsnXG4gICAgICAgIH1cbiAgICAgIH0pKSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImlucHV0XCIsICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe1xuICAgICAgICB2YWx1ZTogQXJyYXkuaXNBcnJheSh2YWx1ZSkgPyB2YWx1ZS5qb2luKCcsJykgOiB2YWx1ZSxcbiAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgcmVhZE9ubHk6IHJlYWRPbmx5LFxuICAgICAgICByZWY6IHRoaXMuaGFuZGxlSW5wdXRSZWYsXG4gICAgICAgIHR5cGU6IHR5cGVcbiAgICAgIH0sIG90aGVyKSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoSWNvbkNvbXBvbmVudCwge1xuICAgICAgICBjbGFzc05hbWU6IGNsYXNzZXMuaWNvblxuICAgICAgfSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX01lbnUuZGVmYXVsdCwgKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7XG4gICAgICAgIGlkOiBcIm1lbnUtXCIuY29uY2F0KG5hbWUgfHwgJycpLFxuICAgICAgICBhbmNob3JFbDogdGhpcy5kaXNwbGF5Tm9kZSxcbiAgICAgICAgb3Blbjogb3BlbixcbiAgICAgICAgb25DbG9zZTogdGhpcy5oYW5kbGVDbG9zZVxuICAgICAgfSwgTWVudVByb3BzLCB7XG4gICAgICAgIE1lbnVMaXN0UHJvcHM6ICgwLCBfb2JqZWN0U3ByZWFkMi5kZWZhdWx0KSh7XG4gICAgICAgICAgcm9sZTogJ2xpc3Rib3gnXG4gICAgICAgIH0sIE1lbnVQcm9wcy5NZW51TGlzdFByb3BzKSxcbiAgICAgICAgUGFwZXJQcm9wczogKDAsIF9vYmplY3RTcHJlYWQyLmRlZmF1bHQpKHt9LCBNZW51UHJvcHMuUGFwZXJQcm9wcywge1xuICAgICAgICAgIHN0eWxlOiAoMCwgX29iamVjdFNwcmVhZDIuZGVmYXVsdCkoe1xuICAgICAgICAgICAgbWluV2lkdGg6IE1lbnVNaW5XaWR0aFxuICAgICAgICAgIH0sIE1lbnVQcm9wcy5QYXBlclByb3BzICE9IG51bGwgPyBNZW51UHJvcHMuUGFwZXJQcm9wcy5zdHlsZSA6IG51bGwpXG4gICAgICAgIH0pXG4gICAgICB9KSwgaXRlbXMpKTtcbiAgICB9XG4gIH1dKTtcbiAgcmV0dXJuIFNlbGVjdElucHV0O1xufShfcmVhY3QuZGVmYXVsdC5Db21wb25lbnQpO1xuXG5TZWxlY3RJbnB1dC5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBhdXRvRm9jdXM6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiB0cnVlLCB0aGUgd2lkdGggb2YgdGhlIHBvcG92ZXIgd2lsbCBhdXRvbWF0aWNhbGx5IGJlIHNldCBhY2NvcmRpbmcgdG8gdGhlIGl0ZW1zIGluc2lkZSB0aGVcbiAgICogbWVudSwgb3RoZXJ3aXNlIGl0IHdpbGwgYmUgYXQgbGVhc3QgdGhlIHdpZHRoIG9mIHRoZSBzZWxlY3QgaW5wdXQuXG4gICAqL1xuICBhdXRvV2lkdGg6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgb3B0aW9uIGVsZW1lbnRzIHRvIHBvcHVsYXRlIHRoZSBzZWxlY3Qgd2l0aC5cbiAgICogQ2FuIGJlIHNvbWUgYDxNZW51SXRlbT5gIGVsZW1lbnRzLlxuICAgKi9cbiAgY2hpbGRyZW46IF9wcm9wVHlwZXMuZGVmYXVsdC5ub2RlLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2Nzcy1hcGkpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIFRoZSBDU1MgY2xhc3MgbmFtZSBvZiB0aGUgc2VsZWN0IGVsZW1lbnQuXG4gICAqL1xuICBjbGFzc05hbWU6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIHNlbGVjdCB3aWxsIGJlIGRpc2FibGVkLlxuICAgKi9cbiAgZGlzYWJsZWQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBzZWxlY3RlZCBpdGVtIGlzIGRpc3BsYXllZCBldmVuIGlmIGl0cyB2YWx1ZSBpcyBlbXB0eS5cbiAgICovXG4gIGRpc3BsYXlFbXB0eTogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSBpY29uIHRoYXQgZGlzcGxheXMgdGhlIGFycm93LlxuICAgKi9cbiAgSWNvbkNvbXBvbmVudDogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZywgX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmNdKSxcblxuICAvKipcbiAgICogVXNlIHRoYXQgcHJvcGVydHkgdG8gcGFzcyBhIHJlZiBjYWxsYmFjayB0byB0aGUgbmF0aXZlIHNlbGVjdCBlbGVtZW50LlxuICAgKi9cbiAgaW5wdXRSZWY6IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLCBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0XSksXG5cbiAgLyoqXG4gICAqIFByb3BlcnRpZXMgYXBwbGllZCB0byB0aGUgYE1lbnVgIGVsZW1lbnQuXG4gICAqL1xuICBNZW51UHJvcHM6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QsXG5cbiAgLyoqXG4gICAqIElmIHRydWUsIGB2YWx1ZWAgbXVzdCBiZSBhbiBhcnJheSBhbmQgdGhlIG1lbnUgd2lsbCBzdXBwb3J0IG11bHRpcGxlIHNlbGVjdGlvbnMuXG4gICAqL1xuICBtdWx0aXBsZTogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIE5hbWUgYXR0cmlidXRlIG9mIHRoZSBgc2VsZWN0YCBvciBoaWRkZW4gYGlucHV0YCBlbGVtZW50LlxuICAgKi9cbiAgbmFtZTogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25CbHVyOiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZnVuY3Rpb24gZmlyZWQgd2hlbiBhIG1lbnUgaXRlbSBpcyBzZWxlY3RlZC5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGV2ZW50IFRoZSBldmVudCBzb3VyY2Ugb2YgdGhlIGNhbGxiYWNrLlxuICAgKiBZb3UgY2FuIHB1bGwgb3V0IHRoZSBuZXcgdmFsdWUgYnkgYWNjZXNzaW5nIGBldmVudC50YXJnZXQudmFsdWVgLlxuICAgKiBAcGFyYW0ge29iamVjdH0gW2NoaWxkXSBUaGUgcmVhY3QgZWxlbWVudCB0aGF0IHdhcyBzZWxlY3RlZC5cbiAgICovXG4gIG9uQ2hhbmdlOiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgY29tcG9uZW50IHJlcXVlc3RzIHRvIGJlIGNsb3NlZC5cbiAgICogVXNlIGluIGNvbnRyb2xsZWQgbW9kZSAoc2VlIG9wZW4pLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gZXZlbnQgVGhlIGV2ZW50IHNvdXJjZSBvZiB0aGUgY2FsbGJhY2tcbiAgICovXG4gIG9uQ2xvc2U6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkZvY3VzOiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgY29tcG9uZW50IHJlcXVlc3RzIHRvIGJlIG9wZW5lZC5cbiAgICogVXNlIGluIGNvbnRyb2xsZWQgbW9kZSAoc2VlIG9wZW4pLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gZXZlbnQgVGhlIGV2ZW50IHNvdXJjZSBvZiB0aGUgY2FsbGJhY2tcbiAgICovXG4gIG9uT3BlbjogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIENvbnRyb2wgYHNlbGVjdGAgb3BlbiBzdGF0ZS5cbiAgICovXG4gIG9wZW46IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICByZWFkT25seTogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIFJlbmRlciB0aGUgc2VsZWN0ZWQgdmFsdWUuXG4gICAqXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIGB2YWx1ZWAgcHJvdmlkZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogQHJldHVybnMge1JlYWN0RWxlbWVudH1cbiAgICovXG4gIHJlbmRlclZhbHVlOiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYyxcblxuICAvKipcbiAgICogUHJvcGVydGllcyBhcHBsaWVkIHRvIHRoZSBjbGlja2FibGUgZGl2IGVsZW1lbnQuXG4gICAqL1xuICBTZWxlY3REaXNwbGF5UHJvcHM6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHRhYkluZGV4OiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzLmRlZmF1bHQubnVtYmVyLCBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nXSksXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHR5cGU6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBpbnB1dCB2YWx1ZS5cbiAgICovXG4gIHZhbHVlOiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLCBfcHJvcFR5cGVzLmRlZmF1bHQubnVtYmVyLCBfcHJvcFR5cGVzLmRlZmF1bHQuYXJyYXlPZihfcHJvcFR5cGVzLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLCBfcHJvcFR5cGVzLmRlZmF1bHQubnVtYmVyXSkpXSkuaXNSZXF1aXJlZFxufSA6IHt9O1xudmFyIF9kZWZhdWx0ID0gU2VsZWN0SW5wdXQ7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuc3R5bGVzID0gdm9pZCAwO1xuXG52YXIgX29iamVjdFNwcmVhZDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vb2JqZWN0U3ByZWFkXCIpKTtcblxudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIikpO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xuXG52YXIgX1NlbGVjdElucHV0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9TZWxlY3RJbnB1dFwiKSk7XG5cbnZhciBfd2l0aFN0eWxlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3N0eWxlcy93aXRoU3R5bGVzXCIpKTtcblxudmFyIF9BcnJvd0Ryb3BEb3duID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vaW50ZXJuYWwvc3ZnLWljb25zL0Fycm93RHJvcERvd25cIikpO1xuXG52YXIgX0lucHV0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vSW5wdXRcIikpO1xuXG52YXIgX05hdGl2ZVNlbGVjdCA9IHJlcXVpcmUoXCIuLi9OYXRpdmVTZWxlY3QvTmF0aXZlU2VsZWN0XCIpO1xuXG52YXIgX05hdGl2ZVNlbGVjdElucHV0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vTmF0aXZlU2VsZWN0L05hdGl2ZVNlbGVjdElucHV0XCIpKTtcblxuLy8gQGluaGVyaXRlZENvbXBvbmVudCBJbnB1dFxudmFyIHN0eWxlcyA9IF9OYXRpdmVTZWxlY3Quc3R5bGVzO1xuZXhwb3J0cy5zdHlsZXMgPSBzdHlsZXM7XG5cbmZ1bmN0aW9uIFNlbGVjdChwcm9wcykge1xuICB2YXIgYXV0b1dpZHRoID0gcHJvcHMuYXV0b1dpZHRoLFxuICAgICAgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgZGlzcGxheUVtcHR5ID0gcHJvcHMuZGlzcGxheUVtcHR5LFxuICAgICAgSWNvbkNvbXBvbmVudCA9IHByb3BzLkljb25Db21wb25lbnQsXG4gICAgICBpbnB1dCA9IHByb3BzLmlucHV0LFxuICAgICAgaW5wdXRQcm9wcyA9IHByb3BzLmlucHV0UHJvcHMsXG4gICAgICBNZW51UHJvcHMgPSBwcm9wcy5NZW51UHJvcHMsXG4gICAgICBtdWx0aXBsZSA9IHByb3BzLm11bHRpcGxlLFxuICAgICAgbmF0aXZlID0gcHJvcHMubmF0aXZlLFxuICAgICAgb25DbG9zZSA9IHByb3BzLm9uQ2xvc2UsXG4gICAgICBvbk9wZW4gPSBwcm9wcy5vbk9wZW4sXG4gICAgICBvcGVuID0gcHJvcHMub3BlbixcbiAgICAgIHJlbmRlclZhbHVlID0gcHJvcHMucmVuZGVyVmFsdWUsXG4gICAgICBTZWxlY3REaXNwbGF5UHJvcHMgPSBwcm9wcy5TZWxlY3REaXNwbGF5UHJvcHMsXG4gICAgICBvdGhlciA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyLmRlZmF1bHQpKHByb3BzLCBbXCJhdXRvV2lkdGhcIiwgXCJjaGlsZHJlblwiLCBcImNsYXNzZXNcIiwgXCJkaXNwbGF5RW1wdHlcIiwgXCJJY29uQ29tcG9uZW50XCIsIFwiaW5wdXRcIiwgXCJpbnB1dFByb3BzXCIsIFwiTWVudVByb3BzXCIsIFwibXVsdGlwbGVcIiwgXCJuYXRpdmVcIiwgXCJvbkNsb3NlXCIsIFwib25PcGVuXCIsIFwib3BlblwiLCBcInJlbmRlclZhbHVlXCIsIFwiU2VsZWN0RGlzcGxheVByb3BzXCJdKTtcbiAgdmFyIGlucHV0Q29tcG9uZW50ID0gbmF0aXZlID8gX05hdGl2ZVNlbGVjdElucHV0LmRlZmF1bHQgOiBfU2VsZWN0SW5wdXQuZGVmYXVsdDtcbiAgdmFyIGlucHV0TmF0aXZlUHJvcHMgPSB7XG4gICAgY2hpbGRyZW46IGNoaWxkcmVuLFxuICAgIGNsYXNzZXM6IGNsYXNzZXMsXG4gICAgSWNvbkNvbXBvbmVudDogSWNvbkNvbXBvbmVudCxcbiAgICB0eXBlOiB1bmRlZmluZWQgLy8gV2UgcmVuZGVyIGEgc2VsZWN0LiBXZSBjYW4gaWdub3JlIHRoZSB0eXBlIHByb3ZpZGVkIGJ5IHRoZSBgSW5wdXRgLlxuXG4gIH07XG4gIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jbG9uZUVsZW1lbnQoaW5wdXQsICgwLCBfb2JqZWN0U3ByZWFkMi5kZWZhdWx0KSh7XG4gICAgLy8gTW9zdCBvZiB0aGUgbG9naWMgaXMgaW1wbGVtZW50ZWQgaW4gYFNlbGVjdElucHV0YC5cbiAgICAvLyBUaGUgYFNlbGVjdGAgY29tcG9uZW50IGlzIGEgc2ltcGxlIEFQSSB3cmFwcGVyIHRvIGV4cG9zZSBzb21ldGhpbmcgYmV0dGVyIHRvIHBsYXkgd2l0aC5cbiAgICBpbnB1dENvbXBvbmVudDogaW5wdXRDb21wb25lbnQsXG4gICAgaW5wdXRQcm9wczogKDAsIF9vYmplY3RTcHJlYWQyLmRlZmF1bHQpKHt9LCBpbnB1dE5hdGl2ZVByb3BzLCBuYXRpdmUgPyB7fSA6IHtcbiAgICAgIGF1dG9XaWR0aDogYXV0b1dpZHRoLFxuICAgICAgY2hpbGRyZW46IGNoaWxkcmVuLFxuICAgICAgY2xhc3NlczogY2xhc3NlcyxcbiAgICAgIGRpc3BsYXlFbXB0eTogZGlzcGxheUVtcHR5LFxuICAgICAgTWVudVByb3BzOiBNZW51UHJvcHMsXG4gICAgICBtdWx0aXBsZTogbXVsdGlwbGUsXG4gICAgICBvbkNsb3NlOiBvbkNsb3NlLFxuICAgICAgb25PcGVuOiBvbk9wZW4sXG4gICAgICBvcGVuOiBvcGVuLFxuICAgICAgcmVuZGVyVmFsdWU6IHJlbmRlclZhbHVlLFxuICAgICAgU2VsZWN0RGlzcGxheVByb3BzOiBTZWxlY3REaXNwbGF5UHJvcHNcbiAgICB9LCBpbnB1dFByb3BzLCBpbnB1dCA/IGlucHV0LnByb3BzLmlucHV0UHJvcHMgOiB7fSlcbiAgfSwgb3RoZXIpKTtcbn1cblxuU2VsZWN0LnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqXG4gICAqIElmIHRydWUsIHRoZSB3aWR0aCBvZiB0aGUgcG9wb3ZlciB3aWxsIGF1dG9tYXRpY2FsbHkgYmUgc2V0IGFjY29yZGluZyB0byB0aGUgaXRlbXMgaW5zaWRlIHRoZVxuICAgKiBtZW51LCBvdGhlcndpc2UgaXQgd2lsbCBiZSBhdCBsZWFzdCB0aGUgd2lkdGggb2YgdGhlIHNlbGVjdCBpbnB1dC5cbiAgICovXG4gIGF1dG9XaWR0aDogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSBvcHRpb24gZWxlbWVudHMgdG8gcG9wdWxhdGUgdGhlIHNlbGVjdCB3aXRoLlxuICAgKiBDYW4gYmUgc29tZSBgTWVudUl0ZW1gIHdoZW4gYG5hdGl2ZWAgaXMgZmFsc2UgYW5kIGBvcHRpb25gIHdoZW4gYG5hdGl2ZWAgaXMgdHJ1ZS5cbiAgICovXG4gIGNoaWxkcmVuOiBfcHJvcFR5cGVzLmRlZmF1bHQubm9kZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MtYXBpKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBzZWxlY3RlZCBpdGVtIGlzIGRpc3BsYXllZCBldmVuIGlmIGl0cyB2YWx1ZSBpcyBlbXB0eS5cbiAgICogWW91IGNhbiBvbmx5IHVzZSBpdCB3aGVuIHRoZSBgbmF0aXZlYCBwcm9wZXJ0eSBpcyBgZmFsc2VgIChkZWZhdWx0KS5cbiAgICovXG4gIGRpc3BsYXlFbXB0eTogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSBpY29uIHRoYXQgZGlzcGxheXMgdGhlIGFycm93LlxuICAgKi9cbiAgSWNvbkNvbXBvbmVudDogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZywgX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmNdKSxcblxuICAvKipcbiAgICogQW4gYElucHV0YCBlbGVtZW50OyBkb2VzIG5vdCBoYXZlIHRvIGJlIGEgbWF0ZXJpYWwtdWkgc3BlY2lmaWMgYElucHV0YC5cbiAgICovXG4gIGlucHV0OiBfcHJvcFR5cGVzLmRlZmF1bHQuZWxlbWVudCxcblxuICAvKipcbiAgICogQXR0cmlidXRlcyBhcHBsaWVkIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqIFdoZW4gYG5hdGl2ZWAgaXMgYHRydWVgLCB0aGUgYXR0cmlidXRlcyBhcmUgYXBwbGllZCBvbiB0aGUgYHNlbGVjdGAgZWxlbWVudC5cbiAgICovXG4gIGlucHV0UHJvcHM6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QsXG5cbiAgLyoqXG4gICAqIFByb3BlcnRpZXMgYXBwbGllZCB0byB0aGUgYE1lbnVgIGVsZW1lbnQuXG4gICAqL1xuICBNZW51UHJvcHM6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QsXG5cbiAgLyoqXG4gICAqIElmIHRydWUsIGB2YWx1ZWAgbXVzdCBiZSBhbiBhcnJheSBhbmQgdGhlIG1lbnUgd2lsbCBzdXBwb3J0IG11bHRpcGxlIHNlbGVjdGlvbnMuXG4gICAqIFlvdSBjYW4gb25seSB1c2UgaXQgd2hlbiB0aGUgYG5hdGl2ZWAgcHJvcGVydHkgaXMgYGZhbHNlYCAoZGVmYXVsdCkuXG4gICAqL1xuICBtdWx0aXBsZTogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGNvbXBvbmVudCB3aWxsIGJlIHVzaW5nIGEgbmF0aXZlIGBzZWxlY3RgIGVsZW1lbnQuXG4gICAqL1xuICBuYXRpdmU6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmdW5jdGlvbiBmaXJlZCB3aGVuIGEgbWVudSBpdGVtIGlzIHNlbGVjdGVkLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gZXZlbnQgVGhlIGV2ZW50IHNvdXJjZSBvZiB0aGUgY2FsbGJhY2suXG4gICAqIFlvdSBjYW4gcHVsbCBvdXQgdGhlIG5ldyB2YWx1ZSBieSBhY2Nlc3NpbmcgYGV2ZW50LnRhcmdldC52YWx1ZWAuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBbY2hpbGRdIFRoZSByZWFjdCBlbGVtZW50IHRoYXQgd2FzIHNlbGVjdGVkIHdoZW4gYG5hdGl2ZWAgaXMgYGZhbHNlYCAoZGVmYXVsdCkuXG4gICAqL1xuICBvbkNoYW5nZTogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIGNvbXBvbmVudCByZXF1ZXN0cyB0byBiZSBjbG9zZWQuXG4gICAqIFVzZSBpbiBjb250cm9sbGVkIG1vZGUgKHNlZSBvcGVuKS5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGV2ZW50IFRoZSBldmVudCBzb3VyY2Ugb2YgdGhlIGNhbGxiYWNrXG4gICAqL1xuICBvbkNsb3NlOiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgY29tcG9uZW50IHJlcXVlc3RzIHRvIGJlIG9wZW5lZC5cbiAgICogVXNlIGluIGNvbnRyb2xsZWQgbW9kZSAoc2VlIG9wZW4pLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gZXZlbnQgVGhlIGV2ZW50IHNvdXJjZSBvZiB0aGUgY2FsbGJhY2tcbiAgICovXG4gIG9uT3BlbjogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIENvbnRyb2wgYHNlbGVjdGAgb3BlbiBzdGF0ZS5cbiAgICogWW91IGNhbiBvbmx5IHVzZSBpdCB3aGVuIHRoZSBgbmF0aXZlYCBwcm9wZXJ0eSBpcyBgZmFsc2VgIChkZWZhdWx0KS5cbiAgICovXG4gIG9wZW46IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBSZW5kZXIgdGhlIHNlbGVjdGVkIHZhbHVlLlxuICAgKiBZb3UgY2FuIG9ubHkgdXNlIGl0IHdoZW4gdGhlIGBuYXRpdmVgIHByb3BlcnR5IGlzIGBmYWxzZWAgKGRlZmF1bHQpLlxuICAgKlxuICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSBgdmFsdWVgIHByb3ZpZGVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIEByZXR1cm5zIHtSZWFjdEVsZW1lbnR9XG4gICAqL1xuICByZW5kZXJWYWx1ZTogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIFByb3BlcnRpZXMgYXBwbGllZCB0byB0aGUgY2xpY2thYmxlIGRpdiBlbGVtZW50LlxuICAgKi9cbiAgU2VsZWN0RGlzcGxheVByb3BzOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBUaGUgaW5wdXQgdmFsdWUuXG4gICAqIFRoaXMgcHJvcGVydHkgaXMgcmVxdWlyZWQgd2hlbiB0aGUgYG5hdGl2ZWAgcHJvcGVydHkgaXMgYGZhbHNlYCAoZGVmYXVsdCkuXG4gICAqL1xuICB2YWx1ZTogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZywgX3Byb3BUeXBlcy5kZWZhdWx0Lm51bWJlciwgX3Byb3BUeXBlcy5kZWZhdWx0LmFycmF5T2YoX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZywgX3Byb3BUeXBlcy5kZWZhdWx0Lm51bWJlcl0pKV0pXG59IDoge307XG5TZWxlY3QuZGVmYXVsdFByb3BzID0ge1xuICBhdXRvV2lkdGg6IGZhbHNlLFxuICBkaXNwbGF5RW1wdHk6IGZhbHNlLFxuICBJY29uQ29tcG9uZW50OiBfQXJyb3dEcm9wRG93bi5kZWZhdWx0LFxuICBpbnB1dDogX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfSW5wdXQuZGVmYXVsdCwgbnVsbCksXG4gIG11bHRpcGxlOiBmYWxzZSxcbiAgbmF0aXZlOiBmYWxzZVxufTtcblNlbGVjdC5tdWlOYW1lID0gJ1NlbGVjdCc7XG5cbnZhciBfZGVmYXVsdCA9ICgwLCBfd2l0aFN0eWxlcy5kZWZhdWx0KShfTmF0aXZlU2VsZWN0LnN0eWxlcywge1xuICBuYW1lOiAnTXVpU2VsZWN0J1xufSkoU2VsZWN0KTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfZXh0ZW5kczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vZXh0ZW5kc1wiKSk7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCIpKTtcblxudmFyIF9jbGFzc0NhbGxDaGVjazIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vY2xhc3NDYWxsQ2hlY2tcIikpO1xuXG52YXIgX2NyZWF0ZUNsYXNzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9jcmVhdGVDbGFzc1wiKSk7XG5cbnZhciBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vcG9zc2libGVDb25zdHJ1Y3RvclJldHVyblwiKSk7XG5cbnZhciBfaW5oZXJpdHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2luaGVyaXRzXCIpKTtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKTtcblxudmFyIF9Gb3JtR3JvdXAgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9Gb3JtR3JvdXBcIikpO1xuXG52YXIgX2hlbHBlcnMgPSByZXF1aXJlKFwiLi4vdXRpbHMvaGVscGVyc1wiKTtcblxuLy8gQGluaGVyaXRlZENvbXBvbmVudCBGb3JtR3JvdXBcbnZhciBSYWRpb0dyb3VwID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gICgwLCBfaW5oZXJpdHMyLmRlZmF1bHQpKFJhZGlvR3JvdXAsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFJhZGlvR3JvdXAoKSB7XG4gICAgdmFyIF9yZWY7XG5cbiAgICB2YXIgX3RlbXAsIF90aGlzO1xuXG4gICAgKDAsIF9jbGFzc0NhbGxDaGVjazIuZGVmYXVsdCkodGhpcywgUmFkaW9Hcm91cCk7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuICgwLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIuZGVmYXVsdCkoX3RoaXMsIChfdGVtcCA9IF90aGlzID0gKDAsIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMi5kZWZhdWx0KSh0aGlzLCAoX3JlZiA9IFJhZGlvR3JvdXAuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihSYWRpb0dyb3VwKSkuY2FsbC5hcHBseShfcmVmLCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzLnJhZGlvcyA9IFtdLCBfdGhpcy5mb2N1cyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICghX3RoaXMucmFkaW9zIHx8ICFfdGhpcy5yYWRpb3MubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIGZvY3VzUmFkaW9zID0gX3RoaXMucmFkaW9zLmZpbHRlcihmdW5jdGlvbiAobikge1xuICAgICAgICByZXR1cm4gIW4uZGlzYWJsZWQ7XG4gICAgICB9KTtcblxuICAgICAgaWYgKCFmb2N1c1JhZGlvcy5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgc2VsZWN0ZWRSYWRpbyA9ICgwLCBfaGVscGVycy5maW5kKShmb2N1c1JhZGlvcywgZnVuY3Rpb24gKG4pIHtcbiAgICAgICAgcmV0dXJuIG4uY2hlY2tlZDtcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoc2VsZWN0ZWRSYWRpbykge1xuICAgICAgICBzZWxlY3RlZFJhZGlvLmZvY3VzKCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgZm9jdXNSYWRpb3NbMF0uZm9jdXMoKTtcbiAgICB9LCBfdGhpcy5oYW5kbGVSYWRpb0NoYW5nZSA9IGZ1bmN0aW9uIChldmVudCwgY2hlY2tlZCkge1xuICAgICAgaWYgKGNoZWNrZWQgJiYgX3RoaXMucHJvcHMub25DaGFuZ2UpIHtcbiAgICAgICAgX3RoaXMucHJvcHMub25DaGFuZ2UoZXZlbnQsIGV2ZW50LnRhcmdldC52YWx1ZSk7XG4gICAgICB9XG4gICAgfSwgX3RlbXApKTtcbiAgfVxuXG4gICgwLCBfY3JlYXRlQ2xhc3MyLmRlZmF1bHQpKFJhZGlvR3JvdXAsIFt7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgY2hpbGRyZW4gPSBfcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgICAgbmFtZSA9IF9wcm9wcy5uYW1lLFxuICAgICAgICAgIHZhbHVlID0gX3Byb3BzLnZhbHVlLFxuICAgICAgICAgIG9uQ2hhbmdlID0gX3Byb3BzLm9uQ2hhbmdlLFxuICAgICAgICAgIG90aGVyID0gKDAsIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIuZGVmYXVsdCkoX3Byb3BzLCBbXCJjaGlsZHJlblwiLCBcIm5hbWVcIiwgXCJ2YWx1ZVwiLCBcIm9uQ2hhbmdlXCJdKTtcbiAgICAgIHRoaXMucmFkaW9zID0gW107XG4gICAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfRm9ybUdyb3VwLmRlZmF1bHQsICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe1xuICAgICAgICByb2xlOiBcInJhZGlvZ3JvdXBcIlxuICAgICAgfSwgb3RoZXIpLCBfcmVhY3QuZGVmYXVsdC5DaGlsZHJlbi5tYXAoY2hpbGRyZW4sIGZ1bmN0aW9uIChjaGlsZCwgaW5kZXgpIHtcbiAgICAgICAgaWYgKCFfcmVhY3QuZGVmYXVsdC5pc1ZhbGlkRWxlbWVudChjaGlsZCkpIHtcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jbG9uZUVsZW1lbnQoY2hpbGQsIHtcbiAgICAgICAgICBrZXk6IGluZGV4LFxuICAgICAgICAgIG5hbWU6IG5hbWUsXG4gICAgICAgICAgaW5wdXRSZWY6IGZ1bmN0aW9uIGlucHV0UmVmKG5vZGUpIHtcbiAgICAgICAgICAgIGlmIChub2RlKSB7XG4gICAgICAgICAgICAgIF90aGlzMi5yYWRpb3MucHVzaChub2RlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIGNoZWNrZWQ6IHZhbHVlID09PSBjaGlsZC5wcm9wcy52YWx1ZSxcbiAgICAgICAgICBvbkNoYW5nZTogKDAsIF9oZWxwZXJzLmNyZWF0ZUNoYWluZWRGdW5jdGlvbikoY2hpbGQucHJvcHMub25DaGFuZ2UsIF90aGlzMi5oYW5kbGVSYWRpb0NoYW5nZSlcbiAgICAgICAgfSk7XG4gICAgICB9KSk7XG4gICAgfVxuICB9XSk7XG4gIHJldHVybiBSYWRpb0dyb3VwO1xufShfcmVhY3QuZGVmYXVsdC5Db21wb25lbnQpO1xuXG5SYWRpb0dyb3VwLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogX3Byb3BUeXBlcy5kZWZhdWx0Lm5vZGUsXG5cbiAgLyoqXG4gICAqIFRoZSBuYW1lIHVzZWQgdG8gcmVmZXJlbmNlIHRoZSB2YWx1ZSBvZiB0aGUgY29udHJvbC5cbiAgICovXG4gIG5hbWU6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uQmx1cjogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gYSByYWRpbyBidXR0b24gaXMgc2VsZWN0ZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBldmVudCBUaGUgZXZlbnQgc291cmNlIG9mIHRoZSBjYWxsYmFjay5cbiAgICogWW91IGNhbiBwdWxsIG91dCB0aGUgbmV3IHZhbHVlIGJ5IGFjY2Vzc2luZyBgZXZlbnQudGFyZ2V0LnZhbHVlYC5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlIFRoZSBgdmFsdWVgIG9mIHRoZSBzZWxlY3RlZCByYWRpbyBidXR0b25cbiAgICovXG4gIG9uQ2hhbmdlOiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25LZXlEb3duOiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYyxcblxuICAvKipcbiAgICogVmFsdWUgb2YgdGhlIHNlbGVjdGVkIHJhZGlvIGJ1dHRvbi5cbiAgICovXG4gIHZhbHVlOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nXG59IDoge307XG52YXIgX2RlZmF1bHQgPSBSYWRpb0dyb3VwO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfcHVyZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlY29tcG9zZS9wdXJlXCIpKTtcblxudmFyIF9TdmdJY29uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vLi4vU3ZnSWNvblwiKSk7XG5cbnZhciBfcmVmID0gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICBkOiBcIk0xMiA3Yy0yLjc2IDAtNSAyLjI0LTUgNXMyLjI0IDUgNSA1IDUtMi4yNCA1LTUtMi4yNC01LTUtNXptMC01QzYuNDggMiAyIDYuNDggMiAxMnM0LjQ4IDEwIDEwIDEwIDEwLTQuNDggMTAtMTBTMTcuNTIgMiAxMiAyem0wIDE4Yy00LjQyIDAtOC0zLjU4LTgtOHMzLjU4LTggOC04IDggMy41OCA4IDgtMy41OCA4LTggOHpcIlxufSk7XG5cbi8qKlxuICogQGlnbm9yZSAtIGludGVybmFsIGNvbXBvbmVudC5cbiAqL1xudmFyIFJhZGlvQnV0dG9uQ2hlY2tlZCA9IGZ1bmN0aW9uIFJhZGlvQnV0dG9uQ2hlY2tlZChwcm9wcykge1xuICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfU3ZnSWNvbi5kZWZhdWx0LCBwcm9wcywgX3JlZik7XG59O1xuXG5SYWRpb0J1dHRvbkNoZWNrZWQgPSAoMCwgX3B1cmUuZGVmYXVsdCkoUmFkaW9CdXR0b25DaGVja2VkKTtcblJhZGlvQnV0dG9uQ2hlY2tlZC5tdWlOYW1lID0gJ1N2Z0ljb24nO1xudmFyIF9kZWZhdWx0ID0gUmFkaW9CdXR0b25DaGVja2VkO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfcHVyZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlY29tcG9zZS9wdXJlXCIpKTtcblxudmFyIF9TdmdJY29uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vLi4vU3ZnSWNvblwiKSk7XG5cbnZhciBfcmVmID0gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICBkOiBcIk0xMiAyQzYuNDggMiAyIDYuNDggMiAxMnM0LjQ4IDEwIDEwIDEwIDEwLTQuNDggMTAtMTBTMTcuNTIgMiAxMiAyem0wIDE4Yy00LjQyIDAtOC0zLjU4LTgtOHMzLjU4LTggOC04IDggMy41OCA4IDgtMy41OCA4LTggOHpcIlxufSk7XG5cbi8qKlxuICogQGlnbm9yZSAtIGludGVybmFsIGNvbXBvbmVudC5cbiAqL1xudmFyIFJhZGlvQnV0dG9uVW5jaGVja2VkID0gZnVuY3Rpb24gUmFkaW9CdXR0b25VbmNoZWNrZWQocHJvcHMpIHtcbiAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX1N2Z0ljb24uZGVmYXVsdCwgcHJvcHMsIF9yZWYpO1xufTtcblxuUmFkaW9CdXR0b25VbmNoZWNrZWQgPSAoMCwgX3B1cmUuZGVmYXVsdCkoUmFkaW9CdXR0b25VbmNoZWNrZWQpO1xuUmFkaW9CdXR0b25VbmNoZWNrZWQubXVpTmFtZSA9ICdTdmdJY29uJztcbnZhciBfZGVmYXVsdCA9IFJhZGlvQnV0dG9uVW5jaGVja2VkO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLnN0eWxlcyA9IHZvaWQgMDtcblxudmFyIF9leHRlbmRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9leHRlbmRzXCIpKTtcblxudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIikpO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xuXG52YXIgX2NsYXNzbmFtZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJjbGFzc25hbWVzXCIpKTtcblxudmFyIF9Td2l0Y2hCYXNlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vaW50ZXJuYWwvU3dpdGNoQmFzZVwiKSk7XG5cbnZhciBfUmFkaW9CdXR0b25VbmNoZWNrZWQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9pbnRlcm5hbC9zdmctaWNvbnMvUmFkaW9CdXR0b25VbmNoZWNrZWRcIikpO1xuXG52YXIgX1JhZGlvQnV0dG9uQ2hlY2tlZCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL2ludGVybmFsL3N2Zy1pY29ucy9SYWRpb0J1dHRvbkNoZWNrZWRcIikpO1xuXG52YXIgX2hlbHBlcnMgPSByZXF1aXJlKFwiLi4vdXRpbHMvaGVscGVyc1wiKTtcblxudmFyIF93aXRoU3R5bGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vc3R5bGVzL3dpdGhTdHlsZXNcIikpO1xuXG52YXIgc3R5bGVzID0gZnVuY3Rpb24gc3R5bGVzKHRoZW1lKSB7XG4gIHJldHVybiB7XG4gICAgcm9vdDoge1xuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUudGV4dC5zZWNvbmRhcnlcbiAgICB9LFxuICAgIGNoZWNrZWQ6IHt9LFxuICAgIGRpc2FibGVkOiB7fSxcbiAgICBjb2xvclByaW1hcnk6IHtcbiAgICAgICcmJGNoZWNrZWQnOiB7XG4gICAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnByaW1hcnkubWFpblxuICAgICAgfSxcbiAgICAgICcmJGRpc2FibGVkJzoge1xuICAgICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5hY3Rpb24uZGlzYWJsZWRcbiAgICAgIH1cbiAgICB9LFxuICAgIGNvbG9yU2Vjb25kYXJ5OiB7XG4gICAgICAnJiRjaGVja2VkJzoge1xuICAgICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5zZWNvbmRhcnkubWFpblxuICAgICAgfSxcbiAgICAgICcmJGRpc2FibGVkJzoge1xuICAgICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5hY3Rpb24uZGlzYWJsZWRcbiAgICAgIH1cbiAgICB9XG4gIH07XG59O1xuXG5leHBvcnRzLnN0eWxlcyA9IHN0eWxlcztcblxudmFyIF9yZWYgPSBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9SYWRpb0J1dHRvblVuY2hlY2tlZC5kZWZhdWx0LCBudWxsKTtcblxudmFyIF9yZWYyID0gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfUmFkaW9CdXR0b25DaGVja2VkLmRlZmF1bHQsIG51bGwpO1xuXG5mdW5jdGlvbiBSYWRpbyhwcm9wcykge1xuICB2YXIgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBjb2xvciA9IHByb3BzLmNvbG9yLFxuICAgICAgb3RoZXIgPSAoMCwgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMi5kZWZhdWx0KShwcm9wcywgW1wiY2xhc3Nlc1wiLCBcImNvbG9yXCJdKTtcbiAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX1N3aXRjaEJhc2UuZGVmYXVsdCwgKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7XG4gICAgdHlwZTogXCJyYWRpb1wiLFxuICAgIGljb246IF9yZWYsXG4gICAgY2hlY2tlZEljb246IF9yZWYyLFxuICAgIGNsYXNzZXM6IHtcbiAgICAgIHJvb3Q6ICgwLCBfY2xhc3NuYW1lcy5kZWZhdWx0KShjbGFzc2VzLnJvb3QsIGNsYXNzZXNbXCJjb2xvclwiLmNvbmNhdCgoMCwgX2hlbHBlcnMuY2FwaXRhbGl6ZSkoY29sb3IpKV0pLFxuICAgICAgY2hlY2tlZDogY2xhc3Nlcy5jaGVja2VkLFxuICAgICAgZGlzYWJsZWQ6IGNsYXNzZXMuZGlzYWJsZWRcbiAgICB9XG4gIH0sIG90aGVyKSk7XG59XG5cblJhZGlvLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGNvbXBvbmVudCBpcyBjaGVja2VkLlxuICAgKi9cbiAgY2hlY2tlZDogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsIF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmddKSxcblxuICAvKipcbiAgICogVGhlIGljb24gdG8gZGlzcGxheSB3aGVuIHRoZSBjb21wb25lbnQgaXMgY2hlY2tlZC5cbiAgICovXG4gIGNoZWNrZWRJY29uOiBfcHJvcFR5cGVzLmRlZmF1bHQubm9kZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MtYXBpKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBUaGUgY29sb3Igb2YgdGhlIGNvbXBvbmVudC4gSXQgc3VwcG9ydHMgdGhvc2UgdGhlbWUgY29sb3JzIHRoYXQgbWFrZSBzZW5zZSBmb3IgdGhpcyBjb21wb25lbnQuXG4gICAqL1xuICBjb2xvcjogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mKFsncHJpbWFyeScsICdzZWNvbmRhcnknLCAnZGVmYXVsdCddKSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgc3dpdGNoIHdpbGwgYmUgZGlzYWJsZWQuXG4gICAqL1xuICBkaXNhYmxlZDogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIHJpcHBsZSBlZmZlY3Qgd2lsbCBiZSBkaXNhYmxlZC5cbiAgICovXG4gIGRpc2FibGVSaXBwbGU6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgaWNvbiB0byBkaXNwbGF5IHdoZW4gdGhlIGNvbXBvbmVudCBpcyB1bmNoZWNrZWQuXG4gICAqL1xuICBpY29uOiBfcHJvcFR5cGVzLmRlZmF1bHQubm9kZSxcblxuICAvKipcbiAgICogVGhlIGlkIG9mIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqL1xuICBpZDogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxcblxuICAvKipcbiAgICogQXR0cmlidXRlcyBhcHBsaWVkIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqL1xuICBpbnB1dFByb3BzOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBVc2UgdGhhdCBwcm9wZXJ0eSB0byBwYXNzIGEgcmVmIGNhbGxiYWNrIHRvIHRoZSBuYXRpdmUgaW5wdXQgY29tcG9uZW50LlxuICAgKi9cbiAgaW5wdXRSZWY6IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLCBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0XSksXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIHN0YXRlIGlzIGNoYW5nZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBldmVudCBUaGUgZXZlbnQgc291cmNlIG9mIHRoZSBjYWxsYmFjay5cbiAgICogWW91IGNhbiBwdWxsIG91dCB0aGUgbmV3IHZhbHVlIGJ5IGFjY2Vzc2luZyBgZXZlbnQudGFyZ2V0LnZhbHVlYC5cbiAgICogQHBhcmFtIHtib29sZWFufSBjaGVja2VkIFRoZSBgY2hlY2tlZGAgdmFsdWUgb2YgdGhlIHN3aXRjaFxuICAgKi9cbiAgb25DaGFuZ2U6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBUaGUgaW5wdXQgY29tcG9uZW50IHByb3BlcnR5IGB0eXBlYC5cbiAgICovXG4gIHR5cGU6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSB2YWx1ZSBvZiB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgdmFsdWU6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmdcbn0gOiB7fTtcblJhZGlvLmRlZmF1bHRQcm9wcyA9IHtcbiAgY29sb3I6ICdzZWNvbmRhcnknXG59O1xuXG52YXIgX2RlZmF1bHQgPSAoMCwgX3dpdGhTdHlsZXMuZGVmYXVsdCkoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlSYWRpbydcbn0pKFJhZGlvKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLnN0eWxlcyA9IHZvaWQgMDtcblxudmFyIF9leHRlbmRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9leHRlbmRzXCIpKTtcblxudmFyIF9kZWZpbmVQcm9wZXJ0eTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vZGVmaW5lUHJvcGVydHlcIikpO1xuXG52YXIgX3RvQ29uc3VtYWJsZUFycmF5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi90b0NvbnN1bWFibGVBcnJheVwiKSk7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCIpKTtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKTtcblxudmFyIF9jbGFzc25hbWVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY2xhc3NuYW1lc1wiKSk7XG5cbnZhciBfd2l0aFN0eWxlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3N0eWxlcy93aXRoU3R5bGVzXCIpKTtcblxudmFyIF9QYXBlciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL1BhcGVyXCIpKTtcblxudmFyIF9oZWxwZXJzID0gcmVxdWlyZShcIi4uL3V0aWxzL2hlbHBlcnNcIik7XG5cbnZhciBfTGluZWFyUHJvZ3Jlc3MgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9MaW5lYXJQcm9ncmVzc1wiKSk7XG5cbi8vIEBpbmhlcml0ZWRDb21wb25lbnQgUGFwZXJcbnZhciBzdHlsZXMgPSBmdW5jdGlvbiBzdHlsZXModGhlbWUpIHtcbiAgcmV0dXJuIHtcbiAgICByb290OiB7XG4gICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICBmbGV4RGlyZWN0aW9uOiAncm93JyxcbiAgICAgIGp1c3RpZnlDb250ZW50OiAnc3BhY2UtYmV0d2VlbicsXG4gICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgIGJhY2tncm91bmQ6IHRoZW1lLnBhbGV0dGUuYmFja2dyb3VuZC5kZWZhdWx0LFxuICAgICAgcGFkZGluZzogdGhlbWUuc3BhY2luZy51bml0XG4gICAgfSxcbiAgICBwb3NpdGlvbkJvdHRvbToge1xuICAgICAgcG9zaXRpb246ICdmaXhlZCcsXG4gICAgICBib3R0b206IDAsXG4gICAgICBsZWZ0OiAwLFxuICAgICAgcmlnaHQ6IDAsXG4gICAgICB6SW5kZXg6IHRoZW1lLnpJbmRleC5tb2JpbGVTdGVwcGVyXG4gICAgfSxcbiAgICBwb3NpdGlvblRvcDoge1xuICAgICAgcG9zaXRpb246ICdmaXhlZCcsXG4gICAgICB0b3A6IDAsXG4gICAgICBsZWZ0OiAwLFxuICAgICAgcmlnaHQ6IDAsXG4gICAgICB6SW5kZXg6IHRoZW1lLnpJbmRleC5tb2JpbGVTdGVwcGVyXG4gICAgfSxcbiAgICBwb3NpdGlvblN0YXRpYzoge30sXG4gICAgZG90czoge1xuICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgZmxleERpcmVjdGlvbjogJ3JvdydcbiAgICB9LFxuICAgIGRvdDoge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLmFjdGlvbi5kaXNhYmxlZCxcbiAgICAgIGJvcmRlclJhZGl1czogJzUwJScsXG4gICAgICB3aWR0aDogdGhlbWUuc3BhY2luZy51bml0LFxuICAgICAgaGVpZ2h0OiB0aGVtZS5zcGFjaW5nLnVuaXQsXG4gICAgICBtYXJnaW46ICcwIDJweCdcbiAgICB9LFxuICAgIGRvdEFjdGl2ZToge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLnByaW1hcnkubWFpblxuICAgIH0sXG4gICAgcHJvZ3Jlc3M6IHtcbiAgICAgIHdpZHRoOiAnNTAlJ1xuICAgIH1cbiAgfTtcbn07XG5cbmV4cG9ydHMuc3R5bGVzID0gc3R5bGVzO1xuXG5mdW5jdGlvbiBNb2JpbGVTdGVwcGVyKHByb3BzKSB7XG4gIHZhciBhY3RpdmVTdGVwID0gcHJvcHMuYWN0aXZlU3RlcCxcbiAgICAgIGJhY2tCdXR0b24gPSBwcm9wcy5iYWNrQnV0dG9uLFxuICAgICAgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBjbGFzc05hbWVQcm9wID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgbmV4dEJ1dHRvbiA9IHByb3BzLm5leHRCdXR0b24sXG4gICAgICBwb3NpdGlvbiA9IHByb3BzLnBvc2l0aW9uLFxuICAgICAgc3RlcHMgPSBwcm9wcy5zdGVwcyxcbiAgICAgIHZhcmlhbnQgPSBwcm9wcy52YXJpYW50LFxuICAgICAgb3RoZXIgPSAoMCwgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMi5kZWZhdWx0KShwcm9wcywgW1wiYWN0aXZlU3RlcFwiLCBcImJhY2tCdXR0b25cIiwgXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwibmV4dEJ1dHRvblwiLCBcInBvc2l0aW9uXCIsIFwic3RlcHNcIiwgXCJ2YXJpYW50XCJdKTtcbiAgdmFyIGNsYXNzTmFtZSA9ICgwLCBfY2xhc3NuYW1lcy5kZWZhdWx0KShjbGFzc2VzLnJvb3QsIGNsYXNzZXNbXCJwb3NpdGlvblwiLmNvbmNhdCgoMCwgX2hlbHBlcnMuY2FwaXRhbGl6ZSkocG9zaXRpb24pKV0sIGNsYXNzTmFtZVByb3ApO1xuICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfUGFwZXIuZGVmYXVsdCwgKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7XG4gICAgc3F1YXJlOiB0cnVlLFxuICAgIGVsZXZhdGlvbjogMCxcbiAgICBjbGFzc05hbWU6IGNsYXNzTmFtZVxuICB9LCBvdGhlciksIGJhY2tCdXR0b24sIHZhcmlhbnQgPT09ICdkb3RzJyAmJiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICBjbGFzc05hbWU6IGNsYXNzZXMuZG90c1xuICB9LCAoMCwgX3RvQ29uc3VtYWJsZUFycmF5Mi5kZWZhdWx0KShuZXcgQXJyYXkoc3RlcHMpKS5tYXAoZnVuY3Rpb24gKF8sIHN0ZXApIHtcbiAgICB2YXIgZG90Q2xhc3NOYW1lID0gKDAsIF9jbGFzc25hbWVzLmRlZmF1bHQpKGNsYXNzZXMuZG90LCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KSh7fSwgY2xhc3Nlcy5kb3RBY3RpdmUsIHN0ZXAgPT09IGFjdGl2ZVN0ZXApKTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0L25vLWFycmF5LWluZGV4LWtleVxuXG4gICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAga2V5OiBzdGVwLFxuICAgICAgY2xhc3NOYW1lOiBkb3RDbGFzc05hbWVcbiAgICB9KTtcbiAgfSkpLCB2YXJpYW50ID09PSAncHJvZ3Jlc3MnICYmIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX0xpbmVhclByb2dyZXNzLmRlZmF1bHQsIHtcbiAgICBjbGFzc05hbWU6IGNsYXNzZXMucHJvZ3Jlc3MsXG4gICAgdmFyaWFudDogXCJkZXRlcm1pbmF0ZVwiLFxuICAgIHZhbHVlOiBNYXRoLmNlaWwoYWN0aXZlU3RlcCAvIChzdGVwcyAtIDEpICogMTAwKVxuICB9KSwgbmV4dEJ1dHRvbik7XG59XG5cbk1vYmlsZVN0ZXBwZXIucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKipcbiAgICogU2V0IHRoZSBhY3RpdmUgc3RlcCAoemVybyBiYXNlZCBpbmRleCkuXG4gICAqIERlZmluZXMgd2hpY2ggZG90IGlzIGhpZ2hsaWdodGVkIHdoZW4gdGhlIHZhcmlhbnQgaXMgJ2RvdHMnLlxuICAgKi9cbiAgYWN0aXZlU3RlcDogX3Byb3BUeXBlcy5kZWZhdWx0Lm51bWJlcixcblxuICAvKipcbiAgICogQSBiYWNrIGJ1dHRvbiBlbGVtZW50LiBGb3IgaW5zdGFuY2UsIGl0IGNhbiBiZSBiZSBhIGBCdXR0b25gIG9yIGEgYEljb25CdXR0b25gLlxuICAgKi9cbiAgYmFja0J1dHRvbjogX3Byb3BUeXBlcy5kZWZhdWx0Lm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzLWFwaSkgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBBIG5leHQgYnV0dG9uIGVsZW1lbnQuIEZvciBpbnN0YW5jZSwgaXQgY2FuIGJlIGJlIGEgYEJ1dHRvbmAgb3IgYSBgSWNvbkJ1dHRvbmAuXG4gICAqL1xuICBuZXh0QnV0dG9uOiBfcHJvcFR5cGVzLmRlZmF1bHQubm9kZSxcblxuICAvKipcbiAgICogU2V0IHRoZSBwb3NpdGlvbmluZyB0eXBlLlxuICAgKi9cbiAgcG9zaXRpb246IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZihbJ2JvdHRvbScsICd0b3AnLCAnc3RhdGljJ10pLFxuXG4gIC8qKlxuICAgKiBUaGUgdG90YWwgc3RlcHMuXG4gICAqL1xuICBzdGVwczogX3Byb3BUeXBlcy5kZWZhdWx0Lm51bWJlci5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBUaGUgdHlwZSBvZiBtb2JpbGUgc3RlcHBlciB0byB1c2UuXG4gICAqL1xuICB2YXJpYW50OiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2YoWyd0ZXh0JywgJ2RvdHMnLCAncHJvZ3Jlc3MnXSlcbn0gOiB7fTtcbk1vYmlsZVN0ZXBwZXIuZGVmYXVsdFByb3BzID0ge1xuICBhY3RpdmVTdGVwOiAwLFxuICBwb3NpdGlvbjogJ2JvdHRvbScsXG4gIHZhcmlhbnQ6ICdkb3RzJ1xufTtcblxudmFyIF9kZWZhdWx0ID0gKDAsIF93aXRoU3R5bGVzLmRlZmF1bHQpKHN0eWxlcywge1xuICBuYW1lOiAnTXVpTW9iaWxlU3RlcHBlcidcbn0pKE1vYmlsZVN0ZXBwZXIpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuc3R5bGVzID0gdm9pZCAwO1xuXG52YXIgX2V4dGVuZHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2V4dGVuZHNcIikpO1xuXG52YXIgX2RlZmluZVByb3BlcnR5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9kZWZpbmVQcm9wZXJ0eVwiKSk7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCIpKTtcblxudmFyIF9vYmplY3RTcHJlYWQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL29iamVjdFNwcmVhZFwiKSk7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbnZhciBfY2xhc3NuYW1lcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImNsYXNzbmFtZXNcIikpO1xuXG52YXIgX3dpdGhTdHlsZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9zdHlsZXMvd2l0aFN0eWxlc1wiKSk7XG5cbnZhciBfTGlzdEl0ZW0gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9MaXN0SXRlbVwiKSk7XG5cbi8vIEBpbmhlcml0ZWRDb21wb25lbnQgTGlzdEl0ZW1cbnZhciBzdHlsZXMgPSBmdW5jdGlvbiBzdHlsZXModGhlbWUpIHtcbiAgcmV0dXJuIHtcbiAgICByb290OiAoMCwgX29iamVjdFNwcmVhZDIuZGVmYXVsdCkoe30sIHRoZW1lLnR5cG9ncmFwaHkuc3ViaGVhZGluZywge1xuICAgICAgaGVpZ2h0OiB0aGVtZS5zcGFjaW5nLnVuaXQgKiAzLFxuICAgICAgYm94U2l6aW5nOiAnY29udGVudC1ib3gnLFxuICAgICAgd2lkdGg6ICdhdXRvJyxcbiAgICAgIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgICAgIHRleHRPdmVyZmxvdzogJ2VsbGlwc2lzJyxcbiAgICAgIHdoaXRlU3BhY2U6ICdub3dyYXAnLFxuICAgICAgcGFkZGluZ0xlZnQ6IHRoZW1lLnNwYWNpbmcudW5pdCAqIDIsXG4gICAgICBwYWRkaW5nUmlnaHQ6IHRoZW1lLnNwYWNpbmcudW5pdCAqIDIsXG4gICAgICAnJiRzZWxlY3RlZCc6IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLmFjdGlvbi5zZWxlY3RlZFxuICAgICAgfVxuICAgIH0pLFxuICAgIHNlbGVjdGVkOiB7fVxuICB9O1xufTtcblxuZXhwb3J0cy5zdHlsZXMgPSBzdHlsZXM7XG5cbmZ1bmN0aW9uIE1lbnVJdGVtKHByb3BzKSB7XG4gIHZhciBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIGNvbXBvbmVudCA9IHByb3BzLmNvbXBvbmVudCxcbiAgICAgIHNlbGVjdGVkID0gcHJvcHMuc2VsZWN0ZWQsXG4gICAgICByb2xlID0gcHJvcHMucm9sZSxcbiAgICAgIG90aGVyID0gKDAsIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIuZGVmYXVsdCkocHJvcHMsIFtcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJjb21wb25lbnRcIiwgXCJzZWxlY3RlZFwiLCBcInJvbGVcIl0pO1xuICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfTGlzdEl0ZW0uZGVmYXVsdCwgKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7XG4gICAgYnV0dG9uOiB0cnVlLFxuICAgIHJvbGU6IHJvbGUsXG4gICAgdGFiSW5kZXg6IC0xLFxuICAgIGNsYXNzTmFtZTogKDAsIF9jbGFzc25hbWVzLmRlZmF1bHQpKGNsYXNzZXMucm9vdCwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoe30sIGNsYXNzZXMuc2VsZWN0ZWQsIHNlbGVjdGVkKSwgY2xhc3NOYW1lKSxcbiAgICBjb21wb25lbnQ6IGNvbXBvbmVudFxuICB9LCBvdGhlcikpO1xufVxuXG5NZW51SXRlbS5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIC8qKlxuICAgKiBNZW51IGl0ZW0gY29udGVudHMuXG4gICAqL1xuICBjaGlsZHJlbjogX3Byb3BUeXBlcy5kZWZhdWx0Lm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzLWFwaSkgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBET00gZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZywgX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmNdKSxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgcm9sZTogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxcblxuICAvKipcbiAgICogVXNlIHRvIGFwcGx5IHNlbGVjdGVkIHN0eWxpbmcuXG4gICAqL1xuICBzZWxlY3RlZDogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2xcbn0gOiB7fTtcbk1lbnVJdGVtLmRlZmF1bHRQcm9wcyA9IHtcbiAgY29tcG9uZW50OiAnbGknLFxuICByb2xlOiAnbWVudWl0ZW0nLFxuICBzZWxlY3RlZDogZmFsc2Vcbn07XG5cbnZhciBfZGVmYXVsdCA9ICgwLCBfd2l0aFN0eWxlcy5kZWZhdWx0KShzdHlsZXMsIHtcbiAgbmFtZTogJ011aU1lbnVJdGVtJ1xufSkoTWVudUl0ZW0pO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9leHRlbmRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9leHRlbmRzXCIpKTtcblxudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIikpO1xuXG52YXIgX2NsYXNzQ2FsbENoZWNrMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9jbGFzc0NhbGxDaGVja1wiKSk7XG5cbnZhciBfY3JlYXRlQ2xhc3MyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2NyZWF0ZUNsYXNzXCIpKTtcblxudmFyIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuXCIpKTtcblxudmFyIF9pbmhlcml0czIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vaW5oZXJpdHNcIikpO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xuXG52YXIgX3JlYWN0RG9tID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3QtZG9tXCIpKTtcblxudmFyIF9rZXljb2RlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwia2V5Y29kZVwiKSk7XG5cbnZhciBfY29udGFpbnMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJkb20taGVscGVycy9xdWVyeS9jb250YWluc1wiKSk7XG5cbnZhciBfYWN0aXZlRWxlbWVudCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImRvbS1oZWxwZXJzL2FjdGl2ZUVsZW1lbnRcIikpO1xuXG52YXIgX293bmVyRG9jdW1lbnQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJkb20taGVscGVycy9vd25lckRvY3VtZW50XCIpKTtcblxudmFyIF9MaXN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vTGlzdFwiKSk7XG5cbi8vIEBpbmhlcml0ZWRDb21wb25lbnQgTGlzdFxudmFyIE1lbnVMaXN0ID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gICgwLCBfaW5oZXJpdHMyLmRlZmF1bHQpKE1lbnVMaXN0LCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBNZW51TGlzdCgpIHtcbiAgICB2YXIgX3JlZjtcblxuICAgIHZhciBfdGVtcCwgX3RoaXM7XG5cbiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMi5kZWZhdWx0KSh0aGlzLCBNZW51TGlzdCk7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuICgwLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIuZGVmYXVsdCkoX3RoaXMsIChfdGVtcCA9IF90aGlzID0gKDAsIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMi5kZWZhdWx0KSh0aGlzLCAoX3JlZiA9IE1lbnVMaXN0Ll9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTWVudUxpc3QpKS5jYWxsLmFwcGx5KF9yZWYsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMuc3RhdGUgPSB7XG4gICAgICBjdXJyZW50VGFiSW5kZXg6IHVuZGVmaW5lZFxuICAgIH0sIF90aGlzLmxpc3QgPSB1bmRlZmluZWQsIF90aGlzLnNlbGVjdGVkSXRlbSA9IHVuZGVmaW5lZCwgX3RoaXMuYmx1clRpbWVyID0gdW5kZWZpbmVkLCBfdGhpcy5oYW5kbGVCbHVyID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBfdGhpcy5ibHVyVGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKF90aGlzLmxpc3QpIHtcbiAgICAgICAgICB2YXIgbGlzdCA9IF9yZWFjdERvbS5kZWZhdWx0LmZpbmRET01Ob2RlKF90aGlzLmxpc3QpO1xuXG4gICAgICAgICAgdmFyIGN1cnJlbnRGb2N1cyA9ICgwLCBfYWN0aXZlRWxlbWVudC5kZWZhdWx0KSgoMCwgX293bmVyRG9jdW1lbnQuZGVmYXVsdCkobGlzdCkpO1xuXG4gICAgICAgICAgaWYgKCEoMCwgX2NvbnRhaW5zLmRlZmF1bHQpKGxpc3QsIGN1cnJlbnRGb2N1cykpIHtcbiAgICAgICAgICAgIF90aGlzLnJlc2V0VGFiSW5kZXgoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sIDMwKTtcblxuICAgICAgaWYgKF90aGlzLnByb3BzLm9uQmx1cikge1xuICAgICAgICBfdGhpcy5wcm9wcy5vbkJsdXIoZXZlbnQpO1xuICAgICAgfVxuICAgIH0sIF90aGlzLmhhbmRsZUtleURvd24gPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIHZhciBsaXN0ID0gX3JlYWN0RG9tLmRlZmF1bHQuZmluZERPTU5vZGUoX3RoaXMubGlzdCk7XG5cbiAgICAgIHZhciBrZXkgPSAoMCwgX2tleWNvZGUuZGVmYXVsdCkoZXZlbnQpO1xuICAgICAgdmFyIGN1cnJlbnRGb2N1cyA9ICgwLCBfYWN0aXZlRWxlbWVudC5kZWZhdWx0KSgoMCwgX293bmVyRG9jdW1lbnQuZGVmYXVsdCkobGlzdCkpO1xuXG4gICAgICBpZiAoKGtleSA9PT0gJ3VwJyB8fCBrZXkgPT09ICdkb3duJykgJiYgKCFjdXJyZW50Rm9jdXMgfHwgY3VycmVudEZvY3VzICYmICEoMCwgX2NvbnRhaW5zLmRlZmF1bHQpKGxpc3QsIGN1cnJlbnRGb2N1cykpKSB7XG4gICAgICAgIGlmIChfdGhpcy5zZWxlY3RlZEl0ZW0pIHtcbiAgICAgICAgICBfcmVhY3REb20uZGVmYXVsdC5maW5kRE9NTm9kZShfdGhpcy5zZWxlY3RlZEl0ZW0pLmZvY3VzKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbGlzdC5maXJzdENoaWxkLmZvY3VzKCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoa2V5ID09PSAnZG93bicpIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICBpZiAoY3VycmVudEZvY3VzLm5leHRFbGVtZW50U2libGluZykge1xuICAgICAgICAgIGN1cnJlbnRGb2N1cy5uZXh0RWxlbWVudFNpYmxpbmcuZm9jdXMoKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChrZXkgPT09ICd1cCcpIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICBpZiAoY3VycmVudEZvY3VzLnByZXZpb3VzRWxlbWVudFNpYmxpbmcpIHtcbiAgICAgICAgICBjdXJyZW50Rm9jdXMucHJldmlvdXNFbGVtZW50U2libGluZy5mb2N1cygpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChfdGhpcy5wcm9wcy5vbktleURvd24pIHtcbiAgICAgICAgX3RoaXMucHJvcHMub25LZXlEb3duKGV2ZW50LCBrZXkpO1xuICAgICAgfVxuICAgIH0sIF90aGlzLmhhbmRsZUl0ZW1Gb2N1cyA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgdmFyIGxpc3QgPSBfcmVhY3REb20uZGVmYXVsdC5maW5kRE9NTm9kZShfdGhpcy5saXN0KTtcblxuICAgICAgaWYgKGxpc3QpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0LmNoaWxkcmVuLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgaWYgKGxpc3QuY2hpbGRyZW5baV0gPT09IGV2ZW50LmN1cnJlbnRUYXJnZXQpIHtcbiAgICAgICAgICAgIF90aGlzLnNldFRhYkluZGV4KGkpO1xuXG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCBfdGVtcCkpO1xuICB9XG5cbiAgKDAsIF9jcmVhdGVDbGFzczIuZGVmYXVsdCkoTWVudUxpc3QsIFt7XG4gICAga2V5OiBcImNvbXBvbmVudERpZE1vdW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgdGhpcy5yZXNldFRhYkluZGV4KCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImNvbXBvbmVudFdpbGxVbm1vdW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuYmx1clRpbWVyKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwic2V0VGFiSW5kZXhcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0VGFiSW5kZXgoaW5kZXgpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBjdXJyZW50VGFiSW5kZXg6IGluZGV4XG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZm9jdXNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZm9jdXMoKSB7XG4gICAgICB2YXIgY3VycmVudFRhYkluZGV4ID0gdGhpcy5zdGF0ZS5jdXJyZW50VGFiSW5kZXg7XG5cbiAgICAgIHZhciBsaXN0ID0gX3JlYWN0RG9tLmRlZmF1bHQuZmluZERPTU5vZGUodGhpcy5saXN0KTtcblxuICAgICAgaWYgKCFsaXN0IHx8ICFsaXN0LmNoaWxkcmVuIHx8ICFsaXN0LmZpcnN0Q2hpbGQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoY3VycmVudFRhYkluZGV4ICYmIGN1cnJlbnRUYWJJbmRleCA+PSAwKSB7XG4gICAgICAgIGxpc3QuY2hpbGRyZW5bY3VycmVudFRhYkluZGV4XS5mb2N1cygpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGlzdC5maXJzdENoaWxkLmZvY3VzKCk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlc2V0VGFiSW5kZXhcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVzZXRUYWJJbmRleCgpIHtcbiAgICAgIHZhciBsaXN0ID0gX3JlYWN0RG9tLmRlZmF1bHQuZmluZERPTU5vZGUodGhpcy5saXN0KTtcblxuICAgICAgdmFyIGN1cnJlbnRGb2N1cyA9ICgwLCBfYWN0aXZlRWxlbWVudC5kZWZhdWx0KSgoMCwgX293bmVyRG9jdW1lbnQuZGVmYXVsdCkobGlzdCkpO1xuICAgICAgdmFyIGl0ZW1zID0gW107XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5jaGlsZHJlbi5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBpdGVtcy5wdXNoKGxpc3QuY2hpbGRyZW5baV0pO1xuICAgICAgfVxuXG4gICAgICB2YXIgY3VycmVudEZvY3VzSW5kZXggPSBpdGVtcy5pbmRleE9mKGN1cnJlbnRGb2N1cyk7XG5cbiAgICAgIGlmIChjdXJyZW50Rm9jdXNJbmRleCAhPT0gLTEpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2V0VGFiSW5kZXgoY3VycmVudEZvY3VzSW5kZXgpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5zZWxlY3RlZEl0ZW0pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2V0VGFiSW5kZXgoaXRlbXMuaW5kZXhPZihfcmVhY3REb20uZGVmYXVsdC5maW5kRE9NTm9kZSh0aGlzLnNlbGVjdGVkSXRlbSkpKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuc2V0VGFiSW5kZXgoMCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgY2hpbGRyZW4gPSBfcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgICAgY2xhc3NOYW1lID0gX3Byb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgICBvbkJsdXIgPSBfcHJvcHMub25CbHVyLFxuICAgICAgICAgIG9uS2V5RG93biA9IF9wcm9wcy5vbktleURvd24sXG4gICAgICAgICAgb3RoZXIgPSAoMCwgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMi5kZWZhdWx0KShfcHJvcHMsIFtcImNoaWxkcmVuXCIsIFwiY2xhc3NOYW1lXCIsIFwib25CbHVyXCIsIFwib25LZXlEb3duXCJdKTtcbiAgICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9MaXN0LmRlZmF1bHQsICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe1xuICAgICAgICByb2xlOiBcIm1lbnVcIixcbiAgICAgICAgcmVmOiBmdW5jdGlvbiByZWYobm9kZSkge1xuICAgICAgICAgIF90aGlzMi5saXN0ID0gbm9kZTtcbiAgICAgICAgfSxcbiAgICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWUsXG4gICAgICAgIG9uS2V5RG93bjogdGhpcy5oYW5kbGVLZXlEb3duLFxuICAgICAgICBvbkJsdXI6IHRoaXMuaGFuZGxlQmx1clxuICAgICAgfSwgb3RoZXIpLCBfcmVhY3QuZGVmYXVsdC5DaGlsZHJlbi5tYXAoY2hpbGRyZW4sIGZ1bmN0aW9uIChjaGlsZCwgaW5kZXgpIHtcbiAgICAgICAgaWYgKCFfcmVhY3QuZGVmYXVsdC5pc1ZhbGlkRWxlbWVudChjaGlsZCkpIHtcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jbG9uZUVsZW1lbnQoY2hpbGQsIHtcbiAgICAgICAgICB0YWJJbmRleDogaW5kZXggPT09IF90aGlzMi5zdGF0ZS5jdXJyZW50VGFiSW5kZXggPyAwIDogLTEsXG4gICAgICAgICAgcmVmOiBjaGlsZC5wcm9wcy5zZWxlY3RlZCA/IGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgICAgICBfdGhpczIuc2VsZWN0ZWRJdGVtID0gbm9kZTtcbiAgICAgICAgICB9IDogdW5kZWZpbmVkLFxuICAgICAgICAgIG9uRm9jdXM6IF90aGlzMi5oYW5kbGVJdGVtRm9jdXNcbiAgICAgICAgfSk7XG4gICAgICB9KSk7XG4gICAgfVxuICB9XSk7XG4gIHJldHVybiBNZW51TGlzdDtcbn0oX3JlYWN0LmRlZmF1bHQuQ29tcG9uZW50KTtcblxuTWVudUxpc3QucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKipcbiAgICogTWVudUxpc3QgY29udGVudHMsIG5vcm1hbGx5IGBNZW51SXRlbWBzLlxuICAgKi9cbiAgY2hpbGRyZW46IF9wcm9wVHlwZXMuZGVmYXVsdC5ub2RlLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uQmx1cjogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uS2V5RG93bjogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmNcbn0gOiB7fTtcbnZhciBfZGVmYXVsdCA9IE1lbnVMaXN0O1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLnN0eWxlcyA9IHZvaWQgMDtcblxudmFyIF9leHRlbmRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9leHRlbmRzXCIpKTtcblxudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIikpO1xuXG52YXIgX2NsYXNzQ2FsbENoZWNrMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9jbGFzc0NhbGxDaGVja1wiKSk7XG5cbnZhciBfY3JlYXRlQ2xhc3MyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2NyZWF0ZUNsYXNzXCIpKTtcblxudmFyIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuXCIpKTtcblxudmFyIF9pbmhlcml0czIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vaW5oZXJpdHNcIikpO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xuXG52YXIgX3JlYWN0RG9tID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3QtZG9tXCIpKTtcblxudmFyIF93YXJuaW5nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwid2FybmluZ1wiKSk7XG5cbnZhciBfY29udGFpbnMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJkb20taGVscGVycy9xdWVyeS9jb250YWluc1wiKSk7XG5cbnZhciBfb3duZXJEb2N1bWVudCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImRvbS1oZWxwZXJzL293bmVyRG9jdW1lbnRcIikpO1xuXG52YXIgX2RlYm91bmNlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiZGVib3VuY2VcIikpO1xuXG52YXIgX3JlYWN0RXZlbnRMaXN0ZW5lciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0LWV2ZW50LWxpc3RlbmVyXCIpKTtcblxudmFyIF9vd25lcldpbmRvdyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3V0aWxzL293bmVyV2luZG93XCIpKTtcblxudmFyIF93aXRoU3R5bGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vc3R5bGVzL3dpdGhTdHlsZXNcIikpO1xuXG52YXIgX01vZGFsID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vTW9kYWxcIikpO1xuXG52YXIgX0dyb3cgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9Hcm93XCIpKTtcblxudmFyIF9QYXBlciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL1BhcGVyXCIpKTtcblxuLy8gQGluaGVyaXRlZENvbXBvbmVudCBNb2RhbFxuZnVuY3Rpb24gZ2V0T2Zmc2V0VG9wKHJlY3QsIHZlcnRpY2FsKSB7XG4gIHZhciBvZmZzZXQgPSAwO1xuXG4gIGlmICh0eXBlb2YgdmVydGljYWwgPT09ICdudW1iZXInKSB7XG4gICAgb2Zmc2V0ID0gdmVydGljYWw7XG4gIH0gZWxzZSBpZiAodmVydGljYWwgPT09ICdjZW50ZXInKSB7XG4gICAgb2Zmc2V0ID0gcmVjdC5oZWlnaHQgLyAyO1xuICB9IGVsc2UgaWYgKHZlcnRpY2FsID09PSAnYm90dG9tJykge1xuICAgIG9mZnNldCA9IHJlY3QuaGVpZ2h0O1xuICB9XG5cbiAgcmV0dXJuIG9mZnNldDtcbn1cblxuZnVuY3Rpb24gZ2V0T2Zmc2V0TGVmdChyZWN0LCBob3Jpem9udGFsKSB7XG4gIHZhciBvZmZzZXQgPSAwO1xuXG4gIGlmICh0eXBlb2YgaG9yaXpvbnRhbCA9PT0gJ251bWJlcicpIHtcbiAgICBvZmZzZXQgPSBob3Jpem9udGFsO1xuICB9IGVsc2UgaWYgKGhvcml6b250YWwgPT09ICdjZW50ZXInKSB7XG4gICAgb2Zmc2V0ID0gcmVjdC53aWR0aCAvIDI7XG4gIH0gZWxzZSBpZiAoaG9yaXpvbnRhbCA9PT0gJ3JpZ2h0Jykge1xuICAgIG9mZnNldCA9IHJlY3Qud2lkdGg7XG4gIH1cblxuICByZXR1cm4gb2Zmc2V0O1xufVxuXG5mdW5jdGlvbiBnZXRUcmFuc2Zvcm1PcmlnaW5WYWx1ZSh0cmFuc2Zvcm1PcmlnaW4pIHtcbiAgcmV0dXJuIFt0cmFuc2Zvcm1PcmlnaW4uaG9yaXpvbnRhbCwgdHJhbnNmb3JtT3JpZ2luLnZlcnRpY2FsXS5tYXAoZnVuY3Rpb24gKG4pIHtcbiAgICByZXR1cm4gdHlwZW9mIG4gPT09ICdudW1iZXInID8gXCJcIi5jb25jYXQobiwgXCJweFwiKSA6IG47XG4gIH0pLmpvaW4oJyAnKTtcbn0gLy8gU3VtIHRoZSBzY3JvbGxUb3AgYmV0d2VlbiB0d28gZWxlbWVudHMuXG5cblxuZnVuY3Rpb24gZ2V0U2Nyb2xsUGFyZW50KHBhcmVudCwgY2hpbGQpIHtcbiAgdmFyIGVsZW1lbnQgPSBjaGlsZDtcbiAgdmFyIHNjcm9sbFRvcCA9IDA7XG5cbiAgd2hpbGUgKGVsZW1lbnQgJiYgZWxlbWVudCAhPT0gcGFyZW50KSB7XG4gICAgZWxlbWVudCA9IGVsZW1lbnQucGFyZW50Tm9kZTtcbiAgICBzY3JvbGxUb3AgKz0gZWxlbWVudC5zY3JvbGxUb3A7XG4gIH1cblxuICByZXR1cm4gc2Nyb2xsVG9wO1xufVxuXG5mdW5jdGlvbiBnZXRBbmNob3JFbChhbmNob3JFbCkge1xuICByZXR1cm4gdHlwZW9mIGFuY2hvckVsID09PSAnZnVuY3Rpb24nID8gYW5jaG9yRWwoKSA6IGFuY2hvckVsO1xufVxuXG52YXIgc3R5bGVzID0ge1xuICBwYXBlcjoge1xuICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgIG92ZXJmbG93WTogJ2F1dG8nLFxuICAgIG92ZXJmbG93WDogJ2hpZGRlbicsXG4gICAgLy8gU28gd2Ugc2VlIHRoZSBwb3BvdmVyIHdoZW4gaXQncyBlbXB0eS5cbiAgICAvLyBJdCdzIG1vc3QgbGlrZWx5IG9uIGlzc3VlIG9uIHVzZXJsYW5kLlxuICAgIG1pbldpZHRoOiAxNixcbiAgICBtaW5IZWlnaHQ6IDE2LFxuICAgIG1heFdpZHRoOiAnY2FsYygxMDAlIC0gMzJweCknLFxuICAgIG1heEhlaWdodDogJ2NhbGMoMTAwJSAtIDMycHgpJyxcbiAgICAvLyBXZSBkaXNhYmxlIHRoZSBmb2N1cyByaW5nIGZvciBtb3VzZSwgdG91Y2ggYW5kIGtleWJvYXJkIHVzZXJzLlxuICAgIG91dGxpbmU6ICdub25lJ1xuICB9XG59O1xuZXhwb3J0cy5zdHlsZXMgPSBzdHlsZXM7XG5cbnZhciBQb3BvdmVyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gICgwLCBfaW5oZXJpdHMyLmRlZmF1bHQpKFBvcG92ZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFBvcG92ZXIoKSB7XG4gICAgdmFyIF9yZWY7XG5cbiAgICB2YXIgX3RlbXAsIF90aGlzO1xuXG4gICAgKDAsIF9jbGFzc0NhbGxDaGVjazIuZGVmYXVsdCkodGhpcywgUG9wb3Zlcik7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuICgwLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIuZGVmYXVsdCkoX3RoaXMsIChfdGVtcCA9IF90aGlzID0gKDAsIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMi5kZWZhdWx0KSh0aGlzLCAoX3JlZiA9IFBvcG92ZXIuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihQb3BvdmVyKSkuY2FsbC5hcHBseShfcmVmLCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMuaGFuZGxlUmVzaXplLmNsZWFyKCk7XG4gICAgfSwgX3RoaXMuc2V0UG9zaXRpb25pbmdTdHlsZXMgPSBmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgICAgaWYgKGVsZW1lbnQgJiYgZWxlbWVudC5zdHlsZSkge1xuICAgICAgICB2YXIgcG9zaXRpb25pbmcgPSBfdGhpcy5nZXRQb3NpdGlvbmluZ1N0eWxlKGVsZW1lbnQpO1xuXG4gICAgICAgIGlmIChwb3NpdGlvbmluZy50b3AgIT09IG51bGwpIHtcbiAgICAgICAgICBlbGVtZW50LnN0eWxlLnRvcCA9IHBvc2l0aW9uaW5nLnRvcDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwb3NpdGlvbmluZy5sZWZ0ICE9PSBudWxsKSB7XG4gICAgICAgICAgZWxlbWVudC5zdHlsZS5sZWZ0ID0gcG9zaXRpb25pbmcubGVmdDtcbiAgICAgICAgfVxuXG4gICAgICAgIGVsZW1lbnQuc3R5bGUudHJhbnNmb3JtT3JpZ2luID0gcG9zaXRpb25pbmcudHJhbnNmb3JtT3JpZ2luO1xuICAgICAgfVxuICAgIH0sIF90aGlzLmdldFBvc2l0aW9uaW5nU3R5bGUgPSBmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgYW5jaG9yRWwgPSBfdGhpcyRwcm9wcy5hbmNob3JFbCxcbiAgICAgICAgICBhbmNob3JSZWZlcmVuY2UgPSBfdGhpcyRwcm9wcy5hbmNob3JSZWZlcmVuY2UsXG4gICAgICAgICAgbWFyZ2luVGhyZXNob2xkID0gX3RoaXMkcHJvcHMubWFyZ2luVGhyZXNob2xkOyAvLyBDaGVjayBpZiB0aGUgcGFyZW50IGhhcyByZXF1ZXN0ZWQgYW5jaG9yaW5nIG9uIGFuIGlubmVyIGNvbnRlbnQgbm9kZVxuXG4gICAgICB2YXIgY29udGVudEFuY2hvck9mZnNldCA9IF90aGlzLmdldENvbnRlbnRBbmNob3JPZmZzZXQoZWxlbWVudCk7XG5cbiAgICAgIHZhciBlbGVtUmVjdCA9IHtcbiAgICAgICAgd2lkdGg6IGVsZW1lbnQuY2xpZW50V2lkdGgsXG4gICAgICAgIGhlaWdodDogZWxlbWVudC5jbGllbnRIZWlnaHRcbiAgICAgIH07IC8vIEdldCB0aGUgdHJhbnNmb3JtIG9yaWdpbiBwb2ludCBvbiB0aGUgZWxlbWVudCBpdHNlbGZcblxuICAgICAgdmFyIHRyYW5zZm9ybU9yaWdpbiA9IF90aGlzLmdldFRyYW5zZm9ybU9yaWdpbihlbGVtUmVjdCwgY29udGVudEFuY2hvck9mZnNldCk7XG5cbiAgICAgIGlmIChhbmNob3JSZWZlcmVuY2UgPT09ICdub25lJykge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHRvcDogbnVsbCxcbiAgICAgICAgICBsZWZ0OiBudWxsLFxuICAgICAgICAgIHRyYW5zZm9ybU9yaWdpbjogZ2V0VHJhbnNmb3JtT3JpZ2luVmFsdWUodHJhbnNmb3JtT3JpZ2luKVxuICAgICAgICB9O1xuICAgICAgfSAvLyBHZXQgdGhlIG9mZnNldCBvZiBvZiB0aGUgYW5jaG9yaW5nIGVsZW1lbnRcblxuXG4gICAgICB2YXIgYW5jaG9yT2Zmc2V0ID0gX3RoaXMuZ2V0QW5jaG9yT2Zmc2V0KGNvbnRlbnRBbmNob3JPZmZzZXQpOyAvLyBDYWxjdWxhdGUgZWxlbWVudCBwb3NpdGlvbmluZ1xuXG5cbiAgICAgIHZhciB0b3AgPSBhbmNob3JPZmZzZXQudG9wIC0gdHJhbnNmb3JtT3JpZ2luLnZlcnRpY2FsO1xuICAgICAgdmFyIGxlZnQgPSBhbmNob3JPZmZzZXQubGVmdCAtIHRyYW5zZm9ybU9yaWdpbi5ob3Jpem9udGFsO1xuICAgICAgdmFyIGJvdHRvbSA9IHRvcCArIGVsZW1SZWN0LmhlaWdodDtcbiAgICAgIHZhciByaWdodCA9IGxlZnQgKyBlbGVtUmVjdC53aWR0aDsgLy8gVXNlIHRoZSBwYXJlbnQgd2luZG93IG9mIHRoZSBhbmNob3JFbCBpZiBwcm92aWRlZFxuXG4gICAgICB2YXIgY29udGFpbmVyV2luZG93ID0gKDAsIF9vd25lcldpbmRvdy5kZWZhdWx0KShnZXRBbmNob3JFbChhbmNob3JFbCkpOyAvLyBXaW5kb3cgdGhyZXNob2xkcyB0YWtpbmcgcmVxdWlyZWQgbWFyZ2luIGludG8gYWNjb3VudFxuXG4gICAgICB2YXIgaGVpZ2h0VGhyZXNob2xkID0gY29udGFpbmVyV2luZG93LmlubmVySGVpZ2h0IC0gbWFyZ2luVGhyZXNob2xkO1xuICAgICAgdmFyIHdpZHRoVGhyZXNob2xkID0gY29udGFpbmVyV2luZG93LmlubmVyV2lkdGggLSBtYXJnaW5UaHJlc2hvbGQ7IC8vIENoZWNrIGlmIHRoZSB2ZXJ0aWNhbCBheGlzIG5lZWRzIHNoaWZ0aW5nXG5cbiAgICAgIGlmICh0b3AgPCBtYXJnaW5UaHJlc2hvbGQpIHtcbiAgICAgICAgdmFyIGRpZmYgPSB0b3AgLSBtYXJnaW5UaHJlc2hvbGQ7XG4gICAgICAgIHRvcCAtPSBkaWZmO1xuICAgICAgICB0cmFuc2Zvcm1PcmlnaW4udmVydGljYWwgKz0gZGlmZjtcbiAgICAgIH0gZWxzZSBpZiAoYm90dG9tID4gaGVpZ2h0VGhyZXNob2xkKSB7XG4gICAgICAgIHZhciBfZGlmZiA9IGJvdHRvbSAtIGhlaWdodFRocmVzaG9sZDtcblxuICAgICAgICB0b3AgLT0gX2RpZmY7XG4gICAgICAgIHRyYW5zZm9ybU9yaWdpbi52ZXJ0aWNhbCArPSBfZGlmZjtcbiAgICAgIH1cblxuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gKDAsIF93YXJuaW5nLmRlZmF1bHQpKGVsZW1SZWN0LmhlaWdodCA8IGhlaWdodFRocmVzaG9sZCB8fCAhZWxlbVJlY3QuaGVpZ2h0IHx8ICFoZWlnaHRUaHJlc2hvbGQsIFsnTWF0ZXJpYWwtVUk6IHRoZSBwb3BvdmVyIGNvbXBvbmVudCBpcyB0b28gdGFsbC4nLCBcIlNvbWUgcGFydCBvZiBpdCBjYW4gbm90IGJlIHNlZW4gb24gdGhlIHNjcmVlbiAoXCIuY29uY2F0KGVsZW1SZWN0LmhlaWdodCAtIGhlaWdodFRocmVzaG9sZCwgXCJweCkuXCIpLCAnUGxlYXNlIGNvbnNpZGVyIGFkZGluZyBhIGBtYXgtaGVpZ2h0YCB0byBpbXByb3ZlIHRoZSB1c2VyLWV4cGVyaWVuY2UuJ10uam9pbignXFxuJykpIDogdm9pZCAwOyAvLyBDaGVjayBpZiB0aGUgaG9yaXpvbnRhbCBheGlzIG5lZWRzIHNoaWZ0aW5nXG5cbiAgICAgIGlmIChsZWZ0IDwgbWFyZ2luVGhyZXNob2xkKSB7XG4gICAgICAgIHZhciBfZGlmZjIgPSBsZWZ0IC0gbWFyZ2luVGhyZXNob2xkO1xuXG4gICAgICAgIGxlZnQgLT0gX2RpZmYyO1xuICAgICAgICB0cmFuc2Zvcm1PcmlnaW4uaG9yaXpvbnRhbCArPSBfZGlmZjI7XG4gICAgICB9IGVsc2UgaWYgKHJpZ2h0ID4gd2lkdGhUaHJlc2hvbGQpIHtcbiAgICAgICAgdmFyIF9kaWZmMyA9IHJpZ2h0IC0gd2lkdGhUaHJlc2hvbGQ7XG5cbiAgICAgICAgbGVmdCAtPSBfZGlmZjM7XG4gICAgICAgIHRyYW5zZm9ybU9yaWdpbi5ob3Jpem9udGFsICs9IF9kaWZmMztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdG9wOiBcIlwiLmNvbmNhdCh0b3AsIFwicHhcIiksXG4gICAgICAgIGxlZnQ6IFwiXCIuY29uY2F0KGxlZnQsIFwicHhcIiksXG4gICAgICAgIHRyYW5zZm9ybU9yaWdpbjogZ2V0VHJhbnNmb3JtT3JpZ2luVmFsdWUodHJhbnNmb3JtT3JpZ2luKVxuICAgICAgfTtcbiAgICB9LCBfdGhpcy50cmFuc2l0aW9uRWwgPSB1bmRlZmluZWQsIF90aGlzLmhhbmRsZUdldE9mZnNldFRvcCA9IGdldE9mZnNldFRvcCwgX3RoaXMuaGFuZGxlR2V0T2Zmc2V0TGVmdCA9IGdldE9mZnNldExlZnQsIF90aGlzLmhhbmRsZUVudGVyID0gZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICAgIGlmIChfdGhpcy5wcm9wcy5vbkVudGVyKSB7XG4gICAgICAgIF90aGlzLnByb3BzLm9uRW50ZXIoZWxlbWVudCk7XG4gICAgICB9XG5cbiAgICAgIF90aGlzLnNldFBvc2l0aW9uaW5nU3R5bGVzKGVsZW1lbnQpO1xuICAgIH0sIF90aGlzLmhhbmRsZVJlc2l6ZSA9ICgwLCBfZGVib3VuY2UuZGVmYXVsdCkoZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGVsZW1lbnQgPSBfcmVhY3REb20uZGVmYXVsdC5maW5kRE9NTm9kZShfdGhpcy50cmFuc2l0aW9uRWwpO1xuXG4gICAgICBfdGhpcy5zZXRQb3NpdGlvbmluZ1N0eWxlcyhlbGVtZW50KTtcbiAgICB9LCAxNjYpLCBfdGVtcCkpO1xuICB9XG5cbiAgKDAsIF9jcmVhdGVDbGFzczIuZGVmYXVsdCkoUG9wb3ZlciwgW3tcbiAgICBrZXk6IFwiY29tcG9uZW50RGlkTW91bnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICBpZiAodGhpcy5wcm9wcy5hY3Rpb24pIHtcbiAgICAgICAgdGhpcy5wcm9wcy5hY3Rpb24oe1xuICAgICAgICAgIHVwZGF0ZVBvc2l0aW9uOiB0aGlzLmhhbmRsZVJlc2l6ZVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0QW5jaG9yT2Zmc2V0XCIsXG4gICAgLy8gUmV0dXJucyB0aGUgdG9wL2xlZnQgb2Zmc2V0IG9mIHRoZSBwb3NpdGlvblxuICAgIC8vIHRvIGF0dGFjaCB0byBvbiB0aGUgYW5jaG9yIGVsZW1lbnQgKG9yIGJvZHkgaWYgbm9uZSBpcyBwcm92aWRlZClcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0QW5jaG9yT2Zmc2V0KGNvbnRlbnRBbmNob3JPZmZzZXQpIHtcbiAgICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGFuY2hvckVsID0gX3Byb3BzLmFuY2hvckVsLFxuICAgICAgICAgIGFuY2hvck9yaWdpbiA9IF9wcm9wcy5hbmNob3JPcmlnaW4sXG4gICAgICAgICAgYW5jaG9yUmVmZXJlbmNlID0gX3Byb3BzLmFuY2hvclJlZmVyZW5jZSxcbiAgICAgICAgICBhbmNob3JQb3NpdGlvbiA9IF9wcm9wcy5hbmNob3JQb3NpdGlvbjtcblxuICAgICAgaWYgKGFuY2hvclJlZmVyZW5jZSA9PT0gJ2FuY2hvclBvc2l0aW9uJykge1xuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyAoMCwgX3dhcm5pbmcuZGVmYXVsdCkoYW5jaG9yUG9zaXRpb24sICdNYXRlcmlhbC1VSTogeW91IG5lZWQgdG8gcHJvdmlkZSBhIGBhbmNob3JQb3NpdGlvbmAgcHJvcGVydHkgd2hlbiB1c2luZyAnICsgJzxQb3BvdmVyIGFuY2hvclJlZmVyZW5jZT1cImFuY2hvclBvc2l0aW9uXCIgLz4uJykgOiB2b2lkIDA7XG4gICAgICAgIHJldHVybiBhbmNob3JQb3NpdGlvbjtcbiAgICAgIH0gLy8gSWYgYW4gYW5jaG9yIGVsZW1lbnQgd2Fzbid0IHByb3ZpZGVkLCBqdXN0IHVzZSB0aGUgcGFyZW50IGJvZHkgZWxlbWVudCBvZiB0aGlzIFBvcG92ZXJcblxuXG4gICAgICB2YXIgYW5jaG9yRWxlbWVudCA9IGdldEFuY2hvckVsKGFuY2hvckVsKSB8fCAoMCwgX293bmVyRG9jdW1lbnQuZGVmYXVsdCkoX3JlYWN0RG9tLmRlZmF1bHQuZmluZERPTU5vZGUodGhpcy50cmFuc2l0aW9uRWwpKS5ib2R5O1xuICAgICAgdmFyIGFuY2hvclJlY3QgPSBhbmNob3JFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgdmFyIGFuY2hvclZlcnRpY2FsID0gY29udGVudEFuY2hvck9mZnNldCA9PT0gMCA/IGFuY2hvck9yaWdpbi52ZXJ0aWNhbCA6ICdjZW50ZXInO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdG9wOiBhbmNob3JSZWN0LnRvcCArIHRoaXMuaGFuZGxlR2V0T2Zmc2V0VG9wKGFuY2hvclJlY3QsIGFuY2hvclZlcnRpY2FsKSxcbiAgICAgICAgbGVmdDogYW5jaG9yUmVjdC5sZWZ0ICsgdGhpcy5oYW5kbGVHZXRPZmZzZXRMZWZ0KGFuY2hvclJlY3QsIGFuY2hvck9yaWdpbi5ob3Jpem9udGFsKVxuICAgICAgfTtcbiAgICB9IC8vIFJldHVybnMgdGhlIHZlcnRpY2FsIG9mZnNldCBvZiBpbm5lciBjb250ZW50IHRvIGFuY2hvciB0aGUgdHJhbnNmb3JtIG9uIGlmIHByb3ZpZGVkXG5cbiAgfSwge1xuICAgIGtleTogXCJnZXRDb250ZW50QW5jaG9yT2Zmc2V0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldENvbnRlbnRBbmNob3JPZmZzZXQoZWxlbWVudCkge1xuICAgICAgdmFyIF9wcm9wczIgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGdldENvbnRlbnRBbmNob3JFbCA9IF9wcm9wczIuZ2V0Q29udGVudEFuY2hvckVsLFxuICAgICAgICAgIGFuY2hvclJlZmVyZW5jZSA9IF9wcm9wczIuYW5jaG9yUmVmZXJlbmNlO1xuICAgICAgdmFyIGNvbnRlbnRBbmNob3JPZmZzZXQgPSAwO1xuXG4gICAgICBpZiAoZ2V0Q29udGVudEFuY2hvckVsICYmIGFuY2hvclJlZmVyZW5jZSA9PT0gJ2FuY2hvckVsJykge1xuICAgICAgICB2YXIgY29udGVudEFuY2hvckVsID0gZ2V0Q29udGVudEFuY2hvckVsKGVsZW1lbnQpO1xuXG4gICAgICAgIGlmIChjb250ZW50QW5jaG9yRWwgJiYgKDAsIF9jb250YWlucy5kZWZhdWx0KShlbGVtZW50LCBjb250ZW50QW5jaG9yRWwpKSB7XG4gICAgICAgICAgdmFyIHNjcm9sbFRvcCA9IGdldFNjcm9sbFBhcmVudChlbGVtZW50LCBjb250ZW50QW5jaG9yRWwpO1xuICAgICAgICAgIGNvbnRlbnRBbmNob3JPZmZzZXQgPSBjb250ZW50QW5jaG9yRWwub2Zmc2V0VG9wICsgY29udGVudEFuY2hvckVsLmNsaWVudEhlaWdodCAvIDIgLSBzY3JvbGxUb3AgfHwgMDtcbiAgICAgICAgfSAvLyAhPSB0aGUgZGVmYXVsdCB2YWx1ZVxuXG5cbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gKDAsIF93YXJuaW5nLmRlZmF1bHQpKHRoaXMucHJvcHMuYW5jaG9yT3JpZ2luLnZlcnRpY2FsID09PSAndG9wJywgWydNYXRlcmlhbC1VSTogeW91IGNhbiBub3QgY2hhbmdlIHRoZSBkZWZhdWx0IGBhbmNob3JPcmlnaW4udmVydGljYWxgIHZhbHVlICcsICd3aGVuIGFsc28gcHJvdmlkaW5nIHRoZSBgZ2V0Q29udGVudEFuY2hvckVsYCBwcm9wZXJ0eSB0byB0aGUgcG9wb3ZlciBjb21wb25lbnQuJywgJ09ubHkgdXNlIG9uZSBvZiB0aGUgdHdvIHByb3BlcnRpZXMuJywgJ1NldCBgZ2V0Q29udGVudEFuY2hvckVsYCB0byBudWxsIG9yIGxlZnQgYGFuY2hvck9yaWdpbi52ZXJ0aWNhbGAgdW5jaGFuZ2VkLiddLmpvaW4oJ1xcbicpKSA6IHZvaWQgMDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNvbnRlbnRBbmNob3JPZmZzZXQ7XG4gICAgfSAvLyBSZXR1cm4gdGhlIGJhc2UgdHJhbnNmb3JtIG9yaWdpbiB1c2luZyB0aGUgZWxlbWVudFxuICAgIC8vIGFuZCB0YWtpbmcgdGhlIGNvbnRlbnQgYW5jaG9yIG9mZnNldCBpbnRvIGFjY291bnQgaWYgaW4gdXNlXG5cbiAgfSwge1xuICAgIGtleTogXCJnZXRUcmFuc2Zvcm1PcmlnaW5cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0VHJhbnNmb3JtT3JpZ2luKGVsZW1SZWN0KSB7XG4gICAgICB2YXIgY29udGVudEFuY2hvck9mZnNldCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogMDtcbiAgICAgIHZhciB0cmFuc2Zvcm1PcmlnaW4gPSB0aGlzLnByb3BzLnRyYW5zZm9ybU9yaWdpbjtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHZlcnRpY2FsOiB0aGlzLmhhbmRsZUdldE9mZnNldFRvcChlbGVtUmVjdCwgdHJhbnNmb3JtT3JpZ2luLnZlcnRpY2FsKSArIGNvbnRlbnRBbmNob3JPZmZzZXQsXG4gICAgICAgIGhvcml6b250YWw6IHRoaXMuaGFuZGxlR2V0T2Zmc2V0TGVmdChlbGVtUmVjdCwgdHJhbnNmb3JtT3JpZ2luLmhvcml6b250YWwpXG4gICAgICB9O1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICAvLyBDb3JyZXNwb25kcyB0byAxMCBmcmFtZXMgYXQgNjAgSHouXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICB2YXIgX3Byb3BzMyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgYWN0aW9uID0gX3Byb3BzMy5hY3Rpb24sXG4gICAgICAgICAgYW5jaG9yRWwgPSBfcHJvcHMzLmFuY2hvckVsLFxuICAgICAgICAgIGFuY2hvck9yaWdpbiA9IF9wcm9wczMuYW5jaG9yT3JpZ2luLFxuICAgICAgICAgIGFuY2hvclBvc2l0aW9uID0gX3Byb3BzMy5hbmNob3JQb3NpdGlvbixcbiAgICAgICAgICBhbmNob3JSZWZlcmVuY2UgPSBfcHJvcHMzLmFuY2hvclJlZmVyZW5jZSxcbiAgICAgICAgICBjaGlsZHJlbiA9IF9wcm9wczMuY2hpbGRyZW4sXG4gICAgICAgICAgY2xhc3NlcyA9IF9wcm9wczMuY2xhc3NlcyxcbiAgICAgICAgICBjb250YWluZXJQcm9wID0gX3Byb3BzMy5jb250YWluZXIsXG4gICAgICAgICAgZWxldmF0aW9uID0gX3Byb3BzMy5lbGV2YXRpb24sXG4gICAgICAgICAgZ2V0Q29udGVudEFuY2hvckVsID0gX3Byb3BzMy5nZXRDb250ZW50QW5jaG9yRWwsXG4gICAgICAgICAgbWFyZ2luVGhyZXNob2xkID0gX3Byb3BzMy5tYXJnaW5UaHJlc2hvbGQsXG4gICAgICAgICAgb25FbnRlciA9IF9wcm9wczMub25FbnRlcixcbiAgICAgICAgICBvbkVudGVyZWQgPSBfcHJvcHMzLm9uRW50ZXJlZCxcbiAgICAgICAgICBvbkVudGVyaW5nID0gX3Byb3BzMy5vbkVudGVyaW5nLFxuICAgICAgICAgIG9uRXhpdCA9IF9wcm9wczMub25FeGl0LFxuICAgICAgICAgIG9uRXhpdGVkID0gX3Byb3BzMy5vbkV4aXRlZCxcbiAgICAgICAgICBvbkV4aXRpbmcgPSBfcHJvcHMzLm9uRXhpdGluZyxcbiAgICAgICAgICBvcGVuID0gX3Byb3BzMy5vcGVuLFxuICAgICAgICAgIFBhcGVyUHJvcHMgPSBfcHJvcHMzLlBhcGVyUHJvcHMsXG4gICAgICAgICAgcm9sZSA9IF9wcm9wczMucm9sZSxcbiAgICAgICAgICB0cmFuc2Zvcm1PcmlnaW4gPSBfcHJvcHMzLnRyYW5zZm9ybU9yaWdpbixcbiAgICAgICAgICBUcmFuc2l0aW9uQ29tcG9uZW50ID0gX3Byb3BzMy5UcmFuc2l0aW9uQ29tcG9uZW50LFxuICAgICAgICAgIHRyYW5zaXRpb25EdXJhdGlvblByb3AgPSBfcHJvcHMzLnRyYW5zaXRpb25EdXJhdGlvbixcbiAgICAgICAgICBUcmFuc2l0aW9uUHJvcHMgPSBfcHJvcHMzLlRyYW5zaXRpb25Qcm9wcyxcbiAgICAgICAgICBvdGhlciA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyLmRlZmF1bHQpKF9wcm9wczMsIFtcImFjdGlvblwiLCBcImFuY2hvckVsXCIsIFwiYW5jaG9yT3JpZ2luXCIsIFwiYW5jaG9yUG9zaXRpb25cIiwgXCJhbmNob3JSZWZlcmVuY2VcIiwgXCJjaGlsZHJlblwiLCBcImNsYXNzZXNcIiwgXCJjb250YWluZXJcIiwgXCJlbGV2YXRpb25cIiwgXCJnZXRDb250ZW50QW5jaG9yRWxcIiwgXCJtYXJnaW5UaHJlc2hvbGRcIiwgXCJvbkVudGVyXCIsIFwib25FbnRlcmVkXCIsIFwib25FbnRlcmluZ1wiLCBcIm9uRXhpdFwiLCBcIm9uRXhpdGVkXCIsIFwib25FeGl0aW5nXCIsIFwib3BlblwiLCBcIlBhcGVyUHJvcHNcIiwgXCJyb2xlXCIsIFwidHJhbnNmb3JtT3JpZ2luXCIsIFwiVHJhbnNpdGlvbkNvbXBvbmVudFwiLCBcInRyYW5zaXRpb25EdXJhdGlvblwiLCBcIlRyYW5zaXRpb25Qcm9wc1wiXSk7XG4gICAgICB2YXIgdHJhbnNpdGlvbkR1cmF0aW9uID0gdHJhbnNpdGlvbkR1cmF0aW9uUHJvcDtcblxuICAgICAgaWYgKHRyYW5zaXRpb25EdXJhdGlvblByb3AgPT09ICdhdXRvJyAmJiAhVHJhbnNpdGlvbkNvbXBvbmVudC5tdWlTdXBwb3J0QXV0bykge1xuICAgICAgICB0cmFuc2l0aW9uRHVyYXRpb24gPSB1bmRlZmluZWQ7XG4gICAgICB9IC8vIElmIHRoZSBjb250YWluZXIgcHJvcCBpcyBwcm92aWRlZCwgdXNlIHRoYXRcbiAgICAgIC8vIElmIHRoZSBhbmNob3JFbCBwcm9wIGlzIHByb3ZpZGVkLCB1c2UgaXRzIHBhcmVudCBib2R5IGVsZW1lbnQgYXMgdGhlIGNvbnRhaW5lclxuICAgICAgLy8gSWYgbmVpdGhlciBhcmUgcHJvdmlkZWQgbGV0IHRoZSBNb2RhbCB0YWtlIGNhcmUgb2YgY2hvb3NpbmcgdGhlIGNvbnRhaW5lclxuXG5cbiAgICAgIHZhciBjb250YWluZXIgPSBjb250YWluZXJQcm9wIHx8IChhbmNob3JFbCA/ICgwLCBfb3duZXJEb2N1bWVudC5kZWZhdWx0KShnZXRBbmNob3JFbChhbmNob3JFbCkpLmJvZHkgOiB1bmRlZmluZWQpO1xuICAgICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX01vZGFsLmRlZmF1bHQsICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe1xuICAgICAgICBjb250YWluZXI6IGNvbnRhaW5lcixcbiAgICAgICAgb3Blbjogb3BlbixcbiAgICAgICAgQmFja2Ryb3BQcm9wczoge1xuICAgICAgICAgIGludmlzaWJsZTogdHJ1ZVxuICAgICAgICB9XG4gICAgICB9LCBvdGhlciksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoVHJhbnNpdGlvbkNvbXBvbmVudCwgKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7XG4gICAgICAgIGFwcGVhcjogdHJ1ZSxcbiAgICAgICAgXCJpblwiOiBvcGVuLFxuICAgICAgICBvbkVudGVyOiB0aGlzLmhhbmRsZUVudGVyLFxuICAgICAgICBvbkVudGVyZWQ6IG9uRW50ZXJlZCxcbiAgICAgICAgb25FbnRlcmluZzogb25FbnRlcmluZyxcbiAgICAgICAgb25FeGl0OiBvbkV4aXQsXG4gICAgICAgIG9uRXhpdGVkOiBvbkV4aXRlZCxcbiAgICAgICAgb25FeGl0aW5nOiBvbkV4aXRpbmcsXG4gICAgICAgIHJvbGU6IHJvbGUsXG4gICAgICAgIHJlZjogZnVuY3Rpb24gcmVmKG5vZGUpIHtcbiAgICAgICAgICBfdGhpczIudHJhbnNpdGlvbkVsID0gbm9kZTtcbiAgICAgICAgfSxcbiAgICAgICAgdGltZW91dDogdHJhbnNpdGlvbkR1cmF0aW9uXG4gICAgICB9LCBUcmFuc2l0aW9uUHJvcHMpLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9QYXBlci5kZWZhdWx0LCAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHtcbiAgICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzLnBhcGVyLFxuICAgICAgICBlbGV2YXRpb246IGVsZXZhdGlvblxuICAgICAgfSwgUGFwZXJQcm9wcyksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0RXZlbnRMaXN0ZW5lci5kZWZhdWx0LCB7XG4gICAgICAgIHRhcmdldDogXCJ3aW5kb3dcIixcbiAgICAgICAgb25SZXNpemU6IHRoaXMuaGFuZGxlUmVzaXplXG4gICAgICB9KSwgY2hpbGRyZW4pKSk7XG4gICAgfVxuICB9XSk7XG4gIHJldHVybiBQb3BvdmVyO1xufShfcmVhY3QuZGVmYXVsdC5Db21wb25lbnQpO1xuXG5Qb3BvdmVyLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqXG4gICAqIFRoaXMgaXMgY2FsbGJhY2sgcHJvcGVydHkuIEl0J3MgY2FsbGVkIGJ5IHRoZSBjb21wb25lbnQgb24gbW91bnQuXG4gICAqIFRoaXMgaXMgdXNlZnVsIHdoZW4geW91IHdhbnQgdG8gdHJpZ2dlciBhbiBhY3Rpb24gcHJvZ3JhbW1hdGljYWxseS5cbiAgICogSXQgY3VycmVudGx5IG9ubHkgc3VwcG9ydHMgdXBkYXRlUG9zaXRpb24oKSBhY3Rpb24uXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBhY3Rpb25zIFRoaXMgb2JqZWN0IGNvbnRhaW5zIGFsbCBwb3NpYmxlIGFjdGlvbnNcbiAgICogdGhhdCBjYW4gYmUgdHJpZ2dlcmVkIHByb2dyYW1tYXRpY2FsbHkuXG4gICAqL1xuICBhY3Rpb246IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBUaGlzIGlzIHRoZSBET00gZWxlbWVudCwgb3IgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlIERPTSBlbGVtZW50LFxuICAgKiB0aGF0IG1heSBiZSB1c2VkIHRvIHNldCB0aGUgcG9zaXRpb24gb2YgdGhlIHBvcG92ZXIuXG4gICAqL1xuICBhbmNob3JFbDogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdCwgX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmNdKSxcblxuICAvKipcbiAgICogVGhpcyBpcyB0aGUgcG9pbnQgb24gdGhlIGFuY2hvciB3aGVyZSB0aGUgcG9wb3ZlcidzXG4gICAqIGBhbmNob3JFbGAgd2lsbCBhdHRhY2ggdG8uIFRoaXMgaXMgbm90IHVzZWQgd2hlbiB0aGVcbiAgICogYW5jaG9yUmVmZXJlbmNlIGlzICdhbmNob3JQb3NpdGlvbicuXG4gICAqXG4gICAqIE9wdGlvbnM6XG4gICAqIHZlcnRpY2FsOiBbdG9wLCBjZW50ZXIsIGJvdHRvbV07XG4gICAqIGhvcml6b250YWw6IFtsZWZ0LCBjZW50ZXIsIHJpZ2h0XS5cbiAgICovXG4gIGFuY2hvck9yaWdpbjogX3Byb3BUeXBlcy5kZWZhdWx0LnNoYXBlKHtcbiAgICBob3Jpem9udGFsOiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzLmRlZmF1bHQubnVtYmVyLCBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2YoWydsZWZ0JywgJ2NlbnRlcicsICdyaWdodCddKV0pLFxuICAgIHZlcnRpY2FsOiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzLmRlZmF1bHQubnVtYmVyLCBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2YoWyd0b3AnLCAnY2VudGVyJywgJ2JvdHRvbSddKV0pXG4gIH0pLFxuXG4gIC8qKlxuICAgKiBUaGlzIGlzIHRoZSBwb3NpdGlvbiB0aGF0IG1heSBiZSB1c2VkXG4gICAqIHRvIHNldCB0aGUgcG9zaXRpb24gb2YgdGhlIHBvcG92ZXIuXG4gICAqIFRoZSBjb29yZGluYXRlcyBhcmUgcmVsYXRpdmUgdG9cbiAgICogdGhlIGFwcGxpY2F0aW9uJ3MgY2xpZW50IGFyZWEuXG4gICAqL1xuICBhbmNob3JQb3NpdGlvbjogX3Byb3BUeXBlcy5kZWZhdWx0LnNoYXBlKHtcbiAgICB0b3A6IF9wcm9wVHlwZXMuZGVmYXVsdC5udW1iZXIsXG4gICAgbGVmdDogX3Byb3BUeXBlcy5kZWZhdWx0Lm51bWJlclxuICB9KSxcblxuICAvKlxuICAgKiBUaGlzIGRldGVybWluZXMgd2hpY2ggYW5jaG9yIHByb3AgdG8gcmVmZXIgdG8gdG8gc2V0XG4gICAqIHRoZSBwb3NpdGlvbiBvZiB0aGUgcG9wb3Zlci5cbiAgICovXG4gIGFuY2hvclJlZmVyZW5jZTogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mKFsnYW5jaG9yRWwnLCAnYW5jaG9yUG9zaXRpb24nLCAnbm9uZSddKSxcblxuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBfcHJvcFR5cGVzLmRlZmF1bHQubm9kZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MtYXBpKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBBIG5vZGUsIGNvbXBvbmVudCBpbnN0YW5jZSwgb3IgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGVpdGhlci5cbiAgICogVGhlIGBjb250YWluZXJgIHdpbGwgcGFzc2VkIHRvIHRoZSBNb2RhbCBjb21wb25lbnQuXG4gICAqIEJ5IGRlZmF1bHQsIGl0IHVzZXMgdGhlIGJvZHkgb2YgdGhlIGFuY2hvckVsJ3MgdG9wLWxldmVsIGRvY3VtZW50IG9iamVjdCxcbiAgICogc28gaXQncyBzaW1wbHkgYGRvY3VtZW50LmJvZHlgIG1vc3Qgb2YgdGhlIHRpbWUuXG4gICAqL1xuICBjb250YWluZXI6IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QsIF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jXSksXG5cbiAgLyoqXG4gICAqIFRoZSBlbGV2YXRpb24gb2YgdGhlIHBvcG92ZXIuXG4gICAqL1xuICBlbGV2YXRpb246IF9wcm9wVHlwZXMuZGVmYXVsdC5udW1iZXIsXG5cbiAgLyoqXG4gICAqIFRoaXMgZnVuY3Rpb24gaXMgY2FsbGVkIGluIG9yZGVyIHRvIHJldHJpZXZlIHRoZSBjb250ZW50IGFuY2hvciBlbGVtZW50LlxuICAgKiBJdCdzIHRoZSBvcHBvc2l0ZSBvZiB0aGUgYGFuY2hvckVsYCBwcm9wZXJ0eS5cbiAgICogVGhlIGNvbnRlbnQgYW5jaG9yIGVsZW1lbnQgc2hvdWxkIGJlIGFuIGVsZW1lbnQgaW5zaWRlIHRoZSBwb3BvdmVyLlxuICAgKiBJdCdzIHVzZWQgdG8gY29ycmVjdGx5IHNjcm9sbCBhbmQgc2V0IHRoZSBwb3NpdGlvbiBvZiB0aGUgcG9wb3Zlci5cbiAgICogVGhlIHBvc2l0aW9uaW5nIHN0cmF0ZWd5IHRyaWVzIHRvIG1ha2UgdGhlIGNvbnRlbnQgYW5jaG9yIGVsZW1lbnQganVzdCBhYm92ZSB0aGVcbiAgICogYW5jaG9yIGVsZW1lbnQuXG4gICAqL1xuICBnZXRDb250ZW50QW5jaG9yRWw6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBTcGVjaWZpZXMgaG93IGNsb3NlIHRvIHRoZSBlZGdlIG9mIHRoZSB3aW5kb3cgdGhlIHBvcG92ZXIgY2FuIGFwcGVhci5cbiAgICovXG4gIG1hcmdpblRocmVzaG9sZDogX3Byb3BUeXBlcy5kZWZhdWx0Lm51bWJlcixcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgY29tcG9uZW50IHJlcXVlc3RzIHRvIGJlIGNsb3NlZC5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGV2ZW50IFRoZSBldmVudCBzb3VyY2Ugb2YgdGhlIGNhbGxiYWNrLlxuICAgKi9cbiAgb25DbG9zZTogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGJlZm9yZSB0aGUgY29tcG9uZW50IGlzIGVudGVyaW5nLlxuICAgKi9cbiAgb25FbnRlcjogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIGNvbXBvbmVudCBoYXMgZW50ZXJlZC5cbiAgICovXG4gIG9uRW50ZXJlZDogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBlbnRlcmluZy5cbiAgICovXG4gIG9uRW50ZXJpbmc6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBiZWZvcmUgdGhlIGNvbXBvbmVudCBpcyBleGl0aW5nLlxuICAgKi9cbiAgb25FeGl0OiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgY29tcG9uZW50IGhhcyBleGl0ZWQuXG4gICAqL1xuICBvbkV4aXRlZDogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBleGl0aW5nLlxuICAgKi9cbiAgb25FeGl0aW5nOiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYyxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgcG9wb3ZlciBpcyB2aXNpYmxlLlxuICAgKi9cbiAgb3BlbjogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogUHJvcGVydGllcyBhcHBsaWVkIHRvIHRoZSBgUGFwZXJgIGVsZW1lbnQuXG4gICAqL1xuICBQYXBlclByb3BzOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICByb2xlOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGlzIGlzIHRoZSBwb2ludCBvbiB0aGUgcG9wb3ZlciB3aGljaFxuICAgKiB3aWxsIGF0dGFjaCB0byB0aGUgYW5jaG9yJ3Mgb3JpZ2luLlxuICAgKlxuICAgKiBPcHRpb25zOlxuICAgKiB2ZXJ0aWNhbDogW3RvcCwgY2VudGVyLCBib3R0b20sIHgocHgpXTtcbiAgICogaG9yaXpvbnRhbDogW2xlZnQsIGNlbnRlciwgcmlnaHQsIHgocHgpXS5cbiAgICovXG4gIHRyYW5zZm9ybU9yaWdpbjogX3Byb3BUeXBlcy5kZWZhdWx0LnNoYXBlKHtcbiAgICBob3Jpem9udGFsOiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzLmRlZmF1bHQubnVtYmVyLCBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2YoWydsZWZ0JywgJ2NlbnRlcicsICdyaWdodCddKV0pLFxuICAgIHZlcnRpY2FsOiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzLmRlZmF1bHQubnVtYmVyLCBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2YoWyd0b3AnLCAnY2VudGVyJywgJ2JvdHRvbSddKV0pXG4gIH0pLFxuXG4gIC8qKlxuICAgKiBUcmFuc2l0aW9uIGNvbXBvbmVudC5cbiAgICovXG4gIFRyYW5zaXRpb25Db21wb25lbnQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsIF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jXSksXG5cbiAgLyoqXG4gICAqIFNldCB0byAnYXV0bycgdG8gYXV0b21hdGljYWxseSBjYWxjdWxhdGUgdHJhbnNpdGlvbiB0aW1lIGJhc2VkIG9uIGhlaWdodC5cbiAgICovXG4gIHRyYW5zaXRpb25EdXJhdGlvbjogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlcy5kZWZhdWx0Lm51bWJlciwgX3Byb3BUeXBlcy5kZWZhdWx0LnNoYXBlKHtcbiAgICBlbnRlcjogX3Byb3BUeXBlcy5kZWZhdWx0Lm51bWJlcixcbiAgICBleGl0OiBfcHJvcFR5cGVzLmRlZmF1bHQubnVtYmVyXG4gIH0pLCBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2YoWydhdXRvJ10pXSksXG5cbiAgLyoqXG4gICAqIFByb3BlcnRpZXMgYXBwbGllZCB0byB0aGUgYFRyYW5zaXRpb25gIGVsZW1lbnQuXG4gICAqL1xuICBUcmFuc2l0aW9uUHJvcHM6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3Rcbn0gOiB7fTtcblBvcG92ZXIuZGVmYXVsdFByb3BzID0ge1xuICBhbmNob3JSZWZlcmVuY2U6ICdhbmNob3JFbCcsXG4gIGFuY2hvck9yaWdpbjoge1xuICAgIHZlcnRpY2FsOiAndG9wJyxcbiAgICBob3Jpem9udGFsOiAnbGVmdCdcbiAgfSxcbiAgZWxldmF0aW9uOiA4LFxuICBtYXJnaW5UaHJlc2hvbGQ6IDE2LFxuICB0cmFuc2Zvcm1PcmlnaW46IHtcbiAgICB2ZXJ0aWNhbDogJ3RvcCcsXG4gICAgaG9yaXpvbnRhbDogJ2xlZnQnXG4gIH0sXG4gIFRyYW5zaXRpb25Db21wb25lbnQ6IF9Hcm93LmRlZmF1bHQsXG4gIHRyYW5zaXRpb25EdXJhdGlvbjogJ2F1dG8nXG59O1xuXG52YXIgX2RlZmF1bHQgPSAoMCwgX3dpdGhTdHlsZXMuZGVmYXVsdCkoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlQb3BvdmVyJ1xufSkoUG9wb3Zlcik7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5zdHlsZXMgPSB2b2lkIDA7XG5cbnZhciBfZXh0ZW5kczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vZXh0ZW5kc1wiKSk7XG5cbnZhciBfZGVmaW5lUHJvcGVydHkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2RlZmluZVByb3BlcnR5XCIpKTtcblxudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIikpO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xuXG52YXIgX2NsYXNzbmFtZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJjbGFzc25hbWVzXCIpKTtcblxudmFyIF93aXRoU3R5bGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vc3R5bGVzL3dpdGhTdHlsZXNcIikpO1xuXG52YXIgX2hlbHBlcnMgPSByZXF1aXJlKFwiLi4vdXRpbHMvaGVscGVyc1wiKTtcblxudmFyIHN0eWxlcyA9IGZ1bmN0aW9uIHN0eWxlcyh0aGVtZSkge1xuICByZXR1cm4ge1xuICAgIHJvb3Q6IHRoZW1lLm1peGlucy5ndXR0ZXJzKHtcbiAgICAgIGJveFNpemluZzogJ2JvcmRlci1ib3gnLFxuICAgICAgbGluZUhlaWdodDogJzQ4cHgnLFxuICAgICAgbGlzdFN0eWxlOiAnbm9uZScsXG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS50ZXh0LnNlY29uZGFyeSxcbiAgICAgIGZvbnRGYW1pbHk6IHRoZW1lLnR5cG9ncmFwaHkuZm9udEZhbWlseSxcbiAgICAgIGZvbnRXZWlnaHQ6IHRoZW1lLnR5cG9ncmFwaHkuZm9udFdlaWdodE1lZGl1bSxcbiAgICAgIGZvbnRTaXplOiB0aGVtZS50eXBvZ3JhcGh5LnB4VG9SZW0oMTQpXG4gICAgfSksXG4gICAgY29sb3JQcmltYXJ5OiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5wcmltYXJ5Lm1haW5cbiAgICB9LFxuICAgIGNvbG9ySW5oZXJpdDoge1xuICAgICAgY29sb3I6ICdpbmhlcml0J1xuICAgIH0sXG4gICAgaW5zZXQ6IHtcbiAgICAgIHBhZGRpbmdMZWZ0OiB0aGVtZS5zcGFjaW5nLnVuaXQgKiA5XG4gICAgfSxcbiAgICBzdGlja3k6IHtcbiAgICAgIHBvc2l0aW9uOiAnc3RpY2t5JyxcbiAgICAgIHRvcDogMCxcbiAgICAgIHpJbmRleDogMSxcbiAgICAgIGJhY2tncm91bmRDb2xvcjogJ2luaGVyaXQnXG4gICAgfVxuICB9O1xufTtcblxuZXhwb3J0cy5zdHlsZXMgPSBzdHlsZXM7XG5cbmZ1bmN0aW9uIExpc3RTdWJoZWFkZXIocHJvcHMpIHtcbiAgdmFyIF9jbGFzc05hbWVzO1xuXG4gIHZhciBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIGNvbG9yID0gcHJvcHMuY29sb3IsXG4gICAgICBDb21wb25lbnQgPSBwcm9wcy5jb21wb25lbnQsXG4gICAgICBkaXNhYmxlU3RpY2t5ID0gcHJvcHMuZGlzYWJsZVN0aWNreSxcbiAgICAgIGluc2V0ID0gcHJvcHMuaW5zZXQsXG4gICAgICBvdGhlciA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyLmRlZmF1bHQpKHByb3BzLCBbXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29sb3JcIiwgXCJjb21wb25lbnRcIiwgXCJkaXNhYmxlU3RpY2t5XCIsIFwiaW5zZXRcIl0pO1xuICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChDb21wb25lbnQsICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe1xuICAgIGNsYXNzTmFtZTogKDAsIF9jbGFzc25hbWVzLmRlZmF1bHQpKGNsYXNzZXMucm9vdCwgKF9jbGFzc05hbWVzID0ge30sICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKF9jbGFzc05hbWVzLCBjbGFzc2VzW1wiY29sb3JcIi5jb25jYXQoKDAsIF9oZWxwZXJzLmNhcGl0YWxpemUpKGNvbG9yKSldLCBjb2xvciAhPT0gJ2RlZmF1bHQnKSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2NsYXNzTmFtZXMsIGNsYXNzZXMuaW5zZXQsIGluc2V0KSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2NsYXNzTmFtZXMsIGNsYXNzZXMuc3RpY2t5LCAhZGlzYWJsZVN0aWNreSksIF9jbGFzc05hbWVzKSwgY2xhc3NOYW1lKVxuICB9LCBvdGhlcikpO1xufVxuXG5MaXN0U3ViaGVhZGVyLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogX3Byb3BUeXBlcy5kZWZhdWx0Lm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzLWFwaSkgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29sb3Igb2YgdGhlIGNvbXBvbmVudC4gSXQgc3VwcG9ydHMgdGhvc2UgdGhlbWUgY29sb3JzIHRoYXQgbWFrZSBzZW5zZSBmb3IgdGhpcyBjb21wb25lbnQuXG4gICAqL1xuICBjb2xvcjogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mKFsnZGVmYXVsdCcsICdwcmltYXJ5JywgJ2luaGVyaXQnXSksXG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIERPTSBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgY29tcG9uZW50OiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLCBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuY10pLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBMaXN0IFN1YmhlYWRlciB3aWxsIG5vdCBzdGljayB0byB0aGUgdG9wIGR1cmluZyBzY3JvbGwuXG4gICAqL1xuICBkaXNhYmxlU3RpY2t5OiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgTGlzdCBTdWJoZWFkZXIgd2lsbCBiZSBpbmRlbnRlZC5cbiAgICovXG4gIGluc2V0OiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbFxufSA6IHt9O1xuTGlzdFN1YmhlYWRlci5kZWZhdWx0UHJvcHMgPSB7XG4gIGNvbG9yOiAnZGVmYXVsdCcsXG4gIGNvbXBvbmVudDogJ2xpJyxcbiAgZGlzYWJsZVN0aWNreTogZmFsc2UsXG4gIGluc2V0OiBmYWxzZVxufTtcbkxpc3RTdWJoZWFkZXIubXVpTmFtZSA9ICdMaXN0U3ViaGVhZGVyJztcblxudmFyIF9kZWZhdWx0ID0gKDAsIF93aXRoU3R5bGVzLmRlZmF1bHQpKHN0eWxlcywge1xuICBuYW1lOiAnTXVpTGlzdFN1YmhlYWRlcidcbn0pKExpc3RTdWJoZWFkZXIpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuc3R5bGVzID0gdm9pZCAwO1xuXG52YXIgX2V4dGVuZHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2V4dGVuZHNcIikpO1xuXG52YXIgX2RlZmluZVByb3BlcnR5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9kZWZpbmVQcm9wZXJ0eVwiKSk7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCIpKTtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKTtcblxudmFyIF9jbGFzc25hbWVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY2xhc3NuYW1lc1wiKSk7XG5cbnZhciBfd2l0aFN0eWxlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3N0eWxlcy93aXRoU3R5bGVzXCIpKTtcblxudmFyIF9UeXBvZ3JhcGh5ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vVHlwb2dyYXBoeVwiKSk7XG5cbnZhciBzdHlsZXMgPSBmdW5jdGlvbiBzdHlsZXModGhlbWUpIHtcbiAgcmV0dXJuIHtcbiAgICByb290OiB7XG4gICAgICBmbGV4OiAnMSAxIGF1dG8nLFxuICAgICAgbWluV2lkdGg6IDAsXG4gICAgICBwYWRkaW5nOiBcIjAgXCIuY29uY2F0KHRoZW1lLnNwYWNpbmcudW5pdCAqIDIsIFwicHhcIiksXG4gICAgICAnJjpmaXJzdC1jaGlsZCc6IHtcbiAgICAgICAgcGFkZGluZ0xlZnQ6IDBcbiAgICAgIH1cbiAgICB9LFxuICAgIGluc2V0OiB7XG4gICAgICAnJjpmaXJzdC1jaGlsZCc6IHtcbiAgICAgICAgcGFkZGluZ0xlZnQ6IHRoZW1lLnNwYWNpbmcudW5pdCAqIDdcbiAgICAgIH1cbiAgICB9LFxuICAgIGRlbnNlOiB7XG4gICAgICBmb250U2l6ZTogdGhlbWUudHlwb2dyYXBoeS5weFRvUmVtKDEzKVxuICAgIH0sXG4gICAgcHJpbWFyeToge1xuICAgICAgJyYkdGV4dERlbnNlJzoge1xuICAgICAgICBmb250U2l6ZTogJ2luaGVyaXQnXG4gICAgICB9XG4gICAgfSxcbiAgICBzZWNvbmRhcnk6IHtcbiAgICAgICcmJHRleHREZW5zZSc6IHtcbiAgICAgICAgZm9udFNpemU6ICdpbmhlcml0J1xuICAgICAgfVxuICAgIH0sXG4gICAgdGV4dERlbnNlOiB7fVxuICB9O1xufTtcblxuZXhwb3J0cy5zdHlsZXMgPSBzdHlsZXM7XG5cbmZ1bmN0aW9uIExpc3RJdGVtVGV4dChwcm9wcywgY29udGV4dCkge1xuICB2YXIgX2NsYXNzTmFtZXMzO1xuXG4gIHZhciBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBjbGFzc05hbWVQcm9wID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgZGlzYWJsZVR5cG9ncmFwaHkgPSBwcm9wcy5kaXNhYmxlVHlwb2dyYXBoeSxcbiAgICAgIGluc2V0ID0gcHJvcHMuaW5zZXQsXG4gICAgICBwcmltYXJ5UHJvcCA9IHByb3BzLnByaW1hcnksXG4gICAgICBzZWNvbmRhcnlQcm9wID0gcHJvcHMuc2Vjb25kYXJ5LFxuICAgICAgb3RoZXIgPSAoMCwgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMi5kZWZhdWx0KShwcm9wcywgW1wiY2hpbGRyZW5cIiwgXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwiZGlzYWJsZVR5cG9ncmFwaHlcIiwgXCJpbnNldFwiLCBcInByaW1hcnlcIiwgXCJzZWNvbmRhcnlcIl0pO1xuICB2YXIgZGVuc2UgPSBjb250ZXh0LmRlbnNlO1xuICB2YXIgcHJpbWFyeSA9IHByaW1hcnlQcm9wICE9IG51bGwgPyBwcmltYXJ5UHJvcCA6IGNoaWxkcmVuO1xuXG4gIGlmIChwcmltYXJ5ICE9IG51bGwgJiYgIWRpc2FibGVUeXBvZ3JhcGh5KSB7XG4gICAgcHJpbWFyeSA9IF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX1R5cG9ncmFwaHkuZGVmYXVsdCwge1xuICAgICAgdmFyaWFudDogXCJzdWJoZWFkaW5nXCIsXG4gICAgICBjbGFzc05hbWU6ICgwLCBfY2xhc3NuYW1lcy5kZWZhdWx0KShjbGFzc2VzLnByaW1hcnksICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKHt9LCBjbGFzc2VzLnRleHREZW5zZSwgZGVuc2UpKSxcbiAgICAgIGNvbXBvbmVudDogXCJzcGFuXCJcbiAgICB9LCBwcmltYXJ5KTtcbiAgfVxuXG4gIHZhciBzZWNvbmRhcnkgPSBzZWNvbmRhcnlQcm9wO1xuXG4gIGlmIChzZWNvbmRhcnkgIT0gbnVsbCAmJiAhZGlzYWJsZVR5cG9ncmFwaHkpIHtcbiAgICBzZWNvbmRhcnkgPSBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9UeXBvZ3JhcGh5LmRlZmF1bHQsIHtcbiAgICAgIHZhcmlhbnQ6IFwiYm9keTFcIixcbiAgICAgIGNsYXNzTmFtZTogKDAsIF9jbGFzc25hbWVzLmRlZmF1bHQpKGNsYXNzZXMuc2Vjb25kYXJ5LCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KSh7fSwgY2xhc3Nlcy50ZXh0RGVuc2UsIGRlbnNlKSksXG4gICAgICBjb2xvcjogXCJ0ZXh0U2Vjb25kYXJ5XCJcbiAgICB9LCBzZWNvbmRhcnkpO1xuICB9XG5cbiAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7XG4gICAgY2xhc3NOYW1lOiAoMCwgX2NsYXNzbmFtZXMuZGVmYXVsdCkoY2xhc3Nlcy5yb290LCAoX2NsYXNzTmFtZXMzID0ge30sICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKF9jbGFzc05hbWVzMywgY2xhc3Nlcy5kZW5zZSwgZGVuc2UpLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lczMsIGNsYXNzZXMuaW5zZXQsIGluc2V0KSwgX2NsYXNzTmFtZXMzKSwgY2xhc3NOYW1lUHJvcClcbiAgfSwgb3RoZXIpLCBwcmltYXJ5LCBzZWNvbmRhcnkpO1xufVxuXG5MaXN0SXRlbVRleHQucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKipcbiAgICogQWxpYXMgZm9yIHRoZSBgcHJpbWFyeWAgcHJvcGVydHkuXG4gICAqL1xuICBjaGlsZHJlbjogX3Byb3BUeXBlcy5kZWZhdWx0Lm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzLWFwaSkgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBjaGlsZHJlbiB3b24ndCBiZSB3cmFwcGVkIGJ5IGEgVHlwb2dyYXBoeSBjb21wb25lbnQuXG4gICAqIFRoaXMgY2FuIGJlIHVzZWZ1bCB0byByZW5kZXIgYW4gYWx0ZXJuYXRpdmUgVHlwb2dyYXBoeSB2YXJpYW50IGJ5IHdyYXBwaW5nXG4gICAqIHRoZSBgY2hpbGRyZW5gIChvciBgcHJpbWFyeWApIHRleHQsIGFuZCBvcHRpb25hbCBgc2Vjb25kYXJ5YCB0ZXh0XG4gICAqIHdpdGggdGhlIFR5cG9ncmFwaHkgY29tcG9uZW50LlxuICAgKi9cbiAgZGlzYWJsZVR5cG9ncmFwaHk6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBjaGlsZHJlbiB3aWxsIGJlIGluZGVudGVkLlxuICAgKiBUaGlzIHNob3VsZCBiZSB1c2VkIGlmIHRoZXJlIGlzIG5vIGxlZnQgYXZhdGFyIG9yIGxlZnQgaWNvbi5cbiAgICovXG4gIGluc2V0OiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogVGhlIG1haW4gY29udGVudCBlbGVtZW50LlxuICAgKi9cbiAgcHJpbWFyeTogX3Byb3BUeXBlcy5kZWZhdWx0Lm5vZGUsXG5cbiAgLyoqXG4gICAqIFRoZSBzZWNvbmRhcnkgY29udGVudCBlbGVtZW50LlxuICAgKi9cbiAgc2Vjb25kYXJ5OiBfcHJvcFR5cGVzLmRlZmF1bHQubm9kZVxufSA6IHt9O1xuTGlzdEl0ZW1UZXh0LmRlZmF1bHRQcm9wcyA9IHtcbiAgZGlzYWJsZVR5cG9ncmFwaHk6IGZhbHNlLFxuICBpbnNldDogZmFsc2Vcbn07XG5MaXN0SXRlbVRleHQuY29udGV4dFR5cGVzID0ge1xuICBkZW5zZTogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2xcbn07XG5cbnZhciBfZGVmYXVsdCA9ICgwLCBfd2l0aFN0eWxlcy5kZWZhdWx0KShzdHlsZXMsIHtcbiAgbmFtZTogJ011aUxpc3RJdGVtVGV4dCdcbn0pKExpc3RJdGVtVGV4dCk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5zdHlsZXMgPSB2b2lkIDA7XG5cbnZhciBfZXh0ZW5kczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vZXh0ZW5kc1wiKSk7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCIpKTtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKTtcblxudmFyIF9jbGFzc25hbWVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY2xhc3NuYW1lc1wiKSk7XG5cbnZhciBfd2l0aFN0eWxlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3N0eWxlcy93aXRoU3R5bGVzXCIpKTtcblxudmFyIHN0eWxlcyA9IHtcbiAgcm9vdDoge1xuICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgIHJpZ2h0OiA0LFxuICAgIHRvcDogJzUwJScsXG4gICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlWSgtNTAlKSdcbiAgfVxufTtcbmV4cG9ydHMuc3R5bGVzID0gc3R5bGVzO1xuXG5mdW5jdGlvbiBMaXN0SXRlbVNlY29uZGFyeUFjdGlvbihwcm9wcykge1xuICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgb3RoZXIgPSAoMCwgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMi5kZWZhdWx0KShwcm9wcywgW1wiY2hpbGRyZW5cIiwgXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCJdKTtcbiAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7XG4gICAgY2xhc3NOYW1lOiAoMCwgX2NsYXNzbmFtZXMuZGVmYXVsdCkoY2xhc3Nlcy5yb290LCBjbGFzc05hbWUpXG4gIH0sIG90aGVyKSwgY2hpbGRyZW4pO1xufVxuXG5MaXN0SXRlbVNlY29uZGFyeUFjdGlvbi5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgY29tcG9uZW50LCBub3JtYWxseSBhbiBgSWNvbkJ1dHRvbmAgb3Igc2VsZWN0aW9uIGNvbnRyb2wuXG4gICAqL1xuICBjaGlsZHJlbjogX3Byb3BUeXBlcy5kZWZhdWx0Lm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzLWFwaSkgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nXG59IDoge307XG5MaXN0SXRlbVNlY29uZGFyeUFjdGlvbi5tdWlOYW1lID0gJ0xpc3RJdGVtU2Vjb25kYXJ5QWN0aW9uJztcblxudmFyIF9kZWZhdWx0ID0gKDAsIF93aXRoU3R5bGVzLmRlZmF1bHQpKHN0eWxlcywge1xuICBuYW1lOiAnTXVpTGlzdEl0ZW1TZWNvbmRhcnlBY3Rpb24nXG59KShMaXN0SXRlbVNlY29uZGFyeUFjdGlvbik7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5zdHlsZXMgPSB2b2lkIDA7XG5cbnZhciBfb2JqZWN0U3ByZWFkMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9vYmplY3RTcHJlYWRcIikpO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiKSk7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbnZhciBfY2xhc3NuYW1lcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImNsYXNzbmFtZXNcIikpO1xuXG52YXIgX3dpdGhTdHlsZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9zdHlsZXMvd2l0aFN0eWxlc1wiKSk7XG5cbnZhciBzdHlsZXMgPSBmdW5jdGlvbiBzdHlsZXModGhlbWUpIHtcbiAgcmV0dXJuIHtcbiAgICByb290OiB7XG4gICAgICBtYXJnaW5SaWdodDogdGhlbWUuc3BhY2luZy51bml0ICogMixcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLmFjdGlvbi5hY3RpdmUsXG4gICAgICBmbGV4U2hyaW5rOiAwXG4gICAgfVxuICB9O1xufTtcbi8qKlxuICogQSBzaW1wbGUgd3JhcHBlciB0byBhcHBseSBgTGlzdGAgc3R5bGVzIHRvIGFuIGBJY29uYCBvciBgU3ZnSWNvbmAuXG4gKi9cblxuXG5leHBvcnRzLnN0eWxlcyA9IHN0eWxlcztcblxuZnVuY3Rpb24gTGlzdEl0ZW1JY29uKHByb3BzKSB7XG4gIHZhciBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBjbGFzc05hbWVQcm9wID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgb3RoZXIgPSAoMCwgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMi5kZWZhdWx0KShwcm9wcywgW1wiY2hpbGRyZW5cIiwgXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCJdKTtcbiAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNsb25lRWxlbWVudChjaGlsZHJlbiwgKDAsIF9vYmplY3RTcHJlYWQyLmRlZmF1bHQpKHtcbiAgICBjbGFzc05hbWU6ICgwLCBfY2xhc3NuYW1lcy5kZWZhdWx0KShjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZVByb3AsIGNoaWxkcmVuLnByb3BzLmNsYXNzTmFtZSlcbiAgfSwgb3RoZXIpKTtcbn1cblxuTGlzdEl0ZW1JY29uLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQsIG5vcm1hbGx5IGBJY29uYCwgYFN2Z0ljb25gLFxuICAgKiBvciBhIGBAbWF0ZXJpYWwtdWkvaWNvbnNgIFNWRyBpY29uIGVsZW1lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogX3Byb3BUeXBlcy5kZWZhdWx0LmVsZW1lbnQuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MtYXBpKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmdcbn0gOiB7fTtcblxudmFyIF9kZWZhdWx0ID0gKDAsIF93aXRoU3R5bGVzLmRlZmF1bHQpKHN0eWxlcywge1xuICBuYW1lOiAnTXVpTGlzdEl0ZW1JY29uJ1xufSkoTGlzdEl0ZW1JY29uKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLnN0eWxlcyA9IHZvaWQgMDtcblxudmFyIF9kZWZpbmVQcm9wZXJ0eTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vZGVmaW5lUHJvcGVydHlcIikpO1xuXG52YXIgX29iamVjdFNwcmVhZDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vb2JqZWN0U3ByZWFkXCIpKTtcblxudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIikpO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xuXG52YXIgX2NsYXNzbmFtZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJjbGFzc25hbWVzXCIpKTtcblxudmFyIF93YXJuaW5nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwid2FybmluZ1wiKSk7XG5cbnZhciBfd2l0aFN0eWxlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3N0eWxlcy93aXRoU3R5bGVzXCIpKTtcblxudmFyIHN0eWxlcyA9IGZ1bmN0aW9uIHN0eWxlcyh0aGVtZSkge1xuICByZXR1cm4ge1xuICAgIHJvb3Q6IHtcbiAgICAgIHdpZHRoOiAzNixcbiAgICAgIGhlaWdodDogMzYsXG4gICAgICBmb250U2l6ZTogdGhlbWUudHlwb2dyYXBoeS5weFRvUmVtKDE4KSxcbiAgICAgIG1hcmdpblJpZ2h0OiA0XG4gICAgfSxcbiAgICBpY29uOiB7XG4gICAgICB3aWR0aDogMjAsXG4gICAgICBoZWlnaHQ6IDIwLFxuICAgICAgZm9udFNpemU6IHRoZW1lLnR5cG9ncmFwaHkucHhUb1JlbSgyMClcbiAgICB9XG4gIH07XG59O1xuLyoqXG4gKiBJdCdzIGEgc2ltcGxlIHdyYXBwZXIgdG8gYXBwbHkgdGhlIGBkZW5zZWAgbW9kZSBzdHlsZXMgdG8gYEF2YXRhcmAuXG4gKi9cblxuXG5leHBvcnRzLnN0eWxlcyA9IHN0eWxlcztcblxuZnVuY3Rpb24gTGlzdEl0ZW1BdmF0YXIocHJvcHMsIGNvbnRleHQpIHtcbiAgdmFyIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZVByb3AgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBvdGhlciA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyLmRlZmF1bHQpKHByb3BzLCBbXCJjaGlsZHJlblwiLCBcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIl0pO1xuXG4gIGlmIChjb250ZXh0LmRlbnNlID09PSB1bmRlZmluZWQpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyAoMCwgX3dhcm5pbmcuZGVmYXVsdCkoZmFsc2UsIFwiTWF0ZXJpYWwtVUk6IDxMaXN0SXRlbUF2YXRhcj4gaXMgYSBzaW1wbGUgd3JhcHBlciB0byBhcHBseSB0aGUgZGVuc2Ugc3R5bGVzXFxuICAgICAgdG8gPEF2YXRhcj4uIFlvdSBkbyBub3QgbmVlZCBpdCB1bmxlc3MgeW91IGFyZSBjb250cm9sbGluZyB0aGUgPExpc3Q+IGRlbnNlIHByb3BlcnR5LlwiKSA6IHZvaWQgMDtcbiAgICByZXR1cm4gcHJvcHMuY2hpbGRyZW47XG4gIH1cblxuICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY2xvbmVFbGVtZW50KGNoaWxkcmVuLCAoMCwgX29iamVjdFNwcmVhZDIuZGVmYXVsdCkoe1xuICAgIGNsYXNzTmFtZTogKDAsIF9jbGFzc25hbWVzLmRlZmF1bHQpKCgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKHt9LCBjbGFzc2VzLnJvb3QsIGNvbnRleHQuZGVuc2UpLCBjbGFzc05hbWVQcm9wLCBjaGlsZHJlbi5wcm9wcy5jbGFzc05hbWUpLFxuICAgIGNoaWxkcmVuQ2xhc3NOYW1lOiAoMCwgX2NsYXNzbmFtZXMuZGVmYXVsdCkoKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoe30sIGNsYXNzZXMuaWNvbiwgY29udGV4dC5kZW5zZSksIGNoaWxkcmVuLnByb3BzLmNoaWxkcmVuQ2xhc3NOYW1lKVxuICB9LCBvdGhlcikpO1xufVxuXG5MaXN0SXRlbUF2YXRhci5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgY29tcG9uZW50LCBub3JtYWxseSBgQXZhdGFyYC5cbiAgICovXG4gIGNoaWxkcmVuOiBfcHJvcFR5cGVzLmRlZmF1bHQuZWxlbWVudC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2Nzcy1hcGkpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZ1xufSA6IHt9O1xuTGlzdEl0ZW1BdmF0YXIuY29udGV4dFR5cGVzID0ge1xuICBkZW5zZTogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2xcbn07XG5MaXN0SXRlbUF2YXRhci5tdWlOYW1lID0gJ0xpc3RJdGVtQXZhdGFyJztcblxudmFyIF9kZWZhdWx0ID0gKDAsIF93aXRoU3R5bGVzLmRlZmF1bHQpKHN0eWxlcywge1xuICBuYW1lOiAnTXVpTGlzdEl0ZW1BdmF0YXInXG59KShMaXN0SXRlbUF2YXRhcik7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5zdHlsZXMgPSB2b2lkIDA7XG5cbnZhciBfZXh0ZW5kczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vZXh0ZW5kc1wiKSk7XG5cbnZhciBfb2JqZWN0U3ByZWFkMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9vYmplY3RTcHJlYWRcIikpO1xuXG52YXIgX2RlZmluZVByb3BlcnR5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9kZWZpbmVQcm9wZXJ0eVwiKSk7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCIpKTtcblxudmFyIF9jbGFzc0NhbGxDaGVjazIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vY2xhc3NDYWxsQ2hlY2tcIikpO1xuXG52YXIgX2NyZWF0ZUNsYXNzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9jcmVhdGVDbGFzc1wiKSk7XG5cbnZhciBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vcG9zc2libGVDb25zdHJ1Y3RvclJldHVyblwiKSk7XG5cbnZhciBfaW5oZXJpdHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2luaGVyaXRzXCIpKTtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKTtcblxudmFyIF9jbGFzc25hbWVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY2xhc3NuYW1lc1wiKSk7XG5cbnZhciBfd2l0aFN0eWxlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3N0eWxlcy93aXRoU3R5bGVzXCIpKTtcblxudmFyIF9CdXR0b25CYXNlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vQnV0dG9uQmFzZVwiKSk7XG5cbnZhciBfcmVhY3RIZWxwZXJzID0gcmVxdWlyZShcIi4uL3V0aWxzL3JlYWN0SGVscGVyc1wiKTtcblxudmFyIHN0eWxlcyA9IGZ1bmN0aW9uIHN0eWxlcyh0aGVtZSkge1xuICByZXR1cm4ge1xuICAgIHJvb3Q6IHtcbiAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgIGp1c3RpZnlDb250ZW50OiAnZmxleC1zdGFydCcsXG4gICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgdGV4dERlY29yYXRpb246ICdub25lJyxcbiAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgICAgIHRleHRBbGlnbjogJ2xlZnQnXG4gICAgfSxcbiAgICBjb250YWluZXI6IHtcbiAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnXG4gICAgfSxcbiAgICBmb2N1c1Zpc2libGU6IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS5hY3Rpb24uaG92ZXJcbiAgICB9LFxuICAgIGRlZmF1bHQ6IHtcbiAgICAgIHBhZGRpbmdUb3A6IDEyLFxuICAgICAgcGFkZGluZ0JvdHRvbTogMTJcbiAgICB9LFxuICAgIGRlbnNlOiB7XG4gICAgICBwYWRkaW5nVG9wOiB0aGVtZS5zcGFjaW5nLnVuaXQsXG4gICAgICBwYWRkaW5nQm90dG9tOiB0aGVtZS5zcGFjaW5nLnVuaXRcbiAgICB9LFxuICAgIGRpc2FibGVkOiB7XG4gICAgICBvcGFjaXR5OiAwLjVcbiAgICB9LFxuICAgIGRpdmlkZXI6IHtcbiAgICAgIGJvcmRlckJvdHRvbTogXCIxcHggc29saWQgXCIuY29uY2F0KHRoZW1lLnBhbGV0dGUuZGl2aWRlciksXG4gICAgICBiYWNrZ3JvdW5kQ2xpcDogJ3BhZGRpbmctYm94J1xuICAgIH0sXG4gICAgZ3V0dGVyczogdGhlbWUubWl4aW5zLmd1dHRlcnMoKSxcbiAgICBidXR0b246IHtcbiAgICAgIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgnYmFja2dyb3VuZC1jb2xvcicsIHtcbiAgICAgICAgZHVyYXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmR1cmF0aW9uLnNob3J0ZXN0XG4gICAgICB9KSxcbiAgICAgICcmOmhvdmVyJzoge1xuICAgICAgICB0ZXh0RGVjb3JhdGlvbjogJ25vbmUnLFxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUuYWN0aW9uLmhvdmVyLFxuICAgICAgICAvLyBSZXNldCBvbiB0b3VjaCBkZXZpY2VzLCBpdCBkb2Vzbid0IGFkZCBzcGVjaWZpY2l0eVxuICAgICAgICAnQG1lZGlhIChob3Zlcjogbm9uZSknOiB7XG4gICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIHNlY29uZGFyeUFjdGlvbjoge1xuICAgICAgLy8gQWRkIHNvbWUgc3BhY2UgdG8gYXZvaWQgY29sbGlzaW9uIGFzIGBMaXN0SXRlbVNlY29uZGFyeUFjdGlvbmBcbiAgICAgIC8vIGlzIGFic29sdXRlbHkgcG9zaXRpb25uZWQuXG4gICAgICBwYWRkaW5nUmlnaHQ6IHRoZW1lLnNwYWNpbmcudW5pdCAqIDRcbiAgICB9XG4gIH07XG59O1xuXG5leHBvcnRzLnN0eWxlcyA9IHN0eWxlcztcblxudmFyIExpc3RJdGVtID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gICgwLCBfaW5oZXJpdHMyLmRlZmF1bHQpKExpc3RJdGVtLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBMaXN0SXRlbSgpIHtcbiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMi5kZWZhdWx0KSh0aGlzLCBMaXN0SXRlbSk7XG4gICAgcmV0dXJuICgwLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIuZGVmYXVsdCkodGhpcywgKExpc3RJdGVtLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTGlzdEl0ZW0pKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gICgwLCBfY3JlYXRlQ2xhc3MyLmRlZmF1bHQpKExpc3RJdGVtLCBbe1xuICAgIGtleTogXCJnZXRDaGlsZENvbnRleHRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0Q2hpbGRDb250ZXh0KCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZGVuc2U6IHRoaXMucHJvcHMuZGVuc2UgfHwgdGhpcy5jb250ZXh0LmRlbnNlIHx8IGZhbHNlXG4gICAgICB9O1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF9jbGFzc05hbWVzO1xuXG4gICAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBidXR0b24gPSBfcHJvcHMuYnV0dG9uLFxuICAgICAgICAgIGNoaWxkcmVuUHJvcCA9IF9wcm9wcy5jaGlsZHJlbixcbiAgICAgICAgICBjbGFzc2VzID0gX3Byb3BzLmNsYXNzZXMsXG4gICAgICAgICAgY2xhc3NOYW1lUHJvcCA9IF9wcm9wcy5jbGFzc05hbWUsXG4gICAgICAgICAgY29tcG9uZW50UHJvcCA9IF9wcm9wcy5jb21wb25lbnQsXG4gICAgICAgICAgQ29udGFpbmVyQ29tcG9uZW50ID0gX3Byb3BzLkNvbnRhaW5lckNvbXBvbmVudCxcbiAgICAgICAgICBfcHJvcHMkQ29udGFpbmVyUHJvcHMgPSBfcHJvcHMuQ29udGFpbmVyUHJvcHM7XG4gICAgICBfcHJvcHMkQ29udGFpbmVyUHJvcHMgPSBfcHJvcHMkQ29udGFpbmVyUHJvcHMgPT09IHZvaWQgMCA/IHt9IDogX3Byb3BzJENvbnRhaW5lclByb3BzO1xuICAgICAgdmFyIENvbnRhaW5lckNsYXNzTmFtZSA9IF9wcm9wcyRDb250YWluZXJQcm9wcy5jbGFzc05hbWUsXG4gICAgICAgICAgQ29udGFpbmVyUHJvcHMgPSAoMCwgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMi5kZWZhdWx0KShfcHJvcHMkQ29udGFpbmVyUHJvcHMsIFtcImNsYXNzTmFtZVwiXSksXG4gICAgICAgICAgZGVuc2UgPSBfcHJvcHMuZGVuc2UsXG4gICAgICAgICAgZGlzYWJsZWQgPSBfcHJvcHMuZGlzYWJsZWQsXG4gICAgICAgICAgZGlzYWJsZUd1dHRlcnMgPSBfcHJvcHMuZGlzYWJsZUd1dHRlcnMsXG4gICAgICAgICAgZGl2aWRlciA9IF9wcm9wcy5kaXZpZGVyLFxuICAgICAgICAgIGZvY3VzVmlzaWJsZUNsYXNzTmFtZSA9IF9wcm9wcy5mb2N1c1Zpc2libGVDbGFzc05hbWUsXG4gICAgICAgICAgb3RoZXIgPSAoMCwgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMi5kZWZhdWx0KShfcHJvcHMsIFtcImJ1dHRvblwiLCBcImNoaWxkcmVuXCIsIFwiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcImNvbXBvbmVudFwiLCBcIkNvbnRhaW5lckNvbXBvbmVudFwiLCBcIkNvbnRhaW5lclByb3BzXCIsIFwiZGVuc2VcIiwgXCJkaXNhYmxlZFwiLCBcImRpc2FibGVHdXR0ZXJzXCIsIFwiZGl2aWRlclwiLCBcImZvY3VzVmlzaWJsZUNsYXNzTmFtZVwiXSk7XG4gICAgICB2YXIgaXNEZW5zZSA9IGRlbnNlIHx8IHRoaXMuY29udGV4dC5kZW5zZSB8fCBmYWxzZTtcblxuICAgICAgdmFyIGNoaWxkcmVuID0gX3JlYWN0LmRlZmF1bHQuQ2hpbGRyZW4udG9BcnJheShjaGlsZHJlblByb3ApO1xuXG4gICAgICB2YXIgaGFzQXZhdGFyID0gY2hpbGRyZW4uc29tZShmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuICgwLCBfcmVhY3RIZWxwZXJzLmlzTXVpRWxlbWVudCkodmFsdWUsIFsnTGlzdEl0ZW1BdmF0YXInXSk7XG4gICAgICB9KTtcbiAgICAgIHZhciBoYXNTZWNvbmRhcnlBY3Rpb24gPSBjaGlsZHJlbi5sZW5ndGggJiYgKDAsIF9yZWFjdEhlbHBlcnMuaXNNdWlFbGVtZW50KShjaGlsZHJlbltjaGlsZHJlbi5sZW5ndGggLSAxXSwgWydMaXN0SXRlbVNlY29uZGFyeUFjdGlvbiddKTtcbiAgICAgIHZhciBjbGFzc05hbWUgPSAoMCwgX2NsYXNzbmFtZXMuZGVmYXVsdCkoY2xhc3Nlcy5yb290LCBpc0RlbnNlIHx8IGhhc0F2YXRhciA/IGNsYXNzZXMuZGVuc2UgOiBjbGFzc2VzLmRlZmF1bHQsIChfY2xhc3NOYW1lcyA9IHt9LCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lcywgY2xhc3Nlcy5ndXR0ZXJzLCAhZGlzYWJsZUd1dHRlcnMpLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lcywgY2xhc3Nlcy5kaXZpZGVyLCBkaXZpZGVyKSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2NsYXNzTmFtZXMsIGNsYXNzZXMuZGlzYWJsZWQsIGRpc2FibGVkKSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2NsYXNzTmFtZXMsIGNsYXNzZXMuYnV0dG9uLCBidXR0b24pLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lcywgY2xhc3Nlcy5zZWNvbmRhcnlBY3Rpb24sIGhhc1NlY29uZGFyeUFjdGlvbiksIF9jbGFzc05hbWVzKSwgY2xhc3NOYW1lUHJvcCk7XG4gICAgICB2YXIgY29tcG9uZW50UHJvcHMgPSAoMCwgX29iamVjdFNwcmVhZDIuZGVmYXVsdCkoe1xuICAgICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZSxcbiAgICAgICAgZGlzYWJsZWQ6IGRpc2FibGVkXG4gICAgICB9LCBvdGhlcik7XG4gICAgICB2YXIgQ29tcG9uZW50ID0gY29tcG9uZW50UHJvcCB8fCAnbGknO1xuXG4gICAgICBpZiAoYnV0dG9uKSB7XG4gICAgICAgIGNvbXBvbmVudFByb3BzLmNvbXBvbmVudCA9IGNvbXBvbmVudFByb3AgfHwgJ2Rpdic7XG4gICAgICAgIGNvbXBvbmVudFByb3BzLmZvY3VzVmlzaWJsZUNsYXNzTmFtZSA9ICgwLCBfY2xhc3NuYW1lcy5kZWZhdWx0KShjbGFzc2VzLmZvY3VzVmlzaWJsZSwgZm9jdXNWaXNpYmxlQ2xhc3NOYW1lKTtcbiAgICAgICAgQ29tcG9uZW50ID0gX0J1dHRvbkJhc2UuZGVmYXVsdDtcbiAgICAgIH1cblxuICAgICAgaWYgKGhhc1NlY29uZGFyeUFjdGlvbikge1xuICAgICAgICAvLyBVc2UgZGl2IGJ5IGRlZmF1bHQuXG4gICAgICAgIENvbXBvbmVudCA9ICFjb21wb25lbnRQcm9wcy5jb21wb25lbnQgJiYgIWNvbXBvbmVudFByb3AgPyAnZGl2JyA6IENvbXBvbmVudDsgLy8gQXZvaWQgbmVzdGluZyBvZiBsaSA+IGxpLlxuXG4gICAgICAgIGlmIChDb250YWluZXJDb21wb25lbnQgPT09ICdsaScpIHtcbiAgICAgICAgICBpZiAoQ29tcG9uZW50ID09PSAnbGknKSB7XG4gICAgICAgICAgICBDb21wb25lbnQgPSAnZGl2JztcbiAgICAgICAgICB9IGVsc2UgaWYgKGNvbXBvbmVudFByb3BzLmNvbXBvbmVudCA9PT0gJ2xpJykge1xuICAgICAgICAgICAgY29tcG9uZW50UHJvcHMuY29tcG9uZW50ID0gJ2Rpdic7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoQ29udGFpbmVyQ29tcG9uZW50LCAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHtcbiAgICAgICAgICBjbGFzc05hbWU6ICgwLCBfY2xhc3NuYW1lcy5kZWZhdWx0KShjbGFzc2VzLmNvbnRhaW5lciwgQ29udGFpbmVyQ2xhc3NOYW1lKVxuICAgICAgICB9LCBDb250YWluZXJQcm9wcyksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBjb21wb25lbnRQcm9wcywgY2hpbGRyZW4pLCBjaGlsZHJlbi5wb3AoKSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgY29tcG9uZW50UHJvcHMsIGNoaWxkcmVuKTtcbiAgICB9XG4gIH1dKTtcbiAgcmV0dXJuIExpc3RJdGVtO1xufShfcmVhY3QuZGVmYXVsdC5Db21wb25lbnQpO1xuXG5MaXN0SXRlbS5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBsaXN0IGl0ZW0gd2lsbCBiZSBhIGJ1dHRvbiAodXNpbmcgYEJ1dHRvbkJhc2VgKS5cbiAgICovXG4gIGJ1dHRvbjogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogX3Byb3BUeXBlcy5kZWZhdWx0Lm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzLWFwaSkgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBET00gZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICogQnkgZGVmYXVsdCwgaXQncyBhIGBsaWAgd2hlbiBgYnV0dG9uYCBpcyBgZmFsc2VgIGFuZCBhIGBkaXZgIHdoZW4gYGJ1dHRvbmAgaXMgYHRydWVgLlxuICAgKi9cbiAgY29tcG9uZW50OiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLCBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuY10pLFxuXG4gIC8qKlxuICAgKiBUaGUgY29udGFpbmVyIGNvbXBvbmVudCB1c2VkIHdoZW4gYSBgTGlzdEl0ZW1TZWNvbmRhcnlBY3Rpb25gIGlzIHJlbmRlcmVkLlxuICAgKi9cbiAgQ29udGFpbmVyQ29tcG9uZW50OiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLCBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuY10pLFxuXG4gIC8qKlxuICAgKiBQcm9wZXJ0aWVzIGFwcGxpZWQgdG8gdGhlIGNvbnRhaW5lciBlbGVtZW50IHdoZW4gdGhlIGNvbXBvbmVudFxuICAgKiBpcyB1c2VkIHRvIGRpc3BsYXkgYSBgTGlzdEl0ZW1TZWNvbmRhcnlBY3Rpb25gLlxuICAgKi9cbiAgQ29udGFpbmVyUHJvcHM6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgY29tcGFjdCB2ZXJ0aWNhbCBwYWRkaW5nIGRlc2lnbmVkIGZvciBrZXlib2FyZCBhbmQgbW91c2UgaW5wdXQgd2lsbCBiZSB1c2VkLlxuICAgKi9cbiAgZGVuc2U6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBkaXNhYmxlZDogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGxlZnQgYW5kIHJpZ2h0IHBhZGRpbmcgaXMgcmVtb3ZlZC5cbiAgICovXG4gIGRpc2FibGVHdXR0ZXJzOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCBhIDFweCBsaWdodCBib3JkZXIgaXMgYWRkZWQgdG8gdGhlIGJvdHRvbSBvZiB0aGUgbGlzdCBpdGVtLlxuICAgKi9cbiAgZGl2aWRlcjogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGZvY3VzVmlzaWJsZUNsYXNzTmFtZTogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZ1xufSA6IHt9O1xuTGlzdEl0ZW0uZGVmYXVsdFByb3BzID0ge1xuICBidXR0b246IGZhbHNlLFxuICBDb250YWluZXJDb21wb25lbnQ6ICdsaScsXG4gIGRlbnNlOiBmYWxzZSxcbiAgZGlzYWJsZWQ6IGZhbHNlLFxuICBkaXNhYmxlR3V0dGVyczogZmFsc2UsXG4gIGRpdmlkZXI6IGZhbHNlXG59O1xuTGlzdEl0ZW0uY29udGV4dFR5cGVzID0ge1xuICBkZW5zZTogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2xcbn07XG5MaXN0SXRlbS5jaGlsZENvbnRleHRUeXBlcyA9IHtcbiAgZGVuc2U6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sXG59O1xuXG52YXIgX2RlZmF1bHQgPSAoMCwgX3dpdGhTdHlsZXMuZGVmYXVsdCkoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlMaXN0SXRlbSdcbn0pKExpc3RJdGVtKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLnN0eWxlcyA9IHZvaWQgMDtcblxudmFyIF9leHRlbmRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9leHRlbmRzXCIpKTtcblxudmFyIF9kZWZpbmVQcm9wZXJ0eTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vZGVmaW5lUHJvcGVydHlcIikpO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiKSk7XG5cbnZhciBfY2xhc3NDYWxsQ2hlY2syID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2NsYXNzQ2FsbENoZWNrXCIpKTtcblxudmFyIF9jcmVhdGVDbGFzczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vY3JlYXRlQ2xhc3NcIikpO1xuXG52YXIgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5cIikpO1xuXG52YXIgX2luaGVyaXRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9pbmhlcml0c1wiKSk7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbnZhciBfY2xhc3NuYW1lcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImNsYXNzbmFtZXNcIikpO1xuXG52YXIgX3dpdGhTdHlsZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9zdHlsZXMvd2l0aFN0eWxlc1wiKSk7XG5cbnZhciBzdHlsZXMgPSBmdW5jdGlvbiBzdHlsZXModGhlbWUpIHtcbiAgcmV0dXJuIHtcbiAgICByb290OiB7XG4gICAgICBsaXN0U3R5bGU6ICdub25lJyxcbiAgICAgIG1hcmdpbjogMCxcbiAgICAgIHBhZGRpbmc6IDAsXG4gICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJ1xuICAgIH0sXG4gICAgcGFkZGluZzoge1xuICAgICAgcGFkZGluZ1RvcDogdGhlbWUuc3BhY2luZy51bml0LFxuICAgICAgcGFkZGluZ0JvdHRvbTogdGhlbWUuc3BhY2luZy51bml0XG4gICAgfSxcbiAgICBkZW5zZToge1xuICAgICAgcGFkZGluZ1RvcDogdGhlbWUuc3BhY2luZy51bml0IC8gMixcbiAgICAgIHBhZGRpbmdCb3R0b206IHRoZW1lLnNwYWNpbmcudW5pdCAvIDJcbiAgICB9LFxuICAgIHN1YmhlYWRlcjoge1xuICAgICAgcGFkZGluZ1RvcDogMFxuICAgIH1cbiAgfTtcbn07XG5cbmV4cG9ydHMuc3R5bGVzID0gc3R5bGVzO1xuXG52YXIgTGlzdCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICAoMCwgX2luaGVyaXRzMi5kZWZhdWx0KShMaXN0LCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBMaXN0KCkge1xuICAgICgwLCBfY2xhc3NDYWxsQ2hlY2syLmRlZmF1bHQpKHRoaXMsIExpc3QpO1xuICAgIHJldHVybiAoMCwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yLmRlZmF1bHQpKHRoaXMsIChMaXN0Ll9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTGlzdCkpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgKDAsIF9jcmVhdGVDbGFzczIuZGVmYXVsdCkoTGlzdCwgW3tcbiAgICBrZXk6IFwiZ2V0Q2hpbGRDb250ZXh0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldENoaWxkQ29udGV4dCgpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGRlbnNlOiB0aGlzLnByb3BzLmRlbnNlXG4gICAgICB9O1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF9jbGFzc05hbWVzO1xuXG4gICAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBjaGlsZHJlbiA9IF9wcm9wcy5jaGlsZHJlbixcbiAgICAgICAgICBjbGFzc2VzID0gX3Byb3BzLmNsYXNzZXMsXG4gICAgICAgICAgY2xhc3NOYW1lUHJvcCA9IF9wcm9wcy5jbGFzc05hbWUsXG4gICAgICAgICAgQ29tcG9uZW50ID0gX3Byb3BzLmNvbXBvbmVudCxcbiAgICAgICAgICBkZW5zZSA9IF9wcm9wcy5kZW5zZSxcbiAgICAgICAgICBkaXNhYmxlUGFkZGluZyA9IF9wcm9wcy5kaXNhYmxlUGFkZGluZyxcbiAgICAgICAgICBzdWJoZWFkZXIgPSBfcHJvcHMuc3ViaGVhZGVyLFxuICAgICAgICAgIG90aGVyID0gKDAsIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIuZGVmYXVsdCkoX3Byb3BzLCBbXCJjaGlsZHJlblwiLCBcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJjb21wb25lbnRcIiwgXCJkZW5zZVwiLCBcImRpc2FibGVQYWRkaW5nXCIsIFwic3ViaGVhZGVyXCJdKTtcbiAgICAgIHZhciBjbGFzc05hbWUgPSAoMCwgX2NsYXNzbmFtZXMuZGVmYXVsdCkoY2xhc3Nlcy5yb290LCAoX2NsYXNzTmFtZXMgPSB7fSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2NsYXNzTmFtZXMsIGNsYXNzZXMuZGVuc2UsIGRlbnNlICYmICFkaXNhYmxlUGFkZGluZyksICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKF9jbGFzc05hbWVzLCBjbGFzc2VzLnBhZGRpbmcsICFkaXNhYmxlUGFkZGluZyksICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKF9jbGFzc05hbWVzLCBjbGFzc2VzLnN1YmhlYWRlciwgc3ViaGVhZGVyKSwgX2NsYXNzTmFtZXMpLCBjbGFzc05hbWVQcm9wKTtcbiAgICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7XG4gICAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lXG4gICAgICB9LCBvdGhlciksIHN1YmhlYWRlciwgY2hpbGRyZW4pO1xuICAgIH1cbiAgfV0pO1xuICByZXR1cm4gTGlzdDtcbn0oX3JlYWN0LmRlZmF1bHQuQ29tcG9uZW50KTtcblxuTGlzdC5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IF9wcm9wVHlwZXMuZGVmYXVsdC5ub2RlLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2Nzcy1hcGkpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgRE9NIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsIF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jXSksXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgY29tcGFjdCB2ZXJ0aWNhbCBwYWRkaW5nIGRlc2lnbmVkIGZvciBrZXlib2FyZCBhbmQgbW91c2UgaW5wdXQgd2lsbCBiZSB1c2VkIGZvclxuICAgKiB0aGUgbGlzdCBhbmQgbGlzdCBpdGVtcy4gVGhlIHByb3BlcnR5IGlzIGF2YWlsYWJsZSB0byBkZXNjZW5kYW50IGNvbXBvbmVudHMgYXMgdGhlXG4gICAqIGBkZW5zZWAgY29udGV4dC5cbiAgICovXG4gIGRlbnNlOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB2ZXJ0aWNhbCBwYWRkaW5nIHdpbGwgYmUgcmVtb3ZlZCBmcm9tIHRoZSBsaXN0LlxuICAgKi9cbiAgZGlzYWJsZVBhZGRpbmc6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgc3ViaGVhZGVyLCBub3JtYWxseSBgTGlzdFN1YmhlYWRlcmAuXG4gICAqL1xuICBzdWJoZWFkZXI6IF9wcm9wVHlwZXMuZGVmYXVsdC5ub2RlXG59IDoge307XG5MaXN0LmRlZmF1bHRQcm9wcyA9IHtcbiAgY29tcG9uZW50OiAndWwnLFxuICBkZW5zZTogZmFsc2UsXG4gIGRpc2FibGVQYWRkaW5nOiBmYWxzZVxufTtcbkxpc3QuY2hpbGRDb250ZXh0VHlwZXMgPSB7XG4gIGRlbnNlOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbFxufTtcblxudmFyIF9kZWZhdWx0ID0gKDAsIF93aXRoU3R5bGVzLmRlZmF1bHQpKHN0eWxlcywge1xuICBuYW1lOiAnTXVpTGlzdCdcbn0pKExpc3QpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuc3R5bGVzID0gdm9pZCAwO1xuXG52YXIgX2V4dGVuZHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2V4dGVuZHNcIikpO1xuXG52YXIgX2RlZmluZVByb3BlcnR5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9kZWZpbmVQcm9wZXJ0eVwiKSk7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCIpKTtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKTtcblxudmFyIF9jbGFzc25hbWVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY2xhc3NuYW1lc1wiKSk7XG5cbnZhciBfd2FybmluZyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIndhcm5pbmdcIikpO1xuXG52YXIgX3dpdGhTdHlsZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9zdHlsZXMvd2l0aFN0eWxlc1wiKSk7XG5cbnZhciBfY29sb3JNYW5pcHVsYXRvciA9IHJlcXVpcmUoXCIuLi9zdHlsZXMvY29sb3JNYW5pcHVsYXRvclwiKTtcblxudmFyIFRSQU5TSVRJT05fRFVSQVRJT04gPSA0OyAvLyBzZWNvbmRzXG5cbnZhciBzdHlsZXMgPSBmdW5jdGlvbiBzdHlsZXModGhlbWUpIHtcbiAgcmV0dXJuIHtcbiAgICByb290OiB7XG4gICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgICAgIGhlaWdodDogNVxuICAgIH0sXG4gICAgY29sb3JQcmltYXJ5OiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6ICgwLCBfY29sb3JNYW5pcHVsYXRvci5saWdodGVuKSh0aGVtZS5wYWxldHRlLnByaW1hcnkubGlnaHQsIDAuNilcbiAgICB9LFxuICAgIGNvbG9yU2Vjb25kYXJ5OiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6ICgwLCBfY29sb3JNYW5pcHVsYXRvci5saWdodGVuKSh0aGVtZS5wYWxldHRlLnNlY29uZGFyeS5saWdodCwgMC40KVxuICAgIH0sXG4gICAgYnVmZmVyOiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6ICd0cmFuc3BhcmVudCdcbiAgICB9LFxuICAgIHF1ZXJ5OiB7XG4gICAgICB0cmFuc2Zvcm06ICdyb3RhdGUoMTgwZGVnKSdcbiAgICB9LFxuICAgIGRhc2hlZDoge1xuICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICBtYXJnaW5Ub3A6IDAsXG4gICAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICBhbmltYXRpb246ICdidWZmZXIgM3MgaW5maW5pdGUgbGluZWFyJ1xuICAgIH0sXG4gICAgZGFzaGVkQ29sb3JQcmltYXJ5OiB7XG4gICAgICBiYWNrZ3JvdW5kSW1hZ2U6IFwicmFkaWFsLWdyYWRpZW50KFwiLmNvbmNhdCgoMCwgX2NvbG9yTWFuaXB1bGF0b3IubGlnaHRlbikodGhlbWUucGFsZXR0ZS5wcmltYXJ5LmxpZ2h0LCAwLjYpLCBcIiAwJSwgXCIpLmNvbmNhdCgoMCwgX2NvbG9yTWFuaXB1bGF0b3IubGlnaHRlbikodGhlbWUucGFsZXR0ZS5wcmltYXJ5LmxpZ2h0LCAwLjYpLCBcIiAxNiUsIHRyYW5zcGFyZW50IDQyJSlcIiksXG4gICAgICBiYWNrZ3JvdW5kU2l6ZTogJzEwcHggMTBweCcsXG4gICAgICBiYWNrZ3JvdW5kUG9zaXRpb246ICcwcHggLTIzcHgnXG4gICAgfSxcbiAgICBkYXNoZWRDb2xvclNlY29uZGFyeToge1xuICAgICAgYmFja2dyb3VuZEltYWdlOiBcInJhZGlhbC1ncmFkaWVudChcIi5jb25jYXQoKDAsIF9jb2xvck1hbmlwdWxhdG9yLmxpZ2h0ZW4pKHRoZW1lLnBhbGV0dGUuc2Vjb25kYXJ5LmxpZ2h0LCAwLjQpLCBcIiAwJSwgXCIpLmNvbmNhdCgoMCwgX2NvbG9yTWFuaXB1bGF0b3IubGlnaHRlbikodGhlbWUucGFsZXR0ZS5zZWNvbmRhcnkubGlnaHQsIDAuNiksIFwiIDE2JSwgdHJhbnNwYXJlbnQgNDIlKVwiKSxcbiAgICAgIGJhY2tncm91bmRTaXplOiAnMTBweCAxMHB4JyxcbiAgICAgIGJhY2tncm91bmRQb3NpdGlvbjogJzBweCAtMjNweCdcbiAgICB9LFxuICAgIGJhcjoge1xuICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgbGVmdDogMCxcbiAgICAgIGJvdHRvbTogMCxcbiAgICAgIHRvcDogMCxcbiAgICAgIHRyYW5zaXRpb246ICd0cmFuc2Zvcm0gMC4ycyBsaW5lYXInLFxuICAgICAgdHJhbnNmb3JtT3JpZ2luOiAnbGVmdCdcbiAgICB9LFxuICAgIGJhckNvbG9yUHJpbWFyeToge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLnByaW1hcnkubWFpblxuICAgIH0sXG4gICAgYmFyQ29sb3JTZWNvbmRhcnk6IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS5zZWNvbmRhcnkubWFpblxuICAgIH0sXG4gICAgYmFyMUluZGV0ZXJtaW5hdGU6IHtcbiAgICAgIHdpZHRoOiAnYXV0bycsXG4gICAgICB3aWxsQ2hhbmdlOiAnbGVmdCwgcmlnaHQnLFxuICAgICAgYW5pbWF0aW9uOiAnbXVpLWluZGV0ZXJtaW5hdGUxIDIuMXMgY3ViaWMtYmV6aWVyKDAuNjUsIDAuODE1LCAwLjczNSwgMC4zOTUpIGluZmluaXRlJ1xuICAgIH0sXG4gICAgYmFyMkluZGV0ZXJtaW5hdGU6IHtcbiAgICAgIHdpZHRoOiAnYXV0bycsXG4gICAgICB3aWxsQ2hhbmdlOiAnbGVmdCwgcmlnaHQnLFxuICAgICAgYW5pbWF0aW9uOiAnbXVpLWluZGV0ZXJtaW5hdGUyIDIuMXMgY3ViaWMtYmV6aWVyKDAuMTY1LCAwLjg0LCAwLjQ0LCAxKSBpbmZpbml0ZScsXG4gICAgICBhbmltYXRpb25EZWxheTogJzEuMTVzJ1xuICAgIH0sXG4gICAgYmFyMURldGVybWluYXRlOiB7XG4gICAgICB3aWxsQ2hhbmdlOiAndHJhbnNmb3JtJyxcbiAgICAgIHRyYW5zaXRpb246IFwidHJhbnNmb3JtIC5cIi5jb25jYXQoVFJBTlNJVElPTl9EVVJBVElPTiwgXCJzIGxpbmVhclwiKVxuICAgIH0sXG4gICAgYmFyMUJ1ZmZlcjoge1xuICAgICAgekluZGV4OiAxLFxuICAgICAgdHJhbnNpdGlvbjogXCJ0cmFuc2Zvcm0gLlwiLmNvbmNhdChUUkFOU0lUSU9OX0RVUkFUSU9OLCBcInMgbGluZWFyXCIpXG4gICAgfSxcbiAgICBiYXIyQnVmZmVyOiB7XG4gICAgICB0cmFuc2l0aW9uOiBcInRyYW5zZm9ybSAuXCIuY29uY2F0KFRSQU5TSVRJT05fRFVSQVRJT04sIFwicyBsaW5lYXJcIilcbiAgICB9LFxuICAgIC8vIExlZ2VuZHM6XG4gICAgLy8gfHwgcmVwcmVzZW50cyB0aGUgdmlld3BvcnRcbiAgICAvLyAtICByZXByZXNlbnRzIGEgbGlnaHQgYmFja2dyb3VuZFxuICAgIC8vIHggIHJlcHJlc2VudHMgYSBkYXJrIGJhY2tncm91bmRcbiAgICAnQGtleWZyYW1lcyBtdWktaW5kZXRlcm1pbmF0ZTEnOiB7XG4gICAgICAvLyAgfC0tLS0tfC0tLXgtfHwtLS0tLXx8LS0tLS18XG4gICAgICAnMCUnOiB7XG4gICAgICAgIGxlZnQ6ICctMzUlJyxcbiAgICAgICAgcmlnaHQ6ICcxMDAlJ1xuICAgICAgfSxcbiAgICAgIC8vICB8LS0tLS18LS0tLS18fC0tLS0tfHx4eHh4LXxcbiAgICAgICc2MCUnOiB7XG4gICAgICAgIGxlZnQ6ICcxMDAlJyxcbiAgICAgICAgcmlnaHQ6ICctOTAlJ1xuICAgICAgfSxcbiAgICAgICcxMDAlJzoge1xuICAgICAgICBsZWZ0OiAnMTAwJScsXG4gICAgICAgIHJpZ2h0OiAnLTkwJSdcbiAgICAgIH1cbiAgICB9LFxuICAgICdAa2V5ZnJhbWVzIG11aS1pbmRldGVybWluYXRlMic6IHtcbiAgICAgIC8vICB8eHh4eHh8eHh4eHh8fC0tLS0tfHwtLS0tLXxcbiAgICAgICcwJSc6IHtcbiAgICAgICAgbGVmdDogJy0yMDAlJyxcbiAgICAgICAgcmlnaHQ6ICcxMDAlJ1xuICAgICAgfSxcbiAgICAgIC8vICB8LS0tLS18LS0tLS18fC0tLS0tfHwteC0tLS18XG4gICAgICAnNjAlJzoge1xuICAgICAgICBsZWZ0OiAnMTA3JScsXG4gICAgICAgIHJpZ2h0OiAnLTglJ1xuICAgICAgfSxcbiAgICAgICcxMDAlJzoge1xuICAgICAgICBsZWZ0OiAnMTA3JScsXG4gICAgICAgIHJpZ2h0OiAnLTglJ1xuICAgICAgfVxuICAgIH0sXG4gICAgJ0BrZXlmcmFtZXMgYnVmZmVyJzoge1xuICAgICAgJzAlJzoge1xuICAgICAgICBvcGFjaXR5OiAxLFxuICAgICAgICBiYWNrZ3JvdW5kUG9zaXRpb246ICcwcHggLTIzcHgnXG4gICAgICB9LFxuICAgICAgJzUwJSc6IHtcbiAgICAgICAgb3BhY2l0eTogMCxcbiAgICAgICAgYmFja2dyb3VuZFBvc2l0aW9uOiAnMHB4IC0yM3B4J1xuICAgICAgfSxcbiAgICAgICcxMDAlJzoge1xuICAgICAgICBvcGFjaXR5OiAxLFxuICAgICAgICBiYWNrZ3JvdW5kUG9zaXRpb246ICctMjAwcHggLTIzcHgnXG4gICAgICB9XG4gICAgfVxuICB9O1xufTtcbi8qKlxuICogIyMgQVJJQVxuICpcbiAqIElmIHRoZSBwcm9ncmVzcyBiYXIgaXMgZGVzY3JpYmluZyB0aGUgbG9hZGluZyBwcm9ncmVzcyBvZiBhIHBhcnRpY3VsYXIgcmVnaW9uIG9mIGEgcGFnZSxcbiAqIHlvdSBzaG91bGQgdXNlIGBhcmlhLWRlc2NyaWJlZGJ5YCB0byBwb2ludCB0byB0aGUgcHJvZ3Jlc3MgYmFyLCBhbmQgc2V0IHRoZSBgYXJpYS1idXN5YFxuICogYXR0cmlidXRlIHRvIGB0cnVlYCBvbiB0aGF0IHJlZ2lvbiB1bnRpbCBpdCBoYXMgZmluaXNoZWQgbG9hZGluZy5cbiAqL1xuXG5cbmV4cG9ydHMuc3R5bGVzID0gc3R5bGVzO1xuXG5mdW5jdGlvbiBMaW5lYXJQcm9ncmVzcyhwcm9wcykge1xuICB2YXIgX2NsYXNzTmFtZXMsIF9jbGFzc05hbWVzMiwgX2NsYXNzTmFtZXMzLCBfY2xhc3NOYW1lczQ7XG5cbiAgdmFyIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY2xhc3NOYW1lUHJvcCA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIGNvbG9yID0gcHJvcHMuY29sb3IsXG4gICAgICB2YWx1ZSA9IHByb3BzLnZhbHVlLFxuICAgICAgdmFsdWVCdWZmZXIgPSBwcm9wcy52YWx1ZUJ1ZmZlcixcbiAgICAgIHZhcmlhbnQgPSBwcm9wcy52YXJpYW50LFxuICAgICAgb3RoZXIgPSAoMCwgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMi5kZWZhdWx0KShwcm9wcywgW1wiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcImNvbG9yXCIsIFwidmFsdWVcIiwgXCJ2YWx1ZUJ1ZmZlclwiLCBcInZhcmlhbnRcIl0pO1xuICB2YXIgY2xhc3NOYW1lID0gKDAsIF9jbGFzc25hbWVzLmRlZmF1bHQpKGNsYXNzZXMucm9vdCwgKF9jbGFzc05hbWVzID0ge30sICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKF9jbGFzc05hbWVzLCBjbGFzc2VzLmNvbG9yUHJpbWFyeSwgY29sb3IgPT09ICdwcmltYXJ5JyksICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKF9jbGFzc05hbWVzLCBjbGFzc2VzLmNvbG9yU2Vjb25kYXJ5LCBjb2xvciA9PT0gJ3NlY29uZGFyeScpLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lcywgY2xhc3Nlcy5idWZmZXIsIHZhcmlhbnQgPT09ICdidWZmZXInKSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2NsYXNzTmFtZXMsIGNsYXNzZXMucXVlcnksIHZhcmlhbnQgPT09ICdxdWVyeScpLCBfY2xhc3NOYW1lcyksIGNsYXNzTmFtZVByb3ApO1xuICB2YXIgZGFzaGVkQ2xhc3MgPSAoMCwgX2NsYXNzbmFtZXMuZGVmYXVsdCkoY2xhc3Nlcy5kYXNoZWQsIChfY2xhc3NOYW1lczIgPSB7fSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2NsYXNzTmFtZXMyLCBjbGFzc2VzLmRhc2hlZENvbG9yUHJpbWFyeSwgY29sb3IgPT09ICdwcmltYXJ5JyksICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKF9jbGFzc05hbWVzMiwgY2xhc3Nlcy5kYXNoZWRDb2xvclNlY29uZGFyeSwgY29sb3IgPT09ICdzZWNvbmRhcnknKSwgX2NsYXNzTmFtZXMyKSk7XG4gIHZhciBiYXIxQ2xhc3NOYW1lID0gKDAsIF9jbGFzc25hbWVzLmRlZmF1bHQpKGNsYXNzZXMuYmFyLCAoX2NsYXNzTmFtZXMzID0ge30sICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKF9jbGFzc05hbWVzMywgY2xhc3Nlcy5iYXJDb2xvclByaW1hcnksIGNvbG9yID09PSAncHJpbWFyeScpLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lczMsIGNsYXNzZXMuYmFyQ29sb3JTZWNvbmRhcnksIGNvbG9yID09PSAnc2Vjb25kYXJ5JyksICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKF9jbGFzc05hbWVzMywgY2xhc3Nlcy5iYXIxSW5kZXRlcm1pbmF0ZSwgdmFyaWFudCA9PT0gJ2luZGV0ZXJtaW5hdGUnIHx8IHZhcmlhbnQgPT09ICdxdWVyeScpLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lczMsIGNsYXNzZXMuYmFyMURldGVybWluYXRlLCB2YXJpYW50ID09PSAnZGV0ZXJtaW5hdGUnKSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2NsYXNzTmFtZXMzLCBjbGFzc2VzLmJhcjFCdWZmZXIsIHZhcmlhbnQgPT09ICdidWZmZXInKSwgX2NsYXNzTmFtZXMzKSk7XG4gIHZhciBiYXIyQ2xhc3NOYW1lID0gKDAsIF9jbGFzc25hbWVzLmRlZmF1bHQpKGNsYXNzZXMuYmFyLCAoX2NsYXNzTmFtZXM0ID0ge30sICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKF9jbGFzc05hbWVzNCwgY2xhc3Nlcy5iYXJDb2xvclByaW1hcnksIGNvbG9yID09PSAncHJpbWFyeScgJiYgdmFyaWFudCAhPT0gJ2J1ZmZlcicpLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lczQsIGNsYXNzZXMuY29sb3JQcmltYXJ5LCBjb2xvciA9PT0gJ3ByaW1hcnknICYmIHZhcmlhbnQgPT09ICdidWZmZXInKSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2NsYXNzTmFtZXM0LCBjbGFzc2VzLmJhckNvbG9yU2Vjb25kYXJ5LCBjb2xvciA9PT0gJ3NlY29uZGFyeScgJiYgdmFyaWFudCAhPT0gJ2J1ZmZlcicpLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lczQsIGNsYXNzZXMuY29sb3JTZWNvbmRhcnksIGNvbG9yID09PSAnc2Vjb25kYXJ5JyAmJiB2YXJpYW50ID09PSAnYnVmZmVyJyksICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKF9jbGFzc05hbWVzNCwgY2xhc3Nlcy5iYXIySW5kZXRlcm1pbmF0ZSwgdmFyaWFudCA9PT0gJ2luZGV0ZXJtaW5hdGUnIHx8IHZhcmlhbnQgPT09ICdxdWVyeScpLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lczQsIGNsYXNzZXMuYmFyMkJ1ZmZlciwgdmFyaWFudCA9PT0gJ2J1ZmZlcicpLCBfY2xhc3NOYW1lczQpKTtcbiAgdmFyIHJvb3RQcm9wcyA9IHt9O1xuICB2YXIgaW5saW5lU3R5bGVzID0ge1xuICAgIGJhcjE6IHt9LFxuICAgIGJhcjI6IHt9XG4gIH07XG5cbiAgaWYgKHZhcmlhbnQgPT09ICdkZXRlcm1pbmF0ZScgfHwgdmFyaWFudCA9PT0gJ2J1ZmZlcicpIHtcbiAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcm9vdFByb3BzWydhcmlhLXZhbHVlbm93J10gPSBNYXRoLnJvdW5kKHZhbHVlKTtcbiAgICAgIGlubGluZVN0eWxlcy5iYXIxLnRyYW5zZm9ybSA9IFwic2NhbGVYKFwiLmNvbmNhdCh2YWx1ZSAvIDEwMCwgXCIpXCIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyAoMCwgX3dhcm5pbmcuZGVmYXVsdCkoZmFsc2UsICdNYXRlcmlhbC1VSTogeW91IG5lZWQgdG8gcHJvdmlkZSBhIHZhbHVlIHByb3BlcnR5ICcgKyAnd2hlbiB1c2luZyB0aGUgZGV0ZXJtaW5hdGUgb3IgYnVmZmVyIHZhcmlhbnQgb2YgTGluZWFyUHJvZ3Jlc3MgLicpIDogdm9pZCAwO1xuICAgIH1cbiAgfVxuXG4gIGlmICh2YXJpYW50ID09PSAnYnVmZmVyJykge1xuICAgIGlmICh2YWx1ZUJ1ZmZlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBpbmxpbmVTdHlsZXMuYmFyMi50cmFuc2Zvcm0gPSBcInNjYWxlWChcIi5jb25jYXQoKHZhbHVlQnVmZmVyIHx8IDApIC8gMTAwLCBcIilcIik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/ICgwLCBfd2FybmluZy5kZWZhdWx0KShmYWxzZSwgJ01hdGVyaWFsLVVJOiB5b3UgbmVlZCB0byBwcm92aWRlIGEgdmFsdWVCdWZmZXIgcHJvcGVydHkgJyArICd3aGVuIHVzaW5nIHRoZSBidWZmZXIgdmFyaWFudCBvZiBMaW5lYXJQcm9ncmVzcy4nKSA6IHZvaWQgMDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImRpdlwiLCAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHtcbiAgICBjbGFzc05hbWU6IGNsYXNzTmFtZSxcbiAgICByb2xlOiBcInByb2dyZXNzYmFyXCJcbiAgfSwgcm9vdFByb3BzLCBvdGhlciksIHZhcmlhbnQgPT09ICdidWZmZXInID8gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgY2xhc3NOYW1lOiBkYXNoZWRDbGFzc1xuICB9KSA6IG51bGwsIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgIGNsYXNzTmFtZTogYmFyMUNsYXNzTmFtZSxcbiAgICBzdHlsZTogaW5saW5lU3R5bGVzLmJhcjFcbiAgfSksIHZhcmlhbnQgPT09ICdkZXRlcm1pbmF0ZScgPyBudWxsIDogX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgY2xhc3NOYW1lOiBiYXIyQ2xhc3NOYW1lLFxuICAgIHN0eWxlOiBpbmxpbmVTdHlsZXMuYmFyMlxuICB9KSk7XG59XG5cbkxpbmVhclByb2dyZXNzLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzLWFwaSkgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29sb3Igb2YgdGhlIGNvbXBvbmVudC4gSXQgc3VwcG9ydHMgdGhvc2UgdGhlbWUgY29sb3JzIHRoYXQgbWFrZSBzZW5zZSBmb3IgdGhpcyBjb21wb25lbnQuXG4gICAqL1xuICBjb2xvcjogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mKFsncHJpbWFyeScsICdzZWNvbmRhcnknXSksXG5cbiAgLyoqXG4gICAqIFRoZSB2YWx1ZSBvZiB0aGUgcHJvZ3Jlc3MgaW5kaWNhdG9yIGZvciB0aGUgZGV0ZXJtaW5hdGUgYW5kIGJ1ZmZlciB2YXJpYW50cy5cbiAgICogVmFsdWUgYmV0d2VlbiAwIGFuZCAxMDAuXG4gICAqL1xuICB2YWx1ZTogX3Byb3BUeXBlcy5kZWZhdWx0Lm51bWJlcixcblxuICAvKipcbiAgICogVGhlIHZhbHVlIGZvciB0aGUgYnVmZmVyIHZhcmlhbnQuXG4gICAqIFZhbHVlIGJldHdlZW4gMCBhbmQgMTAwLlxuICAgKi9cbiAgdmFsdWVCdWZmZXI6IF9wcm9wVHlwZXMuZGVmYXVsdC5udW1iZXIsXG5cbiAgLyoqXG4gICAqIFRoZSB2YXJpYW50IG9mIHByb2dyZXNzIGluZGljYXRvci4gVXNlIGluZGV0ZXJtaW5hdGUgb3IgcXVlcnlcbiAgICogd2hlbiB0aGVyZSBpcyBubyBwcm9ncmVzcyB2YWx1ZS5cbiAgICovXG4gIHZhcmlhbnQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZihbJ2RldGVybWluYXRlJywgJ2luZGV0ZXJtaW5hdGUnLCAnYnVmZmVyJywgJ3F1ZXJ5J10pXG59IDoge307XG5MaW5lYXJQcm9ncmVzcy5kZWZhdWx0UHJvcHMgPSB7XG4gIGNvbG9yOiAncHJpbWFyeScsXG4gIHZhcmlhbnQ6ICdpbmRldGVybWluYXRlJ1xufTtcblxudmFyIF9kZWZhdWx0ID0gKDAsIF93aXRoU3R5bGVzLmRlZmF1bHQpKHN0eWxlcywge1xuICBuYW1lOiAnTXVpTGluZWFyUHJvZ3Jlc3MnXG59KShMaW5lYXJQcm9ncmVzcyk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5zdHlsZXMgPSB2b2lkIDA7XG5cbnZhciBfZXh0ZW5kczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vZXh0ZW5kc1wiKSk7XG5cbnZhciBfZGVmaW5lUHJvcGVydHkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2RlZmluZVByb3BlcnR5XCIpKTtcblxudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIikpO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xuXG52YXIgX2NsYXNzbmFtZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJjbGFzc25hbWVzXCIpKTtcblxudmFyIF93aXRoU3R5bGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vc3R5bGVzL3dpdGhTdHlsZXNcIikpO1xuXG52YXIgX0Zvcm1MYWJlbCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL0Zvcm1MYWJlbFwiKSk7XG5cbi8vIEBpbmhlcml0ZWRDb21wb25lbnQgRm9ybUxhYmVsXG52YXIgc3R5bGVzID0gZnVuY3Rpb24gc3R5bGVzKHRoZW1lKSB7XG4gIHJldHVybiB7XG4gICAgcm9vdDoge1xuICAgICAgdHJhbnNmb3JtT3JpZ2luOiAndG9wIGxlZnQnXG4gICAgfSxcbiAgICBmb3JtQ29udHJvbDoge1xuICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICBsZWZ0OiAwLFxuICAgICAgdG9wOiAwLFxuICAgICAgLy8gc2xpZ2h0IGFsdGVyYXRpb24gdG8gc3BlYyBzcGFjaW5nIHRvIG1hdGNoIHZpc3VhbCBzcGVjIHJlc3VsdFxuICAgICAgdHJhbnNmb3JtOiBcInRyYW5zbGF0ZSgwLCBcIi5jb25jYXQodGhlbWUuc3BhY2luZy51bml0ICogMywgXCJweCkgc2NhbGUoMSlcIilcbiAgICB9LFxuICAgIG1hcmdpbkRlbnNlOiB7XG4gICAgICAvLyBDb21wZW5zYXRpb24gZm9yIHRoZSBgSW5wdXQuaW5wdXREZW5zZWAgc3R5bGUuXG4gICAgICB0cmFuc2Zvcm06IFwidHJhbnNsYXRlKDAsIFwiLmNvbmNhdCh0aGVtZS5zcGFjaW5nLnVuaXQgKiAyLjUgKyAxLCBcInB4KSBzY2FsZSgxKVwiKVxuICAgIH0sXG4gICAgc2hyaW5rOiB7XG4gICAgICB0cmFuc2Zvcm06ICd0cmFuc2xhdGUoMCwgMS41cHgpIHNjYWxlKDAuNzUpJyxcbiAgICAgIHRyYW5zZm9ybU9yaWdpbjogJ3RvcCBsZWZ0J1xuICAgIH0sXG4gICAgYW5pbWF0ZWQ6IHtcbiAgICAgIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgndHJhbnNmb3JtJywge1xuICAgICAgICBkdXJhdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuZHVyYXRpb24uc2hvcnRlcixcbiAgICAgICAgZWFzaW5nOiB0aGVtZS50cmFuc2l0aW9ucy5lYXNpbmcuZWFzZU91dFxuICAgICAgfSlcbiAgICB9XG4gIH07XG59O1xuXG5leHBvcnRzLnN0eWxlcyA9IHN0eWxlcztcblxuZnVuY3Rpb24gSW5wdXRMYWJlbChwcm9wcywgY29udGV4dCkge1xuICB2YXIgX2NsYXNzTmFtZXM7XG5cbiAgdmFyIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZVByb3AgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBkaXNhYmxlQW5pbWF0aW9uID0gcHJvcHMuZGlzYWJsZUFuaW1hdGlvbixcbiAgICAgIEZvcm1MYWJlbENsYXNzZXMgPSBwcm9wcy5Gb3JtTGFiZWxDbGFzc2VzLFxuICAgICAgbWFyZ2luUHJvcCA9IHByb3BzLm1hcmdpbixcbiAgICAgIHNocmlua1Byb3AgPSBwcm9wcy5zaHJpbmssXG4gICAgICBvdGhlciA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyLmRlZmF1bHQpKHByb3BzLCBbXCJjaGlsZHJlblwiLCBcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJkaXNhYmxlQW5pbWF0aW9uXCIsIFwiRm9ybUxhYmVsQ2xhc3Nlc1wiLCBcIm1hcmdpblwiLCBcInNocmlua1wiXSk7XG4gIHZhciBtdWlGb3JtQ29udHJvbCA9IGNvbnRleHQubXVpRm9ybUNvbnRyb2w7XG4gIHZhciBzaHJpbmsgPSBzaHJpbmtQcm9wO1xuXG4gIGlmICh0eXBlb2Ygc2hyaW5rID09PSAndW5kZWZpbmVkJyAmJiBtdWlGb3JtQ29udHJvbCkge1xuICAgIHNocmluayA9IG11aUZvcm1Db250cm9sLmZpbGxlZCB8fCBtdWlGb3JtQ29udHJvbC5mb2N1c2VkIHx8IG11aUZvcm1Db250cm9sLmFkb3JuZWRTdGFydDtcbiAgfVxuXG4gIHZhciBtYXJnaW4gPSBtYXJnaW5Qcm9wO1xuXG4gIGlmICh0eXBlb2YgbWFyZ2luID09PSAndW5kZWZpbmVkJyAmJiBtdWlGb3JtQ29udHJvbCkge1xuICAgIG1hcmdpbiA9IG11aUZvcm1Db250cm9sLm1hcmdpbjtcbiAgfVxuXG4gIHZhciBjbGFzc05hbWUgPSAoMCwgX2NsYXNzbmFtZXMuZGVmYXVsdCkoY2xhc3Nlcy5yb290LCAoX2NsYXNzTmFtZXMgPSB7fSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2NsYXNzTmFtZXMsIGNsYXNzZXMuZm9ybUNvbnRyb2wsIG11aUZvcm1Db250cm9sKSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2NsYXNzTmFtZXMsIGNsYXNzZXMuYW5pbWF0ZWQsICFkaXNhYmxlQW5pbWF0aW9uKSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2NsYXNzTmFtZXMsIGNsYXNzZXMuc2hyaW5rLCBzaHJpbmspLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lcywgY2xhc3Nlcy5tYXJnaW5EZW5zZSwgbWFyZ2luID09PSAnZGVuc2UnKSwgX2NsYXNzTmFtZXMpLCBjbGFzc05hbWVQcm9wKTtcbiAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX0Zvcm1MYWJlbC5kZWZhdWx0LCAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHtcbiAgICBcImRhdGEtc2hyaW5rXCI6IHNocmluayxcbiAgICBjbGFzc05hbWU6IGNsYXNzTmFtZSxcbiAgICBjbGFzc2VzOiBGb3JtTGFiZWxDbGFzc2VzXG4gIH0sIG90aGVyKSwgY2hpbGRyZW4pO1xufVxuXG5JbnB1dExhYmVsLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqXG4gICAqIFRoZSBjb250ZW50cyBvZiB0aGUgYElucHV0TGFiZWxgLlxuICAgKi9cbiAgY2hpbGRyZW46IF9wcm9wVHlwZXMuZGVmYXVsdC5ub2RlLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2Nzcy1hcGkpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgdHJhbnNpdGlvbiBhbmltYXRpb24gaXMgZGlzYWJsZWQuXG4gICAqL1xuICBkaXNhYmxlQW5pbWF0aW9uOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCBhcHBseSBkaXNhYmxlZCBjbGFzcy5cbiAgICovXG4gIGRpc2FibGVkOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgbGFiZWwgd2lsbCBiZSBkaXNwbGF5ZWQgaW4gYW4gZXJyb3Igc3RhdGUuXG4gICAqL1xuICBlcnJvcjogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGlucHV0IG9mIHRoaXMgbGFiZWwgaXMgZm9jdXNlZC5cbiAgICovXG4gIGZvY3VzZWQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBgY2xhc3Nlc2AgcHJvcGVydHkgYXBwbGllZCB0byB0aGUgYEZvcm1MYWJlbGAgZWxlbWVudC5cbiAgICovXG4gIEZvcm1MYWJlbENsYXNzZXM6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QsXG5cbiAgLyoqXG4gICAqIElmIGBkZW5zZWAsIHdpbGwgYWRqdXN0IHZlcnRpY2FsIHNwYWNpbmcuIFRoaXMgaXMgbm9ybWFsbHkgb2J0YWluZWQgdmlhIGNvbnRleHQgZnJvbVxuICAgKiBGb3JtQ29udHJvbC5cbiAgICovXG4gIG1hcmdpbjogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mKFsnZGVuc2UnXSksXG5cbiAgLyoqXG4gICAqIGlmIGB0cnVlYCwgdGhlIGxhYmVsIHdpbGwgaW5kaWNhdGUgdGhhdCB0aGUgaW5wdXQgaXMgcmVxdWlyZWQuXG4gICAqL1xuICByZXF1aXJlZDogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGxhYmVsIGlzIHNocnVuay5cbiAgICovXG4gIHNocmluazogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2xcbn0gOiB7fTtcbklucHV0TGFiZWwuZGVmYXVsdFByb3BzID0ge1xuICBkaXNhYmxlQW5pbWF0aW9uOiBmYWxzZVxufTtcbklucHV0TGFiZWwuY29udGV4dFR5cGVzID0ge1xuICBtdWlGb3JtQ29udHJvbDogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdFxufTtcblxudmFyIF9kZWZhdWx0ID0gKDAsIF93aXRoU3R5bGVzLmRlZmF1bHQpKHN0eWxlcywge1xuICBuYW1lOiAnTXVpSW5wdXRMYWJlbCdcbn0pKElucHV0TGFiZWwpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuc3R5bGVzID0gdm9pZCAwO1xuXG52YXIgX2V4dGVuZHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2V4dGVuZHNcIikpO1xuXG52YXIgX2RlZmluZVByb3BlcnR5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9kZWZpbmVQcm9wZXJ0eVwiKSk7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCIpKTtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKTtcblxudmFyIF9jbGFzc25hbWVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY2xhc3NuYW1lc1wiKSk7XG5cbnZhciBfVHlwb2dyYXBoeSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL1R5cG9ncmFwaHlcIikpO1xuXG52YXIgX3dpdGhTdHlsZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9zdHlsZXMvd2l0aFN0eWxlc1wiKSk7XG5cbnZhciBzdHlsZXMgPSBmdW5jdGlvbiBzdHlsZXModGhlbWUpIHtcbiAgcmV0dXJuIHtcbiAgICByb290OiB7XG4gICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICBtYXhIZWlnaHQ6ICcyZW0nLFxuICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcidcbiAgICB9LFxuICAgIHBvc2l0aW9uU3RhcnQ6IHtcbiAgICAgIG1hcmdpblJpZ2h0OiB0aGVtZS5zcGFjaW5nLnVuaXRcbiAgICB9LFxuICAgIHBvc2l0aW9uRW5kOiB7XG4gICAgICBtYXJnaW5MZWZ0OiB0aGVtZS5zcGFjaW5nLnVuaXRcbiAgICB9XG4gIH07XG59O1xuXG5leHBvcnRzLnN0eWxlcyA9IHN0eWxlcztcblxuZnVuY3Rpb24gSW5wdXRBZG9ybm1lbnQocHJvcHMpIHtcbiAgdmFyIF9jbGFzc05hbWVzO1xuXG4gIHZhciBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgQ29tcG9uZW50ID0gcHJvcHMuY29tcG9uZW50LFxuICAgICAgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBkaXNhYmxlVHlwb2dyYXBoeSA9IHByb3BzLmRpc2FibGVUeXBvZ3JhcGh5LFxuICAgICAgcG9zaXRpb24gPSBwcm9wcy5wb3NpdGlvbixcbiAgICAgIG90aGVyID0gKDAsIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIuZGVmYXVsdCkocHJvcHMsIFtcImNoaWxkcmVuXCIsIFwiY29tcG9uZW50XCIsIFwiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcImRpc2FibGVUeXBvZ3JhcGh5XCIsIFwicG9zaXRpb25cIl0pO1xuICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChDb21wb25lbnQsICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe1xuICAgIGNsYXNzTmFtZTogKDAsIF9jbGFzc25hbWVzLmRlZmF1bHQpKGNsYXNzZXMucm9vdCwgKF9jbGFzc05hbWVzID0ge30sICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKF9jbGFzc05hbWVzLCBjbGFzc2VzLnBvc2l0aW9uU3RhcnQsIHBvc2l0aW9uID09PSAnc3RhcnQnKSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2NsYXNzTmFtZXMsIGNsYXNzZXMucG9zaXRpb25FbmQsIHBvc2l0aW9uID09PSAnZW5kJyksIF9jbGFzc05hbWVzKSwgY2xhc3NOYW1lKVxuICB9LCBvdGhlciksIHR5cGVvZiBjaGlsZHJlbiA9PT0gJ3N0cmluZycgJiYgIWRpc2FibGVUeXBvZ3JhcGh5ID8gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfVHlwb2dyYXBoeS5kZWZhdWx0LCB7XG4gICAgY29sb3I6IFwidGV4dFNlY29uZGFyeVwiXG4gIH0sIGNoaWxkcmVuKSA6IGNoaWxkcmVuKTtcbn1cblxuSW5wdXRBZG9ybm1lbnQucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGNvbXBvbmVudCwgbm9ybWFsbHkgYW4gYEljb25CdXR0b25gIG9yIHN0cmluZy5cbiAgICovXG4gIGNoaWxkcmVuOiBfcHJvcFR5cGVzLmRlZmF1bHQubm9kZS5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2Nzcy1hcGkpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgRE9NIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsIF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jXSksXG5cbiAgLyoqXG4gICAqIElmIGNoaWxkcmVuIGlzIGEgc3RyaW5nIHRoZW4gZGlzYWJsZSB3cmFwcGluZyBpbiBhIFR5cG9ncmFwaHkgY29tcG9uZW50LlxuICAgKi9cbiAgZGlzYWJsZVR5cG9ncmFwaHk6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgcG9zaXRpb24gdGhpcyBhZG9ybm1lbnQgc2hvdWxkIGFwcGVhciByZWxhdGl2ZSB0byB0aGUgYElucHV0YC5cbiAgICovXG4gIHBvc2l0aW9uOiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2YoWydzdGFydCcsICdlbmQnXSlcbn0gOiB7fTtcbklucHV0QWRvcm5tZW50LmRlZmF1bHRQcm9wcyA9IHtcbiAgY29tcG9uZW50OiAnZGl2JyxcbiAgZGlzYWJsZVR5cG9ncmFwaHk6IGZhbHNlXG59O1xuXG52YXIgX2RlZmF1bHQgPSAoMCwgX3dpdGhTdHlsZXMuZGVmYXVsdCkoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlJbnB1dEFkb3JubWVudCdcbn0pKElucHV0QWRvcm5tZW50KTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLnN0eWxlcyA9IHZvaWQgMDtcblxudmFyIF9leHRlbmRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9leHRlbmRzXCIpKTtcblxudmFyIF9kZWZpbmVQcm9wZXJ0eTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vZGVmaW5lUHJvcGVydHlcIikpO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiKSk7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbnZhciBfY2xhc3NuYW1lcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImNsYXNzbmFtZXNcIikpO1xuXG52YXIgX3dpdGhTdHlsZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9zdHlsZXMvd2l0aFN0eWxlc1wiKSk7XG5cbnZhciBfaGVscGVycyA9IHJlcXVpcmUoXCIuLi91dGlscy9oZWxwZXJzXCIpO1xuXG52YXIgc3R5bGVzID0gZnVuY3Rpb24gc3R5bGVzKHRoZW1lKSB7XG4gIHJldHVybiB7XG4gICAgcm9vdDoge1xuICAgICAgdXNlclNlbGVjdDogJ25vbmUnLFxuICAgICAgZm9udFNpemU6IDI0LFxuICAgICAgd2lkdGg6ICcxZW0nLFxuICAgICAgaGVpZ2h0OiAnMWVtJyxcbiAgICAgIC8vIENocm9tZSBmaXggZm9yIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTgyMDU0MVxuICAgICAgLy8gVG8gcmVtb3ZlIGF0IHNvbWUgcG9pbnQuXG4gICAgICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gICAgICBmbGV4U2hyaW5rOiAwXG4gICAgfSxcbiAgICBjb2xvclByaW1hcnk6IHtcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnByaW1hcnkubWFpblxuICAgIH0sXG4gICAgY29sb3JTZWNvbmRhcnk6IHtcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnNlY29uZGFyeS5tYWluXG4gICAgfSxcbiAgICBjb2xvckFjdGlvbjoge1xuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuYWN0aW9uLmFjdGl2ZVxuICAgIH0sXG4gICAgY29sb3JFcnJvcjoge1xuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuZXJyb3IubWFpblxuICAgIH0sXG4gICAgY29sb3JEaXNhYmxlZDoge1xuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuYWN0aW9uLmRpc2FibGVkXG4gICAgfVxuICB9O1xufTtcblxuZXhwb3J0cy5zdHlsZXMgPSBzdHlsZXM7XG5cbmZ1bmN0aW9uIEljb24ocHJvcHMpIHtcbiAgdmFyIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIGNvbG9yID0gcHJvcHMuY29sb3IsXG4gICAgICBvdGhlciA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyLmRlZmF1bHQpKHByb3BzLCBbXCJjaGlsZHJlblwiLCBcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJjb2xvclwiXSk7XG4gIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHtcbiAgICBjbGFzc05hbWU6ICgwLCBfY2xhc3NuYW1lcy5kZWZhdWx0KSgnbWF0ZXJpYWwtaWNvbnMnLCBjbGFzc2VzLnJvb3QsICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKHt9LCBjbGFzc2VzW1wiY29sb3JcIi5jb25jYXQoKDAsIF9oZWxwZXJzLmNhcGl0YWxpemUpKGNvbG9yKSldLCBjb2xvciAhPT0gJ2luaGVyaXQnKSwgY2xhc3NOYW1lKSxcbiAgICBcImFyaWEtaGlkZGVuXCI6IFwidHJ1ZVwiXG4gIH0sIG90aGVyKSwgY2hpbGRyZW4pO1xufVxuXG5JY29uLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqXG4gICAqIFRoZSBuYW1lIG9mIHRoZSBpY29uIGZvbnQgbGlnYXR1cmUuXG4gICAqL1xuICBjaGlsZHJlbjogX3Byb3BUeXBlcy5kZWZhdWx0Lm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzLWFwaSkgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29sb3Igb2YgdGhlIGNvbXBvbmVudC4gSXQgc3VwcG9ydHMgdGhvc2UgdGhlbWUgY29sb3JzIHRoYXQgbWFrZSBzZW5zZSBmb3IgdGhpcyBjb21wb25lbnQuXG4gICAqL1xuICBjb2xvcjogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mKFsnaW5oZXJpdCcsICdwcmltYXJ5JywgJ3NlY29uZGFyeScsICdhY3Rpb24nLCAnZXJyb3InLCAnZGlzYWJsZWQnXSlcbn0gOiB7fTtcbkljb24uZGVmYXVsdFByb3BzID0ge1xuICBjb2xvcjogJ2luaGVyaXQnXG59O1xuSWNvbi5tdWlOYW1lID0gJ0ljb24nO1xuXG52YXIgX2RlZmF1bHQgPSAoMCwgX3dpdGhTdHlsZXMuZGVmYXVsdCkoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlJY29uJ1xufSkoSWNvbik7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiKSk7XG5cbnZhciBfZGVmaW5lUHJvcGVydHkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2RlZmluZVByb3BlcnR5XCIpKTtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKTtcblxudmFyIF93YXJuaW5nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwid2FybmluZ1wiKSk7XG5cbnZhciBfY3JlYXRlQnJlYWtwb2ludHMgPSByZXF1aXJlKFwiLi4vc3R5bGVzL2NyZWF0ZUJyZWFrcG9pbnRzXCIpO1xuXG52YXIgX2hlbHBlcnMgPSByZXF1aXJlKFwiLi4vdXRpbHMvaGVscGVyc1wiKTtcblxudmFyIF93aXRoU3R5bGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vc3R5bGVzL3dpdGhTdHlsZXNcIikpO1xuXG52YXIgc3R5bGVzID0gZnVuY3Rpb24gc3R5bGVzKHRoZW1lKSB7XG4gIHZhciBoaWRkZW4gPSB7XG4gICAgZGlzcGxheTogJ25vbmUnXG4gIH07XG4gIHJldHVybiBfY3JlYXRlQnJlYWtwb2ludHMua2V5cy5yZWR1Y2UoZnVuY3Rpb24gKGFjYywga2V5KSB7XG4gICAgYWNjW1wib25seVwiLmNvbmNhdCgoMCwgX2hlbHBlcnMuY2FwaXRhbGl6ZSkoa2V5KSldID0gKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoe30sIHRoZW1lLmJyZWFrcG9pbnRzLm9ubHkoa2V5KSwgaGlkZGVuKTtcbiAgICBhY2NbXCJcIi5jb25jYXQoa2V5LCBcIlVwXCIpXSA9ICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKHt9LCB0aGVtZS5icmVha3BvaW50cy51cChrZXkpLCBoaWRkZW4pO1xuICAgIGFjY1tcIlwiLmNvbmNhdChrZXksIFwiRG93blwiKV0gPSAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KSh7fSwgdGhlbWUuYnJlYWtwb2ludHMuZG93bihrZXkpLCBoaWRkZW4pO1xuICAgIHJldHVybiBhY2M7XG4gIH0sIHt9KTtcbn07XG4vKipcbiAqIEBpZ25vcmUgLSBpbnRlcm5hbCBjb21wb25lbnQuXG4gKi9cblxuXG5mdW5jdGlvbiBIaWRkZW5Dc3MocHJvcHMpIHtcbiAgdmFyIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIGxnRG93biA9IHByb3BzLmxnRG93bixcbiAgICAgIGxnVXAgPSBwcm9wcy5sZ1VwLFxuICAgICAgbWREb3duID0gcHJvcHMubWREb3duLFxuICAgICAgbWRVcCA9IHByb3BzLm1kVXAsXG4gICAgICBvbmx5ID0gcHJvcHMub25seSxcbiAgICAgIHNtRG93biA9IHByb3BzLnNtRG93bixcbiAgICAgIHNtVXAgPSBwcm9wcy5zbVVwLFxuICAgICAgeGxEb3duID0gcHJvcHMueGxEb3duLFxuICAgICAgeGxVcCA9IHByb3BzLnhsVXAsXG4gICAgICB4c0Rvd24gPSBwcm9wcy54c0Rvd24sXG4gICAgICB4c1VwID0gcHJvcHMueHNVcCxcbiAgICAgIG90aGVyID0gKDAsIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIuZGVmYXVsdCkocHJvcHMsIFtcImNoaWxkcmVuXCIsIFwiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcImxnRG93blwiLCBcImxnVXBcIiwgXCJtZERvd25cIiwgXCJtZFVwXCIsIFwib25seVwiLCBcInNtRG93blwiLCBcInNtVXBcIiwgXCJ4bERvd25cIiwgXCJ4bFVwXCIsIFwieHNEb3duXCIsIFwieHNVcFwiXSk7XG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/ICgwLCBfd2FybmluZy5kZWZhdWx0KShPYmplY3Qua2V5cyhvdGhlcikubGVuZ3RoID09PSAwIHx8IE9iamVjdC5rZXlzKG90aGVyKS5sZW5ndGggPT09IDEgJiYgb3RoZXIuaGFzT3duUHJvcGVydHkoJ3JlZicpLCBcIk1hdGVyaWFsLVVJOiB1bnN1cHBvcnRlZCBwcm9wZXJ0aWVzIHJlY2VpdmVkIFwiLmNvbmNhdChPYmplY3Qua2V5cyhvdGhlcikuam9pbignLCAnKSwgXCIgYnkgYDxIaWRkZW4gLz5gLlwiKSkgOiB2b2lkIDA7XG4gIHZhciBjbGFzc05hbWVzID0gW107XG5cbiAgaWYgKGNsYXNzTmFtZSkge1xuICAgIGNsYXNzTmFtZXMucHVzaChjbGFzc05hbWUpO1xuICB9XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBfY3JlYXRlQnJlYWtwb2ludHMua2V5cy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIHZhciBicmVha3BvaW50ID0gX2NyZWF0ZUJyZWFrcG9pbnRzLmtleXNbaV07XG4gICAgdmFyIGJyZWFrcG9pbnRVcCA9IHByb3BzW1wiXCIuY29uY2F0KGJyZWFrcG9pbnQsIFwiVXBcIildO1xuICAgIHZhciBicmVha3BvaW50RG93biA9IHByb3BzW1wiXCIuY29uY2F0KGJyZWFrcG9pbnQsIFwiRG93blwiKV07XG5cbiAgICBpZiAoYnJlYWtwb2ludFVwKSB7XG4gICAgICBjbGFzc05hbWVzLnB1c2goY2xhc3Nlc1tcIlwiLmNvbmNhdChicmVha3BvaW50LCBcIlVwXCIpXSk7XG4gICAgfVxuXG4gICAgaWYgKGJyZWFrcG9pbnREb3duKSB7XG4gICAgICBjbGFzc05hbWVzLnB1c2goY2xhc3Nlc1tcIlwiLmNvbmNhdChicmVha3BvaW50LCBcIkRvd25cIildKTtcbiAgICB9XG4gIH1cblxuICBpZiAob25seSkge1xuICAgIHZhciBvbmx5QnJlYWtwb2ludHMgPSBBcnJheS5pc0FycmF5KG9ubHkpID8gb25seSA6IFtvbmx5XTtcbiAgICBvbmx5QnJlYWtwb2ludHMuZm9yRWFjaChmdW5jdGlvbiAoYnJlYWtwb2ludCkge1xuICAgICAgY2xhc3NOYW1lcy5wdXNoKGNsYXNzZXNbXCJvbmx5XCIuY29uY2F0KCgwLCBfaGVscGVycy5jYXBpdGFsaXplKShicmVha3BvaW50KSldKTtcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMuam9pbignICcpXG4gIH0sIGNoaWxkcmVuKTtcbn1cblxuSGlkZGVuQ3NzLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogX3Byb3BUeXBlcy5kZWZhdWx0Lm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzLWFwaSkgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBTcGVjaWZ5IHdoaWNoIGltcGxlbWVudGF0aW9uIHRvIHVzZS4gICdqcycgaXMgdGhlIGRlZmF1bHQsICdjc3MnIHdvcmtzIGJldHRlciBmb3Igc2VydmVyXG4gICAqIHNpZGUgcmVuZGVyaW5nLlxuICAgKi9cbiAgaW1wbGVtZW50YXRpb246IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZihbJ2pzJywgJ2NzcyddKSxcblxuICAvKipcbiAgICogSWYgdHJ1ZSwgc2NyZWVucyB0aGlzIHNpemUgYW5kIGRvd24gd2lsbCBiZSBoaWRkZW4uXG4gICAqL1xuICBsZ0Rvd246IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiB0cnVlLCBzY3JlZW5zIHRoaXMgc2l6ZSBhbmQgdXAgd2lsbCBiZSBoaWRkZW4uXG4gICAqL1xuICBsZ1VwOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogSWYgdHJ1ZSwgc2NyZWVucyB0aGlzIHNpemUgYW5kIGRvd24gd2lsbCBiZSBoaWRkZW4uXG4gICAqL1xuICBtZERvd246IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiB0cnVlLCBzY3JlZW5zIHRoaXMgc2l6ZSBhbmQgdXAgd2lsbCBiZSBoaWRkZW4uXG4gICAqL1xuICBtZFVwOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogSGlkZSB0aGUgZ2l2ZW4gYnJlYWtwb2ludChzKS5cbiAgICovXG4gIG9ubHk6IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZihbJ3hzJywgJ3NtJywgJ21kJywgJ2xnJywgJ3hsJ10pLCBfcHJvcFR5cGVzLmRlZmF1bHQuYXJyYXlPZihfcHJvcFR5cGVzLmRlZmF1bHQub25lT2YoWyd4cycsICdzbScsICdtZCcsICdsZycsICd4bCddKSldKSxcblxuICAvKipcbiAgICogSWYgdHJ1ZSwgc2NyZWVucyB0aGlzIHNpemUgYW5kIGRvd24gd2lsbCBiZSBoaWRkZW4uXG4gICAqL1xuICBzbURvd246IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiB0cnVlLCBzY3JlZW5zIHRoaXMgc2l6ZSBhbmQgdXAgd2lsbCBiZSBoaWRkZW4uXG4gICAqL1xuICBzbVVwOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogSWYgdHJ1ZSwgc2NyZWVucyB0aGlzIHNpemUgYW5kIGRvd24gd2lsbCBiZSBoaWRkZW4uXG4gICAqL1xuICB4bERvd246IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiB0cnVlLCBzY3JlZW5zIHRoaXMgc2l6ZSBhbmQgdXAgd2lsbCBiZSBoaWRkZW4uXG4gICAqL1xuICB4bFVwOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogSWYgdHJ1ZSwgc2NyZWVucyB0aGlzIHNpemUgYW5kIGRvd24gd2lsbCBiZSBoaWRkZW4uXG4gICAqL1xuICB4c0Rvd246IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiB0cnVlLCBzY3JlZW5zIHRoaXMgc2l6ZSBhbmQgdXAgd2lsbCBiZSBoaWRkZW4uXG4gICAqL1xuICB4c1VwOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbFxufSA6IHt9O1xuXG52YXIgX2RlZmF1bHQgPSAoMCwgX3dpdGhTdHlsZXMuZGVmYXVsdCkoc3R5bGVzKShIaWRkZW5Dc3MpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkXCIpO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xuXG52YXIgX2NyZWF0ZUJyZWFrcG9pbnRzID0gcmVxdWlyZShcIi4uL3N0eWxlcy9jcmVhdGVCcmVha3BvaW50c1wiKTtcblxudmFyIF93aXRoV2lkdGggPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwiLi4vd2l0aFdpZHRoXCIpKTtcblxudmFyIF9leGFjdFByb3AgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi91dGlscy9leGFjdFByb3BcIikpO1xuXG4vKipcbiAqIEBpZ25vcmUgLSBpbnRlcm5hbCBjb21wb25lbnQuXG4gKi9cbmZ1bmN0aW9uIEhpZGRlbkpzKHByb3BzKSB7XG4gIHZhciBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgb25seSA9IHByb3BzLm9ubHksXG4gICAgICB3aWR0aCA9IHByb3BzLndpZHRoO1xuICB2YXIgdmlzaWJsZSA9IHRydWU7IC8vIGBvbmx5YCBjaGVjayBpcyBmYXN0ZXIgdG8gZ2V0IG91dCBzb29uZXIgaWYgdXNlZC5cblxuICBpZiAob25seSkge1xuICAgIGlmIChBcnJheS5pc0FycmF5KG9ubHkpKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG9ubHkubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgdmFyIGJyZWFrcG9pbnQgPSBvbmx5W2ldO1xuXG4gICAgICAgIGlmICh3aWR0aCA9PT0gYnJlYWtwb2ludCkge1xuICAgICAgICAgIHZpc2libGUgPSBmYWxzZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAob25seSAmJiB3aWR0aCA9PT0gb25seSkge1xuICAgICAgdmlzaWJsZSA9IGZhbHNlO1xuICAgIH1cbiAgfSAvLyBBbGxvdyBgb25seWAgdG8gYmUgY29tYmluZWQgd2l0aCBvdGhlciBwcm9wcy4gSWYgYWxyZWFkeSBoaWRkZW4sIG5vIG5lZWQgdG8gY2hlY2sgb3RoZXJzLlxuXG5cbiAgaWYgKHZpc2libGUpIHtcbiAgICAvLyBkZXRlcm1pbmUgdmlzaWJpbGl0eSBiYXNlZCBvbiB0aGUgc21hbGxlc3Qgc2l6ZSB1cFxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBfY3JlYXRlQnJlYWtwb2ludHMua2V5cy5sZW5ndGg7IF9pICs9IDEpIHtcbiAgICAgIHZhciBfYnJlYWtwb2ludCA9IF9jcmVhdGVCcmVha3BvaW50cy5rZXlzW19pXTtcbiAgICAgIHZhciBicmVha3BvaW50VXAgPSBwcm9wc1tcIlwiLmNvbmNhdChfYnJlYWtwb2ludCwgXCJVcFwiKV07XG4gICAgICB2YXIgYnJlYWtwb2ludERvd24gPSBwcm9wc1tcIlwiLmNvbmNhdChfYnJlYWtwb2ludCwgXCJEb3duXCIpXTtcblxuICAgICAgaWYgKGJyZWFrcG9pbnRVcCAmJiAoMCwgX3dpdGhXaWR0aC5pc1dpZHRoVXApKF9icmVha3BvaW50LCB3aWR0aCkgfHwgYnJlYWtwb2ludERvd24gJiYgKDAsIF93aXRoV2lkdGguaXNXaWR0aERvd24pKF9icmVha3BvaW50LCB3aWR0aCkpIHtcbiAgICAgICAgdmlzaWJsZSA9IGZhbHNlO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAoIXZpc2libGUpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiBjaGlsZHJlbjtcbn1cblxuSGlkZGVuSnMucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBfcHJvcFR5cGVzLmRlZmF1bHQubm9kZSxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBTcGVjaWZ5IHdoaWNoIGltcGxlbWVudGF0aW9uIHRvIHVzZS4gICdqcycgaXMgdGhlIGRlZmF1bHQsICdjc3MnIHdvcmtzIGJldHRlciBmb3Igc2VydmVyXG4gICAqIHNpZGUgcmVuZGVyaW5nLlxuICAgKi9cbiAgaW1wbGVtZW50YXRpb246IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZihbJ2pzJywgJ2NzcyddKSxcblxuICAvKipcbiAgICogWW91IGNhbiB1c2UgdGhpcyBwcm9wZXJ0eSB3aGVuIGNob29zaW5nIHRoZSBganNgIGltcGxlbWVudGF0aW9uIHdpdGggc2VydmVyIHNpZGUgcmVuZGVyaW5nLlxuICAgKlxuICAgKiBBcyBgd2luZG93LmlubmVyV2lkdGhgIGlzIHVuYXZhaWxhYmxlIG9uIHRoZSBzZXJ2ZXIsXG4gICAqIHdlIGRlZmF1bHQgdG8gcmVuZGVyaW5nIGFuIGVtcHR5IGNvbXBvbmVuZW50IGR1cmluZyB0aGUgZmlyc3QgbW91bnQuXG4gICAqIEluIHNvbWUgc2l0dWF0aW9uIHlvdSBtaWdodCB3YW50IHRvIHVzZSBhbiBoZXJpc3RpYyB0byBhcHByb3hpbWF0ZVxuICAgKiB0aGUgc2NyZWVuIHdpZHRoIG9mIHRoZSBjbGllbnQgYnJvd3NlciBzY3JlZW4gd2lkdGguXG4gICAqXG4gICAqIEZvciBpbnN0YW5jZSwgeW91IGNvdWxkIGJlIHVzaW5nIHRoZSB1c2VyLWFnZW50IG9yIHRoZSBjbGllbnQtaGludHMuXG4gICAqIGh0dHA6Ly9jYW5pdXNlLmNvbS8jc2VhcmNoPWNsaWVudCUyMGhpbnRcbiAgICovXG4gIGluaXRpYWxXaWR0aDogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mKFsneHMnLCAnc20nLCAnbWQnLCAnbGcnLCAneGwnXSksXG5cbiAgLyoqXG4gICAqIElmIHRydWUsIHNjcmVlbnMgdGhpcyBzaXplIGFuZCBkb3duIHdpbGwgYmUgaGlkZGVuLlxuICAgKi9cbiAgbGdEb3duOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogSWYgdHJ1ZSwgc2NyZWVucyB0aGlzIHNpemUgYW5kIHVwIHdpbGwgYmUgaGlkZGVuLlxuICAgKi9cbiAgbGdVcDogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIHRydWUsIHNjcmVlbnMgdGhpcyBzaXplIGFuZCBkb3duIHdpbGwgYmUgaGlkZGVuLlxuICAgKi9cbiAgbWREb3duOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogSWYgdHJ1ZSwgc2NyZWVucyB0aGlzIHNpemUgYW5kIHVwIHdpbGwgYmUgaGlkZGVuLlxuICAgKi9cbiAgbWRVcDogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIEhpZGUgdGhlIGdpdmVuIGJyZWFrcG9pbnQocykuXG4gICAqL1xuICBvbmx5OiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzLmRlZmF1bHQub25lT2YoWyd4cycsICdzbScsICdtZCcsICdsZycsICd4bCddKSwgX3Byb3BUeXBlcy5kZWZhdWx0LmFycmF5T2YoX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mKFsneHMnLCAnc20nLCAnbWQnLCAnbGcnLCAneGwnXSkpXSksXG5cbiAgLyoqXG4gICAqIElmIHRydWUsIHNjcmVlbnMgdGhpcyBzaXplIGFuZCBkb3duIHdpbGwgYmUgaGlkZGVuLlxuICAgKi9cbiAgc21Eb3duOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogSWYgdHJ1ZSwgc2NyZWVucyB0aGlzIHNpemUgYW5kIHVwIHdpbGwgYmUgaGlkZGVuLlxuICAgKi9cbiAgc21VcDogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICogd2lkdGggcHJvcCBwcm92aWRlZCBieSB3aXRoV2lkdGggZGVjb3JhdG9yLlxuICAgKi9cbiAgd2lkdGg6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogSWYgdHJ1ZSwgc2NyZWVucyB0aGlzIHNpemUgYW5kIGRvd24gd2lsbCBiZSBoaWRkZW4uXG4gICAqL1xuICB4bERvd246IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiB0cnVlLCBzY3JlZW5zIHRoaXMgc2l6ZSBhbmQgdXAgd2lsbCBiZSBoaWRkZW4uXG4gICAqL1xuICB4bFVwOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogSWYgdHJ1ZSwgc2NyZWVucyB0aGlzIHNpemUgYW5kIGRvd24gd2lsbCBiZSBoaWRkZW4uXG4gICAqL1xuICB4c0Rvd246IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiB0cnVlLCBzY3JlZW5zIHRoaXMgc2l6ZSBhbmQgdXAgd2lsbCBiZSBoaWRkZW4uXG4gICAqL1xuICB4c1VwOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbFxufTtcbkhpZGRlbkpzLnByb3BUeXBlcyA9ICgwLCBfZXhhY3RQcm9wLmRlZmF1bHQpKEhpZGRlbkpzLnByb3BUeXBlcywgJ0hpZGRlbkpzJyk7XG5cbnZhciBfZGVmYXVsdCA9ICgwLCBfd2l0aFdpZHRoLmRlZmF1bHQpKCkoSGlkZGVuSnMpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIikpO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xuXG52YXIgX0hpZGRlbkpzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9IaWRkZW5Kc1wiKSk7XG5cbnZhciBfSGlkZGVuQ3NzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9IaWRkZW5Dc3NcIikpO1xuXG4vKipcbiAqIFJlc3BvbnNpdmVseSBoaWRlcyBjaGlsZHJlbiBiYXNlZCBvbiB0aGUgc2VsZWN0ZWQgaW1wbGVtZW50YXRpb24uXG4gKi9cbmZ1bmN0aW9uIEhpZGRlbihwcm9wcykge1xuICB2YXIgaW1wbGVtZW50YXRpb24gPSBwcm9wcy5pbXBsZW1lbnRhdGlvbixcbiAgICAgIG90aGVyID0gKDAsIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIuZGVmYXVsdCkocHJvcHMsIFtcImltcGxlbWVudGF0aW9uXCJdKTtcblxuICBpZiAoaW1wbGVtZW50YXRpb24gPT09ICdqcycpIHtcbiAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfSGlkZGVuSnMuZGVmYXVsdCwgb3RoZXIpO1xuICB9XG5cbiAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX0hpZGRlbkNzcy5kZWZhdWx0LCBvdGhlcik7XG59XG5cbkhpZGRlbi5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IF9wcm9wVHlwZXMuZGVmYXVsdC5ub2RlLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFNwZWNpZnkgd2hpY2ggaW1wbGVtZW50YXRpb24gdG8gdXNlLiAgJ2pzJyBpcyB0aGUgZGVmYXVsdCwgJ2Nzcycgd29ya3MgYmV0dGVyIGZvciBzZXJ2ZXJcbiAgICogc2lkZSByZW5kZXJpbmcuXG4gICAqL1xuICBpbXBsZW1lbnRhdGlvbjogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mKFsnanMnLCAnY3NzJ10pLFxuXG4gIC8qKlxuICAgKiBZb3UgY2FuIHVzZSB0aGlzIHByb3BlcnR5IHdoZW4gY2hvb3NpbmcgdGhlIGBqc2AgaW1wbGVtZW50YXRpb24gd2l0aCBzZXJ2ZXIgc2lkZSByZW5kZXJpbmcuXG4gICAqXG4gICAqIEFzIGB3aW5kb3cuaW5uZXJXaWR0aGAgaXMgdW5hdmFpbGFibGUgb24gdGhlIHNlcnZlcixcbiAgICogd2UgZGVmYXVsdCB0byByZW5kZXJpbmcgYW4gZW1wdHkgY29tcG9uZW5lbnQgZHVyaW5nIHRoZSBmaXJzdCBtb3VudC5cbiAgICogSW4gc29tZSBzaXR1YXRpb24geW91IG1pZ2h0IHdhbnQgdG8gdXNlIGFuIGhlcmlzdGljIHRvIGFwcHJveGltYXRlXG4gICAqIHRoZSBzY3JlZW4gd2lkdGggb2YgdGhlIGNsaWVudCBicm93c2VyIHNjcmVlbiB3aWR0aC5cbiAgICpcbiAgICogRm9yIGluc3RhbmNlLCB5b3UgY291bGQgYmUgdXNpbmcgdGhlIHVzZXItYWdlbnQgb3IgdGhlIGNsaWVudC1oaW50cy5cbiAgICogaHR0cDovL2Nhbml1c2UuY29tLyNzZWFyY2g9Y2xpZW50JTIwaGludFxuICAgKi9cbiAgaW5pdGlhbFdpZHRoOiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2YoWyd4cycsICdzbScsICdtZCcsICdsZycsICd4bCddKSxcblxuICAvKipcbiAgICogSWYgdHJ1ZSwgc2NyZWVucyB0aGlzIHNpemUgYW5kIGRvd24gd2lsbCBiZSBoaWRkZW4uXG4gICAqL1xuICBsZ0Rvd246IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiB0cnVlLCBzY3JlZW5zIHRoaXMgc2l6ZSBhbmQgdXAgd2lsbCBiZSBoaWRkZW4uXG4gICAqL1xuICBsZ1VwOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogSWYgdHJ1ZSwgc2NyZWVucyB0aGlzIHNpemUgYW5kIGRvd24gd2lsbCBiZSBoaWRkZW4uXG4gICAqL1xuICBtZERvd246IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiB0cnVlLCBzY3JlZW5zIHRoaXMgc2l6ZSBhbmQgdXAgd2lsbCBiZSBoaWRkZW4uXG4gICAqL1xuICBtZFVwOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogSGlkZSB0aGUgZ2l2ZW4gYnJlYWtwb2ludChzKS5cbiAgICovXG4gIG9ubHk6IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZihbJ3hzJywgJ3NtJywgJ21kJywgJ2xnJywgJ3hsJ10pLCBfcHJvcFR5cGVzLmRlZmF1bHQuYXJyYXlPZihfcHJvcFR5cGVzLmRlZmF1bHQub25lT2YoWyd4cycsICdzbScsICdtZCcsICdsZycsICd4bCddKSldKSxcblxuICAvKipcbiAgICogSWYgdHJ1ZSwgc2NyZWVucyB0aGlzIHNpemUgYW5kIGRvd24gd2lsbCBiZSBoaWRkZW4uXG4gICAqL1xuICBzbURvd246IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiB0cnVlLCBzY3JlZW5zIHRoaXMgc2l6ZSBhbmQgdXAgd2lsbCBiZSBoaWRkZW4uXG4gICAqL1xuICBzbVVwOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogSWYgdHJ1ZSwgc2NyZWVucyB0aGlzIHNpemUgYW5kIGRvd24gd2lsbCBiZSBoaWRkZW4uXG4gICAqL1xuICB4bERvd246IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiB0cnVlLCBzY3JlZW5zIHRoaXMgc2l6ZSBhbmQgdXAgd2lsbCBiZSBoaWRkZW4uXG4gICAqL1xuICB4bFVwOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogSWYgdHJ1ZSwgc2NyZWVucyB0aGlzIHNpemUgYW5kIGRvd24gd2lsbCBiZSBoaWRkZW4uXG4gICAqL1xuICB4c0Rvd246IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiB0cnVlLCBzY3JlZW5zIHRoaXMgc2l6ZSBhbmQgdXAgd2lsbCBiZSBoaWRkZW4uXG4gICAqL1xuICB4c1VwOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbFxufSA6IHt9O1xuSGlkZGVuLmRlZmF1bHRQcm9wcyA9IHtcbiAgaW1wbGVtZW50YXRpb246ICdqcycsXG4gIGxnRG93bjogZmFsc2UsXG4gIGxnVXA6IGZhbHNlLFxuICBtZERvd246IGZhbHNlLFxuICBtZFVwOiBmYWxzZSxcbiAgc21Eb3duOiBmYWxzZSxcbiAgc21VcDogZmFsc2UsXG4gIHhsRG93bjogZmFsc2UsXG4gIHhsVXA6IGZhbHNlLFxuICB4c0Rvd246IGZhbHNlLFxuICB4c1VwOiBmYWxzZVxufTtcbnZhciBfZGVmYXVsdCA9IEhpZGRlbjtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX2V4dGVuZHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2V4dGVuZHNcIikpO1xuXG52YXIgX29iamVjdFNwcmVhZDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vb2JqZWN0U3ByZWFkXCIpKTtcblxudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIikpO1xuXG52YXIgX2NsYXNzQ2FsbENoZWNrMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9jbGFzc0NhbGxDaGVja1wiKSk7XG5cbnZhciBfY3JlYXRlQ2xhc3MyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2NyZWF0ZUNsYXNzXCIpKTtcblxudmFyIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuXCIpKTtcblxudmFyIF9pbmhlcml0czIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vaW5oZXJpdHNcIikpO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xuXG52YXIgX1RyYW5zaXRpb24gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdC10cmFuc2l0aW9uLWdyb3VwL1RyYW5zaXRpb25cIikpO1xuXG52YXIgX3dpdGhUaGVtZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3N0eWxlcy93aXRoVGhlbWVcIikpO1xuXG52YXIgX3V0aWxzID0gcmVxdWlyZShcIi4uL3RyYW5zaXRpb25zL3V0aWxzXCIpO1xuXG4vLyBAaW5oZXJpdGVkQ29tcG9uZW50IFRyYW5zaXRpb25cbmZ1bmN0aW9uIGdldFNjYWxlKHZhbHVlKSB7XG4gIHJldHVybiBcInNjYWxlKFwiLmNvbmNhdCh2YWx1ZSwgXCIsIFwiKS5jb25jYXQoTWF0aC5wb3codmFsdWUsIDIpLCBcIilcIik7XG59XG5cbnZhciBzdHlsZXMgPSB7XG4gIGVudGVyaW5nOiB7XG4gICAgb3BhY2l0eTogMSxcbiAgICB0cmFuc2Zvcm06IGdldFNjYWxlKDEpXG4gIH0sXG4gIGVudGVyZWQ6IHtcbiAgICBvcGFjaXR5OiAxLFxuICAgIHRyYW5zZm9ybTogZ2V0U2NhbGUoMSlcbiAgfVxufTtcbi8qKlxuICogVGhlIEdyb3cgdHJhbnNpdGlvbiBpcyB1c2VkIGJ5IHRoZSBbUG9wb3Zlcl0oL3V0aWxzL3BvcG92ZXJzKSBjb21wb25lbnQuXG4gKiBJdCB1c2VzIFtyZWFjdC10cmFuc2l0aW9uLWdyb3VwXShodHRwczovL2dpdGh1Yi5jb20vcmVhY3Rqcy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwKSBpbnRlcm5hbGx5LlxuICovXG5cbnZhciBHcm93ID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gICgwLCBfaW5oZXJpdHMyLmRlZmF1bHQpKEdyb3csIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIEdyb3coKSB7XG4gICAgdmFyIF9yZWY7XG5cbiAgICB2YXIgX3RlbXAsIF90aGlzO1xuXG4gICAgKDAsIF9jbGFzc0NhbGxDaGVjazIuZGVmYXVsdCkodGhpcywgR3Jvdyk7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuICgwLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIuZGVmYXVsdCkoX3RoaXMsIChfdGVtcCA9IF90aGlzID0gKDAsIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMi5kZWZhdWx0KSh0aGlzLCAoX3JlZiA9IEdyb3cuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihHcm93KSkuY2FsbC5hcHBseShfcmVmLCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzLmF1dG9UaW1lb3V0ID0gdW5kZWZpbmVkLCBfdGhpcy50aW1lciA9IG51bGwsIF90aGlzLmhhbmRsZUVudGVyID0gZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IF90aGlzLnByb3BzLFxuICAgICAgICAgIHRoZW1lID0gX3RoaXMkcHJvcHMudGhlbWUsXG4gICAgICAgICAgdGltZW91dCA9IF90aGlzJHByb3BzLnRpbWVvdXQ7XG4gICAgICAoMCwgX3V0aWxzLnJlZmxvdykobm9kZSk7IC8vIFNvIHRoZSBhbmltYXRpb24gYWx3YXlzIHN0YXJ0IGZyb20gdGhlIHN0YXJ0LlxuXG4gICAgICB2YXIgX2dldFRyYW5zaXRpb25Qcm9wcyA9ICgwLCBfdXRpbHMuZ2V0VHJhbnNpdGlvblByb3BzKShfdGhpcy5wcm9wcywge1xuICAgICAgICBtb2RlOiAnZW50ZXInXG4gICAgICB9KSxcbiAgICAgICAgICB0cmFuc2l0aW9uRHVyYXRpb24gPSBfZ2V0VHJhbnNpdGlvblByb3BzLmR1cmF0aW9uLFxuICAgICAgICAgIGRlbGF5ID0gX2dldFRyYW5zaXRpb25Qcm9wcy5kZWxheTtcblxuICAgICAgdmFyIGR1cmF0aW9uID0gMDtcblxuICAgICAgaWYgKHRpbWVvdXQgPT09ICdhdXRvJykge1xuICAgICAgICBkdXJhdGlvbiA9IHRoZW1lLnRyYW5zaXRpb25zLmdldEF1dG9IZWlnaHREdXJhdGlvbihub2RlLmNsaWVudEhlaWdodCk7XG4gICAgICAgIF90aGlzLmF1dG9UaW1lb3V0ID0gZHVyYXRpb247XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkdXJhdGlvbiA9IHRyYW5zaXRpb25EdXJhdGlvbjtcbiAgICAgIH1cblxuICAgICAgbm9kZS5zdHlsZS50cmFuc2l0aW9uID0gW3RoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgnb3BhY2l0eScsIHtcbiAgICAgICAgZHVyYXRpb246IGR1cmF0aW9uLFxuICAgICAgICBkZWxheTogZGVsYXlcbiAgICAgIH0pLCB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ3RyYW5zZm9ybScsIHtcbiAgICAgICAgZHVyYXRpb246IGR1cmF0aW9uICogMC42NjYsXG4gICAgICAgIGRlbGF5OiBkZWxheVxuICAgICAgfSldLmpvaW4oJywnKTtcblxuICAgICAgaWYgKF90aGlzLnByb3BzLm9uRW50ZXIpIHtcbiAgICAgICAgX3RoaXMucHJvcHMub25FbnRlcihub2RlKTtcbiAgICAgIH1cbiAgICB9LCBfdGhpcy5oYW5kbGVFeGl0ID0gZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wczIgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICB0aGVtZSA9IF90aGlzJHByb3BzMi50aGVtZSxcbiAgICAgICAgICB0aW1lb3V0ID0gX3RoaXMkcHJvcHMyLnRpbWVvdXQ7XG4gICAgICB2YXIgZHVyYXRpb24gPSAwO1xuXG4gICAgICB2YXIgX2dldFRyYW5zaXRpb25Qcm9wczIgPSAoMCwgX3V0aWxzLmdldFRyYW5zaXRpb25Qcm9wcykoX3RoaXMucHJvcHMsIHtcbiAgICAgICAgbW9kZTogJ2V4aXQnXG4gICAgICB9KSxcbiAgICAgICAgICB0cmFuc2l0aW9uRHVyYXRpb24gPSBfZ2V0VHJhbnNpdGlvblByb3BzMi5kdXJhdGlvbixcbiAgICAgICAgICBkZWxheSA9IF9nZXRUcmFuc2l0aW9uUHJvcHMyLmRlbGF5O1xuXG4gICAgICBpZiAodGltZW91dCA9PT0gJ2F1dG8nKSB7XG4gICAgICAgIGR1cmF0aW9uID0gdGhlbWUudHJhbnNpdGlvbnMuZ2V0QXV0b0hlaWdodER1cmF0aW9uKG5vZGUuY2xpZW50SGVpZ2h0KTtcbiAgICAgICAgX3RoaXMuYXV0b1RpbWVvdXQgPSBkdXJhdGlvbjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGR1cmF0aW9uID0gdHJhbnNpdGlvbkR1cmF0aW9uO1xuICAgICAgfVxuXG4gICAgICBub2RlLnN0eWxlLnRyYW5zaXRpb24gPSBbdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCdvcGFjaXR5Jywge1xuICAgICAgICBkdXJhdGlvbjogZHVyYXRpb24sXG4gICAgICAgIGRlbGF5OiBkZWxheVxuICAgICAgfSksIHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgndHJhbnNmb3JtJywge1xuICAgICAgICBkdXJhdGlvbjogZHVyYXRpb24gKiAwLjY2NixcbiAgICAgICAgZGVsYXk6IGRlbGF5IHx8IGR1cmF0aW9uICogMC4zMzNcbiAgICAgIH0pXS5qb2luKCcsJyk7XG4gICAgICBub2RlLnN0eWxlLm9wYWNpdHkgPSAnMCc7XG4gICAgICBub2RlLnN0eWxlLnRyYW5zZm9ybSA9IGdldFNjYWxlKDAuNzUpO1xuXG4gICAgICBpZiAoX3RoaXMucHJvcHMub25FeGl0KSB7XG4gICAgICAgIF90aGlzLnByb3BzLm9uRXhpdChub2RlKTtcbiAgICAgIH1cbiAgICB9LCBfdGhpcy5hZGRFbmRMaXN0ZW5lciA9IGZ1bmN0aW9uIChfLCBuZXh0KSB7XG4gICAgICBpZiAoX3RoaXMucHJvcHMudGltZW91dCA9PT0gJ2F1dG8nKSB7XG4gICAgICAgIF90aGlzLnRpbWVyID0gc2V0VGltZW91dChuZXh0LCBfdGhpcy5hdXRvVGltZW91dCB8fCAwKTtcbiAgICAgIH1cbiAgICB9LCBfdGVtcCkpO1xuICB9XG5cbiAgKDAsIF9jcmVhdGVDbGFzczIuZGVmYXVsdCkoR3JvdywgW3tcbiAgICBrZXk6IFwiY29tcG9uZW50V2lsbFVubW91bnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICBjbGVhclRpbWVvdXQodGhpcy50aW1lcik7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBjaGlsZHJlbiA9IF9wcm9wcy5jaGlsZHJlbixcbiAgICAgICAgICBvbkVudGVyID0gX3Byb3BzLm9uRW50ZXIsXG4gICAgICAgICAgb25FeGl0ID0gX3Byb3BzLm9uRXhpdCxcbiAgICAgICAgICBzdHlsZVByb3AgPSBfcHJvcHMuc3R5bGUsXG4gICAgICAgICAgdGhlbWUgPSBfcHJvcHMudGhlbWUsXG4gICAgICAgICAgdGltZW91dCA9IF9wcm9wcy50aW1lb3V0LFxuICAgICAgICAgIG90aGVyID0gKDAsIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIuZGVmYXVsdCkoX3Byb3BzLCBbXCJjaGlsZHJlblwiLCBcIm9uRW50ZXJcIiwgXCJvbkV4aXRcIiwgXCJzdHlsZVwiLCBcInRoZW1lXCIsIFwidGltZW91dFwiXSk7XG4gICAgICB2YXIgc3R5bGUgPSAoMCwgX29iamVjdFNwcmVhZDIuZGVmYXVsdCkoe30sIHN0eWxlUHJvcCwgX3JlYWN0LmRlZmF1bHQuaXNWYWxpZEVsZW1lbnQoY2hpbGRyZW4pID8gY2hpbGRyZW4ucHJvcHMuc3R5bGUgOiB7fSk7XG4gICAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfVHJhbnNpdGlvbi5kZWZhdWx0LCAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHtcbiAgICAgICAgYXBwZWFyOiB0cnVlLFxuICAgICAgICBvbkVudGVyOiB0aGlzLmhhbmRsZUVudGVyLFxuICAgICAgICBvbkV4aXQ6IHRoaXMuaGFuZGxlRXhpdCxcbiAgICAgICAgYWRkRW5kTGlzdGVuZXI6IHRoaXMuYWRkRW5kTGlzdGVuZXIsXG4gICAgICAgIHRpbWVvdXQ6IHRpbWVvdXQgPT09ICdhdXRvJyA/IG51bGwgOiB0aW1lb3V0XG4gICAgICB9LCBvdGhlciksIGZ1bmN0aW9uIChzdGF0ZSwgY2hpbGRQcm9wcykge1xuICAgICAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY2xvbmVFbGVtZW50KGNoaWxkcmVuLCAoMCwgX29iamVjdFNwcmVhZDIuZGVmYXVsdCkoe1xuICAgICAgICAgIHN0eWxlOiAoMCwgX29iamVjdFNwcmVhZDIuZGVmYXVsdCkoe1xuICAgICAgICAgICAgb3BhY2l0eTogMCxcbiAgICAgICAgICAgIHRyYW5zZm9ybTogZ2V0U2NhbGUoMC43NSlcbiAgICAgICAgICB9LCBzdHlsZXNbc3RhdGVdLCBzdHlsZSlcbiAgICAgICAgfSwgY2hpbGRQcm9wcykpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XSk7XG4gIHJldHVybiBHcm93O1xufShfcmVhY3QuZGVmYXVsdC5Db21wb25lbnQpO1xuXG5Hcm93LnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqXG4gICAqIEEgc2luZ2xlIGNoaWxkIGNvbnRlbnQgZWxlbWVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzLmRlZmF1bHQuZWxlbWVudCwgX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmNdKSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCBzaG93IHRoZSBjb21wb25lbnQ7IHRyaWdnZXJzIHRoZSBlbnRlciBvciBleGl0IGFuaW1hdGlvbi5cbiAgICovXG4gIGluOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25FbnRlcjogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uRXhpdDogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHN0eWxlOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICB0aGVtZTogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBUaGUgZHVyYXRpb24gZm9yIHRoZSB0cmFuc2l0aW9uLCBpbiBtaWxsaXNlY29uZHMuXG4gICAqIFlvdSBtYXkgc3BlY2lmeSBhIHNpbmdsZSB0aW1lb3V0IGZvciBhbGwgdHJhbnNpdGlvbnMsIG9yIGluZGl2aWR1YWxseSB3aXRoIGFuIG9iamVjdC5cbiAgICpcbiAgICogU2V0IHRvICdhdXRvJyB0byBhdXRvbWF0aWNhbGx5IGNhbGN1bGF0ZSB0cmFuc2l0aW9uIHRpbWUgYmFzZWQgb24gaGVpZ2h0LlxuICAgKi9cbiAgdGltZW91dDogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlcy5kZWZhdWx0Lm51bWJlciwgX3Byb3BUeXBlcy5kZWZhdWx0LnNoYXBlKHtcbiAgICBlbnRlcjogX3Byb3BUeXBlcy5kZWZhdWx0Lm51bWJlcixcbiAgICBleGl0OiBfcHJvcFR5cGVzLmRlZmF1bHQubnVtYmVyXG4gIH0pLCBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2YoWydhdXRvJ10pXSlcbn0gOiB7fTtcbkdyb3cuZGVmYXVsdFByb3BzID0ge1xuICB0aW1lb3V0OiAnYXV0bydcbn07XG5Hcm93Lm11aVN1cHBvcnRBdXRvID0gdHJ1ZTtcblxudmFyIF9kZWZhdWx0ID0gKDAsIF93aXRoVGhlbWUuZGVmYXVsdCkoKShHcm93KTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLnN0eWxlcyA9IHZvaWQgMDtcblxudmFyIF9leHRlbmRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9leHRlbmRzXCIpKTtcblxudmFyIF9kZWZpbmVQcm9wZXJ0eTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vZGVmaW5lUHJvcGVydHlcIikpO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiKSk7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbnZhciBfY2xhc3NuYW1lcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImNsYXNzbmFtZXNcIikpO1xuXG52YXIgX3dpdGhTdHlsZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9zdHlsZXMvd2l0aFN0eWxlc1wiKSk7XG5cbnZhciBzdHlsZXMgPSBmdW5jdGlvbiBzdHlsZXModGhlbWUpIHtcbiAgcmV0dXJuIHtcbiAgICByb290OiB7XG4gICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgIGxlZnQ6IDAsXG4gICAgICByaWdodDogMCxcbiAgICAgIGhlaWdodDogNDgsXG4gICAgICBiYWNrZ3JvdW5kOiAncmdiYSgwLCAwLCAwLCAwLjQpJyxcbiAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgZm9udEZhbWlseTogdGhlbWUudHlwb2dyYXBoeS5mb250RmFtaWx5XG4gICAgfSxcbiAgICB0aXRsZVBvc2l0aW9uQm90dG9tOiB7XG4gICAgICBib3R0b206IDBcbiAgICB9LFxuICAgIHRpdGxlUG9zaXRpb25Ub3A6IHtcbiAgICAgIHRvcDogMFxuICAgIH0sXG4gICAgcm9vdFN1YnRpdGxlOiB7XG4gICAgICBoZWlnaHQ6IDY4XG4gICAgfSxcbiAgICB0aXRsZVdyYXA6IHtcbiAgICAgIGZsZXhHcm93OiAxLFxuICAgICAgbWFyZ2luTGVmdDogdGhlbWUubWl4aW5zLmd1dHRlcnMoKS5wYWRkaW5nTGVmdCxcbiAgICAgIG1hcmdpblJpZ2h0OiB0aGVtZS5taXhpbnMuZ3V0dGVycygpLnBhZGRpbmdSaWdodCxcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLmNvbW1vbi53aGl0ZSxcbiAgICAgIG92ZXJmbG93OiAnaGlkZGVuJ1xuICAgIH0sXG4gICAgdGl0bGVXcmFwQWN0aW9uUG9zTGVmdDoge1xuICAgICAgbWFyZ2luTGVmdDogMFxuICAgIH0sXG4gICAgdGl0bGVXcmFwQWN0aW9uUG9zUmlnaHQ6IHtcbiAgICAgIG1hcmdpblJpZ2h0OiAwXG4gICAgfSxcbiAgICB0aXRsZToge1xuICAgICAgZm9udFNpemU6IHRoZW1lLnR5cG9ncmFwaHkucHhUb1JlbSgxNiksXG4gICAgICBsaW5lSGVpZ2h0OiAnMjRweCcsXG4gICAgICB0ZXh0T3ZlcmZsb3c6ICdlbGxpcHNpcycsXG4gICAgICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gICAgICB3aGl0ZVNwYWNlOiAnbm93cmFwJ1xuICAgIH0sXG4gICAgc3VidGl0bGU6IHtcbiAgICAgIGZvbnRTaXplOiB0aGVtZS50eXBvZ3JhcGh5LnB4VG9SZW0oMTIpLFxuICAgICAgbGluZUhlaWdodDogMSxcbiAgICAgIHRleHRPdmVyZmxvdzogJ2VsbGlwc2lzJyxcbiAgICAgIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgICAgIHdoaXRlU3BhY2U6ICdub3dyYXAnXG4gICAgfSxcbiAgICBhY3Rpb25JY29uOiB7fSxcbiAgICBhY3Rpb25JY29uQWN0aW9uUG9zTGVmdDoge1xuICAgICAgb3JkZXI6IC0xXG4gICAgfVxuICB9O1xufTtcblxuZXhwb3J0cy5zdHlsZXMgPSBzdHlsZXM7XG5cbmZ1bmN0aW9uIEdyaWRMaXN0VGlsZUJhcihwcm9wcykge1xuICB2YXIgX2NsYXNzTmFtZXMsIF9jbGFzc05hbWVzMjtcblxuICB2YXIgYWN0aW9uSWNvbiA9IHByb3BzLmFjdGlvbkljb24sXG4gICAgICBhY3Rpb25Qb3NpdGlvbiA9IHByb3BzLmFjdGlvblBvc2l0aW9uLFxuICAgICAgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBjbGFzc05hbWVQcm9wID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgc3VidGl0bGUgPSBwcm9wcy5zdWJ0aXRsZSxcbiAgICAgIHRpdGxlID0gcHJvcHMudGl0bGUsXG4gICAgICB0aXRsZVBvc2l0aW9uID0gcHJvcHMudGl0bGVQb3NpdGlvbixcbiAgICAgIG90aGVyID0gKDAsIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIuZGVmYXVsdCkocHJvcHMsIFtcImFjdGlvbkljb25cIiwgXCJhY3Rpb25Qb3NpdGlvblwiLCBcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJzdWJ0aXRsZVwiLCBcInRpdGxlXCIsIFwidGl0bGVQb3NpdGlvblwiXSk7XG4gIHZhciBhY3Rpb25Qb3MgPSBhY3Rpb25JY29uICYmIGFjdGlvblBvc2l0aW9uO1xuICB2YXIgY2xhc3NOYW1lID0gKDAsIF9jbGFzc25hbWVzLmRlZmF1bHQpKGNsYXNzZXMucm9vdCwgKF9jbGFzc05hbWVzID0ge30sICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKF9jbGFzc05hbWVzLCBjbGFzc2VzLnRpdGxlUG9zaXRpb25Cb3R0b20sIHRpdGxlUG9zaXRpb24gPT09ICdib3R0b20nKSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2NsYXNzTmFtZXMsIGNsYXNzZXMudGl0bGVQb3NpdGlvblRvcCwgdGl0bGVQb3NpdGlvbiA9PT0gJ3RvcCcpLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lcywgY2xhc3Nlcy5yb290U3VidGl0bGUsIHN1YnRpdGxlKSwgX2NsYXNzTmFtZXMpLCBjbGFzc05hbWVQcm9wKTsgLy8gUmVtb3ZlIHRoZSBtYXJnaW4gYmV0d2VlbiB0aGUgdGl0bGUgLyBzdWJ0aXRsZSB3cmFwcGVyLCBhbmQgdGhlIEFjdGlvbiBJY29uXG5cbiAgdmFyIHRpdGxlV3JhcENsYXNzTmFtZSA9ICgwLCBfY2xhc3NuYW1lcy5kZWZhdWx0KShjbGFzc2VzLnRpdGxlV3JhcCwgKF9jbGFzc05hbWVzMiA9IHt9LCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lczIsIGNsYXNzZXMudGl0bGVXcmFwQWN0aW9uUG9zTGVmdCwgYWN0aW9uUG9zID09PSAnbGVmdCcpLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lczIsIGNsYXNzZXMudGl0bGVXcmFwQWN0aW9uUG9zUmlnaHQsIGFjdGlvblBvcyA9PT0gJ3JpZ2h0JyksIF9jbGFzc05hbWVzMikpO1xuICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImRpdlwiLCAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHtcbiAgICBjbGFzc05hbWU6IGNsYXNzTmFtZVxuICB9LCBvdGhlciksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgIGNsYXNzTmFtZTogdGl0bGVXcmFwQ2xhc3NOYW1lXG4gIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgIGNsYXNzTmFtZTogY2xhc3Nlcy50aXRsZVxuICB9LCB0aXRsZSksIHN1YnRpdGxlID8gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgY2xhc3NOYW1lOiBjbGFzc2VzLnN1YnRpdGxlXG4gIH0sIHN1YnRpdGxlKSA6IG51bGwpLCBhY3Rpb25JY29uID8gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgY2xhc3NOYW1lOiAoMCwgX2NsYXNzbmFtZXMuZGVmYXVsdCkoY2xhc3Nlcy5hY3Rpb25JY29uLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KSh7fSwgY2xhc3Nlcy5hY3Rpb25JY29uQWN0aW9uUG9zTGVmdCwgYWN0aW9uUG9zID09PSAnbGVmdCcpKVxuICB9LCBhY3Rpb25JY29uKSA6IG51bGwpO1xufVxuXG5HcmlkTGlzdFRpbGVCYXIucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKipcbiAgICogQW4gSWNvbkJ1dHRvbiBlbGVtZW50IHRvIGJlIHVzZWQgYXMgc2Vjb25kYXJ5IGFjdGlvbiB0YXJnZXRcbiAgICogKHByaW1hcnkgYWN0aW9uIHRhcmdldCBpcyB0aGUgdGlsZSBpdHNlbGYpLlxuICAgKi9cbiAgYWN0aW9uSWNvbjogX3Byb3BUeXBlcy5kZWZhdWx0Lm5vZGUsXG5cbiAgLyoqXG4gICAqIFBvc2l0aW9uIG9mIHNlY29uZGFyeSBhY3Rpb24gSWNvbkJ1dHRvbi5cbiAgICovXG4gIGFjdGlvblBvc2l0aW9uOiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2YoWydsZWZ0JywgJ3JpZ2h0J10pLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2Nzcy1hcGkpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxcblxuICAvKipcbiAgICogU3RyaW5nIG9yIGVsZW1lbnQgc2VydmluZyBhcyBzdWJ0aXRsZSAoc3VwcG9ydCB0ZXh0KS5cbiAgICovXG4gIHN1YnRpdGxlOiBfcHJvcFR5cGVzLmRlZmF1bHQubm9kZSxcblxuICAvKipcbiAgICogVGl0bGUgdG8gYmUgZGlzcGxheWVkIG9uIHRpbGUuXG4gICAqL1xuICB0aXRsZTogX3Byb3BUeXBlcy5kZWZhdWx0Lm5vZGUsXG5cbiAgLyoqXG4gICAqIFBvc2l0aW9uIG9mIHRoZSB0aXRsZSBiYXIuXG4gICAqL1xuICB0aXRsZVBvc2l0aW9uOiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2YoWyd0b3AnLCAnYm90dG9tJ10pXG59IDoge307XG5HcmlkTGlzdFRpbGVCYXIuZGVmYXVsdFByb3BzID0ge1xuICBhY3Rpb25Qb3NpdGlvbjogJ3JpZ2h0JyxcbiAgdGl0bGVQb3NpdGlvbjogJ2JvdHRvbSdcbn07XG5cbnZhciBfZGVmYXVsdCA9ICgwLCBfd2l0aFN0eWxlcy5kZWZhdWx0KShzdHlsZXMsIHtcbiAgbmFtZTogJ011aUdyaWRMaXN0VGlsZUJhcidcbn0pKEdyaWRMaXN0VGlsZUJhcik7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5zdHlsZXMgPSB2b2lkIDA7XG5cbnZhciBfZXh0ZW5kczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vZXh0ZW5kc1wiKSk7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCIpKTtcblxudmFyIF90b0NvbnN1bWFibGVBcnJheTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vdG9Db25zdW1hYmxlQXJyYXlcIikpO1xuXG52YXIgX2NsYXNzQ2FsbENoZWNrMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9jbGFzc0NhbGxDaGVja1wiKSk7XG5cbnZhciBfY3JlYXRlQ2xhc3MyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2NyZWF0ZUNsYXNzXCIpKTtcblxudmFyIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuXCIpKTtcblxudmFyIF9pbmhlcml0czIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vaW5oZXJpdHNcIikpO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xuXG52YXIgX2NsYXNzbmFtZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJjbGFzc25hbWVzXCIpKTtcblxudmFyIF9yZWFjdEV2ZW50TGlzdGVuZXIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdC1ldmVudC1saXN0ZW5lclwiKSk7XG5cbnZhciBfZGVib3VuY2UgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJkZWJvdW5jZVwiKSk7XG5cbnZhciBfd2l0aFN0eWxlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3N0eWxlcy93aXRoU3R5bGVzXCIpKTtcblxudmFyIHN0eWxlcyA9IHtcbiAgcm9vdDoge1xuICAgIGJveFNpemluZzogJ2JvcmRlci1ib3gnLFxuICAgIGZsZXhTaHJpbms6IDBcbiAgfSxcbiAgdGlsZToge1xuICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgIGRpc3BsYXk6ICdibG9jaycsXG4gICAgLy8gSW4gY2FzZSBpdCdzIG5vdCByZW5kZXJkIHdpdGggYSBkaXYuXG4gICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgb3ZlcmZsb3c6ICdoaWRkZW4nXG4gIH0sXG4gIGltZ0Z1bGxIZWlnaHQ6IHtcbiAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICB0cmFuc2Zvcm06ICd0cmFuc2xhdGVYKC01MCUpJyxcbiAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICBsZWZ0OiAnNTAlJ1xuICB9LFxuICBpbWdGdWxsV2lkdGg6IHtcbiAgICB3aWR0aDogJzEwMCUnLFxuICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZVkoLTUwJSknLFxuICAgIHRvcDogJzUwJSdcbiAgfVxufTtcbmV4cG9ydHMuc3R5bGVzID0gc3R5bGVzO1xuXG52YXIgR3JpZExpc3RUaWxlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gICgwLCBfaW5oZXJpdHMyLmRlZmF1bHQpKEdyaWRMaXN0VGlsZSwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gR3JpZExpc3RUaWxlKCkge1xuICAgIHZhciBfcmVmO1xuXG4gICAgdmFyIF90ZW1wLCBfdGhpcztcblxuICAgICgwLCBfY2xhc3NDYWxsQ2hlY2syLmRlZmF1bHQpKHRoaXMsIEdyaWRMaXN0VGlsZSk7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuICgwLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIuZGVmYXVsdCkoX3RoaXMsIChfdGVtcCA9IF90aGlzID0gKDAsIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMi5kZWZhdWx0KSh0aGlzLCAoX3JlZiA9IEdyaWRMaXN0VGlsZS5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKEdyaWRMaXN0VGlsZSkpLmNhbGwuYXBwbHkoX3JlZiwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcy5pbWdFbGVtZW50ID0gbnVsbCwgX3RoaXMuaGFuZGxlUmVzaXplID0gKDAsIF9kZWJvdW5jZS5kZWZhdWx0KShmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpcy5maXQoKTtcbiAgICB9LCAxNjYpLCBfdGhpcy5maXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgaW1nRWxlbWVudCA9IF90aGlzLmltZ0VsZW1lbnQ7XG5cbiAgICAgIGlmICghaW1nRWxlbWVudCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICghaW1nRWxlbWVudC5jb21wbGV0ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChpbWdFbGVtZW50LndpZHRoIC8gaW1nRWxlbWVudC5oZWlnaHQgPiBpbWdFbGVtZW50LnBhcmVudE5vZGUub2Zmc2V0V2lkdGggLyBpbWdFbGVtZW50LnBhcmVudE5vZGUub2Zmc2V0SGVpZ2h0KSB7XG4gICAgICAgIHZhciBfaW1nRWxlbWVudCRjbGFzc0xpc3QsIF9pbWdFbGVtZW50JGNsYXNzTGlzdDI7XG5cbiAgICAgICAgKF9pbWdFbGVtZW50JGNsYXNzTGlzdCA9IGltZ0VsZW1lbnQuY2xhc3NMaXN0KS5yZW1vdmUuYXBwbHkoX2ltZ0VsZW1lbnQkY2xhc3NMaXN0LCAoMCwgX3RvQ29uc3VtYWJsZUFycmF5Mi5kZWZhdWx0KShfdGhpcy5wcm9wcy5jbGFzc2VzLmltZ0Z1bGxXaWR0aC5zcGxpdCgnICcpKSk7XG5cbiAgICAgICAgKF9pbWdFbGVtZW50JGNsYXNzTGlzdDIgPSBpbWdFbGVtZW50LmNsYXNzTGlzdCkuYWRkLmFwcGx5KF9pbWdFbGVtZW50JGNsYXNzTGlzdDIsICgwLCBfdG9Db25zdW1hYmxlQXJyYXkyLmRlZmF1bHQpKF90aGlzLnByb3BzLmNsYXNzZXMuaW1nRnVsbEhlaWdodC5zcGxpdCgnICcpKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgX2ltZ0VsZW1lbnQkY2xhc3NMaXN0MywgX2ltZ0VsZW1lbnQkY2xhc3NMaXN0NDtcblxuICAgICAgICAoX2ltZ0VsZW1lbnQkY2xhc3NMaXN0MyA9IGltZ0VsZW1lbnQuY2xhc3NMaXN0KS5yZW1vdmUuYXBwbHkoX2ltZ0VsZW1lbnQkY2xhc3NMaXN0MywgKDAsIF90b0NvbnN1bWFibGVBcnJheTIuZGVmYXVsdCkoX3RoaXMucHJvcHMuY2xhc3Nlcy5pbWdGdWxsSGVpZ2h0LnNwbGl0KCcgJykpKTtcblxuICAgICAgICAoX2ltZ0VsZW1lbnQkY2xhc3NMaXN0NCA9IGltZ0VsZW1lbnQuY2xhc3NMaXN0KS5hZGQuYXBwbHkoX2ltZ0VsZW1lbnQkY2xhc3NMaXN0NCwgKDAsIF90b0NvbnN1bWFibGVBcnJheTIuZGVmYXVsdCkoX3RoaXMucHJvcHMuY2xhc3Nlcy5pbWdGdWxsV2lkdGguc3BsaXQoJyAnKSkpO1xuICAgICAgfVxuXG4gICAgICBpbWdFbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2xvYWQnLCBfdGhpcy5maXQpO1xuICAgIH0sIF90ZW1wKSk7XG4gIH1cblxuICAoMCwgX2NyZWF0ZUNsYXNzMi5kZWZhdWx0KShHcmlkTGlzdFRpbGUsIFt7XG4gICAga2V5OiBcImNvbXBvbmVudERpZE1vdW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgdGhpcy5lbnN1cmVJbWFnZUNvdmVyKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImNvbXBvbmVudERpZFVwZGF0ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUoKSB7XG4gICAgICB0aGlzLmVuc3VyZUltYWdlQ292ZXIoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY29tcG9uZW50V2lsbFVubW91bnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICB0aGlzLmhhbmRsZVJlc2l6ZS5jbGVhcigpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJlbnN1cmVJbWFnZUNvdmVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGVuc3VyZUltYWdlQ292ZXIoKSB7XG4gICAgICBpZiAoIXRoaXMuaW1nRWxlbWVudCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLmltZ0VsZW1lbnQuY29tcGxldGUpIHtcbiAgICAgICAgdGhpcy5maXQoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuaW1nRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgdGhpcy5maXQpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGNoaWxkcmVuID0gX3Byb3BzLmNoaWxkcmVuLFxuICAgICAgICAgIGNsYXNzZXMgPSBfcHJvcHMuY2xhc3NlcyxcbiAgICAgICAgICBjbGFzc05hbWUgPSBfcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICAgIGNvbHMgPSBfcHJvcHMuY29scyxcbiAgICAgICAgICBDb21wb25lbnQgPSBfcHJvcHMuY29tcG9uZW50LFxuICAgICAgICAgIHJvd3MgPSBfcHJvcHMucm93cyxcbiAgICAgICAgICBvdGhlciA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyLmRlZmF1bHQpKF9wcm9wcywgW1wiY2hpbGRyZW5cIiwgXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29sc1wiLCBcImNvbXBvbmVudFwiLCBcInJvd3NcIl0pO1xuICAgICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHtcbiAgICAgICAgY2xhc3NOYW1lOiAoMCwgX2NsYXNzbmFtZXMuZGVmYXVsdCkoY2xhc3Nlcy5yb290LCBjbGFzc05hbWUpXG4gICAgICB9LCBvdGhlciksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0RXZlbnRMaXN0ZW5lci5kZWZhdWx0LCB7XG4gICAgICAgIHRhcmdldDogXCJ3aW5kb3dcIixcbiAgICAgICAgb25SZXNpemU6IHRoaXMuaGFuZGxlUmVzaXplXG4gICAgICB9KSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICAgIGNsYXNzTmFtZTogY2xhc3Nlcy50aWxlXG4gICAgICB9LCBfcmVhY3QuZGVmYXVsdC5DaGlsZHJlbi5tYXAoY2hpbGRyZW4sIGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICBpZiAoY2hpbGQgJiYgY2hpbGQudHlwZSA9PT0gJ2ltZycpIHtcbiAgICAgICAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY2xvbmVFbGVtZW50KGNoaWxkLCB7XG4gICAgICAgICAgICBrZXk6ICdpbWcnLFxuICAgICAgICAgICAgcmVmOiBmdW5jdGlvbiByZWYobm9kZSkge1xuICAgICAgICAgICAgICBfdGhpczIuaW1nRWxlbWVudCA9IG5vZGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gY2hpbGQ7XG4gICAgICB9KSkpO1xuICAgIH1cbiAgfV0pO1xuICByZXR1cm4gR3JpZExpc3RUaWxlO1xufShfcmVhY3QuZGVmYXVsdC5Db21wb25lbnQpO1xuXG5HcmlkTGlzdFRpbGUucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKipcbiAgICogVGhlb3JldGljYWxseSB5b3UgY2FuIHBhc3MgYW55IG5vZGUgYXMgY2hpbGRyZW4sIGJ1dCB0aGUgbWFpbiB1c2UgY2FzZSBpcyB0byBwYXNzIGFuIGltZyxcbiAgICogaW4gd2hpY2ggY2FzZSBHcmlkTGlzdFRpbGUgdGFrZXMgY2FyZSBvZiBtYWtpbmcgdGhlIGltYWdlIFwiY292ZXJcIiBhdmFpbGFibGUgc3BhY2VcbiAgICogKHNpbWlsYXIgdG8gYGJhY2tncm91bmQtc2l6ZTogY292ZXJgIG9yIHRvIGBvYmplY3QtZml0OiBjb3ZlcmApLlxuICAgKi9cbiAgY2hpbGRyZW46IF9wcm9wVHlwZXMuZGVmYXVsdC5ub2RlLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2Nzcy1hcGkpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxcblxuICAvKipcbiAgICogV2lkdGggb2YgdGhlIHRpbGUgaW4gbnVtYmVyIG9mIGdyaWQgY2VsbHMuXG4gICAqL1xuICBjb2xzOiBfcHJvcFR5cGVzLmRlZmF1bHQubnVtYmVyLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBET00gZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZywgX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmNdKSxcblxuICAvKipcbiAgICogSGVpZ2h0IG9mIHRoZSB0aWxlIGluIG51bWJlciBvZiBncmlkIGNlbGxzLlxuICAgKi9cbiAgcm93czogX3Byb3BUeXBlcy5kZWZhdWx0Lm51bWJlclxufSA6IHt9O1xuR3JpZExpc3RUaWxlLmRlZmF1bHRQcm9wcyA9IHtcbiAgY29sczogMSxcbiAgY29tcG9uZW50OiAnbGknLFxuICByb3dzOiAxXG59O1xuXG52YXIgX2RlZmF1bHQgPSAoMCwgX3dpdGhTdHlsZXMuZGVmYXVsdCkoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlHcmlkTGlzdFRpbGUnXG59KShHcmlkTGlzdFRpbGUpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuc3R5bGVzID0gdm9pZCAwO1xuXG52YXIgX2V4dGVuZHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2V4dGVuZHNcIikpO1xuXG52YXIgX29iamVjdFNwcmVhZDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vb2JqZWN0U3ByZWFkXCIpKTtcblxudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIikpO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xuXG52YXIgX2NsYXNzbmFtZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJjbGFzc25hbWVzXCIpKTtcblxudmFyIF93aXRoU3R5bGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vc3R5bGVzL3dpdGhTdHlsZXNcIikpO1xuXG52YXIgc3R5bGVzID0ge1xuICByb290OiB7XG4gICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgIGZsZXhXcmFwOiAnd3JhcCcsXG4gICAgb3ZlcmZsb3dZOiAnYXV0bycsXG4gICAgbGlzdFN0eWxlOiAnbm9uZScsXG4gICAgcGFkZGluZzogMCxcbiAgICBXZWJraXRPdmVyZmxvd1Njcm9sbGluZzogJ3RvdWNoJyAvLyBBZGQgaU9TIG1vbWVudHVtIHNjcm9sbGluZy5cblxuICB9XG59O1xuZXhwb3J0cy5zdHlsZXMgPSBzdHlsZXM7XG5cbmZ1bmN0aW9uIEdyaWRMaXN0KHByb3BzKSB7XG4gIHZhciBjZWxsSGVpZ2h0ID0gcHJvcHMuY2VsbEhlaWdodCxcbiAgICAgIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZVByb3AgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBjb2xzID0gcHJvcHMuY29scyxcbiAgICAgIENvbXBvbmVudCA9IHByb3BzLmNvbXBvbmVudCxcbiAgICAgIHNwYWNpbmcgPSBwcm9wcy5zcGFjaW5nLFxuICAgICAgc3R5bGUgPSBwcm9wcy5zdHlsZSxcbiAgICAgIG90aGVyID0gKDAsIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIuZGVmYXVsdCkocHJvcHMsIFtcImNlbGxIZWlnaHRcIiwgXCJjaGlsZHJlblwiLCBcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJjb2xzXCIsIFwiY29tcG9uZW50XCIsIFwic3BhY2luZ1wiLCBcInN0eWxlXCJdKTtcbiAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHtcbiAgICBjbGFzc05hbWU6ICgwLCBfY2xhc3NuYW1lcy5kZWZhdWx0KShjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZVByb3ApLFxuICAgIHN0eWxlOiAoMCwgX29iamVjdFNwcmVhZDIuZGVmYXVsdCkoe1xuICAgICAgbWFyZ2luOiAtc3BhY2luZyAvIDJcbiAgICB9LCBzdHlsZSlcbiAgfSwgb3RoZXIpLCBfcmVhY3QuZGVmYXVsdC5DaGlsZHJlbi5tYXAoY2hpbGRyZW4sIGZ1bmN0aW9uIChjdXJyZW50Q2hpbGQpIHtcbiAgICBpZiAoIV9yZWFjdC5kZWZhdWx0LmlzVmFsaWRFbGVtZW50KGN1cnJlbnRDaGlsZCkpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHZhciBjaGlsZENvbHMgPSBjdXJyZW50Q2hpbGQucHJvcHMuY29scyB8fCAxO1xuICAgIHZhciBjaGlsZFJvd3MgPSBjdXJyZW50Q2hpbGQucHJvcHMucm93cyB8fCAxO1xuICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jbG9uZUVsZW1lbnQoY3VycmVudENoaWxkLCB7XG4gICAgICBzdHlsZTogKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7XG4gICAgICAgIHdpZHRoOiBcIlwiLmNvbmNhdCgxMDAgLyBjb2xzICogY2hpbGRDb2xzLCBcIiVcIiksXG4gICAgICAgIGhlaWdodDogY2VsbEhlaWdodCA9PT0gJ2F1dG8nID8gJ2F1dG8nIDogY2VsbEhlaWdodCAqIGNoaWxkUm93cyArIHNwYWNpbmcsXG4gICAgICAgIHBhZGRpbmc6IHNwYWNpbmcgLyAyXG4gICAgICB9LCBjdXJyZW50Q2hpbGQucHJvcHMuc3R5bGUpXG4gICAgfSk7XG4gIH0pKTtcbn1cblxuR3JpZExpc3QucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKipcbiAgICogTnVtYmVyIG9mIHB4IGZvciBvbmUgY2VsbCBoZWlnaHQuXG4gICAqIFlvdSBjYW4gc2V0IGAnYXV0bydgIGlmIHlvdSB3YW50IHRvIGxldCB0aGUgY2hpbGRyZW4gZGV0ZXJtaW5lIHRoZSBoZWlnaHQuXG4gICAqL1xuICBjZWxsSGVpZ2h0OiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzLmRlZmF1bHQubnVtYmVyLCBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2YoWydhdXRvJ10pXSksXG5cbiAgLyoqXG4gICAqIEdyaWQgVGlsZXMgdGhhdCB3aWxsIGJlIGluIEdyaWQgTGlzdC5cbiAgICovXG4gIGNoaWxkcmVuOiBfcHJvcFR5cGVzLmRlZmF1bHQubm9kZS5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2Nzcy1hcGkpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxcblxuICAvKipcbiAgICogTnVtYmVyIG9mIGNvbHVtbnMuXG4gICAqL1xuICBjb2xzOiBfcHJvcFR5cGVzLmRlZmF1bHQubnVtYmVyLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBET00gZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZywgX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmNdKSxcblxuICAvKipcbiAgICogTnVtYmVyIG9mIHB4IGZvciB0aGUgc3BhY2luZyBiZXR3ZWVuIHRpbGVzLlxuICAgKi9cbiAgc3BhY2luZzogX3Byb3BUeXBlcy5kZWZhdWx0Lm51bWJlcixcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgc3R5bGU6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3Rcbn0gOiB7fTtcbkdyaWRMaXN0LmRlZmF1bHRQcm9wcyA9IHtcbiAgY2VsbEhlaWdodDogMTgwLFxuICBjb2xzOiAyLFxuICBjb21wb25lbnQ6ICd1bCcsXG4gIHNwYWNpbmc6IDRcbn07XG5cbnZhciBfZGVmYXVsdCA9ICgwLCBfd2l0aFN0eWxlcy5kZWZhdWx0KShzdHlsZXMsIHtcbiAgbmFtZTogJ011aUdyaWRMaXN0J1xufSkoR3JpZExpc3QpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxuLy8gIHdlYWtcbnZhciByZXF1aXJlUHJvcEZhY3RvcnkgPSBmdW5jdGlvbiByZXF1aXJlUHJvcEZhY3RvcnkoY29tcG9uZW50TmFtZUluRXJyb3IpIHtcbiAgdmFyIHJlcXVpcmVQcm9wID0gZnVuY3Rpb24gcmVxdWlyZVByb3AocmVxdWlyZWRQcm9wKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUpIHtcbiAgICAgIHZhciBwcm9wRnVsbE5hbWVTYWZlID0gcHJvcEZ1bGxOYW1lIHx8IHByb3BOYW1lO1xuXG4gICAgICBpZiAodHlwZW9mIHByb3BzW3Byb3BOYW1lXSAhPT0gJ3VuZGVmaW5lZCcgJiYgIXByb3BzW3JlcXVpcmVkUHJvcF0pIHtcbiAgICAgICAgcmV0dXJuIG5ldyBFcnJvcihcIlRoZSBwcm9wZXJ0eSBgXCIuY29uY2F0KHByb3BGdWxsTmFtZVNhZmUsIFwiYCBvZiBcIikgKyBcImBcIi5jb25jYXQoY29tcG9uZW50TmFtZUluRXJyb3IsIFwiYCBtdXN0IGJlIHVzZWQgb24gYFwiKS5jb25jYXQocmVxdWlyZWRQcm9wLCBcImAuXCIpKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfTtcbiAgfTtcblxuICByZXR1cm4gcmVxdWlyZVByb3A7XG59O1xuXG52YXIgX2RlZmF1bHQgPSByZXF1aXJlUHJvcEZhY3Rvcnk7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuc3R5bGVzID0gdm9pZCAwO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiKSk7XG5cbnZhciBfb2JqZWN0U3ByZWFkMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9vYmplY3RTcHJlYWRcIikpO1xuXG52YXIgX2V4dGVuZHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2V4dGVuZHNcIikpO1xuXG52YXIgX2RlZmluZVByb3BlcnR5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9kZWZpbmVQcm9wZXJ0eVwiKSk7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbnZhciBfY2xhc3NuYW1lcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImNsYXNzbmFtZXNcIikpO1xuXG52YXIgX3dpdGhTdHlsZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9zdHlsZXMvd2l0aFN0eWxlc1wiKSk7XG5cbnZhciBfY3JlYXRlQnJlYWtwb2ludHMgPSByZXF1aXJlKFwiLi4vc3R5bGVzL2NyZWF0ZUJyZWFrcG9pbnRzXCIpO1xuXG52YXIgX3JlcXVpcmVQcm9wRmFjdG9yeSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3V0aWxzL3JlcXVpcmVQcm9wRmFjdG9yeVwiKSk7XG5cbi8vIEEgZ3JpZCBjb21wb25lbnQgdXNpbmcgdGhlIGZvbGxvd2luZyBsaWJzIGFzIGluc3BpcmF0aW9uLlxuLy9cbi8vIEZvciB0aGUgaW1wbGVtZW50YXRpb246XG4vLyAtIGh0dHA6Ly92NC1hbHBoYS5nZXRib290c3RyYXAuY29tL2xheW91dC9mbGV4Ym94LWdyaWQvXG4vLyAtIGh0dHBzOi8vZ2l0aHViLmNvbS9rcmlzdG9mZXJqb3NlcGgvZmxleGJveGdyaWQvYmxvYi9tYXN0ZXIvc3JjL2Nzcy9mbGV4Ym94Z3JpZC5jc3Ncbi8vIC0gaHR0cHM6Ly9naXRodWIuY29tL3JveWxlZTA3MDQvcmVhY3QtZmxleGJveC1ncmlkXG4vLyAtIGh0dHBzOi8vbWF0ZXJpYWwuYW5ndWxhcmpzLm9yZy9sYXRlc3QvbGF5b3V0L2ludHJvZHVjdGlvblxuLy9cbi8vIEZvbGxvdyB0aGlzIGZsZXhib3ggR3VpZGUgdG8gYmV0dGVyIHVuZGVyc3RhbmQgdGhlIHVuZGVybHlpbmcgbW9kZWw6XG4vLyAtIGh0dHBzOi8vY3NzLXRyaWNrcy5jb20vc25pcHBldHMvY3NzL2EtZ3VpZGUtdG8tZmxleGJveC9cbnZhciBHVVRURVJTID0gWzAsIDgsIDE2LCAyNCwgMzIsIDQwXTtcbnZhciBHUklEX1NJWkVTID0gW3RydWUsIDEsIDIsIDMsIDQsIDUsIDYsIDcsIDgsIDksIDEwLCAxMSwgMTJdO1xuXG5mdW5jdGlvbiBnZW5lcmF0ZUdyaWQoZ2xvYmFsU3R5bGVzLCB0aGVtZSwgYnJlYWtwb2ludCkge1xuICAvLyBGb3IgdGhlIGF1dG8gbGF5b3V0aW5nXG4gIHZhciBzdHlsZXMgPSAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KSh7fSwgXCJncmlkLVwiLmNvbmNhdChicmVha3BvaW50KSwge1xuICAgIGZsZXhCYXNpczogMCxcbiAgICBmbGV4R3JvdzogMSxcbiAgICBtYXhXaWR0aDogJzEwMCUnXG4gIH0pO1xuICBHUklEX1NJWkVTLmZvckVhY2goZnVuY3Rpb24gKHNpemUpIHtcbiAgICBpZiAodHlwZW9mIHNpemUgPT09ICdib29sZWFuJykge1xuICAgICAgLy8gU2tpcCB0aGUgZmlyc3Qgb25lIGFzIGhhbmRsZSBhYm92ZS5cbiAgICAgIHJldHVybjtcbiAgICB9IC8vIE9ubHkga2VlcCA2IHNpZ25pZmljYW50IG51bWJlcnMuXG5cblxuICAgIHZhciB3aWR0aCA9IFwiXCIuY29uY2F0KE1hdGgucm91bmQoc2l6ZSAvIDEyICogMTBlNikgLyAxMGU0LCBcIiVcIik7XG4gICAgLyogZXNsaW50LWRpc2FibGUgbWF4LWxlbiAqL1xuICAgIC8vIENsb3NlIHRvIHRoZSBib290c3RyYXAgaW1wbGVtZW50YXRpb246XG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvOGZjY2FhMjQzOWU5N2VjNzJhNGI3ZGM0MmNjYzFmNjQ5NzkwYWRiMC9zY3NzL21peGlucy9fZ3JpZC5zY3NzI0w0MVxuXG4gICAgLyogZXNsaW50LWVuYWJsZSBtYXgtbGVuICovXG5cbiAgICBzdHlsZXNbXCJncmlkLVwiLmNvbmNhdChicmVha3BvaW50LCBcIi1cIikuY29uY2F0KHNpemUpXSA9IHtcbiAgICAgIGZsZXhCYXNpczogd2lkdGgsXG4gICAgICBtYXhXaWR0aDogd2lkdGhcbiAgICB9O1xuICB9KTsgLy8gTm8gbmVlZCBmb3IgYSBtZWRpYSBxdWVyeSBmb3IgdGhlIGZpcnN0IHNpemUuXG5cbiAgaWYgKGJyZWFrcG9pbnQgPT09ICd4cycpIHtcbiAgICAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKGdsb2JhbFN0eWxlcywgc3R5bGVzKTtcbiAgfSBlbHNlIHtcbiAgICBnbG9iYWxTdHlsZXNbdGhlbWUuYnJlYWtwb2ludHMudXAoYnJlYWtwb2ludCldID0gc3R5bGVzO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdlbmVyYXRlR3V0dGVyKHRoZW1lLCBicmVha3BvaW50KSB7XG4gIHZhciBzdHlsZXMgPSB7fTtcbiAgR1VUVEVSUy5mb3JFYWNoKGZ1bmN0aW9uIChzcGFjaW5nLCBpbmRleCkge1xuICAgIGlmIChpbmRleCA9PT0gMCkge1xuICAgICAgLy8gU2tpcCB0aGUgZGVmYXVsdCBzdHlsZS5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBzdHlsZXNbXCJzcGFjaW5nLVwiLmNvbmNhdChicmVha3BvaW50LCBcIi1cIikuY29uY2F0KHNwYWNpbmcpXSA9IHtcbiAgICAgIG1hcmdpbjogLXNwYWNpbmcgLyAyLFxuICAgICAgd2lkdGg6IFwiY2FsYygxMDAlICsgXCIuY29uY2F0KHNwYWNpbmcsIFwicHgpXCIpLFxuICAgICAgJyYgPiAkaXRlbSc6IHtcbiAgICAgICAgcGFkZGluZzogc3BhY2luZyAvIDJcbiAgICAgIH1cbiAgICB9O1xuICB9KTtcbiAgcmV0dXJuIHN0eWxlcztcbn0gLy8gRGVmYXVsdCBDU1MgdmFsdWVzXG4vLyBmbGV4OiAnMCAxIGF1dG8nLFxuLy8gZmxleERpcmVjdGlvbjogJ3JvdycsXG4vLyBhbGlnbkl0ZW1zOiAnZmxleC1zdGFydCcsXG4vLyBmbGV4V3JhcDogJ25vd3JhcCcsXG4vLyBqdXN0aWZ5Q29udGVudDogJ2ZsZXgtc3RhcnQnLFxuXG5cbnZhciBzdHlsZXMgPSBmdW5jdGlvbiBzdHlsZXModGhlbWUpIHtcbiAgcmV0dXJuICgwLCBfb2JqZWN0U3ByZWFkMi5kZWZhdWx0KSh7XG4gICAgY29udGFpbmVyOiB7XG4gICAgICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgIGZsZXhXcmFwOiAnd3JhcCcsXG4gICAgICB3aWR0aDogJzEwMCUnXG4gICAgfSxcbiAgICBpdGVtOiB7XG4gICAgICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgICAgIG1hcmdpbjogJzAnIC8vIEZvciBpbnN0YW5jZSwgaXQncyB1c2VmdWwgd2hlbiB1c2VkIHdpdGggYSBgZmlndXJlYCBlbGVtZW50LlxuXG4gICAgfSxcbiAgICB6ZXJvTWluV2lkdGg6IHtcbiAgICAgIG1pbldpZHRoOiAwXG4gICAgfSxcbiAgICAnZGlyZWN0aW9uLXhzLWNvbHVtbic6IHtcbiAgICAgIGZsZXhEaXJlY3Rpb246ICdjb2x1bW4nXG4gICAgfSxcbiAgICAnZGlyZWN0aW9uLXhzLWNvbHVtbi1yZXZlcnNlJzoge1xuICAgICAgZmxleERpcmVjdGlvbjogJ2NvbHVtbi1yZXZlcnNlJ1xuICAgIH0sXG4gICAgJ2RpcmVjdGlvbi14cy1yb3ctcmV2ZXJzZSc6IHtcbiAgICAgIGZsZXhEaXJlY3Rpb246ICdyb3ctcmV2ZXJzZSdcbiAgICB9LFxuICAgICd3cmFwLXhzLW5vd3JhcCc6IHtcbiAgICAgIGZsZXhXcmFwOiAnbm93cmFwJ1xuICAgIH0sXG4gICAgJ3dyYXAteHMtd3JhcC1yZXZlcnNlJzoge1xuICAgICAgZmxleFdyYXA6ICd3cmFwLXJldmVyc2UnXG4gICAgfSxcbiAgICAnYWxpZ24taXRlbXMteHMtY2VudGVyJzoge1xuICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcidcbiAgICB9LFxuICAgICdhbGlnbi1pdGVtcy14cy1mbGV4LXN0YXJ0Jzoge1xuICAgICAgYWxpZ25JdGVtczogJ2ZsZXgtc3RhcnQnXG4gICAgfSxcbiAgICAnYWxpZ24taXRlbXMteHMtZmxleC1lbmQnOiB7XG4gICAgICBhbGlnbkl0ZW1zOiAnZmxleC1lbmQnXG4gICAgfSxcbiAgICAnYWxpZ24taXRlbXMteHMtYmFzZWxpbmUnOiB7XG4gICAgICBhbGlnbkl0ZW1zOiAnYmFzZWxpbmUnXG4gICAgfSxcbiAgICAnYWxpZ24tY29udGVudC14cy1jZW50ZXInOiB7XG4gICAgICBhbGlnbkNvbnRlbnQ6ICdjZW50ZXInXG4gICAgfSxcbiAgICAnYWxpZ24tY29udGVudC14cy1mbGV4LXN0YXJ0Jzoge1xuICAgICAgYWxpZ25Db250ZW50OiAnZmxleC1zdGFydCdcbiAgICB9LFxuICAgICdhbGlnbi1jb250ZW50LXhzLWZsZXgtZW5kJzoge1xuICAgICAgYWxpZ25Db250ZW50OiAnZmxleC1lbmQnXG4gICAgfSxcbiAgICAnYWxpZ24tY29udGVudC14cy1zcGFjZS1iZXR3ZWVuJzoge1xuICAgICAgYWxpZ25Db250ZW50OiAnc3BhY2UtYmV0d2VlbidcbiAgICB9LFxuICAgICdhbGlnbi1jb250ZW50LXhzLXNwYWNlLWFyb3VuZCc6IHtcbiAgICAgIGFsaWduQ29udGVudDogJ3NwYWNlLWFyb3VuZCdcbiAgICB9LFxuICAgICdqdXN0aWZ5LXhzLWNlbnRlcic6IHtcbiAgICAgIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJ1xuICAgIH0sXG4gICAgJ2p1c3RpZnkteHMtZmxleC1lbmQnOiB7XG4gICAgICBqdXN0aWZ5Q29udGVudDogJ2ZsZXgtZW5kJ1xuICAgIH0sXG4gICAgJ2p1c3RpZnkteHMtc3BhY2UtYmV0d2Vlbic6IHtcbiAgICAgIGp1c3RpZnlDb250ZW50OiAnc3BhY2UtYmV0d2VlbidcbiAgICB9LFxuICAgICdqdXN0aWZ5LXhzLXNwYWNlLWFyb3VuZCc6IHtcbiAgICAgIGp1c3RpZnlDb250ZW50OiAnc3BhY2UtYXJvdW5kJ1xuICAgIH1cbiAgfSwgZ2VuZXJhdGVHdXR0ZXIodGhlbWUsICd4cycpLCBfY3JlYXRlQnJlYWtwb2ludHMua2V5cy5yZWR1Y2UoZnVuY3Rpb24gKGFjY3VtdWxhdG9yLCBrZXkpIHtcbiAgICAvLyBVc2Ugc2lkZSBlZmZlY3Qgb3ZlciBpbW11dGFiaWxpdHkgZm9yIGJldHRlciBwZXJmb3JtYW5jZS5cbiAgICBnZW5lcmF0ZUdyaWQoYWNjdW11bGF0b3IsIHRoZW1lLCBrZXkpO1xuICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgfSwge30pKTtcbn07XG5cbmV4cG9ydHMuc3R5bGVzID0gc3R5bGVzO1xuXG5mdW5jdGlvbiBHcmlkKHByb3BzKSB7XG4gIHZhciBfY2xhc3NOYW1lcztcblxuICB2YXIgYWxpZ25Db250ZW50ID0gcHJvcHMuYWxpZ25Db250ZW50LFxuICAgICAgYWxpZ25JdGVtcyA9IHByb3BzLmFsaWduSXRlbXMsXG4gICAgICBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZVByb3AgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBDb21wb25lbnQgPSBwcm9wcy5jb21wb25lbnQsXG4gICAgICBjb250YWluZXIgPSBwcm9wcy5jb250YWluZXIsXG4gICAgICBkaXJlY3Rpb24gPSBwcm9wcy5kaXJlY3Rpb24sXG4gICAgICBpdGVtID0gcHJvcHMuaXRlbSxcbiAgICAgIGp1c3RpZnkgPSBwcm9wcy5qdXN0aWZ5LFxuICAgICAgbGcgPSBwcm9wcy5sZyxcbiAgICAgIG1kID0gcHJvcHMubWQsXG4gICAgICBzbSA9IHByb3BzLnNtLFxuICAgICAgc3BhY2luZyA9IHByb3BzLnNwYWNpbmcsXG4gICAgICB3cmFwID0gcHJvcHMud3JhcCxcbiAgICAgIHhsID0gcHJvcHMueGwsXG4gICAgICB4cyA9IHByb3BzLnhzLFxuICAgICAgemVyb01pbldpZHRoID0gcHJvcHMuemVyb01pbldpZHRoLFxuICAgICAgb3RoZXIgPSAoMCwgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMi5kZWZhdWx0KShwcm9wcywgW1wiYWxpZ25Db250ZW50XCIsIFwiYWxpZ25JdGVtc1wiLCBcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJjb21wb25lbnRcIiwgXCJjb250YWluZXJcIiwgXCJkaXJlY3Rpb25cIiwgXCJpdGVtXCIsIFwianVzdGlmeVwiLCBcImxnXCIsIFwibWRcIiwgXCJzbVwiLCBcInNwYWNpbmdcIiwgXCJ3cmFwXCIsIFwieGxcIiwgXCJ4c1wiLCBcInplcm9NaW5XaWR0aFwiXSk7XG4gIHZhciBjbGFzc05hbWUgPSAoMCwgX2NsYXNzbmFtZXMuZGVmYXVsdCkoKF9jbGFzc05hbWVzID0ge30sICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKF9jbGFzc05hbWVzLCBjbGFzc2VzLmNvbnRhaW5lciwgY29udGFpbmVyKSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2NsYXNzTmFtZXMsIGNsYXNzZXMuaXRlbSwgaXRlbSksICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKF9jbGFzc05hbWVzLCBjbGFzc2VzLnplcm9NaW5XaWR0aCwgemVyb01pbldpZHRoKSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2NsYXNzTmFtZXMsIGNsYXNzZXNbXCJzcGFjaW5nLXhzLVwiLmNvbmNhdChTdHJpbmcoc3BhY2luZykpXSwgY29udGFpbmVyICYmIHNwYWNpbmcgIT09IDApLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lcywgY2xhc3Nlc1tcImRpcmVjdGlvbi14cy1cIi5jb25jYXQoU3RyaW5nKGRpcmVjdGlvbikpXSwgZGlyZWN0aW9uICE9PSBHcmlkLmRlZmF1bHRQcm9wcy5kaXJlY3Rpb24pLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lcywgY2xhc3Nlc1tcIndyYXAteHMtXCIuY29uY2F0KFN0cmluZyh3cmFwKSldLCB3cmFwICE9PSBHcmlkLmRlZmF1bHRQcm9wcy53cmFwKSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2NsYXNzTmFtZXMsIGNsYXNzZXNbXCJhbGlnbi1pdGVtcy14cy1cIi5jb25jYXQoU3RyaW5nKGFsaWduSXRlbXMpKV0sIGFsaWduSXRlbXMgIT09IEdyaWQuZGVmYXVsdFByb3BzLmFsaWduSXRlbXMpLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lcywgY2xhc3Nlc1tcImFsaWduLWNvbnRlbnQteHMtXCIuY29uY2F0KFN0cmluZyhhbGlnbkNvbnRlbnQpKV0sIGFsaWduQ29udGVudCAhPT0gR3JpZC5kZWZhdWx0UHJvcHMuYWxpZ25Db250ZW50KSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2NsYXNzTmFtZXMsIGNsYXNzZXNbXCJqdXN0aWZ5LXhzLVwiLmNvbmNhdChTdHJpbmcoanVzdGlmeSkpXSwganVzdGlmeSAhPT0gR3JpZC5kZWZhdWx0UHJvcHMuanVzdGlmeSksICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKF9jbGFzc05hbWVzLCBjbGFzc2VzWydncmlkLXhzJ10sIHhzID09PSB0cnVlKSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2NsYXNzTmFtZXMsIGNsYXNzZXNbXCJncmlkLXhzLVwiLmNvbmNhdChTdHJpbmcoeHMpKV0sIHhzICYmIHhzICE9PSB0cnVlKSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2NsYXNzTmFtZXMsIGNsYXNzZXNbJ2dyaWQtc20nXSwgc20gPT09IHRydWUpLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lcywgY2xhc3Nlc1tcImdyaWQtc20tXCIuY29uY2F0KFN0cmluZyhzbSkpXSwgc20gJiYgc20gIT09IHRydWUpLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lcywgY2xhc3Nlc1snZ3JpZC1tZCddLCBtZCA9PT0gdHJ1ZSksICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKF9jbGFzc05hbWVzLCBjbGFzc2VzW1wiZ3JpZC1tZC1cIi5jb25jYXQoU3RyaW5nKG1kKSldLCBtZCAmJiBtZCAhPT0gdHJ1ZSksICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKF9jbGFzc05hbWVzLCBjbGFzc2VzWydncmlkLWxnJ10sIGxnID09PSB0cnVlKSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2NsYXNzTmFtZXMsIGNsYXNzZXNbXCJncmlkLWxnLVwiLmNvbmNhdChTdHJpbmcobGcpKV0sIGxnICYmIGxnICE9PSB0cnVlKSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2NsYXNzTmFtZXMsIGNsYXNzZXNbJ2dyaWQteGwnXSwgeGwgPT09IHRydWUpLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lcywgY2xhc3Nlc1tcImdyaWQteGwtXCIuY29uY2F0KFN0cmluZyh4bCkpXSwgeGwgJiYgeGwgIT09IHRydWUpLCBfY2xhc3NOYW1lcyksIGNsYXNzTmFtZVByb3ApO1xuICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChDb21wb25lbnQsICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe1xuICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lXG4gIH0sIG90aGVyKSk7XG59XG5cbkdyaWQucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKipcbiAgICogRGVmaW5lcyB0aGUgYGFsaWduLWNvbnRlbnRgIHN0eWxlIHByb3BlcnR5LlxuICAgKiBJdCdzIGFwcGxpZWQgZm9yIGFsbCBzY3JlZW4gc2l6ZXMuXG4gICAqL1xuICBhbGlnbkNvbnRlbnQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZihbJ3N0cmV0Y2gnLCAnY2VudGVyJywgJ2ZsZXgtc3RhcnQnLCAnZmxleC1lbmQnLCAnc3BhY2UtYmV0d2VlbicsICdzcGFjZS1hcm91bmQnXSksXG5cbiAgLyoqXG4gICAqIERlZmluZXMgdGhlIGBhbGlnbi1pdGVtc2Agc3R5bGUgcHJvcGVydHkuXG4gICAqIEl0J3MgYXBwbGllZCBmb3IgYWxsIHNjcmVlbiBzaXplcy5cbiAgICovXG4gIGFsaWduSXRlbXM6IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZihbJ2ZsZXgtc3RhcnQnLCAnY2VudGVyJywgJ2ZsZXgtZW5kJywgJ3N0cmV0Y2gnLCAnYmFzZWxpbmUnXSksXG5cbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogX3Byb3BUeXBlcy5kZWZhdWx0Lm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzLWFwaSkgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBET00gZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZywgX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmNdKSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgY29tcG9uZW50IHdpbGwgaGF2ZSB0aGUgZmxleCAqY29udGFpbmVyKiBiZWhhdmlvci5cbiAgICogWW91IHNob3VsZCBiZSB3cmFwcGluZyAqaXRlbXMqIHdpdGggYSAqY29udGFpbmVyKi5cbiAgICovXG4gIGNvbnRhaW5lcjogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIERlZmluZXMgdGhlIGBmbGV4LWRpcmVjdGlvbmAgc3R5bGUgcHJvcGVydHkuXG4gICAqIEl0IGlzIGFwcGxpZWQgZm9yIGFsbCBzY3JlZW4gc2l6ZXMuXG4gICAqL1xuICBkaXJlY3Rpb246IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZihbJ3JvdycsICdyb3ctcmV2ZXJzZScsICdjb2x1bW4nLCAnY29sdW1uLXJldmVyc2UnXSksXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGNvbXBvbmVudCB3aWxsIGhhdmUgdGhlIGZsZXggKml0ZW0qIGJlaGF2aW9yLlxuICAgKiBZb3Ugc2hvdWxkIGJlIHdyYXBwaW5nICppdGVtcyogd2l0aCBhICpjb250YWluZXIqLlxuICAgKi9cbiAgaXRlbTogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIERlZmluZXMgdGhlIGBqdXN0aWZ5LWNvbnRlbnRgIHN0eWxlIHByb3BlcnR5LlxuICAgKiBJdCBpcyBhcHBsaWVkIGZvciBhbGwgc2NyZWVuIHNpemVzLlxuICAgKi9cbiAganVzdGlmeTogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mKFsnZmxleC1zdGFydCcsICdjZW50ZXInLCAnZmxleC1lbmQnLCAnc3BhY2UtYmV0d2VlbicsICdzcGFjZS1hcm91bmQnXSksXG5cbiAgLyoqXG4gICAqIERlZmluZXMgdGhlIG51bWJlciBvZiBncmlkcyB0aGUgY29tcG9uZW50IGlzIGdvaW5nIHRvIHVzZS5cbiAgICogSXQncyBhcHBsaWVkIGZvciB0aGUgYGxnYCBicmVha3BvaW50IGFuZCB3aWRlciBzY3JlZW5zIGlmIG5vdCBvdmVycmlkZGVuLlxuICAgKi9cbiAgbGc6IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZihbZmFsc2UsIHRydWUsIDEsIDIsIDMsIDQsIDUsIDYsIDcsIDgsIDksIDEwLCAxMSwgMTJdKSxcblxuICAvKipcbiAgICogRGVmaW5lcyB0aGUgbnVtYmVyIG9mIGdyaWRzIHRoZSBjb21wb25lbnQgaXMgZ29pbmcgdG8gdXNlLlxuICAgKiBJdCdzIGFwcGxpZWQgZm9yIHRoZSBgbWRgIGJyZWFrcG9pbnQgYW5kIHdpZGVyIHNjcmVlbnMgaWYgbm90IG92ZXJyaWRkZW4uXG4gICAqL1xuICBtZDogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mKFtmYWxzZSwgdHJ1ZSwgMSwgMiwgMywgNCwgNSwgNiwgNywgOCwgOSwgMTAsIDExLCAxMl0pLFxuXG4gIC8qKlxuICAgKiBEZWZpbmVzIHRoZSBudW1iZXIgb2YgZ3JpZHMgdGhlIGNvbXBvbmVudCBpcyBnb2luZyB0byB1c2UuXG4gICAqIEl0J3MgYXBwbGllZCBmb3IgdGhlIGBzbWAgYnJlYWtwb2ludCBhbmQgd2lkZXIgc2NyZWVucyBpZiBub3Qgb3ZlcnJpZGRlbi5cbiAgICovXG4gIHNtOiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2YoW2ZhbHNlLCB0cnVlLCAxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5LCAxMCwgMTEsIDEyXSksXG5cbiAgLyoqXG4gICAqIERlZmluZXMgdGhlIHNwYWNlIGJldHdlZW4gdGhlIHR5cGUgYGl0ZW1gIGNvbXBvbmVudC5cbiAgICogSXQgY2FuIG9ubHkgYmUgdXNlZCBvbiBhIHR5cGUgYGNvbnRhaW5lcmAgY29tcG9uZW50LlxuICAgKi9cbiAgc3BhY2luZzogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mKEdVVFRFUlMpLFxuXG4gIC8qKlxuICAgKiBEZWZpbmVzIHRoZSBgZmxleC13cmFwYCBzdHlsZSBwcm9wZXJ0eS5cbiAgICogSXQncyBhcHBsaWVkIGZvciBhbGwgc2NyZWVuIHNpemVzLlxuICAgKi9cbiAgd3JhcDogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mKFsnbm93cmFwJywgJ3dyYXAnLCAnd3JhcC1yZXZlcnNlJ10pLFxuXG4gIC8qKlxuICAgKiBEZWZpbmVzIHRoZSBudW1iZXIgb2YgZ3JpZHMgdGhlIGNvbXBvbmVudCBpcyBnb2luZyB0byB1c2UuXG4gICAqIEl0J3MgYXBwbGllZCBmb3IgdGhlIGB4bGAgYnJlYWtwb2ludCBhbmQgd2lkZXIgc2NyZWVucy5cbiAgICovXG4gIHhsOiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2YoW2ZhbHNlLCB0cnVlLCAxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5LCAxMCwgMTEsIDEyXSksXG5cbiAgLyoqXG4gICAqIERlZmluZXMgdGhlIG51bWJlciBvZiBncmlkcyB0aGUgY29tcG9uZW50IGlzIGdvaW5nIHRvIHVzZS5cbiAgICogSXQncyBhcHBsaWVkIGZvciBhbGwgdGhlIHNjcmVlbiBzaXplcyB3aXRoIHRoZSBsb3dlc3QgcHJpb3JpdHkuXG4gICAqL1xuICB4czogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mKFtmYWxzZSwgdHJ1ZSwgMSwgMiwgMywgNCwgNSwgNiwgNywgOCwgOSwgMTAsIDExLCAxMl0pLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIGl0IHNldHMgYG1pbi13aWR0aDogMGAgb24gdGhlIGl0ZW0uXG4gICAqIFJlZmVyIHRvIHRoZSBsaW1pdGF0aW9ucyBzZWN0aW9uIG9mIHRoZSBkb2N1bWVudGF0aW9uIHRvIGJldHRlciB1bmRlcnN0YW5kIHRoZSB1c2UgY2FzZS5cbiAgICovXG4gIHplcm9NaW5XaWR0aDogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2xcbn0gOiB7fTtcbkdyaWQuZGVmYXVsdFByb3BzID0ge1xuICBhbGlnbkNvbnRlbnQ6ICdzdHJldGNoJyxcbiAgYWxpZ25JdGVtczogJ3N0cmV0Y2gnLFxuICBjb21wb25lbnQ6ICdkaXYnLFxuICBjb250YWluZXI6IGZhbHNlLFxuICBkaXJlY3Rpb246ICdyb3cnLFxuICBpdGVtOiBmYWxzZSxcbiAganVzdGlmeTogJ2ZsZXgtc3RhcnQnLFxuICBsZzogZmFsc2UsXG4gIG1kOiBmYWxzZSxcbiAgc206IGZhbHNlLFxuICBzcGFjaW5nOiAwLFxuICB3cmFwOiAnd3JhcCcsXG4gIHhsOiBmYWxzZSxcbiAgeHM6IGZhbHNlLFxuICB6ZXJvTWluV2lkdGg6IGZhbHNlXG59O1xudmFyIFN0eWxlZEdyaWQgPSAoMCwgX3dpdGhTdHlsZXMuZGVmYXVsdCkoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlHcmlkJ1xufSkoR3JpZCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciByZXF1aXJlUHJvcCA9ICgwLCBfcmVxdWlyZVByb3BGYWN0b3J5LmRlZmF1bHQpKCdHcmlkJyk7XG4gIFN0eWxlZEdyaWQucHJvcFR5cGVzID0gKDAsIF9vYmplY3RTcHJlYWQyLmRlZmF1bHQpKHt9LCBTdHlsZWRHcmlkLnByb3BUeXBlcywge1xuICAgIGFsaWduQ29udGVudDogcmVxdWlyZVByb3AoJ2NvbnRhaW5lcicpLFxuICAgIGFsaWduSXRlbXM6IHJlcXVpcmVQcm9wKCdjb250YWluZXInKSxcbiAgICBkaXJlY3Rpb246IHJlcXVpcmVQcm9wKCdjb250YWluZXInKSxcbiAgICBqdXN0aWZ5OiByZXF1aXJlUHJvcCgnY29udGFpbmVyJyksXG4gICAgbGc6IHJlcXVpcmVQcm9wKCdpdGVtJyksXG4gICAgbWQ6IHJlcXVpcmVQcm9wKCdpdGVtJyksXG4gICAgc206IHJlcXVpcmVQcm9wKCdpdGVtJyksXG4gICAgc3BhY2luZzogcmVxdWlyZVByb3AoJ2NvbnRhaW5lcicpLFxuICAgIHdyYXA6IHJlcXVpcmVQcm9wKCdjb250YWluZXInKSxcbiAgICB4czogcmVxdWlyZVByb3AoJ2l0ZW0nKSxcbiAgICB6ZXJvTWluV2lkdGg6IHJlcXVpcmVQcm9wKCd6ZXJvTWluV2lkdGgnKVxuICB9KTtcbn1cblxudmFyIF9kZWZhdWx0ID0gU3R5bGVkR3JpZDtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5zdHlsZXMgPSB2b2lkIDA7XG5cbnZhciBfZXh0ZW5kczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vZXh0ZW5kc1wiKSk7XG5cbnZhciBfZGVmaW5lUHJvcGVydHkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2RlZmluZVByb3BlcnR5XCIpKTtcblxudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIikpO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xuXG52YXIgX2NsYXNzbmFtZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJjbGFzc25hbWVzXCIpKTtcblxudmFyIF93aXRoU3R5bGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vc3R5bGVzL3dpdGhTdHlsZXNcIikpO1xuXG52YXIgc3R5bGVzID0gZnVuY3Rpb24gc3R5bGVzKHRoZW1lKSB7XG4gIHJldHVybiB7XG4gICAgcm9vdDoge1xuICAgICAgZm9udEZhbWlseTogdGhlbWUudHlwb2dyYXBoeS5mb250RmFtaWx5LFxuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUudGV4dC5zZWNvbmRhcnksXG4gICAgICBmb250U2l6ZTogdGhlbWUudHlwb2dyYXBoeS5weFRvUmVtKDE2KSxcbiAgICAgIGxpbmVIZWlnaHQ6IDEsXG4gICAgICBwYWRkaW5nOiAwLFxuICAgICAgJyYkZm9jdXNlZCc6IHtcbiAgICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUucHJpbWFyeVt0aGVtZS5wYWxldHRlLnR5cGUgPT09ICdsaWdodCcgPyAnZGFyaycgOiAnbGlnaHQnXVxuICAgICAgfSxcbiAgICAgICcmJGRpc2FibGVkJzoge1xuICAgICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS50ZXh0LmRpc2FibGVkXG4gICAgICB9LFxuICAgICAgJyYkZXJyb3InOiB7XG4gICAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLmVycm9yLm1haW5cbiAgICAgIH1cbiAgICB9LFxuICAgIGZvY3VzZWQ6IHt9LFxuICAgIGRpc2FibGVkOiB7fSxcbiAgICBlcnJvcjoge30sXG4gICAgYXN0ZXJpc2s6IHtcbiAgICAgICcmJGVycm9yJzoge1xuICAgICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5lcnJvci5tYWluXG4gICAgICB9XG4gICAgfVxuICB9O1xufTtcblxuZXhwb3J0cy5zdHlsZXMgPSBzdHlsZXM7XG5cbmZ1bmN0aW9uIEZvcm1MYWJlbChwcm9wcywgY29udGV4dCkge1xuICB2YXIgX2NsYXNzTmFtZXM7XG5cbiAgdmFyIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZVByb3AgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBDb21wb25lbnQgPSBwcm9wcy5jb21wb25lbnQsXG4gICAgICBkaXNhYmxlZFByb3AgPSBwcm9wcy5kaXNhYmxlZCxcbiAgICAgIGVycm9yUHJvcCA9IHByb3BzLmVycm9yLFxuICAgICAgZm9jdXNlZFByb3AgPSBwcm9wcy5mb2N1c2VkLFxuICAgICAgcmVxdWlyZWRQcm9wID0gcHJvcHMucmVxdWlyZWQsXG4gICAgICBvdGhlciA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyLmRlZmF1bHQpKHByb3BzLCBbXCJjaGlsZHJlblwiLCBcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJjb21wb25lbnRcIiwgXCJkaXNhYmxlZFwiLCBcImVycm9yXCIsIFwiZm9jdXNlZFwiLCBcInJlcXVpcmVkXCJdKTtcbiAgdmFyIG11aUZvcm1Db250cm9sID0gY29udGV4dC5tdWlGb3JtQ29udHJvbDtcbiAgdmFyIHJlcXVpcmVkID0gcmVxdWlyZWRQcm9wO1xuICB2YXIgZm9jdXNlZCA9IGZvY3VzZWRQcm9wO1xuICB2YXIgZGlzYWJsZWQgPSBkaXNhYmxlZFByb3A7XG4gIHZhciBlcnJvciA9IGVycm9yUHJvcDtcblxuICBpZiAobXVpRm9ybUNvbnRyb2wpIHtcbiAgICBpZiAodHlwZW9mIHJlcXVpcmVkID09PSAndW5kZWZpbmVkJykge1xuICAgICAgcmVxdWlyZWQgPSBtdWlGb3JtQ29udHJvbC5yZXF1aXJlZDtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGZvY3VzZWQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBmb2N1c2VkID0gbXVpRm9ybUNvbnRyb2wuZm9jdXNlZDtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGRpc2FibGVkID09PSAndW5kZWZpbmVkJykge1xuICAgICAgZGlzYWJsZWQgPSBtdWlGb3JtQ29udHJvbC5kaXNhYmxlZDtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGVycm9yID09PSAndW5kZWZpbmVkJykge1xuICAgICAgZXJyb3IgPSBtdWlGb3JtQ29udHJvbC5lcnJvcjtcbiAgICB9XG4gIH1cblxuICB2YXIgY2xhc3NOYW1lID0gKDAsIF9jbGFzc25hbWVzLmRlZmF1bHQpKGNsYXNzZXMucm9vdCwgKF9jbGFzc05hbWVzID0ge30sICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKF9jbGFzc05hbWVzLCBjbGFzc2VzLmZvY3VzZWQsIGZvY3VzZWQpLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lcywgY2xhc3Nlcy5kaXNhYmxlZCwgZGlzYWJsZWQpLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lcywgY2xhc3Nlcy5lcnJvciwgZXJyb3IpLCBfY2xhc3NOYW1lcyksIGNsYXNzTmFtZVByb3ApO1xuICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChDb21wb25lbnQsICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe1xuICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lXG4gIH0sIG90aGVyKSwgY2hpbGRyZW4sIHJlcXVpcmVkICYmIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICBjbGFzc05hbWU6ICgwLCBfY2xhc3NuYW1lcy5kZWZhdWx0KShjbGFzc2VzLmFzdGVyaXNrLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KSh7fSwgY2xhc3Nlcy5lcnJvciwgZXJyb3IpKVxuICB9LCBcIlxcdTIwMDkqXCIpKTtcbn1cblxuRm9ybUxhYmVsLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogX3Byb3BUeXBlcy5kZWZhdWx0Lm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzLWFwaSkgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBET00gZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZywgX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmNdKSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgbGFiZWwgc2hvdWxkIGJlIGRpc3BsYXllZCBpbiBhIGRpc2FibGVkIHN0YXRlLlxuICAgKi9cbiAgZGlzYWJsZWQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBsYWJlbCBzaG91bGQgYmUgZGlzcGxheWVkIGluIGFuIGVycm9yIHN0YXRlLlxuICAgKi9cbiAgZXJyb3I6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBpbnB1dCBvZiB0aGlzIGxhYmVsIGlzIGZvY3VzZWQgKHVzZWQgYnkgYEZvcm1Hcm91cGAgY29tcG9uZW50cykuXG4gICAqL1xuICBmb2N1c2VkOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgbGFiZWwgd2lsbCBpbmRpY2F0ZSB0aGF0IHRoZSBpbnB1dCBpcyByZXF1aXJlZC5cbiAgICovXG4gIHJlcXVpcmVkOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbFxufSA6IHt9O1xuRm9ybUxhYmVsLmRlZmF1bHRQcm9wcyA9IHtcbiAgY29tcG9uZW50OiAnbGFiZWwnXG59O1xuRm9ybUxhYmVsLmNvbnRleHRUeXBlcyA9IHtcbiAgbXVpRm9ybUNvbnRyb2w6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3Rcbn07XG5cbnZhciBfZGVmYXVsdCA9ICgwLCBfd2l0aFN0eWxlcy5kZWZhdWx0KShzdHlsZXMsIHtcbiAgbmFtZTogJ011aUZvcm1MYWJlbCdcbn0pKEZvcm1MYWJlbCk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5zdHlsZXMgPSB2b2lkIDA7XG5cbnZhciBfZXh0ZW5kczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vZXh0ZW5kc1wiKSk7XG5cbnZhciBfZGVmaW5lUHJvcGVydHkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2RlZmluZVByb3BlcnR5XCIpKTtcblxudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIikpO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xuXG52YXIgX2NsYXNzbmFtZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJjbGFzc25hbWVzXCIpKTtcblxudmFyIF93aXRoU3R5bGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vc3R5bGVzL3dpdGhTdHlsZXNcIikpO1xuXG52YXIgc3R5bGVzID0gZnVuY3Rpb24gc3R5bGVzKHRoZW1lKSB7XG4gIHJldHVybiB7XG4gICAgcm9vdDoge1xuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUudGV4dC5zZWNvbmRhcnksXG4gICAgICBmb250RmFtaWx5OiB0aGVtZS50eXBvZ3JhcGh5LmZvbnRGYW1pbHksXG4gICAgICBmb250U2l6ZTogdGhlbWUudHlwb2dyYXBoeS5weFRvUmVtKDEyKSxcbiAgICAgIHRleHRBbGlnbjogJ2xlZnQnLFxuICAgICAgbWFyZ2luVG9wOiB0aGVtZS5zcGFjaW5nLnVuaXQsXG4gICAgICBsaW5lSGVpZ2h0OiAnMWVtJyxcbiAgICAgIG1pbkhlaWdodDogJzFlbScsXG4gICAgICBtYXJnaW46IDAsXG4gICAgICAnJiRlcnJvcic6IHtcbiAgICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuZXJyb3IubWFpblxuICAgICAgfSxcbiAgICAgICcmJGRpc2FibGVkJzoge1xuICAgICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS50ZXh0LmRpc2FibGVkXG4gICAgICB9XG4gICAgfSxcbiAgICBlcnJvcjoge30sXG4gICAgZGlzYWJsZWQ6IHt9LFxuICAgIG1hcmdpbkRlbnNlOiB7XG4gICAgICBtYXJnaW5Ub3A6IHRoZW1lLnNwYWNpbmcudW5pdCAvIDJcbiAgICB9XG4gIH07XG59O1xuXG5leHBvcnRzLnN0eWxlcyA9IHN0eWxlcztcblxuZnVuY3Rpb24gRm9ybUhlbHBlclRleHQocHJvcHMsIGNvbnRleHQpIHtcbiAgdmFyIF9jbGFzc05hbWVzO1xuXG4gIHZhciBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZVByb3AgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBkaXNhYmxlZFByb3AgPSBwcm9wcy5kaXNhYmxlZCxcbiAgICAgIGVycm9yUHJvcCA9IHByb3BzLmVycm9yLFxuICAgICAgbWFyZ2luUHJvcCA9IHByb3BzLm1hcmdpbixcbiAgICAgIENvbXBvbmVudCA9IHByb3BzLmNvbXBvbmVudCxcbiAgICAgIG90aGVyID0gKDAsIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIuZGVmYXVsdCkocHJvcHMsIFtcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJkaXNhYmxlZFwiLCBcImVycm9yXCIsIFwibWFyZ2luXCIsIFwiY29tcG9uZW50XCJdKTtcbiAgdmFyIG11aUZvcm1Db250cm9sID0gY29udGV4dC5tdWlGb3JtQ29udHJvbDtcbiAgdmFyIGRpc2FibGVkID0gZGlzYWJsZWRQcm9wO1xuICB2YXIgZXJyb3IgPSBlcnJvclByb3A7XG4gIHZhciBtYXJnaW4gPSBtYXJnaW5Qcm9wO1xuXG4gIGlmIChtdWlGb3JtQ29udHJvbCkge1xuICAgIGlmICh0eXBlb2YgZGlzYWJsZWQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBkaXNhYmxlZCA9IG11aUZvcm1Db250cm9sLmRpc2FibGVkO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgZXJyb3IgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBlcnJvciA9IG11aUZvcm1Db250cm9sLmVycm9yO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgbWFyZ2luID09PSAndW5kZWZpbmVkJykge1xuICAgICAgbWFyZ2luID0gbXVpRm9ybUNvbnRyb2wubWFyZ2luO1xuICAgIH1cbiAgfVxuXG4gIHZhciBjbGFzc05hbWUgPSAoMCwgX2NsYXNzbmFtZXMuZGVmYXVsdCkoY2xhc3Nlcy5yb290LCAoX2NsYXNzTmFtZXMgPSB7fSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2NsYXNzTmFtZXMsIGNsYXNzZXMuZGlzYWJsZWQsIGRpc2FibGVkKSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2NsYXNzTmFtZXMsIGNsYXNzZXMuZXJyb3IsIGVycm9yKSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2NsYXNzTmFtZXMsIGNsYXNzZXMubWFyZ2luRGVuc2UsIG1hcmdpbiA9PT0gJ2RlbnNlJyksIF9jbGFzc05hbWVzKSwgY2xhc3NOYW1lUHJvcCk7XG4gIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7XG4gICAgY2xhc3NOYW1lOiBjbGFzc05hbWVcbiAgfSwgb3RoZXIpKTtcbn1cblxuRm9ybUhlbHBlclRleHQucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBfcHJvcFR5cGVzLmRlZmF1bHQubm9kZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MtYXBpKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIERPTSBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgY29tcG9uZW50OiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLCBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuY10pLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBoZWxwZXIgdGV4dCBzaG91bGQgYmUgZGlzcGxheWVkIGluIGEgZGlzYWJsZWQgc3RhdGUuXG4gICAqL1xuICBkaXNhYmxlZDogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgaGVscGVyIHRleHQgc2hvdWxkIGJlIGRpc3BsYXllZCBpbiBhbiBlcnJvciBzdGF0ZS5cbiAgICovXG4gIGVycm9yOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogSWYgYGRlbnNlYCwgd2lsbCBhZGp1c3QgdmVydGljYWwgc3BhY2luZy4gVGhpcyBpcyBub3JtYWxseSBvYnRhaW5lZCB2aWEgY29udGV4dCBmcm9tXG4gICAqIEZvcm1Db250cm9sLlxuICAgKi9cbiAgbWFyZ2luOiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2YoWydkZW5zZSddKVxufSA6IHt9O1xuRm9ybUhlbHBlclRleHQuZGVmYXVsdFByb3BzID0ge1xuICBjb21wb25lbnQ6ICdwJ1xufTtcbkZvcm1IZWxwZXJUZXh0LmNvbnRleHRUeXBlcyA9IHtcbiAgbXVpRm9ybUNvbnRyb2w6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3Rcbn07XG5cbnZhciBfZGVmYXVsdCA9ICgwLCBfd2l0aFN0eWxlcy5kZWZhdWx0KShzdHlsZXMsIHtcbiAgbmFtZTogJ011aUZvcm1IZWxwZXJUZXh0J1xufSkoRm9ybUhlbHBlclRleHQpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuc3R5bGVzID0gdm9pZCAwO1xuXG52YXIgX2V4dGVuZHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2V4dGVuZHNcIikpO1xuXG52YXIgX2RlZmluZVByb3BlcnR5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9kZWZpbmVQcm9wZXJ0eVwiKSk7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCIpKTtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKTtcblxudmFyIF9jbGFzc25hbWVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY2xhc3NuYW1lc1wiKSk7XG5cbnZhciBfd2l0aFN0eWxlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3N0eWxlcy93aXRoU3R5bGVzXCIpKTtcblxudmFyIHN0eWxlcyA9IHtcbiAgcm9vdDoge1xuICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICBmbGV4RGlyZWN0aW9uOiAnY29sdW1uJyxcbiAgICBmbGV4V3JhcDogJ3dyYXAnXG4gIH0sXG4gIHJvdzoge1xuICAgIGZsZXhEaXJlY3Rpb246ICdyb3cnXG4gIH1cbn07XG4vKipcbiAqIGBGb3JtR3JvdXBgIHdyYXBzIGNvbnRyb2xzIHN1Y2ggYXMgYENoZWNrYm94YCBhbmQgYFN3aXRjaGAuXG4gKiBJdCBwcm92aWRlcyBjb21wYWN0IHJvdyBsYXlvdXQuXG4gKiBGb3IgdGhlIGBSYWRpb2AsIHlvdSBzaG91bGQgYmUgdXNpbmcgdGhlIGBSYWRpb0dyb3VwYCBjb21wb25lbnQgaW5zdGVhZCBvZiB0aGlzIG9uZS5cbiAqL1xuXG5leHBvcnRzLnN0eWxlcyA9IHN0eWxlcztcblxuZnVuY3Rpb24gRm9ybUdyb3VwKHByb3BzKSB7XG4gIHZhciBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICByb3cgPSBwcm9wcy5yb3csXG4gICAgICBvdGhlciA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyLmRlZmF1bHQpKHByb3BzLCBbXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwiY2hpbGRyZW5cIiwgXCJyb3dcIl0pO1xuICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImRpdlwiLCAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHtcbiAgICBjbGFzc05hbWU6ICgwLCBfY2xhc3NuYW1lcy5kZWZhdWx0KShjbGFzc2VzLnJvb3QsICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKHt9LCBjbGFzc2VzLnJvdywgcm93KSwgY2xhc3NOYW1lKVxuICB9LCBvdGhlciksIGNoaWxkcmVuKTtcbn1cblxuRm9ybUdyb3VwLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogX3Byb3BUeXBlcy5kZWZhdWx0Lm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzLWFwaSkgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBEaXNwbGF5IGdyb3VwIG9mIGVsZW1lbnRzIGluIGEgY29tcGFjdCByb3cuXG4gICAqL1xuICByb3c6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sXG59IDoge307XG5Gb3JtR3JvdXAuZGVmYXVsdFByb3BzID0ge1xuICByb3c6IGZhbHNlXG59O1xuXG52YXIgX2RlZmF1bHQgPSAoMCwgX3dpdGhTdHlsZXMuZGVmYXVsdCkoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlGb3JtR3JvdXAnXG59KShGb3JtR3JvdXApO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuc3R5bGVzID0gdm9pZCAwO1xuXG52YXIgX2V4dGVuZHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2V4dGVuZHNcIikpO1xuXG52YXIgX2RlZmluZVByb3BlcnR5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9kZWZpbmVQcm9wZXJ0eVwiKSk7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCIpKTtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKTtcblxudmFyIF9jbGFzc25hbWVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY2xhc3NuYW1lc1wiKSk7XG5cbnZhciBfd2l0aFN0eWxlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3N0eWxlcy93aXRoU3R5bGVzXCIpKTtcblxudmFyIF9UeXBvZ3JhcGh5ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vVHlwb2dyYXBoeVwiKSk7XG5cbi8qIGVzbGludC1kaXNhYmxlIGpzeC1hMTF5L2xhYmVsLWhhcy1mb3IgKi9cbnZhciBzdHlsZXMgPSBmdW5jdGlvbiBzdHlsZXModGhlbWUpIHtcbiAgcmV0dXJuIHtcbiAgICByb290OiB7XG4gICAgICBkaXNwbGF5OiAnaW5saW5lLWZsZXgnLFxuICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICBjdXJzb3I6ICdwb2ludGVyJyxcbiAgICAgIC8vIEZvciBjb3JyZWN0IGFsaWdubWVudCB3aXRoIHRoZSB0ZXh0LlxuICAgICAgdmVydGljYWxBbGlnbjogJ21pZGRsZScsXG4gICAgICAvLyBSZW1vdmUgZ3JleSBoaWdobGlnaHRcbiAgICAgIFdlYmtpdFRhcEhpZ2hsaWdodENvbG9yOiAndHJhbnNwYXJlbnQnLFxuICAgICAgbWFyZ2luTGVmdDogLTE0LFxuICAgICAgbWFyZ2luUmlnaHQ6IHRoZW1lLnNwYWNpbmcudW5pdCAqIDIsXG4gICAgICAvLyB1c2VkIGZvciByb3cgcHJlc2VudGF0aW9uIG9mIHJhZGlvL2NoZWNrYm94XG4gICAgICAnJiRkaXNhYmxlZCc6IHtcbiAgICAgICAgY3Vyc29yOiAnZGVmYXVsdCdcbiAgICAgIH1cbiAgICB9LFxuICAgIGRpc2FibGVkOiB7fSxcbiAgICBsYWJlbDoge1xuICAgICAgJyYkZGlzYWJsZWQnOiB7XG4gICAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnRleHQuZGlzYWJsZWRcbiAgICAgIH1cbiAgICB9XG4gIH07XG59O1xuLyoqXG4gKiBEcm9wIGluIHJlcGxhY2VtZW50IG9mIHRoZSBgUmFkaW9gLCBgU3dpdGNoYCBhbmQgYENoZWNrYm94YCBjb21wb25lbnQuXG4gKiBVc2UgdGhpcyBjb21wb25lbnQgaWYgeW91IHdhbnQgdG8gZGlzcGxheSBhbiBleHRyYSBsYWJlbC5cbiAqL1xuXG5cbmV4cG9ydHMuc3R5bGVzID0gc3R5bGVzO1xuXG5mdW5jdGlvbiBGb3JtQ29udHJvbExhYmVsKHByb3BzLCBjb250ZXh0KSB7XG4gIHZhciBjaGVja2VkID0gcHJvcHMuY2hlY2tlZCxcbiAgICAgIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY2xhc3NOYW1lUHJvcCA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIGNvbnRyb2wgPSBwcm9wcy5jb250cm9sLFxuICAgICAgZGlzYWJsZWRQcm9wID0gcHJvcHMuZGlzYWJsZWQsXG4gICAgICBpbnB1dFJlZiA9IHByb3BzLmlucHV0UmVmLFxuICAgICAgbGFiZWwgPSBwcm9wcy5sYWJlbCxcbiAgICAgIG5hbWUgPSBwcm9wcy5uYW1lLFxuICAgICAgb25DaGFuZ2UgPSBwcm9wcy5vbkNoYW5nZSxcbiAgICAgIHZhbHVlID0gcHJvcHMudmFsdWUsXG4gICAgICBvdGhlciA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyLmRlZmF1bHQpKHByb3BzLCBbXCJjaGVja2VkXCIsIFwiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcImNvbnRyb2xcIiwgXCJkaXNhYmxlZFwiLCBcImlucHV0UmVmXCIsIFwibGFiZWxcIiwgXCJuYW1lXCIsIFwib25DaGFuZ2VcIiwgXCJ2YWx1ZVwiXSk7XG4gIHZhciBtdWlGb3JtQ29udHJvbCA9IGNvbnRleHQubXVpRm9ybUNvbnRyb2w7XG4gIHZhciBkaXNhYmxlZCA9IGRpc2FibGVkUHJvcDtcblxuICBpZiAodHlwZW9mIGNvbnRyb2wucHJvcHMuZGlzYWJsZWQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgaWYgKHR5cGVvZiBkaXNhYmxlZCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGRpc2FibGVkID0gY29udHJvbC5wcm9wcy5kaXNhYmxlZDtcbiAgICB9XG4gIH1cblxuICBpZiAobXVpRm9ybUNvbnRyb2wpIHtcbiAgICBpZiAodHlwZW9mIGRpc2FibGVkID09PSAndW5kZWZpbmVkJykge1xuICAgICAgZGlzYWJsZWQgPSBtdWlGb3JtQ29udHJvbC5kaXNhYmxlZDtcbiAgICB9XG4gIH1cblxuICB2YXIgY2xhc3NOYW1lID0gKDAsIF9jbGFzc25hbWVzLmRlZmF1bHQpKGNsYXNzZXMucm9vdCwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoe30sIGNsYXNzZXMuZGlzYWJsZWQsIGRpc2FibGVkKSwgY2xhc3NOYW1lUHJvcCk7XG4gIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwibGFiZWxcIiwgKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7XG4gICAgY2xhc3NOYW1lOiBjbGFzc05hbWVcbiAgfSwgb3RoZXIpLCBfcmVhY3QuZGVmYXVsdC5jbG9uZUVsZW1lbnQoY29udHJvbCwge1xuICAgIGRpc2FibGVkOiBkaXNhYmxlZCxcbiAgICBjaGVja2VkOiB0eXBlb2YgY29udHJvbC5wcm9wcy5jaGVja2VkID09PSAndW5kZWZpbmVkJyA/IGNoZWNrZWQgOiBjb250cm9sLnByb3BzLmNoZWNrZWQsXG4gICAgbmFtZTogY29udHJvbC5wcm9wcy5uYW1lIHx8IG5hbWUsXG4gICAgb25DaGFuZ2U6IGNvbnRyb2wucHJvcHMub25DaGFuZ2UgfHwgb25DaGFuZ2UsXG4gICAgdmFsdWU6IGNvbnRyb2wucHJvcHMudmFsdWUgfHwgdmFsdWUsXG4gICAgaW5wdXRSZWY6IGNvbnRyb2wucHJvcHMuaW5wdXRSZWYgfHwgaW5wdXRSZWZcbiAgfSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX1R5cG9ncmFwaHkuZGVmYXVsdCwge1xuICAgIGNvbXBvbmVudDogXCJzcGFuXCIsXG4gICAgY2xhc3NOYW1lOiAoMCwgX2NsYXNzbmFtZXMuZGVmYXVsdCkoY2xhc3Nlcy5sYWJlbCwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoe30sIGNsYXNzZXMuZGlzYWJsZWQsIGRpc2FibGVkKSlcbiAgfSwgbGFiZWwpKTtcbn1cblxuRm9ybUNvbnRyb2xMYWJlbC5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBjb21wb25lbnQgYXBwZWFycyBzZWxlY3RlZC5cbiAgICovXG4gIGNoZWNrZWQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMuZGVmYXVsdC5ib29sLCBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nXSksXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzLWFwaSkgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBBIGNvbnRyb2wgZWxlbWVudC4gRm9yIGluc3RhbmNlLCBpdCBjYW4gYmUgYmUgYSBgUmFkaW9gLCBhIGBTd2l0Y2hgIG9yIGEgYENoZWNrYm94YC5cbiAgICovXG4gIGNvbnRyb2w6IF9wcm9wVHlwZXMuZGVmYXVsdC5lbGVtZW50LFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBjb250cm9sIHdpbGwgYmUgZGlzYWJsZWQuXG4gICAqL1xuICBkaXNhYmxlZDogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIFVzZSB0aGF0IHByb3BlcnR5IHRvIHBhc3MgYSByZWYgY2FsbGJhY2sgdG8gdGhlIG5hdGl2ZSBpbnB1dCBjb21wb25lbnQuXG4gICAqL1xuICBpbnB1dFJlZjogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsIF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3RdKSxcblxuICAvKipcbiAgICogVGhlIHRleHQgdG8gYmUgdXNlZCBpbiBhbiBlbmNsb3NpbmcgbGFiZWwgZWxlbWVudC5cbiAgICovXG4gIGxhYmVsOiBfcHJvcFR5cGVzLmRlZmF1bHQubm9kZSxcblxuICAvKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBuYW1lOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBzdGF0ZSBpcyBjaGFuZ2VkLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gZXZlbnQgVGhlIGV2ZW50IHNvdXJjZSBvZiB0aGUgY2FsbGJhY2suXG4gICAqIFlvdSBjYW4gcHVsbCBvdXQgdGhlIG5ldyB2YWx1ZSBieSBhY2Nlc3NpbmcgYGV2ZW50LnRhcmdldC5jaGVja2VkYC5cbiAgICogQHBhcmFtIHtib29sZWFufSBjaGVja2VkIFRoZSBgY2hlY2tlZGAgdmFsdWUgb2YgdGhlIHN3aXRjaFxuICAgKi9cbiAgb25DaGFuZ2U6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBUaGUgdmFsdWUgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIHZhbHVlOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nXG59IDoge307XG5Gb3JtQ29udHJvbExhYmVsLmNvbnRleHRUeXBlcyA9IHtcbiAgbXVpRm9ybUNvbnRyb2w6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3Rcbn07XG5cbnZhciBfZGVmYXVsdCA9ICgwLCBfd2l0aFN0eWxlcy5kZWZhdWx0KShzdHlsZXMsIHtcbiAgbmFtZTogJ011aUZvcm1Db250cm9sTGFiZWwnXG59KShGb3JtQ29udHJvbExhYmVsKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLnN0eWxlcyA9IHZvaWQgMDtcblxudmFyIF9leHRlbmRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9leHRlbmRzXCIpKTtcblxudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIikpO1xuXG52YXIgX2NsYXNzQ2FsbENoZWNrMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9jbGFzc0NhbGxDaGVja1wiKSk7XG5cbnZhciBfY3JlYXRlQ2xhc3MyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2NyZWF0ZUNsYXNzXCIpKTtcblxudmFyIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuXCIpKTtcblxudmFyIF9pbmhlcml0czIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vaW5oZXJpdHNcIikpO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xuXG52YXIgX2NsYXNzbmFtZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJjbGFzc25hbWVzXCIpKTtcblxudmFyIF9kZWJvdW5jZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImRlYm91bmNlXCIpKTtcblxudmFyIF9yZWFjdEV2ZW50TGlzdGVuZXIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdC1ldmVudC1saXN0ZW5lclwiKSk7XG5cbnZhciBfd2l0aFN0eWxlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3N0eWxlcy93aXRoU3R5bGVzXCIpKTtcblxudmFyIFJPV1NfSEVJR0hUID0gMTk7XG52YXIgc3R5bGVzID0ge1xuICByb290OiB7XG4gICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgLy8gYmVjYXVzZSB0aGUgc2hhZG93IGhhcyBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICB3aWR0aDogJzEwMCUnXG4gIH0sXG4gIHRleHRhcmVhOiB7XG4gICAgd2lkdGg6ICcxMDAlJyxcbiAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICByZXNpemU6ICdub25lJyxcbiAgICBmb250OiAnaW5oZXJpdCcsXG4gICAgcGFkZGluZzogMCxcbiAgICBjdXJzb3I6ICdpbmhlcml0JyxcbiAgICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgICBsaW5lSGVpZ2h0OiAnaW5oZXJpdCcsXG4gICAgYm9yZGVyOiAnbm9uZScsXG4gICAgb3V0bGluZTogJ25vbmUnLFxuICAgIGJhY2tncm91bmQ6ICd0cmFuc3BhcmVudCdcbiAgfSxcbiAgc2hhZG93OiB7XG4gICAgcmVzaXplOiAnbm9uZScsXG4gICAgLy8gT3ZlcmZsb3cgYWxzbyBuZWVkZWQgdG8gaGVyZSB0byByZW1vdmUgdGhlIGV4dHJhIHJvd1xuICAgIC8vIGFkZGVkIHRvIHRleHRhcmVhcyBpbiBGaXJlZm94LlxuICAgIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgICAvLyBWaXNpYmlsaXR5IG5lZWRlZCB0byBoaWRlIHRoZSBleHRyYSB0ZXh0IGFyZWEgb24gaXBhZHNcbiAgICB2aXNpYmlsaXR5OiAnaGlkZGVuJyxcbiAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICBoZWlnaHQ6ICdhdXRvJyxcbiAgICB3aGl0ZVNwYWNlOiAncHJlLXdyYXAnXG4gIH1cbn07XG4vKipcbiAqIEBpZ25vcmUgLSBpbnRlcm5hbCBjb21wb25lbnQuXG4gKi9cblxuZXhwb3J0cy5zdHlsZXMgPSBzdHlsZXM7XG5cbnZhciBUZXh0YXJlYSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICAoMCwgX2luaGVyaXRzMi5kZWZhdWx0KShUZXh0YXJlYSwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gVGV4dGFyZWEocHJvcHMpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMi5kZWZhdWx0KSh0aGlzLCBUZXh0YXJlYSk7XG4gICAgX3RoaXMgPSAoMCwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yLmRlZmF1bHQpKHRoaXMsIChUZXh0YXJlYS5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKFRleHRhcmVhKSkuY2FsbCh0aGlzLCBwcm9wcykpOyAvLyA8SW5wdXQ+IGV4cGVjdHMgdGhlIGNvbXBvbmVudHMgaXQgcmVuZGVycyB0byByZXNwb25kIHRvICd2YWx1ZSdcbiAgICAvLyBzbyB0aGF0IGl0IGNhbiBjaGVjayB3aGV0aGVyIHRoZXkgYXJlIGZpbGxlZC5cblxuICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgaGVpZ2h0OiBudWxsXG4gICAgfTtcbiAgICBfdGhpcy5zaGFkb3cgPSBudWxsO1xuICAgIF90aGlzLnNpbmdsZWxpbmVTaGFkb3cgPSBudWxsO1xuICAgIF90aGlzLmlucHV0ID0gbnVsbDtcbiAgICBfdGhpcy52YWx1ZSA9IG51bGw7XG4gICAgX3RoaXMuaGFuZGxlUmVzaXplID0gKDAsIF9kZWJvdW5jZS5kZWZhdWx0KShmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpcy5zeW5jSGVpZ2h0V2l0aFNoYWRvdygpO1xuICAgIH0sIDE2Nik7XG5cbiAgICBfdGhpcy5oYW5kbGVSZWZJbnB1dCA9IGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICBfdGhpcy5pbnB1dCA9IG5vZGU7XG4gICAgICB2YXIgdGV4dGFyZWFSZWYgPSBfdGhpcy5wcm9wcy50ZXh0YXJlYVJlZjtcblxuICAgICAgaWYgKHRleHRhcmVhUmVmKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdGV4dGFyZWFSZWYgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICB0ZXh0YXJlYVJlZihub2RlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0ZXh0YXJlYVJlZi5jdXJyZW50ID0gbm9kZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVSZWZTaW5nbGVsaW5lU2hhZG93ID0gZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgIF90aGlzLnNpbmdsZWxpbmVTaGFkb3cgPSBub2RlO1xuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVSZWZTaGFkb3cgPSBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgX3RoaXMuc2hhZG93ID0gbm9kZTtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlQ2hhbmdlID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBfdGhpcy52YWx1ZSA9IGV2ZW50LnRhcmdldC52YWx1ZTtcblxuICAgICAgaWYgKHR5cGVvZiBfdGhpcy5wcm9wcy52YWx1ZSA9PT0gJ3VuZGVmaW5lZCcgJiYgX3RoaXMuc2hhZG93KSB7XG4gICAgICAgIC8vIFRoZSBjb21wb25lbnQgaXMgbm90IGNvbnRyb2xsZWQsIHdlIG5lZWQgdG8gdXBkYXRlIHRoZSBzaGFsbG93IHZhbHVlLlxuICAgICAgICBfdGhpcy5zaGFkb3cudmFsdWUgPSBfdGhpcy52YWx1ZTtcblxuICAgICAgICBfdGhpcy5zeW5jSGVpZ2h0V2l0aFNoYWRvdygpO1xuICAgICAgfVxuXG4gICAgICBpZiAoX3RoaXMucHJvcHMub25DaGFuZ2UpIHtcbiAgICAgICAgX3RoaXMucHJvcHMub25DaGFuZ2UoZXZlbnQpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfdGhpcy52YWx1ZSA9IHByb3BzLnZhbHVlIHx8IHByb3BzLmRlZmF1bHRWYWx1ZSB8fCAnJztcbiAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGhlaWdodDogTnVtYmVyKHByb3BzLnJvd3MpICogUk9XU19IRUlHSFRcbiAgICB9O1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gICgwLCBfY3JlYXRlQ2xhc3MyLmRlZmF1bHQpKFRleHRhcmVhLCBbe1xuICAgIGtleTogXCJjb21wb25lbnREaWRNb3VudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgIHRoaXMuc3luY0hlaWdodFdpdGhTaGFkb3coKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY29tcG9uZW50RGlkVXBkYXRlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZSgpIHtcbiAgICAgIHRoaXMuc3luY0hlaWdodFdpdGhTaGFkb3coKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY29tcG9uZW50V2lsbFVubW91bnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICB0aGlzLmhhbmRsZVJlc2l6ZS5jbGVhcigpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJzeW5jSGVpZ2h0V2l0aFNoYWRvd1wiLFxuICAgIC8vIENvcnJlc3BvbmRzIHRvIDEwIGZyYW1lcyBhdCA2MCBIei5cbiAgICB2YWx1ZTogZnVuY3Rpb24gc3luY0hlaWdodFdpdGhTaGFkb3coKSB7XG4gICAgICB2YXIgcHJvcHMgPSB0aGlzLnByb3BzO1xuXG4gICAgICBpZiAoIXRoaXMuc2hhZG93IHx8ICF0aGlzLnNpbmdsZWxpbmVTaGFkb3cpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSAvLyBUaGUgY29tcG9uZW50IGlzIGNvbnRyb2xsZWQsIHdlIG5lZWQgdG8gdXBkYXRlIHRoZSBzaGFsbG93IHZhbHVlLlxuXG5cbiAgICAgIGlmICh0eXBlb2YgcHJvcHMudmFsdWUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHRoaXMuc2hhZG93LnZhbHVlID0gcHJvcHMudmFsdWUgPT0gbnVsbCA/ICcnIDogU3RyaW5nKHByb3BzLnZhbHVlKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGxpbmVIZWlnaHQgPSB0aGlzLnNpbmdsZWxpbmVTaGFkb3cuc2Nyb2xsSGVpZ2h0O1xuICAgICAgdmFyIG5ld0hlaWdodCA9IHRoaXMuc2hhZG93LnNjcm9sbEhlaWdodDsgLy8gR3VhcmRpbmcgZm9yIGpzZG9tLCB3aGVyZSBzY3JvbGxIZWlnaHQgaXNuJ3QgcHJlc2VudC5cbiAgICAgIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vdG1wdmFyL2pzZG9tL2lzc3Vlcy8xMDEzXG5cbiAgICAgIGlmIChuZXdIZWlnaHQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChOdW1iZXIocHJvcHMucm93c01heCkgPj0gTnVtYmVyKHByb3BzLnJvd3MpKSB7XG4gICAgICAgIG5ld0hlaWdodCA9IE1hdGgubWluKE51bWJlcihwcm9wcy5yb3dzTWF4KSAqIGxpbmVIZWlnaHQsIG5ld0hlaWdodCk7XG4gICAgICB9XG5cbiAgICAgIG5ld0hlaWdodCA9IE1hdGgubWF4KG5ld0hlaWdodCwgbGluZUhlaWdodCk7IC8vIE5lZWQgYSBsYXJnZSBlbm91Z2ggZGlmZmVyZW50IHRvIHVwZGF0ZSB0aGUgaGVpZ2h0LlxuICAgICAgLy8gVGhpcyBwcmV2ZW50cyBpbmZpbml0ZSByZW5kZXJpbmcgbG9vcC5cblxuICAgICAgaWYgKE1hdGguYWJzKHRoaXMuc3RhdGUuaGVpZ2h0IC0gbmV3SGVpZ2h0KSA+IDEpIHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgaGVpZ2h0OiBuZXdIZWlnaHRcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBjbGFzc2VzID0gX3Byb3BzLmNsYXNzZXMsXG4gICAgICAgICAgY2xhc3NOYW1lID0gX3Byb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgICBkZWZhdWx0VmFsdWUgPSBfcHJvcHMuZGVmYXVsdFZhbHVlLFxuICAgICAgICAgIG9uQ2hhbmdlID0gX3Byb3BzLm9uQ2hhbmdlLFxuICAgICAgICAgIHJvd3MgPSBfcHJvcHMucm93cyxcbiAgICAgICAgICByb3dzTWF4ID0gX3Byb3BzLnJvd3NNYXgsXG4gICAgICAgICAgdGV4dGFyZWFSZWYgPSBfcHJvcHMudGV4dGFyZWFSZWYsXG4gICAgICAgICAgdmFsdWUgPSBfcHJvcHMudmFsdWUsXG4gICAgICAgICAgb3RoZXIgPSAoMCwgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMi5kZWZhdWx0KShfcHJvcHMsIFtcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJkZWZhdWx0VmFsdWVcIiwgXCJvbkNoYW5nZVwiLCBcInJvd3NcIiwgXCJyb3dzTWF4XCIsIFwidGV4dGFyZWFSZWZcIiwgXCJ2YWx1ZVwiXSk7XG4gICAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5yb290LFxuICAgICAgICBzdHlsZToge1xuICAgICAgICAgIGhlaWdodDogdGhpcy5zdGF0ZS5oZWlnaHRcbiAgICAgICAgfVxuICAgICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3RFdmVudExpc3RlbmVyLmRlZmF1bHQsIHtcbiAgICAgICAgdGFyZ2V0OiBcIndpbmRvd1wiLFxuICAgICAgICBvblJlc2l6ZTogdGhpcy5oYW5kbGVSZXNpemVcbiAgICAgIH0pLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwidGV4dGFyZWFcIiwge1xuICAgICAgICByZWY6IHRoaXMuaGFuZGxlUmVmU2luZ2xlbGluZVNoYWRvdyxcbiAgICAgICAgY2xhc3NOYW1lOiAoMCwgX2NsYXNzbmFtZXMuZGVmYXVsdCkoY2xhc3Nlcy5zaGFkb3csIGNsYXNzZXMudGV4dGFyZWEpLFxuICAgICAgICB0YWJJbmRleDogLTEsXG4gICAgICAgIHJvd3M6IFwiMVwiLFxuICAgICAgICByZWFkT25seTogdHJ1ZSxcbiAgICAgICAgXCJhcmlhLWhpZGRlblwiOiBcInRydWVcIixcbiAgICAgICAgdmFsdWU6IFwiXCJcbiAgICAgIH0pLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwidGV4dGFyZWFcIiwge1xuICAgICAgICByZWY6IHRoaXMuaGFuZGxlUmVmU2hhZG93LFxuICAgICAgICBjbGFzc05hbWU6ICgwLCBfY2xhc3NuYW1lcy5kZWZhdWx0KShjbGFzc2VzLnNoYWRvdywgY2xhc3Nlcy50ZXh0YXJlYSksXG4gICAgICAgIHRhYkluZGV4OiAtMSxcbiAgICAgICAgcm93czogcm93cyxcbiAgICAgICAgXCJhcmlhLWhpZGRlblwiOiBcInRydWVcIixcbiAgICAgICAgcmVhZE9ubHk6IHRydWUsXG4gICAgICAgIGRlZmF1bHRWYWx1ZTogZGVmYXVsdFZhbHVlLFxuICAgICAgICB2YWx1ZTogdmFsdWVcbiAgICAgIH0pLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwidGV4dGFyZWFcIiwgKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7XG4gICAgICAgIHJvd3M6IHJvd3MsXG4gICAgICAgIGNsYXNzTmFtZTogKDAsIF9jbGFzc25hbWVzLmRlZmF1bHQpKGNsYXNzZXMudGV4dGFyZWEsIGNsYXNzTmFtZSksXG4gICAgICAgIGRlZmF1bHRWYWx1ZTogZGVmYXVsdFZhbHVlLFxuICAgICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICAgIG9uQ2hhbmdlOiB0aGlzLmhhbmRsZUNoYW5nZSxcbiAgICAgICAgcmVmOiB0aGlzLmhhbmRsZVJlZklucHV0XG4gICAgICB9LCBvdGhlcikpKTtcbiAgICB9XG4gIH1dKTtcbiAgcmV0dXJuIFRleHRhcmVhO1xufShfcmVhY3QuZGVmYXVsdC5Db21wb25lbnQpO1xuXG5UZXh0YXJlYS5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2Nzcy1hcGkpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgZGVmYXVsdFZhbHVlOiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLCBfcHJvcFR5cGVzLmRlZmF1bHQubnVtYmVyXSksXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGRpc2FibGVkOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25DaGFuZ2U6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBOdW1iZXIgb2Ygcm93cyB0byBkaXNwbGF5IHdoZW4gbXVsdGlsaW5lIG9wdGlvbiBpcyBzZXQgdG8gdHJ1ZS5cbiAgICovXG4gIHJvd3M6IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsIF9wcm9wVHlwZXMuZGVmYXVsdC5udW1iZXJdKSxcblxuICAvKipcbiAgICogTWF4aW11bSBudW1iZXIgb2Ygcm93cyB0byBkaXNwbGF5IHdoZW4gbXVsdGlsaW5lIG9wdGlvbiBpcyBzZXQgdG8gdHJ1ZS5cbiAgICovXG4gIHJvd3NNYXg6IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsIF9wcm9wVHlwZXMuZGVmYXVsdC5udW1iZXJdKSxcblxuICAvKipcbiAgICogVXNlIHRoYXQgcHJvcGVydHkgdG8gcGFzcyBhIHJlZiBjYWxsYmFjayB0byB0aGUgbmF0aXZlIHRleHRhcmVhIGVsZW1lbnQuXG4gICAqL1xuICB0ZXh0YXJlYVJlZjogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsIF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3RdKSxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgdmFsdWU6IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsIF9wcm9wVHlwZXMuZGVmYXVsdC5udW1iZXJdKVxufSA6IHt9O1xuVGV4dGFyZWEuZGVmYXVsdFByb3BzID0ge1xuICByb3dzOiAxXG59O1xuXG52YXIgX2RlZmF1bHQgPSAoMCwgX3dpdGhTdHlsZXMuZGVmYXVsdCkoc3R5bGVzKShUZXh0YXJlYSk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5zdHlsZXMgPSB2b2lkIDA7XG5cbnZhciBfZXh0ZW5kczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vZXh0ZW5kc1wiKSk7XG5cbnZhciBfZGVmaW5lUHJvcGVydHkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2RlZmluZVByb3BlcnR5XCIpKTtcblxudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIikpO1xuXG52YXIgX2NsYXNzQ2FsbENoZWNrMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9jbGFzc0NhbGxDaGVja1wiKSk7XG5cbnZhciBfY3JlYXRlQ2xhc3MyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2NyZWF0ZUNsYXNzXCIpKTtcblxudmFyIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuXCIpKTtcblxudmFyIF9pbmhlcml0czIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vaW5oZXJpdHNcIikpO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xuXG52YXIgX2NsYXNzbmFtZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJjbGFzc25hbWVzXCIpKTtcblxudmFyIF93aXRoU3R5bGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vc3R5bGVzL3dpdGhTdHlsZXNcIikpO1xuXG52YXIgX0lucHV0ID0gcmVxdWlyZShcIi4uL0lucHV0L0lucHV0XCIpO1xuXG52YXIgX2hlbHBlcnMgPSByZXF1aXJlKFwiLi4vdXRpbHMvaGVscGVyc1wiKTtcblxudmFyIF9yZWFjdEhlbHBlcnMgPSByZXF1aXJlKFwiLi4vdXRpbHMvcmVhY3RIZWxwZXJzXCIpO1xuXG52YXIgc3R5bGVzID0gZnVuY3Rpb24gc3R5bGVzKHRoZW1lKSB7XG4gIHJldHVybiB7XG4gICAgcm9vdDoge1xuICAgICAgZGlzcGxheTogJ2lubGluZS1mbGV4JyxcbiAgICAgIGZsZXhEaXJlY3Rpb246ICdjb2x1bW4nLFxuICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgICAvLyBSZXNldCBmaWVsZHNldCBkZWZhdWx0IHN0eWxlXG4gICAgICBtaW5XaWR0aDogMCxcbiAgICAgIHBhZGRpbmc6IDAsXG4gICAgICBtYXJnaW46IDAsXG4gICAgICBib3JkZXI6IDBcbiAgICB9LFxuICAgIG1hcmdpbk5vcm1hbDoge1xuICAgICAgbWFyZ2luVG9wOiB0aGVtZS5zcGFjaW5nLnVuaXQgKiAyLFxuICAgICAgbWFyZ2luQm90dG9tOiB0aGVtZS5zcGFjaW5nLnVuaXRcbiAgICB9LFxuICAgIG1hcmdpbkRlbnNlOiB7XG4gICAgICBtYXJnaW5Ub3A6IHRoZW1lLnNwYWNpbmcudW5pdCxcbiAgICAgIG1hcmdpbkJvdHRvbTogdGhlbWUuc3BhY2luZy51bml0IC8gMlxuICAgIH0sXG4gICAgZnVsbFdpZHRoOiB7XG4gICAgICB3aWR0aDogJzEwMCUnXG4gICAgfVxuICB9O1xufTtcbi8qKlxuICogUHJvdmlkZXMgY29udGV4dCBzdWNoIGFzIGZpbGxlZC9mb2N1c2VkL2Vycm9yL3JlcXVpcmVkIGZvciBmb3JtIGlucHV0cy5cbiAqIFJlbHlpbmcgb24gdGhlIGNvbnRleHQgcHJvdmlkZXMgaGlnaCBmbGV4aWJpbHR5IGFuZCBlbnN1cmVzIHRoYXQgdGhlIHN0YXRlIGFsd2F5cyBzdGF5c1xuICogY29uc2l0ZW50IGFjcm9zcyB0aGUgY2hpbGRyZW4gb2YgdGhlIGBGb3JtQ29udHJvbGAuXG4gKiBUaGlzIGNvbnRleHQgaXMgdXNlZCBieSB0aGUgZm9sbG93aW5nIGNvbXBvbmVudHM6XG4gKiAgLSBGb3JtTGFiZWxcbiAqICAtIEZvcm1IZWxwZXJUZXh0XG4gKiAgLSBJbnB1dFxuICogIC0gSW5wdXRMYWJlbFxuICovXG5cblxuZXhwb3J0cy5zdHlsZXMgPSBzdHlsZXM7XG5cbnZhciBGb3JtQ29udHJvbCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICAoMCwgX2luaGVyaXRzMi5kZWZhdWx0KShGb3JtQ29udHJvbCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gRm9ybUNvbnRyb2wocHJvcHMpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMi5kZWZhdWx0KSh0aGlzLCBGb3JtQ29udHJvbCk7XG4gICAgX3RoaXMgPSAoMCwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yLmRlZmF1bHQpKHRoaXMsIChGb3JtQ29udHJvbC5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKEZvcm1Db250cm9sKSkuY2FsbCh0aGlzLCBwcm9wcykpOyAvLyBXZSBuZWVkIHRvIGl0ZXJhdGUgdGhyb3VnaCB0aGUgY2hpbGRyZW4gYW5kIGZpbmQgdGhlIElucHV0IGluIG9yZGVyXG4gICAgLy8gdG8gZnVsbHkgc3VwcG9ydCBzZXJ2ZXIgc2lkZSByZW5kZXJpbmcuXG5cbiAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGFkb3JuZWRTdGFydDogZmFsc2UsXG4gICAgICBmaWxsZWQ6IGZhbHNlLFxuICAgICAgZm9jdXNlZDogZmFsc2VcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlRm9jdXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpcy5zZXRTdGF0ZShmdW5jdGlvbiAoc3RhdGUpIHtcbiAgICAgICAgcmV0dXJuICFzdGF0ZS5mb2N1c2VkID8ge1xuICAgICAgICAgIGZvY3VzZWQ6IHRydWVcbiAgICAgICAgfSA6IG51bGw7XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlQmx1ciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzLnNldFN0YXRlKGZ1bmN0aW9uIChzdGF0ZSkge1xuICAgICAgICByZXR1cm4gc3RhdGUuZm9jdXNlZCA/IHtcbiAgICAgICAgICBmb2N1c2VkOiBmYWxzZVxuICAgICAgICB9IDogbnVsbDtcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVEaXJ0eSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICghX3RoaXMuc3RhdGUuZmlsbGVkKSB7XG4gICAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICBmaWxsZWQ6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZUNsZWFuID0gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKF90aGlzLnN0YXRlLmZpbGxlZCkge1xuICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgZmlsbGVkOiBmYWxzZVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdmFyIGNoaWxkcmVuID0gX3RoaXMucHJvcHMuY2hpbGRyZW47XG5cbiAgICBpZiAoY2hpbGRyZW4pIHtcbiAgICAgIF9yZWFjdC5kZWZhdWx0LkNoaWxkcmVuLmZvckVhY2goY2hpbGRyZW4sIGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICBpZiAoISgwLCBfcmVhY3RIZWxwZXJzLmlzTXVpRWxlbWVudCkoY2hpbGQsIFsnSW5wdXQnLCAnU2VsZWN0JywgJ05hdGl2ZVNlbGVjdCddKSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICgoMCwgX0lucHV0LmlzRmlsbGVkKShjaGlsZC5wcm9wcywgdHJ1ZSkpIHtcbiAgICAgICAgICBfdGhpcy5zdGF0ZS5maWxsZWQgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGlucHV0ID0gKDAsIF9yZWFjdEhlbHBlcnMuaXNNdWlFbGVtZW50KShjaGlsZCwgWydTZWxlY3QnLCAnTmF0aXZlU2VsZWN0J10pID8gY2hpbGQucHJvcHMuaW5wdXQgOiBjaGlsZDtcblxuICAgICAgICBpZiAoaW5wdXQgJiYgKDAsIF9JbnB1dC5pc0Fkb3JuZWRTdGFydCkoaW5wdXQucHJvcHMpKSB7XG4gICAgICAgICAgX3RoaXMuc3RhdGUuYWRvcm5lZFN0YXJ0ID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgKDAsIF9jcmVhdGVDbGFzczIuZGVmYXVsdCkoRm9ybUNvbnRyb2wsIFt7XG4gICAga2V5OiBcImdldENoaWxkQ29udGV4dFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRDaGlsZENvbnRleHQoKSB7XG4gICAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBkaXNhYmxlZCA9IF9wcm9wcy5kaXNhYmxlZCxcbiAgICAgICAgICBlcnJvciA9IF9wcm9wcy5lcnJvcixcbiAgICAgICAgICByZXF1aXJlZCA9IF9wcm9wcy5yZXF1aXJlZCxcbiAgICAgICAgICBtYXJnaW4gPSBfcHJvcHMubWFyZ2luO1xuICAgICAgdmFyIF9zdGF0ZSA9IHRoaXMuc3RhdGUsXG4gICAgICAgICAgYWRvcm5lZFN0YXJ0ID0gX3N0YXRlLmFkb3JuZWRTdGFydCxcbiAgICAgICAgICBmaWxsZWQgPSBfc3RhdGUuZmlsbGVkLFxuICAgICAgICAgIGZvY3VzZWQgPSBfc3RhdGUuZm9jdXNlZDtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIG11aUZvcm1Db250cm9sOiB7XG4gICAgICAgICAgYWRvcm5lZFN0YXJ0OiBhZG9ybmVkU3RhcnQsXG4gICAgICAgICAgZGlzYWJsZWQ6IGRpc2FibGVkLFxuICAgICAgICAgIGVycm9yOiBlcnJvcixcbiAgICAgICAgICBmaWxsZWQ6IGZpbGxlZCxcbiAgICAgICAgICBmb2N1c2VkOiBmb2N1c2VkLFxuICAgICAgICAgIG1hcmdpbjogbWFyZ2luLFxuICAgICAgICAgIG9uQmx1cjogdGhpcy5oYW5kbGVCbHVyLFxuICAgICAgICAgIG9uRW1wdHk6IHRoaXMuaGFuZGxlQ2xlYW4sXG4gICAgICAgICAgb25GaWxsZWQ6IHRoaXMuaGFuZGxlRGlydHksXG4gICAgICAgICAgb25Gb2N1czogdGhpcy5oYW5kbGVGb2N1cyxcbiAgICAgICAgICByZXF1aXJlZDogcmVxdWlyZWRcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfY2xhc3NOYW1lcztcblxuICAgICAgdmFyIF9wcm9wczIgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGNsYXNzZXMgPSBfcHJvcHMyLmNsYXNzZXMsXG4gICAgICAgICAgY2xhc3NOYW1lID0gX3Byb3BzMi5jbGFzc05hbWUsXG4gICAgICAgICAgQ29tcG9uZW50ID0gX3Byb3BzMi5jb21wb25lbnQsXG4gICAgICAgICAgZGlzYWJsZWQgPSBfcHJvcHMyLmRpc2FibGVkLFxuICAgICAgICAgIGVycm9yID0gX3Byb3BzMi5lcnJvcixcbiAgICAgICAgICBmdWxsV2lkdGggPSBfcHJvcHMyLmZ1bGxXaWR0aCxcbiAgICAgICAgICBtYXJnaW4gPSBfcHJvcHMyLm1hcmdpbixcbiAgICAgICAgICByZXF1aXJlZCA9IF9wcm9wczIucmVxdWlyZWQsXG4gICAgICAgICAgb3RoZXIgPSAoMCwgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMi5kZWZhdWx0KShfcHJvcHMyLCBbXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29tcG9uZW50XCIsIFwiZGlzYWJsZWRcIiwgXCJlcnJvclwiLCBcImZ1bGxXaWR0aFwiLCBcIm1hcmdpblwiLCBcInJlcXVpcmVkXCJdKTtcbiAgICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7XG4gICAgICAgIGNsYXNzTmFtZTogKDAsIF9jbGFzc25hbWVzLmRlZmF1bHQpKGNsYXNzZXMucm9vdCwgKF9jbGFzc05hbWVzID0ge30sICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKF9jbGFzc05hbWVzLCBjbGFzc2VzW1wibWFyZ2luXCIuY29uY2F0KCgwLCBfaGVscGVycy5jYXBpdGFsaXplKShtYXJnaW4pKV0sIG1hcmdpbiAhPT0gJ25vbmUnKSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2NsYXNzTmFtZXMsIGNsYXNzZXMuZnVsbFdpZHRoLCBmdWxsV2lkdGgpLCBfY2xhc3NOYW1lcyksIGNsYXNzTmFtZSlcbiAgICAgIH0sIG90aGVyKSk7XG4gICAgfVxuICB9XSk7XG4gIHJldHVybiBGb3JtQ29udHJvbDtcbn0oX3JlYWN0LmRlZmF1bHQuQ29tcG9uZW50KTtcblxuRm9ybUNvbnRyb2wucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKipcbiAgICogVGhlIGNvbnRlbnRzIG9mIHRoZSBmb3JtIGNvbnRyb2wuXG4gICAqL1xuICBjaGlsZHJlbjogX3Byb3BUeXBlcy5kZWZhdWx0Lm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzLWFwaSkgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBET00gZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZywgX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmNdKSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgbGFiZWwsIGlucHV0IGFuZCBoZWxwZXIgdGV4dCBzaG91bGQgYmUgZGlzcGxheWVkIGluIGEgZGlzYWJsZWQgc3RhdGUuXG4gICAqL1xuICBkaXNhYmxlZDogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGxhYmVsIHNob3VsZCBiZSBkaXNwbGF5ZWQgaW4gYW4gZXJyb3Igc3RhdGUuXG4gICAqL1xuICBlcnJvcjogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGNvbXBvbmVudCB3aWxsIHRha2UgdXAgdGhlIGZ1bGwgd2lkdGggb2YgaXRzIGNvbnRhaW5lci5cbiAgICovXG4gIGZ1bGxXaWR0aDogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGBkZW5zZWAgb3IgYG5vcm1hbGAsIHdpbGwgYWRqdXN0IHZlcnRpY2FsIHNwYWNpbmcgb2YgdGhpcyBhbmQgY29udGFpbmVkIGNvbXBvbmVudHMuXG4gICAqL1xuICBtYXJnaW46IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZihbJ25vbmUnLCAnZGVuc2UnLCAnbm9ybWFsJ10pLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBsYWJlbCB3aWxsIGluZGljYXRlIHRoYXQgdGhlIGlucHV0IGlzIHJlcXVpcmVkLlxuICAgKi9cbiAgcmVxdWlyZWQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sXG59IDoge307XG5Gb3JtQ29udHJvbC5kZWZhdWx0UHJvcHMgPSB7XG4gIGNvbXBvbmVudDogJ2RpdicsXG4gIGRpc2FibGVkOiBmYWxzZSxcbiAgZXJyb3I6IGZhbHNlLFxuICBmdWxsV2lkdGg6IGZhbHNlLFxuICBtYXJnaW46ICdub25lJyxcbiAgcmVxdWlyZWQ6IGZhbHNlXG59O1xuRm9ybUNvbnRyb2wuY2hpbGRDb250ZXh0VHlwZXMgPSB7XG4gIG11aUZvcm1Db250cm9sOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0XG59O1xuXG52YXIgX2RlZmF1bHQgPSAoMCwgX3dpdGhTdHlsZXMuZGVmYXVsdCkoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlGb3JtQ29udHJvbCdcbn0pKEZvcm1Db250cm9sKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLnN0eWxlcyA9IHZvaWQgMDtcblxudmFyIF9leHRlbmRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9leHRlbmRzXCIpKTtcblxudmFyIF9kZWZpbmVQcm9wZXJ0eTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vZGVmaW5lUHJvcGVydHlcIikpO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiKSk7XG5cbnZhciBfY2xhc3NDYWxsQ2hlY2syID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2NsYXNzQ2FsbENoZWNrXCIpKTtcblxudmFyIF9jcmVhdGVDbGFzczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vY3JlYXRlQ2xhc3NcIikpO1xuXG52YXIgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5cIikpO1xuXG52YXIgX2luaGVyaXRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9pbmhlcml0c1wiKSk7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbnZhciBfY2xhc3NuYW1lcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImNsYXNzbmFtZXNcIikpO1xuXG52YXIgX0J1dHRvbkJhc2UgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9CdXR0b25CYXNlXCIpKTtcblxudmFyIF9JY29uQnV0dG9uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vSWNvbkJ1dHRvblwiKSk7XG5cbnZhciBfd2l0aFN0eWxlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3N0eWxlcy93aXRoU3R5bGVzXCIpKTtcblxuLy8gQGluaGVyaXRlZENvbXBvbmVudCBCdXR0b25CYXNlXG52YXIgc3R5bGVzID0gZnVuY3Rpb24gc3R5bGVzKHRoZW1lKSB7XG4gIHZhciB0cmFuc2l0aW9uID0ge1xuICAgIGR1cmF0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5kdXJhdGlvbi5zaG9ydGVzdFxuICB9O1xuICByZXR1cm4ge1xuICAgIHJvb3Q6IHtcbiAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgIG1pbkhlaWdodDogdGhlbWUuc3BhY2luZy51bml0ICogNixcbiAgICAgIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZShbJ21pbi1oZWlnaHQnLCAnYmFja2dyb3VuZC1jb2xvciddLCB0cmFuc2l0aW9uKSxcbiAgICAgIHBhZGRpbmc6IFwiMCBcIi5jb25jYXQodGhlbWUuc3BhY2luZy51bml0ICogMywgXCJweCAwIFwiKS5jb25jYXQodGhlbWUuc3BhY2luZy51bml0ICogMywgXCJweFwiKSxcbiAgICAgICcmOmhvdmVyOm5vdCgkZGlzYWJsZWQpJzoge1xuICAgICAgICBjdXJzb3I6ICdwb2ludGVyJ1xuICAgICAgfSxcbiAgICAgICcmJGV4cGFuZGVkJzoge1xuICAgICAgICBtaW5IZWlnaHQ6IDY0XG4gICAgICB9LFxuICAgICAgJyYkZm9jdXNlZCc6IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLmdyZXlbMzAwXVxuICAgICAgfSxcbiAgICAgICcmJGRpc2FibGVkJzoge1xuICAgICAgICBvcGFjaXR5OiAwLjM4XG4gICAgICB9XG4gICAgfSxcbiAgICBleHBhbmRlZDoge30sXG4gICAgZm9jdXNlZDoge30sXG4gICAgZGlzYWJsZWQ6IHt9LFxuICAgIGNvbnRlbnQ6IHtcbiAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgIGZsZXhHcm93OiAxLFxuICAgICAgdHJhbnNpdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKFsnbWFyZ2luJ10sIHRyYW5zaXRpb24pLFxuICAgICAgbWFyZ2luOiAnMTJweCAwJyxcbiAgICAgICcmID4gOmxhc3QtY2hpbGQnOiB7XG4gICAgICAgIHBhZGRpbmdSaWdodDogdGhlbWUuc3BhY2luZy51bml0ICogNFxuICAgICAgfSxcbiAgICAgICcmJGV4cGFuZGVkJzoge1xuICAgICAgICBtYXJnaW46ICcyMHB4IDAnXG4gICAgICB9XG4gICAgfSxcbiAgICBleHBhbmRJY29uOiB7XG4gICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgIHRvcDogJzUwJScsXG4gICAgICByaWdodDogdGhlbWUuc3BhY2luZy51bml0LFxuICAgICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlWSgtNTAlKSByb3RhdGUoMGRlZyknLFxuICAgICAgdHJhbnNpdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCd0cmFuc2Zvcm0nLCB0cmFuc2l0aW9uKSxcbiAgICAgICcmOmhvdmVyJzoge1xuICAgICAgICAvLyBEaXNhYmxlIHRoZSBob3ZlciBlZmZlY3QgZm9yIHRoZSBJY29uQnV0dG9uLFxuICAgICAgICAvLyBiZWNhdXNlIGEgaG92ZXIgZWZmZWN0IHNob3VsZCBhcHBseSB0byB0aGUgZW50aXJlIEV4cGFuZCBidXR0b24gYW5kXG4gICAgICAgIC8vIG5vdCBvbmx5IHRvIHRoZSBJY29uQnV0dG9uLlxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICd0cmFuc3BhcmVudCdcbiAgICAgIH0sXG4gICAgICAnJiRleHBhbmRlZCc6IHtcbiAgICAgICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlWSgtNTAlKSByb3RhdGUoMTgwZGVnKSdcbiAgICAgIH1cbiAgICB9XG4gIH07XG59O1xuXG5leHBvcnRzLnN0eWxlcyA9IHN0eWxlcztcblxudmFyIEV4cGFuc2lvblBhbmVsU3VtbWFyeSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICAoMCwgX2luaGVyaXRzMi5kZWZhdWx0KShFeHBhbnNpb25QYW5lbFN1bW1hcnksIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIEV4cGFuc2lvblBhbmVsU3VtbWFyeSgpIHtcbiAgICB2YXIgX3JlZjtcblxuICAgIHZhciBfdGVtcCwgX3RoaXM7XG5cbiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMi5kZWZhdWx0KSh0aGlzLCBFeHBhbnNpb25QYW5lbFN1bW1hcnkpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiAoMCwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yLmRlZmF1bHQpKF90aGlzLCAoX3RlbXAgPSBfdGhpcyA9ICgwLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIuZGVmYXVsdCkodGhpcywgKF9yZWYgPSBFeHBhbnNpb25QYW5lbFN1bW1hcnkuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihFeHBhbnNpb25QYW5lbFN1bW1hcnkpKS5jYWxsLmFwcGx5KF9yZWYsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMuc3RhdGUgPSB7XG4gICAgICBmb2N1c2VkOiBmYWxzZVxuICAgIH0sIF90aGlzLmhhbmRsZUZvY3VzID0gZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICBmb2N1c2VkOiB0cnVlXG4gICAgICB9KTtcbiAgICB9LCBfdGhpcy5oYW5kbGVCbHVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICBmb2N1c2VkOiBmYWxzZVxuICAgICAgfSk7XG4gICAgfSwgX3RoaXMuaGFuZGxlQ2hhbmdlID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICBvbkNoYW5nZSA9IF90aGlzJHByb3BzLm9uQ2hhbmdlLFxuICAgICAgICAgIG9uQ2xpY2sgPSBfdGhpcyRwcm9wcy5vbkNsaWNrO1xuXG4gICAgICBpZiAob25DaGFuZ2UpIHtcbiAgICAgICAgb25DaGFuZ2UoZXZlbnQpO1xuICAgICAgfVxuXG4gICAgICBpZiAob25DbGljaykge1xuICAgICAgICBvbkNsaWNrKGV2ZW50KTtcbiAgICAgIH1cbiAgICB9LCBfdGVtcCkpO1xuICB9XG5cbiAgKDAsIF9jcmVhdGVDbGFzczIuZGVmYXVsdCkoRXhwYW5zaW9uUGFuZWxTdW1tYXJ5LCBbe1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF9jbGFzc05hbWVzO1xuXG4gICAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBjaGlsZHJlbiA9IF9wcm9wcy5jaGlsZHJlbixcbiAgICAgICAgICBjbGFzc2VzID0gX3Byb3BzLmNsYXNzZXMsXG4gICAgICAgICAgY2xhc3NOYW1lID0gX3Byb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgICBkaXNhYmxlZCA9IF9wcm9wcy5kaXNhYmxlZCxcbiAgICAgICAgICBleHBhbmRlZCA9IF9wcm9wcy5leHBhbmRlZCxcbiAgICAgICAgICBleHBhbmRJY29uID0gX3Byb3BzLmV4cGFuZEljb24sXG4gICAgICAgICAgb25DaGFuZ2UgPSBfcHJvcHMub25DaGFuZ2UsXG4gICAgICAgICAgb3RoZXIgPSAoMCwgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMi5kZWZhdWx0KShfcHJvcHMsIFtcImNoaWxkcmVuXCIsIFwiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcImRpc2FibGVkXCIsIFwiZXhwYW5kZWRcIiwgXCJleHBhbmRJY29uXCIsIFwib25DaGFuZ2VcIl0pO1xuICAgICAgdmFyIGZvY3VzZWQgPSB0aGlzLnN0YXRlLmZvY3VzZWQ7XG4gICAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfQnV0dG9uQmFzZS5kZWZhdWx0LCAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHtcbiAgICAgICAgZm9jdXNSaXBwbGU6IGZhbHNlLFxuICAgICAgICBkaXNhYmxlUmlwcGxlOiB0cnVlLFxuICAgICAgICBkaXNhYmxlZDogZGlzYWJsZWQsXG4gICAgICAgIGNvbXBvbmVudDogXCJkaXZcIixcbiAgICAgICAgXCJhcmlhLWV4cGFuZGVkXCI6IGV4cGFuZGVkLFxuICAgICAgICBjbGFzc05hbWU6ICgwLCBfY2xhc3NuYW1lcy5kZWZhdWx0KShjbGFzc2VzLnJvb3QsIChfY2xhc3NOYW1lcyA9IHt9LCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lcywgY2xhc3Nlcy5kaXNhYmxlZCwgZGlzYWJsZWQpLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lcywgY2xhc3Nlcy5leHBhbmRlZCwgZXhwYW5kZWQpLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lcywgY2xhc3Nlcy5mb2N1c2VkLCBmb2N1c2VkKSwgX2NsYXNzTmFtZXMpLCBjbGFzc05hbWUpXG4gICAgICB9LCBvdGhlciwge1xuICAgICAgICBvbkZvY3VzVmlzaWJsZTogdGhpcy5oYW5kbGVGb2N1cyxcbiAgICAgICAgb25CbHVyOiB0aGlzLmhhbmRsZUJsdXIsXG4gICAgICAgIG9uQ2xpY2s6IHRoaXMuaGFuZGxlQ2hhbmdlXG4gICAgICB9KSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICAgIGNsYXNzTmFtZTogKDAsIF9jbGFzc25hbWVzLmRlZmF1bHQpKGNsYXNzZXMuY29udGVudCwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoe30sIGNsYXNzZXMuZXhwYW5kZWQsIGV4cGFuZGVkKSlcbiAgICAgIH0sIGNoaWxkcmVuKSwgZXhwYW5kSWNvbiAmJiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9JY29uQnV0dG9uLmRlZmF1bHQsIHtcbiAgICAgICAgZGlzYWJsZWQ6IGRpc2FibGVkLFxuICAgICAgICBjbGFzc05hbWU6ICgwLCBfY2xhc3NuYW1lcy5kZWZhdWx0KShjbGFzc2VzLmV4cGFuZEljb24sICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKHt9LCBjbGFzc2VzLmV4cGFuZGVkLCBleHBhbmRlZCkpLFxuICAgICAgICBjb21wb25lbnQ6IFwiZGl2XCIsXG4gICAgICAgIHRhYkluZGV4OiAtMSxcbiAgICAgICAgXCJhcmlhLWhpZGRlblwiOiBcInRydWVcIlxuICAgICAgfSwgZXhwYW5kSWNvbikpO1xuICAgIH1cbiAgfV0pO1xuICByZXR1cm4gRXhwYW5zaW9uUGFuZWxTdW1tYXJ5O1xufShfcmVhY3QuZGVmYXVsdC5Db21wb25lbnQpO1xuXG5FeHBhbnNpb25QYW5lbFN1bW1hcnkucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGV4cGFuc2lvbiBwYW5lbCBzdW1tYXJ5LlxuICAgKi9cbiAgY2hpbGRyZW46IF9wcm9wVHlwZXMuZGVmYXVsdC5ub2RlLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2Nzcy1hcGkpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBzdW1tYXJ5IHdpbGwgYmUgZGlzcGxheWVkIGluIGEgZGlzYWJsZWQgc3RhdGUuXG4gICAqL1xuICBkaXNhYmxlZDogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICogSWYgYHRydWVgLCBleHBhbmRzIHRoZSBzdW1tYXJ5LCBvdGhlcndpc2UgY29sbGFwc2UgaXQuXG4gICAqL1xuICBleHBhbmRlZDogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSBpY29uIHRvIGRpc3BsYXkgYXMgdGhlIGV4cGFuZCBpbmRpY2F0b3IuXG4gICAqL1xuICBleHBhbmRJY29uOiBfcHJvcFR5cGVzLmRlZmF1bHQubm9kZSxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25DaGFuZ2U6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkNsaWNrOiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuY1xufSA6IHt9O1xuRXhwYW5zaW9uUGFuZWxTdW1tYXJ5LmRlZmF1bHRQcm9wcyA9IHtcbiAgZGlzYWJsZWQ6IGZhbHNlXG59O1xuRXhwYW5zaW9uUGFuZWxTdW1tYXJ5Lm11aU5hbWUgPSAnRXhwYW5zaW9uUGFuZWxTdW1tYXJ5JztcblxudmFyIF9kZWZhdWx0ID0gKDAsIF93aXRoU3R5bGVzLmRlZmF1bHQpKHN0eWxlcywge1xuICBuYW1lOiAnTXVpRXhwYW5zaW9uUGFuZWxTdW1tYXJ5J1xufSkoRXhwYW5zaW9uUGFuZWxTdW1tYXJ5KTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLnN0eWxlcyA9IHZvaWQgMDtcblxudmFyIF9leHRlbmRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9leHRlbmRzXCIpKTtcblxudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIikpO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xuXG52YXIgX2NsYXNzbmFtZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJjbGFzc25hbWVzXCIpKTtcblxudmFyIF93aXRoU3R5bGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vc3R5bGVzL3dpdGhTdHlsZXNcIikpO1xuXG52YXIgc3R5bGVzID0gZnVuY3Rpb24gc3R5bGVzKHRoZW1lKSB7XG4gIHJldHVybiB7XG4gICAgcm9vdDoge1xuICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgcGFkZGluZzogXCJcIi5jb25jYXQodGhlbWUuc3BhY2luZy51bml0LCBcInB4IFwiKS5jb25jYXQodGhlbWUuc3BhY2luZy51bml0ICogMywgXCJweCBcIikuY29uY2F0KHRoZW1lLnNwYWNpbmcudW5pdCAqIDMsIFwicHhcIilcbiAgICB9XG4gIH07XG59O1xuXG5leHBvcnRzLnN0eWxlcyA9IHN0eWxlcztcblxuZnVuY3Rpb24gRXhwYW5zaW9uUGFuZWxEZXRhaWxzKHByb3BzKSB7XG4gIHZhciBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBvdGhlciA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyLmRlZmF1bHQpKHByb3BzLCBbXCJjbGFzc2VzXCIsIFwiY2hpbGRyZW5cIiwgXCJjbGFzc05hbWVcIl0pO1xuICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImRpdlwiLCAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHtcbiAgICBjbGFzc05hbWU6ICgwLCBfY2xhc3NuYW1lcy5kZWZhdWx0KShjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSlcbiAgfSwgb3RoZXIpLCBjaGlsZHJlbik7XG59XG5cbkV4cGFuc2lvblBhbmVsRGV0YWlscy5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgZXhwYW5zaW9uIHBhbmVsIGRldGFpbHMuXG4gICAqL1xuICBjaGlsZHJlbjogX3Byb3BUeXBlcy5kZWZhdWx0Lm5vZGUuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MtYXBpKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmdcbn0gOiB7fTtcblxudmFyIF9kZWZhdWx0ID0gKDAsIF93aXRoU3R5bGVzLmRlZmF1bHQpKHN0eWxlcywge1xuICBuYW1lOiAnTXVpRXhwYW5zaW9uUGFuZWxEZXRhaWxzJ1xufSkoRXhwYW5zaW9uUGFuZWxEZXRhaWxzKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLnN0eWxlcyA9IHZvaWQgMDtcblxudmFyIF9leHRlbmRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9leHRlbmRzXCIpKTtcblxudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIikpO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xuXG52YXIgX2NsYXNzbmFtZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJjbGFzc25hbWVzXCIpKTtcblxudmFyIF93aXRoU3R5bGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vc3R5bGVzL3dpdGhTdHlsZXNcIikpO1xuXG52YXIgX3JlYWN0SGVscGVycyA9IHJlcXVpcmUoXCIuLi91dGlscy9yZWFjdEhlbHBlcnNcIik7XG5cbnJlcXVpcmUoXCIuLi9CdXR0b25cIik7XG5cbi8vIFNvIHdlIGRvbid0IGhhdmUgYW55IG92ZXJyaWRlIHByaW9yaXR5IGlzc3VlLlxudmFyIHN0eWxlcyA9IGZ1bmN0aW9uIHN0eWxlcyh0aGVtZSkge1xuICByZXR1cm4ge1xuICAgIHJvb3Q6IHtcbiAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAganVzdGlmeUNvbnRlbnQ6ICdmbGV4LWVuZCcsXG4gICAgICBwYWRkaW5nOiBcIlwiLmNvbmNhdCh0aGVtZS5zcGFjaW5nLnVuaXQgKiAyLCBcInB4IFwiKS5jb25jYXQodGhlbWUuc3BhY2luZy51bml0LCBcInB4XCIpXG4gICAgfSxcbiAgICBhY3Rpb246IHtcbiAgICAgIG1hcmdpbkxlZnQ6IHRoZW1lLnNwYWNpbmcudW5pdFxuICAgIH1cbiAgfTtcbn07XG5cbmV4cG9ydHMuc3R5bGVzID0gc3R5bGVzO1xuXG5mdW5jdGlvbiBFeHBhbnNpb25QYW5lbEFjdGlvbnMocHJvcHMpIHtcbiAgdmFyIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIG90aGVyID0gKDAsIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIuZGVmYXVsdCkocHJvcHMsIFtcImNoaWxkcmVuXCIsIFwiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiXSk7XG4gIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe1xuICAgIGNsYXNzTmFtZTogKDAsIF9jbGFzc25hbWVzLmRlZmF1bHQpKGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lKVxuICB9LCBvdGhlciksICgwLCBfcmVhY3RIZWxwZXJzLmNsb25lQ2hpbGRyZW5XaXRoQ2xhc3NOYW1lKShjaGlsZHJlbiwgY2xhc3Nlcy5hY3Rpb24pKTtcbn1cblxuRXhwYW5zaW9uUGFuZWxBY3Rpb25zLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogX3Byb3BUeXBlcy5kZWZhdWx0Lm5vZGUuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MtYXBpKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmdcbn0gOiB7fTtcblxudmFyIF9kZWZhdWx0ID0gKDAsIF93aXRoU3R5bGVzLmRlZmF1bHQpKHN0eWxlcywge1xuICBuYW1lOiAnTXVpRXhwYW5zaW9uUGFuZWxBY3Rpb25zJ1xufSkoRXhwYW5zaW9uUGFuZWxBY3Rpb25zKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLnN0eWxlcyA9IHZvaWQgMDtcblxudmFyIF9leHRlbmRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9leHRlbmRzXCIpKTtcblxudmFyIF9kZWZpbmVQcm9wZXJ0eTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vZGVmaW5lUHJvcGVydHlcIikpO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiKSk7XG5cbnZhciBfY2xhc3NDYWxsQ2hlY2syID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2NsYXNzQ2FsbENoZWNrXCIpKTtcblxudmFyIF9jcmVhdGVDbGFzczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vY3JlYXRlQ2xhc3NcIikpO1xuXG52YXIgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5cIikpO1xuXG52YXIgX2luaGVyaXRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9pbmhlcml0c1wiKSk7XG5cbnZhciBfb2JqZWN0U3ByZWFkMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9vYmplY3RTcHJlYWRcIikpO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xuXG52YXIgX2NsYXNzbmFtZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJjbGFzc25hbWVzXCIpKTtcblxudmFyIF9Db2xsYXBzZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL0NvbGxhcHNlXCIpKTtcblxudmFyIF9QYXBlciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL1BhcGVyXCIpKTtcblxudmFyIF93aXRoU3R5bGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vc3R5bGVzL3dpdGhTdHlsZXNcIikpO1xuXG52YXIgX3JlYWN0SGVscGVycyA9IHJlcXVpcmUoXCIuLi91dGlscy9yZWFjdEhlbHBlcnNcIik7XG5cbi8vIEBpbmhlcml0ZWRDb21wb25lbnQgUGFwZXJcbi8vIFdvcmthcm91bmQgaHR0cHM6Ly9naXRodWIuY29tL2pzZG9tL2pzZG9tL2lzc3Vlcy8yMDI2XG52YXIgZWRnZUZpeCA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIC9qc2RvbS8udGVzdCh3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudCkgPyB7fSA6IHtcbiAgLy8gRml4IGEgcmVuZGVyaW5nIGlzc3VlIG9uIEVkZ2VcbiAgJ0BzdXBwb3J0cyAoLW1zLWltZS1hbGlnbjogYXV0byknOiB7XG4gICAgYm9yZGVyQm90dG9tTGVmdFJhZGl1czogMCxcbiAgICBib3JkZXJCb3R0b21SaWdodFJhZGl1czogMFxuICB9XG59O1xuXG52YXIgc3R5bGVzID0gZnVuY3Rpb24gc3R5bGVzKHRoZW1lKSB7XG4gIHZhciB0cmFuc2l0aW9uID0ge1xuICAgIGR1cmF0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5kdXJhdGlvbi5zaG9ydGVzdFxuICB9O1xuICByZXR1cm4ge1xuICAgIHJvb3Q6IHtcbiAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgdHJhbnNpdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKFsnbWFyZ2luJ10sIHRyYW5zaXRpb24pLFxuICAgICAgJyY6YmVmb3JlJzoge1xuICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgbGVmdDogMCxcbiAgICAgICAgdG9wOiAtMSxcbiAgICAgICAgcmlnaHQ6IDAsXG4gICAgICAgIGhlaWdodDogMSxcbiAgICAgICAgY29udGVudDogJ1wiXCInLFxuICAgICAgICBvcGFjaXR5OiAxLFxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUuZGl2aWRlcixcbiAgICAgICAgdHJhbnNpdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKFsnb3BhY2l0eScsICdiYWNrZ3JvdW5kLWNvbG9yJ10sIHRyYW5zaXRpb24pXG4gICAgICB9LFxuICAgICAgJyY6Zmlyc3QtY2hpbGQnOiB7XG4gICAgICAgIGJvcmRlclRvcExlZnRSYWRpdXM6IDIsXG4gICAgICAgIGJvcmRlclRvcFJpZ2h0UmFkaXVzOiAyLFxuICAgICAgICAnJjpiZWZvcmUnOiB7XG4gICAgICAgICAgZGlzcGxheTogJ25vbmUnXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICAnJjpsYXN0LWNoaWxkJzogKDAsIF9vYmplY3RTcHJlYWQyLmRlZmF1bHQpKHtcbiAgICAgICAgYm9yZGVyQm90dG9tTGVmdFJhZGl1czogMixcbiAgICAgICAgYm9yZGVyQm90dG9tUmlnaHRSYWRpdXM6IDJcbiAgICAgIH0sIGVkZ2VGaXgpLFxuICAgICAgJyYkZXhwYW5kZWQgKyAmJzoge1xuICAgICAgICAnJjpiZWZvcmUnOiB7XG4gICAgICAgICAgZGlzcGxheTogJ25vbmUnXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIGV4cGFuZGVkOiB7XG4gICAgICBtYXJnaW46IFwiXCIuY29uY2F0KHRoZW1lLnNwYWNpbmcudW5pdCAqIDIsIFwicHggMFwiKSxcbiAgICAgICcmOmZpcnN0LWNoaWxkJzoge1xuICAgICAgICBtYXJnaW5Ub3A6IDBcbiAgICAgIH0sXG4gICAgICAnJjpsYXN0LWNoaWxkJzoge1xuICAgICAgICBtYXJnaW5Cb3R0b206IDBcbiAgICAgIH0sXG4gICAgICAnJjpiZWZvcmUnOiB7XG4gICAgICAgIG9wYWNpdHk6IDBcbiAgICAgIH1cbiAgICB9LFxuICAgIGRpc2FibGVkOiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUuYWN0aW9uLmRpc2FibGVkQmFja2dyb3VuZFxuICAgIH1cbiAgfTtcbn07XG5cbmV4cG9ydHMuc3R5bGVzID0gc3R5bGVzO1xuXG52YXIgRXhwYW5zaW9uUGFuZWwgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgKDAsIF9pbmhlcml0czIuZGVmYXVsdCkoRXhwYW5zaW9uUGFuZWwsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIEV4cGFuc2lvblBhbmVsKHByb3BzKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgKDAsIF9jbGFzc0NhbGxDaGVjazIuZGVmYXVsdCkodGhpcywgRXhwYW5zaW9uUGFuZWwpO1xuICAgIF90aGlzID0gKDAsIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMi5kZWZhdWx0KSh0aGlzLCAoRXhwYW5zaW9uUGFuZWwuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihFeHBhbnNpb25QYW5lbCkpLmNhbGwodGhpcywgcHJvcHMpKTtcbiAgICBfdGhpcy5zdGF0ZSA9IHt9O1xuICAgIF90aGlzLmlzQ29udHJvbGxlZCA9IG51bGw7XG5cbiAgICBfdGhpcy5oYW5kbGVDaGFuZ2UgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIHZhciBleHBhbmRlZCA9IF90aGlzLmlzQ29udHJvbGxlZCA/IF90aGlzLnByb3BzLmV4cGFuZGVkIDogX3RoaXMuc3RhdGUuZXhwYW5kZWQ7XG5cbiAgICAgIGlmICghX3RoaXMuaXNDb250cm9sbGVkKSB7XG4gICAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICBleHBhbmRlZDogIWV4cGFuZGVkXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBpZiAoX3RoaXMucHJvcHMub25DaGFuZ2UpIHtcbiAgICAgICAgX3RoaXMucHJvcHMub25DaGFuZ2UoZXZlbnQsICFleHBhbmRlZCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF90aGlzLmlzQ29udHJvbGxlZCA9IHByb3BzLmV4cGFuZGVkICE9IG51bGw7XG5cbiAgICBpZiAoIV90aGlzLmlzQ29udHJvbGxlZCkge1xuICAgICAgLy8gbm90IGNvbnRyb2xsZWQsIHVzZSBpbnRlcm5hbCBzdGF0ZVxuICAgICAgX3RoaXMuc3RhdGUuZXhwYW5kZWQgPSBwcm9wcy5kZWZhdWx0RXhwYW5kZWQgIT09IHVuZGVmaW5lZCA/IHByb3BzLmRlZmF1bHRFeHBhbmRlZCA6IGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gICgwLCBfY3JlYXRlQ2xhc3MyLmRlZmF1bHQpKEV4cGFuc2lvblBhbmVsLCBbe1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF9jbGFzc05hbWVzLFxuICAgICAgICAgIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGNoaWxkcmVuUHJvcCA9IF9wcm9wcy5jaGlsZHJlbixcbiAgICAgICAgICBjbGFzc2VzID0gX3Byb3BzLmNsYXNzZXMsXG4gICAgICAgICAgY2xhc3NOYW1lUHJvcCA9IF9wcm9wcy5jbGFzc05hbWUsXG4gICAgICAgICAgQ29sbGFwc2VQcm9wc1Byb3AgPSBfcHJvcHMuQ29sbGFwc2VQcm9wcyxcbiAgICAgICAgICBkZWZhdWx0RXhwYW5kZWQgPSBfcHJvcHMuZGVmYXVsdEV4cGFuZGVkLFxuICAgICAgICAgIGRpc2FibGVkID0gX3Byb3BzLmRpc2FibGVkLFxuICAgICAgICAgIGV4cGFuZGVkUHJvcCA9IF9wcm9wcy5leHBhbmRlZCxcbiAgICAgICAgICBvbkNoYW5nZSA9IF9wcm9wcy5vbkNoYW5nZSxcbiAgICAgICAgICBvdGhlciA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyLmRlZmF1bHQpKF9wcm9wcywgW1wiY2hpbGRyZW5cIiwgXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwiQ29sbGFwc2VQcm9wc1wiLCBcImRlZmF1bHRFeHBhbmRlZFwiLCBcImRpc2FibGVkXCIsIFwiZXhwYW5kZWRcIiwgXCJvbkNoYW5nZVwiXSk7XG4gICAgICB2YXIgZXhwYW5kZWQgPSB0aGlzLmlzQ29udHJvbGxlZCA/IGV4cGFuZGVkUHJvcCA6IHRoaXMuc3RhdGUuZXhwYW5kZWQ7XG4gICAgICB2YXIgY2xhc3NOYW1lID0gKDAsIF9jbGFzc25hbWVzLmRlZmF1bHQpKGNsYXNzZXMucm9vdCwgKF9jbGFzc05hbWVzID0ge30sICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKF9jbGFzc05hbWVzLCBjbGFzc2VzLmV4cGFuZGVkLCBleHBhbmRlZCksICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKF9jbGFzc05hbWVzLCBjbGFzc2VzLmRpc2FibGVkLCBkaXNhYmxlZCksIF9jbGFzc05hbWVzKSwgY2xhc3NOYW1lUHJvcCk7XG4gICAgICB2YXIgc3VtbWFyeSA9IG51bGw7XG5cbiAgICAgIHZhciBjaGlsZHJlbiA9IF9yZWFjdC5kZWZhdWx0LkNoaWxkcmVuLm1hcChjaGlsZHJlblByb3AsIGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICBpZiAoIV9yZWFjdC5kZWZhdWx0LmlzVmFsaWRFbGVtZW50KGNoaWxkKSkge1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCgwLCBfcmVhY3RIZWxwZXJzLmlzTXVpRWxlbWVudCkoY2hpbGQsIFsnRXhwYW5zaW9uUGFuZWxTdW1tYXJ5J10pKSB7XG4gICAgICAgICAgc3VtbWFyeSA9IF9yZWFjdC5kZWZhdWx0LmNsb25lRWxlbWVudChjaGlsZCwge1xuICAgICAgICAgICAgZGlzYWJsZWQ6IGRpc2FibGVkLFxuICAgICAgICAgICAgZXhwYW5kZWQ6IGV4cGFuZGVkLFxuICAgICAgICAgICAgb25DaGFuZ2U6IF90aGlzMi5oYW5kbGVDaGFuZ2VcbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjaGlsZDtcbiAgICAgIH0pO1xuXG4gICAgICB2YXIgQ29sbGFwc2VQcm9wcyA9ICFleHBhbmRlZCA/IHtcbiAgICAgICAgJ2FyaWEtaGlkZGVuJzogJ3RydWUnXG4gICAgICB9IDogbnVsbDtcbiAgICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9QYXBlci5kZWZhdWx0LCAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHtcbiAgICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWUsXG4gICAgICAgIGVsZXZhdGlvbjogMSxcbiAgICAgICAgc3F1YXJlOiB0cnVlXG4gICAgICB9LCBvdGhlciksIHN1bW1hcnksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX0NvbGxhcHNlLmRlZmF1bHQsICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe1xuICAgICAgICBcImluXCI6IGV4cGFuZGVkLFxuICAgICAgICB0aW1lb3V0OiBcImF1dG9cIlxuICAgICAgfSwgQ29sbGFwc2VQcm9wcywgQ29sbGFwc2VQcm9wc1Byb3ApLCBjaGlsZHJlbikpO1xuICAgIH1cbiAgfV0pO1xuICByZXR1cm4gRXhwYW5zaW9uUGFuZWw7XG59KF9yZWFjdC5kZWZhdWx0LkNvbXBvbmVudCk7XG5cbkV4cGFuc2lvblBhbmVsLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBleHBhbnNpb24gcGFuZWwuXG4gICAqL1xuICBjaGlsZHJlbjogX3Byb3BUeXBlcy5kZWZhdWx0Lm5vZGUuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MtYXBpKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFByb3BlcnRpZXMgYXBwbGllZCB0byB0aGUgYENvbGxhcHNlYCBlbGVtZW50LlxuICAgKi9cbiAgQ29sbGFwc2VQcm9wczogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCBleHBhbmRzIHRoZSBwYW5lbCBieSBkZWZhdWx0LlxuICAgKi9cbiAgZGVmYXVsdEV4cGFuZGVkOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgcGFuZWwgd2lsbCBiZSBkaXNwbGF5ZWQgaW4gYSBkaXNhYmxlZCBzdGF0ZS5cbiAgICovXG4gIGRpc2FibGVkOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCBleHBhbmRzIHRoZSBwYW5lbCwgb3RoZXJ3aXNlIGNvbGxhcHNlIGl0LlxuICAgKiBTZXR0aW5nIHRoaXMgcHJvcCBlbmFibGVzIGNvbnRyb2wgb3ZlciB0aGUgcGFuZWwuXG4gICAqL1xuICBleHBhbmRlZDogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIGV4cGFuZC9jb2xsYXBzZSBzdGF0ZSBpcyBjaGFuZ2VkLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gZXZlbnQgVGhlIGV2ZW50IHNvdXJjZSBvZiB0aGUgY2FsbGJhY2tcbiAgICogQHBhcmFtIHtib29sZWFufSBleHBhbmRlZCBUaGUgYGV4cGFuZGVkYCBzdGF0ZSBvZiB0aGUgcGFuZWxcbiAgICovXG4gIG9uQ2hhbmdlOiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuY1xufSA6IHt9O1xuRXhwYW5zaW9uUGFuZWwuZGVmYXVsdFByb3BzID0ge1xuICBkZWZhdWx0RXhwYW5kZWQ6IGZhbHNlLFxuICBkaXNhYmxlZDogZmFsc2Vcbn07XG5cbnZhciBfZGVmYXVsdCA9ICgwLCBfd2l0aFN0eWxlcy5kZWZhdWx0KShzdHlsZXMsIHtcbiAgbmFtZTogJ011aUV4cGFuc2lvblBhbmVsJ1xufSkoRXhwYW5zaW9uUGFuZWwpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuc2V0VHJhbnNsYXRlVmFsdWUgPSBzZXRUcmFuc2xhdGVWYWx1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9leHRlbmRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9leHRlbmRzXCIpKTtcblxudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIikpO1xuXG52YXIgX29iamVjdFNwcmVhZDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vb2JqZWN0U3ByZWFkXCIpKTtcblxudmFyIF9jbGFzc0NhbGxDaGVjazIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vY2xhc3NDYWxsQ2hlY2tcIikpO1xuXG52YXIgX2NyZWF0ZUNsYXNzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9jcmVhdGVDbGFzc1wiKSk7XG5cbnZhciBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vcG9zc2libGVDb25zdHJ1Y3RvclJldHVyblwiKSk7XG5cbnZhciBfaW5oZXJpdHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2luaGVyaXRzXCIpKTtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKTtcblxudmFyIF9yZWFjdERvbSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0LWRvbVwiKSk7XG5cbnZhciBfcmVhY3RFdmVudExpc3RlbmVyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3QtZXZlbnQtbGlzdGVuZXJcIikpO1xuXG52YXIgX2RlYm91bmNlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiZGVib3VuY2VcIikpO1xuXG52YXIgX1RyYW5zaXRpb24gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdC10cmFuc2l0aW9uLWdyb3VwL1RyYW5zaXRpb25cIikpO1xuXG52YXIgX293bmVyV2luZG93ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vdXRpbHMvb3duZXJXaW5kb3dcIikpO1xuXG52YXIgX3dpdGhUaGVtZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3N0eWxlcy93aXRoVGhlbWVcIikpO1xuXG52YXIgX3RyYW5zaXRpb25zID0gcmVxdWlyZShcIi4uL3N0eWxlcy90cmFuc2l0aW9uc1wiKTtcblxudmFyIF91dGlscyA9IHJlcXVpcmUoXCIuLi90cmFuc2l0aW9ucy91dGlsc1wiKTtcblxuLy8gQGluaGVyaXRlZENvbXBvbmVudCBUcmFuc2l0aW9uXG52YXIgR1VUVEVSID0gMjQ7IC8vIFRyYW5zbGF0ZSB0aGUgbm9kZSBzbyBoZSBjYW4ndCBiZSBzZWVuIG9uIHRoZSBzY3JlZW4uXG4vLyBMYXRlciwgd2UgZ29ubmEgdHJhbnNsYXRlIGJhY2sgdGhlIG5vZGUgdG8gaGlzIG9yaWdpbmFsIGxvY2F0aW9uXG4vLyB3aXRoIGB0cmFuc2xhdGUzZCgwLCAwLCAwKWAuYFxuXG5mdW5jdGlvbiBnZXRUcmFuc2xhdGVWYWx1ZShwcm9wcywgbm9kZSkge1xuICB2YXIgZGlyZWN0aW9uID0gcHJvcHMuZGlyZWN0aW9uO1xuICB2YXIgcmVjdCA9IG5vZGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gIHZhciB0cmFuc2Zvcm07XG5cbiAgaWYgKG5vZGUuZmFrZVRyYW5zZm9ybSkge1xuICAgIHRyYW5zZm9ybSA9IG5vZGUuZmFrZVRyYW5zZm9ybTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgY29tcHV0ZWRTdHlsZSA9ICgwLCBfb3duZXJXaW5kb3cuZGVmYXVsdCkobm9kZSkuZ2V0Q29tcHV0ZWRTdHlsZShub2RlKTtcbiAgICB0cmFuc2Zvcm0gPSBjb21wdXRlZFN0eWxlLmdldFByb3BlcnR5VmFsdWUoJy13ZWJraXQtdHJhbnNmb3JtJykgfHwgY29tcHV0ZWRTdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKCd0cmFuc2Zvcm0nKTtcbiAgfVxuXG4gIHZhciBvZmZzZXRYID0gMDtcbiAgdmFyIG9mZnNldFkgPSAwO1xuXG4gIGlmICh0cmFuc2Zvcm0gJiYgdHJhbnNmb3JtICE9PSAnbm9uZScgJiYgdHlwZW9mIHRyYW5zZm9ybSA9PT0gJ3N0cmluZycpIHtcbiAgICB2YXIgdHJhbnNmb3JtVmFsdWVzID0gdHJhbnNmb3JtLnNwbGl0KCcoJylbMV0uc3BsaXQoJyknKVswXS5zcGxpdCgnLCcpO1xuICAgIG9mZnNldFggPSBwYXJzZUludCh0cmFuc2Zvcm1WYWx1ZXNbNF0sIDEwKTtcbiAgICBvZmZzZXRZID0gcGFyc2VJbnQodHJhbnNmb3JtVmFsdWVzWzVdLCAxMCk7XG4gIH1cblxuICBpZiAoZGlyZWN0aW9uID09PSAnbGVmdCcpIHtcbiAgICByZXR1cm4gXCJ0cmFuc2xhdGVYKDEwMHZ3KSB0cmFuc2xhdGVYKC1cIi5jb25jYXQocmVjdC5sZWZ0IC0gb2Zmc2V0WCwgXCJweClcIik7XG4gIH0gZWxzZSBpZiAoZGlyZWN0aW9uID09PSAncmlnaHQnKSB7XG4gICAgcmV0dXJuIFwidHJhbnNsYXRlWCgtXCIuY29uY2F0KHJlY3QubGVmdCArIHJlY3Qud2lkdGggKyBHVVRURVIgLSBvZmZzZXRYLCBcInB4KVwiKTtcbiAgfSBlbHNlIGlmIChkaXJlY3Rpb24gPT09ICd1cCcpIHtcbiAgICByZXR1cm4gXCJ0cmFuc2xhdGVZKDEwMHZoKSB0cmFuc2xhdGVZKC1cIi5jb25jYXQocmVjdC50b3AgLSBvZmZzZXRZLCBcInB4KVwiKTtcbiAgfSAvLyBkaXJlY3Rpb24gPT09ICdkb3duJ1xuXG5cbiAgcmV0dXJuIFwidHJhbnNsYXRlWSgtXCIuY29uY2F0KHJlY3QudG9wICsgcmVjdC5oZWlnaHQgKyBHVVRURVIgLSBvZmZzZXRZLCBcInB4KVwiKTtcbn1cblxuZnVuY3Rpb24gc2V0VHJhbnNsYXRlVmFsdWUocHJvcHMsIG5vZGUpIHtcbiAgdmFyIHRyYW5zZm9ybSA9IGdldFRyYW5zbGF0ZVZhbHVlKHByb3BzLCBub2RlKTtcblxuICBpZiAodHJhbnNmb3JtKSB7XG4gICAgbm9kZS5zdHlsZS53ZWJraXRUcmFuc2Zvcm0gPSB0cmFuc2Zvcm07XG4gICAgbm9kZS5zdHlsZS50cmFuc2Zvcm0gPSB0cmFuc2Zvcm07XG4gIH1cbn1cbi8qKlxuICogVGhlIFNsaWRlIHRyYW5zaXRpb24gaXMgdXNlZCBieSB0aGUgW1NuYWNrYmFyXSgvZGVtb3Mvc25hY2tiYXJzKSBjb21wb25lbnQuXG4gKiBJdCB1c2VzIFtyZWFjdC10cmFuc2l0aW9uLWdyb3VwXShodHRwczovL2dpdGh1Yi5jb20vcmVhY3Rqcy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwKSBpbnRlcm5hbGx5LlxuICovXG5cblxudmFyIFNsaWRlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gICgwLCBfaW5oZXJpdHMyLmRlZmF1bHQpKFNsaWRlLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBTbGlkZSgpIHtcbiAgICB2YXIgX3JlZjtcblxuICAgIHZhciBfdGVtcCwgX3RoaXM7XG5cbiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMi5kZWZhdWx0KSh0aGlzLCBTbGlkZSk7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuICgwLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIuZGVmYXVsdCkoX3RoaXMsIChfdGVtcCA9IF90aGlzID0gKDAsIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMi5kZWZhdWx0KSh0aGlzLCAoX3JlZiA9IFNsaWRlLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoU2xpZGUpKS5jYWxsLmFwcGx5KF9yZWYsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMubW91bnRlZCA9IGZhbHNlLCBfdGhpcy50cmFuc2l0aW9uID0gbnVsbCwgX3RoaXMuaGFuZGxlUmVzaXplID0gKDAsIF9kZWJvdW5jZS5kZWZhdWx0KShmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBTa2lwIGNvbmZpZ3VyYXRpb24gd2hlcmUgdGhlIHBvc2l0aW9uIGlzIHNjcmVlbiBzaXplIGludmFyaWFudC5cbiAgICAgIGlmIChfdGhpcy5wcm9wcy5pbiB8fCBfdGhpcy5wcm9wcy5kaXJlY3Rpb24gPT09ICdkb3duJyB8fCBfdGhpcy5wcm9wcy5kaXJlY3Rpb24gPT09ICdyaWdodCcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgbm9kZSA9IF9yZWFjdERvbS5kZWZhdWx0LmZpbmRET01Ob2RlKF90aGlzLnRyYW5zaXRpb24pO1xuXG4gICAgICBpZiAobm9kZSkge1xuICAgICAgICBzZXRUcmFuc2xhdGVWYWx1ZShfdGhpcy5wcm9wcywgbm9kZSk7XG4gICAgICB9XG4gICAgfSwgMTY2KSwgX3RoaXMuaGFuZGxlRW50ZXIgPSBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgc2V0VHJhbnNsYXRlVmFsdWUoX3RoaXMucHJvcHMsIG5vZGUpO1xuICAgICAgKDAsIF91dGlscy5yZWZsb3cpKG5vZGUpO1xuXG4gICAgICBpZiAoX3RoaXMucHJvcHMub25FbnRlcikge1xuICAgICAgICBfdGhpcy5wcm9wcy5vbkVudGVyKG5vZGUpO1xuICAgICAgfVxuICAgIH0sIF90aGlzLmhhbmRsZUVudGVyaW5nID0gZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgIHZhciB0aGVtZSA9IF90aGlzLnByb3BzLnRoZW1lO1xuICAgICAgdmFyIHRyYW5zaXRpb25Qcm9wcyA9ICgwLCBfdXRpbHMuZ2V0VHJhbnNpdGlvblByb3BzKShfdGhpcy5wcm9wcywge1xuICAgICAgICBtb2RlOiAnZW50ZXInXG4gICAgICB9KTtcbiAgICAgIG5vZGUuc3R5bGUud2Via2l0VHJhbnNpdGlvbiA9IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgnLXdlYmtpdC10cmFuc2Zvcm0nLCAoMCwgX29iamVjdFNwcmVhZDIuZGVmYXVsdCkoe30sIHRyYW5zaXRpb25Qcm9wcywge1xuICAgICAgICBlYXNpbmc6IHRoZW1lLnRyYW5zaXRpb25zLmVhc2luZy5lYXNlT3V0XG4gICAgICB9KSk7XG4gICAgICBub2RlLnN0eWxlLnRyYW5zaXRpb24gPSB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ3RyYW5zZm9ybScsICgwLCBfb2JqZWN0U3ByZWFkMi5kZWZhdWx0KSh7fSwgdHJhbnNpdGlvblByb3BzLCB7XG4gICAgICAgIGVhc2luZzogdGhlbWUudHJhbnNpdGlvbnMuZWFzaW5nLmVhc2VPdXRcbiAgICAgIH0pKTtcbiAgICAgIG5vZGUuc3R5bGUud2Via2l0VHJhbnNmb3JtID0gJ3RyYW5zbGF0ZSgwLCAwKSc7XG4gICAgICBub2RlLnN0eWxlLnRyYW5zZm9ybSA9ICd0cmFuc2xhdGUoMCwgMCknO1xuXG4gICAgICBpZiAoX3RoaXMucHJvcHMub25FbnRlcmluZykge1xuICAgICAgICBfdGhpcy5wcm9wcy5vbkVudGVyaW5nKG5vZGUpO1xuICAgICAgfVxuICAgIH0sIF90aGlzLmhhbmRsZUV4aXQgPSBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgdmFyIHRoZW1lID0gX3RoaXMucHJvcHMudGhlbWU7XG4gICAgICB2YXIgdHJhbnNpdGlvblByb3BzID0gKDAsIF91dGlscy5nZXRUcmFuc2l0aW9uUHJvcHMpKF90aGlzLnByb3BzLCB7XG4gICAgICAgIG1vZGU6ICdleGl0J1xuICAgICAgfSk7XG4gICAgICBub2RlLnN0eWxlLndlYmtpdFRyYW5zaXRpb24gPSB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJy13ZWJraXQtdHJhbnNmb3JtJywgKDAsIF9vYmplY3RTcHJlYWQyLmRlZmF1bHQpKHt9LCB0cmFuc2l0aW9uUHJvcHMsIHtcbiAgICAgICAgZWFzaW5nOiB0aGVtZS50cmFuc2l0aW9ucy5lYXNpbmcuc2hhcnBcbiAgICAgIH0pKTtcbiAgICAgIG5vZGUuc3R5bGUudHJhbnNpdGlvbiA9IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgndHJhbnNmb3JtJywgKDAsIF9vYmplY3RTcHJlYWQyLmRlZmF1bHQpKHt9LCB0cmFuc2l0aW9uUHJvcHMsIHtcbiAgICAgICAgZWFzaW5nOiB0aGVtZS50cmFuc2l0aW9ucy5lYXNpbmcuc2hhcnBcbiAgICAgIH0pKTtcbiAgICAgIHNldFRyYW5zbGF0ZVZhbHVlKF90aGlzLnByb3BzLCBub2RlKTtcblxuICAgICAgaWYgKF90aGlzLnByb3BzLm9uRXhpdCkge1xuICAgICAgICBfdGhpcy5wcm9wcy5vbkV4aXQobm9kZSk7XG4gICAgICB9XG4gICAgfSwgX3RoaXMuaGFuZGxlRXhpdGVkID0gZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgIC8vIE5vIG5lZWQgZm9yIHRyYW5zaXRpb25zIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBoaWRkZW5cbiAgICAgIG5vZGUuc3R5bGUud2Via2l0VHJhbnNpdGlvbiA9ICcnO1xuICAgICAgbm9kZS5zdHlsZS50cmFuc2l0aW9uID0gJyc7XG5cbiAgICAgIGlmIChfdGhpcy5wcm9wcy5vbkV4aXRlZCkge1xuICAgICAgICBfdGhpcy5wcm9wcy5vbkV4aXRlZChub2RlKTtcbiAgICAgIH1cbiAgICB9LCBfdGVtcCkpO1xuICB9XG5cbiAgKDAsIF9jcmVhdGVDbGFzczIuZGVmYXVsdCkoU2xpZGUsIFt7XG4gICAga2V5OiBcImNvbXBvbmVudERpZE1vdW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgLy8gc3RhdGUubW91bnRlZCBoYW5kbGUgU1NSLCBvbmNlIHRoZSBjb21wb25lbnQgaXMgbW91bnRlZCwgd2UgbmVlZFxuICAgICAgLy8gdG8gcHJvcGVybHkgaGlkZSBpdC5cbiAgICAgIGlmICghdGhpcy5wcm9wcy5pbikge1xuICAgICAgICAvLyBXZSBuZWVkIHRvIHNldCBpbml0aWFsIHRyYW5zbGF0ZSB2YWx1ZXMgb2YgdHJhbnNpdGlvbiBlbGVtZW50XG4gICAgICAgIC8vIG90aGVyd2lzZSBjb21wb25lbnQgd2lsbCBiZSBzaG93biB3aGVuIGluPWZhbHNlLlxuICAgICAgICB0aGlzLnVwZGF0ZVBvc2l0aW9uKCk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMubW91bnRlZCA9IHRydWU7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImNvbXBvbmVudERpZFVwZGF0ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzKSB7XG4gICAgICBpZiAocHJldlByb3BzLmRpcmVjdGlvbiAhPT0gdGhpcy5wcm9wcy5kaXJlY3Rpb24gJiYgIXRoaXMucHJvcHMuaW4pIHtcbiAgICAgICAgLy8gV2UgbmVlZCB0byB1cGRhdGUgdGhlIHBvc2l0aW9uIG9mIHRoZSBkcmF3ZXIgd2hlbiB0aGUgZGlyZWN0aW9uIGNoYW5nZSBhbmRcbiAgICAgICAgLy8gd2hlbiBpdCdzIGhpZGRlbi5cbiAgICAgICAgdGhpcy51cGRhdGVQb3NpdGlvbigpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJjb21wb25lbnRXaWxsVW5tb3VudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgIHRoaXMuaGFuZGxlUmVzaXplLmNsZWFyKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInVwZGF0ZVBvc2l0aW9uXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZVBvc2l0aW9uKCkge1xuICAgICAgdmFyIG5vZGUgPSBfcmVhY3REb20uZGVmYXVsdC5maW5kRE9NTm9kZSh0aGlzLnRyYW5zaXRpb24pO1xuXG4gICAgICBpZiAobm9kZSkge1xuICAgICAgICBub2RlLnN0eWxlLnZpc2liaWxpdHkgPSAnaW5oZXJpdCc7XG4gICAgICAgIHNldFRyYW5zbGF0ZVZhbHVlKHRoaXMucHJvcHMsIG5vZGUpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGNoaWxkcmVuID0gX3Byb3BzLmNoaWxkcmVuLFxuICAgICAgICAgIG9uRW50ZXIgPSBfcHJvcHMub25FbnRlcixcbiAgICAgICAgICBvbkVudGVyaW5nID0gX3Byb3BzLm9uRW50ZXJpbmcsXG4gICAgICAgICAgb25FeGl0ID0gX3Byb3BzLm9uRXhpdCxcbiAgICAgICAgICBvbkV4aXRlZCA9IF9wcm9wcy5vbkV4aXRlZCxcbiAgICAgICAgICBzdHlsZVByb3AgPSBfcHJvcHMuc3R5bGUsXG4gICAgICAgICAgdGhlbWUgPSBfcHJvcHMudGhlbWUsXG4gICAgICAgICAgb3RoZXIgPSAoMCwgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMi5kZWZhdWx0KShfcHJvcHMsIFtcImNoaWxkcmVuXCIsIFwib25FbnRlclwiLCBcIm9uRW50ZXJpbmdcIiwgXCJvbkV4aXRcIiwgXCJvbkV4aXRlZFwiLCBcInN0eWxlXCIsIFwidGhlbWVcIl0pO1xuICAgICAgdmFyIHN0eWxlID0ge307IC8vIFdlIHVzZSB0aGlzIHN0YXRlIHRvIGhhbmRsZSB0aGUgc2VydmVyLXNpZGUgcmVuZGVyaW5nLlxuICAgICAgLy8gV2UgZG9uJ3Qga25vdyB0aGUgd2lkdGggb2YgdGhlIGNoaWxkcmVuIGFoZWFkIG9mIHRpbWUuXG4gICAgICAvLyBXZSBuZWVkIHRvIHJlbmRlciBpdC5cblxuICAgICAgaWYgKCF0aGlzLnByb3BzLmluICYmICF0aGlzLm1vdW50ZWQpIHtcbiAgICAgICAgc3R5bGUudmlzaWJpbGl0eSA9ICdoaWRkZW4nO1xuICAgICAgfVxuXG4gICAgICBzdHlsZSA9ICgwLCBfb2JqZWN0U3ByZWFkMi5kZWZhdWx0KSh7fSwgc3R5bGUsIHN0eWxlUHJvcCwgX3JlYWN0LmRlZmF1bHQuaXNWYWxpZEVsZW1lbnQoY2hpbGRyZW4pID8gY2hpbGRyZW4ucHJvcHMuc3R5bGUgOiB7fSk7XG4gICAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3RFdmVudExpc3RlbmVyLmRlZmF1bHQsIHtcbiAgICAgICAgdGFyZ2V0OiBcIndpbmRvd1wiLFxuICAgICAgICBvblJlc2l6ZTogdGhpcy5oYW5kbGVSZXNpemVcbiAgICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX1RyYW5zaXRpb24uZGVmYXVsdCwgKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7XG4gICAgICAgIG9uRW50ZXI6IHRoaXMuaGFuZGxlRW50ZXIsXG4gICAgICAgIG9uRW50ZXJpbmc6IHRoaXMuaGFuZGxlRW50ZXJpbmcsXG4gICAgICAgIG9uRXhpdDogdGhpcy5oYW5kbGVFeGl0LFxuICAgICAgICBvbkV4aXRlZDogdGhpcy5oYW5kbGVFeGl0ZWQsXG4gICAgICAgIGFwcGVhcjogdHJ1ZSxcbiAgICAgICAgc3R5bGU6IHN0eWxlLFxuICAgICAgICByZWY6IGZ1bmN0aW9uIHJlZihub2RlKSB7XG4gICAgICAgICAgX3RoaXMyLnRyYW5zaXRpb24gPSBub2RlO1xuICAgICAgICB9XG4gICAgICB9LCBvdGhlciksIGNoaWxkcmVuKSk7XG4gICAgfVxuICB9XSk7XG4gIHJldHVybiBTbGlkZTtcbn0oX3JlYWN0LmRlZmF1bHQuQ29tcG9uZW50KTtcblxuU2xpZGUucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKipcbiAgICogQSBzaW5nbGUgY2hpbGQgY29udGVudCBlbGVtZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMuZGVmYXVsdC5lbGVtZW50LCBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuY10pLFxuXG4gIC8qKlxuICAgKiBEaXJlY3Rpb24gdGhlIGNoaWxkIG5vZGUgd2lsbCBlbnRlciBmcm9tLlxuICAgKi9cbiAgZGlyZWN0aW9uOiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2YoWydsZWZ0JywgJ3JpZ2h0JywgJ3VwJywgJ2Rvd24nXSksXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgc2hvdyB0aGUgY29tcG9uZW50OyB0cmlnZ2VycyB0aGUgZW50ZXIgb3IgZXhpdCBhbmltYXRpb24uXG4gICAqL1xuICBpbjogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uRW50ZXI6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkVudGVyaW5nOiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25FeGl0OiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25FeGl0ZWQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBzdHlsZTogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgdGhlbWU6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogVGhlIGR1cmF0aW9uIGZvciB0aGUgdHJhbnNpdGlvbiwgaW4gbWlsbGlzZWNvbmRzLlxuICAgKiBZb3UgbWF5IHNwZWNpZnkgYSBzaW5nbGUgdGltZW91dCBmb3IgYWxsIHRyYW5zaXRpb25zLCBvciBpbmRpdmlkdWFsbHkgd2l0aCBhbiBvYmplY3QuXG4gICAqL1xuICB0aW1lb3V0OiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzLmRlZmF1bHQubnVtYmVyLCBfcHJvcFR5cGVzLmRlZmF1bHQuc2hhcGUoe1xuICAgIGVudGVyOiBfcHJvcFR5cGVzLmRlZmF1bHQubnVtYmVyLFxuICAgIGV4aXQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5udW1iZXJcbiAgfSldKVxufSA6IHt9O1xuU2xpZGUuZGVmYXVsdFByb3BzID0ge1xuICBkaXJlY3Rpb246ICdkb3duJyxcbiAgdGltZW91dDoge1xuICAgIGVudGVyOiBfdHJhbnNpdGlvbnMuZHVyYXRpb24uZW50ZXJpbmdTY3JlZW4sXG4gICAgZXhpdDogX3RyYW5zaXRpb25zLmR1cmF0aW9uLmxlYXZpbmdTY3JlZW5cbiAgfVxufTtcblxudmFyIF9kZWZhdWx0ID0gKDAsIF93aXRoVGhlbWUuZGVmYXVsdCkoKShTbGlkZSk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5zdHlsZXMgPSB2b2lkIDA7XG5cbnZhciBfZXh0ZW5kczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vZXh0ZW5kc1wiKSk7XG5cbnZhciBfZGVmaW5lUHJvcGVydHkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2RlZmluZVByb3BlcnR5XCIpKTtcblxudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIikpO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xuXG52YXIgX2NsYXNzbmFtZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJjbGFzc25hbWVzXCIpKTtcblxudmFyIF93aXRoU3R5bGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vc3R5bGVzL3dpdGhTdHlsZXNcIikpO1xuXG52YXIgX2NvbG9yTWFuaXB1bGF0b3IgPSByZXF1aXJlKFwiLi4vc3R5bGVzL2NvbG9yTWFuaXB1bGF0b3JcIik7XG5cbnZhciBzdHlsZXMgPSBmdW5jdGlvbiBzdHlsZXModGhlbWUpIHtcbiAgcmV0dXJuIHtcbiAgICByb290OiB7XG4gICAgICBoZWlnaHQ6IDEsXG4gICAgICBtYXJnaW46IDAsXG4gICAgICAvLyBSZXNldCBicm93c2VyIGRlZmF1bHQgc3R5bGUuXG4gICAgICBib3JkZXI6ICdub25lJyxcbiAgICAgIGZsZXhTaHJpbms6IDAsXG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUuZGl2aWRlclxuICAgIH0sXG4gICAgYWJzb2x1dGU6IHtcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgYm90dG9tOiAwLFxuICAgICAgbGVmdDogMCxcbiAgICAgIHdpZHRoOiAnMTAwJSdcbiAgICB9LFxuICAgIGluc2V0OiB7XG4gICAgICBtYXJnaW5MZWZ0OiB0aGVtZS5zcGFjaW5nLnVuaXQgKiA5XG4gICAgfSxcbiAgICBsaWdodDoge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiAoMCwgX2NvbG9yTWFuaXB1bGF0b3IuZmFkZSkodGhlbWUucGFsZXR0ZS5kaXZpZGVyLCAwLjA4KVxuICAgIH1cbiAgfTtcbn07XG5cbmV4cG9ydHMuc3R5bGVzID0gc3R5bGVzO1xuXG5mdW5jdGlvbiBEaXZpZGVyKHByb3BzKSB7XG4gIHZhciBfY2xhc3NOYW1lcztcblxuICB2YXIgYWJzb2x1dGUgPSBwcm9wcy5hYnNvbHV0ZSxcbiAgICAgIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY2xhc3NOYW1lUHJvcCA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIENvbXBvbmVudCA9IHByb3BzLmNvbXBvbmVudCxcbiAgICAgIGluc2V0ID0gcHJvcHMuaW5zZXQsXG4gICAgICBsaWdodCA9IHByb3BzLmxpZ2h0LFxuICAgICAgb3RoZXIgPSAoMCwgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMi5kZWZhdWx0KShwcm9wcywgW1wiYWJzb2x1dGVcIiwgXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29tcG9uZW50XCIsIFwiaW5zZXRcIiwgXCJsaWdodFwiXSk7XG4gIHZhciBjbGFzc05hbWUgPSAoMCwgX2NsYXNzbmFtZXMuZGVmYXVsdCkoY2xhc3Nlcy5yb290LCAoX2NsYXNzTmFtZXMgPSB7fSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2NsYXNzTmFtZXMsIGNsYXNzZXMuYWJzb2x1dGUsIGFic29sdXRlKSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2NsYXNzTmFtZXMsIGNsYXNzZXMuaW5zZXQsIGluc2V0KSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2NsYXNzTmFtZXMsIGNsYXNzZXMubGlnaHQsIGxpZ2h0KSwgX2NsYXNzTmFtZXMpLCBjbGFzc05hbWVQcm9wKTtcbiAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHtcbiAgICBjbGFzc05hbWU6IGNsYXNzTmFtZVxuICB9LCBvdGhlcikpO1xufVxuXG5EaXZpZGVyLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgYWJzb2x1dGU6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2Nzcy1hcGkpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgRE9NIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsIF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jXSksXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGRpdmlkZXIgd2lsbCBiZSBpbmRlbnRlZC5cbiAgICovXG4gIGluc2V0OiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgZGl2aWRlciB3aWxsIGhhdmUgYSBsaWdodGVyIGNvbG9yLlxuICAgKi9cbiAgbGlnaHQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sXG59IDoge307XG5EaXZpZGVyLmRlZmF1bHRQcm9wcyA9IHtcbiAgYWJzb2x1dGU6IGZhbHNlLFxuICBjb21wb25lbnQ6ICdocicsXG4gIGluc2V0OiBmYWxzZSxcbiAgbGlnaHQ6IGZhbHNlXG59O1xuXG52YXIgX2RlZmF1bHQgPSAoMCwgX3dpdGhTdHlsZXMuZGVmYXVsdCkoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlEaXZpZGVyJ1xufSkoRGl2aWRlcik7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5zdHlsZXMgPSB2b2lkIDA7XG5cbnZhciBfZXh0ZW5kczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vZXh0ZW5kc1wiKSk7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCIpKTtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKTtcblxudmFyIF9jbGFzc25hbWVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY2xhc3NuYW1lc1wiKSk7XG5cbnZhciBfd2l0aFN0eWxlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3N0eWxlcy93aXRoU3R5bGVzXCIpKTtcblxudmFyIF9UeXBvZ3JhcGh5ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vVHlwb2dyYXBoeVwiKSk7XG5cbnZhciBzdHlsZXMgPSBmdW5jdGlvbiBzdHlsZXModGhlbWUpIHtcbiAgcmV0dXJuIHtcbiAgICByb290OiB7XG4gICAgICBtYXJnaW46IDAsXG4gICAgICBwYWRkaW5nOiBcIlwiLmNvbmNhdCh0aGVtZS5zcGFjaW5nLnVuaXQgKiAzLCBcInB4IFwiKS5jb25jYXQodGhlbWUuc3BhY2luZy51bml0ICogMywgXCJweCAgICAgICAyMHB4IFwiKS5jb25jYXQodGhlbWUuc3BhY2luZy51bml0ICogMywgXCJweFwiKSxcbiAgICAgIGZsZXg6ICcwIDAgYXV0bydcbiAgICB9XG4gIH07XG59O1xuXG5leHBvcnRzLnN0eWxlcyA9IHN0eWxlcztcblxuZnVuY3Rpb24gRGlhbG9nVGl0bGUocHJvcHMpIHtcbiAgdmFyIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIGRpc2FibGVUeXBvZ3JhcGh5ID0gcHJvcHMuZGlzYWJsZVR5cG9ncmFwaHksXG4gICAgICBvdGhlciA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyLmRlZmF1bHQpKHByb3BzLCBbXCJjaGlsZHJlblwiLCBcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJkaXNhYmxlVHlwb2dyYXBoeVwiXSk7XG4gIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe1xuICAgIGNsYXNzTmFtZTogKDAsIF9jbGFzc25hbWVzLmRlZmF1bHQpKGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lKVxuICB9LCBvdGhlciksIGRpc2FibGVUeXBvZ3JhcGh5ID8gY2hpbGRyZW4gOiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9UeXBvZ3JhcGh5LmRlZmF1bHQsIHtcbiAgICB2YXJpYW50OiBcInRpdGxlXCJcbiAgfSwgY2hpbGRyZW4pKTtcbn1cblxuRGlhbG9nVGl0bGUucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBfcHJvcFR5cGVzLmRlZmF1bHQubm9kZS5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2Nzcy1hcGkpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgY2hpbGRyZW4gd29uJ3QgYmUgd3JhcHBlZCBieSBhIHR5cG9ncmFwaHkgY29tcG9uZW50LlxuICAgKiBGb3IgaW5zdGFuY2UsIHRoaXMgY2FuIGJlIHVzZWZ1bCB0byByZW5kZXIgYW4gaDQgaW5zdGVhZCBvZiB0aGUgZGVmYXVsdCBoMi5cbiAgICovXG4gIGRpc2FibGVUeXBvZ3JhcGh5OiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbFxufSA6IHt9O1xuRGlhbG9nVGl0bGUuZGVmYXVsdFByb3BzID0ge1xuICBkaXNhYmxlVHlwb2dyYXBoeTogZmFsc2Vcbn07XG5cbnZhciBfZGVmYXVsdCA9ICgwLCBfd2l0aFN0eWxlcy5kZWZhdWx0KShzdHlsZXMsIHtcbiAgbmFtZTogJ011aURpYWxvZ1RpdGxlJ1xufSkoRGlhbG9nVGl0bGUpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuc3R5bGVzID0gdm9pZCAwO1xuXG52YXIgX2V4dGVuZHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2V4dGVuZHNcIikpO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiKSk7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbnZhciBfY2xhc3NuYW1lcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImNsYXNzbmFtZXNcIikpO1xuXG52YXIgX3dpdGhTdHlsZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9zdHlsZXMvd2l0aFN0eWxlc1wiKSk7XG5cbnZhciBfVHlwb2dyYXBoeSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL1R5cG9ncmFwaHlcIikpO1xuXG4vLyBAaW5oZXJpdGVkQ29tcG9uZW50IFR5cG9ncmFwaHlcbnZhciBzdHlsZXMgPSBmdW5jdGlvbiBzdHlsZXModGhlbWUpIHtcbiAgcmV0dXJuIHtcbiAgICByb290OiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS50ZXh0LnNlY29uZGFyeVxuICAgIH1cbiAgfTtcbn07XG5cbmV4cG9ydHMuc3R5bGVzID0gc3R5bGVzO1xuXG5mdW5jdGlvbiBEaWFsb2dDb250ZW50VGV4dChwcm9wcykge1xuICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgb3RoZXIgPSAoMCwgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMi5kZWZhdWx0KShwcm9wcywgW1wiY2hpbGRyZW5cIiwgXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCJdKTtcbiAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX1R5cG9ncmFwaHkuZGVmYXVsdCwgKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7XG4gICAgY29tcG9uZW50OiBcInBcIixcbiAgICB2YXJpYW50OiBcInN1YmhlYWRpbmdcIixcbiAgICBjbGFzc05hbWU6ICgwLCBfY2xhc3NuYW1lcy5kZWZhdWx0KShjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSlcbiAgfSwgb3RoZXIpLCBjaGlsZHJlbik7XG59XG5cbkRpYWxvZ0NvbnRlbnRUZXh0LnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogX3Byb3BUeXBlcy5kZWZhdWx0Lm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzLWFwaSkgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nXG59IDoge307XG5cbnZhciBfZGVmYXVsdCA9ICgwLCBfd2l0aFN0eWxlcy5kZWZhdWx0KShzdHlsZXMsIHtcbiAgbmFtZTogJ011aURpYWxvZ0NvbnRlbnRUZXh0J1xufSkoRGlhbG9nQ29udGVudFRleHQpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuc3R5bGVzID0gdm9pZCAwO1xuXG52YXIgX2V4dGVuZHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2V4dGVuZHNcIikpO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiKSk7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbnZhciBfY2xhc3NuYW1lcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImNsYXNzbmFtZXNcIikpO1xuXG52YXIgX3dpdGhTdHlsZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9zdHlsZXMvd2l0aFN0eWxlc1wiKSk7XG5cbnZhciBzdHlsZXMgPSBmdW5jdGlvbiBzdHlsZXModGhlbWUpIHtcbiAgdmFyIHNwYWNpbmcgPSB0aGVtZS5zcGFjaW5nLnVuaXQgKiAzO1xuICByZXR1cm4ge1xuICAgIHJvb3Q6IHtcbiAgICAgIGZsZXg6ICcxIDEgYXV0bycsXG4gICAgICBvdmVyZmxvd1k6ICdhdXRvJyxcbiAgICAgIFdlYmtpdE92ZXJmbG93U2Nyb2xsaW5nOiAndG91Y2gnLFxuICAgICAgLy8gQWRkIGlPUyBtb21lbnR1bSBzY3JvbGxpbmcuXG4gICAgICBwYWRkaW5nOiBcIjAgXCIuY29uY2F0KHNwYWNpbmcsIFwicHggXCIpLmNvbmNhdChzcGFjaW5nLCBcInB4IFwiKS5jb25jYXQoc3BhY2luZywgXCJweFwiKSxcbiAgICAgICcmOmZpcnN0LWNoaWxkJzoge1xuICAgICAgICBwYWRkaW5nVG9wOiBzcGFjaW5nXG4gICAgICB9XG4gICAgfVxuICB9O1xufTtcblxuZXhwb3J0cy5zdHlsZXMgPSBzdHlsZXM7XG5cbmZ1bmN0aW9uIERpYWxvZ0NvbnRlbnQocHJvcHMpIHtcbiAgdmFyIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIG90aGVyID0gKDAsIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIuZGVmYXVsdCkocHJvcHMsIFtcImNsYXNzZXNcIiwgXCJjaGlsZHJlblwiLCBcImNsYXNzTmFtZVwiXSk7XG4gIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe1xuICAgIGNsYXNzTmFtZTogKDAsIF9jbGFzc25hbWVzLmRlZmF1bHQpKGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lKVxuICB9LCBvdGhlciksIGNoaWxkcmVuKTtcbn1cblxuRGlhbG9nQ29udGVudC5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IF9wcm9wVHlwZXMuZGVmYXVsdC5ub2RlLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2Nzcy1hcGkpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZ1xufSA6IHt9O1xuXG52YXIgX2RlZmF1bHQgPSAoMCwgX3dpdGhTdHlsZXMuZGVmYXVsdCkoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlEaWFsb2dDb250ZW50J1xufSkoRGlhbG9nQ29udGVudCk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5zdHlsZXMgPSB2b2lkIDA7XG5cbnZhciBfZXh0ZW5kczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vZXh0ZW5kc1wiKSk7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCIpKTtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKTtcblxudmFyIF9jbGFzc25hbWVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY2xhc3NuYW1lc1wiKSk7XG5cbnZhciBfd2l0aFN0eWxlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3N0eWxlcy93aXRoU3R5bGVzXCIpKTtcblxudmFyIF9yZWFjdEhlbHBlcnMgPSByZXF1aXJlKFwiLi4vdXRpbHMvcmVhY3RIZWxwZXJzXCIpO1xuXG5yZXF1aXJlKFwiLi4vQnV0dG9uXCIpO1xuXG4vLyBTbyB3ZSBkb24ndCBoYXZlIGFueSBvdmVycmlkZSBwcmlvcml0eSBpc3N1ZS5cbnZhciBzdHlsZXMgPSBmdW5jdGlvbiBzdHlsZXModGhlbWUpIHtcbiAgcmV0dXJuIHtcbiAgICByb290OiB7XG4gICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgIGp1c3RpZnlDb250ZW50OiAnZmxleC1lbmQnLFxuICAgICAgZmxleDogJzAgMCBhdXRvJyxcbiAgICAgIG1hcmdpbjogXCJcIi5jb25jYXQodGhlbWUuc3BhY2luZy51bml0LCBcInB4IFwiKS5jb25jYXQodGhlbWUuc3BhY2luZy51bml0IC8gMiwgXCJweFwiKVxuICAgIH0sXG4gICAgYWN0aW9uOiB7XG4gICAgICBtYXJnaW46IFwiMCBcIi5jb25jYXQodGhlbWUuc3BhY2luZy51bml0IC8gMiwgXCJweFwiKSxcbiAgICAgIG1pbldpZHRoOiA2NFxuICAgIH1cbiAgfTtcbn07XG5cbmV4cG9ydHMuc3R5bGVzID0gc3R5bGVzO1xuXG5mdW5jdGlvbiBEaWFsb2dBY3Rpb25zKHByb3BzKSB7XG4gIHZhciBkaXNhYmxlQWN0aW9uU3BhY2luZyA9IHByb3BzLmRpc2FibGVBY3Rpb25TcGFjaW5nLFxuICAgICAgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgb3RoZXIgPSAoMCwgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMi5kZWZhdWx0KShwcm9wcywgW1wiZGlzYWJsZUFjdGlvblNwYWNpbmdcIiwgXCJjaGlsZHJlblwiLCBcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIl0pO1xuICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImRpdlwiLCAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHtcbiAgICBjbGFzc05hbWU6ICgwLCBfY2xhc3NuYW1lcy5kZWZhdWx0KShjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSlcbiAgfSwgb3RoZXIpLCBkaXNhYmxlQWN0aW9uU3BhY2luZyA/IGNoaWxkcmVuIDogKDAsIF9yZWFjdEhlbHBlcnMuY2xvbmVDaGlsZHJlbldpdGhDbGFzc05hbWUpKGNoaWxkcmVuLCBjbGFzc2VzLmFjdGlvbikpO1xufVxuXG5EaWFsb2dBY3Rpb25zLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogX3Byb3BUeXBlcy5kZWZhdWx0Lm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzLWFwaSkgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBkaWFsb2cgYWN0aW9ucyBkbyBub3QgaGF2ZSBhZGRpdGlvbmFsIG1hcmdpbi5cbiAgICovXG4gIGRpc2FibGVBY3Rpb25TcGFjaW5nOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbFxufSA6IHt9O1xuRGlhbG9nQWN0aW9ucy5kZWZhdWx0UHJvcHMgPSB7XG4gIGRpc2FibGVBY3Rpb25TcGFjaW5nOiBmYWxzZVxufTtcblxudmFyIF9kZWZhdWx0ID0gKDAsIF93aXRoU3R5bGVzLmRlZmF1bHQpKHN0eWxlcywge1xuICBuYW1lOiAnTXVpRGlhbG9nQWN0aW9ucydcbn0pKERpYWxvZ0FjdGlvbnMpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuYXJpYUhpZGRlbiA9IGFyaWFIaWRkZW47XG5leHBvcnRzLmhpZGVTaWJsaW5ncyA9IGhpZGVTaWJsaW5ncztcbmV4cG9ydHMuc2hvd1NpYmxpbmdzID0gc2hvd1NpYmxpbmdzO1xudmFyIEJMQUNLTElTVCA9IFsndGVtcGxhdGUnLCAnc2NyaXB0JywgJ3N0eWxlJ107XG5cbmZ1bmN0aW9uIGlzSGlkYWJsZShub2RlKSB7XG4gIHJldHVybiBub2RlLm5vZGVUeXBlID09PSAxICYmIEJMQUNLTElTVC5pbmRleE9mKG5vZGUudGFnTmFtZS50b0xvd2VyQ2FzZSgpKSA9PT0gLTE7XG59XG5cbmZ1bmN0aW9uIHNpYmxpbmdzKGNvbnRhaW5lciwgbW91bnQsIGNhbGxiYWNrKSB7XG4gIG1vdW50ID0gW10uY29uY2F0KG1vdW50KTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuXG4gIFtdLmZvckVhY2guY2FsbChjb250YWluZXIuY2hpbGRyZW4sIGZ1bmN0aW9uIChub2RlKSB7XG4gICAgaWYgKG1vdW50LmluZGV4T2Yobm9kZSkgPT09IC0xICYmIGlzSGlkYWJsZShub2RlKSkge1xuICAgICAgY2FsbGJhY2sobm9kZSk7XG4gICAgfVxuICB9KTtcbn1cblxuZnVuY3Rpb24gYXJpYUhpZGRlbihzaG93LCBub2RlKSB7XG4gIGlmICghbm9kZSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChzaG93KSB7XG4gICAgbm9kZS5zZXRBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJywgJ3RydWUnKTtcbiAgfSBlbHNlIHtcbiAgICBub2RlLnJlbW92ZUF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBoaWRlU2libGluZ3MoY29udGFpbmVyLCBtb3VudE5vZGUpIHtcbiAgc2libGluZ3MoY29udGFpbmVyLCBtb3VudE5vZGUsIGZ1bmN0aW9uIChub2RlKSB7XG4gICAgcmV0dXJuIGFyaWFIaWRkZW4odHJ1ZSwgbm9kZSk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBzaG93U2libGluZ3MoY29udGFpbmVyLCBtb3VudE5vZGUpIHtcbiAgc2libGluZ3MoY29udGFpbmVyLCBtb3VudE5vZGUsIGZ1bmN0aW9uIChub2RlKSB7XG4gICAgcmV0dXJuIGFyaWFIaWRkZW4oZmFsc2UsIG5vZGUpO1xuICB9KTtcbn0iLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGdldFdpbmRvdztcbmZ1bmN0aW9uIGdldFdpbmRvdyhub2RlKSB7XG4gIHJldHVybiBub2RlID09PSBub2RlLndpbmRvdyA/IG5vZGUgOiBub2RlLm5vZGVUeXBlID09PSA5ID8gbm9kZS5kZWZhdWx0VmlldyB8fCBub2RlLnBhcmVudFdpbmRvdyA6IGZhbHNlO1xufVxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuaXNCb2R5ID0gaXNCb2R5O1xuZXhwb3J0cy5kZWZhdWx0ID0gaXNPdmVyZmxvd2luZztcblxudmFyIF9pc1dpbmRvdyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImRvbS1oZWxwZXJzL3F1ZXJ5L2lzV2luZG93XCIpKTtcblxudmFyIF9vd25lckRvY3VtZW50ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiZG9tLWhlbHBlcnMvb3duZXJEb2N1bWVudFwiKSk7XG5cbnZhciBfb3duZXJXaW5kb3cgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi91dGlscy9vd25lcldpbmRvd1wiKSk7XG5cbmZ1bmN0aW9uIGlzQm9keShub2RlKSB7XG4gIHJldHVybiBub2RlICYmIG5vZGUudGFnTmFtZS50b0xvd2VyQ2FzZSgpID09PSAnYm9keSc7XG59IC8vIERvIHdlIGhhdmUgYSBzY3JvbGwgYmFyP1xuXG5cbmZ1bmN0aW9uIGlzT3ZlcmZsb3dpbmcoY29udGFpbmVyKSB7XG4gIHZhciBkb2MgPSAoMCwgX293bmVyRG9jdW1lbnQuZGVmYXVsdCkoY29udGFpbmVyKTtcbiAgdmFyIHdpbiA9ICgwLCBfb3duZXJXaW5kb3cuZGVmYXVsdCkoZG9jKTtcbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cblxuICBpZiAoISgwLCBfaXNXaW5kb3cuZGVmYXVsdCkoZG9jKSAmJiAhaXNCb2R5KGNvbnRhaW5lcikpIHtcbiAgICByZXR1cm4gY29udGFpbmVyLnNjcm9sbEhlaWdodCA+IGNvbnRhaW5lci5jbGllbnRIZWlnaHQ7XG4gIH0gLy8gVGFrZXMgaW4gYWNjb3VudCBwb3RlbnRpYWwgbm9uIHplcm8gbWFyZ2luIG9uIHRoZSBib2R5LlxuXG5cbiAgdmFyIHN0eWxlID0gd2luLmdldENvbXB1dGVkU3R5bGUoZG9jLmJvZHkpO1xuICB2YXIgbWFyZ2luTGVmdCA9IHBhcnNlSW50KHN0eWxlLmdldFByb3BlcnR5VmFsdWUoJ21hcmdpbi1sZWZ0JyksIDEwKTtcbiAgdmFyIG1hcmdpblJpZ2h0ID0gcGFyc2VJbnQoc3R5bGUuZ2V0UHJvcGVydHlWYWx1ZSgnbWFyZ2luLXJpZ2h0JyksIDEwKTtcbiAgcmV0dXJuIG1hcmdpbkxlZnQgKyBkb2MuYm9keS5jbGllbnRXaWR0aCArIG1hcmdpblJpZ2h0IDwgd2luLmlubmVyV2lkdGg7XG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBpc1RyYW5zZm9ybTtcbnZhciBzdXBwb3J0ZWRUcmFuc2Zvcm1zID0gL14oKHRyYW5zbGF0ZXxyb3RhdGV8c2NhbGUpKFh8WXxafDNkKT98bWF0cml4KDNkKT98cGVyc3BlY3RpdmV8c2tldyhYfFkpPykkL2k7XG5cbmZ1bmN0aW9uIGlzVHJhbnNmb3JtKHByb3BlcnR5KSB7XG4gIHJldHVybiAhIShwcm9wZXJ0eSAmJiBzdXBwb3J0ZWRUcmFuc2Zvcm1zLnRlc3QocHJvcGVydHkpKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gcmVtb3ZlU3R5bGU7XG5mdW5jdGlvbiByZW1vdmVTdHlsZShub2RlLCBrZXkpIHtcbiAgcmV0dXJuICdyZW1vdmVQcm9wZXJ0eScgaW4gbm9kZS5zdHlsZSA/IG5vZGUuc3R5bGUucmVtb3ZlUHJvcGVydHkoa2V5KSA6IG5vZGUuc3R5bGUucmVtb3ZlQXR0cmlidXRlKGtleSk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBfZ2V0Q29tcHV0ZWRTdHlsZTtcblxudmFyIF9jYW1lbGl6ZVN0eWxlID0gcmVxdWlyZSgnLi4vdXRpbC9jYW1lbGl6ZVN0eWxlJyk7XG5cbnZhciBfY2FtZWxpemVTdHlsZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jYW1lbGl6ZVN0eWxlKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIHJwb3NpdGlvbiA9IC9eKHRvcHxyaWdodHxib3R0b218bGVmdCkkLztcbnZhciBybnVtbm9ucHggPSAvXihbKy1dPyg/OlxcZCpcXC58KVxcZCsoPzpbZUVdWystXT9cXGQrfCkpKD8hcHgpW2EteiVdKyQvaTtcblxuZnVuY3Rpb24gX2dldENvbXB1dGVkU3R5bGUobm9kZSkge1xuICBpZiAoIW5vZGUpIHRocm93IG5ldyBUeXBlRXJyb3IoJ05vIEVsZW1lbnQgcGFzc2VkIHRvIGBnZXRDb21wdXRlZFN0eWxlKClgJyk7XG4gIHZhciBkb2MgPSBub2RlLm93bmVyRG9jdW1lbnQ7XG5cbiAgcmV0dXJuICdkZWZhdWx0VmlldycgaW4gZG9jID8gZG9jLmRlZmF1bHRWaWV3Lm9wZW5lciA/IG5vZGUub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlldy5nZXRDb21wdXRlZFN0eWxlKG5vZGUsIG51bGwpIDogd2luZG93LmdldENvbXB1dGVkU3R5bGUobm9kZSwgbnVsbCkgOiB7XG4gICAgLy9pZSA4IFwibWFnaWNcIiBmcm9tOiBodHRwczovL2dpdGh1Yi5jb20vanF1ZXJ5L2pxdWVyeS9ibG9iLzEuMTEtc3RhYmxlL3NyYy9jc3MvY3VyQ1NTLmpzI0w3MlxuICAgIGdldFByb3BlcnR5VmFsdWU6IGZ1bmN0aW9uIGdldFByb3BlcnR5VmFsdWUocHJvcCkge1xuICAgICAgdmFyIHN0eWxlID0gbm9kZS5zdHlsZTtcblxuICAgICAgcHJvcCA9ICgwLCBfY2FtZWxpemVTdHlsZTIuZGVmYXVsdCkocHJvcCk7XG5cbiAgICAgIGlmIChwcm9wID09ICdmbG9hdCcpIHByb3AgPSAnc3R5bGVGbG9hdCc7XG5cbiAgICAgIHZhciBjdXJyZW50ID0gbm9kZS5jdXJyZW50U3R5bGVbcHJvcF0gfHwgbnVsbDtcblxuICAgICAgaWYgKGN1cnJlbnQgPT0gbnVsbCAmJiBzdHlsZSAmJiBzdHlsZVtwcm9wXSkgY3VycmVudCA9IHN0eWxlW3Byb3BdO1xuXG4gICAgICBpZiAocm51bW5vbnB4LnRlc3QoY3VycmVudCkgJiYgIXJwb3NpdGlvbi50ZXN0KHByb3ApKSB7XG4gICAgICAgIC8vIFJlbWVtYmVyIHRoZSBvcmlnaW5hbCB2YWx1ZXNcbiAgICAgICAgdmFyIGxlZnQgPSBzdHlsZS5sZWZ0O1xuICAgICAgICB2YXIgcnVuU3R5bGUgPSBub2RlLnJ1bnRpbWVTdHlsZTtcbiAgICAgICAgdmFyIHJzTGVmdCA9IHJ1blN0eWxlICYmIHJ1blN0eWxlLmxlZnQ7XG5cbiAgICAgICAgLy8gUHV0IGluIHRoZSBuZXcgdmFsdWVzIHRvIGdldCBhIGNvbXB1dGVkIHZhbHVlIG91dFxuICAgICAgICBpZiAocnNMZWZ0KSBydW5TdHlsZS5sZWZ0ID0gbm9kZS5jdXJyZW50U3R5bGUubGVmdDtcblxuICAgICAgICBzdHlsZS5sZWZ0ID0gcHJvcCA9PT0gJ2ZvbnRTaXplJyA/ICcxZW0nIDogY3VycmVudDtcbiAgICAgICAgY3VycmVudCA9IHN0eWxlLnBpeGVsTGVmdCArICdweCc7XG5cbiAgICAgICAgLy8gUmV2ZXJ0IHRoZSBjaGFuZ2VkIHZhbHVlc1xuICAgICAgICBzdHlsZS5sZWZ0ID0gbGVmdDtcbiAgICAgICAgaWYgKHJzTGVmdCkgcnVuU3R5bGUubGVmdCA9IHJzTGVmdDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGN1cnJlbnQ7XG4gICAgfVxuICB9O1xufVxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gaHlwaGVuYXRlO1xuXG52YXIgclVwcGVyID0gLyhbQS1aXSkvZztcblxuZnVuY3Rpb24gaHlwaGVuYXRlKHN0cmluZykge1xuICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoclVwcGVyLCAnLSQxJykudG9Mb3dlckNhc2UoKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGh5cGhlbmF0ZVN0eWxlTmFtZTtcblxudmFyIF9oeXBoZW5hdGUgPSByZXF1aXJlKCcuL2h5cGhlbmF0ZScpO1xuXG52YXIgX2h5cGhlbmF0ZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9oeXBoZW5hdGUpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgbXNQYXR0ZXJuID0gL15tcy0vOyAvKipcbiAgICAgICAgICAgICAgICAgICAgICAgICAqIENvcHlyaWdodCAyMDEzLTIwMTQsIEZhY2Vib29rLCBJbmMuXG4gICAgICAgICAgICAgICAgICAgICAgICAgKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICAgICAgICAgICAgICAgICAgICAgICAgICogaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2Jsb2IvMmFlYjhhMmE2YmViMDA2MTdhNDIxN2Y3ZjgyODQ5MjRmYTJhZDgxOS9zcmMvdmVuZG9yL2NvcmUvaHlwaGVuYXRlU3R5bGVOYW1lLmpzXG4gICAgICAgICAgICAgICAgICAgICAgICAgKi9cblxuZnVuY3Rpb24gaHlwaGVuYXRlU3R5bGVOYW1lKHN0cmluZykge1xuICByZXR1cm4gKDAsIF9oeXBoZW5hdGUyLmRlZmF1bHQpKHN0cmluZykucmVwbGFjZShtc1BhdHRlcm4sICctbXMtJyk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGNhbWVsaXplO1xudmFyIHJIeXBoZW4gPSAvLSguKS9nO1xuXG5mdW5jdGlvbiBjYW1lbGl6ZShzdHJpbmcpIHtcbiAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKHJIeXBoZW4sIGZ1bmN0aW9uIChfLCBjaHIpIHtcbiAgICByZXR1cm4gY2hyLnRvVXBwZXJDYXNlKCk7XG4gIH0pO1xufVxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBzdHlsZTtcblxudmFyIF9jYW1lbGl6ZVN0eWxlID0gcmVxdWlyZSgnLi4vdXRpbC9jYW1lbGl6ZVN0eWxlJyk7XG5cbnZhciBfY2FtZWxpemVTdHlsZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jYW1lbGl6ZVN0eWxlKTtcblxudmFyIF9oeXBoZW5hdGVTdHlsZSA9IHJlcXVpcmUoJy4uL3V0aWwvaHlwaGVuYXRlU3R5bGUnKTtcblxudmFyIF9oeXBoZW5hdGVTdHlsZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9oeXBoZW5hdGVTdHlsZSk7XG5cbnZhciBfZ2V0Q29tcHV0ZWRTdHlsZTIgPSByZXF1aXJlKCcuL2dldENvbXB1dGVkU3R5bGUnKTtcblxudmFyIF9nZXRDb21wdXRlZFN0eWxlMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2dldENvbXB1dGVkU3R5bGUyKTtcblxudmFyIF9yZW1vdmVTdHlsZSA9IHJlcXVpcmUoJy4vcmVtb3ZlU3R5bGUnKTtcblxudmFyIF9yZW1vdmVTdHlsZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZW1vdmVTdHlsZSk7XG5cbnZhciBfcHJvcGVydGllcyA9IHJlcXVpcmUoJy4uL3RyYW5zaXRpb24vcHJvcGVydGllcycpO1xuXG52YXIgX2lzVHJhbnNmb3JtID0gcmVxdWlyZSgnLi4vdHJhbnNpdGlvbi9pc1RyYW5zZm9ybScpO1xuXG52YXIgX2lzVHJhbnNmb3JtMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2lzVHJhbnNmb3JtKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gc3R5bGUobm9kZSwgcHJvcGVydHksIHZhbHVlKSB7XG4gIHZhciBjc3MgPSAnJztcbiAgdmFyIHRyYW5zZm9ybXMgPSAnJztcbiAgdmFyIHByb3BzID0gcHJvcGVydHk7XG5cbiAgaWYgKHR5cGVvZiBwcm9wZXJ0eSA9PT0gJ3N0cmluZycpIHtcbiAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIG5vZGUuc3R5bGVbKDAsIF9jYW1lbGl6ZVN0eWxlMi5kZWZhdWx0KShwcm9wZXJ0eSldIHx8ICgwLCBfZ2V0Q29tcHV0ZWRTdHlsZTMuZGVmYXVsdCkobm9kZSkuZ2V0UHJvcGVydHlWYWx1ZSgoMCwgX2h5cGhlbmF0ZVN0eWxlMi5kZWZhdWx0KShwcm9wZXJ0eSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICAocHJvcHMgPSB7fSlbcHJvcGVydHldID0gdmFsdWU7XG4gICAgfVxuICB9XG5cbiAgT2JqZWN0LmtleXMocHJvcHMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciB2YWx1ZSA9IHByb3BzW2tleV07XG4gICAgaWYgKCF2YWx1ZSAmJiB2YWx1ZSAhPT0gMCkge1xuICAgICAgKDAsIF9yZW1vdmVTdHlsZTIuZGVmYXVsdCkobm9kZSwgKDAsIF9oeXBoZW5hdGVTdHlsZTIuZGVmYXVsdCkoa2V5KSk7XG4gICAgfSBlbHNlIGlmICgoMCwgX2lzVHJhbnNmb3JtMi5kZWZhdWx0KShrZXkpKSB7XG4gICAgICB0cmFuc2Zvcm1zICs9IGtleSArICcoJyArIHZhbHVlICsgJykgJztcbiAgICB9IGVsc2Uge1xuICAgICAgY3NzICs9ICgwLCBfaHlwaGVuYXRlU3R5bGUyLmRlZmF1bHQpKGtleSkgKyAnOiAnICsgdmFsdWUgKyAnOyc7XG4gICAgfVxuICB9KTtcblxuICBpZiAodHJhbnNmb3Jtcykge1xuICAgIGNzcyArPSBfcHJvcGVydGllcy50cmFuc2Zvcm0gKyAnOiAnICsgdHJhbnNmb3JtcyArICc7JztcbiAgfVxuXG4gIG5vZGUuc3R5bGUuY3NzVGV4dCArPSAnOycgKyBjc3M7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9jbGFzc0NhbGxDaGVjazIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vY2xhc3NDYWxsQ2hlY2tcIikpO1xuXG52YXIgX2NyZWF0ZUNsYXNzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9jcmVhdGVDbGFzc1wiKSk7XG5cbnZhciBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vcG9zc2libGVDb25zdHJ1Y3RvclJldHVyblwiKSk7XG5cbnZhciBfaW5oZXJpdHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2luaGVyaXRzXCIpKTtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9yZWFjdERvbSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0LWRvbVwiKSk7XG5cbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbnZhciBfb3duZXJEb2N1bWVudCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImRvbS1oZWxwZXJzL293bmVyRG9jdW1lbnRcIikpO1xuXG52YXIgX2V4YWN0UHJvcCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3V0aWxzL2V4YWN0UHJvcFwiKSk7XG5cbmZ1bmN0aW9uIGdldENvbnRhaW5lcihjb250YWluZXIsIGRlZmF1bHRDb250YWluZXIpIHtcbiAgY29udGFpbmVyID0gdHlwZW9mIGNvbnRhaW5lciA9PT0gJ2Z1bmN0aW9uJyA/IGNvbnRhaW5lcigpIDogY29udGFpbmVyO1xuICByZXR1cm4gX3JlYWN0RG9tLmRlZmF1bHQuZmluZERPTU5vZGUoY29udGFpbmVyKSB8fCBkZWZhdWx0Q29udGFpbmVyO1xufVxuXG5mdW5jdGlvbiBnZXRPd25lckRvY3VtZW50KGVsZW1lbnQpIHtcbiAgcmV0dXJuICgwLCBfb3duZXJEb2N1bWVudC5kZWZhdWx0KShfcmVhY3REb20uZGVmYXVsdC5maW5kRE9NTm9kZShlbGVtZW50KSk7XG59XG4vKipcbiAqIFRoaXMgY29tcG9uZW50IHNoYXJlcyBtYW55IGNvbmNlcHRzIHdpdGhcbiAqIFtyZWFjdC1vdmVybGF5c10oaHR0cHM6Ly9yZWFjdC1ib290c3RyYXAuZ2l0aHViLmlvL3JlYWN0LW92ZXJsYXlzLyNwb3J0YWxzKVxuICogQnV0IGhhcyBiZWVuIGZvcmtlZCBpbiBvcmRlciB0byBmaXggc29tZSBidWdzLCByZWR1Y2UgdGhlIG51bWJlciBvZiBkZXBlbmRlbmNpZXNcbiAqIGFuZCB0YWtlIHRoZSBjb250cm9sIG9mIG91ciBkZXN0aW55LlxuICovXG5cblxudmFyIFBvcnRhbCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICAoMCwgX2luaGVyaXRzMi5kZWZhdWx0KShQb3J0YWwsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFBvcnRhbCgpIHtcbiAgICB2YXIgX3JlZjtcblxuICAgIHZhciBfdGVtcCwgX3RoaXM7XG5cbiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMi5kZWZhdWx0KSh0aGlzLCBQb3J0YWwpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiAoMCwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yLmRlZmF1bHQpKF90aGlzLCAoX3RlbXAgPSBfdGhpcyA9ICgwLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIuZGVmYXVsdCkodGhpcywgKF9yZWYgPSBQb3J0YWwuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihQb3J0YWwpKS5jYWxsLmFwcGx5KF9yZWYsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMuZ2V0TW91bnROb2RlID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIF90aGlzLm1vdW50Tm9kZTtcbiAgICB9LCBfdGVtcCkpO1xuICB9XG5cbiAgKDAsIF9jcmVhdGVDbGFzczIuZGVmYXVsdCkoUG9ydGFsLCBbe1xuICAgIGtleTogXCJjb21wb25lbnREaWRNb3VudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgIHRoaXMuc2V0Q29udGFpbmVyKHRoaXMucHJvcHMuY29udGFpbmVyKTtcbiAgICAgIHRoaXMuZm9yY2VVcGRhdGUodGhpcy5wcm9wcy5vblJlbmRlcmVkKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY29tcG9uZW50RGlkVXBkYXRlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMpIHtcbiAgICAgIGlmIChwcmV2UHJvcHMuY29udGFpbmVyICE9PSB0aGlzLnByb3BzLmNvbnRhaW5lcikge1xuICAgICAgICB0aGlzLnNldENvbnRhaW5lcih0aGlzLnByb3BzLmNvbnRhaW5lcik7XG4gICAgICAgIHRoaXMuZm9yY2VVcGRhdGUoKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY29tcG9uZW50V2lsbFVubW91bnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICB0aGlzLm1vdW50Tm9kZSA9IG51bGw7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInNldENvbnRhaW5lclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRDb250YWluZXIoY29udGFpbmVyKSB7XG4gICAgICB0aGlzLm1vdW50Tm9kZSA9IGdldENvbnRhaW5lcihjb250YWluZXIsIGdldE93bmVyRG9jdW1lbnQodGhpcykuYm9keSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgY2hpbGRyZW4gPSB0aGlzLnByb3BzLmNoaWxkcmVuO1xuICAgICAgcmV0dXJuIHRoaXMubW91bnROb2RlID8gX3JlYWN0RG9tLmRlZmF1bHQuY3JlYXRlUG9ydGFsKGNoaWxkcmVuLCB0aGlzLm1vdW50Tm9kZSkgOiBudWxsO1xuICAgIH1cbiAgfV0pO1xuICByZXR1cm4gUG9ydGFsO1xufShfcmVhY3QuZGVmYXVsdC5Db21wb25lbnQpO1xuXG5Qb3J0YWwucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKipcbiAgICogVGhlIGNoaWxkcmVuIHRvIHJlbmRlciBpbnRvIHRoZSBgY29udGFpbmVyYC5cbiAgICovXG4gIGNoaWxkcmVuOiBfcHJvcFR5cGVzLmRlZmF1bHQubm9kZS5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBBIG5vZGUsIGNvbXBvbmVudCBpbnN0YW5jZSwgb3IgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGVpdGhlci5cbiAgICogVGhlIGBjb250YWluZXJgIHdpbGwgaGF2ZSB0aGUgcG9ydGFsIGNoaWxkcmVuIGFwcGVuZGVkIHRvIGl0LlxuICAgKiBCeSBkZWZhdWx0LCBpdCB1c2VzIHRoZSBib2R5IG9mIHRoZSB0b3AtbGV2ZWwgZG9jdW1lbnQgb2JqZWN0LFxuICAgKiBzbyBpdCdzIHNpbXBseSBgZG9jdW1lbnQuYm9keWAgbW9zdCBvZiB0aGUgdGltZS5cbiAgICovXG4gIGNvbnRhaW5lcjogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdCwgX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmNdKSxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgb25jZSB0aGUgY2hpbGRyZW4gaGFzIGJlZW4gbW91bnRlZCBpbnRvIHRoZSBgY29udGFpbmVyYC5cbiAgICovXG4gIG9uUmVuZGVyZWQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jXG59IDoge307XG5Qb3J0YWwucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gKDAsIF9leGFjdFByb3AuZGVmYXVsdCkoUG9ydGFsLnByb3BUeXBlcywgJ1BvcnRhbCcpIDoge307XG52YXIgX2RlZmF1bHQgPSBQb3J0YWw7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9jbGFzc0NhbGxDaGVjazIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vY2xhc3NDYWxsQ2hlY2tcIikpO1xuXG52YXIgX2NyZWF0ZUNsYXNzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9jcmVhdGVDbGFzc1wiKSk7XG5cbnZhciBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vcG9zc2libGVDb25zdHJ1Y3RvclJldHVyblwiKSk7XG5cbnZhciBfaW5oZXJpdHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2luaGVyaXRzXCIpKTtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9yZWFjdERvbSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0LWRvbVwiKSk7XG5cbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbnZhciBfZXhhY3RQcm9wID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vdXRpbHMvZXhhY3RQcm9wXCIpKTtcblxuLyoqXG4gKiBIZWxwZXIgY29tcG9uZW50IHRvIGFsbG93IGF0dGFjaGluZyBhIHJlZiB0byBhXG4gKiB3cmFwcGVkIGVsZW1lbnQgdG8gYWNjZXNzIHRoZSB1bmRlcmx5aW5nIERPTSBlbGVtZW50LlxuICpcbiAqIEl0J3MgaGlnbHkgaW5zcGlyZWQgYnkgaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2lzc3Vlcy8xMTQwMSNpc3N1ZWNvbW1lbnQtMzQwNTQzODAxLlxuICogRm9yIGV4YW1wbGU6XG4gKiBgYGBqc3hcbiAqIGltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG4gKiBpbXBvcnQgUm9vdFJlZiBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9Sb290UmVmJztcbiAqXG4gKiBjbGFzcyBNeUNvbXBvbmVudCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gKiAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gKiAgICAgc3VwZXIocHJvcHMpO1xuICogICAgIHRoaXMuZG9tUmVmID0gUmVhY3QuY3JlYXRlUmVmKCk7XG4gKiAgIH1cbiAqXG4gKiAgIGNvbXBvbmVudERpZE1vdW50KCkge1xuICogICAgIGNvbnNvbGUubG9nKHRoaXMuZG9tUmVmLmN1cnJlbnQpOyAvLyBET00gbm9kZVxuICogICB9XG4gKlxuICogICByZW5kZXIoKSB7XG4gKiAgICAgcmV0dXJuIChcbiAqICAgICAgIDxSb290UmVmIHJvb3RSZWY9e3RoaXMuZG9tUmVmfT5cbiAqICAgICAgICAgPFNvbWVDaGlsZENvbXBvbmVudCAvPlxuICogICAgICAgPC9Sb290UmVmPlxuICogICAgICk7XG4gKiAgIH1cbiAqIH1cbiAqIGBgYFxuICovXG52YXIgUm9vdFJlZiA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICAoMCwgX2luaGVyaXRzMi5kZWZhdWx0KShSb290UmVmLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBSb290UmVmKCkge1xuICAgICgwLCBfY2xhc3NDYWxsQ2hlY2syLmRlZmF1bHQpKHRoaXMsIFJvb3RSZWYpO1xuICAgIHJldHVybiAoMCwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yLmRlZmF1bHQpKHRoaXMsIChSb290UmVmLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoUm9vdFJlZikpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgKDAsIF9jcmVhdGVDbGFzczIuZGVmYXVsdCkoUm9vdFJlZiwgW3tcbiAgICBrZXk6IFwiY29tcG9uZW50RGlkTW91bnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICB2YXIgcm9vdFJlZiA9IHRoaXMucHJvcHMucm9vdFJlZjtcblxuICAgICAgdmFyIG5vZGUgPSBfcmVhY3REb20uZGVmYXVsdC5maW5kRE9NTm9kZSh0aGlzKTtcblxuICAgICAgaWYgKHR5cGVvZiByb290UmVmID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJvb3RSZWYobm9kZSk7XG4gICAgICB9IGVsc2UgaWYgKHJvb3RSZWYpIHtcbiAgICAgICAgcm9vdFJlZi5jdXJyZW50ID0gbm9kZTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY29tcG9uZW50V2lsbFVubW91bnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICB2YXIgcm9vdFJlZiA9IHRoaXMucHJvcHMucm9vdFJlZjtcblxuICAgICAgaWYgKHR5cGVvZiByb290UmVmID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJvb3RSZWYobnVsbCk7XG4gICAgICB9IGVsc2UgaWYgKHJvb3RSZWYpIHtcbiAgICAgICAgcm9vdFJlZi5jdXJyZW50ID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHJldHVybiB0aGlzLnByb3BzLmNoaWxkcmVuO1xuICAgIH1cbiAgfV0pO1xuICByZXR1cm4gUm9vdFJlZjtcbn0oX3JlYWN0LmRlZmF1bHQuQ29tcG9uZW50KTtcblxuUm9vdFJlZi5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIC8qKlxuICAgKiBUaGUgd3JhcHBlZCBlbGVtZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IF9wcm9wVHlwZXMuZGVmYXVsdC5lbGVtZW50LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIFByb3ZpZGUgYSB3YXkgdG8gYWNjZXNzIHRoZSBET00gbm9kZSBvZiB0aGUgd3JhcHBlZCBlbGVtZW50LlxuICAgKiBZb3UgY2FuIHByb3ZpZGUgYSBjYWxsYmFjayByZWYgb3IgYSBgUmVhY3QuY3JlYXRlUmVmKClgIHJlZi5cbiAgICovXG4gIHJvb3RSZWY6IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLCBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0XSkuaXNSZXF1aXJlZFxufSA6IHt9O1xuUm9vdFJlZi5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyAoMCwgX2V4YWN0UHJvcC5kZWZhdWx0KShSb290UmVmLnByb3BUeXBlcywgJ1Jvb3RSZWYnKSA6IHt9O1xudmFyIF9kZWZhdWx0ID0gUm9vdFJlZjtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5zdHlsZXMgPSB2b2lkIDA7XG5cbnZhciBfZXh0ZW5kczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vZXh0ZW5kc1wiKSk7XG5cbnZhciBfZGVmaW5lUHJvcGVydHkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2RlZmluZVByb3BlcnR5XCIpKTtcblxudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIikpO1xuXG52YXIgX2NsYXNzQ2FsbENoZWNrMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9jbGFzc0NhbGxDaGVja1wiKSk7XG5cbnZhciBfY3JlYXRlQ2xhc3MyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2NyZWF0ZUNsYXNzXCIpKTtcblxudmFyIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuXCIpKTtcblxudmFyIF9pbmhlcml0czIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vaW5oZXJpdHNcIikpO1xuXG52YXIgX2Fzc2VydFRoaXNJbml0aWFsaXplZDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vYXNzZXJ0VGhpc0luaXRpYWxpemVkXCIpKTtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9yZWFjdERvbSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0LWRvbVwiKSk7XG5cbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbnZhciBfY2xhc3NuYW1lcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImNsYXNzbmFtZXNcIikpO1xuXG52YXIgX3dhcm5pbmcgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJ3YXJuaW5nXCIpKTtcblxudmFyIF9rZXljb2RlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwia2V5Y29kZVwiKSk7XG5cbnZhciBfYWN0aXZlRWxlbWVudCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImRvbS1oZWxwZXJzL2FjdGl2ZUVsZW1lbnRcIikpO1xuXG52YXIgX2NvbnRhaW5zID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiZG9tLWhlbHBlcnMvcXVlcnkvY29udGFpbnNcIikpO1xuXG52YXIgX2luRE9NID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiZG9tLWhlbHBlcnMvdXRpbC9pbkRPTVwiKSk7XG5cbnZhciBfb3duZXJEb2N1bWVudCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImRvbS1oZWxwZXJzL293bmVyRG9jdW1lbnRcIikpO1xuXG52YXIgX1Jvb3RSZWYgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9Sb290UmVmXCIpKTtcblxudmFyIF9Qb3J0YWwgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9Qb3J0YWxcIikpO1xuXG52YXIgX2hlbHBlcnMgPSByZXF1aXJlKFwiLi4vdXRpbHMvaGVscGVyc1wiKTtcblxudmFyIF93aXRoU3R5bGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vc3R5bGVzL3dpdGhTdHlsZXNcIikpO1xuXG52YXIgX01vZGFsTWFuYWdlciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vTW9kYWxNYW5hZ2VyXCIpKTtcblxudmFyIF9CYWNrZHJvcCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL0JhY2tkcm9wXCIpKTtcblxuLy8gQGluaGVyaXRlZENvbXBvbmVudCBQb3J0YWxcbmZ1bmN0aW9uIGdldENvbnRhaW5lcihjb250YWluZXIsIGRlZmF1bHRDb250YWluZXIpIHtcbiAgY29udGFpbmVyID0gdHlwZW9mIGNvbnRhaW5lciA9PT0gJ2Z1bmN0aW9uJyA/IGNvbnRhaW5lcigpIDogY29udGFpbmVyO1xuICByZXR1cm4gX3JlYWN0RG9tLmRlZmF1bHQuZmluZERPTU5vZGUoY29udGFpbmVyKSB8fCBkZWZhdWx0Q29udGFpbmVyO1xufVxuXG5mdW5jdGlvbiBnZXRIYXNUcmFuc2l0aW9uKHByb3BzKSB7XG4gIHJldHVybiBwcm9wcy5jaGlsZHJlbiA/IHByb3BzLmNoaWxkcmVuLnByb3BzLmhhc093blByb3BlcnR5KCdpbicpIDogZmFsc2U7XG59XG5cbnZhciBzdHlsZXMgPSBmdW5jdGlvbiBzdHlsZXModGhlbWUpIHtcbiAgcmV0dXJuIHtcbiAgICByb290OiB7XG4gICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICBwb3NpdGlvbjogJ2ZpeGVkJyxcbiAgICAgIHpJbmRleDogdGhlbWUuekluZGV4Lm1vZGFsLFxuICAgICAgdG9wOiAwLFxuICAgICAgbGVmdDogMFxuICAgIH0sXG4gICAgaGlkZGVuOiB7XG4gICAgICB2aXNpYmlsaXR5OiAnaGlkZGVuJ1xuICAgIH1cbiAgfTtcbn07XG4vKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cblxuXG5leHBvcnRzLnN0eWxlcyA9IHN0eWxlcztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIV9yZWFjdC5kZWZhdWx0LmNyZWF0ZUNvbnRleHQpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCdNYXRlcmlhbC1VSTogcmVhY3RAMTYuMy4wIG9yIGdyZWF0ZXIgaXMgcmVxdWlyZWQuJyk7XG59XG5cbnZhciBNb2RhbCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICAoMCwgX2luaGVyaXRzMi5kZWZhdWx0KShNb2RhbCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gTW9kYWwocHJvcHMpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMi5kZWZhdWx0KSh0aGlzLCBNb2RhbCk7XG4gICAgX3RoaXMgPSAoMCwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yLmRlZmF1bHQpKHRoaXMsIChNb2RhbC5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKE1vZGFsKSkuY2FsbCh0aGlzLCBwcm9wcykpO1xuICAgIF90aGlzLmRpYWxvZ0VsZW1lbnQgPSBudWxsO1xuICAgIF90aGlzLm1vdW50ZWQgPSBmYWxzZTtcbiAgICBfdGhpcy5tb3VudE5vZGUgPSBudWxsO1xuXG4gICAgX3RoaXMuaGFuZGxlUmVuZGVyZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpcy5hdXRvRm9jdXMoKTtcblxuICAgICAgaWYgKF90aGlzLnByb3BzLm9uUmVuZGVyZWQpIHtcbiAgICAgICAgX3RoaXMucHJvcHMub25SZW5kZXJlZCgpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVPcGVuID0gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGRvYyA9ICgwLCBfb3duZXJEb2N1bWVudC5kZWZhdWx0KShfdGhpcy5tb3VudE5vZGUpO1xuICAgICAgdmFyIGNvbnRhaW5lciA9IGdldENvbnRhaW5lcihfdGhpcy5wcm9wcy5jb250YWluZXIsIGRvYy5ib2R5KTtcblxuICAgICAgX3RoaXMucHJvcHMubWFuYWdlci5hZGQoKDAsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyLmRlZmF1bHQpKF90aGlzKSwgY29udGFpbmVyKTtcblxuICAgICAgZG9jLmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBfdGhpcy5oYW5kbGVEb2N1bWVudEtleURvd24pO1xuICAgICAgZG9jLmFkZEV2ZW50TGlzdGVuZXIoJ2ZvY3VzJywgX3RoaXMuZW5mb3JjZUZvY3VzLCB0cnVlKTtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlQ2xvc2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpcy5wcm9wcy5tYW5hZ2VyLnJlbW92ZSgoMCwgX2Fzc2VydFRoaXNJbml0aWFsaXplZDIuZGVmYXVsdCkoX3RoaXMpKTtcblxuICAgICAgdmFyIGRvYyA9ICgwLCBfb3duZXJEb2N1bWVudC5kZWZhdWx0KShfdGhpcy5tb3VudE5vZGUpO1xuICAgICAgZG9jLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBfdGhpcy5oYW5kbGVEb2N1bWVudEtleURvd24pO1xuICAgICAgZG9jLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2ZvY3VzJywgX3RoaXMuZW5mb3JjZUZvY3VzKTtcblxuICAgICAgX3RoaXMucmVzdG9yZUxhc3RGb2N1cygpO1xuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVFeGl0ZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGV4aXRlZDogdHJ1ZVxuICAgICAgfSk7XG5cbiAgICAgIF90aGlzLmhhbmRsZUNsb3NlKCk7XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZUJhY2tkcm9wQ2xpY2sgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGlmIChldmVudC50YXJnZXQgIT09IGV2ZW50LmN1cnJlbnRUYXJnZXQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoX3RoaXMucHJvcHMub25CYWNrZHJvcENsaWNrKSB7XG4gICAgICAgIF90aGlzLnByb3BzLm9uQmFja2Ryb3BDbGljayhldmVudCk7XG4gICAgICB9XG5cbiAgICAgIGlmICghX3RoaXMucHJvcHMuZGlzYWJsZUJhY2tkcm9wQ2xpY2sgJiYgX3RoaXMucHJvcHMub25DbG9zZSkge1xuICAgICAgICBfdGhpcy5wcm9wcy5vbkNsb3NlKGV2ZW50LCAnYmFja2Ryb3BDbGljaycpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVEb2N1bWVudEtleURvd24gPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGlmICghX3RoaXMuaXNUb3BNb2RhbCgpIHx8ICgwLCBfa2V5Y29kZS5kZWZhdWx0KShldmVudCkgIT09ICdlc2MnKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKF90aGlzLnByb3BzLm9uRXNjYXBlS2V5RG93bikge1xuICAgICAgICBfdGhpcy5wcm9wcy5vbkVzY2FwZUtleURvd24oZXZlbnQpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIV90aGlzLnByb3BzLmRpc2FibGVFc2NhcGVLZXlEb3duICYmIF90aGlzLnByb3BzLm9uQ2xvc2UpIHtcbiAgICAgICAgX3RoaXMucHJvcHMub25DbG9zZShldmVudCwgJ2VzY2FwZUtleURvd24nKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3RoaXMuY2hlY2tGb3JGb2N1cyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChfaW5ET00uZGVmYXVsdCkge1xuICAgICAgICBfdGhpcy5sYXN0Rm9jdXMgPSAoMCwgX2FjdGl2ZUVsZW1lbnQuZGVmYXVsdCkoKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3RoaXMuZW5mb3JjZUZvY3VzID0gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKF90aGlzLnByb3BzLmRpc2FibGVFbmZvcmNlRm9jdXMgfHwgIV90aGlzLm1vdW50ZWQgfHwgIV90aGlzLmlzVG9wTW9kYWwoKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBjdXJyZW50QWN0aXZlRWxlbWVudCA9ICgwLCBfYWN0aXZlRWxlbWVudC5kZWZhdWx0KSgoMCwgX293bmVyRG9jdW1lbnQuZGVmYXVsdCkoX3RoaXMubW91bnROb2RlKSk7XG5cbiAgICAgIGlmIChfdGhpcy5kaWFsb2dFbGVtZW50ICYmICEoMCwgX2NvbnRhaW5zLmRlZmF1bHQpKF90aGlzLmRpYWxvZ0VsZW1lbnQsIGN1cnJlbnRBY3RpdmVFbGVtZW50KSkge1xuICAgICAgICBfdGhpcy5kaWFsb2dFbGVtZW50LmZvY3VzKCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgZXhpdGVkOiAhX3RoaXMucHJvcHMub3BlblxuICAgIH07XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgKDAsIF9jcmVhdGVDbGFzczIuZGVmYXVsdCkoTW9kYWwsIFt7XG4gICAga2V5OiBcImNvbXBvbmVudERpZE1vdW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgdGhpcy5tb3VudGVkID0gdHJ1ZTtcblxuICAgICAgaWYgKHRoaXMucHJvcHMub3Blbikge1xuICAgICAgICB0aGlzLmhhbmRsZU9wZW4oKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY29tcG9uZW50RGlkVXBkYXRlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMpIHtcbiAgICAgIGlmICghcHJldlByb3BzLm9wZW4gJiYgdGhpcy5wcm9wcy5vcGVuKSB7XG4gICAgICAgIHRoaXMuY2hlY2tGb3JGb2N1cygpO1xuICAgICAgfVxuXG4gICAgICBpZiAocHJldlByb3BzLm9wZW4gJiYgIXRoaXMucHJvcHMub3BlbiAmJiAhZ2V0SGFzVHJhbnNpdGlvbih0aGlzLnByb3BzKSkge1xuICAgICAgICAvLyBPdGhlcndpc2UgaGFuZGxlRXhpdGVkIHdpbGwgY2FsbCB0aGlzLlxuICAgICAgICB0aGlzLmhhbmRsZUNsb3NlKCk7XG4gICAgICB9IGVsc2UgaWYgKCFwcmV2UHJvcHMub3BlbiAmJiB0aGlzLnByb3BzLm9wZW4pIHtcbiAgICAgICAgdGhpcy5oYW5kbGVPcGVuKCk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImNvbXBvbmVudFdpbGxVbm1vdW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgdGhpcy5tb3VudGVkID0gZmFsc2U7XG5cbiAgICAgIGlmICh0aGlzLnByb3BzLm9wZW4gfHwgZ2V0SGFzVHJhbnNpdGlvbih0aGlzLnByb3BzKSAmJiAhdGhpcy5zdGF0ZS5leGl0ZWQpIHtcbiAgICAgICAgdGhpcy5oYW5kbGVDbG9zZSgpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJhdXRvRm9jdXNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gYXV0b0ZvY3VzKCkge1xuICAgICAgaWYgKHRoaXMucHJvcHMuZGlzYWJsZUF1dG9Gb2N1cykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBjdXJyZW50QWN0aXZlRWxlbWVudCA9ICgwLCBfYWN0aXZlRWxlbWVudC5kZWZhdWx0KSgoMCwgX293bmVyRG9jdW1lbnQuZGVmYXVsdCkodGhpcy5tb3VudE5vZGUpKTtcblxuICAgICAgaWYgKHRoaXMuZGlhbG9nRWxlbWVudCAmJiAhKDAsIF9jb250YWlucy5kZWZhdWx0KSh0aGlzLmRpYWxvZ0VsZW1lbnQsIGN1cnJlbnRBY3RpdmVFbGVtZW50KSkge1xuICAgICAgICB0aGlzLmxhc3RGb2N1cyA9IGN1cnJlbnRBY3RpdmVFbGVtZW50O1xuXG4gICAgICAgIGlmICghdGhpcy5kaWFsb2dFbGVtZW50Lmhhc0F0dHJpYnV0ZSgndGFiSW5kZXgnKSkge1xuICAgICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/ICgwLCBfd2FybmluZy5kZWZhdWx0KShmYWxzZSwgWydNYXRlcmlhbC1VSTogdGhlIG1vZGFsIGNvbnRlbnQgbm9kZSBkb2VzIG5vdCBhY2NlcHQgZm9jdXMuJywgJ0ZvciB0aGUgYmVuZWZpdCBvZiBhc3Npc3RpdmUgdGVjaG5vbG9naWVzLCAnICsgJ3RoZSB0YWJJbmRleCBvZiB0aGUgbm9kZSBpcyBiZWluZyBzZXQgdG8gXCItMVwiLiddLmpvaW4oJ1xcbicpKSA6IHZvaWQgMDtcbiAgICAgICAgICB0aGlzLmRpYWxvZ0VsZW1lbnQuc2V0QXR0cmlidXRlKCd0YWJJbmRleCcsIC0xKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuZGlhbG9nRWxlbWVudC5mb2N1cygpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZXN0b3JlTGFzdEZvY3VzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlc3RvcmVMYXN0Rm9jdXMoKSB7XG4gICAgICBpZiAodGhpcy5wcm9wcy5kaXNhYmxlUmVzdG9yZUZvY3VzKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMubGFzdEZvY3VzKSB7XG4gICAgICAgIC8vIE5vdCBhbGwgZWxlbWVudHMgaW4gSUUxMSBoYXZlIGEgZm9jdXMgbWV0aG9kLlxuICAgICAgICAvLyBCZWNhdXNlIElFMTEgbWFya2V0IHNoYXJlIGlzIGxvdywgd2UgYWNjZXB0IHRoZSByZXN0b3JlIGZvY3VzIGJlaW5nIGJyb2tlblxuICAgICAgICAvLyBhbmQgd2Ugc2lsZW50IHRoZSBpc3N1ZS5cbiAgICAgICAgaWYgKHRoaXMubGFzdEZvY3VzLmZvY3VzKSB7XG4gICAgICAgICAgdGhpcy5sYXN0Rm9jdXMuZm9jdXMoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMubGFzdEZvY3VzID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiaXNUb3BNb2RhbFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBpc1RvcE1vZGFsKCkge1xuICAgICAgcmV0dXJuIHRoaXMucHJvcHMubWFuYWdlci5pc1RvcE1vZGFsKHRoaXMpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIEJhY2tkcm9wQ29tcG9uZW50ID0gX3Byb3BzLkJhY2tkcm9wQ29tcG9uZW50LFxuICAgICAgICAgIEJhY2tkcm9wUHJvcHMgPSBfcHJvcHMuQmFja2Ryb3BQcm9wcyxcbiAgICAgICAgICBjaGlsZHJlbiA9IF9wcm9wcy5jaGlsZHJlbixcbiAgICAgICAgICBjbGFzc2VzID0gX3Byb3BzLmNsYXNzZXMsXG4gICAgICAgICAgY2xhc3NOYW1lID0gX3Byb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgICBjb250YWluZXIgPSBfcHJvcHMuY29udGFpbmVyLFxuICAgICAgICAgIGRpc2FibGVBdXRvRm9jdXMgPSBfcHJvcHMuZGlzYWJsZUF1dG9Gb2N1cyxcbiAgICAgICAgICBkaXNhYmxlQmFja2Ryb3BDbGljayA9IF9wcm9wcy5kaXNhYmxlQmFja2Ryb3BDbGljayxcbiAgICAgICAgICBkaXNhYmxlRW5mb3JjZUZvY3VzID0gX3Byb3BzLmRpc2FibGVFbmZvcmNlRm9jdXMsXG4gICAgICAgICAgZGlzYWJsZUVzY2FwZUtleURvd24gPSBfcHJvcHMuZGlzYWJsZUVzY2FwZUtleURvd24sXG4gICAgICAgICAgZGlzYWJsZVJlc3RvcmVGb2N1cyA9IF9wcm9wcy5kaXNhYmxlUmVzdG9yZUZvY3VzLFxuICAgICAgICAgIGhpZGVCYWNrZHJvcCA9IF9wcm9wcy5oaWRlQmFja2Ryb3AsXG4gICAgICAgICAga2VlcE1vdW50ZWQgPSBfcHJvcHMua2VlcE1vdW50ZWQsXG4gICAgICAgICAgb25CYWNrZHJvcENsaWNrID0gX3Byb3BzLm9uQmFja2Ryb3BDbGljayxcbiAgICAgICAgICBvbkNsb3NlID0gX3Byb3BzLm9uQ2xvc2UsXG4gICAgICAgICAgb25Fc2NhcGVLZXlEb3duID0gX3Byb3BzLm9uRXNjYXBlS2V5RG93bixcbiAgICAgICAgICBvblJlbmRlcmVkID0gX3Byb3BzLm9uUmVuZGVyZWQsXG4gICAgICAgICAgb3BlbiA9IF9wcm9wcy5vcGVuLFxuICAgICAgICAgIG1hbmFnZXIgPSBfcHJvcHMubWFuYWdlcixcbiAgICAgICAgICBvdGhlciA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyLmRlZmF1bHQpKF9wcm9wcywgW1wiQmFja2Ryb3BDb21wb25lbnRcIiwgXCJCYWNrZHJvcFByb3BzXCIsIFwiY2hpbGRyZW5cIiwgXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29udGFpbmVyXCIsIFwiZGlzYWJsZUF1dG9Gb2N1c1wiLCBcImRpc2FibGVCYWNrZHJvcENsaWNrXCIsIFwiZGlzYWJsZUVuZm9yY2VGb2N1c1wiLCBcImRpc2FibGVFc2NhcGVLZXlEb3duXCIsIFwiZGlzYWJsZVJlc3RvcmVGb2N1c1wiLCBcImhpZGVCYWNrZHJvcFwiLCBcImtlZXBNb3VudGVkXCIsIFwib25CYWNrZHJvcENsaWNrXCIsIFwib25DbG9zZVwiLCBcIm9uRXNjYXBlS2V5RG93blwiLCBcIm9uUmVuZGVyZWRcIiwgXCJvcGVuXCIsIFwibWFuYWdlclwiXSk7XG4gICAgICB2YXIgZXhpdGVkID0gdGhpcy5zdGF0ZS5leGl0ZWQ7XG4gICAgICB2YXIgaGFzVHJhbnNpdGlvbiA9IGdldEhhc1RyYW5zaXRpb24odGhpcy5wcm9wcyk7XG4gICAgICB2YXIgY2hpbGRQcm9wcyA9IHt9O1xuXG4gICAgICBpZiAoIWtlZXBNb3VudGVkICYmICFvcGVuICYmICghaGFzVHJhbnNpdGlvbiB8fCBleGl0ZWQpKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfSAvLyBJdCdzIGEgVHJhbnNpdGlvbiBsaWtlIGNvbXBvbmVudFxuXG5cbiAgICAgIGlmIChoYXNUcmFuc2l0aW9uKSB7XG4gICAgICAgIGNoaWxkUHJvcHMub25FeGl0ZWQgPSAoMCwgX2hlbHBlcnMuY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uKSh0aGlzLmhhbmRsZUV4aXRlZCwgY2hpbGRyZW4ucHJvcHMub25FeGl0ZWQpO1xuICAgICAgfVxuXG4gICAgICBpZiAoY2hpbGRyZW4ucHJvcHMucm9sZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNoaWxkUHJvcHMucm9sZSA9IGNoaWxkcmVuLnByb3BzLnJvbGUgfHwgJ2RvY3VtZW50JztcbiAgICAgIH1cblxuICAgICAgaWYgKGNoaWxkcmVuLnByb3BzLnRhYkluZGV4ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgY2hpbGRQcm9wcy50YWJJbmRleCA9IGNoaWxkcmVuLnByb3BzLnRhYkluZGV4IHx8ICctMSc7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9Qb3J0YWwuZGVmYXVsdCwge1xuICAgICAgICByZWY6IGZ1bmN0aW9uIHJlZihub2RlKSB7XG4gICAgICAgICAgX3RoaXMyLm1vdW50Tm9kZSA9IG5vZGUgPyBub2RlLmdldE1vdW50Tm9kZSgpIDogbm9kZTtcbiAgICAgICAgfSxcbiAgICAgICAgY29udGFpbmVyOiBjb250YWluZXIsXG4gICAgICAgIG9uUmVuZGVyZWQ6IHRoaXMuaGFuZGxlUmVuZGVyZWRcbiAgICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7XG4gICAgICAgIGNsYXNzTmFtZTogKDAsIF9jbGFzc25hbWVzLmRlZmF1bHQpKGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KSh7fSwgY2xhc3Nlcy5oaWRkZW4sIGV4aXRlZCkpXG4gICAgICB9LCBvdGhlciksIGhpZGVCYWNrZHJvcCA/IG51bGwgOiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KEJhY2tkcm9wQ29tcG9uZW50LCAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHtcbiAgICAgICAgb3Blbjogb3BlbixcbiAgICAgICAgb25DbGljazogdGhpcy5oYW5kbGVCYWNrZHJvcENsaWNrXG4gICAgICB9LCBCYWNrZHJvcFByb3BzKSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX1Jvb3RSZWYuZGVmYXVsdCwge1xuICAgICAgICByb290UmVmOiBmdW5jdGlvbiByb290UmVmKG5vZGUpIHtcbiAgICAgICAgICBfdGhpczIuZGlhbG9nRWxlbWVudCA9IG5vZGU7XG4gICAgICAgIH1cbiAgICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNsb25lRWxlbWVudChjaGlsZHJlbiwgY2hpbGRQcm9wcykpKSk7XG4gICAgfVxuICB9XSwgW3tcbiAgICBrZXk6IFwiZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyhuZXh0UHJvcHMpIHtcbiAgICAgIGlmIChuZXh0UHJvcHMub3Blbikge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGV4aXRlZDogZmFsc2VcbiAgICAgICAgfTtcbiAgICAgIH0gZWxzZSBpZiAoIWdldEhhc1RyYW5zaXRpb24obmV4dFByb3BzKSkge1xuICAgICAgICAvLyBPdGhlcndpc2UgbGV0IGhhbmRsZUV4aXRlZCB0YWtlIGNhcmUgb2YgbWFya2luZyBleGl0ZWQuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgZXhpdGVkOiB0cnVlXG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfV0pO1xuICByZXR1cm4gTW9kYWw7XG59KF9yZWFjdC5kZWZhdWx0LkNvbXBvbmVudCk7XG5cbk1vZGFsLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqXG4gICAqIEEgYmFja2Ryb3AgY29tcG9uZW50LiBUaGlzIHByb3BlcnR5IGVuYWJsZXMgY3VzdG9tIGJhY2tkcm9wIHJlbmRlcmluZy5cbiAgICovXG4gIEJhY2tkcm9wQ29tcG9uZW50OiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLCBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuY10pLFxuXG4gIC8qKlxuICAgKiBQcm9wZXJ0aWVzIGFwcGxpZWQgdG8gdGhlIGBCYWNrZHJvcGAgZWxlbWVudC5cbiAgICovXG4gIEJhY2tkcm9wUHJvcHM6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QsXG5cbiAgLyoqXG4gICAqIEEgc2luZ2xlIGNoaWxkIGNvbnRlbnQgZWxlbWVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBfcHJvcFR5cGVzLmRlZmF1bHQuZWxlbWVudCxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MtYXBpKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIEEgbm9kZSwgY29tcG9uZW50IGluc3RhbmNlLCBvciBmdW5jdGlvbiB0aGF0IHJldHVybnMgZWl0aGVyLlxuICAgKiBUaGUgYGNvbnRhaW5lcmAgd2lsbCBoYXZlIHRoZSBwb3J0YWwgY2hpbGRyZW4gYXBwZW5kZWQgdG8gaXQuXG4gICAqL1xuICBjb250YWluZXI6IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QsIF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jXSksXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIG1vZGFsIHdpbGwgbm90IGF1dG9tYXRpY2FsbHkgc2hpZnQgZm9jdXMgdG8gaXRzZWxmIHdoZW4gaXQgb3BlbnMsIGFuZFxuICAgKiByZXBsYWNlIGl0IHRvIHRoZSBsYXN0IGZvY3VzZWQgZWxlbWVudCB3aGVuIGl0IGNsb3Nlcy5cbiAgICogVGhpcyBhbHNvIHdvcmtzIGNvcnJlY3RseSB3aXRoIGFueSBtb2RhbCBjaGlsZHJlbiB0aGF0IGhhdmUgdGhlIGBkaXNhYmxlQXV0b0ZvY3VzYCBwcm9wLlxuICAgKlxuICAgKiBHZW5lcmFsbHkgdGhpcyBzaG91bGQgbmV2ZXIgYmUgc2V0IHRvIGB0cnVlYCBhcyBpdCBtYWtlcyB0aGUgbW9kYWwgbGVzc1xuICAgKiBhY2Nlc3NpYmxlIHRvIGFzc2lzdGl2ZSB0ZWNobm9sb2dpZXMsIGxpa2Ugc2NyZWVuIHJlYWRlcnMuXG4gICAqL1xuICBkaXNhYmxlQXV0b0ZvY3VzOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCBjbGlja2luZyB0aGUgYmFja2Ryb3Agd2lsbCBub3QgZmlyZSBhbnkgY2FsbGJhY2suXG4gICAqL1xuICBkaXNhYmxlQmFja2Ryb3BDbGljazogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIG1vZGFsIHdpbGwgbm90IHByZXZlbnQgZm9jdXMgZnJvbSBsZWF2aW5nIHRoZSBtb2RhbCB3aGlsZSBvcGVuLlxuICAgKlxuICAgKiBHZW5lcmFsbHkgdGhpcyBzaG91bGQgbmV2ZXIgYmUgc2V0IHRvIGB0cnVlYCBhcyBpdCBtYWtlcyB0aGUgbW9kYWwgbGVzc1xuICAgKiBhY2Nlc3NpYmxlIHRvIGFzc2lzdGl2ZSB0ZWNobm9sb2dpZXMsIGxpa2Ugc2NyZWVuIHJlYWRlcnMuXG4gICAqL1xuICBkaXNhYmxlRW5mb3JjZUZvY3VzOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCBoaXR0aW5nIGVzY2FwZSB3aWxsIG5vdCBmaXJlIGFueSBjYWxsYmFjay5cbiAgICovXG4gIGRpc2FibGVFc2NhcGVLZXlEb3duOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgbW9kYWwgd2lsbCBub3QgcmVzdG9yZSBmb2N1cyB0byBwcmV2aW91c2x5IGZvY3VzZWQgZWxlbWVudCBvbmNlXG4gICAqIG1vZGFsIGlzIGhpZGRlbi5cbiAgICovXG4gIGRpc2FibGVSZXN0b3JlRm9jdXM6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBiYWNrZHJvcCBpcyBub3QgcmVuZGVyZWQuXG4gICAqL1xuICBoaWRlQmFja2Ryb3A6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBBbHdheXMga2VlcCB0aGUgY2hpbGRyZW4gaW4gdGhlIERPTS5cbiAgICogVGhpcyBwcm9wZXJ0eSBjYW4gYmUgdXNlZnVsIGluIFNFTyBzaXR1YXRpb24gb3JcbiAgICogd2hlbiB5b3Ugd2FudCB0byBtYXhpbWl6ZSB0aGUgcmVzcG9uc2l2ZW5lc3Mgb2YgdGhlIE1vZGFsLlxuICAgKi9cbiAga2VlcE1vdW50ZWQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBBIG1vZGFsIG1hbmFnZXIgdXNlZCB0byB0cmFjayBhbmQgbWFuYWdlIHRoZSBzdGF0ZSBvZiBvcGVuXG4gICAqIE1vZGFscy4gVGhpcyBlbmFibGVzIGN1c3RvbWl6aW5nIGhvdyBtb2RhbHMgaW50ZXJhY3Qgd2l0aGluIGEgY29udGFpbmVyLlxuICAgKi9cbiAgbWFuYWdlcjogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdCxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgYmFja2Ryb3AgaXMgY2xpY2tlZC5cbiAgICovXG4gIG9uQmFja2Ryb3BDbGljazogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIGNvbXBvbmVudCByZXF1ZXN0cyB0byBiZSBjbG9zZWQuXG4gICAqIFRoZSBgcmVhc29uYCBwYXJhbWV0ZXIgY2FuIG9wdGlvbmFsbHkgYmUgdXNlZCB0byBjb250cm9sIHRoZSByZXNwb25zZSB0byBgb25DbG9zZWAuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBldmVudCBUaGUgZXZlbnQgc291cmNlIG9mIHRoZSBjYWxsYmFja1xuICAgKiBAcGFyYW0ge3N0cmluZ30gcmVhc29uIENhbiBiZTpgXCJlc2NhcGVLZXlEb3duXCJgLCBgXCJiYWNrZHJvcENsaWNrXCJgXG4gICAqL1xuICBvbkNsb3NlOiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgZXNjYXBlIGtleSBpcyBwcmVzc2VkLFxuICAgKiBgZGlzYWJsZUVzY2FwZUtleURvd25gIGlzIGZhbHNlIGFuZCB0aGUgbW9kYWwgaXMgaW4gZm9jdXMuXG4gICAqL1xuICBvbkVzY2FwZUtleURvd246IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBvbmNlIHRoZSBjaGlsZHJlbiBoYXMgYmVlbiBtb3VudGVkIGludG8gdGhlIGBjb250YWluZXJgLlxuICAgKiBJdCBzaWduYWxzIHRoYXQgdGhlIGBvcGVuPXt0cnVlfWAgcHJvcGVydHkgdG9vayBlZmZlY3QuXG4gICAqL1xuICBvblJlbmRlcmVkOiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYyxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgbW9kYWwgaXMgb3Blbi5cbiAgICovXG4gIG9wZW46IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLmlzUmVxdWlyZWRcbn0gOiB7fTtcbk1vZGFsLmRlZmF1bHRQcm9wcyA9IHtcbiAgZGlzYWJsZUF1dG9Gb2N1czogZmFsc2UsXG4gIGRpc2FibGVCYWNrZHJvcENsaWNrOiBmYWxzZSxcbiAgZGlzYWJsZUVuZm9yY2VGb2N1czogZmFsc2UsXG4gIGRpc2FibGVFc2NhcGVLZXlEb3duOiBmYWxzZSxcbiAgZGlzYWJsZVJlc3RvcmVGb2N1czogZmFsc2UsXG4gIGhpZGVCYWNrZHJvcDogZmFsc2UsXG4gIGtlZXBNb3VudGVkOiBmYWxzZSxcbiAgLy8gTW9kYWxzIGRvbid0IG9wZW4gb24gdGhlIHNlcnZlciBzbyB0aGlzIHdvbid0IGNvbmZsaWN0IHdpdGggY29uY3VycmVudCByZXF1ZXN0cy5cbiAgbWFuYWdlcjogbmV3IF9Nb2RhbE1hbmFnZXIuZGVmYXVsdCgpLFxuICBCYWNrZHJvcENvbXBvbmVudDogX0JhY2tkcm9wLmRlZmF1bHRcbn07XG5cbnZhciBfZGVmYXVsdCA9ICgwLCBfd2l0aFN0eWxlcy5kZWZhdWx0KShzdHlsZXMsIHtcbiAgZmxpcDogZmFsc2UsXG4gIG5hbWU6ICdNdWlNb2RhbCdcbn0pKE1vZGFsKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLnN0eWxlcyA9IHZvaWQgMDtcblxudmFyIF9leHRlbmRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9leHRlbmRzXCIpKTtcblxudmFyIF9kZWZpbmVQcm9wZXJ0eTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vZGVmaW5lUHJvcGVydHlcIikpO1xuXG52YXIgX29iamVjdFNwcmVhZDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vb2JqZWN0U3ByZWFkXCIpKTtcblxudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIikpO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xuXG52YXIgX2NsYXNzbmFtZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJjbGFzc25hbWVzXCIpKTtcblxudmFyIF93aXRoU3R5bGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vc3R5bGVzL3dpdGhTdHlsZXNcIikpO1xuXG52YXIgX2hlbHBlcnMgPSByZXF1aXJlKFwiLi4vdXRpbHMvaGVscGVyc1wiKTtcblxudmFyIF9Nb2RhbCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL01vZGFsXCIpKTtcblxudmFyIF9GYWRlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vRmFkZVwiKSk7XG5cbnZhciBfdHJhbnNpdGlvbnMgPSByZXF1aXJlKFwiLi4vc3R5bGVzL3RyYW5zaXRpb25zXCIpO1xuXG52YXIgX1BhcGVyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vUGFwZXJcIikpO1xuXG4vLyBAaW5oZXJpdGVkQ29tcG9uZW50IE1vZGFsXG52YXIgc3R5bGVzID0gZnVuY3Rpb24gc3R5bGVzKHRoZW1lKSB7XG4gIHJldHVybiB7XG4gICAgcm9vdDoge1xuICAgICAganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLFxuICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcidcbiAgICB9LFxuICAgIHBhcGVyOiB7XG4gICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICBtYXJnaW46IHRoZW1lLnNwYWNpbmcudW5pdCAqIDQsXG4gICAgICBmbGV4RGlyZWN0aW9uOiAnY29sdW1uJyxcbiAgICAgIGZsZXg6ICcwIDEgYXV0bycsXG4gICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgIG1heEhlaWdodDogJzkwdmgnLFxuICAgICAgb3ZlcmZsb3dZOiAnYXV0bycsXG4gICAgICAvLyBGaXggSUUxMSBpc3N1ZSwgdG8gcmVtb3ZlIGF0IHNvbWUgcG9pbnQuXG4gICAgICAvLyBXZSBkaXNhYmxlIHRoZSBmb2N1cyByaW5nIGZvciBtb3VzZSwgdG91Y2ggYW5kIGtleWJvYXJkIHVzZXJzLlxuICAgICAgb3V0bGluZTogJ25vbmUnXG4gICAgfSxcbiAgICBwYXBlcldpZHRoWHM6IHtcbiAgICAgIG1heFdpZHRoOiBNYXRoLm1heCh0aGVtZS5icmVha3BvaW50cy52YWx1ZXMueHMsIDM2MClcbiAgICB9LFxuICAgIHBhcGVyV2lkdGhTbToge1xuICAgICAgbWF4V2lkdGg6IHRoZW1lLmJyZWFrcG9pbnRzLnZhbHVlcy5zbVxuICAgIH0sXG4gICAgcGFwZXJXaWR0aE1kOiB7XG4gICAgICBtYXhXaWR0aDogdGhlbWUuYnJlYWtwb2ludHMudmFsdWVzLm1kXG4gICAgfSxcbiAgICBwYXBlckZ1bGxXaWR0aDoge1xuICAgICAgd2lkdGg6ICcxMDAlJ1xuICAgIH0sXG4gICAgcGFwZXJGdWxsU2NyZWVuOiB7XG4gICAgICBtYXJnaW46IDAsXG4gICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgbWF4V2lkdGg6ICcxMDAlJyxcbiAgICAgIGhlaWdodDogJzEwMCUnLFxuICAgICAgbWF4SGVpZ2h0OiAnMTAwJScsXG4gICAgICBib3JkZXJSYWRpdXM6IDBcbiAgICB9XG4gIH07XG59O1xuLyoqXG4gKiBEaWFsb2dzIGFyZSBvdmVybGFpZCBtb2RhbCBwYXBlciBiYXNlZCBjb21wb25lbnRzIHdpdGggYSBiYWNrZHJvcC5cbiAqL1xuXG5cbmV4cG9ydHMuc3R5bGVzID0gc3R5bGVzO1xuXG5mdW5jdGlvbiBEaWFsb2cocHJvcHMpIHtcbiAgdmFyIF9jbGFzc05hbWVzO1xuXG4gIHZhciBCYWNrZHJvcFByb3BzID0gcHJvcHMuQmFja2Ryb3BQcm9wcyxcbiAgICAgIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIGRpc2FibGVCYWNrZHJvcENsaWNrID0gcHJvcHMuZGlzYWJsZUJhY2tkcm9wQ2xpY2ssXG4gICAgICBkaXNhYmxlRXNjYXBlS2V5RG93biA9IHByb3BzLmRpc2FibGVFc2NhcGVLZXlEb3duLFxuICAgICAgZnVsbFNjcmVlbiA9IHByb3BzLmZ1bGxTY3JlZW4sXG4gICAgICBmdWxsV2lkdGggPSBwcm9wcy5mdWxsV2lkdGgsXG4gICAgICBtYXhXaWR0aCA9IHByb3BzLm1heFdpZHRoLFxuICAgICAgb25CYWNrZHJvcENsaWNrID0gcHJvcHMub25CYWNrZHJvcENsaWNrLFxuICAgICAgb25DbG9zZSA9IHByb3BzLm9uQ2xvc2UsXG4gICAgICBvbkVudGVyID0gcHJvcHMub25FbnRlcixcbiAgICAgIG9uRW50ZXJlZCA9IHByb3BzLm9uRW50ZXJlZCxcbiAgICAgIG9uRW50ZXJpbmcgPSBwcm9wcy5vbkVudGVyaW5nLFxuICAgICAgb25Fc2NhcGVLZXlEb3duID0gcHJvcHMub25Fc2NhcGVLZXlEb3duLFxuICAgICAgb25FeGl0ID0gcHJvcHMub25FeGl0LFxuICAgICAgb25FeGl0ZWQgPSBwcm9wcy5vbkV4aXRlZCxcbiAgICAgIG9uRXhpdGluZyA9IHByb3BzLm9uRXhpdGluZyxcbiAgICAgIG9wZW4gPSBwcm9wcy5vcGVuLFxuICAgICAgUGFwZXJQcm9wcyA9IHByb3BzLlBhcGVyUHJvcHMsXG4gICAgICBUcmFuc2l0aW9uQ29tcG9uZW50ID0gcHJvcHMuVHJhbnNpdGlvbkNvbXBvbmVudCxcbiAgICAgIHRyYW5zaXRpb25EdXJhdGlvbiA9IHByb3BzLnRyYW5zaXRpb25EdXJhdGlvbixcbiAgICAgIFRyYW5zaXRpb25Qcm9wcyA9IHByb3BzLlRyYW5zaXRpb25Qcm9wcyxcbiAgICAgIG90aGVyID0gKDAsIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIuZGVmYXVsdCkocHJvcHMsIFtcIkJhY2tkcm9wUHJvcHNcIiwgXCJjaGlsZHJlblwiLCBcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJkaXNhYmxlQmFja2Ryb3BDbGlja1wiLCBcImRpc2FibGVFc2NhcGVLZXlEb3duXCIsIFwiZnVsbFNjcmVlblwiLCBcImZ1bGxXaWR0aFwiLCBcIm1heFdpZHRoXCIsIFwib25CYWNrZHJvcENsaWNrXCIsIFwib25DbG9zZVwiLCBcIm9uRW50ZXJcIiwgXCJvbkVudGVyZWRcIiwgXCJvbkVudGVyaW5nXCIsIFwib25Fc2NhcGVLZXlEb3duXCIsIFwib25FeGl0XCIsIFwib25FeGl0ZWRcIiwgXCJvbkV4aXRpbmdcIiwgXCJvcGVuXCIsIFwiUGFwZXJQcm9wc1wiLCBcIlRyYW5zaXRpb25Db21wb25lbnRcIiwgXCJ0cmFuc2l0aW9uRHVyYXRpb25cIiwgXCJUcmFuc2l0aW9uUHJvcHNcIl0pO1xuICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfTW9kYWwuZGVmYXVsdCwgKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7XG4gICAgY2xhc3NOYW1lOiAoMCwgX2NsYXNzbmFtZXMuZGVmYXVsdCkoY2xhc3Nlcy5yb290LCBjbGFzc05hbWUpLFxuICAgIEJhY2tkcm9wUHJvcHM6ICgwLCBfb2JqZWN0U3ByZWFkMi5kZWZhdWx0KSh7XG4gICAgICB0cmFuc2l0aW9uRHVyYXRpb246IHRyYW5zaXRpb25EdXJhdGlvblxuICAgIH0sIEJhY2tkcm9wUHJvcHMpLFxuICAgIGRpc2FibGVCYWNrZHJvcENsaWNrOiBkaXNhYmxlQmFja2Ryb3BDbGljayxcbiAgICBkaXNhYmxlRXNjYXBlS2V5RG93bjogZGlzYWJsZUVzY2FwZUtleURvd24sXG4gICAgb25CYWNrZHJvcENsaWNrOiBvbkJhY2tkcm9wQ2xpY2ssXG4gICAgb25Fc2NhcGVLZXlEb3duOiBvbkVzY2FwZUtleURvd24sXG4gICAgb25DbG9zZTogb25DbG9zZSxcbiAgICBvcGVuOiBvcGVuLFxuICAgIHJvbGU6IFwiZGlhbG9nXCJcbiAgfSwgb3RoZXIpLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFRyYW5zaXRpb25Db21wb25lbnQsICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe1xuICAgIGFwcGVhcjogdHJ1ZSxcbiAgICBcImluXCI6IG9wZW4sXG4gICAgdGltZW91dDogdHJhbnNpdGlvbkR1cmF0aW9uLFxuICAgIG9uRW50ZXI6IG9uRW50ZXIsXG4gICAgb25FbnRlcmluZzogb25FbnRlcmluZyxcbiAgICBvbkVudGVyZWQ6IG9uRW50ZXJlZCxcbiAgICBvbkV4aXQ6IG9uRXhpdCxcbiAgICBvbkV4aXRpbmc6IG9uRXhpdGluZyxcbiAgICBvbkV4aXRlZDogb25FeGl0ZWRcbiAgfSwgVHJhbnNpdGlvblByb3BzKSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfUGFwZXIuZGVmYXVsdCwgKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7XG4gICAgZWxldmF0aW9uOiAyNCxcbiAgICBjbGFzc05hbWU6ICgwLCBfY2xhc3NuYW1lcy5kZWZhdWx0KShjbGFzc2VzLnBhcGVyLCAoX2NsYXNzTmFtZXMgPSB7fSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2NsYXNzTmFtZXMsIGNsYXNzZXNbXCJwYXBlcldpZHRoXCIuY29uY2F0KG1heFdpZHRoID8gKDAsIF9oZWxwZXJzLmNhcGl0YWxpemUpKG1heFdpZHRoKSA6ICcnKV0sIG1heFdpZHRoKSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2NsYXNzTmFtZXMsIGNsYXNzZXMucGFwZXJGdWxsU2NyZWVuLCBmdWxsU2NyZWVuKSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2NsYXNzTmFtZXMsIGNsYXNzZXMucGFwZXJGdWxsV2lkdGgsIGZ1bGxXaWR0aCksIF9jbGFzc05hbWVzKSlcbiAgfSwgUGFwZXJQcm9wcyksIGNoaWxkcmVuKSkpO1xufVxuXG5EaWFsb2cucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgQmFja2Ryb3BQcm9wczogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdCxcblxuICAvKipcbiAgICogRGlhbG9nIGNoaWxkcmVuLCB1c3VhbGx5IHRoZSBpbmNsdWRlZCBzdWItY29tcG9uZW50cy5cbiAgICovXG4gIGNoaWxkcmVuOiBfcHJvcFR5cGVzLmRlZmF1bHQubm9kZS5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2Nzcy1hcGkpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCBjbGlja2luZyB0aGUgYmFja2Ryb3Agd2lsbCBub3QgZmlyZSB0aGUgYG9uQ2xvc2VgIGNhbGxiYWNrLlxuICAgKi9cbiAgZGlzYWJsZUJhY2tkcm9wQ2xpY2s6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIGhpdHRpbmcgZXNjYXBlIHdpbGwgbm90IGZpcmUgdGhlIGBvbkNsb3NlYCBjYWxsYmFjay5cbiAgICovXG4gIGRpc2FibGVFc2NhcGVLZXlEb3duOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgZGlhbG9nIHdpbGwgYmUgZnVsbC1zY3JlZW5cbiAgICovXG4gIGZ1bGxTY3JlZW46IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBkaWFsb2cgc3RyZXRjaGVzIHRvIGBtYXhXaWR0aGAuXG4gICAqL1xuICBmdWxsV2lkdGg6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBEZXRlcm1pbmUgdGhlIG1heCB3aWR0aCBvZiB0aGUgZGlhbG9nLlxuICAgKiBUaGUgZGlhbG9nIHdpZHRoIGdyb3dzIHdpdGggdGhlIHNpemUgb2YgdGhlIHNjcmVlbiwgdGhpcyBwcm9wZXJ0eSBpcyB1c2VmdWxcbiAgICogb24gdGhlIGRlc2t0b3Agd2hlcmUgeW91IG1pZ2h0IG5lZWQgc29tZSBjb2hlcmVudCBkaWZmZXJlbnQgd2lkdGggc2l6ZSBhY3Jvc3MgeW91clxuICAgKiBhcHBsaWNhdGlvbi4gU2V0IHRvIGBmYWxzZWAgdG8gZGlzYWJsZSBgbWF4V2lkdGhgLlxuICAgKi9cbiAgbWF4V2lkdGg6IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZihbJ3hzJywgJ3NtJywgJ21kJywgZmFsc2VdKSxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgYmFja2Ryb3AgaXMgY2xpY2tlZC5cbiAgICovXG4gIG9uQmFja2Ryb3BDbGljazogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIGNvbXBvbmVudCByZXF1ZXN0cyB0byBiZSBjbG9zZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBldmVudCBUaGUgZXZlbnQgc291cmNlIG9mIHRoZSBjYWxsYmFja1xuICAgKi9cbiAgb25DbG9zZTogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGJlZm9yZSB0aGUgZGlhbG9nIGVudGVycy5cbiAgICovXG4gIG9uRW50ZXI6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBkaWFsb2cgaGFzIGVudGVyZWQuXG4gICAqL1xuICBvbkVudGVyZWQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBkaWFsb2cgaXMgZW50ZXJpbmcuXG4gICAqL1xuICBvbkVudGVyaW5nOiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgZXNjYXBlIGtleSBpcyBwcmVzc2VkLFxuICAgKiBgZGlzYWJsZUtleWJvYXJkYCBpcyBmYWxzZSBhbmQgdGhlIG1vZGFsIGlzIGluIGZvY3VzLlxuICAgKi9cbiAgb25Fc2NhcGVLZXlEb3duOiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgYmVmb3JlIHRoZSBkaWFsb2cgZXhpdHMuXG4gICAqL1xuICBvbkV4aXQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBkaWFsb2cgaGFzIGV4aXRlZC5cbiAgICovXG4gIG9uRXhpdGVkOiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgZGlhbG9nIGlzIGV4aXRpbmcuXG4gICAqL1xuICBvbkV4aXRpbmc6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBEaWFsb2cgaXMgb3Blbi5cbiAgICovXG4gIG9wZW46IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIFByb3BlcnRpZXMgYXBwbGllZCB0byB0aGUgYFBhcGVyYCBlbGVtZW50LlxuICAgKi9cbiAgUGFwZXJQcm9wczogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdCxcblxuICAvKipcbiAgICogVHJhbnNpdGlvbiBjb21wb25lbnQuXG4gICAqL1xuICBUcmFuc2l0aW9uQ29tcG9uZW50OiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLCBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuY10pLFxuXG4gIC8qKlxuICAgKiBUaGUgZHVyYXRpb24gZm9yIHRoZSB0cmFuc2l0aW9uLCBpbiBtaWxsaXNlY29uZHMuXG4gICAqIFlvdSBtYXkgc3BlY2lmeSBhIHNpbmdsZSB0aW1lb3V0IGZvciBhbGwgdHJhbnNpdGlvbnMsIG9yIGluZGl2aWR1YWxseSB3aXRoIGFuIG9iamVjdC5cbiAgICovXG4gIHRyYW5zaXRpb25EdXJhdGlvbjogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlcy5kZWZhdWx0Lm51bWJlciwgX3Byb3BUeXBlcy5kZWZhdWx0LnNoYXBlKHtcbiAgICBlbnRlcjogX3Byb3BUeXBlcy5kZWZhdWx0Lm51bWJlcixcbiAgICBleGl0OiBfcHJvcFR5cGVzLmRlZmF1bHQubnVtYmVyXG4gIH0pXSksXG5cbiAgLyoqXG4gICAqIFByb3BlcnRpZXMgYXBwbGllZCB0byB0aGUgYFRyYW5zaXRpb25gIGVsZW1lbnQuXG4gICAqL1xuICBUcmFuc2l0aW9uUHJvcHM6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3Rcbn0gOiB7fTtcbkRpYWxvZy5kZWZhdWx0UHJvcHMgPSB7XG4gIGRpc2FibGVCYWNrZHJvcENsaWNrOiBmYWxzZSxcbiAgZGlzYWJsZUVzY2FwZUtleURvd246IGZhbHNlLFxuICBmdWxsU2NyZWVuOiBmYWxzZSxcbiAgZnVsbFdpZHRoOiBmYWxzZSxcbiAgbWF4V2lkdGg6ICdzbScsXG4gIFRyYW5zaXRpb25Db21wb25lbnQ6IF9GYWRlLmRlZmF1bHQsXG4gIHRyYW5zaXRpb25EdXJhdGlvbjoge1xuICAgIGVudGVyOiBfdHJhbnNpdGlvbnMuZHVyYXRpb24uZW50ZXJpbmdTY3JlZW4sXG4gICAgZXhpdDogX3RyYW5zaXRpb25zLmR1cmF0aW9uLmxlYXZpbmdTY3JlZW5cbiAgfVxufTtcblxudmFyIF9kZWZhdWx0ID0gKDAsIF93aXRoU3R5bGVzLmRlZmF1bHQpKHN0eWxlcywge1xuICBuYW1lOiAnTXVpRGlhbG9nJ1xufSkoRGlhbG9nKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfY2xhc3NDYWxsQ2hlY2syID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2NsYXNzQ2FsbENoZWNrXCIpKTtcblxudmFyIF9jcmVhdGVDbGFzczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vY3JlYXRlQ2xhc3NcIikpO1xuXG52YXIgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5cIikpO1xuXG52YXIgX2luaGVyaXRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9pbmhlcml0c1wiKSk7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbnZhciBfc3R5bGVzID0gcmVxdWlyZShcIi4uL3N0eWxlc1wiKTtcblxudmFyIF9leGFjdFByb3AgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi91dGlscy9leGFjdFByb3BcIikpO1xuXG52YXIgc3R5bGVzID0gZnVuY3Rpb24gc3R5bGVzKHRoZW1lKSB7XG4gIHJldHVybiB7XG4gICAgJ0BnbG9iYWwnOiB7XG4gICAgICBodG1sOiB7XG4gICAgICAgIFdlYmtpdEZvbnRTbW9vdGhpbmc6ICdhbnRpYWxpYXNlZCcsXG4gICAgICAgIC8vIEFudGlhbGlhc2luZy5cbiAgICAgICAgTW96T3N4Rm9udFNtb290aGluZzogJ2dyYXlzY2FsZScsXG4gICAgICAgIC8vIEFudGlhbGlhc2luZy5cbiAgICAgICAgLy8gQ2hhbmdlIGZyb20gYGJveC1zaXppbmc6IGNvbnRlbnQtYm94YCBzbyB0aGF0IGB3aWR0aGBcbiAgICAgICAgLy8gaXMgbm90IGFmZmVjdGVkIGJ5IGBwYWRkaW5nYCBvciBgYm9yZGVyYC5cbiAgICAgICAgYm94U2l6aW5nOiAnYm9yZGVyLWJveCdcbiAgICAgIH0sXG4gICAgICAnKiwgKjo6YmVmb3JlLCAqOjphZnRlcic6IHtcbiAgICAgICAgYm94U2l6aW5nOiAnaW5oZXJpdCdcbiAgICAgIH0sXG4gICAgICBib2R5OiB7XG4gICAgICAgIG1hcmdpbjogMCxcbiAgICAgICAgLy8gUmVtb3ZlIHRoZSBtYXJnaW4gaW4gYWxsIGJyb3dzZXJzLlxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUuYmFja2dyb3VuZC5kZWZhdWx0LFxuICAgICAgICAnQG1lZGlhIHByaW50Jzoge1xuICAgICAgICAgIC8vIFNhdmUgcHJpbnRlciBpbmsuXG4gICAgICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLmNvbW1vbi53aGl0ZVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9O1xufTtcbi8qKlxuICogS2lja3N0YXJ0IGFuIGVsZWdhbnQsIGNvbnNpc3RlbnQsIGFuZCBzaW1wbGUgYmFzZWxpbmUgdG8gYnVpbGQgdXBvbi5cbiAqL1xuXG5cbnZhciBDc3NCYXNlbGluZSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICAoMCwgX2luaGVyaXRzMi5kZWZhdWx0KShDc3NCYXNlbGluZSwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gQ3NzQmFzZWxpbmUoKSB7XG4gICAgKDAsIF9jbGFzc0NhbGxDaGVjazIuZGVmYXVsdCkodGhpcywgQ3NzQmFzZWxpbmUpO1xuICAgIHJldHVybiAoMCwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yLmRlZmF1bHQpKHRoaXMsIChDc3NCYXNlbGluZS5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKENzc0Jhc2VsaW5lKSkuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICAoMCwgX2NyZWF0ZUNsYXNzMi5kZWZhdWx0KShDc3NCYXNlbGluZSwgW3tcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHJldHVybiB0aGlzLnByb3BzLmNoaWxkcmVuO1xuICAgIH1cbiAgfV0pO1xuICByZXR1cm4gQ3NzQmFzZWxpbmU7XG59KF9yZWFjdC5kZWZhdWx0LkNvbXBvbmVudCk7XG5cbkNzc0Jhc2VsaW5lLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqXG4gICAqIFlvdSBjYW4gd3JhcCBhIG5vZGUuXG4gICAqL1xuICBjaGlsZHJlbjogX3Byb3BUeXBlcy5kZWZhdWx0Lm5vZGUsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzZXM6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QuaXNSZXF1aXJlZFxufSA6IHt9O1xuQ3NzQmFzZWxpbmUucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gKDAsIF9leGFjdFByb3AuZGVmYXVsdCkoQ3NzQmFzZWxpbmUucHJvcFR5cGVzLCAnQ3NzQmFzZWxpbmUnKSA6IHt9O1xuQ3NzQmFzZWxpbmUuZGVmYXVsdFByb3BzID0ge1xuICBjaGlsZHJlbjogbnVsbFxufTtcblxudmFyIF9kZWZhdWx0ID0gKDAsIF9zdHlsZXMud2l0aFN0eWxlcykoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlDc3NCYXNlbGluZSdcbn0pKENzc0Jhc2VsaW5lKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLnN0eWxlcyA9IHZvaWQgMDtcblxudmFyIF9leHRlbmRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9leHRlbmRzXCIpKTtcblxudmFyIF9vYmplY3RTcHJlYWQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL29iamVjdFNwcmVhZFwiKSk7XG5cbnZhciBfZGVmaW5lUHJvcGVydHkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2RlZmluZVByb3BlcnR5XCIpKTtcblxudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIikpO1xuXG52YXIgX2NsYXNzQ2FsbENoZWNrMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9jbGFzc0NhbGxDaGVja1wiKSk7XG5cbnZhciBfY3JlYXRlQ2xhc3MyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2NyZWF0ZUNsYXNzXCIpKTtcblxudmFyIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuXCIpKTtcblxudmFyIF9pbmhlcml0czIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vaW5oZXJpdHNcIikpO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX2NsYXNzbmFtZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJjbGFzc25hbWVzXCIpKTtcblxudmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKTtcblxudmFyIF9UcmFuc2l0aW9uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3QtdHJhbnNpdGlvbi1ncm91cC9UcmFuc2l0aW9uXCIpKTtcblxudmFyIF93aXRoU3R5bGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vc3R5bGVzL3dpdGhTdHlsZXNcIikpO1xuXG52YXIgX3RyYW5zaXRpb25zID0gcmVxdWlyZShcIi4uL3N0eWxlcy90cmFuc2l0aW9uc1wiKTtcblxudmFyIF91dGlscyA9IHJlcXVpcmUoXCIuLi90cmFuc2l0aW9ucy91dGlsc1wiKTtcblxuLy8gQGluaGVyaXRlZENvbXBvbmVudCBUcmFuc2l0aW9uXG52YXIgc3R5bGVzID0gZnVuY3Rpb24gc3R5bGVzKHRoZW1lKSB7XG4gIHJldHVybiB7XG4gICAgY29udGFpbmVyOiB7XG4gICAgICBoZWlnaHQ6IDAsXG4gICAgICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gICAgICB0cmFuc2l0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ2hlaWdodCcpXG4gICAgfSxcbiAgICBlbnRlcmVkOiB7XG4gICAgICBoZWlnaHQ6ICdhdXRvJ1xuICAgIH0sXG4gICAgd3JhcHBlcjoge1xuICAgICAgLy8gSGFjayB0byBnZXQgY2hpbGRyZW4gd2l0aCBhIG5lZ2F0aXZlIG1hcmdpbiB0byBub3QgZmFsc2lmeSB0aGUgaGVpZ2h0IGNvbXB1dGF0aW9uLlxuICAgICAgZGlzcGxheTogJ2ZsZXgnXG4gICAgfSxcbiAgICB3cmFwcGVySW5uZXI6IHtcbiAgICAgIHdpZHRoOiAnMTAwJSdcbiAgICB9XG4gIH07XG59O1xuLyoqXG4gKiBUaGUgQ29sbGFwc2UgdHJhbnNpdGlvbiBpcyB1c2VkIGJ5IHRoZVxuICogW1ZlcnRpY2FsIFN0ZXBwZXJdKC9kZW1vcy9zdGVwcGVycyN2ZXJ0aWNhbC1zdGVwcGVyKSBTdGVwQ29udGVudCBjb21wb25lbnQuXG4gKiBJdCB1c2VzIFtyZWFjdC10cmFuc2l0aW9uLWdyb3VwXShodHRwczovL2dpdGh1Yi5jb20vcmVhY3Rqcy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwKSBpbnRlcm5hbGx5LlxuICovXG5cblxuZXhwb3J0cy5zdHlsZXMgPSBzdHlsZXM7XG5cbnZhciBDb2xsYXBzZSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICAoMCwgX2luaGVyaXRzMi5kZWZhdWx0KShDb2xsYXBzZSwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gQ29sbGFwc2UoKSB7XG4gICAgdmFyIF9yZWY7XG5cbiAgICB2YXIgX3RlbXAsIF90aGlzO1xuXG4gICAgKDAsIF9jbGFzc0NhbGxDaGVjazIuZGVmYXVsdCkodGhpcywgQ29sbGFwc2UpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiAoMCwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yLmRlZmF1bHQpKF90aGlzLCAoX3RlbXAgPSBfdGhpcyA9ICgwLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIuZGVmYXVsdCkodGhpcywgKF9yZWYgPSBDb2xsYXBzZS5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKENvbGxhcHNlKSkuY2FsbC5hcHBseShfcmVmLCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzLndyYXBwZXIgPSBudWxsLCBfdGhpcy5hdXRvVHJhbnNpdGlvbkR1cmF0aW9uID0gdW5kZWZpbmVkLCBfdGhpcy50aW1lciA9IG51bGwsIF90aGlzLmhhbmRsZUVudGVyID0gZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgIG5vZGUuc3R5bGUuaGVpZ2h0ID0gX3RoaXMucHJvcHMuY29sbGFwc2VkSGVpZ2h0O1xuXG4gICAgICBpZiAoX3RoaXMucHJvcHMub25FbnRlcikge1xuICAgICAgICBfdGhpcy5wcm9wcy5vbkVudGVyKG5vZGUpO1xuICAgICAgfVxuICAgIH0sIF90aGlzLmhhbmRsZUVudGVyaW5nID0gZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IF90aGlzLnByb3BzLFxuICAgICAgICAgIHRpbWVvdXQgPSBfdGhpcyRwcm9wcy50aW1lb3V0LFxuICAgICAgICAgIHRoZW1lID0gX3RoaXMkcHJvcHMudGhlbWU7XG4gICAgICB2YXIgd3JhcHBlckhlaWdodCA9IF90aGlzLndyYXBwZXIgPyBfdGhpcy53cmFwcGVyLmNsaWVudEhlaWdodCA6IDA7XG5cbiAgICAgIHZhciBfZ2V0VHJhbnNpdGlvblByb3BzID0gKDAsIF91dGlscy5nZXRUcmFuc2l0aW9uUHJvcHMpKF90aGlzLnByb3BzLCB7XG4gICAgICAgIG1vZGU6ICdlbnRlcidcbiAgICAgIH0pLFxuICAgICAgICAgIHRyYW5zaXRpb25EdXJhdGlvbiA9IF9nZXRUcmFuc2l0aW9uUHJvcHMuZHVyYXRpb247XG5cbiAgICAgIGlmICh0aW1lb3V0ID09PSAnYXV0bycpIHtcbiAgICAgICAgdmFyIGR1cmF0aW9uMiA9IHRoZW1lLnRyYW5zaXRpb25zLmdldEF1dG9IZWlnaHREdXJhdGlvbih3cmFwcGVySGVpZ2h0KTtcbiAgICAgICAgbm9kZS5zdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSBcIlwiLmNvbmNhdChkdXJhdGlvbjIsIFwibXNcIik7XG4gICAgICAgIF90aGlzLmF1dG9UcmFuc2l0aW9uRHVyYXRpb24gPSBkdXJhdGlvbjI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBub2RlLnN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9IHR5cGVvZiB0cmFuc2l0aW9uRHVyYXRpb24gPT09ICdzdHJpbmcnID8gdHJhbnNpdGlvbkR1cmF0aW9uIDogXCJcIi5jb25jYXQodHJhbnNpdGlvbkR1cmF0aW9uLCBcIm1zXCIpO1xuICAgICAgfVxuXG4gICAgICBub2RlLnN0eWxlLmhlaWdodCA9IFwiXCIuY29uY2F0KHdyYXBwZXJIZWlnaHQsIFwicHhcIik7XG5cbiAgICAgIGlmIChfdGhpcy5wcm9wcy5vbkVudGVyaW5nKSB7XG4gICAgICAgIF90aGlzLnByb3BzLm9uRW50ZXJpbmcobm9kZSk7XG4gICAgICB9XG4gICAgfSwgX3RoaXMuaGFuZGxlRW50ZXJlZCA9IGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICBub2RlLnN0eWxlLmhlaWdodCA9ICdhdXRvJztcblxuICAgICAgaWYgKF90aGlzLnByb3BzLm9uRW50ZXJlZCkge1xuICAgICAgICBfdGhpcy5wcm9wcy5vbkVudGVyZWQobm9kZSk7XG4gICAgICB9XG4gICAgfSwgX3RoaXMuaGFuZGxlRXhpdCA9IGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICB2YXIgd3JhcHBlckhlaWdodCA9IF90aGlzLndyYXBwZXIgPyBfdGhpcy53cmFwcGVyLmNsaWVudEhlaWdodCA6IDA7XG4gICAgICBub2RlLnN0eWxlLmhlaWdodCA9IFwiXCIuY29uY2F0KHdyYXBwZXJIZWlnaHQsIFwicHhcIik7XG5cbiAgICAgIGlmIChfdGhpcy5wcm9wcy5vbkV4aXQpIHtcbiAgICAgICAgX3RoaXMucHJvcHMub25FeGl0KG5vZGUpO1xuICAgICAgfVxuICAgIH0sIF90aGlzLmhhbmRsZUV4aXRpbmcgPSBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgdmFyIF90aGlzJHByb3BzMiA9IF90aGlzLnByb3BzLFxuICAgICAgICAgIHRpbWVvdXQgPSBfdGhpcyRwcm9wczIudGltZW91dCxcbiAgICAgICAgICB0aGVtZSA9IF90aGlzJHByb3BzMi50aGVtZTtcbiAgICAgIHZhciB3cmFwcGVySGVpZ2h0ID0gX3RoaXMud3JhcHBlciA/IF90aGlzLndyYXBwZXIuY2xpZW50SGVpZ2h0IDogMDtcblxuICAgICAgdmFyIF9nZXRUcmFuc2l0aW9uUHJvcHMyID0gKDAsIF91dGlscy5nZXRUcmFuc2l0aW9uUHJvcHMpKF90aGlzLnByb3BzLCB7XG4gICAgICAgIG1vZGU6ICdleGl0J1xuICAgICAgfSksXG4gICAgICAgICAgdHJhbnNpdGlvbkR1cmF0aW9uID0gX2dldFRyYW5zaXRpb25Qcm9wczIuZHVyYXRpb247XG5cbiAgICAgIGlmICh0aW1lb3V0ID09PSAnYXV0bycpIHtcbiAgICAgICAgdmFyIGR1cmF0aW9uMiA9IHRoZW1lLnRyYW5zaXRpb25zLmdldEF1dG9IZWlnaHREdXJhdGlvbih3cmFwcGVySGVpZ2h0KTtcbiAgICAgICAgbm9kZS5zdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSBcIlwiLmNvbmNhdChkdXJhdGlvbjIsIFwibXNcIik7XG4gICAgICAgIF90aGlzLmF1dG9UcmFuc2l0aW9uRHVyYXRpb24gPSBkdXJhdGlvbjI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBub2RlLnN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9IHR5cGVvZiB0cmFuc2l0aW9uRHVyYXRpb24gPT09ICdzdHJpbmcnID8gdHJhbnNpdGlvbkR1cmF0aW9uIDogXCJcIi5jb25jYXQodHJhbnNpdGlvbkR1cmF0aW9uLCBcIm1zXCIpO1xuICAgICAgfVxuXG4gICAgICBub2RlLnN0eWxlLmhlaWdodCA9IF90aGlzLnByb3BzLmNvbGxhcHNlZEhlaWdodDtcblxuICAgICAgaWYgKF90aGlzLnByb3BzLm9uRXhpdGluZykge1xuICAgICAgICBfdGhpcy5wcm9wcy5vbkV4aXRpbmcobm9kZSk7XG4gICAgICB9XG4gICAgfSwgX3RoaXMuYWRkRW5kTGlzdGVuZXIgPSBmdW5jdGlvbiAoXywgbmV4dCkge1xuICAgICAgaWYgKF90aGlzLnByb3BzLnRpbWVvdXQgPT09ICdhdXRvJykge1xuICAgICAgICBfdGhpcy50aW1lciA9IHNldFRpbWVvdXQobmV4dCwgX3RoaXMuYXV0b1RyYW5zaXRpb25EdXJhdGlvbiB8fCAwKTtcbiAgICAgIH1cbiAgICB9LCBfdGVtcCkpO1xuICB9XG5cbiAgKDAsIF9jcmVhdGVDbGFzczIuZGVmYXVsdCkoQ29sbGFwc2UsIFt7XG4gICAga2V5OiBcImNvbXBvbmVudFdpbGxVbm1vdW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgY2xlYXJUaW1lb3V0KHRoaXMudGltZXIpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGNoaWxkcmVuID0gX3Byb3BzLmNoaWxkcmVuLFxuICAgICAgICAgIGNsYXNzZXMgPSBfcHJvcHMuY2xhc3NlcyxcbiAgICAgICAgICBjbGFzc05hbWUgPSBfcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICAgIGNvbGxhcHNlZEhlaWdodCA9IF9wcm9wcy5jb2xsYXBzZWRIZWlnaHQsXG4gICAgICAgICAgQ29tcG9uZW50ID0gX3Byb3BzLmNvbXBvbmVudCxcbiAgICAgICAgICBvbkVudGVyID0gX3Byb3BzLm9uRW50ZXIsXG4gICAgICAgICAgb25FbnRlcmVkID0gX3Byb3BzLm9uRW50ZXJlZCxcbiAgICAgICAgICBvbkVudGVyaW5nID0gX3Byb3BzLm9uRW50ZXJpbmcsXG4gICAgICAgICAgb25FeGl0ID0gX3Byb3BzLm9uRXhpdCxcbiAgICAgICAgICBvbkV4aXRpbmcgPSBfcHJvcHMub25FeGl0aW5nLFxuICAgICAgICAgIHN0eWxlID0gX3Byb3BzLnN0eWxlLFxuICAgICAgICAgIHRoZW1lID0gX3Byb3BzLnRoZW1lLFxuICAgICAgICAgIHRpbWVvdXQgPSBfcHJvcHMudGltZW91dCxcbiAgICAgICAgICBvdGhlciA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyLmRlZmF1bHQpKF9wcm9wcywgW1wiY2hpbGRyZW5cIiwgXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29sbGFwc2VkSGVpZ2h0XCIsIFwiY29tcG9uZW50XCIsIFwib25FbnRlclwiLCBcIm9uRW50ZXJlZFwiLCBcIm9uRW50ZXJpbmdcIiwgXCJvbkV4aXRcIiwgXCJvbkV4aXRpbmdcIiwgXCJzdHlsZVwiLCBcInRoZW1lXCIsIFwidGltZW91dFwiXSk7XG4gICAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfVHJhbnNpdGlvbi5kZWZhdWx0LCAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHtcbiAgICAgICAgb25FbnRlcjogdGhpcy5oYW5kbGVFbnRlcixcbiAgICAgICAgb25FbnRlcmVkOiB0aGlzLmhhbmRsZUVudGVyZWQsXG4gICAgICAgIG9uRW50ZXJpbmc6IHRoaXMuaGFuZGxlRW50ZXJpbmcsXG4gICAgICAgIG9uRXhpdDogdGhpcy5oYW5kbGVFeGl0LFxuICAgICAgICBvbkV4aXRpbmc6IHRoaXMuaGFuZGxlRXhpdGluZyxcbiAgICAgICAgYWRkRW5kTGlzdGVuZXI6IHRoaXMuYWRkRW5kTGlzdGVuZXIsXG4gICAgICAgIHRpbWVvdXQ6IHRpbWVvdXQgPT09ICdhdXRvJyA/IG51bGwgOiB0aW1lb3V0XG4gICAgICB9LCBvdGhlciksIGZ1bmN0aW9uIChzdGF0ZSwgY2hpbGRQcm9wcykge1xuICAgICAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChDb21wb25lbnQsICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe1xuICAgICAgICAgIGNsYXNzTmFtZTogKDAsIF9jbGFzc25hbWVzLmRlZmF1bHQpKGNsYXNzZXMuY29udGFpbmVyLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KSh7fSwgY2xhc3Nlcy5lbnRlcmVkLCBzdGF0ZSA9PT0gJ2VudGVyZWQnKSwgY2xhc3NOYW1lKSxcbiAgICAgICAgICBzdHlsZTogKDAsIF9vYmplY3RTcHJlYWQyLmRlZmF1bHQpKHt9LCBzdHlsZSwge1xuICAgICAgICAgICAgbWluSGVpZ2h0OiBjb2xsYXBzZWRIZWlnaHRcbiAgICAgICAgICB9KVxuICAgICAgICB9LCBjaGlsZFByb3BzKSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzLndyYXBwZXIsXG4gICAgICAgICAgcmVmOiBmdW5jdGlvbiByZWYobm9kZSkge1xuICAgICAgICAgICAgX3RoaXMyLndyYXBwZXIgPSBub2RlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzLndyYXBwZXJJbm5lclxuICAgICAgICB9LCBjaGlsZHJlbikpKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfV0pO1xuICByZXR1cm4gQ29sbGFwc2U7XG59KF9yZWFjdC5kZWZhdWx0LkNvbXBvbmVudCk7XG5cbkNvbGxhcHNlLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG5vZGUgdG8gYmUgY29sbGFwc2VkLlxuICAgKi9cbiAgY2hpbGRyZW46IF9wcm9wVHlwZXMuZGVmYXVsdC5ub2RlLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2Nzcy1hcGkpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGhlaWdodCBvZiB0aGUgY29udGFpbmVyIHdoZW4gY29sbGFwc2VkLlxuICAgKi9cbiAgY29sbGFwc2VkSGVpZ2h0OiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBET00gZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZywgX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmNdKSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgY29tcG9uZW50IHdpbGwgdHJhbnNpdGlvbiBpbi5cbiAgICovXG4gIGluOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25FbnRlcjogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uRW50ZXJlZDogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uRW50ZXJpbmc6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkV4aXQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkV4aXRpbmc6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBzdHlsZTogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgdGhlbWU6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogVGhlIGR1cmF0aW9uIGZvciB0aGUgdHJhbnNpdGlvbiwgaW4gbWlsbGlzZWNvbmRzLlxuICAgKiBZb3UgbWF5IHNwZWNpZnkgYSBzaW5nbGUgdGltZW91dCBmb3IgYWxsIHRyYW5zaXRpb25zLCBvciBpbmRpdmlkdWFsbHkgd2l0aCBhbiBvYmplY3QuXG4gICAqXG4gICAqIFNldCB0byAnYXV0bycgdG8gYXV0b21hdGljYWxseSBjYWxjdWxhdGUgdHJhbnNpdGlvbiB0aW1lIGJhc2VkIG9uIGhlaWdodC5cbiAgICovXG4gIHRpbWVvdXQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMuZGVmYXVsdC5udW1iZXIsIF9wcm9wVHlwZXMuZGVmYXVsdC5zaGFwZSh7XG4gICAgZW50ZXI6IF9wcm9wVHlwZXMuZGVmYXVsdC5udW1iZXIsXG4gICAgZXhpdDogX3Byb3BUeXBlcy5kZWZhdWx0Lm51bWJlclxuICB9KSwgX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mKFsnYXV0byddKV0pXG59IDoge307XG5Db2xsYXBzZS5kZWZhdWx0UHJvcHMgPSB7XG4gIGNvbGxhcHNlZEhlaWdodDogJzBweCcsXG4gIGNvbXBvbmVudDogJ2RpdicsXG4gIHRpbWVvdXQ6IF90cmFuc2l0aW9ucy5kdXJhdGlvbi5zdGFuZGFyZFxufTtcbkNvbGxhcHNlLm11aVN1cHBvcnRBdXRvID0gdHJ1ZTtcblxudmFyIF9kZWZhdWx0ID0gKDAsIF93aXRoU3R5bGVzLmRlZmF1bHQpKHN0eWxlcywge1xuICB3aXRoVGhlbWU6IHRydWUsXG4gIG5hbWU6ICdNdWlDb2xsYXBzZSdcbn0pKENvbGxhcHNlKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfZXh0ZW5kczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vZXh0ZW5kc1wiKSk7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCIpKTtcblxudmFyIF9jbGFzc0NhbGxDaGVjazIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vY2xhc3NDYWxsQ2hlY2tcIikpO1xuXG52YXIgX2NyZWF0ZUNsYXNzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9jcmVhdGVDbGFzc1wiKSk7XG5cbnZhciBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vcG9zc2libGVDb25zdHJ1Y3RvclJldHVyblwiKSk7XG5cbnZhciBfaW5oZXJpdHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2luaGVyaXRzXCIpKTtcblxudmFyIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2Fzc2VydFRoaXNJbml0aWFsaXplZFwiKSk7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbnZhciBfcmVhY3REb20gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdC1kb21cIikpO1xuXG52YXIgX3JlYWN0RXZlbnRMaXN0ZW5lciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0LWV2ZW50LWxpc3RlbmVyXCIpKTtcblxudmFyIF9vd25lckRvY3VtZW50ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiZG9tLWhlbHBlcnMvb3duZXJEb2N1bWVudFwiKSk7XG5cbi8vIEBpbmhlcml0ZWRDb21wb25lbnQgRXZlbnRMaXN0ZW5lclxudmFyIGlzRGVzY2VuZGFudCA9IGZ1bmN0aW9uIGlzRGVzY2VuZGFudChlbCwgdGFyZ2V0KSB7XG4gIGlmICh0YXJnZXQgIT09IG51bGwgJiYgdGFyZ2V0LnBhcmVudE5vZGUpIHtcbiAgICByZXR1cm4gZWwgPT09IHRhcmdldCB8fCBpc0Rlc2NlbmRhbnQoZWwsIHRhcmdldC5wYXJlbnROb2RlKTtcbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn07XG4vKipcbiAqIExpc3RlbiBmb3IgY2xpY2sgZXZlbnRzIHRoYXQgYXJlIHRyaWdnZXJlZCBvdXRzaWRlIG9mIHRoZSBjb21wb25lbnQgY2hpbGRyZW4uXG4gKi9cblxuXG52YXIgQ2xpY2tBd2F5TGlzdGVuZXIgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgKDAsIF9pbmhlcml0czIuZGVmYXVsdCkoQ2xpY2tBd2F5TGlzdGVuZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIENsaWNrQXdheUxpc3RlbmVyKCkge1xuICAgIHZhciBfcmVmO1xuXG4gICAgdmFyIF90ZW1wLCBfdGhpcztcblxuICAgICgwLCBfY2xhc3NDYWxsQ2hlY2syLmRlZmF1bHQpKHRoaXMsIENsaWNrQXdheUxpc3RlbmVyKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gKDAsIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMi5kZWZhdWx0KShfdGhpcywgKF90ZW1wID0gX3RoaXMgPSAoMCwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yLmRlZmF1bHQpKHRoaXMsIChfcmVmID0gQ2xpY2tBd2F5TGlzdGVuZXIuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihDbGlja0F3YXlMaXN0ZW5lcikpLmNhbGwuYXBwbHkoX3JlZiwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcy5tb3VudGVkID0gZmFsc2UsIF90aGlzLmhhbmRsZUNsaWNrQXdheSA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgLy8gSWdub3JlIGV2ZW50cyB0aGF0IGhhdmUgYmVlbiBgZXZlbnQucHJldmVudERlZmF1bHQoKWAgbWFya2VkLlxuICAgICAgaWYgKGV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSAvLyBJRTExIHN1cHBvcnQsIHdoaWNoIHRyaWdnZXIgdGhlIGhhbmRsZUNsaWNrQXdheSBldmVuIGFmdGVyIHRoZSB1bmJpbmRcblxuXG4gICAgICBpZiAoIV90aGlzLm1vdW50ZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgZWwgPSBfcmVhY3REb20uZGVmYXVsdC5maW5kRE9NTm9kZSgoMCwgX2Fzc2VydFRoaXNJbml0aWFsaXplZDIuZGVmYXVsdCkoX3RoaXMpKTtcblxuICAgICAgdmFyIGRvYyA9ICgwLCBfb3duZXJEb2N1bWVudC5kZWZhdWx0KShlbCk7XG5cbiAgICAgIGlmIChkb2MuZG9jdW1lbnRFbGVtZW50ICYmIGRvYy5kb2N1bWVudEVsZW1lbnQuY29udGFpbnMoZXZlbnQudGFyZ2V0KSAmJiAhaXNEZXNjZW5kYW50KGVsLCBldmVudC50YXJnZXQpKSB7XG4gICAgICAgIF90aGlzLnByb3BzLm9uQ2xpY2tBd2F5KGV2ZW50KTtcbiAgICAgIH1cbiAgICB9LCBfdGVtcCkpO1xuICB9XG5cbiAgKDAsIF9jcmVhdGVDbGFzczIuZGVmYXVsdCkoQ2xpY2tBd2F5TGlzdGVuZXIsIFt7XG4gICAga2V5OiBcImNvbXBvbmVudERpZE1vdW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgdGhpcy5tb3VudGVkID0gdHJ1ZTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY29tcG9uZW50V2lsbFVubW91bnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICB0aGlzLm1vdW50ZWQgPSBmYWxzZTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGNoaWxkcmVuID0gX3Byb3BzLmNoaWxkcmVuLFxuICAgICAgICAgIG1vdXNlRXZlbnQgPSBfcHJvcHMubW91c2VFdmVudCxcbiAgICAgICAgICB0b3VjaEV2ZW50ID0gX3Byb3BzLnRvdWNoRXZlbnQsXG4gICAgICAgICAgb25DbGlja0F3YXkgPSBfcHJvcHMub25DbGlja0F3YXksXG4gICAgICAgICAgb3RoZXIgPSAoMCwgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMi5kZWZhdWx0KShfcHJvcHMsIFtcImNoaWxkcmVuXCIsIFwibW91c2VFdmVudFwiLCBcInRvdWNoRXZlbnRcIiwgXCJvbkNsaWNrQXdheVwiXSk7XG4gICAgICB2YXIgbGlzdGVuZXJQcm9wcyA9IHt9O1xuXG4gICAgICBpZiAobW91c2VFdmVudCAhPT0gZmFsc2UpIHtcbiAgICAgICAgbGlzdGVuZXJQcm9wc1ttb3VzZUV2ZW50XSA9IHRoaXMuaGFuZGxlQ2xpY2tBd2F5O1xuICAgICAgfVxuXG4gICAgICBpZiAodG91Y2hFdmVudCAhPT0gZmFsc2UpIHtcbiAgICAgICAgbGlzdGVuZXJQcm9wc1t0b3VjaEV2ZW50XSA9IHRoaXMuaGFuZGxlQ2xpY2tBd2F5O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3RFdmVudExpc3RlbmVyLmRlZmF1bHQsICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe1xuICAgICAgICB0YXJnZXQ6IFwiZG9jdW1lbnRcIlxuICAgICAgfSwgbGlzdGVuZXJQcm9wcywgb3RoZXIpLCBjaGlsZHJlbik7XG4gICAgfVxuICB9XSk7XG4gIHJldHVybiBDbGlja0F3YXlMaXN0ZW5lcjtcbn0oX3JlYWN0LmRlZmF1bHQuQ29tcG9uZW50KTtcblxuQ2xpY2tBd2F5TGlzdGVuZXIucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICBjaGlsZHJlbjogX3Byb3BUeXBlcy5kZWZhdWx0Lm5vZGUuaXNSZXF1aXJlZCxcbiAgbW91c2VFdmVudDogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mKFsnb25DbGljaycsICdvbk1vdXNlRG93bicsICdvbk1vdXNlVXAnLCBmYWxzZV0pLFxuICBvbkNsaWNrQXdheTogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMuaXNSZXF1aXJlZCxcbiAgdG91Y2hFdmVudDogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mKFsnb25Ub3VjaFN0YXJ0JywgJ29uVG91Y2hFbmQnLCBmYWxzZV0pXG59IDoge307XG5DbGlja0F3YXlMaXN0ZW5lci5kZWZhdWx0UHJvcHMgPSB7XG4gIG1vdXNlRXZlbnQ6ICdvbk1vdXNlVXAnLFxuICB0b3VjaEV2ZW50OiAnb25Ub3VjaEVuZCdcbn07XG52YXIgX2RlZmF1bHQgPSBDbGlja0F3YXlMaXN0ZW5lcjtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5zdHlsZXMgPSB2b2lkIDA7XG5cbnZhciBfZXh0ZW5kczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vZXh0ZW5kc1wiKSk7XG5cbnZhciBfb2JqZWN0U3ByZWFkMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9vYmplY3RTcHJlYWRcIikpO1xuXG52YXIgX2RlZmluZVByb3BlcnR5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9kZWZpbmVQcm9wZXJ0eVwiKSk7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCIpKTtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKTtcblxudmFyIF9jbGFzc25hbWVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY2xhc3NuYW1lc1wiKSk7XG5cbnZhciBfd2l0aFN0eWxlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3N0eWxlcy93aXRoU3R5bGVzXCIpKTtcblxudmFyIF9oZWxwZXJzID0gcmVxdWlyZShcIi4uL3V0aWxzL2hlbHBlcnNcIik7XG5cbnZhciBTSVpFID0gNTA7XG5cbmZ1bmN0aW9uIGdldFJlbGF0aXZlVmFsdWUodmFsdWUsIG1pbiwgbWF4KSB7XG4gIHZhciBjbGFtcGVkVmFsdWUgPSBNYXRoLm1pbihNYXRoLm1heChtaW4sIHZhbHVlKSwgbWF4KTtcbiAgcmV0dXJuIChjbGFtcGVkVmFsdWUgLSBtaW4pIC8gKG1heCAtIG1pbik7XG59XG5cbmZ1bmN0aW9uIGVhc2VPdXQodCkge1xuICB0ID0gZ2V0UmVsYXRpdmVWYWx1ZSh0LCAwLCAxKTsgLy8gaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vZ3JlLzE2NTAyOTRcblxuICB0ID0gKHQgLT0gMSkgKiB0ICogdCArIDE7XG4gIHJldHVybiB0O1xufVxuXG5mdW5jdGlvbiBlYXNlSW4odCkge1xuICByZXR1cm4gdCAqIHQ7XG59XG5cbnZhciBzdHlsZXMgPSBmdW5jdGlvbiBzdHlsZXModGhlbWUpIHtcbiAgcmV0dXJuIHtcbiAgICByb290OiB7XG4gICAgICBkaXNwbGF5OiAnaW5saW5lLWJsb2NrJyxcbiAgICAgIGxpbmVIZWlnaHQ6IDEgLy8gS2VlcCB0aGUgcHJvZ3Jlc3MgY2VudGVyZWRcblxuICAgIH0sXG4gICAgc3RhdGljOiB7XG4gICAgICB0cmFuc2l0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ3RyYW5zZm9ybScpXG4gICAgfSxcbiAgICBpbmRldGVybWluYXRlOiB7XG4gICAgICBhbmltYXRpb246ICdtdWktcHJvZ3Jlc3MtY2lyY3VsYXItcm90YXRlIDEuNHMgbGluZWFyIGluZmluaXRlJ1xuICAgIH0sXG4gICAgY29sb3JQcmltYXJ5OiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5wcmltYXJ5Lm1haW5cbiAgICB9LFxuICAgIGNvbG9yU2Vjb25kYXJ5OiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5zZWNvbmRhcnkubWFpblxuICAgIH0sXG4gICAgc3ZnOiB7fSxcbiAgICBjaXJjbGU6IHtcbiAgICAgIHN0cm9rZTogJ2N1cnJlbnRDb2xvcicsXG4gICAgICBzdHJva2VMaW5lY2FwOiAncm91bmQnXG4gICAgfSxcbiAgICBjaXJjbGVTdGF0aWM6IHtcbiAgICAgIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgnc3Ryb2tlLWRhc2hvZmZzZXQnKVxuICAgIH0sXG4gICAgY2lyY2xlSW5kZXRlcm1pbmF0ZToge1xuICAgICAgYW5pbWF0aW9uOiAnbXVpLXByb2dyZXNzLWNpcmN1bGFyLWRhc2ggMS40cyBlYXNlLWluLW91dCBpbmZpbml0ZScsXG4gICAgICAvLyBTb21lIGRlZmF1bHQgdmFsdWUgdGhhdCBsb29rcyBmaW5lIHdhaXRpbmcgZm9yIHRoZSBhbmltYXRpb24gdG8ga2lja3MgaW4uXG4gICAgICBzdHJva2VEYXNoYXJyYXk6ICc4MHB4LCAyMDBweCcsXG4gICAgICBzdHJva2VEYXNob2Zmc2V0OiAnMHB4JyAvLyBBZGQgdGhlIHVuaXQgdG8gZml4IGEgRWRnZSAxNiBhbmQgYmVsb3cgYnVnLlxuXG4gICAgfSxcbiAgICAnQGtleWZyYW1lcyBtdWktcHJvZ3Jlc3MtY2lyY3VsYXItcm90YXRlJzoge1xuICAgICAgJzEwMCUnOiB7XG4gICAgICAgIHRyYW5zZm9ybTogJ3JvdGF0ZSgzNjBkZWcpJ1xuICAgICAgfVxuICAgIH0sXG4gICAgJ0BrZXlmcmFtZXMgbXVpLXByb2dyZXNzLWNpcmN1bGFyLWRhc2gnOiB7XG4gICAgICAnMCUnOiB7XG4gICAgICAgIHN0cm9rZURhc2hhcnJheTogJzFweCwgMjAwcHgnLFxuICAgICAgICBzdHJva2VEYXNob2Zmc2V0OiAnMHB4J1xuICAgICAgfSxcbiAgICAgICc1MCUnOiB7XG4gICAgICAgIHN0cm9rZURhc2hhcnJheTogJzEwMHB4LCAyMDBweCcsXG4gICAgICAgIHN0cm9rZURhc2hvZmZzZXQ6ICctMTVweCdcbiAgICAgIH0sXG4gICAgICAnMTAwJSc6IHtcbiAgICAgICAgc3Ryb2tlRGFzaGFycmF5OiAnMTAwcHgsIDIwMHB4JyxcbiAgICAgICAgc3Ryb2tlRGFzaG9mZnNldDogJy0xMjBweCdcbiAgICAgIH1cbiAgICB9XG4gIH07XG59O1xuLyoqXG4gKiAjIyBBUklBXG4gKlxuICogSWYgdGhlIHByb2dyZXNzIGJhciBpcyBkZXNjcmliaW5nIHRoZSBsb2FkaW5nIHByb2dyZXNzIG9mIGEgcGFydGljdWxhciByZWdpb24gb2YgYSBwYWdlLFxuICogeW91IHNob3VsZCB1c2UgYGFyaWEtZGVzY3JpYmVkYnlgIHRvIHBvaW50IHRvIHRoZSBwcm9ncmVzcyBiYXIsIGFuZCBzZXQgdGhlIGBhcmlhLWJ1c3lgXG4gKiBhdHRyaWJ1dGUgdG8gYHRydWVgIG9uIHRoYXQgcmVnaW9uIHVudGlsIGl0IGhhcyBmaW5pc2hlZCBsb2FkaW5nLlxuICovXG5cblxuZXhwb3J0cy5zdHlsZXMgPSBzdHlsZXM7XG5cbmZ1bmN0aW9uIENpcmN1bGFyUHJvZ3Jlc3MocHJvcHMpIHtcbiAgdmFyIF9jbGFzc05hbWVzLCBfY2xhc3NOYW1lczI7XG5cbiAgdmFyIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgY29sb3IgPSBwcm9wcy5jb2xvcixcbiAgICAgIHNpemUgPSBwcm9wcy5zaXplLFxuICAgICAgc3R5bGUgPSBwcm9wcy5zdHlsZSxcbiAgICAgIHRoaWNrbmVzcyA9IHByb3BzLnRoaWNrbmVzcyxcbiAgICAgIHZhbHVlID0gcHJvcHMudmFsdWUsXG4gICAgICB2YXJpYW50ID0gcHJvcHMudmFyaWFudCxcbiAgICAgIG90aGVyID0gKDAsIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIuZGVmYXVsdCkocHJvcHMsIFtcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJjb2xvclwiLCBcInNpemVcIiwgXCJzdHlsZVwiLCBcInRoaWNrbmVzc1wiLCBcInZhbHVlXCIsIFwidmFyaWFudFwiXSk7XG4gIHZhciBjaXJjbGVTdHlsZSA9IHt9O1xuICB2YXIgcm9vdFN0eWxlID0ge307XG4gIHZhciByb290UHJvcHMgPSB7fTtcblxuICBpZiAodmFyaWFudCA9PT0gJ2RldGVybWluYXRlJyB8fCB2YXJpYW50ID09PSAnc3RhdGljJykge1xuICAgIHZhciBjaXJjdW1mZXJlbmNlID0gMiAqIE1hdGguUEkgKiAoU0laRSAvIDIgLSA1KTtcbiAgICBjaXJjbGVTdHlsZS5zdHJva2VEYXNoYXJyYXkgPSBjaXJjdW1mZXJlbmNlLnRvRml4ZWQoMyk7XG4gICAgcm9vdFByb3BzWydhcmlhLXZhbHVlbm93J10gPSBNYXRoLnJvdW5kKHZhbHVlKTtcblxuICAgIGlmICh2YXJpYW50ID09PSAnc3RhdGljJykge1xuICAgICAgY2lyY2xlU3R5bGUuc3Ryb2tlRGFzaG9mZnNldCA9IFwiXCIuY29uY2F0KCgoMTAwIC0gdmFsdWUpIC8gMTAwICogY2lyY3VtZmVyZW5jZSkudG9GaXhlZCgzKSwgXCJweFwiKTtcbiAgICAgIHJvb3RTdHlsZS50cmFuc2Zvcm0gPSAncm90YXRlKC05MGRlZyknO1xuICAgIH0gZWxzZSB7XG4gICAgICBjaXJjbGVTdHlsZS5zdHJva2VEYXNob2Zmc2V0ID0gXCJcIi5jb25jYXQoKGVhc2VJbigoMTAwIC0gdmFsdWUpIC8gMTAwKSAqIGNpcmN1bWZlcmVuY2UpLnRvRml4ZWQoMyksIFwicHhcIik7XG4gICAgICByb290U3R5bGUudHJhbnNmb3JtID0gXCJyb3RhdGUoXCIuY29uY2F0KChlYXNlT3V0KHZhbHVlIC8gNzApICogMjcwKS50b0ZpeGVkKDMpLCBcImRlZylcIik7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7XG4gICAgY2xhc3NOYW1lOiAoMCwgX2NsYXNzbmFtZXMuZGVmYXVsdCkoY2xhc3Nlcy5yb290LCAoX2NsYXNzTmFtZXMgPSB7fSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2NsYXNzTmFtZXMsIGNsYXNzZXNbXCJjb2xvclwiLmNvbmNhdCgoMCwgX2hlbHBlcnMuY2FwaXRhbGl6ZSkoY29sb3IpKV0sIGNvbG9yICE9PSAnaW5oZXJpdCcpLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lcywgY2xhc3Nlcy5pbmRldGVybWluYXRlLCB2YXJpYW50ID09PSAnaW5kZXRlcm1pbmF0ZScpLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lcywgY2xhc3Nlcy5zdGF0aWMsIHZhcmlhbnQgPT09ICdzdGF0aWMnKSwgX2NsYXNzTmFtZXMpLCBjbGFzc05hbWUpLFxuICAgIHN0eWxlOiAoMCwgX29iamVjdFNwcmVhZDIuZGVmYXVsdCkoe1xuICAgICAgd2lkdGg6IHNpemUsXG4gICAgICBoZWlnaHQ6IHNpemVcbiAgICB9LCByb290U3R5bGUsIHN0eWxlKSxcbiAgICByb2xlOiBcInByb2dyZXNzYmFyXCJcbiAgfSwgcm9vdFByb3BzLCBvdGhlciksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJzdmdcIiwge1xuICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5zdmcsXG4gICAgdmlld0JveDogXCIwIDAgXCIuY29uY2F0KFNJWkUsIFwiIFwiKS5jb25jYXQoU0laRSlcbiAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImNpcmNsZVwiLCB7XG4gICAgY2xhc3NOYW1lOiAoMCwgX2NsYXNzbmFtZXMuZGVmYXVsdCkoY2xhc3Nlcy5jaXJjbGUsIChfY2xhc3NOYW1lczIgPSB7fSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2NsYXNzTmFtZXMyLCBjbGFzc2VzLmNpcmNsZUluZGV0ZXJtaW5hdGUsIHZhcmlhbnQgPT09ICdpbmRldGVybWluYXRlJyksICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKF9jbGFzc05hbWVzMiwgY2xhc3Nlcy5jaXJjbGVTdGF0aWMsIHZhcmlhbnQgPT09ICdzdGF0aWMnKSwgX2NsYXNzTmFtZXMyKSksXG4gICAgc3R5bGU6IGNpcmNsZVN0eWxlLFxuICAgIGN4OiBTSVpFIC8gMixcbiAgICBjeTogU0laRSAvIDIsXG4gICAgcjogU0laRSAvIDIgLSA1LFxuICAgIGZpbGw6IFwibm9uZVwiLFxuICAgIHN0cm9rZVdpZHRoOiB0aGlja25lc3NcbiAgfSkpKTtcbn1cblxuQ2lyY3VsYXJQcm9ncmVzcy5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2Nzcy1hcGkpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGNvbG9yIG9mIHRoZSBjb21wb25lbnQuIEl0IHN1cHBvcnRzIHRob3NlIHRoZW1lIGNvbG9ycyB0aGF0IG1ha2Ugc2Vuc2UgZm9yIHRoaXMgY29tcG9uZW50LlxuICAgKi9cbiAgY29sb3I6IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZihbJ3ByaW1hcnknLCAnc2Vjb25kYXJ5JywgJ2luaGVyaXQnXSksXG5cbiAgLyoqXG4gICAqIFRoZSBzaXplIG9mIHRoZSBjaXJjbGUuXG4gICAqL1xuICBzaXplOiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzLmRlZmF1bHQubnVtYmVyLCBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nXSksXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHN0eWxlOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBUaGUgdGhpY2tuZXNzIG9mIHRoZSBjaXJjbGUuXG4gICAqL1xuICB0aGlja25lc3M6IF9wcm9wVHlwZXMuZGVmYXVsdC5udW1iZXIsXG5cbiAgLyoqXG4gICAqIFRoZSB2YWx1ZSBvZiB0aGUgcHJvZ3Jlc3MgaW5kaWNhdG9yIGZvciB0aGUgZGV0ZXJtaW5hdGUgYW5kIHN0YXRpYyB2YXJpYW50cy5cbiAgICogVmFsdWUgYmV0d2VlbiAwIGFuZCAxMDAuXG4gICAqL1xuICB2YWx1ZTogX3Byb3BUeXBlcy5kZWZhdWx0Lm51bWJlcixcblxuICAvKipcbiAgICogVGhlIHZhcmlhbnQgb2YgcHJvZ3Jlc3MgaW5kaWNhdG9yLiBVc2UgaW5kZXRlcm1pbmF0ZVxuICAgKiB3aGVuIHRoZXJlIGlzIG5vIHByb2dyZXNzIHZhbHVlLlxuICAgKi9cbiAgdmFyaWFudDogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mKFsnZGV0ZXJtaW5hdGUnLCAnaW5kZXRlcm1pbmF0ZScsICdzdGF0aWMnXSlcbn0gOiB7fTtcbkNpcmN1bGFyUHJvZ3Jlc3MuZGVmYXVsdFByb3BzID0ge1xuICBjb2xvcjogJ3ByaW1hcnknLFxuICBzaXplOiA0MCxcbiAgdGhpY2tuZXNzOiAzLjYsXG4gIHZhbHVlOiAwLFxuICB2YXJpYW50OiAnaW5kZXRlcm1pbmF0ZSdcbn07XG5cbnZhciBfZGVmYXVsdCA9ICgwLCBfd2l0aFN0eWxlcy5kZWZhdWx0KShzdHlsZXMsIHtcbiAgbmFtZTogJ011aUNpcmN1bGFyUHJvZ3Jlc3MnLFxuICBmbGlwOiBmYWxzZVxufSkoQ2lyY3VsYXJQcm9ncmVzcyk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3B1cmUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWNvbXBvc2UvcHVyZVwiKSk7XG5cbnZhciBfU3ZnSWNvbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uLy4uL1N2Z0ljb25cIikpO1xuXG52YXIgX3JlZiA9IF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgZDogXCJNMTIgMkM2LjQ3IDIgMiA2LjQ3IDIgMTJzNC40NyAxMCAxMCAxMCAxMC00LjQ3IDEwLTEwUzE3LjUzIDIgMTIgMnptNSAxMy41OUwxNS41OSAxNyAxMiAxMy40MSA4LjQxIDE3IDcgMTUuNTkgMTAuNTkgMTIgNyA4LjQxIDguNDEgNyAxMiAxMC41OSAxNS41OSA3IDE3IDguNDEgMTMuNDEgMTIgMTcgMTUuNTl6XCJcbn0pO1xuXG4vKipcbiAqIEBpZ25vcmUgLSBpbnRlcm5hbCBjb21wb25lbnQuXG4gKi9cbnZhciBDYW5jZWwgPSBmdW5jdGlvbiBDYW5jZWwocHJvcHMpIHtcbiAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX1N2Z0ljb24uZGVmYXVsdCwgcHJvcHMsIF9yZWYpO1xufTtcblxuQ2FuY2VsID0gKDAsIF9wdXJlLmRlZmF1bHQpKENhbmNlbCk7XG5DYW5jZWwubXVpTmFtZSA9ICdTdmdJY29uJztcbnZhciBfZGVmYXVsdCA9IENhbmNlbDtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5zdHlsZXMgPSB2b2lkIDA7XG5cbnZhciBfZXh0ZW5kczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vZXh0ZW5kc1wiKSk7XG5cbnZhciBfZGVmaW5lUHJvcGVydHkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2RlZmluZVByb3BlcnR5XCIpKTtcblxudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIikpO1xuXG52YXIgX2NsYXNzQ2FsbENoZWNrMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9jbGFzc0NhbGxDaGVja1wiKSk7XG5cbnZhciBfY3JlYXRlQ2xhc3MyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2NyZWF0ZUNsYXNzXCIpKTtcblxudmFyIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuXCIpKTtcblxudmFyIF9pbmhlcml0czIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vaW5oZXJpdHNcIikpO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xuXG52YXIgX2NsYXNzbmFtZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJjbGFzc25hbWVzXCIpKTtcblxudmFyIF9rZXljb2RlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwia2V5Y29kZVwiKSk7XG5cbnZhciBfQ2FuY2VsID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vaW50ZXJuYWwvc3ZnLWljb25zL0NhbmNlbFwiKSk7XG5cbnZhciBfd2l0aFN0eWxlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3N0eWxlcy93aXRoU3R5bGVzXCIpKTtcblxudmFyIF9jb2xvck1hbmlwdWxhdG9yID0gcmVxdWlyZShcIi4uL3N0eWxlcy9jb2xvck1hbmlwdWxhdG9yXCIpO1xuXG5yZXF1aXJlKFwiLi4vQXZhdGFyL0F2YXRhclwiKTtcblxuLy8gU28gd2UgZG9uJ3QgaGF2ZSBhbnkgb3ZlcnJpZGUgcHJpb3JpdHkgaXNzdWUuXG52YXIgc3R5bGVzID0gZnVuY3Rpb24gc3R5bGVzKHRoZW1lKSB7XG4gIHZhciBoZWlnaHQgPSAzMjtcbiAgdmFyIGJhY2tncm91bmRDb2xvciA9IHRoZW1lLnBhbGV0dGUudHlwZSA9PT0gJ2xpZ2h0JyA/IHRoZW1lLnBhbGV0dGUuZ3JleVszMDBdIDogdGhlbWUucGFsZXR0ZS5ncmV5WzcwMF07XG4gIHZhciBkZWxldGVJY29uQ29sb3IgPSAoMCwgX2NvbG9yTWFuaXB1bGF0b3IuZmFkZSkodGhlbWUucGFsZXR0ZS50ZXh0LnByaW1hcnksIDAuMjYpO1xuICByZXR1cm4ge1xuICAgIHJvb3Q6IHtcbiAgICAgIGZvbnRGYW1pbHk6IHRoZW1lLnR5cG9ncmFwaHkuZm9udEZhbWlseSxcbiAgICAgIGZvbnRTaXplOiB0aGVtZS50eXBvZ3JhcGh5LnB4VG9SZW0oMTMpLFxuICAgICAgZGlzcGxheTogJ2lubGluZS1mbGV4JyxcbiAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLFxuICAgICAgaGVpZ2h0OiBoZWlnaHQsXG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5nZXRDb250cmFzdFRleHQoYmFja2dyb3VuZENvbG9yKSxcbiAgICAgIGJhY2tncm91bmRDb2xvcjogYmFja2dyb3VuZENvbG9yLFxuICAgICAgYm9yZGVyUmFkaXVzOiBoZWlnaHQgLyAyLFxuICAgICAgd2hpdGVTcGFjZTogJ25vd3JhcCcsXG4gICAgICB0cmFuc2l0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoWydiYWNrZ3JvdW5kLWNvbG9yJywgJ2JveC1zaGFkb3cnXSksXG4gICAgICAvLyBsYWJlbCB3aWxsIGluaGVyaXQgdGhpcyBmcm9tIHJvb3QsIHRoZW4gYGNsaWNrYWJsZWAgY2xhc3Mgb3ZlcnJpZGVzIHRoaXMgZm9yIGJvdGhcbiAgICAgIGN1cnNvcjogJ2RlZmF1bHQnLFxuICAgICAgLy8gV2UgZGlzYWJsZSB0aGUgZm9jdXMgcmluZyBmb3IgbW91c2UsIHRvdWNoIGFuZCBrZXlib2FyZCB1c2Vycy5cbiAgICAgIG91dGxpbmU6ICdub25lJyxcbiAgICAgIHRleHREZWNvcmF0aW9uOiAnbm9uZScsXG4gICAgICBib3JkZXI6ICdub25lJyxcbiAgICAgIC8vIFJlbW92ZSBgYnV0dG9uYCBib3JkZXJcbiAgICAgIHBhZGRpbmc6IDAgLy8gUmVtb3ZlIGBidXR0b25gIHBhZGRpbmdcblxuICAgIH0sXG4gICAgY2xpY2thYmxlOiB7XG4gICAgICAvLyBSZW1vdmUgZ3JleSBoaWdobGlnaHRcbiAgICAgIFdlYmtpdFRhcEhpZ2hsaWdodENvbG9yOiAndHJhbnNwYXJlbnQnLFxuICAgICAgY3Vyc29yOiAncG9pbnRlcicsXG4gICAgICAnJjpob3ZlciwgJjpmb2N1cyc6IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiAoMCwgX2NvbG9yTWFuaXB1bGF0b3IuZW1waGFzaXplKShiYWNrZ3JvdW5kQ29sb3IsIDAuMDgpXG4gICAgICB9LFxuICAgICAgJyY6YWN0aXZlJzoge1xuICAgICAgICBib3hTaGFkb3c6IHRoZW1lLnNoYWRvd3NbMV0sXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogKDAsIF9jb2xvck1hbmlwdWxhdG9yLmVtcGhhc2l6ZSkoYmFja2dyb3VuZENvbG9yLCAwLjEyKVxuICAgICAgfVxuICAgIH0sXG4gICAgZGVsZXRhYmxlOiB7XG4gICAgICAnJjpmb2N1cyc6IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiAoMCwgX2NvbG9yTWFuaXB1bGF0b3IuZW1waGFzaXplKShiYWNrZ3JvdW5kQ29sb3IsIDAuMDgpXG4gICAgICB9XG4gICAgfSxcbiAgICBhdmF0YXI6IHtcbiAgICAgIG1hcmdpblJpZ2h0OiAtNCxcbiAgICAgIHdpZHRoOiBoZWlnaHQsXG4gICAgICBoZWlnaHQ6IGhlaWdodCxcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnR5cGUgPT09ICdsaWdodCcgPyB0aGVtZS5wYWxldHRlLmdyZXlbNzAwXSA6IHRoZW1lLnBhbGV0dGUuZ3JleVszMDBdLFxuICAgICAgZm9udFNpemU6IHRoZW1lLnR5cG9ncmFwaHkucHhUb1JlbSgxNilcbiAgICB9LFxuICAgIGF2YXRhckNoaWxkcmVuOiB7XG4gICAgICB3aWR0aDogMTksXG4gICAgICBoZWlnaHQ6IDE5XG4gICAgfSxcbiAgICBsYWJlbDoge1xuICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICBwYWRkaW5nTGVmdDogMTIsXG4gICAgICBwYWRkaW5nUmlnaHQ6IDEyLFxuICAgICAgdXNlclNlbGVjdDogJ25vbmUnLFxuICAgICAgd2hpdGVTcGFjZTogJ25vd3JhcCcsXG4gICAgICBjdXJzb3I6ICdpbmhlcml0J1xuICAgIH0sXG4gICAgZGVsZXRlSWNvbjoge1xuICAgICAgLy8gUmVtb3ZlIGdyZXkgaGlnaGxpZ2h0XG4gICAgICBXZWJraXRUYXBIaWdobGlnaHRDb2xvcjogJ3RyYW5zcGFyZW50JyxcbiAgICAgIGNvbG9yOiBkZWxldGVJY29uQ29sb3IsXG4gICAgICBjdXJzb3I6ICdwb2ludGVyJyxcbiAgICAgIGhlaWdodDogJ2F1dG8nLFxuICAgICAgbWFyZ2luOiAnMCA0cHggMCAtOHB4JyxcbiAgICAgICcmOmhvdmVyJzoge1xuICAgICAgICBjb2xvcjogKDAsIF9jb2xvck1hbmlwdWxhdG9yLmZhZGUpKGRlbGV0ZUljb25Db2xvciwgMC40KVxuICAgICAgfVxuICAgIH1cbiAgfTtcbn07XG4vKipcbiAqIENoaXBzIHJlcHJlc2VudCBjb21wbGV4IGVudGl0aWVzIGluIHNtYWxsIGJsb2Nrcywgc3VjaCBhcyBhIGNvbnRhY3QuXG4gKi9cblxuXG5leHBvcnRzLnN0eWxlcyA9IHN0eWxlcztcblxudmFyIENoaXAgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgKDAsIF9pbmhlcml0czIuZGVmYXVsdCkoQ2hpcCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gQ2hpcCgpIHtcbiAgICB2YXIgX3JlZjtcblxuICAgIHZhciBfdGVtcCwgX3RoaXM7XG5cbiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMi5kZWZhdWx0KSh0aGlzLCBDaGlwKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gKDAsIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMi5kZWZhdWx0KShfdGhpcywgKF90ZW1wID0gX3RoaXMgPSAoMCwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yLmRlZmF1bHQpKHRoaXMsIChfcmVmID0gQ2hpcC5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKENoaXApKS5jYWxsLmFwcGx5KF9yZWYsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMuY2hpcFJlZiA9IG51bGwsIF90aGlzLmhhbmRsZURlbGV0ZUljb25DbGljayA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgLy8gU3RvcCB0aGUgZXZlbnQgZnJvbSBidWJibGluZyB1cCB0byB0aGUgYENoaXBgXG4gICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIHZhciBvbkRlbGV0ZSA9IF90aGlzLnByb3BzLm9uRGVsZXRlO1xuXG4gICAgICBpZiAob25EZWxldGUpIHtcbiAgICAgICAgb25EZWxldGUoZXZlbnQpO1xuICAgICAgfVxuICAgIH0sIF90aGlzLmhhbmRsZUtleURvd24gPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIC8vIElnbm9yZSBldmVudHMgZnJvbSBjaGlsZHJlbiBvZiBgQ2hpcGAuXG4gICAgICBpZiAoZXZlbnQuY3VycmVudFRhcmdldCAhPT0gZXZlbnQudGFyZ2V0KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIF90aGlzJHByb3BzID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgb25DbGljayA9IF90aGlzJHByb3BzLm9uQ2xpY2ssXG4gICAgICAgICAgb25EZWxldGUgPSBfdGhpcyRwcm9wcy5vbkRlbGV0ZSxcbiAgICAgICAgICBvbktleURvd24gPSBfdGhpcyRwcm9wcy5vbktleURvd247XG4gICAgICB2YXIga2V5ID0gKDAsIF9rZXljb2RlLmRlZmF1bHQpKGV2ZW50KTtcblxuICAgICAgaWYgKG9uQ2xpY2sgJiYgKGtleSA9PT0gJ3NwYWNlJyB8fCBrZXkgPT09ICdlbnRlcicpKSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIG9uQ2xpY2soZXZlbnQpO1xuICAgICAgfSBlbHNlIGlmIChvbkRlbGV0ZSAmJiBrZXkgPT09ICdiYWNrc3BhY2UnKSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIG9uRGVsZXRlKGV2ZW50KTtcbiAgICAgIH0gZWxzZSBpZiAoa2V5ID09PSAnZXNjJykge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgIGlmIChfdGhpcy5jaGlwUmVmKSB7XG4gICAgICAgICAgX3RoaXMuY2hpcFJlZi5ibHVyKCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKG9uS2V5RG93bikge1xuICAgICAgICBvbktleURvd24oZXZlbnQpO1xuICAgICAgfVxuICAgIH0sIF90ZW1wKSk7XG4gIH1cblxuICAoMCwgX2NyZWF0ZUNsYXNzMi5kZWZhdWx0KShDaGlwLCBbe1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGF2YXRhclByb3AgPSBfcHJvcHMuYXZhdGFyLFxuICAgICAgICAgIGNsYXNzZXMgPSBfcHJvcHMuY2xhc3NlcyxcbiAgICAgICAgICBjbGFzc05hbWVQcm9wID0gX3Byb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgICBjbGlja2FibGUgPSBfcHJvcHMuY2xpY2thYmxlLFxuICAgICAgICAgIENvbXBvbmVudCA9IF9wcm9wcy5jb21wb25lbnQsXG4gICAgICAgICAgZGVsZXRlSWNvblByb3AgPSBfcHJvcHMuZGVsZXRlSWNvbixcbiAgICAgICAgICBsYWJlbCA9IF9wcm9wcy5sYWJlbCxcbiAgICAgICAgICBvbkNsaWNrID0gX3Byb3BzLm9uQ2xpY2ssXG4gICAgICAgICAgb25EZWxldGUgPSBfcHJvcHMub25EZWxldGUsXG4gICAgICAgICAgb25LZXlEb3duID0gX3Byb3BzLm9uS2V5RG93bixcbiAgICAgICAgICB0YWJJbmRleFByb3AgPSBfcHJvcHMudGFiSW5kZXgsXG4gICAgICAgICAgb3RoZXIgPSAoMCwgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMi5kZWZhdWx0KShfcHJvcHMsIFtcImF2YXRhclwiLCBcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJjbGlja2FibGVcIiwgXCJjb21wb25lbnRcIiwgXCJkZWxldGVJY29uXCIsIFwibGFiZWxcIiwgXCJvbkNsaWNrXCIsIFwib25EZWxldGVcIiwgXCJvbktleURvd25cIiwgXCJ0YWJJbmRleFwiXSk7XG4gICAgICB2YXIgY2xhc3NOYW1lID0gKDAsIF9jbGFzc25hbWVzLmRlZmF1bHQpKGNsYXNzZXMucm9vdCwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoe30sIGNsYXNzZXMuY2xpY2thYmxlLCBvbkNsaWNrIHx8IGNsaWNrYWJsZSksICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKHt9LCBjbGFzc2VzLmRlbGV0YWJsZSwgb25EZWxldGUpLCBjbGFzc05hbWVQcm9wKTtcbiAgICAgIHZhciBkZWxldGVJY29uID0gbnVsbDtcblxuICAgICAgaWYgKG9uRGVsZXRlKSB7XG4gICAgICAgIGRlbGV0ZUljb24gPSBkZWxldGVJY29uUHJvcCAmJiBfcmVhY3QuZGVmYXVsdC5pc1ZhbGlkRWxlbWVudChkZWxldGVJY29uUHJvcCkgPyBfcmVhY3QuZGVmYXVsdC5jbG9uZUVsZW1lbnQoZGVsZXRlSWNvblByb3AsIHtcbiAgICAgICAgICBjbGFzc05hbWU6ICgwLCBfY2xhc3NuYW1lcy5kZWZhdWx0KShkZWxldGVJY29uUHJvcC5wcm9wcy5jbGFzc05hbWUsIGNsYXNzZXMuZGVsZXRlSWNvbiksXG4gICAgICAgICAgb25DbGljazogdGhpcy5oYW5kbGVEZWxldGVJY29uQ2xpY2tcbiAgICAgICAgfSkgOiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9DYW5jZWwuZGVmYXVsdCwge1xuICAgICAgICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5kZWxldGVJY29uLFxuICAgICAgICAgIG9uQ2xpY2s6IHRoaXMuaGFuZGxlRGVsZXRlSWNvbkNsaWNrXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICB2YXIgYXZhdGFyID0gbnVsbDtcblxuICAgICAgaWYgKGF2YXRhclByb3AgJiYgX3JlYWN0LmRlZmF1bHQuaXNWYWxpZEVsZW1lbnQoYXZhdGFyUHJvcCkpIHtcbiAgICAgICAgYXZhdGFyID0gX3JlYWN0LmRlZmF1bHQuY2xvbmVFbGVtZW50KGF2YXRhclByb3AsIHtcbiAgICAgICAgICBjbGFzc05hbWU6ICgwLCBfY2xhc3NuYW1lcy5kZWZhdWx0KShjbGFzc2VzLmF2YXRhciwgYXZhdGFyUHJvcC5wcm9wcy5jbGFzc05hbWUpLFxuICAgICAgICAgIGNoaWxkcmVuQ2xhc3NOYW1lOiAoMCwgX2NsYXNzbmFtZXMuZGVmYXVsdCkoY2xhc3Nlcy5hdmF0YXJDaGlsZHJlbiwgYXZhdGFyUHJvcC5wcm9wcy5jaGlsZHJlbkNsYXNzTmFtZSlcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHZhciB0YWJJbmRleCA9IHRhYkluZGV4UHJvcDtcblxuICAgICAgaWYgKCF0YWJJbmRleCkge1xuICAgICAgICB0YWJJbmRleCA9IG9uQ2xpY2sgfHwgb25EZWxldGUgfHwgY2xpY2thYmxlID8gMCA6IC0xO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChDb21wb25lbnQsICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe1xuICAgICAgICByb2xlOiBcImJ1dHRvblwiLFxuICAgICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZSxcbiAgICAgICAgdGFiSW5kZXg6IHRhYkluZGV4LFxuICAgICAgICBvbkNsaWNrOiBvbkNsaWNrLFxuICAgICAgICBvbktleURvd246IHRoaXMuaGFuZGxlS2V5RG93bixcbiAgICAgICAgcmVmOiBmdW5jdGlvbiByZWYobm9kZSkge1xuICAgICAgICAgIF90aGlzMi5jaGlwUmVmID0gbm9kZTtcbiAgICAgICAgfVxuICAgICAgfSwgb3RoZXIpLCBhdmF0YXIsIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzLmxhYmVsXG4gICAgICB9LCBsYWJlbCksIGRlbGV0ZUljb24pO1xuICAgIH1cbiAgfV0pO1xuICByZXR1cm4gQ2hpcDtcbn0oX3JlYWN0LmRlZmF1bHQuQ29tcG9uZW50KTtcblxuQ2hpcC5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIC8qKlxuICAgKiBBdmF0YXIgZWxlbWVudC5cbiAgICovXG4gIGF2YXRhcjogX3Byb3BUeXBlcy5kZWZhdWx0LmVsZW1lbnQsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzLWFwaSkgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBJZiB0cnVlLCB0aGUgY2hpcCB3aWxsIGFwcGVhciBjbGlja2FibGUsIGFuZCB3aWxsIHJhaXNlIHdoZW4gcHJlc3NlZCxcbiAgICogZXZlbiBpZiB0aGUgb25DbGljayBwcm9wZXJ0eSBpcyBub3QgZGVmaW5lZC4gVGhpcyBjYW4gYmUgdXNlZCwgZm9yIGV4YW1wbGUsXG4gICAqIGFsb25nIHdpdGggdGhlIGNvbXBvbmVudCBwcm9wZXJ0eSB0byBpbmRpY2F0ZSBhbiBhbmNob3IgQ2hpcCBpcyBjbGlja2FibGUuXG4gICAqL1xuICBjbGlja2FibGU6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBET00gZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZywgX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmNdKSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgdGhlIGRlZmF1bHQgZGVsZXRlIGljb24gZWxlbWVudC4gU2hvd24gb25seSBpZiBgb25EZWxldGVgIGlzIHNldC5cbiAgICovXG4gIGRlbGV0ZUljb246IF9wcm9wVHlwZXMuZGVmYXVsdC5lbGVtZW50LFxuXG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgbGFiZWwuXG4gICAqL1xuICBsYWJlbDogX3Byb3BUeXBlcy5kZWZhdWx0Lm5vZGUsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uQ2xpY2s6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmdW5jdGlvbiBmaXJlZCB3aGVuIHRoZSBkZWxldGUgaWNvbiBpcyBjbGlja2VkLlxuICAgKiBJZiBzZXQsIHRoZSBkZWxldGUgaWNvbiB3aWxsIGJlIHNob3duLlxuICAgKi9cbiAgb25EZWxldGU6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbktleURvd246IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICB0YWJJbmRleDogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlcy5kZWZhdWx0Lm51bWJlciwgX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZ10pXG59IDoge307XG5DaGlwLmRlZmF1bHRQcm9wcyA9IHtcbiAgY2xpY2thYmxlOiBmYWxzZSxcbiAgY29tcG9uZW50OiAnZGl2J1xufTtcblxudmFyIF9kZWZhdWx0ID0gKDAsIF93aXRoU3R5bGVzLmRlZmF1bHQpKHN0eWxlcywge1xuICBuYW1lOiAnTXVpQ2hpcCdcbn0pKENoaXApO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9wdXJlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVjb21wb3NlL3B1cmVcIikpO1xuXG52YXIgX1N2Z0ljb24gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi8uLi9TdmdJY29uXCIpKTtcblxudmFyIF9yZWYgPSBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gIGQ6IFwiTTE5IDNINWMtMS4xIDAtMiAuOS0yIDJ2MTRjMCAxLjEuOSAyIDIgMmgxNGMxLjEgMCAyLS45IDItMlY1YzAtMS4xLS45LTItMi0yem0tMiAxMEg3di0yaDEwdjJ6XCJcbn0pO1xuXG4vKipcbiAqIEBpZ25vcmUgLSBpbnRlcm5hbCBjb21wb25lbnQuXG4gKi9cbnZhciBJbmRldGVybWluYXRlQ2hlY2tCb3ggPSBmdW5jdGlvbiBJbmRldGVybWluYXRlQ2hlY2tCb3gocHJvcHMpIHtcbiAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX1N2Z0ljb24uZGVmYXVsdCwgcHJvcHMsIF9yZWYpO1xufTtcblxuSW5kZXRlcm1pbmF0ZUNoZWNrQm94ID0gKDAsIF9wdXJlLmRlZmF1bHQpKEluZGV0ZXJtaW5hdGVDaGVja0JveCk7XG5JbmRldGVybWluYXRlQ2hlY2tCb3gubXVpTmFtZSA9ICdTdmdJY29uJztcbnZhciBfZGVmYXVsdCA9IEluZGV0ZXJtaW5hdGVDaGVja0JveDtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3B1cmUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWNvbXBvc2UvcHVyZVwiKSk7XG5cbnZhciBfU3ZnSWNvbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uLy4uL1N2Z0ljb25cIikpO1xuXG52YXIgX3JlZiA9IF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgZDogXCJNMTkgM0g1Yy0xLjExIDAtMiAuOS0yIDJ2MTRjMCAxLjEuODkgMiAyIDJoMTRjMS4xMSAwIDItLjkgMi0yVjVjMC0xLjEtLjg5LTItMi0yem0tOSAxNGwtNS01IDEuNDEtMS40MUwxMCAxNC4xN2w3LjU5LTcuNTlMMTkgOGwtOSA5elwiXG59KTtcblxuLyoqXG4gKiBAaWdub3JlIC0gaW50ZXJuYWwgY29tcG9uZW50LlxuICovXG52YXIgQ2hlY2tCb3ggPSBmdW5jdGlvbiBDaGVja0JveChwcm9wcykge1xuICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfU3ZnSWNvbi5kZWZhdWx0LCBwcm9wcywgX3JlZik7XG59O1xuXG5DaGVja0JveCA9ICgwLCBfcHVyZS5kZWZhdWx0KShDaGVja0JveCk7XG5DaGVja0JveC5tdWlOYW1lID0gJ1N2Z0ljb24nO1xudmFyIF9kZWZhdWx0ID0gQ2hlY2tCb3g7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9wdXJlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVjb21wb3NlL3B1cmVcIikpO1xuXG52YXIgX1N2Z0ljb24gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi8uLi9TdmdJY29uXCIpKTtcblxudmFyIF9yZWYgPSBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gIGQ6IFwiTTE5IDV2MTRINVY1aDE0bTAtMkg1Yy0xLjEgMC0yIC45LTIgMnYxNGMwIDEuMS45IDIgMiAyaDE0YzEuMSAwIDItLjkgMi0yVjVjMC0xLjEtLjktMi0yLTJ6XCJcbn0pO1xuXG4vKipcbiAqIEBpZ25vcmUgLSBpbnRlcm5hbCBjb21wb25lbnQuXG4gKi9cbnZhciBDaGVja0JveE91dGxpbmVCbGFuayA9IGZ1bmN0aW9uIENoZWNrQm94T3V0bGluZUJsYW5rKHByb3BzKSB7XG4gIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9TdmdJY29uLmRlZmF1bHQsIHByb3BzLCBfcmVmKTtcbn07XG5cbkNoZWNrQm94T3V0bGluZUJsYW5rID0gKDAsIF9wdXJlLmRlZmF1bHQpKENoZWNrQm94T3V0bGluZUJsYW5rKTtcbkNoZWNrQm94T3V0bGluZUJsYW5rLm11aU5hbWUgPSAnU3ZnSWNvbic7XG52YXIgX2RlZmF1bHQgPSBDaGVja0JveE91dGxpbmVCbGFuaztcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5zdHlsZXMgPSB2b2lkIDA7XG5cbnZhciBfZXh0ZW5kczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vZXh0ZW5kc1wiKSk7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCIpKTtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKTtcblxudmFyIF9jbGFzc25hbWVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY2xhc3NuYW1lc1wiKSk7XG5cbnZhciBfU3dpdGNoQmFzZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL2ludGVybmFsL1N3aXRjaEJhc2VcIikpO1xuXG52YXIgX0NoZWNrQm94T3V0bGluZUJsYW5rID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vaW50ZXJuYWwvc3ZnLWljb25zL0NoZWNrQm94T3V0bGluZUJsYW5rXCIpKTtcblxudmFyIF9DaGVja0JveCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL2ludGVybmFsL3N2Zy1pY29ucy9DaGVja0JveFwiKSk7XG5cbnZhciBfSW5kZXRlcm1pbmF0ZUNoZWNrQm94ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vaW50ZXJuYWwvc3ZnLWljb25zL0luZGV0ZXJtaW5hdGVDaGVja0JveFwiKSk7XG5cbnZhciBfaGVscGVycyA9IHJlcXVpcmUoXCIuLi91dGlscy9oZWxwZXJzXCIpO1xuXG52YXIgX3dpdGhTdHlsZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9zdHlsZXMvd2l0aFN0eWxlc1wiKSk7XG5cbnZhciBzdHlsZXMgPSBmdW5jdGlvbiBzdHlsZXModGhlbWUpIHtcbiAgcmV0dXJuIHtcbiAgICByb290OiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS50ZXh0LnNlY29uZGFyeVxuICAgIH0sXG4gICAgY2hlY2tlZDoge30sXG4gICAgZGlzYWJsZWQ6IHt9LFxuICAgIGNvbG9yUHJpbWFyeToge1xuICAgICAgJyYkY2hlY2tlZCc6IHtcbiAgICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUucHJpbWFyeS5tYWluXG4gICAgICB9LFxuICAgICAgJyYkZGlzYWJsZWQnOiB7XG4gICAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLmFjdGlvbi5kaXNhYmxlZFxuICAgICAgfVxuICAgIH0sXG4gICAgY29sb3JTZWNvbmRhcnk6IHtcbiAgICAgICcmJGNoZWNrZWQnOiB7XG4gICAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnNlY29uZGFyeS5tYWluXG4gICAgICB9LFxuICAgICAgJyYkZGlzYWJsZWQnOiB7XG4gICAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLmFjdGlvbi5kaXNhYmxlZFxuICAgICAgfVxuICAgIH1cbiAgfTtcbn07XG5cbmV4cG9ydHMuc3R5bGVzID0gc3R5bGVzO1xuXG5mdW5jdGlvbiBDaGVja2JveChwcm9wcykge1xuICB2YXIgY2hlY2tlZEljb24gPSBwcm9wcy5jaGVja2VkSWNvbixcbiAgICAgIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY29sb3IgPSBwcm9wcy5jb2xvcixcbiAgICAgIGljb24gPSBwcm9wcy5pY29uLFxuICAgICAgaW5kZXRlcm1pbmF0ZSA9IHByb3BzLmluZGV0ZXJtaW5hdGUsXG4gICAgICBpbmRldGVybWluYXRlSWNvbiA9IHByb3BzLmluZGV0ZXJtaW5hdGVJY29uLFxuICAgICAgb3RoZXIgPSAoMCwgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMi5kZWZhdWx0KShwcm9wcywgW1wiY2hlY2tlZEljb25cIiwgXCJjbGFzc2VzXCIsIFwiY29sb3JcIiwgXCJpY29uXCIsIFwiaW5kZXRlcm1pbmF0ZVwiLCBcImluZGV0ZXJtaW5hdGVJY29uXCJdKTtcbiAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX1N3aXRjaEJhc2UuZGVmYXVsdCwgKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7XG4gICAgY2hlY2tlZEljb246IGluZGV0ZXJtaW5hdGUgPyBpbmRldGVybWluYXRlSWNvbiA6IGNoZWNrZWRJY29uLFxuICAgIGNsYXNzZXM6IHtcbiAgICAgIHJvb3Q6ICgwLCBfY2xhc3NuYW1lcy5kZWZhdWx0KShjbGFzc2VzLnJvb3QsIGNsYXNzZXNbXCJjb2xvclwiLmNvbmNhdCgoMCwgX2hlbHBlcnMuY2FwaXRhbGl6ZSkoY29sb3IpKV0pLFxuICAgICAgY2hlY2tlZDogY2xhc3Nlcy5jaGVja2VkLFxuICAgICAgZGlzYWJsZWQ6IGNsYXNzZXMuZGlzYWJsZWRcbiAgICB9LFxuICAgIGljb246IGluZGV0ZXJtaW5hdGUgPyBpbmRldGVybWluYXRlSWNvbiA6IGljb25cbiAgfSwgb3RoZXIpKTtcbn1cblxuQ2hlY2tib3gucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgY29tcG9uZW50IGlzIGNoZWNrZWQuXG4gICAqL1xuICBjaGVja2VkOiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCwgX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZ10pLFxuXG4gIC8qKlxuICAgKiBUaGUgaWNvbiB0byBkaXNwbGF5IHdoZW4gdGhlIGNvbXBvbmVudCBpcyBjaGVja2VkLlxuICAgKi9cbiAgY2hlY2tlZEljb246IF9wcm9wVHlwZXMuZGVmYXVsdC5ub2RlLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2Nzcy1hcGkpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIFRoZSBjb2xvciBvZiB0aGUgY29tcG9uZW50LiBJdCBzdXBwb3J0cyB0aG9zZSB0aGVtZSBjb2xvcnMgdGhhdCBtYWtlIHNlbnNlIGZvciB0aGlzIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbG9yOiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2YoWydwcmltYXJ5JywgJ3NlY29uZGFyeScsICdkZWZhdWx0J10pLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBzd2l0Y2ggd2lsbCBiZSBkaXNhYmxlZC5cbiAgICovXG4gIGRpc2FibGVkOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgcmlwcGxlIGVmZmVjdCB3aWxsIGJlIGRpc2FibGVkLlxuICAgKi9cbiAgZGlzYWJsZVJpcHBsZTogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSBpY29uIHRvIGRpc3BsYXkgd2hlbiB0aGUgY29tcG9uZW50IGlzIHVuY2hlY2tlZC5cbiAgICovXG4gIGljb246IF9wcm9wVHlwZXMuZGVmYXVsdC5ub2RlLFxuXG4gIC8qKlxuICAgKiBUaGUgaWQgb2YgdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIGlkOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBjb21wb25lbnQgYXBwZWFycyBpbmRldGVybWluYXRlLlxuICAgKi9cbiAgaW5kZXRlcm1pbmF0ZTogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSBpY29uIHRvIGRpc3BsYXkgd2hlbiB0aGUgY29tcG9uZW50IGlzIGluZGV0ZXJtaW5hdGUuXG4gICAqL1xuICBpbmRldGVybWluYXRlSWNvbjogX3Byb3BUeXBlcy5kZWZhdWx0Lm5vZGUsXG5cbiAgLyoqXG4gICAqIFByb3BlcnRpZXMgYXBwbGllZCB0byB0aGUgYGlucHV0YCBlbGVtZW50LlxuICAgKi9cbiAgaW5wdXRQcm9wczogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdCxcblxuICAvKipcbiAgICogVXNlIHRoYXQgcHJvcGVydHkgdG8gcGFzcyBhIHJlZiBjYWxsYmFjayB0byB0aGUgbmF0aXZlIGlucHV0IGNvbXBvbmVudC5cbiAgICovXG4gIGlucHV0UmVmOiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYywgX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdF0pLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBzdGF0ZSBpcyBjaGFuZ2VkLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gZXZlbnQgVGhlIGV2ZW50IHNvdXJjZSBvZiB0aGUgY2FsbGJhY2suXG4gICAqIFlvdSBjYW4gcHVsbCBvdXQgdGhlIG5ldyB2YWx1ZSBieSBhY2Nlc3NpbmcgYGV2ZW50LnRhcmdldC5jaGVja2VkYC5cbiAgICogQHBhcmFtIHtib29sZWFufSBjaGVja2VkIFRoZSBgY2hlY2tlZGAgdmFsdWUgb2YgdGhlIHN3aXRjaFxuICAgKi9cbiAgb25DaGFuZ2U6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBUaGUgaW5wdXQgY29tcG9uZW50IHByb3BlcnR5IGB0eXBlYC5cbiAgICovXG4gIHR5cGU6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSB2YWx1ZSBvZiB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgdmFsdWU6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmdcbn0gOiB7fTtcbkNoZWNrYm94LmRlZmF1bHRQcm9wcyA9IHtcbiAgY2hlY2tlZEljb246IF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX0NoZWNrQm94LmRlZmF1bHQsIG51bGwpLFxuICBjb2xvcjogJ3NlY29uZGFyeScsXG4gIGljb246IF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX0NoZWNrQm94T3V0bGluZUJsYW5rLmRlZmF1bHQsIG51bGwpLFxuICBpbmRldGVybWluYXRlOiBmYWxzZSxcbiAgaW5kZXRlcm1pbmF0ZUljb246IF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX0luZGV0ZXJtaW5hdGVDaGVja0JveC5kZWZhdWx0LCBudWxsKVxufTtcblxudmFyIF9kZWZhdWx0ID0gKDAsIF93aXRoU3R5bGVzLmRlZmF1bHQpKHN0eWxlcywge1xuICBuYW1lOiAnTXVpQ2hlY2tib3gnXG59KShDaGVja2JveCk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5zdHlsZXMgPSB2b2lkIDA7XG5cbnZhciBfZXh0ZW5kczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vZXh0ZW5kc1wiKSk7XG5cbnZhciBfZGVmaW5lUHJvcGVydHkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2RlZmluZVByb3BlcnR5XCIpKTtcblxudmFyIF9vYmplY3RTcHJlYWQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL29iamVjdFNwcmVhZFwiKSk7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCIpKTtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKTtcblxudmFyIF9jbGFzc25hbWVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY2xhc3NuYW1lc1wiKSk7XG5cbnZhciBfd2FybmluZyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIndhcm5pbmdcIikpO1xuXG52YXIgX3dpdGhTdHlsZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9zdHlsZXMvd2l0aFN0eWxlc1wiKSk7XG5cbnZhciBzdHlsZXMgPSB7XG4gIHJvb3Q6IHtcbiAgICBkaXNwbGF5OiAnYmxvY2snLFxuICAgIGJhY2tncm91bmRTaXplOiAnY292ZXInLFxuICAgIGJhY2tncm91bmRSZXBlYXQ6ICduby1yZXBlYXQnLFxuICAgIGJhY2tncm91bmRQb3NpdGlvbjogJ2NlbnRlcidcbiAgfSxcbiAgbWVkaWE6IHtcbiAgICB3aWR0aDogJzEwMCUnXG4gIH1cbn07XG5leHBvcnRzLnN0eWxlcyA9IHN0eWxlcztcbnZhciBNRURJQV9DT01QT05FTlRTID0gWyd2aWRlbycsICdhdWRpbycsICdwaWN0dXJlJywgJ2lmcmFtZScsICdpbWcnXTtcblxuZnVuY3Rpb24gQ2FyZE1lZGlhKHByb3BzKSB7XG4gIHZhciBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIENvbXBvbmVudCA9IHByb3BzLmNvbXBvbmVudCxcbiAgICAgIGltYWdlID0gcHJvcHMuaW1hZ2UsXG4gICAgICBzcmMgPSBwcm9wcy5zcmMsXG4gICAgICBzdHlsZSA9IHByb3BzLnN0eWxlLFxuICAgICAgb3RoZXIgPSAoMCwgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMi5kZWZhdWx0KShwcm9wcywgW1wiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcImNvbXBvbmVudFwiLCBcImltYWdlXCIsIFwic3JjXCIsIFwic3R5bGVcIl0pO1xuICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyAoMCwgX3dhcm5pbmcuZGVmYXVsdCkoQm9vbGVhbihpbWFnZSB8fCBzcmMpLCAnTWF0ZXJpYWwtVUk6IGVpdGhlciBgaW1hZ2VgIG9yIGBzcmNgIHByb3BlcnR5IG11c3QgYmUgc3BlY2lmaWVkLicpIDogdm9pZCAwO1xuICB2YXIgaXNNZWRpYUNvbXBvbmVudCA9IE1FRElBX0NPTVBPTkVOVFMuaW5kZXhPZihDb21wb25lbnQpICE9PSAtMTtcbiAgdmFyIGNvbXBvc2VkU3R5bGUgPSAhaXNNZWRpYUNvbXBvbmVudCAmJiBpbWFnZSA/ICgwLCBfb2JqZWN0U3ByZWFkMi5kZWZhdWx0KSh7XG4gICAgYmFja2dyb3VuZEltYWdlOiBcInVybChcXFwiXCIuY29uY2F0KGltYWdlLCBcIlxcXCIpXCIpXG4gIH0sIHN0eWxlKSA6IHN0eWxlO1xuICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChDb21wb25lbnQsICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe1xuICAgIGNsYXNzTmFtZTogKDAsIF9jbGFzc25hbWVzLmRlZmF1bHQpKGNsYXNzZXMucm9vdCwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoe30sIGNsYXNzZXMubWVkaWEsIGlzTWVkaWFDb21wb25lbnQpLCBjbGFzc05hbWUpLFxuICAgIHN0eWxlOiBjb21wb3NlZFN0eWxlLFxuICAgIHNyYzogaXNNZWRpYUNvbXBvbmVudCA/IGltYWdlIHx8IHNyYyA6IHVuZGVmaW5lZFxuICB9LCBvdGhlcikpO1xufVxuXG5DYXJkTWVkaWEucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MtYXBpKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIENvbXBvbmVudCBmb3IgcmVuZGVyaW5nIGltYWdlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgRE9NIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsIF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jXSksXG5cbiAgLyoqXG4gICAqIEltYWdlIHRvIGJlIGRpc3BsYXllZCBhcyBhIGJhY2tncm91bmQgaW1hZ2UuXG4gICAqIEVpdGhlciBgaW1hZ2VgIG9yIGBzcmNgIHByb3AgbXVzdCBiZSBzcGVjaWZpZWQuXG4gICAqIE5vdGUgdGhhdCBjYWxsZXIgbXVzdCBzcGVjaWZ5IGhlaWdodCBvdGhlcndpc2UgdGhlIGltYWdlIHdpbGwgbm90IGJlIHZpc2libGUuXG4gICAqL1xuICBpbWFnZTogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxcblxuICAvKipcbiAgICogQW4gYWxpYXMgZm9yIGBpbWFnZWAgcHJvcGVydHkuXG4gICAqIEF2YWlsYWJsZSBvbmx5IHdpdGggbWVkaWEgY29tcG9uZW50cy5cbiAgICogTWVkaWEgY29tcG9uZW50czogYHZpZGVvYCwgYGF1ZGlvYCwgYHBpY3R1cmVgLCBgaWZyYW1lYCwgYGltZ2AuXG4gICAqL1xuICBzcmM6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHN0eWxlOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0XG59IDoge307XG5DYXJkTWVkaWEuZGVmYXVsdFByb3BzID0ge1xuICBjb21wb25lbnQ6ICdkaXYnXG59O1xuXG52YXIgX2RlZmF1bHQgPSAoMCwgX3dpdGhTdHlsZXMuZGVmYXVsdCkoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlDYXJkTWVkaWEnXG59KShDYXJkTWVkaWEpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuc3R5bGVzID0gdm9pZCAwO1xuXG52YXIgX2V4dGVuZHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2V4dGVuZHNcIikpO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiKSk7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbnZhciBfY2xhc3NuYW1lcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImNsYXNzbmFtZXNcIikpO1xuXG52YXIgX3dpdGhTdHlsZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9zdHlsZXMvd2l0aFN0eWxlc1wiKSk7XG5cbnZhciBfVHlwb2dyYXBoeSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL1R5cG9ncmFwaHlcIikpO1xuXG52YXIgc3R5bGVzID0gZnVuY3Rpb24gc3R5bGVzKHRoZW1lKSB7XG4gIHJldHVybiB7XG4gICAgcm9vdDogdGhlbWUubWl4aW5zLmd1dHRlcnMoe1xuICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICBwYWRkaW5nVG9wOiB0aGVtZS5zcGFjaW5nLnVuaXQgKiAyLFxuICAgICAgcGFkZGluZ0JvdHRvbTogdGhlbWUuc3BhY2luZy51bml0ICogMlxuICAgIH0pLFxuICAgIGF2YXRhcjoge1xuICAgICAgZmxleDogJzAgMCBhdXRvJyxcbiAgICAgIG1hcmdpblJpZ2h0OiB0aGVtZS5zcGFjaW5nLnVuaXQgKiAyXG4gICAgfSxcbiAgICBhY3Rpb246IHtcbiAgICAgIGZsZXg6ICcwIDAgYXV0bycsXG4gICAgICBhbGlnblNlbGY6ICdmbGV4LXN0YXJ0JyxcbiAgICAgIG1hcmdpblRvcDogdGhlbWUuc3BhY2luZy51bml0ICogLTEsXG4gICAgICBtYXJnaW5SaWdodDogdGhlbWUuc3BhY2luZy51bml0ICogLTJcbiAgICB9LFxuICAgIGNvbnRlbnQ6IHtcbiAgICAgIGZsZXg6ICcxIDEgYXV0bydcbiAgICB9LFxuICAgIHRpdGxlOiB7fSxcbiAgICBzdWJoZWFkZXI6IHt9XG4gIH07XG59O1xuXG5leHBvcnRzLnN0eWxlcyA9IHN0eWxlcztcblxuZnVuY3Rpb24gQ2FyZEhlYWRlcihwcm9wcykge1xuICB2YXIgYWN0aW9uID0gcHJvcHMuYWN0aW9uLFxuICAgICAgYXZhdGFyID0gcHJvcHMuYXZhdGFyLFxuICAgICAgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBjbGFzc05hbWVQcm9wID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgQ29tcG9uZW50ID0gcHJvcHMuY29tcG9uZW50LFxuICAgICAgc3ViaGVhZGVyID0gcHJvcHMuc3ViaGVhZGVyLFxuICAgICAgdGl0bGUgPSBwcm9wcy50aXRsZSxcbiAgICAgIG90aGVyID0gKDAsIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIuZGVmYXVsdCkocHJvcHMsIFtcImFjdGlvblwiLCBcImF2YXRhclwiLCBcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJjb21wb25lbnRcIiwgXCJzdWJoZWFkZXJcIiwgXCJ0aXRsZVwiXSk7XG4gIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7XG4gICAgY2xhc3NOYW1lOiAoMCwgX2NsYXNzbmFtZXMuZGVmYXVsdCkoY2xhc3Nlcy5yb290LCBjbGFzc05hbWVQcm9wKVxuICB9LCBvdGhlciksIGF2YXRhciAmJiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICBjbGFzc05hbWU6IGNsYXNzZXMuYXZhdGFyXG4gIH0sIGF2YXRhciksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5jb250ZW50XG4gIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX1R5cG9ncmFwaHkuZGVmYXVsdCwge1xuICAgIHZhcmlhbnQ6IGF2YXRhciA/ICdib2R5MicgOiAnaGVhZGxpbmUnLFxuICAgIGNvbXBvbmVudDogXCJzcGFuXCIsXG4gICAgY2xhc3NOYW1lOiBjbGFzc2VzLnRpdGxlXG4gIH0sIHRpdGxlKSwgc3ViaGVhZGVyICYmIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX1R5cG9ncmFwaHkuZGVmYXVsdCwge1xuICAgIHZhcmlhbnQ6IGF2YXRhciA/ICdib2R5MicgOiAnYm9keTEnLFxuICAgIGNvbXBvbmVudDogXCJzcGFuXCIsXG4gICAgY29sb3I6IFwidGV4dFNlY29uZGFyeVwiLFxuICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5zdWJoZWFkZXJcbiAgfSwgc3ViaGVhZGVyKSksIGFjdGlvbiAmJiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICBjbGFzc05hbWU6IGNsYXNzZXMuYWN0aW9uXG4gIH0sIGFjdGlvbikpO1xufVxuXG5DYXJkSGVhZGVyLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqXG4gICAqIFRoZSBhY3Rpb24gdG8gZGlzcGxheSBpbiB0aGUgY2FyZCBoZWFkZXIuXG4gICAqL1xuICBhY3Rpb246IF9wcm9wVHlwZXMuZGVmYXVsdC5ub2RlLFxuXG4gIC8qKlxuICAgKiBUaGUgQXZhdGFyIGZvciB0aGUgQ2FyZCBIZWFkZXIuXG4gICAqL1xuICBhdmF0YXI6IF9wcm9wVHlwZXMuZGVmYXVsdC5ub2RlLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2Nzcy1hcGkpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgRE9NIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsIF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jXSksXG5cbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBzdWJoZWFkZXI6IF9wcm9wVHlwZXMuZGVmYXVsdC5ub2RlLFxuXG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgQ2FyZCBUaXRsZS5cbiAgICovXG4gIHRpdGxlOiBfcHJvcFR5cGVzLmRlZmF1bHQubm9kZVxufSA6IHt9O1xuQ2FyZEhlYWRlci5kZWZhdWx0UHJvcHMgPSB7XG4gIGNvbXBvbmVudDogJ2Rpdidcbn07XG5cbnZhciBfZGVmYXVsdCA9ICgwLCBfd2l0aFN0eWxlcy5kZWZhdWx0KShzdHlsZXMsIHtcbiAgbmFtZTogJ011aUNhcmRIZWFkZXInXG59KShDYXJkSGVhZGVyKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLnN0eWxlcyA9IHZvaWQgMDtcblxudmFyIF9leHRlbmRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9leHRlbmRzXCIpKTtcblxudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIikpO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xuXG52YXIgX2NsYXNzbmFtZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJjbGFzc25hbWVzXCIpKTtcblxudmFyIF93aXRoU3R5bGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vc3R5bGVzL3dpdGhTdHlsZXNcIikpO1xuXG52YXIgc3R5bGVzID0gZnVuY3Rpb24gc3R5bGVzKHRoZW1lKSB7XG4gIHJldHVybiB7XG4gICAgcm9vdDogdGhlbWUubWl4aW5zLmd1dHRlcnMoe1xuICAgICAgcGFkZGluZ1RvcDogdGhlbWUuc3BhY2luZy51bml0ICogMixcbiAgICAgIHBhZGRpbmdCb3R0b206IHRoZW1lLnNwYWNpbmcudW5pdCAqIDIsXG4gICAgICAnJjpsYXN0LWNoaWxkJzoge1xuICAgICAgICBwYWRkaW5nQm90dG9tOiB0aGVtZS5zcGFjaW5nLnVuaXQgKiAzXG4gICAgICB9XG4gICAgfSlcbiAgfTtcbn07XG5cbmV4cG9ydHMuc3R5bGVzID0gc3R5bGVzO1xuXG5mdW5jdGlvbiBDYXJkQ29udGVudChwcm9wcykge1xuICB2YXIgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBDb21wb25lbnQgPSBwcm9wcy5jb21wb25lbnQsXG4gICAgICBvdGhlciA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyLmRlZmF1bHQpKHByb3BzLCBbXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29tcG9uZW50XCJdKTtcbiAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHtcbiAgICBjbGFzc05hbWU6ICgwLCBfY2xhc3NuYW1lcy5kZWZhdWx0KShjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSlcbiAgfSwgb3RoZXIpKTtcbn1cblxuQ2FyZENvbnRlbnQucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MtYXBpKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIERPTSBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgY29tcG9uZW50OiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLCBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuY10pXG59IDoge307XG5DYXJkQ29udGVudC5kZWZhdWx0UHJvcHMgPSB7XG4gIGNvbXBvbmVudDogJ2Rpdidcbn07XG5cbnZhciBfZGVmYXVsdCA9ICgwLCBfd2l0aFN0eWxlcy5kZWZhdWx0KShzdHlsZXMsIHtcbiAgbmFtZTogJ011aUNhcmRDb250ZW50J1xufSkoQ2FyZENvbnRlbnQpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuc3R5bGVzID0gdm9pZCAwO1xuXG52YXIgX2V4dGVuZHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2V4dGVuZHNcIikpO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiKSk7XG5cbnZhciBfZGVmaW5lUHJvcGVydHkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2RlZmluZVByb3BlcnR5XCIpKTtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKTtcblxudmFyIF9jbGFzc25hbWVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY2xhc3NuYW1lc1wiKSk7XG5cbnZhciBfd2l0aFN0eWxlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3N0eWxlcy93aXRoU3R5bGVzXCIpKTtcblxudmFyIF9yZWFjdEhlbHBlcnMgPSByZXF1aXJlKFwiLi4vdXRpbHMvcmVhY3RIZWxwZXJzXCIpO1xuXG5yZXF1aXJlKFwiLi4vQnV0dG9uXCIpO1xuXG4vLyBTbyB3ZSBkb24ndCBoYXZlIGFueSBvdmVycmlkZSBwcmlvcml0eSBpc3N1ZS5cbnZhciBzdHlsZXMgPSBmdW5jdGlvbiBzdHlsZXModGhlbWUpIHtcbiAgcmV0dXJuIHtcbiAgICByb290OiAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KSh7XG4gICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgIGJveFNpemluZzogJ2JvcmRlci1ib3gnLFxuICAgICAgcGFkZGluZzogXCJcIi5jb25jYXQodGhlbWUuc3BhY2luZy51bml0LCBcInB4IFwiKS5jb25jYXQodGhlbWUuc3BhY2luZy51bml0IC8gMiwgXCJweFwiKVxuICAgIH0sIHRoZW1lLmJyZWFrcG9pbnRzLnVwKCdzbScpLCB7XG4gICAgICBwYWRkaW5nOiBcIlwiLmNvbmNhdCh0aGVtZS5zcGFjaW5nLnVuaXQsIFwicHggXCIpLmNvbmNhdCh0aGVtZS5zcGFjaW5nLnVuaXQgKiAxLjUsIFwicHhcIilcbiAgICB9KSxcbiAgICBhY3Rpb246IHtcbiAgICAgIG1hcmdpbjogXCIwIFwiLmNvbmNhdCh0aGVtZS5zcGFjaW5nLnVuaXQgLyAyLCBcInB4XCIpXG4gICAgfVxuICB9O1xufTtcblxuZXhwb3J0cy5zdHlsZXMgPSBzdHlsZXM7XG5cbmZ1bmN0aW9uIENhcmRBY3Rpb25zKHByb3BzKSB7XG4gIHZhciBkaXNhYmxlQWN0aW9uU3BhY2luZyA9IHByb3BzLmRpc2FibGVBY3Rpb25TcGFjaW5nLFxuICAgICAgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgb3RoZXIgPSAoMCwgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMi5kZWZhdWx0KShwcm9wcywgW1wiZGlzYWJsZUFjdGlvblNwYWNpbmdcIiwgXCJjaGlsZHJlblwiLCBcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIl0pO1xuICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImRpdlwiLCAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHtcbiAgICBjbGFzc05hbWU6ICgwLCBfY2xhc3NuYW1lcy5kZWZhdWx0KShjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSlcbiAgfSwgb3RoZXIpLCBkaXNhYmxlQWN0aW9uU3BhY2luZyA/IGNoaWxkcmVuIDogKDAsIF9yZWFjdEhlbHBlcnMuY2xvbmVDaGlsZHJlbldpdGhDbGFzc05hbWUpKGNoaWxkcmVuLCBjbGFzc2VzLmFjdGlvbikpO1xufVxuXG5DYXJkQWN0aW9ucy5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IF9wcm9wVHlwZXMuZGVmYXVsdC5ub2RlLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2Nzcy1hcGkpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgY2FyZCBhY3Rpb25zIGRvIG5vdCBoYXZlIGFkZGl0aW9uYWwgbWFyZ2luLlxuICAgKi9cbiAgZGlzYWJsZUFjdGlvblNwYWNpbmc6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sXG59IDoge307XG5DYXJkQWN0aW9ucy5kZWZhdWx0UHJvcHMgPSB7XG4gIGRpc2FibGVBY3Rpb25TcGFjaW5nOiBmYWxzZVxufTtcblxudmFyIF9kZWZhdWx0ID0gKDAsIF93aXRoU3R5bGVzLmRlZmF1bHQpKHN0eWxlcywge1xuICBuYW1lOiAnTXVpQ2FyZEFjdGlvbnMnXG59KShDYXJkQWN0aW9ucyk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5zdHlsZXMgPSB2b2lkIDA7XG5cbnZhciBfZXh0ZW5kczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vZXh0ZW5kc1wiKSk7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCIpKTtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKTtcblxudmFyIF9jbGFzc25hbWVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY2xhc3NuYW1lc1wiKSk7XG5cbnZhciBfUGFwZXIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9QYXBlclwiKSk7XG5cbnZhciBfd2l0aFN0eWxlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3N0eWxlcy93aXRoU3R5bGVzXCIpKTtcblxuLy8gQGluaGVyaXRlZENvbXBvbmVudCBQYXBlclxudmFyIHN0eWxlcyA9IHtcbiAgcm9vdDoge1xuICAgIG92ZXJmbG93OiAnaGlkZGVuJ1xuICB9XG59O1xuZXhwb3J0cy5zdHlsZXMgPSBzdHlsZXM7XG5cbmZ1bmN0aW9uIENhcmQocHJvcHMpIHtcbiAgdmFyIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgcmFpc2VkID0gcHJvcHMucmFpc2VkLFxuICAgICAgb3RoZXIgPSAoMCwgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMi5kZWZhdWx0KShwcm9wcywgW1wiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcInJhaXNlZFwiXSk7XG4gIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9QYXBlci5kZWZhdWx0LCAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHtcbiAgICBjbGFzc05hbWU6ICgwLCBfY2xhc3NuYW1lcy5kZWZhdWx0KShjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSksXG4gICAgZWxldmF0aW9uOiByYWlzZWQgPyA4IDogMlxuICB9LCBvdGhlcikpO1xufVxuXG5DYXJkLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzLWFwaSkgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBjYXJkIHdpbGwgdXNlIHJhaXNlZCBzdHlsaW5nLlxuICAgKi9cbiAgcmFpc2VkOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbFxufSA6IHt9O1xuQ2FyZC5kZWZhdWx0UHJvcHMgPSB7XG4gIHJhaXNlZDogZmFsc2Vcbn07XG5cbnZhciBfZGVmYXVsdCA9ICgwLCBfd2l0aFN0eWxlcy5kZWZhdWx0KShzdHlsZXMsIHtcbiAgbmFtZTogJ011aUNhcmQnXG59KShDYXJkKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLnN0eWxlcyA9IHZvaWQgMDtcblxudmFyIF9leHRlbmRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9leHRlbmRzXCIpKTtcblxudmFyIF9kZWZpbmVQcm9wZXJ0eTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vZGVmaW5lUHJvcGVydHlcIikpO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiKSk7XG5cbnZhciBfY2xhc3NDYWxsQ2hlY2syID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2NsYXNzQ2FsbENoZWNrXCIpKTtcblxudmFyIF9jcmVhdGVDbGFzczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vY3JlYXRlQ2xhc3NcIikpO1xuXG52YXIgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5cIikpO1xuXG52YXIgX2luaGVyaXRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9pbmhlcml0c1wiKSk7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbnZhciBfY2xhc3NuYW1lcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImNsYXNzbmFtZXNcIikpO1xuXG52YXIgX3dpdGhTdHlsZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9zdHlsZXMvd2l0aFN0eWxlc1wiKSk7XG5cbnZhciBfQnV0dG9uQmFzZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL0J1dHRvbkJhc2VcIikpO1xuXG4vLyBAaW5oZXJpdGVkQ29tcG9uZW50IEJ1dHRvbkJhc2VcbnZhciBzdHlsZXMgPSBmdW5jdGlvbiBzdHlsZXModGhlbWUpIHtcbiAgcmV0dXJuIHtcbiAgICByb290OiB7XG4gICAgICB0cmFuc2l0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoWydjb2xvcicsICdwYWRkaW5nLXRvcCddLCB7XG4gICAgICAgIGR1cmF0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5kdXJhdGlvbi5zaG9ydFxuICAgICAgfSksXG4gICAgICBwYWRkaW5nVG9wOiB0aGVtZS5zcGFjaW5nLnVuaXQsXG4gICAgICBwYWRkaW5nQm90dG9tOiAxMCxcbiAgICAgIHBhZGRpbmdMZWZ0OiAxMixcbiAgICAgIHBhZGRpbmdSaWdodDogMTIsXG4gICAgICBtaW5XaWR0aDogODAsXG4gICAgICBtYXhXaWR0aDogMTY4LFxuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUudGV4dC5zZWNvbmRhcnksXG4gICAgICBmbGV4OiAnMScsXG4gICAgICAnJiRpY29uT25seSc6IHtcbiAgICAgICAgcGFkZGluZ1RvcDogdGhlbWUuc3BhY2luZy51bml0ICogMlxuICAgICAgfSxcbiAgICAgICcmJHNlbGVjdGVkJzoge1xuICAgICAgICBwYWRkaW5nVG9wOiA2LFxuICAgICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5wcmltYXJ5Lm1haW5cbiAgICAgIH1cbiAgICB9LFxuICAgIHNlbGVjdGVkOiB7fSxcbiAgICBpY29uT25seToge30sXG4gICAgd3JhcHBlcjoge1xuICAgICAgZGlzcGxheTogJ2lubGluZS1mbGV4JyxcbiAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLFxuICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgIGZsZXhEaXJlY3Rpb246ICdjb2x1bW4nXG4gICAgfSxcbiAgICBsYWJlbDoge1xuICAgICAgZm9udEZhbWlseTogdGhlbWUudHlwb2dyYXBoeS5mb250RmFtaWx5LFxuICAgICAgZm9udFNpemU6IHRoZW1lLnR5cG9ncmFwaHkucHhUb1JlbSgxMiksXG4gICAgICBvcGFjaXR5OiAxLFxuICAgICAgdHJhbnNpdGlvbjogJ2ZvbnQtc2l6ZSAwLjJzLCBvcGFjaXR5IDAuMnMnLFxuICAgICAgdHJhbnNpdGlvbkRlbGF5OiAnMC4xcycsXG4gICAgICAnJiRpY29uT25seSc6IHtcbiAgICAgICAgb3BhY2l0eTogMCxcbiAgICAgICAgdHJhbnNpdGlvbkRlbGF5OiAnMHMnXG4gICAgICB9LFxuICAgICAgJyYkc2VsZWN0ZWQnOiB7XG4gICAgICAgIGZvbnRTaXplOiB0aGVtZS50eXBvZ3JhcGh5LnB4VG9SZW0oMTQpXG4gICAgICB9XG4gICAgfVxuICB9O1xufTtcblxuZXhwb3J0cy5zdHlsZXMgPSBzdHlsZXM7XG5cbnZhciBCb3R0b21OYXZpZ2F0aW9uQWN0aW9uID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gICgwLCBfaW5oZXJpdHMyLmRlZmF1bHQpKEJvdHRvbU5hdmlnYXRpb25BY3Rpb24sIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIEJvdHRvbU5hdmlnYXRpb25BY3Rpb24oKSB7XG4gICAgdmFyIF9yZWY7XG5cbiAgICB2YXIgX3RlbXAsIF90aGlzO1xuXG4gICAgKDAsIF9jbGFzc0NhbGxDaGVjazIuZGVmYXVsdCkodGhpcywgQm90dG9tTmF2aWdhdGlvbkFjdGlvbik7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuICgwLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIuZGVmYXVsdCkoX3RoaXMsIChfdGVtcCA9IF90aGlzID0gKDAsIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMi5kZWZhdWx0KSh0aGlzLCAoX3JlZiA9IEJvdHRvbU5hdmlnYXRpb25BY3Rpb24uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihCb3R0b21OYXZpZ2F0aW9uQWN0aW9uKSkuY2FsbC5hcHBseShfcmVmLCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzLmhhbmRsZUNoYW5nZSA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgb25DaGFuZ2UgPSBfdGhpcyRwcm9wcy5vbkNoYW5nZSxcbiAgICAgICAgICB2YWx1ZSA9IF90aGlzJHByb3BzLnZhbHVlLFxuICAgICAgICAgIG9uQ2xpY2sgPSBfdGhpcyRwcm9wcy5vbkNsaWNrO1xuXG4gICAgICBpZiAob25DaGFuZ2UpIHtcbiAgICAgICAgb25DaGFuZ2UoZXZlbnQsIHZhbHVlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKG9uQ2xpY2spIHtcbiAgICAgICAgb25DbGljayhldmVudCk7XG4gICAgICB9XG4gICAgfSwgX3RlbXApKTtcbiAgfVxuXG4gICgwLCBfY3JlYXRlQ2xhc3MyLmRlZmF1bHQpKEJvdHRvbU5hdmlnYXRpb25BY3Rpb24sIFt7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX2NsYXNzTmFtZXMsIF9jbGFzc05hbWVzMjtcblxuICAgICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgY2xhc3NlcyA9IF9wcm9wcy5jbGFzc2VzLFxuICAgICAgICAgIGNsYXNzTmFtZVByb3AgPSBfcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICAgIGljb24gPSBfcHJvcHMuaWNvbixcbiAgICAgICAgICBsYWJlbCA9IF9wcm9wcy5sYWJlbCxcbiAgICAgICAgICBvbkNoYW5nZSA9IF9wcm9wcy5vbkNoYW5nZSxcbiAgICAgICAgICBvbkNsaWNrID0gX3Byb3BzLm9uQ2xpY2ssXG4gICAgICAgICAgc2VsZWN0ZWQgPSBfcHJvcHMuc2VsZWN0ZWQsXG4gICAgICAgICAgc2hvd0xhYmVsUHJvcCA9IF9wcm9wcy5zaG93TGFiZWwsXG4gICAgICAgICAgdmFsdWUgPSBfcHJvcHMudmFsdWUsXG4gICAgICAgICAgb3RoZXIgPSAoMCwgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMi5kZWZhdWx0KShfcHJvcHMsIFtcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJpY29uXCIsIFwibGFiZWxcIiwgXCJvbkNoYW5nZVwiLCBcIm9uQ2xpY2tcIiwgXCJzZWxlY3RlZFwiLCBcInNob3dMYWJlbFwiLCBcInZhbHVlXCJdKTtcbiAgICAgIHZhciBjbGFzc05hbWUgPSAoMCwgX2NsYXNzbmFtZXMuZGVmYXVsdCkoY2xhc3Nlcy5yb290LCAoX2NsYXNzTmFtZXMgPSB7fSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2NsYXNzTmFtZXMsIGNsYXNzZXMuc2VsZWN0ZWQsIHNlbGVjdGVkKSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2NsYXNzTmFtZXMsIGNsYXNzZXMuaWNvbk9ubHksICFzaG93TGFiZWxQcm9wICYmICFzZWxlY3RlZCksIF9jbGFzc05hbWVzKSwgY2xhc3NOYW1lUHJvcCk7XG4gICAgICB2YXIgbGFiZWxDbGFzc05hbWUgPSAoMCwgX2NsYXNzbmFtZXMuZGVmYXVsdCkoY2xhc3Nlcy5sYWJlbCwgKF9jbGFzc05hbWVzMiA9IHt9LCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lczIsIGNsYXNzZXMuc2VsZWN0ZWQsIHNlbGVjdGVkKSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2NsYXNzTmFtZXMyLCBjbGFzc2VzLmljb25Pbmx5LCAhc2hvd0xhYmVsUHJvcCAmJiAhc2VsZWN0ZWQpLCBfY2xhc3NOYW1lczIpKTtcbiAgICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9CdXR0b25CYXNlLmRlZmF1bHQsICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe1xuICAgICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZSxcbiAgICAgICAgZm9jdXNSaXBwbGU6IHRydWUsXG4gICAgICAgIG9uQ2xpY2s6IHRoaXMuaGFuZGxlQ2hhbmdlXG4gICAgICB9LCBvdGhlciksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzLndyYXBwZXJcbiAgICAgIH0sIGljb24sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBsYWJlbENsYXNzTmFtZVxuICAgICAgfSwgbGFiZWwpKSk7XG4gICAgfVxuICB9XSk7XG4gIHJldHVybiBCb3R0b21OYXZpZ2F0aW9uQWN0aW9uO1xufShfcmVhY3QuZGVmYXVsdC5Db21wb25lbnQpO1xuXG5Cb3R0b21OYXZpZ2F0aW9uQWN0aW9uLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzLWFwaSkgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgaWNvbiBlbGVtZW50LlxuICAgKi9cbiAgaWNvbjogX3Byb3BUeXBlcy5kZWZhdWx0Lm5vZGUsXG5cbiAgLyoqXG4gICAqIFRoZSBsYWJlbCBlbGVtZW50LlxuICAgKi9cbiAgbGFiZWw6IF9wcm9wVHlwZXMuZGVmYXVsdC5ub2RlLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkNoYW5nZTogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uQ2xpY2s6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBzZWxlY3RlZDogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIEJvdHRvbU5hdmlnYXRpb25BY3Rpb24gd2lsbCBzaG93IGl0cyBsYWJlbC5cbiAgICovXG4gIHNob3dMYWJlbDogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIFlvdSBjYW4gcHJvdmlkZSB5b3VyIG93biB2YWx1ZS4gT3RoZXJ3aXNlLCB3ZSBmYWxsYmFjayB0byB0aGUgY2hpbGQgcG9zaXRpb24gaW5kZXguXG4gICAqL1xuICB2YWx1ZTogX3Byb3BUeXBlcy5kZWZhdWx0LmFueVxufSA6IHt9O1xuXG52YXIgX2RlZmF1bHQgPSAoMCwgX3dpdGhTdHlsZXMuZGVmYXVsdCkoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlCb3R0b21OYXZpZ2F0aW9uQWN0aW9uJ1xufSkoQm90dG9tTmF2aWdhdGlvbkFjdGlvbik7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5zdHlsZXMgPSB2b2lkIDA7XG5cbnZhciBfZXh0ZW5kczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vZXh0ZW5kc1wiKSk7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCIpKTtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKTtcblxudmFyIF9jbGFzc25hbWVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY2xhc3NuYW1lc1wiKSk7XG5cbnZhciBfd2l0aFN0eWxlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3N0eWxlcy93aXRoU3R5bGVzXCIpKTtcblxudmFyIHN0eWxlcyA9IGZ1bmN0aW9uIHN0eWxlcyh0aGVtZSkge1xuICByZXR1cm4ge1xuICAgIHJvb3Q6IHtcbiAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcbiAgICAgIGhlaWdodDogNTYsXG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUuYmFja2dyb3VuZC5wYXBlclxuICAgIH1cbiAgfTtcbn07XG5cbmV4cG9ydHMuc3R5bGVzID0gc3R5bGVzO1xuXG5mdW5jdGlvbiBCb3R0b21OYXZpZ2F0aW9uKHByb3BzKSB7XG4gIHZhciBjaGlsZHJlblByb3AgPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY2xhc3NOYW1lUHJvcCA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIG9uQ2hhbmdlID0gcHJvcHMub25DaGFuZ2UsXG4gICAgICBzaG93TGFiZWxzID0gcHJvcHMuc2hvd0xhYmVscyxcbiAgICAgIHZhbHVlID0gcHJvcHMudmFsdWUsXG4gICAgICBvdGhlciA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyLmRlZmF1bHQpKHByb3BzLCBbXCJjaGlsZHJlblwiLCBcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJvbkNoYW5nZVwiLCBcInNob3dMYWJlbHNcIiwgXCJ2YWx1ZVwiXSk7XG4gIHZhciBjbGFzc05hbWUgPSAoMCwgX2NsYXNzbmFtZXMuZGVmYXVsdCkoY2xhc3Nlcy5yb290LCBjbGFzc05hbWVQcm9wKTtcblxuICB2YXIgY2hpbGRyZW4gPSBfcmVhY3QuZGVmYXVsdC5DaGlsZHJlbi5tYXAoY2hpbGRyZW5Qcm9wLCBmdW5jdGlvbiAoY2hpbGQsIGNoaWxkSW5kZXgpIHtcbiAgICBpZiAoIV9yZWFjdC5kZWZhdWx0LmlzVmFsaWRFbGVtZW50KGNoaWxkKSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgdmFyIGNoaWxkVmFsdWUgPSBjaGlsZC5wcm9wcy52YWx1ZSA9PT0gdW5kZWZpbmVkID8gY2hpbGRJbmRleCA6IGNoaWxkLnByb3BzLnZhbHVlO1xuICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jbG9uZUVsZW1lbnQoY2hpbGQsIHtcbiAgICAgIHNlbGVjdGVkOiBjaGlsZFZhbHVlID09PSB2YWx1ZSxcbiAgICAgIHNob3dMYWJlbDogY2hpbGQucHJvcHMuc2hvd0xhYmVsICE9PSB1bmRlZmluZWQgPyBjaGlsZC5wcm9wcy5zaG93TGFiZWwgOiBzaG93TGFiZWxzLFxuICAgICAgdmFsdWU6IGNoaWxkVmFsdWUsXG4gICAgICBvbkNoYW5nZTogb25DaGFuZ2VcbiAgICB9KTtcbiAgfSk7XG5cbiAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7XG4gICAgY2xhc3NOYW1lOiBjbGFzc05hbWVcbiAgfSwgb3RoZXIpLCBjaGlsZHJlbik7XG59XG5cbkJvdHRvbU5hdmlnYXRpb24ucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBfcHJvcFR5cGVzLmRlZmF1bHQubm9kZS5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2Nzcy1hcGkpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgdmFsdWUgY2hhbmdlcy5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGV2ZW50IFRoZSBldmVudCBzb3VyY2Ugb2YgdGhlIGNhbGxiYWNrXG4gICAqIEBwYXJhbSB7YW55fSB2YWx1ZSBXZSBkZWZhdWx0IHRvIHRoZSBpbmRleCBvZiB0aGUgY2hpbGRcbiAgICovXG4gIG9uQ2hhbmdlOiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYyxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCBhbGwgYEJvdHRvbU5hdmlnYXRpb25BY3Rpb25gcyB3aWxsIHNob3cgdGhlaXIgbGFiZWxzLlxuICAgKiBCeSBkZWZhdWx0LCBvbmx5IHRoZSBzZWxlY3RlZCBgQm90dG9tTmF2aWdhdGlvbkFjdGlvbmAgd2lsbCBzaG93IGl0cyBsYWJlbC5cbiAgICovXG4gIHNob3dMYWJlbHM6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgdmFsdWUgb2YgdGhlIGN1cnJlbnRseSBzZWxlY3RlZCBgQm90dG9tTmF2aWdhdGlvbkFjdGlvbmAuXG4gICAqL1xuICB2YWx1ZTogX3Byb3BUeXBlcy5kZWZhdWx0LmFueVxufSA6IHt9O1xuQm90dG9tTmF2aWdhdGlvbi5kZWZhdWx0UHJvcHMgPSB7XG4gIHNob3dMYWJlbHM6IGZhbHNlXG59O1xuXG52YXIgX2RlZmF1bHQgPSAoMCwgX3dpdGhTdHlsZXMuZGVmYXVsdCkoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlCb3R0b21OYXZpZ2F0aW9uJ1xufSkoQm90dG9tTmF2aWdhdGlvbik7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5zdHlsZXMgPSB2b2lkIDA7XG5cbnZhciBfZXh0ZW5kczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vZXh0ZW5kc1wiKSk7XG5cbnZhciBfZGVmaW5lUHJvcGVydHkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2RlZmluZVByb3BlcnR5XCIpKTtcblxudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIikpO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xuXG52YXIgX2NsYXNzbmFtZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJjbGFzc25hbWVzXCIpKTtcblxudmFyIF93aXRoU3R5bGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vc3R5bGVzL3dpdGhTdHlsZXNcIikpO1xuXG52YXIgX2hlbHBlcnMgPSByZXF1aXJlKFwiLi4vdXRpbHMvaGVscGVyc1wiKTtcblxudmFyIFJBRElVUyA9IDEyO1xuXG52YXIgc3R5bGVzID0gZnVuY3Rpb24gc3R5bGVzKHRoZW1lKSB7XG4gIHJldHVybiB7XG4gICAgcm9vdDoge1xuICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgICBkaXNwbGF5OiAnaW5saW5lLWZsZXgnLFxuICAgICAgLy8gRm9yIGNvcnJlY3QgYWxpZ25tZW50IHdpdGggdGhlIHRleHQuXG4gICAgICB2ZXJ0aWNhbEFsaWduOiAnbWlkZGxlJ1xuICAgIH0sXG4gICAgYmFkZ2U6IHtcbiAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgIGZsZXhEaXJlY3Rpb246ICdyb3cnLFxuICAgICAgZmxleFdyYXA6ICd3cmFwJyxcbiAgICAgIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcbiAgICAgIGFsaWduQ29udGVudDogJ2NlbnRlcicsXG4gICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgdG9wOiAtUkFESVVTLFxuICAgICAgcmlnaHQ6IC1SQURJVVMsXG4gICAgICBmb250RmFtaWx5OiB0aGVtZS50eXBvZ3JhcGh5LmZvbnRGYW1pbHksXG4gICAgICBmb250V2VpZ2h0OiB0aGVtZS50eXBvZ3JhcGh5LmZvbnRXZWlnaHQsXG4gICAgICBmb250U2l6ZTogdGhlbWUudHlwb2dyYXBoeS5weFRvUmVtKFJBRElVUyksXG4gICAgICB3aWR0aDogUkFESVVTICogMixcbiAgICAgIGhlaWdodDogUkFESVVTICogMixcbiAgICAgIGJvcmRlclJhZGl1czogJzUwJScsXG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUuY29sb3IsXG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS50ZXh0Q29sb3IsXG4gICAgICB6SW5kZXg6IDEgLy8gUmVuZGVyIHRoZSBiYWRnZSBvbiB0b3Agb2YgcG90ZW50aWFsIHJpcHBsZXMuXG5cbiAgICB9LFxuICAgIGNvbG9yUHJpbWFyeToge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLnByaW1hcnkubWFpbixcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnByaW1hcnkuY29udHJhc3RUZXh0XG4gICAgfSxcbiAgICBjb2xvclNlY29uZGFyeToge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLnNlY29uZGFyeS5tYWluLFxuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuc2Vjb25kYXJ5LmNvbnRyYXN0VGV4dFxuICAgIH0sXG4gICAgY29sb3JFcnJvcjoge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLmVycm9yLm1haW4sXG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5lcnJvci5jb250cmFzdFRleHRcbiAgICB9XG4gIH07XG59O1xuXG5leHBvcnRzLnN0eWxlcyA9IHN0eWxlcztcblxuZnVuY3Rpb24gQmFkZ2UocHJvcHMpIHtcbiAgdmFyIGJhZGdlQ29udGVudCA9IHByb3BzLmJhZGdlQ29udGVudCxcbiAgICAgIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZVByb3AgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBjb2xvciA9IHByb3BzLmNvbG9yLFxuICAgICAgQ29tcG9uZW50UHJvcCA9IHByb3BzLmNvbXBvbmVudCxcbiAgICAgIG90aGVyID0gKDAsIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIuZGVmYXVsdCkocHJvcHMsIFtcImJhZGdlQ29udGVudFwiLCBcImNoaWxkcmVuXCIsIFwiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcImNvbG9yXCIsIFwiY29tcG9uZW50XCJdKTtcbiAgdmFyIGJhZGdlQ2xhc3NOYW1lID0gKDAsIF9jbGFzc25hbWVzLmRlZmF1bHQpKGNsYXNzZXMuYmFkZ2UsICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKHt9LCBjbGFzc2VzW1wiY29sb3JcIi5jb25jYXQoKDAsIF9oZWxwZXJzLmNhcGl0YWxpemUpKGNvbG9yKSldLCBjb2xvciAhPT0gJ2RlZmF1bHQnKSk7XG4gIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudFByb3AsICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe1xuICAgIGNsYXNzTmFtZTogKDAsIF9jbGFzc25hbWVzLmRlZmF1bHQpKGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lUHJvcClcbiAgfSwgb3RoZXIpLCBjaGlsZHJlbiwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcInNwYW5cIiwge1xuICAgIGNsYXNzTmFtZTogYmFkZ2VDbGFzc05hbWVcbiAgfSwgYmFkZ2VDb250ZW50KSk7XG59XG5cbkJhZGdlLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IHJlbmRlcmVkIHdpdGhpbiB0aGUgYmFkZ2UuXG4gICAqL1xuICBiYWRnZUNvbnRlbnQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5ub2RlLmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIFRoZSBiYWRnZSB3aWxsIGJlIGFkZGVkIHJlbGF0aXZlIHRvIHRoaXMgbm9kZS5cbiAgICovXG4gIGNoaWxkcmVuOiBfcHJvcFR5cGVzLmRlZmF1bHQubm9kZS5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2Nzcy1hcGkpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGNvbG9yIG9mIHRoZSBjb21wb25lbnQuIEl0IHN1cHBvcnRzIHRob3NlIHRoZW1lIGNvbG9ycyB0aGF0IG1ha2Ugc2Vuc2UgZm9yIHRoaXMgY29tcG9uZW50LlxuICAgKi9cbiAgY29sb3I6IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZihbJ2RlZmF1bHQnLCAncHJpbWFyeScsICdzZWNvbmRhcnknLCAnZXJyb3InXSksXG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIERPTSBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgY29tcG9uZW50OiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLCBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuY10pXG59IDoge307XG5CYWRnZS5kZWZhdWx0UHJvcHMgPSB7XG4gIGNvbG9yOiAnZGVmYXVsdCcsXG4gIGNvbXBvbmVudDogJ3NwYW4nXG59O1xuXG52YXIgX2RlZmF1bHQgPSAoMCwgX3dpdGhTdHlsZXMuZGVmYXVsdCkoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlCYWRnZSdcbn0pKEJhZGdlKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfZXh0ZW5kczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vZXh0ZW5kc1wiKSk7XG5cbnZhciBfb2JqZWN0U3ByZWFkMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9vYmplY3RTcHJlYWRcIikpO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiKSk7XG5cbnZhciBfY2xhc3NDYWxsQ2hlY2syID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2NsYXNzQ2FsbENoZWNrXCIpKTtcblxudmFyIF9jcmVhdGVDbGFzczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vY3JlYXRlQ2xhc3NcIikpO1xuXG52YXIgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5cIikpO1xuXG52YXIgX2luaGVyaXRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9pbmhlcml0c1wiKSk7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbnZhciBfVHJhbnNpdGlvbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0LXRyYW5zaXRpb24tZ3JvdXAvVHJhbnNpdGlvblwiKSk7XG5cbnZhciBfdHJhbnNpdGlvbnMgPSByZXF1aXJlKFwiLi4vc3R5bGVzL3RyYW5zaXRpb25zXCIpO1xuXG52YXIgX3dpdGhUaGVtZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3N0eWxlcy93aXRoVGhlbWVcIikpO1xuXG52YXIgX3V0aWxzID0gcmVxdWlyZShcIi4uL3RyYW5zaXRpb25zL3V0aWxzXCIpO1xuXG4vLyBAaW5oZXJpdGVkQ29tcG9uZW50IFRyYW5zaXRpb25cbnZhciBzdHlsZXMgPSB7XG4gIGVudGVyaW5nOiB7XG4gICAgb3BhY2l0eTogMVxuICB9LFxuICBlbnRlcmVkOiB7XG4gICAgb3BhY2l0eTogMVxuICB9XG59O1xuLyoqXG4gKiBUaGUgRmFkZSB0cmFuc2l0aW9uIGlzIHVzZWQgYnkgdGhlIFtNb2RhbF0oL3V0aWxzL21vZGFscykgY29tcG9uZW50LlxuICogSXQgdXNlcyBbcmVhY3QtdHJhbnNpdGlvbi1ncm91cF0oaHR0cHM6Ly9naXRodWIuY29tL3JlYWN0anMvcmVhY3QtdHJhbnNpdGlvbi1ncm91cCkgaW50ZXJuYWxseS5cbiAqL1xuXG52YXIgRmFkZSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICAoMCwgX2luaGVyaXRzMi5kZWZhdWx0KShGYWRlLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBGYWRlKCkge1xuICAgIHZhciBfcmVmO1xuXG4gICAgdmFyIF90ZW1wLCBfdGhpcztcblxuICAgICgwLCBfY2xhc3NDYWxsQ2hlY2syLmRlZmF1bHQpKHRoaXMsIEZhZGUpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiAoMCwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yLmRlZmF1bHQpKF90aGlzLCAoX3RlbXAgPSBfdGhpcyA9ICgwLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIuZGVmYXVsdCkodGhpcywgKF9yZWYgPSBGYWRlLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoRmFkZSkpLmNhbGwuYXBwbHkoX3JlZiwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcy5oYW5kbGVFbnRlciA9IGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICB2YXIgdGhlbWUgPSBfdGhpcy5wcm9wcy50aGVtZTtcbiAgICAgICgwLCBfdXRpbHMucmVmbG93KShub2RlKTsgLy8gU28gdGhlIGFuaW1hdGlvbiBhbHdheXMgc3RhcnQgZnJvbSB0aGUgc3RhcnQuXG5cbiAgICAgIHZhciB0cmFuc2l0aW9uUHJvcHMgPSAoMCwgX3V0aWxzLmdldFRyYW5zaXRpb25Qcm9wcykoX3RoaXMucHJvcHMsIHtcbiAgICAgICAgbW9kZTogJ2VudGVyJ1xuICAgICAgfSk7XG4gICAgICBub2RlLnN0eWxlLndlYmtpdFRyYW5zaXRpb24gPSB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ29wYWNpdHknLCB0cmFuc2l0aW9uUHJvcHMpO1xuICAgICAgbm9kZS5zdHlsZS50cmFuc2l0aW9uID0gdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCdvcGFjaXR5JywgdHJhbnNpdGlvblByb3BzKTtcblxuICAgICAgaWYgKF90aGlzLnByb3BzLm9uRW50ZXIpIHtcbiAgICAgICAgX3RoaXMucHJvcHMub25FbnRlcihub2RlKTtcbiAgICAgIH1cbiAgICB9LCBfdGhpcy5oYW5kbGVFeGl0ID0gZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgIHZhciB0aGVtZSA9IF90aGlzLnByb3BzLnRoZW1lO1xuICAgICAgdmFyIHRyYW5zaXRpb25Qcm9wcyA9ICgwLCBfdXRpbHMuZ2V0VHJhbnNpdGlvblByb3BzKShfdGhpcy5wcm9wcywge1xuICAgICAgICBtb2RlOiAnZXhpdCdcbiAgICAgIH0pO1xuICAgICAgbm9kZS5zdHlsZS53ZWJraXRUcmFuc2l0aW9uID0gdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCdvcGFjaXR5JywgdHJhbnNpdGlvblByb3BzKTtcbiAgICAgIG5vZGUuc3R5bGUudHJhbnNpdGlvbiA9IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgnb3BhY2l0eScsIHRyYW5zaXRpb25Qcm9wcyk7XG5cbiAgICAgIGlmIChfdGhpcy5wcm9wcy5vbkV4aXQpIHtcbiAgICAgICAgX3RoaXMucHJvcHMub25FeGl0KG5vZGUpO1xuICAgICAgfVxuICAgIH0sIF90ZW1wKSk7XG4gIH1cblxuICAoMCwgX2NyZWF0ZUNsYXNzMi5kZWZhdWx0KShGYWRlLCBbe1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgY2hpbGRyZW4gPSBfcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgICAgb25FbnRlciA9IF9wcm9wcy5vbkVudGVyLFxuICAgICAgICAgIG9uRXhpdCA9IF9wcm9wcy5vbkV4aXQsXG4gICAgICAgICAgc3R5bGVQcm9wID0gX3Byb3BzLnN0eWxlLFxuICAgICAgICAgIHRoZW1lID0gX3Byb3BzLnRoZW1lLFxuICAgICAgICAgIG90aGVyID0gKDAsIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIuZGVmYXVsdCkoX3Byb3BzLCBbXCJjaGlsZHJlblwiLCBcIm9uRW50ZXJcIiwgXCJvbkV4aXRcIiwgXCJzdHlsZVwiLCBcInRoZW1lXCJdKTtcbiAgICAgIHZhciBzdHlsZSA9ICgwLCBfb2JqZWN0U3ByZWFkMi5kZWZhdWx0KSh7fSwgc3R5bGVQcm9wLCBfcmVhY3QuZGVmYXVsdC5pc1ZhbGlkRWxlbWVudChjaGlsZHJlbikgPyBjaGlsZHJlbi5wcm9wcy5zdHlsZSA6IHt9KTtcbiAgICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9UcmFuc2l0aW9uLmRlZmF1bHQsICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe1xuICAgICAgICBhcHBlYXI6IHRydWUsXG4gICAgICAgIG9uRW50ZXI6IHRoaXMuaGFuZGxlRW50ZXIsXG4gICAgICAgIG9uRXhpdDogdGhpcy5oYW5kbGVFeGl0XG4gICAgICB9LCBvdGhlciksIGZ1bmN0aW9uIChzdGF0ZSwgY2hpbGRQcm9wcykge1xuICAgICAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY2xvbmVFbGVtZW50KGNoaWxkcmVuLCAoMCwgX29iamVjdFNwcmVhZDIuZGVmYXVsdCkoe1xuICAgICAgICAgIHN0eWxlOiAoMCwgX29iamVjdFNwcmVhZDIuZGVmYXVsdCkoe1xuICAgICAgICAgICAgb3BhY2l0eTogMCxcbiAgICAgICAgICAgIHdpbGxDaGFuZ2U6ICdvcGFjaXR5J1xuICAgICAgICAgIH0sIHN0eWxlc1tzdGF0ZV0sIHN0eWxlKVxuICAgICAgICB9LCBjaGlsZFByb3BzKSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1dKTtcbiAgcmV0dXJuIEZhZGU7XG59KF9yZWFjdC5kZWZhdWx0LkNvbXBvbmVudCk7XG5cbkZhZGUucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKipcbiAgICogQSBzaW5nbGUgY2hpbGQgY29udGVudCBlbGVtZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMuZGVmYXVsdC5lbGVtZW50LCBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuY10pLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBjb21wb25lbnQgd2lsbCB0cmFuc2l0aW9uIGluLlxuICAgKi9cbiAgaW46IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkVudGVyOiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25FeGl0OiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgc3R5bGU6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHRoZW1lOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIFRoZSBkdXJhdGlvbiBmb3IgdGhlIHRyYW5zaXRpb24sIGluIG1pbGxpc2Vjb25kcy5cbiAgICogWW91IG1heSBzcGVjaWZ5IGEgc2luZ2xlIHRpbWVvdXQgZm9yIGFsbCB0cmFuc2l0aW9ucywgb3IgaW5kaXZpZHVhbGx5IHdpdGggYW4gb2JqZWN0LlxuICAgKi9cbiAgdGltZW91dDogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlcy5kZWZhdWx0Lm51bWJlciwgX3Byb3BUeXBlcy5kZWZhdWx0LnNoYXBlKHtcbiAgICBlbnRlcjogX3Byb3BUeXBlcy5kZWZhdWx0Lm51bWJlcixcbiAgICBleGl0OiBfcHJvcFR5cGVzLmRlZmF1bHQubnVtYmVyXG4gIH0pXSlcbn0gOiB7fTtcbkZhZGUuZGVmYXVsdFByb3BzID0ge1xuICB0aW1lb3V0OiB7XG4gICAgZW50ZXI6IF90cmFuc2l0aW9ucy5kdXJhdGlvbi5lbnRlcmluZ1NjcmVlbixcbiAgICBleGl0OiBfdHJhbnNpdGlvbnMuZHVyYXRpb24ubGVhdmluZ1NjcmVlblxuICB9XG59O1xuXG52YXIgX2RlZmF1bHQgPSAoMCwgX3dpdGhUaGVtZS5kZWZhdWx0KSgpKEZhZGUpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuc3R5bGVzID0gdm9pZCAwO1xuXG52YXIgX2V4dGVuZHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2V4dGVuZHNcIikpO1xuXG52YXIgX2RlZmluZVByb3BlcnR5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9kZWZpbmVQcm9wZXJ0eVwiKSk7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCIpKTtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKTtcblxudmFyIF9jbGFzc25hbWVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY2xhc3NuYW1lc1wiKSk7XG5cbnZhciBfd2l0aFN0eWxlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3N0eWxlcy93aXRoU3R5bGVzXCIpKTtcblxudmFyIF9GYWRlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vRmFkZVwiKSk7XG5cbnZhciBzdHlsZXMgPSB7XG4gIHJvb3Q6IHtcbiAgICB6SW5kZXg6IC0xLFxuICAgIHdpZHRoOiAnMTAwJScsXG4gICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgcG9zaXRpb246ICdmaXhlZCcsXG4gICAgdG9wOiAwLFxuICAgIGxlZnQ6IDAsXG4gICAgLy8gUmVtb3ZlIGdyZXkgaGlnaGxpZ2h0XG4gICAgV2Via2l0VGFwSGlnaGxpZ2h0Q29sb3I6ICd0cmFuc3BhcmVudCcsXG4gICAgYmFja2dyb3VuZENvbG9yOiAncmdiYSgwLCAwLCAwLCAwLjUpJ1xuICB9LFxuICBpbnZpc2libGU6IHtcbiAgICBiYWNrZ3JvdW5kQ29sb3I6ICd0cmFuc3BhcmVudCdcbiAgfVxufTtcbmV4cG9ydHMuc3R5bGVzID0gc3R5bGVzO1xuXG5mdW5jdGlvbiBCYWNrZHJvcChwcm9wcykge1xuICB2YXIgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBpbnZpc2libGUgPSBwcm9wcy5pbnZpc2libGUsXG4gICAgICBvcGVuID0gcHJvcHMub3BlbixcbiAgICAgIHRyYW5zaXRpb25EdXJhdGlvbiA9IHByb3BzLnRyYW5zaXRpb25EdXJhdGlvbixcbiAgICAgIG90aGVyID0gKDAsIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIuZGVmYXVsdCkocHJvcHMsIFtcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJpbnZpc2libGVcIiwgXCJvcGVuXCIsIFwidHJhbnNpdGlvbkR1cmF0aW9uXCJdKTtcbiAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX0ZhZGUuZGVmYXVsdCwgKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7XG4gICAgYXBwZWFyOiB0cnVlLFxuICAgIFwiaW5cIjogb3BlbixcbiAgICB0aW1lb3V0OiB0cmFuc2l0aW9uRHVyYXRpb25cbiAgfSwgb3RoZXIpLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICBjbGFzc05hbWU6ICgwLCBfY2xhc3NuYW1lcy5kZWZhdWx0KShjbGFzc2VzLnJvb3QsICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKHt9LCBjbGFzc2VzLmludmlzaWJsZSwgaW52aXNpYmxlKSwgY2xhc3NOYW1lKSxcbiAgICBcImFyaWEtaGlkZGVuXCI6IFwidHJ1ZVwiXG4gIH0pKTtcbn1cblxuQmFja2Ryb3AucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MtYXBpKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGJhY2tkcm9wIGlzIGludmlzaWJsZS5cbiAgICogSXQgY2FuIGJlIHVzZWQgd2hlbiByZW5kZXJpbmcgYSBwb3BvdmVyIG9yIGEgY3VzdG9tIHNlbGVjdCBjb21wb25lbnQuXG4gICAqL1xuICBpbnZpc2libGU6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBiYWNrZHJvcCBpcyBvcGVuLlxuICAgKi9cbiAgb3BlbjogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogVGhlIGR1cmF0aW9uIGZvciB0aGUgdHJhbnNpdGlvbiwgaW4gbWlsbGlzZWNvbmRzLlxuICAgKiBZb3UgbWF5IHNwZWNpZnkgYSBzaW5nbGUgdGltZW91dCBmb3IgYWxsIHRyYW5zaXRpb25zLCBvciBpbmRpdmlkdWFsbHkgd2l0aCBhbiBvYmplY3QuXG4gICAqL1xuICB0cmFuc2l0aW9uRHVyYXRpb246IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMuZGVmYXVsdC5udW1iZXIsIF9wcm9wVHlwZXMuZGVmYXVsdC5zaGFwZSh7XG4gICAgZW50ZXI6IF9wcm9wVHlwZXMuZGVmYXVsdC5udW1iZXIsXG4gICAgZXhpdDogX3Byb3BUeXBlcy5kZWZhdWx0Lm51bWJlclxuICB9KV0pXG59IDoge307XG5CYWNrZHJvcC5kZWZhdWx0UHJvcHMgPSB7XG4gIGludmlzaWJsZTogZmFsc2Vcbn07XG5cbnZhciBfZGVmYXVsdCA9ICgwLCBfd2l0aFN0eWxlcy5kZWZhdWx0KShzdHlsZXMsIHtcbiAgbmFtZTogJ011aUJhY2tkcm9wJ1xufSkoQmFja2Ryb3ApO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcbnZhciBibHVlR3JleSA9IHtcbiAgNTA6ICcjZWNlZmYxJyxcbiAgMTAwOiAnI2NmZDhkYycsXG4gIDIwMDogJyNiMGJlYzUnLFxuICAzMDA6ICcjOTBhNGFlJyxcbiAgNDAwOiAnIzc4OTA5YycsXG4gIDUwMDogJyM2MDdkOGInLFxuICA2MDA6ICcjNTQ2ZTdhJyxcbiAgNzAwOiAnIzQ1NWE2NCcsXG4gIDgwMDogJyMzNzQ3NGYnLFxuICA5MDA6ICcjMjYzMjM4JyxcbiAgQTEwMDogJyNjZmQ4ZGMnLFxuICBBMjAwOiAnI2IwYmVjNScsXG4gIEE0MDA6ICcjNzg5MDljJyxcbiAgQTcwMDogJyM0NTVhNjQnXG59O1xudmFyIF9kZWZhdWx0ID0gYmx1ZUdyZXk7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcbnZhciBicm93biA9IHtcbiAgNTA6ICcjZWZlYmU5JyxcbiAgMTAwOiAnI2Q3Y2NjOCcsXG4gIDIwMDogJyNiY2FhYTQnLFxuICAzMDA6ICcjYTE4ODdmJyxcbiAgNDAwOiAnIzhkNmU2MycsXG4gIDUwMDogJyM3OTU1NDgnLFxuICA2MDA6ICcjNmQ0YzQxJyxcbiAgNzAwOiAnIzVkNDAzNycsXG4gIDgwMDogJyM0ZTM0MmUnLFxuICA5MDA6ICcjM2UyNzIzJyxcbiAgQTEwMDogJyNkN2NjYzgnLFxuICBBMjAwOiAnI2JjYWFhNCcsXG4gIEE0MDA6ICcjOGQ2ZTYzJyxcbiAgQTcwMDogJyM1ZDQwMzcnXG59O1xudmFyIF9kZWZhdWx0ID0gYnJvd247XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcbnZhciBkZWVwT3JhbmdlID0ge1xuICA1MDogJyNmYmU5ZTcnLFxuICAxMDA6ICcjZmZjY2JjJyxcbiAgMjAwOiAnI2ZmYWI5MScsXG4gIDMwMDogJyNmZjhhNjUnLFxuICA0MDA6ICcjZmY3MDQzJyxcbiAgNTAwOiAnI2ZmNTcyMicsXG4gIDYwMDogJyNmNDUxMWUnLFxuICA3MDA6ICcjZTY0YTE5JyxcbiAgODAwOiAnI2Q4NDMxNScsXG4gIDkwMDogJyNiZjM2MGMnLFxuICBBMTAwOiAnI2ZmOWU4MCcsXG4gIEEyMDA6ICcjZmY2ZTQwJyxcbiAgQTQwMDogJyNmZjNkMDAnLFxuICBBNzAwOiAnI2RkMmMwMCdcbn07XG52YXIgX2RlZmF1bHQgPSBkZWVwT3JhbmdlO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG52YXIgb3JhbmdlID0ge1xuICA1MDogJyNmZmYzZTAnLFxuICAxMDA6ICcjZmZlMGIyJyxcbiAgMjAwOiAnI2ZmY2M4MCcsXG4gIDMwMDogJyNmZmI3NGQnLFxuICA0MDA6ICcjZmZhNzI2JyxcbiAgNTAwOiAnI2ZmOTgwMCcsXG4gIDYwMDogJyNmYjhjMDAnLFxuICA3MDA6ICcjZjU3YzAwJyxcbiAgODAwOiAnI2VmNmMwMCcsXG4gIDkwMDogJyNlNjUxMDAnLFxuICBBMTAwOiAnI2ZmZDE4MCcsXG4gIEEyMDA6ICcjZmZhYjQwJyxcbiAgQTQwMDogJyNmZjkxMDAnLFxuICBBNzAwOiAnI2ZmNmQwMCdcbn07XG52YXIgX2RlZmF1bHQgPSBvcmFuZ2U7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcbnZhciBhbWJlciA9IHtcbiAgNTA6ICcjZmZmOGUxJyxcbiAgMTAwOiAnI2ZmZWNiMycsXG4gIDIwMDogJyNmZmUwODInLFxuICAzMDA6ICcjZmZkNTRmJyxcbiAgNDAwOiAnI2ZmY2EyOCcsXG4gIDUwMDogJyNmZmMxMDcnLFxuICA2MDA6ICcjZmZiMzAwJyxcbiAgNzAwOiAnI2ZmYTAwMCcsXG4gIDgwMDogJyNmZjhmMDAnLFxuICA5MDA6ICcjZmY2ZjAwJyxcbiAgQTEwMDogJyNmZmU1N2YnLFxuICBBMjAwOiAnI2ZmZDc0MCcsXG4gIEE0MDA6ICcjZmZjNDAwJyxcbiAgQTcwMDogJyNmZmFiMDAnXG59O1xudmFyIF9kZWZhdWx0ID0gYW1iZXI7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcbnZhciB5ZWxsb3cgPSB7XG4gIDUwOiAnI2ZmZmRlNycsXG4gIDEwMDogJyNmZmY5YzQnLFxuICAyMDA6ICcjZmZmNTlkJyxcbiAgMzAwOiAnI2ZmZjE3NicsXG4gIDQwMDogJyNmZmVlNTgnLFxuICA1MDA6ICcjZmZlYjNiJyxcbiAgNjAwOiAnI2ZkZDgzNScsXG4gIDcwMDogJyNmYmMwMmQnLFxuICA4MDA6ICcjZjlhODI1JyxcbiAgOTAwOiAnI2Y1N2YxNycsXG4gIEExMDA6ICcjZmZmZjhkJyxcbiAgQTIwMDogJyNmZmZmMDAnLFxuICBBNDAwOiAnI2ZmZWEwMCcsXG4gIEE3MDA6ICcjZmZkNjAwJ1xufTtcbnZhciBfZGVmYXVsdCA9IHllbGxvdztcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xudmFyIGxpbWUgPSB7XG4gIDUwOiAnI2Y5ZmJlNycsXG4gIDEwMDogJyNmMGY0YzMnLFxuICAyMDA6ICcjZTZlZTljJyxcbiAgMzAwOiAnI2RjZTc3NScsXG4gIDQwMDogJyNkNGUxNTcnLFxuICA1MDA6ICcjY2RkYzM5JyxcbiAgNjAwOiAnI2MwY2EzMycsXG4gIDcwMDogJyNhZmI0MmInLFxuICA4MDA6ICcjOWU5ZDI0JyxcbiAgOTAwOiAnIzgyNzcxNycsXG4gIEExMDA6ICcjZjRmZjgxJyxcbiAgQTIwMDogJyNlZWZmNDEnLFxuICBBNDAwOiAnI2M2ZmYwMCcsXG4gIEE3MDA6ICcjYWVlYTAwJ1xufTtcbnZhciBfZGVmYXVsdCA9IGxpbWU7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcbnZhciBsaWdodEdyZWVuID0ge1xuICA1MDogJyNmMWY4ZTknLFxuICAxMDA6ICcjZGNlZGM4JyxcbiAgMjAwOiAnI2M1ZTFhNScsXG4gIDMwMDogJyNhZWQ1ODEnLFxuICA0MDA6ICcjOWNjYzY1JyxcbiAgNTAwOiAnIzhiYzM0YScsXG4gIDYwMDogJyM3Y2IzNDInLFxuICA3MDA6ICcjNjg5ZjM4JyxcbiAgODAwOiAnIzU1OGIyZicsXG4gIDkwMDogJyMzMzY5MWUnLFxuICBBMTAwOiAnI2NjZmY5MCcsXG4gIEEyMDA6ICcjYjJmZjU5JyxcbiAgQTQwMDogJyM3NmZmMDMnLFxuICBBNzAwOiAnIzY0ZGQxNydcbn07XG52YXIgX2RlZmF1bHQgPSBsaWdodEdyZWVuO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG52YXIgdGVhbCA9IHtcbiAgNTA6ICcjZTBmMmYxJyxcbiAgMTAwOiAnI2IyZGZkYicsXG4gIDIwMDogJyM4MGNiYzQnLFxuICAzMDA6ICcjNGRiNmFjJyxcbiAgNDAwOiAnIzI2YTY5YScsXG4gIDUwMDogJyMwMDk2ODgnLFxuICA2MDA6ICcjMDA4OTdiJyxcbiAgNzAwOiAnIzAwNzk2YicsXG4gIDgwMDogJyMwMDY5NWMnLFxuICA5MDA6ICcjMDA0ZDQwJyxcbiAgQTEwMDogJyNhN2ZmZWInLFxuICBBMjAwOiAnIzY0ZmZkYScsXG4gIEE0MDA6ICcjMWRlOWI2JyxcbiAgQTcwMDogJyMwMGJmYTUnXG59O1xudmFyIF9kZWZhdWx0ID0gdGVhbDtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xudmFyIGN5YW4gPSB7XG4gIDUwOiAnI2UwZjdmYScsXG4gIDEwMDogJyNiMmViZjInLFxuICAyMDA6ICcjODBkZWVhJyxcbiAgMzAwOiAnIzRkZDBlMScsXG4gIDQwMDogJyMyNmM2ZGEnLFxuICA1MDA6ICcjMDBiY2Q0JyxcbiAgNjAwOiAnIzAwYWNjMScsXG4gIDcwMDogJyMwMDk3YTcnLFxuICA4MDA6ICcjMDA4MzhmJyxcbiAgOTAwOiAnIzAwNjA2NCcsXG4gIEExMDA6ICcjODRmZmZmJyxcbiAgQTIwMDogJyMxOGZmZmYnLFxuICBBNDAwOiAnIzAwZTVmZicsXG4gIEE3MDA6ICcjMDBiOGQ0J1xufTtcbnZhciBfZGVmYXVsdCA9IGN5YW47XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcbnZhciBsaWdodEJsdWUgPSB7XG4gIDUwOiAnI2UxZjVmZScsXG4gIDEwMDogJyNiM2U1ZmMnLFxuICAyMDA6ICcjODFkNGZhJyxcbiAgMzAwOiAnIzRmYzNmNycsXG4gIDQwMDogJyMyOWI2ZjYnLFxuICA1MDA6ICcjMDNhOWY0JyxcbiAgNjAwOiAnIzAzOWJlNScsXG4gIDcwMDogJyMwMjg4ZDEnLFxuICA4MDA6ICcjMDI3N2JkJyxcbiAgOTAwOiAnIzAxNTc5YicsXG4gIEExMDA6ICcjODBkOGZmJyxcbiAgQTIwMDogJyM0MGM0ZmYnLFxuICBBNDAwOiAnIzAwYjBmZicsXG4gIEE3MDA6ICcjMDA5MWVhJ1xufTtcbnZhciBfZGVmYXVsdCA9IGxpZ2h0Qmx1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xudmFyIGJsdWUgPSB7XG4gIDUwOiAnI2UzZjJmZCcsXG4gIDEwMDogJyNiYmRlZmInLFxuICAyMDA6ICcjOTBjYWY5JyxcbiAgMzAwOiAnIzY0YjVmNicsXG4gIDQwMDogJyM0MmE1ZjUnLFxuICA1MDA6ICcjMjE5NmYzJyxcbiAgNjAwOiAnIzFlODhlNScsXG4gIDcwMDogJyMxOTc2ZDInLFxuICA4MDA6ICcjMTU2NWMwJyxcbiAgOTAwOiAnIzBkNDdhMScsXG4gIEExMDA6ICcjODJiMWZmJyxcbiAgQTIwMDogJyM0NDhhZmYnLFxuICBBNDAwOiAnIzI5NzlmZicsXG4gIEE3MDA6ICcjMjk2MmZmJ1xufTtcbnZhciBfZGVmYXVsdCA9IGJsdWU7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcbnZhciBkZWVwUHVycGxlID0ge1xuICA1MDogJyNlZGU3ZjYnLFxuICAxMDA6ICcjZDFjNGU5JyxcbiAgMjAwOiAnI2IzOWRkYicsXG4gIDMwMDogJyM5NTc1Y2QnLFxuICA0MDA6ICcjN2U1N2MyJyxcbiAgNTAwOiAnIzY3M2FiNycsXG4gIDYwMDogJyM1ZTM1YjEnLFxuICA3MDA6ICcjNTEyZGE4JyxcbiAgODAwOiAnIzQ1MjdhMCcsXG4gIDkwMDogJyMzMTFiOTInLFxuICBBMTAwOiAnI2IzODhmZicsXG4gIEEyMDA6ICcjN2M0ZGZmJyxcbiAgQTQwMDogJyM2NTFmZmYnLFxuICBBNzAwOiAnIzYyMDBlYSdcbn07XG52YXIgX2RlZmF1bHQgPSBkZWVwUHVycGxlO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG52YXIgcHVycGxlID0ge1xuICA1MDogJyNmM2U1ZjUnLFxuICAxMDA6ICcjZTFiZWU3JyxcbiAgMjAwOiAnI2NlOTNkOCcsXG4gIDMwMDogJyNiYTY4YzgnLFxuICA0MDA6ICcjYWI0N2JjJyxcbiAgNTAwOiAnIzljMjdiMCcsXG4gIDYwMDogJyM4ZTI0YWEnLFxuICA3MDA6ICcjN2IxZmEyJyxcbiAgODAwOiAnIzZhMWI5YScsXG4gIDkwMDogJyM0YTE0OGMnLFxuICBBMTAwOiAnI2VhODBmYycsXG4gIEEyMDA6ICcjZTA0MGZiJyxcbiAgQTQwMDogJyNkNTAwZjknLFxuICBBNzAwOiAnI2FhMDBmZidcbn07XG52YXIgX2RlZmF1bHQgPSBwdXJwbGU7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgQ2FyZEFjdGlvbnMsIEljb25CdXR0b24gfSBmcm9tIFwiQG1hdGVyaWFsLXVpL2NvcmVcIjtcbmltcG9ydCB3aXRoV2lkdGggZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvd2l0aFdpZHRoJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyB3aXRoU3R5bGVzIH0gZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvc3R5bGVzJztcblxuLy8gVUlcbmltcG9ydCBHcmlkIGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL0dyaWQnO1xuXG5jb25zdCBzdHlsZXMgPSB0aGVtZSA9PiAoe1xuICAgIGNvbnRhaW5lcjoge1xuICAgICAgICBtYXJnaW5Ub3A6ICc2NXB4JyxcbiAgICAgICAgaGVpZ2h0OiAnNTAlJyxcbiAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgYm94U2hhZG93OiAnMHB4IDVweCAxMHB4IC01cHggcmdiYSgwLDAsMCwwLjc1KSdcbiAgICB9LFxuICAgIG1hcDoge1xuICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICBoZWlnaHQ6ICcxMDAlJ1xuICAgIH1cbn0pO1xuXG5jbGFzcyBNYXAgZXh0ZW5kcyBDb21wb25lbnQge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLm1hcCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5kZXBhck1hcmtlciA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5kZXN0TWFya2VyID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLm1hcHMgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMubG9jTWFya2VyID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmRpcmVjdGlvbnNTZXJ2aWNlID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmRpcmVjdGlvbnNEaXNwbGF5ID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBcbiAgICBsb2FkTWFwID0gKCkgPT4ge1xuICAgICAgICBpZiAodGhpcy5wcm9wcyAmJiB0aGlzLnByb3BzLmdvb2dsZSkge1xuICAgICAgICAgICAgLy8gRGVmaW5lIHByb3BzXG4gICAgICAgICAgICBjb25zdCB7IGdvb2dsZSB9ID0gdGhpcy5wcm9wcztcbiAgICAgICAgICAgIGNvbnN0IG1hcHMgPSBnb29nbGUubWFwcztcblxuICAgICAgICAgICAgLy8gQWRkIHRvIGxvY2FsIHZhcmlhYmxlXG4gICAgICAgICAgICB0aGlzLm1hcHMgPSBtYXBzO1xuXG4gICAgICAgICAgICAvLyBGaW5kIGhvb2sgbm9kZXNcbiAgICAgICAgICAgIGNvbnN0IG1hcE5vZGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbWFwUmVmJyk7XG5cbiAgICAgICAgICAgIHRoaXMubWFwID0gbmV3IG1hcHMuTWFwKG1hcE5vZGUsIHtcbiAgICAgICAgICAgICAgICAvLyBUT0RPOiBTZXQgY3VycmVudCBsb2NhdGlvbiBhcyBkZWZhdWx0IGNlbnRlclxuICAgICAgICAgICAgICAgIGNlbnRlcjoge1xuICAgICAgICAgICAgICAgICAgICBsYXQ6IDI5LjcyMTQ4MiwgXG4gICAgICAgICAgICAgICAgICAgIGxuZzogLTk1LjM5NjgyN1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgem9vbTogMTNcbiAgICAgICAgICAgIH0pXG5cbiAgICAgICAgICAgIC8vIFNldCB1cCBzZXJ2aWNlICYgZGlzcGxheVxuICAgICAgICAgICAgdGhpcy5kaXJlY3Rpb25zU2VydmljZSA9IG5ldyBtYXBzLkRpcmVjdGlvbnNTZXJ2aWNlKCk7XG4gICAgICAgICAgICB0aGlzLmRpcmVjdGlvbnNEaXNwbGF5ID0gbmV3IG1hcHMuRGlyZWN0aW9uc1JlbmRlcmVyKCk7XG5cbiAgICAgICAgICAgIHRoaXMubG9jTWFya2VyID0gbmV3IG1hcHMuTWFya2VyKHtcbiAgICAgICAgICAgICAgICBtYXA6IHRoaXMubWFwLFxuICAgICAgICAgICAgICAgIGFuY2hvclBvaW5nOiBuZXcgbWFwcy5Qb2ludCgwLCAwKSxcbiAgICAgICAgICAgICAgICB0aXRsZTogXCJDdXJyZW50IExvY2F0aW9uXCIsXG4gICAgICAgICAgICAgICAgaWNvbjogXCJodHRwczovL3d3dy5tYXRlcmlhbHVpLmNvL21hdGVyaWFsSWNvbnMvbWFwcy9teV9sb2NhdGlvbl9ibGFja18yNHgyNC5wbmdcIixcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH0pXG5cbiAgICAgICAgICAgIHRoaXMuZGVwYXJNYXJrZXIgPSBuZXcgbWFwcy5NYXJrZXIoe1xuICAgICAgICAgICAgICAgIG1hcDogdGhpcy5tYXAsXG4gICAgICAgICAgICAgICAgYW5jaG9yUG9pbnQ6IG5ldyBtYXBzLlBvaW50KDAsIDApLFxuICAgICAgICAgICAgICAgIHRpdGxlOiBcIkRlcGFydHVyZVwiLFxuICAgICAgICAgICAgICAgIGRyYWdnYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBpY29uOiAnaHR0cHM6Ly93d3cubWF0ZXJpYWx1aS5jby9tYXRlcmlhbEljb25zL2NvbW11bmljYXRpb24vbG9jYXRpb25fb25fYmxhY2tfNDh4NDgucG5nJyxcbiAgICAgICAgICAgICAgICBhbmltYXRpb246IG1hcHMuQW5pbWF0aW9uLkRST1BcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB0aGlzLmRlc3RNYXJrZXIgPSBuZXcgbWFwcy5NYXJrZXIoe1xuICAgICAgICAgICAgICAgIG1hcDogdGhpcy5tYXAsXG4gICAgICAgICAgICAgICAgYW5jaG9yUG9pbnQ6IG5ldyBtYXBzLlBvaW50KDAsIDApLFxuICAgICAgICAgICAgICAgIHRpdGxlOiBcIkRlc3RpbmF0aW9uXCIsXG4gICAgICAgICAgICAgICAgZHJhZ2dhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgIGljb246ICdodHRwczovL3d3dy5tYXRlcmlhbHVpLmNvL21hdGVyaWFsSWNvbnMvY29tbXVuaWNhdGlvbi9sb2NhdGlvbl9vbl9ibGFja180OHg0OC5wbmcnLFxuICAgICAgICAgICAgICAgIGFuaW1hdGlvbjogbWFwcy5BbmltYXRpb24uRFJPUFxuICAgICAgICAgICAgfSlcblxuICAgICAgICAgICAgLy8gR2V0IGN1cnJlbnQgbG9jYXRpb25cbiAgICAgICAgICAgIG5hdmlnYXRvci5nZW9sb2NhdGlvbi5nZXRDdXJyZW50UG9zaXRpb24oKHBvc2l0aW9uKSA9PiB7XG4gICAgICAgICAgICAgICAgdmFyIGN1cnJlbnRQb3NpdGlvbiA9IHsgXG4gICAgICAgICAgICAgICAgICAgIGxhdDogcG9zaXRpb24uY29vcmRzLmxhdGl0dWRlLCBcbiAgICAgICAgICAgICAgICAgICAgbG5nOiBwb3NpdGlvbi5jb29yZHMubG9uZ2l0dWRlIFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLmxvY01hcmtlci5zZXRQb3NpdGlvbihjdXJyZW50UG9zaXRpb24pXG4gICAgICAgICAgICAgICAgdGhpcy5sb2NNYXJrZXIuc2V0VmlzaWJsZSh0cnVlKTtcbiAgICAgICAgICAgIH0pXG5cbiAgICAgICAgICAgIHRoaXMuZGVwYXJNYXJrZXIuYWRkTGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMubWFwLnBhblRvKHRoaXMuZGVwYXJNYXJrZXIuZ2V0UG9zaXRpb24oKSk7XG4gICAgICAgICAgICAgICAgdGhpcy5tYXAuc2V0Wm9vbSgxNik7XG4gICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICB0aGlzLmRlc3RNYXJrZXIuYWRkTGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMubWFwLnBhblRvKHRoaXMuZGVzdE1hcmtlci5nZXRQb3NpdGlvbigpKTtcbiAgICAgICAgICAgICAgICB0aGlzLm1hcC5zZXRab29tKDE2KTtcbiAgICAgICAgICAgIH0pXG5cbiAgICAgICAgICAgIC8vIERyYWdnYWJsZSBNYXJrZXIgTGlzdGVuZXJcbiAgICAgICAgICAgIHRoaXMuZGVwYXJNYXJrZXIuYWRkTGlzdGVuZXIoJ2RyYWdlbmQnLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgLy8gVE9ETzogVXBkYXRlIGBJbnB1dEZpZWxkYCBmb3JtYXR0ZWQgYWRkcmVzcy5cbiAgICAgICAgICAgICAgICAvLyBVcGRhdGUgbG9jYXRpb25cbiAgICAgICAgICAgICAgICBsZXQgbmV3UG9zaXRpb24gPSB0aGlzLmRlcGFyTWFya2VyLmdldFBvc2l0aW9uKCkudG9KU09OKCk7XG4gICAgICAgICAgICAgICAgbGV0IHVwZGF0ZUxvY2F0aW9uID0gdGhpcy5wcm9wcy51cGRhdGVMb2NhdGlvbjtcbiAgICAgICAgICAgICAgICB1cGRhdGVMb2NhdGlvbihcImRlcGFyXCIsIG5ld1Bvc2l0aW9uKTsgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdGhpcy5kZXN0TWFya2VyLmFkZExpc3RlbmVyKCdkcmFnZW5kJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgIC8vIFRPRE86IFVwZGF0ZSBgSW5wdXRGaWVsZGAgZm9ybWF0dGVkIGFkZHJlc3MuXG4gICAgICAgICAgICAgICAgbGV0IG5ld1Bvc2l0aW9uID0gdGhpcy5kZXN0TWFya2VyLmdldFBvc2l0aW9uKCkudG9KU09OKCk7XG4gICAgICAgICAgICAgICAgbGV0IHVwZGF0ZUxvY2F0aW9uID0gdGhpcy5wcm9wcy51cGRhdGVMb2NhdGlvbjtcbiAgICAgICAgICAgICAgICB1cGRhdGVMb2NhdGlvbihcImRlc3RcIiwgbmV3UG9zaXRpb24pOyAgXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVwZGF0ZSB0aGUgZGVwYXIgbWFya2VyIGFuZC9vciBkZXN0IG1hcmtlciBnaXZlbiBjb29yZGluYXRlcy5cbiAgICAgKiBcbiAgICAgKiBJZiAobGF0LCBsbmcpIGlzIGB1bmRlZmluZWRgLCByZW1vdmUgdGhlIGNvcnJlc3BvbmRpbmcgbWFya2VyLlxuICAgICAqIFxuICAgICAqIEBwYXJhbSB7dmFyfSBkZXBhckxhdCAgICAgICAgVGhlIGxhdGl0dWRlIG9mIGRlcGFydHVyZVxuICAgICAqIEBwYXJhbSB7dmFyfSBkZXBhckxuZyAgICAgICAgXG4gICAgICogQHBhcmFtIHt2YXJ9IGRlc3RMYXRcbiAgICAgKiBAcGFyYW0ge3Zhcn0gZGVzdExuZyAgIFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbdmlld3BvcnRdICAgVGhlIHZpZXdwb3J0IG9mIGRlcGFyIC8gZGVzdCAgICBcbiAgICAgKi9cbiAgICB1cGRhdGVNYXJrZXIgPSAoZGVwYXJMYXQsIGRlcGFyTG5nLCBkZXN0TGF0LCBkZXN0TG5nLCBkZXBhclZpZXdQb3J0LCBkZXN0Vmlld1BvcnQpID0+IHtcbiAgICAgICAgLy8gT3B0aW9uYWwgUGFyYW10ZXJzXG4gICAgICAgIGRlcGFyVmlld1BvcnQgPSBkZXBhclZpZXdQb3J0IHx8IHVuZGVmaW5lZDtcbiAgICAgICAgZGVzdFZpZXdQb3J0ID0gZGVzdFZpZXdQb3J0IHx8IHVuZGVmaW5lZDtcbiAgICAgICAgXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKGRlcGFyTGF0LCBkZXBhckxuZywgZGVzdExhdCwgZGVzdExuZywgZGVwYXJWaWV3UG9ydCwgZGVzdFZpZXdQb3J0KTtcblxuICAgICAgICBjb25zdCBtYXBzID0gdGhpcy5tYXBzO1xuXG4gICAgICAgIGlmIChkZXBhckxhdCAmJiBkZXBhckxuZykge1xuICAgICAgICAgICAgdmFyIGxhdExuZyA9IG5ldyBtYXBzLkxhdExuZyh7XG4gICAgICAgICAgICAgICAgbGF0OiBkZXBhckxhdCxcbiAgICAgICAgICAgICAgICBsbmc6IGRlcGFyTG5nXG4gICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICB0aGlzLmRlcGFyTWFya2VyLnNldFZpc2libGUoZmFsc2UpO1xuICAgICAgICAgICAgdGhpcy5kZXBhck1hcmtlci5zZXRQb3NpdGlvbihsYXRMbmcpO1xuICAgICAgICAgICAgdGhpcy5kZXBhck1hcmtlci5zZXRWaXNpYmxlKHRydWUpO1xuXG4gICAgICAgICAgICBpZiAoZGVwYXJWaWV3UG9ydCkge1xuICAgICAgICAgICAgICAgIHRoaXMubWFwLmZpdEJvdW5kcyhkZXBhclZpZXdQb3J0KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5tYXAuc2V0Wm9vbSgxNS41KTtcbiAgICAgICAgICAgICAgICB0aGlzLm1hcC5wYW5UbyhsYXRMbmcpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyh0aGlzLmRlcGFyTWFya2VyLCB0aGlzLmRlc3RNYXJrZXIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKHRoaXMuZGVwYXJNYXJrZXIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRlcGFyTWFya2VyLnNldFZpc2libGUoZmFsc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBpZiAoZGVzdExhdCAmJiBkZXN0TG5nKSB7XG4gICAgICAgICAgICB2YXIgbGF0TG5nID0gbmV3IG1hcHMuTGF0TG5nKHtcbiAgICAgICAgICAgICAgICBsYXQ6IGRlc3RMYXQsXG4gICAgICAgICAgICAgICAgbG5nOiBkZXN0TG5nXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgXG4gICAgICAgICAgICB0aGlzLmRlc3RNYXJrZXIuc2V0VmlzaWJsZShmYWxzZSk7XG4gICAgICAgICAgICB0aGlzLmRlc3RNYXJrZXIuc2V0UG9zaXRpb24obGF0TG5nKTtcbiAgICAgICAgICAgIHRoaXMuZGVzdE1hcmtlci5zZXRWaXNpYmxlKHRydWUpO1xuICAgICAgICAgICAgLy8gdGhpcy5tYXAuc2V0Q2VudGVyKGxhdExuZyk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmIChkZXN0Vmlld1BvcnQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm1hcC5maXRCb3VuZHMoZGVzdFZpZXdQb3J0KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5tYXAuc2V0Wm9vbSgxNS41KTtcbiAgICAgICAgICAgICAgICB0aGlzLm1hcC5wYW5UbyhsYXRMbmcpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyh0aGlzLmRlcGFyTWFya2VyLCB0aGlzLmRlc3RNYXJrZXIpO1xuICAgICAgICB9ICBlbHNlIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmRlc3RNYXJrZXIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRlc3RNYXJrZXIuc2V0VmlzaWJsZShmYWxzZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZGVwYXJMYXQgJiYgZGVwYXJMbmcgJiYgZGVzdExhdCAmJiBkZXN0TG5nKSB7XG4gICAgICAgICAgICB2YXIgZGVwYXJCb3VuZHMgPSBuZXcgbWFwcy5MYXRMbmdCb3VuZHMoKTtcbiAgICAgICAgICAgIGRlcGFyQm91bmRzLmV4dGVuZCh7XG4gICAgICAgICAgICAgICAgbGF0OiBkZXBhckxhdCxcbiAgICAgICAgICAgICAgICBsbmc6IGRlcGFyTG5nXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgdmFyIGRlc3RCb3VuZHMgPSBuZXcgbWFwcy5MYXRMbmdCb3VuZHMoKTtcbiAgICAgICAgICAgIGRlc3RCb3VuZHMuZXh0ZW5kKHtcbiAgICAgICAgICAgICAgICBsYXQ6IGRlc3RMYXQsXG4gICAgICAgICAgICAgICAgbG5nOiBkZXN0TG5nXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgdmFyIGJvdW5kcyA9IGRlcGFyQm91bmRzLnVuaW9uKGRlc3RCb3VuZHMpO1xuXG4gICAgICAgICAgICB0aGlzLm1hcC5maXRCb3VuZHMoYm91bmRzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHRoaXMuZHJhd1JvdXRlKGRlcGFyTGF0LCBkZXBhckxuZywgZGVzdExhdCwgZGVzdExuZyk7XG4gICAgfVxuXG4gICAgZHJhd1JvdXRlID0gKGRlcGFyTGF0LCBkZXBhckxuZywgZGVzdExhdCwgZGVzdExuZykgPT4ge1xuICAgICAgICBjb25zdCB7IGdvb2dsZSB9ID0gdGhpcy5wcm9wcztcbiAgICAgICAgY29uc3QgbWFwcyA9IGdvb2dsZS5tYXBzO1xuICAgICAgICBjb25zdCBtYXAgPSB0aGlzLm1hcDtcbiAgICAgICAgdmFyIGRpcmVjdGlvbnNEaXNwbGF5ID0gdGhpcy5kaXJlY3Rpb25zRGlzcGxheTtcbiAgICAgICAgdmFyIGRpcmVjdGlvbnNTZXJ2aWNlID0gdGhpcy5kaXJlY3Rpb25zU2VydmljZTtcblxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIGlmIChkZXBhckxhdCAmJiBkZXBhckxuZyAmJiBkZXN0TGF0ICYmIGRlc3RMbmcpIHtcbiAgICAgICAgICAgIC8vIERyYXcgcm91dGVzIGlmIGJvdGggZGVwYXJ0dXJlIGFuZCBkZXN0aW5hdGlvbiBoYXZlIGJlZW4gc2V0XG5cbiAgICAgICAgICAgIGRpcmVjdGlvbnNEaXNwbGF5LnNldE1hcChtYXApO1xuXG4gICAgICAgICAgICAvLyBNYXJrZXIgb3B0aW9uc1xuICAgICAgICAgICAgZGlyZWN0aW9uc0Rpc3BsYXkuc2V0T3B0aW9ucyh7XG4gICAgICAgICAgICAgICAgZHJhZ2FibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgbWFya2VyT3B0aW9uczoge1xuICAgICAgICAgICAgICAgICAgICBpY29uOiAnaHR0cHM6Ly93d3cubWF0ZXJpYWx1aS5jby9tYXRlcmlhbEljb25zL2NvbW11bmljYXRpb24vbG9jYXRpb25fb25fYmxhY2tfNDh4NDgucG5nJyxcbiAgICAgICAgICAgICAgICAgICAgLy8gZHJhZ2dhYmxlOiB0cnVlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIC8vIERpc2FibGUgbWFya2Vyc1xuICAgICAgICAgICAgdGhpcy5kZXBhck1hcmtlci5zZXRWaXNpYmxlKGZhbHNlKTtcbiAgICAgICAgICAgIHRoaXMuZGVzdE1hcmtlci5zZXRWaXNpYmxlKGZhbHNlKTtcblxuICAgICAgICAgICAgdmFyIHJlcXVlc3QgPSB7XG4gICAgICAgICAgICAgICAgb3JpZ2luOiB0aGlzLmRlcGFyTWFya2VyLmdldFBvc2l0aW9uKCksXG4gICAgICAgICAgICAgICAgZGVzdGluYXRpb246IHRoaXMuZGVzdE1hcmtlci5nZXRQb3NpdGlvbigpLFxuICAgICAgICAgICAgICAgIHRyYXZlbE1vZGU6IGdvb2dsZS5tYXBzLlRyYXZlbE1vZGUuRFJJVklOR1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgZGlyZWN0aW9uc1NlcnZpY2Uucm91dGUocmVxdWVzdCwgZnVuY3Rpb24gKHJlc3BvbnNlLCBzdGF0dXMpIHtcbiAgICAgICAgICAgICAgICBpZiAoc3RhdHVzID09IGdvb2dsZS5tYXBzLkRpcmVjdGlvbnNTdGF0dXMuT0spIHtcbiAgICAgICAgICAgICAgICAgICAgZGlyZWN0aW9uc0Rpc3BsYXkuc2V0RGlyZWN0aW9ucyhyZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgICAgIGRpcmVjdGlvbnNEaXNwbGF5LnNldE1hcChtYXApO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGFsZXJ0KFwiRGlyZWN0aW9ucyBSZXF1ZXN0IGZyb20gXCIgKyBzdGFydC50b1VybFZhbHVlKDYpICsgXCIgdG8gXCIgKyBlbmQudG9VcmxWYWx1ZSg2KSArIFwiIGZhaWxlZDogXCIgKyBzdGF0dXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gQ2xlYXIgcm91dGVzXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhcIltSb3V0ZV0gQ2xlYXIgcm91dGVzIVwiKTtcbiAgICAgICAgICAgIGlmIChkaXJlY3Rpb25zRGlzcGxheSkge1xuICAgICAgICAgICAgICAgIGRpcmVjdGlvbnNEaXNwbGF5LnNldE1hcChudWxsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBcbiAgICBjb21wb25lbnREaWRNb3VudCA9ICgpID0+IHtcbiAgICAgICAgdGhpcy5sb2FkTWFwKCk7XG4gICAgfVxuICAgIFxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgY29uc3QgeyBjbGFzc2VzIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgICAgIGNvbnN0IHsgZGVwYXJMYXQsIGRlcGFyTG5nLCBkZXN0TGF0LCBkZXN0TG5nLCBkZXBhclZpZXdQb3J0LCBkZXN0Vmlld1BvcnQgfSA9IHRoaXMucHJvcHM7XG5cbiAgICAgICAgdGhpcy51cGRhdGVNYXJrZXIoZGVwYXJMYXQsIGRlcGFyTG5nLCBkZXN0TGF0LCBkZXN0TG5nLCBkZXBhclZpZXdQb3J0LCBkZXN0Vmlld1BvcnQpO1xuXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8R3JpZCBpdGVtIGNsYXNzTmFtZT17Y2xhc3Nlcy5jb250YWluZXJ9PlxuICAgICAgICAgICAgICAgIDxkaXYgaWQ9XCJtYXBSZWZcIiBjbGFzc05hbWU9e2NsYXNzZXMubWFwfT48L2Rpdj4gXG4gICAgICAgICAgICA8L0dyaWQ+XG4gICAgICAgICk7XG4gICAgfVxufVxuXG5NYXAucHJvcFR5cGVzID0ge1xuICAgIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZFxufTtcblxuXG5leHBvcnQgZGVmYXVsdCB3aXRoV2lkdGgoKSh3aXRoU3R5bGVzKHN0eWxlcykoTWFwKSk7XG5cbiIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX2NyZWF0ZVN2Z0ljb24gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWxzL2NyZWF0ZVN2Z0ljb25cIikpO1xuXG52YXIgX2RlZmF1bHQgPSAoMCwgX2NyZWF0ZVN2Z0ljb24uZGVmYXVsdCkoX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImdcIiwgbnVsbCwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICBkOiBcIk0zIDV2MTRjMCAxLjEuODkgMiAyIDJoMTRjMS4xIDAgMi0uOSAyLTJWNWMwLTEuMS0uOS0yLTItMkg1Yy0xLjExIDAtMiAuOS0yIDJ6bTEyIDRjMCAxLjY2LTEuMzQgMy0zIDNzLTMtMS4zNC0zLTMgMS4zNC0zIDMtMyAzIDEuMzQgMyAzem0tOSA4YzAtMiA0LTMuMSA2LTMuMXM2IDEuMSA2IDMuMXYxSDZ2LTF6XCJcbn0pKSwgJ0FjY291bnRCb3gnKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLnN0eWxlcyA9IHZvaWQgMDtcblxudmFyIF9leHRlbmRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9leHRlbmRzXCIpKTtcblxudmFyIF9kZWZpbmVQcm9wZXJ0eTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vZGVmaW5lUHJvcGVydHlcIikpO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiKSk7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbnZhciBfY2xhc3NuYW1lcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImNsYXNzbmFtZXNcIikpO1xuXG52YXIgX3dpdGhTdHlsZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9zdHlsZXMvd2l0aFN0eWxlc1wiKSk7XG5cbnZhciBfaGVscGVycyA9IHJlcXVpcmUoXCIuLi91dGlscy9oZWxwZXJzXCIpO1xuXG52YXIgc3R5bGVzID0gZnVuY3Rpb24gc3R5bGVzKHRoZW1lKSB7XG4gIHJldHVybiB7XG4gICAgcm9vdDoge1xuICAgICAgdXNlclNlbGVjdDogJ25vbmUnLFxuICAgICAgZm9udFNpemU6IDI0LFxuICAgICAgd2lkdGg6ICcxZW0nLFxuICAgICAgaGVpZ2h0OiAnMWVtJyxcbiAgICAgIGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snLFxuICAgICAgZmlsbDogJ2N1cnJlbnRDb2xvcicsXG4gICAgICBmbGV4U2hyaW5rOiAwLFxuICAgICAgdHJhbnNpdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCdmaWxsJywge1xuICAgICAgICBkdXJhdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuZHVyYXRpb24uc2hvcnRlclxuICAgICAgfSlcbiAgICB9LFxuICAgIGNvbG9yUHJpbWFyeToge1xuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUucHJpbWFyeS5tYWluXG4gICAgfSxcbiAgICBjb2xvclNlY29uZGFyeToge1xuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuc2Vjb25kYXJ5Lm1haW5cbiAgICB9LFxuICAgIGNvbG9yQWN0aW9uOiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5hY3Rpb24uYWN0aXZlXG4gICAgfSxcbiAgICBjb2xvckVycm9yOiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5lcnJvci5tYWluXG4gICAgfSxcbiAgICBjb2xvckRpc2FibGVkOiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5hY3Rpb24uZGlzYWJsZWRcbiAgICB9XG4gIH07XG59O1xuXG5leHBvcnRzLnN0eWxlcyA9IHN0eWxlcztcblxuZnVuY3Rpb24gU3ZnSWNvbihwcm9wcykge1xuICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY2xhc3NOYW1lUHJvcCA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIGNvbG9yID0gcHJvcHMuY29sb3IsXG4gICAgICBuYXRpdmVDb2xvciA9IHByb3BzLm5hdGl2ZUNvbG9yLFxuICAgICAgdGl0bGVBY2Nlc3MgPSBwcm9wcy50aXRsZUFjY2VzcyxcbiAgICAgIHZpZXdCb3ggPSBwcm9wcy52aWV3Qm94LFxuICAgICAgb3RoZXIgPSAoMCwgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMi5kZWZhdWx0KShwcm9wcywgW1wiY2hpbGRyZW5cIiwgXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29sb3JcIiwgXCJuYXRpdmVDb2xvclwiLCBcInRpdGxlQWNjZXNzXCIsIFwidmlld0JveFwiXSk7XG4gIHZhciBjbGFzc05hbWUgPSAoMCwgX2NsYXNzbmFtZXMuZGVmYXVsdCkoY2xhc3Nlcy5yb290LCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KSh7fSwgY2xhc3Nlc1tcImNvbG9yXCIuY29uY2F0KCgwLCBfaGVscGVycy5jYXBpdGFsaXplKShjb2xvcikpXSwgY29sb3IgIT09ICdpbmhlcml0JyksIGNsYXNzTmFtZVByb3ApO1xuICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcInN2Z1wiLCAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHtcbiAgICBjbGFzc05hbWU6IGNsYXNzTmFtZSxcbiAgICBmb2N1c2FibGU6IFwiZmFsc2VcIixcbiAgICB2aWV3Qm94OiB2aWV3Qm94LFxuICAgIGNvbG9yOiBuYXRpdmVDb2xvcixcbiAgICBcImFyaWEtaGlkZGVuXCI6IHRpdGxlQWNjZXNzID8gJ2ZhbHNlJyA6ICd0cnVlJ1xuICB9LCBvdGhlciksIHRpdGxlQWNjZXNzID8gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcInRpdGxlXCIsIG51bGwsIHRpdGxlQWNjZXNzKSA6IG51bGwsIGNoaWxkcmVuKTtcbn1cblxuU3ZnSWNvbi5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIC8qKlxuICAgKiBOb2RlIHBhc3NlZCBpbnRvIHRoZSBTVkcgZWxlbWVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBfcHJvcFR5cGVzLmRlZmF1bHQubm9kZS5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2Nzcy1hcGkpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGNvbG9yIG9mIHRoZSBjb21wb25lbnQuIEl0IHN1cHBvcnRzIHRob3NlIHRoZW1lIGNvbG9ycyB0aGF0IG1ha2Ugc2Vuc2UgZm9yIHRoaXMgY29tcG9uZW50LlxuICAgKiBZb3UgY2FuIHVzZSB0aGUgYG5hdGl2ZUNvbG9yYCBwcm9wZXJ0eSB0byBhcHBseSBhIGNvbG9yIGF0dHJpYnV0ZSB0byB0aGUgU1ZHIGVsZW1lbnQuXG4gICAqL1xuICBjb2xvcjogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mKFsnaW5oZXJpdCcsICdwcmltYXJ5JywgJ3NlY29uZGFyeScsICdhY3Rpb24nLCAnZXJyb3InLCAnZGlzYWJsZWQnXSksXG5cbiAgLyoqXG4gICAqIEFwcGxpZXMgYSBjb2xvciBhdHRyaWJ1dGUgdG8gdGhlIFNWRyBlbGVtZW50LlxuICAgKi9cbiAgbmF0aXZlQ29sb3I6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFByb3ZpZGVzIGEgaHVtYW4tcmVhZGFibGUgdGl0bGUgZm9yIHRoZSBlbGVtZW50IHRoYXQgY29udGFpbnMgaXQuXG4gICAqIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9TVkctYWNjZXNzLyNFcXVpdmFsZW50XG4gICAqL1xuICB0aXRsZUFjY2VzczogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxcblxuICAvKipcbiAgICogQWxsb3dzIHlvdSB0byByZWRlZmluZSB3aGF0IHRoZSBjb29yZGluYXRlcyB3aXRob3V0IHVuaXRzIG1lYW4gaW5zaWRlIGFuIFNWRyBlbGVtZW50LlxuICAgKiBGb3IgZXhhbXBsZSwgaWYgdGhlIFNWRyBlbGVtZW50IGlzIDUwMCAod2lkdGgpIGJ5IDIwMCAoaGVpZ2h0KSxcbiAgICogYW5kIHlvdSBwYXNzIHZpZXdCb3g9XCIwIDAgNTAgMjBcIixcbiAgICogdGhpcyBtZWFucyB0aGF0IHRoZSBjb29yZGluYXRlcyBpbnNpZGUgdGhlIFNWRyB3aWxsIGdvIGZyb20gdGhlIHRvcCBsZWZ0IGNvcm5lciAoMCwwKVxuICAgKiB0byBib3R0b20gcmlnaHQgKDUwLDIwKSBhbmQgZWFjaCB1bml0IHdpbGwgYmUgd29ydGggMTBweC5cbiAgICovXG4gIHZpZXdCb3g6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmdcbn0gOiB7fTtcblN2Z0ljb24uZGVmYXVsdFByb3BzID0ge1xuICBjb2xvcjogJ2luaGVyaXQnLFxuICB2aWV3Qm94OiAnMCAwIDI0IDI0J1xufTtcblN2Z0ljb24ubXVpTmFtZSA9ICdTdmdJY29uJztcblxudmFyIF9kZWZhdWx0ID0gKDAsIF93aXRoU3R5bGVzLmRlZmF1bHQpKHN0eWxlcywge1xuICBuYW1lOiAnTXVpU3ZnSWNvbidcbn0pKFN2Z0ljb24pO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfc2hhbGxvd0VxdWFsID0gcmVxdWlyZSgnZmJqcy9saWIvc2hhbGxvd0VxdWFsJyk7XG5cbnZhciBfc2hhbGxvd0VxdWFsMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3NoYWxsb3dFcXVhbCk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9zaGFsbG93RXF1YWwyLmRlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG52YXIgc2V0U3RhdGljID0gZnVuY3Rpb24gc2V0U3RhdGljKGtleSwgdmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChCYXNlQ29tcG9uZW50KSB7XG4gICAgLyogZXNsaW50LWRpc2FibGUgbm8tcGFyYW0tcmVhc3NpZ24gKi9cbiAgICBCYXNlQ29tcG9uZW50W2tleV0gPSB2YWx1ZTtcbiAgICAvKiBlc2xpbnQtZW5hYmxlIG5vLXBhcmFtLXJlYXNzaWduICovXG4gICAgcmV0dXJuIEJhc2VDb21wb25lbnQ7XG4gIH07XG59O1xuXG5leHBvcnRzLmRlZmF1bHQgPSBzZXRTdGF0aWM7IiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbi8vIDE5LjEuMi4yIC8gMTUuMi4zLjUgT2JqZWN0LmNyZWF0ZShPIFssIFByb3BlcnRpZXNdKVxuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7IGNyZWF0ZTogcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpIH0pO1xuIiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LmNyZWF0ZScpO1xudmFyICRPYmplY3QgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuT2JqZWN0O1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjcmVhdGUoUCwgRCkge1xuICByZXR1cm4gJE9iamVjdC5jcmVhdGUoUCwgRCk7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7IFwiZGVmYXVsdFwiOiByZXF1aXJlKFwiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9jcmVhdGVcIiksIF9fZXNNb2R1bGU6IHRydWUgfTsiLCIvLyBXb3JrcyB3aXRoIF9fcHJvdG9fXyBvbmx5LiBPbGQgdjggY2FuJ3Qgd29yayB3aXRoIG51bGwgcHJvdG8gb2JqZWN0cy5cbi8qIGVzbGludC1kaXNhYmxlIG5vLXByb3RvICovXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGNoZWNrID0gZnVuY3Rpb24gKE8sIHByb3RvKSB7XG4gIGFuT2JqZWN0KE8pO1xuICBpZiAoIWlzT2JqZWN0KHByb3RvKSAmJiBwcm90byAhPT0gbnVsbCkgdGhyb3cgVHlwZUVycm9yKHByb3RvICsgXCI6IGNhbid0IHNldCBhcyBwcm90b3R5cGUhXCIpO1xufTtcbm1vZHVsZS5leHBvcnRzID0ge1xuICBzZXQ6IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCAoJ19fcHJvdG9fXycgaW4ge30gPyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgZnVuY3Rpb24gKHRlc3QsIGJ1Z2d5LCBzZXQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHNldCA9IHJlcXVpcmUoJy4vX2N0eCcpKEZ1bmN0aW9uLmNhbGwsIHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJykuZihPYmplY3QucHJvdG90eXBlLCAnX19wcm90b19fJykuc2V0LCAyKTtcbiAgICAgICAgc2V0KHRlc3QsIFtdKTtcbiAgICAgICAgYnVnZ3kgPSAhKHRlc3QgaW5zdGFuY2VvZiBBcnJheSk7XG4gICAgICB9IGNhdGNoIChlKSB7IGJ1Z2d5ID0gdHJ1ZTsgfVxuICAgICAgcmV0dXJuIGZ1bmN0aW9uIHNldFByb3RvdHlwZU9mKE8sIHByb3RvKSB7XG4gICAgICAgIGNoZWNrKE8sIHByb3RvKTtcbiAgICAgICAgaWYgKGJ1Z2d5KSBPLl9fcHJvdG9fXyA9IHByb3RvO1xuICAgICAgICBlbHNlIHNldChPLCBwcm90byk7XG4gICAgICAgIHJldHVybiBPO1xuICAgICAgfTtcbiAgICB9KHt9LCBmYWxzZSkgOiB1bmRlZmluZWQpLFxuICBjaGVjazogY2hlY2tcbn07XG4iLCIvLyAxOS4xLjMuMTkgT2JqZWN0LnNldFByb3RvdHlwZU9mKE8sIHByb3RvKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbiRleHBvcnQoJGV4cG9ydC5TLCAnT2JqZWN0JywgeyBzZXRQcm90b3R5cGVPZjogcmVxdWlyZSgnLi9fc2V0LXByb3RvJykuc2V0IH0pO1xuIiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LnNldC1wcm90b3R5cGUtb2YnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLk9iamVjdC5zZXRQcm90b3R5cGVPZjtcbiIsIm1vZHVsZS5leHBvcnRzID0geyBcImRlZmF1bHRcIjogcmVxdWlyZShcImNvcmUtanMvbGlicmFyeS9mbi9vYmplY3Qvc2V0LXByb3RvdHlwZS1vZlwiKSwgX19lc01vZHVsZTogdHJ1ZSB9OyIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX3NldFByb3RvdHlwZU9mID0gcmVxdWlyZShcIi4uL2NvcmUtanMvb2JqZWN0L3NldC1wcm90b3R5cGUtb2ZcIik7XG5cbnZhciBfc2V0UHJvdG90eXBlT2YyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc2V0UHJvdG90eXBlT2YpO1xuXG52YXIgX2NyZWF0ZSA9IHJlcXVpcmUoXCIuLi9jb3JlLWpzL29iamVjdC9jcmVhdGVcIik7XG5cbnZhciBfY3JlYXRlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZSk7XG5cbnZhciBfdHlwZW9mMiA9IHJlcXVpcmUoXCIuLi9oZWxwZXJzL3R5cGVvZlwiKTtcblxudmFyIF90eXBlb2YzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdHlwZW9mMik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGZ1bmN0aW9uIChzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyAodHlwZW9mIHN1cGVyQ2xhc3MgPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogKDAsIF90eXBlb2YzLmRlZmF1bHQpKHN1cGVyQ2xhc3MpKSk7XG4gIH1cblxuICBzdWJDbGFzcy5wcm90b3R5cGUgPSAoMCwgX2NyZWF0ZTIuZGVmYXVsdCkoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwge1xuICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICB2YWx1ZTogc3ViQ2xhc3MsXG4gICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfVxuICB9KTtcbiAgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZjIuZGVmYXVsdCA/ICgwLCBfc2V0UHJvdG90eXBlT2YyLmRlZmF1bHQpKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7XG59OyIsInJlcXVpcmUoJy4vX3drcy1kZWZpbmUnKSgnb2JzZXJ2YWJsZScpO1xuIiwicmVxdWlyZSgnLi9fd2tzLWRlZmluZScpKCdhc3luY0l0ZXJhdG9yJyk7XG4iLCIvLyBmYWxsYmFjayBmb3IgSUUxMSBidWdneSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyB3aXRoIGlmcmFtZSBhbmQgd2luZG93XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIGdPUE4gPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpLmY7XG52YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZztcblxudmFyIHdpbmRvd05hbWVzID0gdHlwZW9mIHdpbmRvdyA9PSAnb2JqZWN0JyAmJiB3aW5kb3cgJiYgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXNcbiAgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh3aW5kb3cpIDogW107XG5cbnZhciBnZXRXaW5kb3dOYW1lcyA9IGZ1bmN0aW9uIChpdCkge1xuICB0cnkge1xuICAgIHJldHVybiBnT1BOKGl0KTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiB3aW5kb3dOYW1lcy5zbGljZSgpO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cy5mID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhpdCkge1xuICByZXR1cm4gd2luZG93TmFtZXMgJiYgdG9TdHJpbmcuY2FsbChpdCkgPT0gJ1tvYmplY3QgV2luZG93XScgPyBnZXRXaW5kb3dOYW1lcyhpdCkgOiBnT1BOKHRvSU9iamVjdChpdCkpO1xufTtcbiIsIi8vIDcuMi4yIElzQXJyYXkoYXJndW1lbnQpXG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG5tb2R1bGUuZXhwb3J0cyA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gaXNBcnJheShhcmcpIHtcbiAgcmV0dXJuIGNvZihhcmcpID09ICdBcnJheSc7XG59O1xuIiwiLy8gYWxsIGVudW1lcmFibGUgb2JqZWN0IGtleXMsIGluY2x1ZGVzIHN5bWJvbHNcbnZhciBnZXRLZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcbnZhciBnT1BTID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcHMnKTtcbnZhciBwSUUgPSByZXF1aXJlKCcuL19vYmplY3QtcGllJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgcmVzdWx0ID0gZ2V0S2V5cyhpdCk7XG4gIHZhciBnZXRTeW1ib2xzID0gZ09QUy5mO1xuICBpZiAoZ2V0U3ltYm9scykge1xuICAgIHZhciBzeW1ib2xzID0gZ2V0U3ltYm9scyhpdCk7XG4gICAgdmFyIGlzRW51bSA9IHBJRS5mO1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIga2V5O1xuICAgIHdoaWxlIChzeW1ib2xzLmxlbmd0aCA+IGkpIGlmIChpc0VudW0uY2FsbChpdCwga2V5ID0gc3ltYm9sc1tpKytdKSkgcmVzdWx0LnB1c2goa2V5KTtcbiAgfSByZXR1cm4gcmVzdWx0O1xufTtcbiIsInZhciBNRVRBID0gcmVxdWlyZSgnLi9fdWlkJykoJ21ldGEnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIHNldERlc2MgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xudmFyIGlkID0gMDtcbnZhciBpc0V4dGVuc2libGUgPSBPYmplY3QuaXNFeHRlbnNpYmxlIHx8IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRydWU7XG59O1xudmFyIEZSRUVaRSA9ICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGlzRXh0ZW5zaWJsZShPYmplY3QucHJldmVudEV4dGVuc2lvbnMoe30pKTtcbn0pO1xudmFyIHNldE1ldGEgPSBmdW5jdGlvbiAoaXQpIHtcbiAgc2V0RGVzYyhpdCwgTUVUQSwgeyB2YWx1ZToge1xuICAgIGk6ICdPJyArICsraWQsIC8vIG9iamVjdCBJRFxuICAgIHc6IHt9ICAgICAgICAgIC8vIHdlYWsgY29sbGVjdGlvbnMgSURzXG4gIH0gfSk7XG59O1xudmFyIGZhc3RLZXkgPSBmdW5jdGlvbiAoaXQsIGNyZWF0ZSkge1xuICAvLyByZXR1cm4gcHJpbWl0aXZlIHdpdGggcHJlZml4XG4gIGlmICghaXNPYmplY3QoaXQpKSByZXR1cm4gdHlwZW9mIGl0ID09ICdzeW1ib2wnID8gaXQgOiAodHlwZW9mIGl0ID09ICdzdHJpbmcnID8gJ1MnIDogJ1AnKSArIGl0O1xuICBpZiAoIWhhcyhpdCwgTUVUQSkpIHtcbiAgICAvLyBjYW4ndCBzZXQgbWV0YWRhdGEgdG8gdW5jYXVnaHQgZnJvemVuIG9iamVjdFxuICAgIGlmICghaXNFeHRlbnNpYmxlKGl0KSkgcmV0dXJuICdGJztcbiAgICAvLyBub3QgbmVjZXNzYXJ5IHRvIGFkZCBtZXRhZGF0YVxuICAgIGlmICghY3JlYXRlKSByZXR1cm4gJ0UnO1xuICAgIC8vIGFkZCBtaXNzaW5nIG1ldGFkYXRhXG4gICAgc2V0TWV0YShpdCk7XG4gIC8vIHJldHVybiBvYmplY3QgSURcbiAgfSByZXR1cm4gaXRbTUVUQV0uaTtcbn07XG52YXIgZ2V0V2VhayA9IGZ1bmN0aW9uIChpdCwgY3JlYXRlKSB7XG4gIGlmICghaGFzKGl0LCBNRVRBKSkge1xuICAgIC8vIGNhbid0IHNldCBtZXRhZGF0YSB0byB1bmNhdWdodCBmcm96ZW4gb2JqZWN0XG4gICAgaWYgKCFpc0V4dGVuc2libGUoaXQpKSByZXR1cm4gdHJ1ZTtcbiAgICAvLyBub3QgbmVjZXNzYXJ5IHRvIGFkZCBtZXRhZGF0YVxuICAgIGlmICghY3JlYXRlKSByZXR1cm4gZmFsc2U7XG4gICAgLy8gYWRkIG1pc3NpbmcgbWV0YWRhdGFcbiAgICBzZXRNZXRhKGl0KTtcbiAgLy8gcmV0dXJuIGhhc2ggd2VhayBjb2xsZWN0aW9ucyBJRHNcbiAgfSByZXR1cm4gaXRbTUVUQV0udztcbn07XG4vLyBhZGQgbWV0YWRhdGEgb24gZnJlZXplLWZhbWlseSBtZXRob2RzIGNhbGxpbmdcbnZhciBvbkZyZWV6ZSA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoRlJFRVpFICYmIG1ldGEuTkVFRCAmJiBpc0V4dGVuc2libGUoaXQpICYmICFoYXMoaXQsIE1FVEEpKSBzZXRNZXRhKGl0KTtcbiAgcmV0dXJuIGl0O1xufTtcbnZhciBtZXRhID0gbW9kdWxlLmV4cG9ydHMgPSB7XG4gIEtFWTogTUVUQSxcbiAgTkVFRDogZmFsc2UsXG4gIGZhc3RLZXk6IGZhc3RLZXksXG4gIGdldFdlYWs6IGdldFdlYWssXG4gIG9uRnJlZXplOiBvbkZyZWV6ZVxufTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEVDTUFTY3JpcHQgNiBzeW1ib2xzIHNoaW1cbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciBNRVRBID0gcmVxdWlyZSgnLi9fbWV0YScpLktFWTtcbnZhciAkZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuL191aWQnKTtcbnZhciB3a3MgPSByZXF1aXJlKCcuL193a3MnKTtcbnZhciB3a3NFeHQgPSByZXF1aXJlKCcuL193a3MtZXh0Jyk7XG52YXIgd2tzRGVmaW5lID0gcmVxdWlyZSgnLi9fd2tzLWRlZmluZScpO1xudmFyIGVudW1LZXlzID0gcmVxdWlyZSgnLi9fZW51bS1rZXlzJyk7XG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4vX2lzLWFycmF5Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xudmFyIGNyZWF0ZURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG52YXIgX2NyZWF0ZSA9IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKTtcbnZhciBnT1BORXh0ID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4tZXh0Jyk7XG52YXIgJEdPUEQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpO1xudmFyICREUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyICRrZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcbnZhciBnT1BEID0gJEdPUEQuZjtcbnZhciBkUCA9ICREUC5mO1xudmFyIGdPUE4gPSBnT1BORXh0LmY7XG52YXIgJFN5bWJvbCA9IGdsb2JhbC5TeW1ib2w7XG52YXIgJEpTT04gPSBnbG9iYWwuSlNPTjtcbnZhciBfc3RyaW5naWZ5ID0gJEpTT04gJiYgJEpTT04uc3RyaW5naWZ5O1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xudmFyIEhJRERFTiA9IHdrcygnX2hpZGRlbicpO1xudmFyIFRPX1BSSU1JVElWRSA9IHdrcygndG9QcmltaXRpdmUnKTtcbnZhciBpc0VudW0gPSB7fS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcbnZhciBTeW1ib2xSZWdpc3RyeSA9IHNoYXJlZCgnc3ltYm9sLXJlZ2lzdHJ5Jyk7XG52YXIgQWxsU3ltYm9scyA9IHNoYXJlZCgnc3ltYm9scycpO1xudmFyIE9QU3ltYm9scyA9IHNoYXJlZCgnb3Atc3ltYm9scycpO1xudmFyIE9iamVjdFByb3RvID0gT2JqZWN0W1BST1RPVFlQRV07XG52YXIgVVNFX05BVElWRSA9IHR5cGVvZiAkU3ltYm9sID09ICdmdW5jdGlvbic7XG52YXIgUU9iamVjdCA9IGdsb2JhbC5RT2JqZWN0O1xuLy8gRG9uJ3QgdXNlIHNldHRlcnMgaW4gUXQgU2NyaXB0LCBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMTczXG52YXIgc2V0dGVyID0gIVFPYmplY3QgfHwgIVFPYmplY3RbUFJPVE9UWVBFXSB8fCAhUU9iamVjdFtQUk9UT1RZUEVdLmZpbmRDaGlsZDtcblxuLy8gZmFsbGJhY2sgZm9yIG9sZCBBbmRyb2lkLCBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9Njg3XG52YXIgc2V0U3ltYm9sRGVzYyA9IERFU0NSSVBUT1JTICYmICRmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBfY3JlYXRlKGRQKHt9LCAnYScsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRQKHRoaXMsICdhJywgeyB2YWx1ZTogNyB9KS5hOyB9XG4gIH0pKS5hICE9IDc7XG59KSA/IGZ1bmN0aW9uIChpdCwga2V5LCBEKSB7XG4gIHZhciBwcm90b0Rlc2MgPSBnT1BEKE9iamVjdFByb3RvLCBrZXkpO1xuICBpZiAocHJvdG9EZXNjKSBkZWxldGUgT2JqZWN0UHJvdG9ba2V5XTtcbiAgZFAoaXQsIGtleSwgRCk7XG4gIGlmIChwcm90b0Rlc2MgJiYgaXQgIT09IE9iamVjdFByb3RvKSBkUChPYmplY3RQcm90bywga2V5LCBwcm90b0Rlc2MpO1xufSA6IGRQO1xuXG52YXIgd3JhcCA9IGZ1bmN0aW9uICh0YWcpIHtcbiAgdmFyIHN5bSA9IEFsbFN5bWJvbHNbdGFnXSA9IF9jcmVhdGUoJFN5bWJvbFtQUk9UT1RZUEVdKTtcbiAgc3ltLl9rID0gdGFnO1xuICByZXR1cm4gc3ltO1xufTtcblxudmFyIGlzU3ltYm9sID0gVVNFX05BVElWRSAmJiB0eXBlb2YgJFN5bWJvbC5pdGVyYXRvciA9PSAnc3ltYm9sJyA/IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdHlwZW9mIGl0ID09ICdzeW1ib2wnO1xufSA6IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgaW5zdGFuY2VvZiAkU3ltYm9sO1xufTtcblxudmFyICRkZWZpbmVQcm9wZXJ0eSA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KGl0LCBrZXksIEQpIHtcbiAgaWYgKGl0ID09PSBPYmplY3RQcm90bykgJGRlZmluZVByb3BlcnR5KE9QU3ltYm9scywga2V5LCBEKTtcbiAgYW5PYmplY3QoaXQpO1xuICBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpO1xuICBhbk9iamVjdChEKTtcbiAgaWYgKGhhcyhBbGxTeW1ib2xzLCBrZXkpKSB7XG4gICAgaWYgKCFELmVudW1lcmFibGUpIHtcbiAgICAgIGlmICghaGFzKGl0LCBISURERU4pKSBkUChpdCwgSElEREVOLCBjcmVhdGVEZXNjKDEsIHt9KSk7XG4gICAgICBpdFtISURERU5dW2tleV0gPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoaGFzKGl0LCBISURERU4pICYmIGl0W0hJRERFTl1ba2V5XSkgaXRbSElEREVOXVtrZXldID0gZmFsc2U7XG4gICAgICBEID0gX2NyZWF0ZShELCB7IGVudW1lcmFibGU6IGNyZWF0ZURlc2MoMCwgZmFsc2UpIH0pO1xuICAgIH0gcmV0dXJuIHNldFN5bWJvbERlc2MoaXQsIGtleSwgRCk7XG4gIH0gcmV0dXJuIGRQKGl0LCBrZXksIEQpO1xufTtcbnZhciAkZGVmaW5lUHJvcGVydGllcyA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXMoaXQsIFApIHtcbiAgYW5PYmplY3QoaXQpO1xuICB2YXIga2V5cyA9IGVudW1LZXlzKFAgPSB0b0lPYmplY3QoUCkpO1xuICB2YXIgaSA9IDA7XG4gIHZhciBsID0ga2V5cy5sZW5ndGg7XG4gIHZhciBrZXk7XG4gIHdoaWxlIChsID4gaSkgJGRlZmluZVByb3BlcnR5KGl0LCBrZXkgPSBrZXlzW2krK10sIFBba2V5XSk7XG4gIHJldHVybiBpdDtcbn07XG52YXIgJGNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShpdCwgUCkge1xuICByZXR1cm4gUCA9PT0gdW5kZWZpbmVkID8gX2NyZWF0ZShpdCkgOiAkZGVmaW5lUHJvcGVydGllcyhfY3JlYXRlKGl0KSwgUCk7XG59O1xudmFyICRwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IGZ1bmN0aW9uIHByb3BlcnR5SXNFbnVtZXJhYmxlKGtleSkge1xuICB2YXIgRSA9IGlzRW51bS5jYWxsKHRoaXMsIGtleSA9IHRvUHJpbWl0aXZlKGtleSwgdHJ1ZSkpO1xuICBpZiAodGhpcyA9PT0gT2JqZWN0UHJvdG8gJiYgaGFzKEFsbFN5bWJvbHMsIGtleSkgJiYgIWhhcyhPUFN5bWJvbHMsIGtleSkpIHJldHVybiBmYWxzZTtcbiAgcmV0dXJuIEUgfHwgIWhhcyh0aGlzLCBrZXkpIHx8ICFoYXMoQWxsU3ltYm9scywga2V5KSB8fCBoYXModGhpcywgSElEREVOKSAmJiB0aGlzW0hJRERFTl1ba2V5XSA/IEUgOiB0cnVlO1xufTtcbnZhciAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGl0LCBrZXkpIHtcbiAgaXQgPSB0b0lPYmplY3QoaXQpO1xuICBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpO1xuICBpZiAoaXQgPT09IE9iamVjdFByb3RvICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICFoYXMoT1BTeW1ib2xzLCBrZXkpKSByZXR1cm47XG4gIHZhciBEID0gZ09QRChpdCwga2V5KTtcbiAgaWYgKEQgJiYgaGFzKEFsbFN5bWJvbHMsIGtleSkgJiYgIShoYXMoaXQsIEhJRERFTikgJiYgaXRbSElEREVOXVtrZXldKSkgRC5lbnVtZXJhYmxlID0gdHJ1ZTtcbiAgcmV0dXJuIEQ7XG59O1xudmFyICRnZXRPd25Qcm9wZXJ0eU5hbWVzID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhpdCkge1xuICB2YXIgbmFtZXMgPSBnT1BOKHRvSU9iamVjdChpdCkpO1xuICB2YXIgcmVzdWx0ID0gW107XG4gIHZhciBpID0gMDtcbiAgdmFyIGtleTtcbiAgd2hpbGUgKG5hbWVzLmxlbmd0aCA+IGkpIHtcbiAgICBpZiAoIWhhcyhBbGxTeW1ib2xzLCBrZXkgPSBuYW1lc1tpKytdKSAmJiBrZXkgIT0gSElEREVOICYmIGtleSAhPSBNRVRBKSByZXN1bHQucHVzaChrZXkpO1xuICB9IHJldHVybiByZXN1bHQ7XG59O1xudmFyICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoaXQpIHtcbiAgdmFyIElTX09QID0gaXQgPT09IE9iamVjdFByb3RvO1xuICB2YXIgbmFtZXMgPSBnT1BOKElTX09QID8gT1BTeW1ib2xzIDogdG9JT2JqZWN0KGl0KSk7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgdmFyIGkgPSAwO1xuICB2YXIga2V5O1xuICB3aGlsZSAobmFtZXMubGVuZ3RoID4gaSkge1xuICAgIGlmIChoYXMoQWxsU3ltYm9scywga2V5ID0gbmFtZXNbaSsrXSkgJiYgKElTX09QID8gaGFzKE9iamVjdFByb3RvLCBrZXkpIDogdHJ1ZSkpIHJlc3VsdC5wdXNoKEFsbFN5bWJvbHNba2V5XSk7XG4gIH0gcmV0dXJuIHJlc3VsdDtcbn07XG5cbi8vIDE5LjQuMS4xIFN5bWJvbChbZGVzY3JpcHRpb25dKVxuaWYgKCFVU0VfTkFUSVZFKSB7XG4gICRTeW1ib2wgPSBmdW5jdGlvbiBTeW1ib2woKSB7XG4gICAgaWYgKHRoaXMgaW5zdGFuY2VvZiAkU3ltYm9sKSB0aHJvdyBUeXBlRXJyb3IoJ1N5bWJvbCBpcyBub3QgYSBjb25zdHJ1Y3RvciEnKTtcbiAgICB2YXIgdGFnID0gdWlkKGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTtcbiAgICB2YXIgJHNldCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgaWYgKHRoaXMgPT09IE9iamVjdFByb3RvKSAkc2V0LmNhbGwoT1BTeW1ib2xzLCB2YWx1ZSk7XG4gICAgICBpZiAoaGFzKHRoaXMsIEhJRERFTikgJiYgaGFzKHRoaXNbSElEREVOXSwgdGFnKSkgdGhpc1tISURERU5dW3RhZ10gPSBmYWxzZTtcbiAgICAgIHNldFN5bWJvbERlc2ModGhpcywgdGFnLCBjcmVhdGVEZXNjKDEsIHZhbHVlKSk7XG4gICAgfTtcbiAgICBpZiAoREVTQ1JJUFRPUlMgJiYgc2V0dGVyKSBzZXRTeW1ib2xEZXNjKE9iamVjdFByb3RvLCB0YWcsIHsgY29uZmlndXJhYmxlOiB0cnVlLCBzZXQ6ICRzZXQgfSk7XG4gICAgcmV0dXJuIHdyYXAodGFnKTtcbiAgfTtcbiAgcmVkZWZpbmUoJFN5bWJvbFtQUk9UT1RZUEVdLCAndG9TdHJpbmcnLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5faztcbiAgfSk7XG5cbiAgJEdPUEQuZiA9ICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG4gICREUC5mID0gJGRlZmluZVByb3BlcnR5O1xuICByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpLmYgPSBnT1BORXh0LmYgPSAkZ2V0T3duUHJvcGVydHlOYW1lcztcbiAgcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpLmYgPSAkcHJvcGVydHlJc0VudW1lcmFibGU7XG4gIHJlcXVpcmUoJy4vX29iamVjdC1nb3BzJykuZiA9ICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG5cbiAgaWYgKERFU0NSSVBUT1JTICYmICFyZXF1aXJlKCcuL19saWJyYXJ5JykpIHtcbiAgICByZWRlZmluZShPYmplY3RQcm90bywgJ3Byb3BlcnR5SXNFbnVtZXJhYmxlJywgJHByb3BlcnR5SXNFbnVtZXJhYmxlLCB0cnVlKTtcbiAgfVxuXG4gIHdrc0V4dC5mID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICByZXR1cm4gd3JhcCh3a3MobmFtZSkpO1xuICB9O1xufVxuXG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCB7IFN5bWJvbDogJFN5bWJvbCB9KTtcblxuZm9yICh2YXIgZXM2U3ltYm9scyA9IChcbiAgLy8gMTkuNC4yLjIsIDE5LjQuMi4zLCAxOS40LjIuNCwgMTkuNC4yLjYsIDE5LjQuMi44LCAxOS40LjIuOSwgMTkuNC4yLjEwLCAxOS40LjIuMTEsIDE5LjQuMi4xMiwgMTkuNC4yLjEzLCAxOS40LjIuMTRcbiAgJ2hhc0luc3RhbmNlLGlzQ29uY2F0U3ByZWFkYWJsZSxpdGVyYXRvcixtYXRjaCxyZXBsYWNlLHNlYXJjaCxzcGVjaWVzLHNwbGl0LHRvUHJpbWl0aXZlLHRvU3RyaW5nVGFnLHVuc2NvcGFibGVzJ1xuKS5zcGxpdCgnLCcpLCBqID0gMDsgZXM2U3ltYm9scy5sZW5ndGggPiBqOyl3a3MoZXM2U3ltYm9sc1tqKytdKTtcblxuZm9yICh2YXIgd2VsbEtub3duU3ltYm9scyA9ICRrZXlzKHdrcy5zdG9yZSksIGsgPSAwOyB3ZWxsS25vd25TeW1ib2xzLmxlbmd0aCA+IGs7KSB3a3NEZWZpbmUod2VsbEtub3duU3ltYm9sc1trKytdKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgJ1N5bWJvbCcsIHtcbiAgLy8gMTkuNC4yLjEgU3ltYm9sLmZvcihrZXkpXG4gICdmb3InOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuIGhhcyhTeW1ib2xSZWdpc3RyeSwga2V5ICs9ICcnKVxuICAgICAgPyBTeW1ib2xSZWdpc3RyeVtrZXldXG4gICAgICA6IFN5bWJvbFJlZ2lzdHJ5W2tleV0gPSAkU3ltYm9sKGtleSk7XG4gIH0sXG4gIC8vIDE5LjQuMi41IFN5bWJvbC5rZXlGb3Ioc3ltKVxuICBrZXlGb3I6IGZ1bmN0aW9uIGtleUZvcihzeW0pIHtcbiAgICBpZiAoIWlzU3ltYm9sKHN5bSkpIHRocm93IFR5cGVFcnJvcihzeW0gKyAnIGlzIG5vdCBhIHN5bWJvbCEnKTtcbiAgICBmb3IgKHZhciBrZXkgaW4gU3ltYm9sUmVnaXN0cnkpIGlmIChTeW1ib2xSZWdpc3RyeVtrZXldID09PSBzeW0pIHJldHVybiBrZXk7XG4gIH0sXG4gIHVzZVNldHRlcjogZnVuY3Rpb24gKCkgeyBzZXR0ZXIgPSB0cnVlOyB9LFxuICB1c2VTaW1wbGU6IGZ1bmN0aW9uICgpIHsgc2V0dGVyID0gZmFsc2U7IH1cbn0pO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCAnT2JqZWN0Jywge1xuICAvLyAxOS4xLjIuMiBPYmplY3QuY3JlYXRlKE8gWywgUHJvcGVydGllc10pXG4gIGNyZWF0ZTogJGNyZWF0ZSxcbiAgLy8gMTkuMS4yLjQgT2JqZWN0LmRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpXG4gIGRlZmluZVByb3BlcnR5OiAkZGVmaW5lUHJvcGVydHksXG4gIC8vIDE5LjEuMi4zIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKE8sIFByb3BlcnRpZXMpXG4gIGRlZmluZVByb3BlcnRpZXM6ICRkZWZpbmVQcm9wZXJ0aWVzLFxuICAvLyAxOS4xLjIuNiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApXG4gIGdldE93blByb3BlcnR5RGVzY3JpcHRvcjogJGdldE93blByb3BlcnR5RGVzY3JpcHRvcixcbiAgLy8gMTkuMS4yLjcgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoTylcbiAgZ2V0T3duUHJvcGVydHlOYW1lczogJGdldE93blByb3BlcnR5TmFtZXMsXG4gIC8vIDE5LjEuMi44IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoTylcbiAgZ2V0T3duUHJvcGVydHlTeW1ib2xzOiAkZ2V0T3duUHJvcGVydHlTeW1ib2xzXG59KTtcblxuLy8gMjQuMy4yIEpTT04uc3RyaW5naWZ5KHZhbHVlIFssIHJlcGxhY2VyIFssIHNwYWNlXV0pXG4kSlNPTiAmJiAkZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICghVVNFX05BVElWRSB8fCAkZmFpbHMoZnVuY3Rpb24gKCkge1xuICB2YXIgUyA9ICRTeW1ib2woKTtcbiAgLy8gTVMgRWRnZSBjb252ZXJ0cyBzeW1ib2wgdmFsdWVzIHRvIEpTT04gYXMge31cbiAgLy8gV2ViS2l0IGNvbnZlcnRzIHN5bWJvbCB2YWx1ZXMgdG8gSlNPTiBhcyBudWxsXG4gIC8vIFY4IHRocm93cyBvbiBib3hlZCBzeW1ib2xzXG4gIHJldHVybiBfc3RyaW5naWZ5KFtTXSkgIT0gJ1tudWxsXScgfHwgX3N0cmluZ2lmeSh7IGE6IFMgfSkgIT0gJ3t9JyB8fCBfc3RyaW5naWZ5KE9iamVjdChTKSkgIT0gJ3t9Jztcbn0pKSwgJ0pTT04nLCB7XG4gIHN0cmluZ2lmeTogZnVuY3Rpb24gc3RyaW5naWZ5KGl0KSB7XG4gICAgdmFyIGFyZ3MgPSBbaXRdO1xuICAgIHZhciBpID0gMTtcbiAgICB2YXIgcmVwbGFjZXIsICRyZXBsYWNlcjtcbiAgICB3aGlsZSAoYXJndW1lbnRzLmxlbmd0aCA+IGkpIGFyZ3MucHVzaChhcmd1bWVudHNbaSsrXSk7XG4gICAgJHJlcGxhY2VyID0gcmVwbGFjZXIgPSBhcmdzWzFdO1xuICAgIGlmICghaXNPYmplY3QocmVwbGFjZXIpICYmIGl0ID09PSB1bmRlZmluZWQgfHwgaXNTeW1ib2woaXQpKSByZXR1cm47IC8vIElFOCByZXR1cm5zIHN0cmluZyBvbiB1bmRlZmluZWRcbiAgICBpZiAoIWlzQXJyYXkocmVwbGFjZXIpKSByZXBsYWNlciA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgICBpZiAodHlwZW9mICRyZXBsYWNlciA9PSAnZnVuY3Rpb24nKSB2YWx1ZSA9ICRyZXBsYWNlci5jYWxsKHRoaXMsIGtleSwgdmFsdWUpO1xuICAgICAgaWYgKCFpc1N5bWJvbCh2YWx1ZSkpIHJldHVybiB2YWx1ZTtcbiAgICB9O1xuICAgIGFyZ3NbMV0gPSByZXBsYWNlcjtcbiAgICByZXR1cm4gX3N0cmluZ2lmeS5hcHBseSgkSlNPTiwgYXJncyk7XG4gIH1cbn0pO1xuXG4vLyAxOS40LjMuNCBTeW1ib2wucHJvdG90eXBlW0BAdG9QcmltaXRpdmVdKGhpbnQpXG4kU3ltYm9sW1BST1RPVFlQRV1bVE9fUFJJTUlUSVZFXSB8fCByZXF1aXJlKCcuL19oaWRlJykoJFN5bWJvbFtQUk9UT1RZUEVdLCBUT19QUklNSVRJVkUsICRTeW1ib2xbUFJPVE9UWVBFXS52YWx1ZU9mKTtcbi8vIDE5LjQuMy41IFN5bWJvbC5wcm90b3R5cGVbQEB0b1N0cmluZ1RhZ11cbnNldFRvU3RyaW5nVGFnKCRTeW1ib2wsICdTeW1ib2wnKTtcbi8vIDIwLjIuMS45IE1hdGhbQEB0b1N0cmluZ1RhZ11cbnNldFRvU3RyaW5nVGFnKE1hdGgsICdNYXRoJywgdHJ1ZSk7XG4vLyAyNC4zLjMgSlNPTltAQHRvU3RyaW5nVGFnXVxuc2V0VG9TdHJpbmdUYWcoZ2xvYmFsLkpTT04sICdKU09OJywgdHJ1ZSk7XG4iLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNi5zeW1ib2wnKTtcbnJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM2Lm9iamVjdC50by1zdHJpbmcnKTtcbnJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM3LnN5bWJvbC5hc3luYy1pdGVyYXRvcicpO1xucmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczcuc3ltYm9sLm9ic2VydmFibGUnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLlN5bWJvbDtcbiIsIm1vZHVsZS5leHBvcnRzID0geyBcImRlZmF1bHRcIjogcmVxdWlyZShcImNvcmUtanMvbGlicmFyeS9mbi9zeW1ib2xcIiksIF9fZXNNb2R1bGU6IHRydWUgfTsiLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChkb25lLCB2YWx1ZSkge1xuICByZXR1cm4geyB2YWx1ZTogdmFsdWUsIGRvbmU6ICEhZG9uZSB9O1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGFkZFRvVW5zY29wYWJsZXMgPSByZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKTtcbnZhciBzdGVwID0gcmVxdWlyZSgnLi9faXRlci1zdGVwJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xuXG4vLyAyMi4xLjMuNCBBcnJheS5wcm90b3R5cGUuZW50cmllcygpXG4vLyAyMi4xLjMuMTMgQXJyYXkucHJvdG90eXBlLmtleXMoKVxuLy8gMjIuMS4zLjI5IEFycmF5LnByb3RvdHlwZS52YWx1ZXMoKVxuLy8gMjIuMS4zLjMwIEFycmF5LnByb3RvdHlwZVtAQGl0ZXJhdG9yXSgpXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2l0ZXItZGVmaW5lJykoQXJyYXksICdBcnJheScsIGZ1bmN0aW9uIChpdGVyYXRlZCwga2luZCkge1xuICB0aGlzLl90ID0gdG9JT2JqZWN0KGl0ZXJhdGVkKTsgLy8gdGFyZ2V0XG4gIHRoaXMuX2kgPSAwOyAgICAgICAgICAgICAgICAgICAvLyBuZXh0IGluZGV4XG4gIHRoaXMuX2sgPSBraW5kOyAgICAgICAgICAgICAgICAvLyBraW5kXG4vLyAyMi4xLjUuMi4xICVBcnJheUl0ZXJhdG9yUHJvdG90eXBlJS5uZXh0KClcbn0sIGZ1bmN0aW9uICgpIHtcbiAgdmFyIE8gPSB0aGlzLl90O1xuICB2YXIga2luZCA9IHRoaXMuX2s7XG4gIHZhciBpbmRleCA9IHRoaXMuX2krKztcbiAgaWYgKCFPIHx8IGluZGV4ID49IE8ubGVuZ3RoKSB7XG4gICAgdGhpcy5fdCA9IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gc3RlcCgxKTtcbiAgfVxuICBpZiAoa2luZCA9PSAna2V5cycpIHJldHVybiBzdGVwKDAsIGluZGV4KTtcbiAgaWYgKGtpbmQgPT0gJ3ZhbHVlcycpIHJldHVybiBzdGVwKDAsIE9baW5kZXhdKTtcbiAgcmV0dXJuIHN0ZXAoMCwgW2luZGV4LCBPW2luZGV4XV0pO1xufSwgJ3ZhbHVlcycpO1xuXG4vLyBhcmd1bWVudHNMaXN0W0BAaXRlcmF0b3JdIGlzICVBcnJheVByb3RvX3ZhbHVlcyUgKDkuNC40LjYsIDkuNC40LjcpXG5JdGVyYXRvcnMuQXJndW1lbnRzID0gSXRlcmF0b3JzLkFycmF5O1xuXG5hZGRUb1Vuc2NvcGFibGVzKCdrZXlzJyk7XG5hZGRUb1Vuc2NvcGFibGVzKCd2YWx1ZXMnKTtcbmFkZFRvVW5zY29wYWJsZXMoJ2VudHJpZXMnKTtcbiIsInJlcXVpcmUoJy4vZXM2LmFycmF5Lml0ZXJhdG9yJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbnZhciBUT19TVFJJTkdfVEFHID0gcmVxdWlyZSgnLi9fd2tzJykoJ3RvU3RyaW5nVGFnJyk7XG5cbnZhciBET01JdGVyYWJsZXMgPSAoJ0NTU1J1bGVMaXN0LENTU1N0eWxlRGVjbGFyYXRpb24sQ1NTVmFsdWVMaXN0LENsaWVudFJlY3RMaXN0LERPTVJlY3RMaXN0LERPTVN0cmluZ0xpc3QsJyArXG4gICdET01Ub2tlbkxpc3QsRGF0YVRyYW5zZmVySXRlbUxpc3QsRmlsZUxpc3QsSFRNTEFsbENvbGxlY3Rpb24sSFRNTENvbGxlY3Rpb24sSFRNTEZvcm1FbGVtZW50LEhUTUxTZWxlY3RFbGVtZW50LCcgK1xuICAnTWVkaWFMaXN0LE1pbWVUeXBlQXJyYXksTmFtZWROb2RlTWFwLE5vZGVMaXN0LFBhaW50UmVxdWVzdExpc3QsUGx1Z2luLFBsdWdpbkFycmF5LFNWR0xlbmd0aExpc3QsU1ZHTnVtYmVyTGlzdCwnICtcbiAgJ1NWR1BhdGhTZWdMaXN0LFNWR1BvaW50TGlzdCxTVkdTdHJpbmdMaXN0LFNWR1RyYW5zZm9ybUxpc3QsU291cmNlQnVmZmVyTGlzdCxTdHlsZVNoZWV0TGlzdCxUZXh0VHJhY2tDdWVMaXN0LCcgK1xuICAnVGV4dFRyYWNrTGlzdCxUb3VjaExpc3QnKS5zcGxpdCgnLCcpO1xuXG5mb3IgKHZhciBpID0gMDsgaSA8IERPTUl0ZXJhYmxlcy5sZW5ndGg7IGkrKykge1xuICB2YXIgTkFNRSA9IERPTUl0ZXJhYmxlc1tpXTtcbiAgdmFyIENvbGxlY3Rpb24gPSBnbG9iYWxbTkFNRV07XG4gIHZhciBwcm90byA9IENvbGxlY3Rpb24gJiYgQ29sbGVjdGlvbi5wcm90b3R5cGU7XG4gIGlmIChwcm90byAmJiAhcHJvdG9bVE9fU1RSSU5HX1RBR10pIGhpZGUocHJvdG8sIFRPX1NUUklOR19UQUcsIE5BTUUpO1xuICBJdGVyYXRvcnNbTkFNRV0gPSBJdGVyYXRvcnMuQXJyYXk7XG59XG4iLCIvLyA3LjEuMTMgVG9PYmplY3QoYXJndW1lbnQpXG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBPYmplY3QoZGVmaW5lZChpdCkpO1xufTtcbiIsIi8vIDE5LjEuMi45IC8gMTUuMi4zLjIgT2JqZWN0LmdldFByb3RvdHlwZU9mKE8pXG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciBJRV9QUk9UTyA9IHJlcXVpcmUoJy4vX3NoYXJlZC1rZXknKSgnSUVfUFJPVE8nKTtcbnZhciBPYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmdldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIChPKSB7XG4gIE8gPSB0b09iamVjdChPKTtcbiAgaWYgKGhhcyhPLCBJRV9QUk9UTykpIHJldHVybiBPW0lFX1BST1RPXTtcbiAgaWYgKHR5cGVvZiBPLmNvbnN0cnVjdG9yID09ICdmdW5jdGlvbicgJiYgTyBpbnN0YW5jZW9mIE8uY29uc3RydWN0b3IpIHtcbiAgICByZXR1cm4gTy5jb25zdHJ1Y3Rvci5wcm90b3R5cGU7XG4gIH0gcmV0dXJuIE8gaW5zdGFuY2VvZiBPYmplY3QgPyBPYmplY3RQcm90byA6IG51bGw7XG59O1xuIiwidmFyIGRvY3VtZW50ID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuZG9jdW1lbnQ7XG5tb2R1bGUuZXhwb3J0cyA9IGRvY3VtZW50ICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiIsInZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgbWF4ID0gTWF0aC5tYXg7XG52YXIgbWluID0gTWF0aC5taW47XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpbmRleCwgbGVuZ3RoKSB7XG4gIGluZGV4ID0gdG9JbnRlZ2VyKGluZGV4KTtcbiAgcmV0dXJuIGluZGV4IDwgMCA/IG1heChpbmRleCArIGxlbmd0aCwgMCkgOiBtaW4oaW5kZXgsIGxlbmd0aCk7XG59O1xuIiwiLy8gNy4xLjE1IFRvTGVuZ3RoXG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIG1pbiA9IE1hdGgubWluO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0ID4gMCA/IG1pbih0b0ludGVnZXIoaXQpLCAweDFmZmZmZmZmZmZmZmZmKSA6IDA7IC8vIHBvdygyLCA1MykgLSAxID09IDkwMDcxOTkyNTQ3NDA5OTFcbn07XG4iLCIvLyBmYWxzZSAtPiBBcnJheSNpbmRleE9mXG4vLyB0cnVlICAtPiBBcnJheSNpbmNsdWRlc1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4vX3RvLWFic29sdXRlLWluZGV4Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChJU19JTkNMVURFUykge1xuICByZXR1cm4gZnVuY3Rpb24gKCR0aGlzLCBlbCwgZnJvbUluZGV4KSB7XG4gICAgdmFyIE8gPSB0b0lPYmplY3QoJHRoaXMpO1xuICAgIHZhciBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gICAgdmFyIGluZGV4ID0gdG9BYnNvbHV0ZUluZGV4KGZyb21JbmRleCwgbGVuZ3RoKTtcbiAgICB2YXIgdmFsdWU7XG4gICAgLy8gQXJyYXkjaW5jbHVkZXMgdXNlcyBTYW1lVmFsdWVaZXJvIGVxdWFsaXR5IGFsZ29yaXRobVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICBpZiAoSVNfSU5DTFVERVMgJiYgZWwgIT0gZWwpIHdoaWxlIChsZW5ndGggPiBpbmRleCkge1xuICAgICAgdmFsdWUgPSBPW2luZGV4KytdO1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgICAgaWYgKHZhbHVlICE9IHZhbHVlKSByZXR1cm4gdHJ1ZTtcbiAgICAvLyBBcnJheSNpbmRleE9mIGlnbm9yZXMgaG9sZXMsIEFycmF5I2luY2x1ZGVzIC0gbm90XG4gICAgfSBlbHNlIGZvciAoO2xlbmd0aCA+IGluZGV4OyBpbmRleCsrKSBpZiAoSVNfSU5DTFVERVMgfHwgaW5kZXggaW4gTykge1xuICAgICAgaWYgKE9baW5kZXhdID09PSBlbCkgcmV0dXJuIElTX0lOQ0xVREVTIHx8IGluZGV4IHx8IDA7XG4gICAgfSByZXR1cm4gIUlTX0lOQ0xVREVTICYmIC0xO1xuICB9O1xufTtcbiIsIi8vIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgYW5kIG5vbi1lbnVtZXJhYmxlIG9sZCBWOCBzdHJpbmdzXG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcHJvdG90eXBlLWJ1aWx0aW5zXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdCgneicpLnByb3BlcnR5SXNFbnVtZXJhYmxlKDApID8gT2JqZWN0IDogZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBjb2YoaXQpID09ICdTdHJpbmcnID8gaXQuc3BsaXQoJycpIDogT2JqZWN0KGl0KTtcbn07XG4iLCJ2YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGdldEtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcykge1xuICBhbk9iamVjdChPKTtcbiAgdmFyIGtleXMgPSBnZXRLZXlzKFByb3BlcnRpZXMpO1xuICB2YXIgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG4gIHZhciBpID0gMDtcbiAgdmFyIFA7XG4gIHdoaWxlIChsZW5ndGggPiBpKSBkUC5mKE8sIFAgPSBrZXlzW2krK10sIFByb3BlcnRpZXNbUF0pO1xuICByZXR1cm4gTztcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgY3JlYXRlID0gcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpO1xudmFyIGRlc2NyaXB0b3IgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIEl0ZXJhdG9yUHJvdG90eXBlID0ge307XG5cbi8vIDI1LjEuMi4xLjEgJUl0ZXJhdG9yUHJvdG90eXBlJVtAQGl0ZXJhdG9yXSgpXG5yZXF1aXJlKCcuL19oaWRlJykoSXRlcmF0b3JQcm90b3R5cGUsIHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpLCBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9KTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIE5BTUUsIG5leHQpIHtcbiAgQ29uc3RydWN0b3IucHJvdG90eXBlID0gY3JlYXRlKEl0ZXJhdG9yUHJvdG90eXBlLCB7IG5leHQ6IGRlc2NyaXB0b3IoMSwgbmV4dCkgfSk7XG4gIHNldFRvU3RyaW5nVGFnKENvbnN0cnVjdG9yLCBOQU1FICsgJyBJdGVyYXRvcicpO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmICh0eXBlb2YgaXQgIT0gJ2Z1bmN0aW9uJykgdGhyb3cgVHlwZUVycm9yKGl0ICsgJyBpcyBub3QgYSBmdW5jdGlvbiEnKTtcbiAgcmV0dXJuIGl0O1xufTtcbiIsInZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbi8vIHRydWUgIC0+IFN0cmluZyNhdFxuLy8gZmFsc2UgLT4gU3RyaW5nI2NvZGVQb2ludEF0XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChUT19TVFJJTkcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICh0aGF0LCBwb3MpIHtcbiAgICB2YXIgcyA9IFN0cmluZyhkZWZpbmVkKHRoYXQpKTtcbiAgICB2YXIgaSA9IHRvSW50ZWdlcihwb3MpO1xuICAgIHZhciBsID0gcy5sZW5ndGg7XG4gICAgdmFyIGEsIGI7XG4gICAgaWYgKGkgPCAwIHx8IGkgPj0gbCkgcmV0dXJuIFRPX1NUUklORyA/ICcnIDogdW5kZWZpbmVkO1xuICAgIGEgPSBzLmNoYXJDb2RlQXQoaSk7XG4gICAgcmV0dXJuIGEgPCAweGQ4MDAgfHwgYSA+IDB4ZGJmZiB8fCBpICsgMSA9PT0gbCB8fCAoYiA9IHMuY2hhckNvZGVBdChpICsgMSkpIDwgMHhkYzAwIHx8IGIgPiAweGRmZmZcbiAgICAgID8gVE9fU1RSSU5HID8gcy5jaGFyQXQoaSkgOiBhXG4gICAgICA6IFRPX1NUUklORyA/IHMuc2xpY2UoaSwgaSArIDIpIDogKGEgLSAweGQ4MDAgPDwgMTApICsgKGIgLSAweGRjMDApICsgMHgxMDAwMDtcbiAgfTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGF0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLWF0JykodHJ1ZSk7XG5cbi8vIDIxLjEuMy4yNyBTdHJpbmcucHJvdG90eXBlW0BAaXRlcmF0b3JdKClcbnJlcXVpcmUoJy4vX2l0ZXItZGVmaW5lJykoU3RyaW5nLCAnU3RyaW5nJywgZnVuY3Rpb24gKGl0ZXJhdGVkKSB7XG4gIHRoaXMuX3QgPSBTdHJpbmcoaXRlcmF0ZWQpOyAvLyB0YXJnZXRcbiAgdGhpcy5faSA9IDA7ICAgICAgICAgICAgICAgIC8vIG5leHQgaW5kZXhcbi8vIDIxLjEuNS4yLjEgJVN0cmluZ0l0ZXJhdG9yUHJvdG90eXBlJS5uZXh0KClcbn0sIGZ1bmN0aW9uICgpIHtcbiAgdmFyIE8gPSB0aGlzLl90O1xuICB2YXIgaW5kZXggPSB0aGlzLl9pO1xuICB2YXIgcG9pbnQ7XG4gIGlmIChpbmRleCA+PSBPLmxlbmd0aCkgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICBwb2ludCA9ICRhdChPLCBpbmRleCk7XG4gIHRoaXMuX2kgKz0gcG9pbnQubGVuZ3RoO1xuICByZXR1cm4geyB2YWx1ZTogcG9pbnQsIGRvbmU6IGZhbHNlIH07XG59KTtcbiIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM2LnN0cmluZy5pdGVyYXRvcicpO1xucmVxdWlyZSgnLi4vLi4vbW9kdWxlcy93ZWIuZG9tLml0ZXJhYmxlJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX3drcy1leHQnKS5mKCdpdGVyYXRvcicpO1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7IFwiZGVmYXVsdFwiOiByZXF1aXJlKFwiY29yZS1qcy9saWJyYXJ5L2ZuL3N5bWJvbC9pdGVyYXRvclwiKSwgX19lc01vZHVsZTogdHJ1ZSB9OyIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX3R5cGVvZjIgPSByZXF1aXJlKFwiLi4vaGVscGVycy90eXBlb2ZcIik7XG5cbnZhciBfdHlwZW9mMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3R5cGVvZjIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5leHBvcnRzLmRlZmF1bHQgPSBmdW5jdGlvbiAoc2VsZiwgY2FsbCkge1xuICBpZiAoIXNlbGYpIHtcbiAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7XG4gIH1cblxuICByZXR1cm4gY2FsbCAmJiAoKHR5cGVvZiBjYWxsID09PSBcInVuZGVmaW5lZFwiID8gXCJ1bmRlZmluZWRcIiA6ICgwLCBfdHlwZW9mMy5kZWZhdWx0KShjYWxsKSkgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGZ1bmN0aW9uIChpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtcbiAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xuICB9XG59OyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9jbGFzc0NhbGxDaGVjazIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snKTtcblxudmFyIF9jbGFzc0NhbGxDaGVjazMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbGFzc0NhbGxDaGVjazIpO1xuXG52YXIgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4nKTtcblxudmFyIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yKTtcblxudmFyIF9pbmhlcml0czIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHMnKTtcblxudmFyIF9pbmhlcml0czMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pbmhlcml0czIpO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9zZXREaXNwbGF5TmFtZSA9IHJlcXVpcmUoJy4vc2V0RGlzcGxheU5hbWUnKTtcblxudmFyIF9zZXREaXNwbGF5TmFtZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zZXREaXNwbGF5TmFtZSk7XG5cbnZhciBfd3JhcERpc3BsYXlOYW1lID0gcmVxdWlyZSgnLi93cmFwRGlzcGxheU5hbWUnKTtcblxudmFyIF93cmFwRGlzcGxheU5hbWUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfd3JhcERpc3BsYXlOYW1lKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIHNob3VsZFVwZGF0ZSA9IGZ1bmN0aW9uIHNob3VsZFVwZGF0ZSh0ZXN0KSB7XG4gIHJldHVybiBmdW5jdGlvbiAoQmFzZUNvbXBvbmVudCkge1xuICAgIHZhciBmYWN0b3J5ID0gKDAsIF9yZWFjdC5jcmVhdGVGYWN0b3J5KShCYXNlQ29tcG9uZW50KTtcblxuICAgIHZhciBTaG91bGRVcGRhdGUgPSBmdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICAgICAgKDAsIF9pbmhlcml0czMuZGVmYXVsdCkoU2hvdWxkVXBkYXRlLCBfQ29tcG9uZW50KTtcblxuICAgICAgZnVuY3Rpb24gU2hvdWxkVXBkYXRlKCkge1xuICAgICAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMy5kZWZhdWx0KSh0aGlzLCBTaG91bGRVcGRhdGUpO1xuICAgICAgICByZXR1cm4gKDAsIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMy5kZWZhdWx0KSh0aGlzLCBfQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICAgICAgfVxuXG4gICAgICBTaG91bGRVcGRhdGUucHJvdG90eXBlLnNob3VsZENvbXBvbmVudFVwZGF0ZSA9IGZ1bmN0aW9uIHNob3VsZENvbXBvbmVudFVwZGF0ZShuZXh0UHJvcHMpIHtcbiAgICAgICAgcmV0dXJuIHRlc3QodGhpcy5wcm9wcywgbmV4dFByb3BzKTtcbiAgICAgIH07XG5cbiAgICAgIFNob3VsZFVwZGF0ZS5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gZmFjdG9yeSh0aGlzLnByb3BzKTtcbiAgICAgIH07XG5cbiAgICAgIHJldHVybiBTaG91bGRVcGRhdGU7XG4gICAgfShfcmVhY3QuQ29tcG9uZW50KTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICByZXR1cm4gKDAsIF9zZXREaXNwbGF5TmFtZTIuZGVmYXVsdCkoKDAsIF93cmFwRGlzcGxheU5hbWUyLmRlZmF1bHQpKEJhc2VDb21wb25lbnQsICdzaG91bGRVcGRhdGUnKSkoU2hvdWxkVXBkYXRlKTtcbiAgICB9XG4gICAgcmV0dXJuIFNob3VsZFVwZGF0ZTtcbiAgfTtcbn07XG5cbmV4cG9ydHMuZGVmYXVsdCA9IHNob3VsZFVwZGF0ZTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9jcmVhdGVTdmdJY29uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlscy9jcmVhdGVTdmdJY29uXCIpKTtcblxudmFyIF9kZWZhdWx0ID0gKDAsIF9jcmVhdGVTdmdJY29uLmRlZmF1bHQpKF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJnXCIsIG51bGwsIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgZDogXCJNMyAxOGgxOHYtMkgzdjJ6bTAtNWgxOHYtMkgzdjJ6bTAtN3YyaDE4VjZIM3pcIlxufSkpLCAnTWVudScpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuc3R5bGVzID0gdm9pZCAwO1xuXG52YXIgX2V4dGVuZHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2V4dGVuZHNcIikpO1xuXG52YXIgX2RlZmluZVByb3BlcnR5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9kZWZpbmVQcm9wZXJ0eVwiKSk7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCIpKTtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKTtcblxudmFyIF9jbGFzc25hbWVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY2xhc3NuYW1lc1wiKSk7XG5cbnZhciBfd2l0aFN0eWxlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3N0eWxlcy93aXRoU3R5bGVzXCIpKTtcblxudmFyIF9jb2xvck1hbmlwdWxhdG9yID0gcmVxdWlyZShcIi4uL3N0eWxlcy9jb2xvck1hbmlwdWxhdG9yXCIpO1xuXG52YXIgX0J1dHRvbkJhc2UgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9CdXR0b25CYXNlXCIpKTtcblxudmFyIF9oZWxwZXJzID0gcmVxdWlyZShcIi4uL3V0aWxzL2hlbHBlcnNcIik7XG5cbi8vIEBpbmhlcml0ZWRDb21wb25lbnQgQnV0dG9uQmFzZVxudmFyIHN0eWxlcyA9IGZ1bmN0aW9uIHN0eWxlcyh0aGVtZSkge1xuICByZXR1cm4ge1xuICAgIHJvb3Q6IHtcbiAgICAgIHRleHRBbGlnbjogJ2NlbnRlcicsXG4gICAgICBmbGV4OiAnMCAwIGF1dG8nLFxuICAgICAgZm9udFNpemU6IHRoZW1lLnR5cG9ncmFwaHkucHhUb1JlbSgyNCksXG4gICAgICB3aWR0aDogNDgsXG4gICAgICBoZWlnaHQ6IDQ4LFxuICAgICAgcGFkZGluZzogMCxcbiAgICAgIGJvcmRlclJhZGl1czogJzUwJScsXG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5hY3Rpb24uYWN0aXZlLFxuICAgICAgdHJhbnNpdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCdiYWNrZ3JvdW5kLWNvbG9yJywge1xuICAgICAgICBkdXJhdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuZHVyYXRpb24uc2hvcnRlc3RcbiAgICAgIH0pLFxuICAgICAgJyY6aG92ZXInOiB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogKDAsIF9jb2xvck1hbmlwdWxhdG9yLmZhZGUpKHRoZW1lLnBhbGV0dGUuYWN0aW9uLmFjdGl2ZSwgdGhlbWUucGFsZXR0ZS5hY3Rpb24uaG92ZXJPcGFjaXR5KSxcbiAgICAgICAgLy8gUmVzZXQgb24gdG91Y2ggZGV2aWNlcywgaXQgZG9lc24ndCBhZGQgc3BlY2lmaWNpdHlcbiAgICAgICAgJ0BtZWRpYSAoaG92ZXI6IG5vbmUpJzoge1xuICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJ3RyYW5zcGFyZW50J1xuICAgICAgICB9LFxuICAgICAgICAnJiRkaXNhYmxlZCc6IHtcbiAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICd0cmFuc3BhcmVudCdcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgICcmJGRpc2FibGVkJzoge1xuICAgICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5hY3Rpb24uZGlzYWJsZWRcbiAgICAgIH1cbiAgICB9LFxuICAgIGNvbG9ySW5oZXJpdDoge1xuICAgICAgY29sb3I6ICdpbmhlcml0J1xuICAgIH0sXG4gICAgY29sb3JQcmltYXJ5OiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5wcmltYXJ5Lm1haW4sXG4gICAgICAnJjpob3Zlcic6IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiAoMCwgX2NvbG9yTWFuaXB1bGF0b3IuZmFkZSkodGhlbWUucGFsZXR0ZS5wcmltYXJ5Lm1haW4sIHRoZW1lLnBhbGV0dGUuYWN0aW9uLmhvdmVyT3BhY2l0eSksXG4gICAgICAgIC8vIFJlc2V0IG9uIHRvdWNoIGRldmljZXMsIGl0IGRvZXNuJ3QgYWRkIHNwZWNpZmljaXR5XG4gICAgICAgICdAbWVkaWEgKGhvdmVyOiBub25lKSc6IHtcbiAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICd0cmFuc3BhcmVudCdcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgY29sb3JTZWNvbmRhcnk6IHtcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnNlY29uZGFyeS5tYWluLFxuICAgICAgJyY6aG92ZXInOiB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogKDAsIF9jb2xvck1hbmlwdWxhdG9yLmZhZGUpKHRoZW1lLnBhbGV0dGUuc2Vjb25kYXJ5Lm1haW4sIHRoZW1lLnBhbGV0dGUuYWN0aW9uLmhvdmVyT3BhY2l0eSksXG4gICAgICAgIC8vIFJlc2V0IG9uIHRvdWNoIGRldmljZXMsIGl0IGRvZXNuJ3QgYWRkIHNwZWNpZmljaXR5XG4gICAgICAgICdAbWVkaWEgKGhvdmVyOiBub25lKSc6IHtcbiAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICd0cmFuc3BhcmVudCdcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgZGlzYWJsZWQ6IHt9LFxuICAgIGxhYmVsOiB7XG4gICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgYWxpZ25JdGVtczogJ2luaGVyaXQnLFxuICAgICAganVzdGlmeUNvbnRlbnQ6ICdpbmhlcml0J1xuICAgIH1cbiAgfTtcbn07XG4vKipcbiAqIFJlZmVyIHRvIHRoZSBbSWNvbnNdKC9zdHlsZS9pY29ucykgc2VjdGlvbiBvZiB0aGUgZG9jdW1lbnRhdGlvblxuICogcmVnYXJkaW5nIHRoZSBhdmFpbGFibGUgaWNvbiBvcHRpb25zLlxuICovXG5cblxuZXhwb3J0cy5zdHlsZXMgPSBzdHlsZXM7XG5cbmZ1bmN0aW9uIEljb25CdXR0b24ocHJvcHMpIHtcbiAgdmFyIF9jbGFzc05hbWVzO1xuXG4gIHZhciBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBjb2xvciA9IHByb3BzLmNvbG9yLFxuICAgICAgZGlzYWJsZWQgPSBwcm9wcy5kaXNhYmxlZCxcbiAgICAgIG90aGVyID0gKDAsIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIuZGVmYXVsdCkocHJvcHMsIFtcImNoaWxkcmVuXCIsIFwiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcImNvbG9yXCIsIFwiZGlzYWJsZWRcIl0pO1xuICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfQnV0dG9uQmFzZS5kZWZhdWx0LCAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHtcbiAgICBjbGFzc05hbWU6ICgwLCBfY2xhc3NuYW1lcy5kZWZhdWx0KShjbGFzc2VzLnJvb3QsIChfY2xhc3NOYW1lcyA9IHt9LCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lcywgY2xhc3Nlc1tcImNvbG9yXCIuY29uY2F0KCgwLCBfaGVscGVycy5jYXBpdGFsaXplKShjb2xvcikpXSwgY29sb3IgIT09ICdkZWZhdWx0JyksICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKF9jbGFzc05hbWVzLCBjbGFzc2VzLmRpc2FibGVkLCBkaXNhYmxlZCksIF9jbGFzc05hbWVzKSwgY2xhc3NOYW1lKSxcbiAgICBjZW50ZXJSaXBwbGU6IHRydWUsXG4gICAgZm9jdXNSaXBwbGU6IHRydWUsXG4gICAgZGlzYWJsZWQ6IGRpc2FibGVkXG4gIH0sIG90aGVyKSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcInNwYW5cIiwge1xuICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5sYWJlbFxuICB9LCBjaGlsZHJlbikpO1xufVxuXG5JY29uQnV0dG9uLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqXG4gICAqIFRoZSBpY29uIGVsZW1lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogX3Byb3BUeXBlcy5kZWZhdWx0Lm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzLWFwaSkgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29sb3Igb2YgdGhlIGNvbXBvbmVudC4gSXQgc3VwcG9ydHMgdGhvc2UgdGhlbWUgY29sb3JzIHRoYXQgbWFrZSBzZW5zZSBmb3IgdGhpcyBjb21wb25lbnQuXG4gICAqL1xuICBjb2xvcjogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mKFsnZGVmYXVsdCcsICdpbmhlcml0JywgJ3ByaW1hcnknLCAnc2Vjb25kYXJ5J10pLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBidXR0b24gd2lsbCBiZSBkaXNhYmxlZC5cbiAgICovXG4gIGRpc2FibGVkOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgcmlwcGxlIHdpbGwgYmUgZGlzYWJsZWQuXG4gICAqL1xuICBkaXNhYmxlUmlwcGxlOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbFxufSA6IHt9O1xuSWNvbkJ1dHRvbi5kZWZhdWx0UHJvcHMgPSB7XG4gIGNvbG9yOiAnZGVmYXVsdCcsXG4gIGRpc2FibGVkOiBmYWxzZVxufTtcblxudmFyIF9kZWZhdWx0ID0gKDAsIF93aXRoU3R5bGVzLmRlZmF1bHQpKHN0eWxlcywge1xuICBuYW1lOiAnTXVpSWNvbkJ1dHRvbidcbn0pKEljb25CdXR0b24pO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxuZnVuY3Rpb24gY3JlYXRlUmlwcGxlSGFuZGxlcihpbnN0YW5jZSwgZXZlbnROYW1lLCBhY3Rpb24sIGNiKSB7XG4gIHJldHVybiBmdW5jdGlvbiBoYW5kbGVFdmVudChldmVudCkge1xuICAgIGlmIChjYikge1xuICAgICAgY2IuY2FsbChpbnN0YW5jZSwgZXZlbnQpO1xuICAgIH1cblxuICAgIGlmIChldmVudC5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKGluc3RhbmNlLnJpcHBsZSkge1xuICAgICAgaW5zdGFuY2UucmlwcGxlW2FjdGlvbl0oZXZlbnQpO1xuICAgIH1cblxuICAgIGlmIChpbnN0YW5jZS5wcm9wcyAmJiB0eXBlb2YgaW5zdGFuY2UucHJvcHNbXCJvblwiLmNvbmNhdChldmVudE5hbWUpXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgaW5zdGFuY2UucHJvcHNbXCJvblwiLmNvbmNhdChldmVudE5hbWUpXShldmVudCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG4gIH07XG59XG5cbnZhciBfZGVmYXVsdCA9IGNyZWF0ZVJpcHBsZUhhbmRsZXI7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmNsYXNzTmFtZXNTaGFwZSA9IGV4cG9ydHMudGltZW91dHNTaGFwZSA9IHVuZGVmaW5lZDtcbmV4cG9ydHMudHJhbnNpdGlvblRpbWVvdXQgPSB0cmFuc2l0aW9uVGltZW91dDtcblxudmFyIF9wcm9wVHlwZXMgPSByZXF1aXJlKCdwcm9wLXR5cGVzJyk7XG5cbnZhciBfcHJvcFR5cGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb3BUeXBlcyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIHRyYW5zaXRpb25UaW1lb3V0KHRyYW5zaXRpb25UeXBlKSB7XG4gIHZhciB0aW1lb3V0UHJvcE5hbWUgPSAndHJhbnNpdGlvbicgKyB0cmFuc2l0aW9uVHlwZSArICdUaW1lb3V0JztcbiAgdmFyIGVuYWJsZWRQcm9wTmFtZSA9ICd0cmFuc2l0aW9uJyArIHRyYW5zaXRpb25UeXBlO1xuXG4gIHJldHVybiBmdW5jdGlvbiAocHJvcHMpIHtcbiAgICAvLyBJZiB0aGUgdHJhbnNpdGlvbiBpcyBlbmFibGVkXG4gICAgaWYgKHByb3BzW2VuYWJsZWRQcm9wTmFtZV0pIHtcbiAgICAgIC8vIElmIG5vIHRpbWVvdXQgZHVyYXRpb24gaXMgcHJvdmlkZWRcbiAgICAgIGlmIChwcm9wc1t0aW1lb3V0UHJvcE5hbWVdID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBFcnJvcih0aW1lb3V0UHJvcE5hbWUgKyAnIHdhc25cXCd0IHN1cHBsaWVkIHRvIENTU1RyYW5zaXRpb25Hcm91cDogJyArICd0aGlzIGNhbiBjYXVzZSB1bnJlbGlhYmxlIGFuaW1hdGlvbnMgYW5kIHdvblxcJ3QgYmUgc3VwcG9ydGVkIGluICcgKyAnYSBmdXR1cmUgdmVyc2lvbiBvZiBSZWFjdC4gU2VlICcgKyAnaHR0cHM6Ly9mYi5tZS9yZWFjdC1hbmltYXRpb24tdHJhbnNpdGlvbi1ncm91cC10aW1lb3V0IGZvciBtb3JlICcgKyAnaW5mb3JtYXRpb24uJyk7XG5cbiAgICAgICAgLy8gSWYgdGhlIGR1cmF0aW9uIGlzbid0IGEgbnVtYmVyXG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBwcm9wc1t0aW1lb3V0UHJvcE5hbWVdICE9PSAnbnVtYmVyJykge1xuICAgICAgICByZXR1cm4gbmV3IEVycm9yKHRpbWVvdXRQcm9wTmFtZSArICcgbXVzdCBiZSBhIG51bWJlciAoaW4gbWlsbGlzZWNvbmRzKScpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9O1xufVxuXG52YXIgdGltZW91dHNTaGFwZSA9IGV4cG9ydHMudGltZW91dHNTaGFwZSA9IF9wcm9wVHlwZXMyLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzMi5kZWZhdWx0Lm51bWJlciwgX3Byb3BUeXBlczIuZGVmYXVsdC5zaGFwZSh7XG4gIGVudGVyOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm51bWJlcixcbiAgZXhpdDogX3Byb3BUeXBlczIuZGVmYXVsdC5udW1iZXJcbn0pLmlzUmVxdWlyZWRdKTtcblxudmFyIGNsYXNzTmFtZXNTaGFwZSA9IGV4cG9ydHMuY2xhc3NOYW1lc1NoYXBlID0gX3Byb3BUeXBlczIuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLCBfcHJvcFR5cGVzMi5kZWZhdWx0LnNoYXBlKHtcbiAgZW50ZXI6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICBleGl0OiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZyxcbiAgYWN0aXZlOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZ1xufSksIF9wcm9wVHlwZXMyLmRlZmF1bHQuc2hhcGUoe1xuICBlbnRlcjogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsXG4gIGVudGVyRG9uZTogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsXG4gIGVudGVyQWN0aXZlOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZyxcbiAgZXhpdDogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsXG4gIGV4aXREb25lOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZyxcbiAgZXhpdEFjdGl2ZTogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmdcbn0pXSk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfZXh0ZW5kczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vZXh0ZW5kc1wiKSk7XG5cbnZhciBfZGVmaW5lUHJvcGVydHkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2RlZmluZVByb3BlcnR5XCIpKTtcblxudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIikpO1xuXG52YXIgX2NsYXNzQ2FsbENoZWNrMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9jbGFzc0NhbGxDaGVja1wiKSk7XG5cbnZhciBfY3JlYXRlQ2xhc3MyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2NyZWF0ZUNsYXNzXCIpKTtcblxudmFyIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuXCIpKTtcblxudmFyIF9pbmhlcml0czIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vaW5oZXJpdHNcIikpO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xuXG52YXIgX2NsYXNzbmFtZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJjbGFzc25hbWVzXCIpKTtcblxudmFyIF9UcmFuc2l0aW9uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3QtdHJhbnNpdGlvbi1ncm91cC9UcmFuc2l0aW9uXCIpKTtcblxuLyoqXG4gKiBAaWdub3JlIC0gaW50ZXJuYWwgY29tcG9uZW50LlxuICovXG52YXIgUmlwcGxlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gICgwLCBfaW5oZXJpdHMyLmRlZmF1bHQpKFJpcHBsZSwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gUmlwcGxlKCkge1xuICAgIHZhciBfcmVmO1xuXG4gICAgdmFyIF90ZW1wLCBfdGhpcztcblxuICAgICgwLCBfY2xhc3NDYWxsQ2hlY2syLmRlZmF1bHQpKHRoaXMsIFJpcHBsZSk7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuICgwLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIuZGVmYXVsdCkoX3RoaXMsIChfdGVtcCA9IF90aGlzID0gKDAsIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMi5kZWZhdWx0KSh0aGlzLCAoX3JlZiA9IFJpcHBsZS5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKFJpcHBsZSkpLmNhbGwuYXBwbHkoX3JlZiwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIHZpc2libGU6IGZhbHNlLFxuICAgICAgbGVhdmluZzogZmFsc2VcbiAgICB9LCBfdGhpcy5oYW5kbGVFbnRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgdmlzaWJsZTogdHJ1ZVxuICAgICAgfSk7XG4gICAgfSwgX3RoaXMuaGFuZGxlRXhpdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgbGVhdmluZzogdHJ1ZVxuICAgICAgfSk7XG4gICAgfSwgX3RlbXApKTtcbiAgfVxuXG4gICgwLCBfY3JlYXRlQ2xhc3MyLmRlZmF1bHQpKFJpcHBsZSwgW3tcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfY2xhc3NOYW1lcywgX2NsYXNzTmFtZXMyO1xuXG4gICAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBjbGFzc2VzID0gX3Byb3BzLmNsYXNzZXMsXG4gICAgICAgICAgY2xhc3NOYW1lUHJvcCA9IF9wcm9wcy5jbGFzc05hbWUsXG4gICAgICAgICAgcHVsc2F0ZSA9IF9wcm9wcy5wdWxzYXRlLFxuICAgICAgICAgIHJpcHBsZVggPSBfcHJvcHMucmlwcGxlWCxcbiAgICAgICAgICByaXBwbGVZID0gX3Byb3BzLnJpcHBsZVksXG4gICAgICAgICAgcmlwcGxlU2l6ZSA9IF9wcm9wcy5yaXBwbGVTaXplLFxuICAgICAgICAgIG90aGVyID0gKDAsIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIuZGVmYXVsdCkoX3Byb3BzLCBbXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwicHVsc2F0ZVwiLCBcInJpcHBsZVhcIiwgXCJyaXBwbGVZXCIsIFwicmlwcGxlU2l6ZVwiXSk7XG4gICAgICB2YXIgX3N0YXRlID0gdGhpcy5zdGF0ZSxcbiAgICAgICAgICB2aXNpYmxlID0gX3N0YXRlLnZpc2libGUsXG4gICAgICAgICAgbGVhdmluZyA9IF9zdGF0ZS5sZWF2aW5nO1xuICAgICAgdmFyIHJpcHBsZUNsYXNzTmFtZSA9ICgwLCBfY2xhc3NuYW1lcy5kZWZhdWx0KShjbGFzc2VzLnJpcHBsZSwgKF9jbGFzc05hbWVzID0ge30sICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKF9jbGFzc05hbWVzLCBjbGFzc2VzLnJpcHBsZVZpc2libGUsIHZpc2libGUpLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lcywgY2xhc3Nlcy5yaXBwbGVQdWxzYXRlLCBwdWxzYXRlKSwgX2NsYXNzTmFtZXMpLCBjbGFzc05hbWVQcm9wKTtcbiAgICAgIHZhciByaXBwbGVTdHlsZXMgPSB7XG4gICAgICAgIHdpZHRoOiByaXBwbGVTaXplLFxuICAgICAgICBoZWlnaHQ6IHJpcHBsZVNpemUsXG4gICAgICAgIHRvcDogLShyaXBwbGVTaXplIC8gMikgKyByaXBwbGVZLFxuICAgICAgICBsZWZ0OiAtKHJpcHBsZVNpemUgLyAyKSArIHJpcHBsZVhcbiAgICAgIH07XG4gICAgICB2YXIgY2hpbGRDbGFzc05hbWUgPSAoMCwgX2NsYXNzbmFtZXMuZGVmYXVsdCkoY2xhc3Nlcy5jaGlsZCwgKF9jbGFzc05hbWVzMiA9IHt9LCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lczIsIGNsYXNzZXMuY2hpbGRMZWF2aW5nLCBsZWF2aW5nKSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2NsYXNzTmFtZXMyLCBjbGFzc2VzLmNoaWxkUHVsc2F0ZSwgcHVsc2F0ZSksIF9jbGFzc05hbWVzMikpO1xuICAgICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX1RyYW5zaXRpb24uZGVmYXVsdCwgKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7XG4gICAgICAgIG9uRW50ZXI6IHRoaXMuaGFuZGxlRW50ZXIsXG4gICAgICAgIG9uRXhpdDogdGhpcy5oYW5kbGVFeGl0XG4gICAgICB9LCBvdGhlciksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICAgICAgY2xhc3NOYW1lOiByaXBwbGVDbGFzc05hbWUsXG4gICAgICAgIHN0eWxlOiByaXBwbGVTdHlsZXNcbiAgICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBjaGlsZENsYXNzTmFtZVxuICAgICAgfSkpKTtcbiAgICB9XG4gIH1dKTtcbiAgcmV0dXJuIFJpcHBsZTtcbn0oX3JlYWN0LmRlZmF1bHQuQ29tcG9uZW50KTtcblxuUmlwcGxlLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzLWFwaSkgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSByaXBwbGUgcHVsc2F0ZXMsIHR5cGljYWxseSBpbmRpY2F0aW5nIHRoZSBrZXlib2FyZCBmb2N1cyBzdGF0ZSBvZiBhbiBlbGVtZW50LlxuICAgKi9cbiAgcHVsc2F0ZTogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIERpYW1ldGVyIG9mIHRoZSByaXBwbGUuXG4gICAqL1xuICByaXBwbGVTaXplOiBfcHJvcFR5cGVzLmRlZmF1bHQubnVtYmVyLFxuXG4gIC8qKlxuICAgKiBIb3Jpem9udGFsIHBvc2l0aW9uIG9mIHRoZSByaXBwbGUgY2VudGVyLlxuICAgKi9cbiAgcmlwcGxlWDogX3Byb3BUeXBlcy5kZWZhdWx0Lm51bWJlcixcblxuICAvKipcbiAgICogVmVydGljYWwgcG9zaXRpb24gb2YgdGhlIHJpcHBsZSBjZW50ZXIuXG4gICAqL1xuICByaXBwbGVZOiBfcHJvcFR5cGVzLmRlZmF1bHQubnVtYmVyXG59IDoge307XG5SaXBwbGUuZGVmYXVsdFByb3BzID0ge1xuICBwdWxzYXRlOiBmYWxzZVxufTtcbnZhciBfZGVmYXVsdCA9IFJpcHBsZTtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZ2V0Q2hpbGRNYXBwaW5nID0gZ2V0Q2hpbGRNYXBwaW5nO1xuZXhwb3J0cy5tZXJnZUNoaWxkTWFwcGluZ3MgPSBtZXJnZUNoaWxkTWFwcGluZ3M7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG4vKipcbiAqIEdpdmVuIGB0aGlzLnByb3BzLmNoaWxkcmVuYCwgcmV0dXJuIGFuIG9iamVjdCBtYXBwaW5nIGtleSB0byBjaGlsZC5cbiAqXG4gKiBAcGFyYW0geyp9IGNoaWxkcmVuIGB0aGlzLnByb3BzLmNoaWxkcmVuYFxuICogQHJldHVybiB7b2JqZWN0fSBNYXBwaW5nIG9mIGtleSB0byBjaGlsZFxuICovXG5mdW5jdGlvbiBnZXRDaGlsZE1hcHBpbmcoY2hpbGRyZW4sIG1hcEZuKSB7XG4gIHZhciBtYXBwZXIgPSBmdW5jdGlvbiBtYXBwZXIoY2hpbGQpIHtcbiAgICByZXR1cm4gbWFwRm4gJiYgKDAsIF9yZWFjdC5pc1ZhbGlkRWxlbWVudCkoY2hpbGQpID8gbWFwRm4oY2hpbGQpIDogY2hpbGQ7XG4gIH07XG5cbiAgdmFyIHJlc3VsdCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIGlmIChjaGlsZHJlbikgX3JlYWN0LkNoaWxkcmVuLm1hcChjaGlsZHJlbiwgZnVuY3Rpb24gKGMpIHtcbiAgICByZXR1cm4gYztcbiAgfSkuZm9yRWFjaChmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAvLyBydW4gdGhlIG1hcCBmdW5jdGlvbiBoZXJlIGluc3RlYWQgc28gdGhhdCB0aGUga2V5IGlzIHRoZSBjb21wdXRlZCBvbmVcbiAgICByZXN1bHRbY2hpbGQua2V5XSA9IG1hcHBlcihjaGlsZCk7XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIFdoZW4geW91J3JlIGFkZGluZyBvciByZW1vdmluZyBjaGlsZHJlbiBzb21lIG1heSBiZSBhZGRlZCBvciByZW1vdmVkIGluIHRoZVxuICogc2FtZSByZW5kZXIgcGFzcy4gV2Ugd2FudCB0byBzaG93ICpib3RoKiBzaW5jZSB3ZSB3YW50IHRvIHNpbXVsdGFuZW91c2x5XG4gKiBhbmltYXRlIGVsZW1lbnRzIGluIGFuZCBvdXQuIFRoaXMgZnVuY3Rpb24gdGFrZXMgYSBwcmV2aW91cyBzZXQgb2Yga2V5c1xuICogYW5kIGEgbmV3IHNldCBvZiBrZXlzIGFuZCBtZXJnZXMgdGhlbSB3aXRoIGl0cyBiZXN0IGd1ZXNzIG9mIHRoZSBjb3JyZWN0XG4gKiBvcmRlcmluZy4gSW4gdGhlIGZ1dHVyZSB3ZSBtYXkgZXhwb3NlIHNvbWUgb2YgdGhlIHV0aWxpdGllcyBpblxuICogUmVhY3RNdWx0aUNoaWxkIHRvIG1ha2UgdGhpcyBlYXN5LCBidXQgZm9yIG5vdyBSZWFjdCBpdHNlbGYgZG9lcyBub3RcbiAqIGRpcmVjdGx5IGhhdmUgdGhpcyBjb25jZXB0IG9mIHRoZSB1bmlvbiBvZiBwcmV2Q2hpbGRyZW4gYW5kIG5leHRDaGlsZHJlblxuICogc28gd2UgaW1wbGVtZW50IGl0IGhlcmUuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IHByZXYgcHJldiBjaGlsZHJlbiBhcyByZXR1cm5lZCBmcm9tXG4gKiBgUmVhY3RUcmFuc2l0aW9uQ2hpbGRNYXBwaW5nLmdldENoaWxkTWFwcGluZygpYC5cbiAqIEBwYXJhbSB7b2JqZWN0fSBuZXh0IG5leHQgY2hpbGRyZW4gYXMgcmV0dXJuZWQgZnJvbVxuICogYFJlYWN0VHJhbnNpdGlvbkNoaWxkTWFwcGluZy5nZXRDaGlsZE1hcHBpbmcoKWAuXG4gKiBAcmV0dXJuIHtvYmplY3R9IGEga2V5IHNldCB0aGF0IGNvbnRhaW5zIGFsbCBrZXlzIGluIGBwcmV2YCBhbmQgYWxsIGtleXNcbiAqIGluIGBuZXh0YCBpbiBhIHJlYXNvbmFibGUgb3JkZXIuXG4gKi9cbmZ1bmN0aW9uIG1lcmdlQ2hpbGRNYXBwaW5ncyhwcmV2LCBuZXh0KSB7XG4gIHByZXYgPSBwcmV2IHx8IHt9O1xuICBuZXh0ID0gbmV4dCB8fCB7fTtcblxuICBmdW5jdGlvbiBnZXRWYWx1ZUZvcktleShrZXkpIHtcbiAgICByZXR1cm4ga2V5IGluIG5leHQgPyBuZXh0W2tleV0gOiBwcmV2W2tleV07XG4gIH1cblxuICAvLyBGb3IgZWFjaCBrZXkgb2YgYG5leHRgLCB0aGUgbGlzdCBvZiBrZXlzIHRvIGluc2VydCBiZWZvcmUgdGhhdCBrZXkgaW5cbiAgLy8gdGhlIGNvbWJpbmVkIGxpc3RcbiAgdmFyIG5leHRLZXlzUGVuZGluZyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbiAgdmFyIHBlbmRpbmdLZXlzID0gW107XG4gIGZvciAodmFyIHByZXZLZXkgaW4gcHJldikge1xuICAgIGlmIChwcmV2S2V5IGluIG5leHQpIHtcbiAgICAgIGlmIChwZW5kaW5nS2V5cy5sZW5ndGgpIHtcbiAgICAgICAgbmV4dEtleXNQZW5kaW5nW3ByZXZLZXldID0gcGVuZGluZ0tleXM7XG4gICAgICAgIHBlbmRpbmdLZXlzID0gW107XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHBlbmRpbmdLZXlzLnB1c2gocHJldktleSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGkgPSB2b2lkIDA7XG4gIHZhciBjaGlsZE1hcHBpbmcgPSB7fTtcbiAgZm9yICh2YXIgbmV4dEtleSBpbiBuZXh0KSB7XG4gICAgaWYgKG5leHRLZXlzUGVuZGluZ1tuZXh0S2V5XSkge1xuICAgICAgZm9yIChpID0gMDsgaSA8IG5leHRLZXlzUGVuZGluZ1tuZXh0S2V5XS5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgcGVuZGluZ05leHRLZXkgPSBuZXh0S2V5c1BlbmRpbmdbbmV4dEtleV1baV07XG4gICAgICAgIGNoaWxkTWFwcGluZ1tuZXh0S2V5c1BlbmRpbmdbbmV4dEtleV1baV1dID0gZ2V0VmFsdWVGb3JLZXkocGVuZGluZ05leHRLZXkpO1xuICAgICAgfVxuICAgIH1cbiAgICBjaGlsZE1hcHBpbmdbbmV4dEtleV0gPSBnZXRWYWx1ZUZvcktleShuZXh0S2V5KTtcbiAgfVxuXG4gIC8vIEZpbmFsbHksIGFkZCB0aGUga2V5cyB3aGljaCBkaWRuJ3QgYXBwZWFyIGJlZm9yZSBhbnkga2V5IGluIGBuZXh0YFxuICBmb3IgKGkgPSAwOyBpIDwgcGVuZGluZ0tleXMubGVuZ3RoOyBpKyspIHtcbiAgICBjaGlsZE1hcHBpbmdbcGVuZGluZ0tleXNbaV1dID0gZ2V0VmFsdWVGb3JLZXkocGVuZGluZ0tleXNbaV0pO1xuICB9XG5cbiAgcmV0dXJuIGNoaWxkTWFwcGluZztcbn0iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbnZhciBfcHJvcFR5cGVzID0gcmVxdWlyZSgncHJvcC10eXBlcycpO1xuXG52YXIgX3Byb3BUeXBlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMpO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfQ2hpbGRNYXBwaW5nID0gcmVxdWlyZSgnLi91dGlscy9DaGlsZE1hcHBpbmcnKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9iaiwga2V5cykgeyB2YXIgdGFyZ2V0ID0ge307IGZvciAodmFyIGkgaW4gb2JqKSB7IGlmIChrZXlzLmluZGV4T2YoaSkgPj0gMCkgY29udGludWU7IGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgaSkpIGNvbnRpbnVlOyB0YXJnZXRbaV0gPSBvYmpbaV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciB2YWx1ZXMgPSBPYmplY3QudmFsdWVzIHx8IGZ1bmN0aW9uIChvYmopIHtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKG9iaikubWFwKGZ1bmN0aW9uIChrKSB7XG4gICAgcmV0dXJuIG9ialtrXTtcbiAgfSk7XG59O1xuXG52YXIgcHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogYDxUcmFuc2l0aW9uR3JvdXA+YCByZW5kZXJzIGEgYDxkaXY+YCBieSBkZWZhdWx0LiBZb3UgY2FuIGNoYW5nZSB0aGlzXG4gICAqIGJlaGF2aW9yIGJ5IHByb3ZpZGluZyBhIGBjb21wb25lbnRgIHByb3AuXG4gICAqIElmIHlvdSB1c2UgUmVhY3QgdjE2KyBhbmQgd291bGQgbGlrZSB0byBhdm9pZCBhIHdyYXBwaW5nIGA8ZGl2PmAgZWxlbWVudFxuICAgKiB5b3UgY2FuIHBhc3MgaW4gYGNvbXBvbmVudD17bnVsbH1gLiBUaGlzIGlzIHVzZWZ1bCBpZiB0aGUgd3JhcHBpbmcgZGl2XG4gICAqIGJvcmtzIHlvdXIgY3NzIHN0eWxlcy5cbiAgICovXG4gIGNvbXBvbmVudDogX3Byb3BUeXBlczIuZGVmYXVsdC5hbnksXG4gIC8qKlxuICAgKiBBIHNldCBvZiBgPFRyYW5zaXRpb24+YCBjb21wb25lbnRzLCB0aGF0IGFyZSB0b2dnbGVkIGBpbmAgYW5kIG91dCBhcyB0aGV5XG4gICAqIGxlYXZlLiB0aGUgYDxUcmFuc2l0aW9uR3JvdXA+YCB3aWxsIGluamVjdCBzcGVjaWZpYyB0cmFuc2l0aW9uIHByb3BzLCBzb1xuICAgKiByZW1lbWJlciB0byBzcHJlYWQgdGhlbSB0aHJvdWdoIGlmIHlvdSBhcmUgd3JhcHBpbmcgdGhlIGA8VHJhbnNpdGlvbj5gIGFzXG4gICAqIHdpdGggb3VyIGA8RmFkZT5gIGV4YW1wbGUuXG4gICAqL1xuICBjaGlsZHJlbjogX3Byb3BUeXBlczIuZGVmYXVsdC5ub2RlLFxuXG4gIC8qKlxuICAgKiBBIGNvbnZlbmllbmNlIHByb3AgdGhhdCBlbmFibGVzIG9yIGRpc2FibGVzIGFwcGVhciBhbmltYXRpb25zXG4gICAqIGZvciBhbGwgY2hpbGRyZW4uIE5vdGUgdGhhdCBzcGVjaWZ5aW5nIHRoaXMgd2lsbCBvdmVycmlkZSBhbnkgZGVmYXVsdHMgc2V0XG4gICAqIG9uIGluZGl2aWR1YWwgY2hpbGRyZW4gVHJhbnNpdGlvbnMuXG4gICAqL1xuICBhcHBlYXI6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcbiAgLyoqXG4gICAqIEEgY29udmVuaWVuY2UgcHJvcCB0aGF0IGVuYWJsZXMgb3IgZGlzYWJsZXMgZW50ZXIgYW5pbWF0aW9uc1xuICAgKiBmb3IgYWxsIGNoaWxkcmVuLiBOb3RlIHRoYXQgc3BlY2lmeWluZyB0aGlzIHdpbGwgb3ZlcnJpZGUgYW55IGRlZmF1bHRzIHNldFxuICAgKiBvbiBpbmRpdmlkdWFsIGNoaWxkcmVuIFRyYW5zaXRpb25zLlxuICAgKi9cbiAgZW50ZXI6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcbiAgLyoqXG4gICAgKiBBIGNvbnZlbmllbmNlIHByb3AgdGhhdCBlbmFibGVzIG9yIGRpc2FibGVzIGV4aXQgYW5pbWF0aW9uc1xuICAgICogZm9yIGFsbCBjaGlsZHJlbi4gTm90ZSB0aGF0IHNwZWNpZnlpbmcgdGhpcyB3aWxsIG92ZXJyaWRlIGFueSBkZWZhdWx0cyBzZXRcbiAgICAqIG9uIGluZGl2aWR1YWwgY2hpbGRyZW4gVHJhbnNpdGlvbnMuXG4gICAgKi9cbiAgZXhpdDogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBZb3UgbWF5IG5lZWQgdG8gYXBwbHkgcmVhY3RpdmUgdXBkYXRlcyB0byBhIGNoaWxkIGFzIGl0IGlzIGV4aXRpbmcuXG4gICAqIFRoaXMgaXMgZ2VuZXJhbGx5IGRvbmUgYnkgdXNpbmcgYGNsb25lRWxlbWVudGAgaG93ZXZlciBpbiB0aGUgY2FzZSBvZiBhbiBleGl0aW5nXG4gICAqIGNoaWxkIHRoZSBlbGVtZW50IGhhcyBhbHJlYWR5IGJlZW4gcmVtb3ZlZCBhbmQgbm90IGFjY2Vzc2libGUgdG8gdGhlIGNvbnN1bWVyLlxuICAgKlxuICAgKiBJZiB5b3UgZG8gbmVlZCB0byB1cGRhdGUgYSBjaGlsZCBhcyBpdCBsZWF2ZXMgeW91IGNhbiBwcm92aWRlIGEgYGNoaWxkRmFjdG9yeWBcbiAgICogdG8gd3JhcCBldmVyeSBjaGlsZCwgZXZlbiB0aGUgb25lcyB0aGF0IGFyZSBsZWF2aW5nLlxuICAgKlxuICAgKiBAdHlwZSBGdW5jdGlvbihjaGlsZDogUmVhY3RFbGVtZW50KSAtPiBSZWFjdEVsZW1lbnRcbiAgICovXG4gIGNoaWxkRmFjdG9yeTogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jXG59O1xuXG52YXIgZGVmYXVsdFByb3BzID0ge1xuICBjb21wb25lbnQ6ICdkaXYnLFxuICBjaGlsZEZhY3Rvcnk6IGZ1bmN0aW9uIGNoaWxkRmFjdG9yeShjaGlsZCkge1xuICAgIHJldHVybiBjaGlsZDtcbiAgfVxufTtcblxuLyoqXG4gKiBUaGUgYDxUcmFuc2l0aW9uR3JvdXA+YCBjb21wb25lbnQgbWFuYWdlcyBhIHNldCBvZiBgPFRyYW5zaXRpb24+YCBjb21wb25lbnRzXG4gKiBpbiBhIGxpc3QuIExpa2Ugd2l0aCB0aGUgYDxUcmFuc2l0aW9uPmAgY29tcG9uZW50LCBgPFRyYW5zaXRpb25Hcm91cD5gLCBpcyBhXG4gKiBzdGF0ZSBtYWNoaW5lIGZvciBtYW5hZ2luZyB0aGUgbW91bnRpbmcgYW5kIHVubW91bnRpbmcgb2YgY29tcG9uZW50cyBvdmVyXG4gKiB0aW1lLlxuICpcbiAqIENvbnNpZGVyIHRoZSBleGFtcGxlIGJlbG93IHVzaW5nIHRoZSBgRmFkZWAgQ1NTIHRyYW5zaXRpb24gZnJvbSBiZWZvcmUuXG4gKiBBcyBpdGVtcyBhcmUgcmVtb3ZlZCBvciBhZGRlZCB0byB0aGUgVG9kb0xpc3QgdGhlIGBpbmAgcHJvcCBpcyB0b2dnbGVkXG4gKiBhdXRvbWF0aWNhbGx5IGJ5IHRoZSBgPFRyYW5zaXRpb25Hcm91cD5gLiBZb3UgY2FuIHVzZSBfYW55XyBgPFRyYW5zaXRpb24+YFxuICogY29tcG9uZW50IGluIGEgYDxUcmFuc2l0aW9uR3JvdXA+YCwgbm90IGp1c3QgY3NzLlxuICpcbiAqICMjIEV4YW1wbGVcbiAqXG4gKiA8aWZyYW1lIHNyYz1cImh0dHBzOi8vY29kZXNhbmRib3guaW8vZW1iZWQvMDBycXlvMjZrbj9mb250c2l6ZT0xNFwiIHN0eWxlPVwid2lkdGg6MTAwJTsgaGVpZ2h0OjUwMHB4OyBib3JkZXI6MDsgYm9yZGVyLXJhZGl1czogNHB4OyBvdmVyZmxvdzpoaWRkZW47XCIgc2FuZGJveD1cImFsbG93LW1vZGFscyBhbGxvdy1mb3JtcyBhbGxvdy1wb3B1cHMgYWxsb3ctc2NyaXB0cyBhbGxvdy1zYW1lLW9yaWdpblwiPjwvaWZyYW1lPlxuICpcbiAqIE5vdGUgdGhhdCBgPFRyYW5zaXRpb25Hcm91cD5gICBkb2VzIG5vdCBkZWZpbmUgYW55IGFuaW1hdGlvbiBiZWhhdmlvciFcbiAqIEV4YWN0bHkgX2hvd18gYSBsaXN0IGl0ZW0gYW5pbWF0ZXMgaXMgdXAgdG8gdGhlIGluZGl2aWR1YWwgYDxUcmFuc2l0aW9uPmBcbiAqIGNvbXBvbmVudHMuIFRoaXMgbWVhbnMgeW91IGNhbiBtaXggYW5kIG1hdGNoIGFuaW1hdGlvbnMgYWNyb3NzIGRpZmZlcmVudFxuICogbGlzdCBpdGVtcy5cbiAqL1xuXG52YXIgVHJhbnNpdGlvbkdyb3VwID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFRyYW5zaXRpb25Hcm91cCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gVHJhbnNpdGlvbkdyb3VwKHByb3BzLCBjb250ZXh0KSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFRyYW5zaXRpb25Hcm91cCk7XG5cbiAgICAvLyBJbml0aWFsIGNoaWxkcmVuIHNob3VsZCBhbGwgYmUgZW50ZXJpbmcsIGRlcGVuZGVudCBvbiBhcHBlYXJcbiAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmNhbGwodGhpcywgcHJvcHMsIGNvbnRleHQpKTtcblxuICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgY2hpbGRyZW46ICgwLCBfQ2hpbGRNYXBwaW5nLmdldENoaWxkTWFwcGluZykocHJvcHMuY2hpbGRyZW4sIGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICByZXR1cm4gKDAsIF9yZWFjdC5jbG9uZUVsZW1lbnQpKGNoaWxkLCB7XG4gICAgICAgICAgb25FeGl0ZWQ6IF90aGlzLmhhbmRsZUV4aXRlZC5iaW5kKF90aGlzLCBjaGlsZCksXG4gICAgICAgICAgaW46IHRydWUsXG4gICAgICAgICAgYXBwZWFyOiBfdGhpcy5nZXRQcm9wKGNoaWxkLCAnYXBwZWFyJyksXG4gICAgICAgICAgZW50ZXI6IF90aGlzLmdldFByb3AoY2hpbGQsICdlbnRlcicpLFxuICAgICAgICAgIGV4aXQ6IF90aGlzLmdldFByb3AoY2hpbGQsICdleGl0JylcbiAgICAgICAgfSk7XG4gICAgICB9KVxuICAgIH07XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgVHJhbnNpdGlvbkdyb3VwLnByb3RvdHlwZS5nZXRDaGlsZENvbnRleHQgPSBmdW5jdGlvbiBnZXRDaGlsZENvbnRleHQoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHRyYW5zaXRpb25Hcm91cDogeyBpc01vdW50aW5nOiAhdGhpcy5hcHBlYXJlZCB9XG4gICAgfTtcbiAgfTtcbiAgLy8gdXNlIGNoaWxkIGNvbmZpZyB1bmxlc3MgZXhwbGljdGx5IHNldCBieSB0aGUgR3JvdXBcblxuXG4gIFRyYW5zaXRpb25Hcm91cC5wcm90b3R5cGUuZ2V0UHJvcCA9IGZ1bmN0aW9uIGdldFByb3AoY2hpbGQsIHByb3ApIHtcbiAgICB2YXIgcHJvcHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IHRoaXMucHJvcHM7XG5cbiAgICByZXR1cm4gcHJvcHNbcHJvcF0gIT0gbnVsbCA/IHByb3BzW3Byb3BdIDogY2hpbGQucHJvcHNbcHJvcF07XG4gIH07XG5cbiAgVHJhbnNpdGlvbkdyb3VwLnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHRoaXMuYXBwZWFyZWQgPSB0cnVlO1xuICB9O1xuXG4gIFRyYW5zaXRpb25Hcm91cC5wcm90b3R5cGUuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICB2YXIgcHJldkNoaWxkTWFwcGluZyA9IHRoaXMuc3RhdGUuY2hpbGRyZW47XG4gICAgdmFyIG5leHRDaGlsZE1hcHBpbmcgPSAoMCwgX0NoaWxkTWFwcGluZy5nZXRDaGlsZE1hcHBpbmcpKG5leHRQcm9wcy5jaGlsZHJlbik7XG5cbiAgICB2YXIgY2hpbGRyZW4gPSAoMCwgX0NoaWxkTWFwcGluZy5tZXJnZUNoaWxkTWFwcGluZ3MpKHByZXZDaGlsZE1hcHBpbmcsIG5leHRDaGlsZE1hcHBpbmcpO1xuXG4gICAgT2JqZWN0LmtleXMoY2hpbGRyZW4pLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgdmFyIGNoaWxkID0gY2hpbGRyZW5ba2V5XTtcblxuICAgICAgaWYgKCEoMCwgX3JlYWN0LmlzVmFsaWRFbGVtZW50KShjaGlsZCkpIHJldHVybjtcblxuICAgICAgdmFyIGhhc1ByZXYgPSBrZXkgaW4gcHJldkNoaWxkTWFwcGluZztcbiAgICAgIHZhciBoYXNOZXh0ID0ga2V5IGluIG5leHRDaGlsZE1hcHBpbmc7XG5cbiAgICAgIHZhciBwcmV2Q2hpbGQgPSBwcmV2Q2hpbGRNYXBwaW5nW2tleV07XG4gICAgICB2YXIgaXNMZWF2aW5nID0gKDAsIF9yZWFjdC5pc1ZhbGlkRWxlbWVudCkocHJldkNoaWxkKSAmJiAhcHJldkNoaWxkLnByb3BzLmluO1xuXG4gICAgICAvLyBpdGVtIGlzIG5ldyAoZW50ZXJpbmcpXG4gICAgICBpZiAoaGFzTmV4dCAmJiAoIWhhc1ByZXYgfHwgaXNMZWF2aW5nKSkge1xuICAgICAgICAvLyBjb25zb2xlLmxvZygnZW50ZXJpbmcnLCBrZXkpXG4gICAgICAgIGNoaWxkcmVuW2tleV0gPSAoMCwgX3JlYWN0LmNsb25lRWxlbWVudCkoY2hpbGQsIHtcbiAgICAgICAgICBvbkV4aXRlZDogX3RoaXMyLmhhbmRsZUV4aXRlZC5iaW5kKF90aGlzMiwgY2hpbGQpLFxuICAgICAgICAgIGluOiB0cnVlLFxuICAgICAgICAgIGV4aXQ6IF90aGlzMi5nZXRQcm9wKGNoaWxkLCAnZXhpdCcsIG5leHRQcm9wcyksXG4gICAgICAgICAgZW50ZXI6IF90aGlzMi5nZXRQcm9wKGNoaWxkLCAnZW50ZXInLCBuZXh0UHJvcHMpXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgLy8gaXRlbSBpcyBvbGQgKGV4aXRpbmcpXG4gICAgICBlbHNlIGlmICghaGFzTmV4dCAmJiBoYXNQcmV2ICYmICFpc0xlYXZpbmcpIHtcbiAgICAgICAgICAvLyBjb25zb2xlLmxvZygnbGVhdmluZycsIGtleSlcbiAgICAgICAgICBjaGlsZHJlbltrZXldID0gKDAsIF9yZWFjdC5jbG9uZUVsZW1lbnQpKGNoaWxkLCB7IGluOiBmYWxzZSB9KTtcbiAgICAgICAgfVxuICAgICAgICAvLyBpdGVtIGhhc24ndCBjaGFuZ2VkIHRyYW5zaXRpb24gc3RhdGVzXG4gICAgICAgIC8vIGNvcHkgb3ZlciB0aGUgbGFzdCB0cmFuc2l0aW9uIHByb3BzO1xuICAgICAgICBlbHNlIGlmIChoYXNOZXh0ICYmIGhhc1ByZXYgJiYgKDAsIF9yZWFjdC5pc1ZhbGlkRWxlbWVudCkocHJldkNoaWxkKSkge1xuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ3VuY2hhbmdlZCcsIGtleSlcbiAgICAgICAgICAgIGNoaWxkcmVuW2tleV0gPSAoMCwgX3JlYWN0LmNsb25lRWxlbWVudCkoY2hpbGQsIHtcbiAgICAgICAgICAgICAgb25FeGl0ZWQ6IF90aGlzMi5oYW5kbGVFeGl0ZWQuYmluZChfdGhpczIsIGNoaWxkKSxcbiAgICAgICAgICAgICAgaW46IHByZXZDaGlsZC5wcm9wcy5pbixcbiAgICAgICAgICAgICAgZXhpdDogX3RoaXMyLmdldFByb3AoY2hpbGQsICdleGl0JywgbmV4dFByb3BzKSxcbiAgICAgICAgICAgICAgZW50ZXI6IF90aGlzMi5nZXRQcm9wKGNoaWxkLCAnZW50ZXInLCBuZXh0UHJvcHMpXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgfSk7XG5cbiAgICB0aGlzLnNldFN0YXRlKHsgY2hpbGRyZW46IGNoaWxkcmVuIH0pO1xuICB9O1xuXG4gIFRyYW5zaXRpb25Hcm91cC5wcm90b3R5cGUuaGFuZGxlRXhpdGVkID0gZnVuY3Rpb24gaGFuZGxlRXhpdGVkKGNoaWxkLCBub2RlKSB7XG4gICAgdmFyIGN1cnJlbnRDaGlsZE1hcHBpbmcgPSAoMCwgX0NoaWxkTWFwcGluZy5nZXRDaGlsZE1hcHBpbmcpKHRoaXMucHJvcHMuY2hpbGRyZW4pO1xuXG4gICAgaWYgKGNoaWxkLmtleSBpbiBjdXJyZW50Q2hpbGRNYXBwaW5nKSByZXR1cm47XG5cbiAgICBpZiAoY2hpbGQucHJvcHMub25FeGl0ZWQpIHtcbiAgICAgIGNoaWxkLnByb3BzLm9uRXhpdGVkKG5vZGUpO1xuICAgIH1cblxuICAgIHRoaXMuc2V0U3RhdGUoZnVuY3Rpb24gKHN0YXRlKSB7XG4gICAgICB2YXIgY2hpbGRyZW4gPSBfZXh0ZW5kcyh7fSwgc3RhdGUuY2hpbGRyZW4pO1xuXG4gICAgICBkZWxldGUgY2hpbGRyZW5bY2hpbGQua2V5XTtcbiAgICAgIHJldHVybiB7IGNoaWxkcmVuOiBjaGlsZHJlbiB9O1xuICAgIH0pO1xuICB9O1xuXG4gIFRyYW5zaXRpb25Hcm91cC5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBDb21wb25lbnQgPSBfcHJvcHMuY29tcG9uZW50LFxuICAgICAgICBjaGlsZEZhY3RvcnkgPSBfcHJvcHMuY2hpbGRGYWN0b3J5LFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcHJvcHMsIFsnY29tcG9uZW50JywgJ2NoaWxkRmFjdG9yeSddKTtcblxuICAgIHZhciBjaGlsZHJlbiA9IHZhbHVlcyh0aGlzLnN0YXRlLmNoaWxkcmVuKS5tYXAoY2hpbGRGYWN0b3J5KTtcblxuICAgIGRlbGV0ZSBwcm9wcy5hcHBlYXI7XG4gICAgZGVsZXRlIHByb3BzLmVudGVyO1xuICAgIGRlbGV0ZSBwcm9wcy5leGl0O1xuXG4gICAgaWYgKENvbXBvbmVudCA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGNoaWxkcmVuO1xuICAgIH1cbiAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICBDb21wb25lbnQsXG4gICAgICBwcm9wcyxcbiAgICAgIGNoaWxkcmVuXG4gICAgKTtcbiAgfTtcblxuICByZXR1cm4gVHJhbnNpdGlvbkdyb3VwO1xufShfcmVhY3QyLmRlZmF1bHQuQ29tcG9uZW50KTtcblxuVHJhbnNpdGlvbkdyb3VwLmNoaWxkQ29udGV4dFR5cGVzID0ge1xuICB0cmFuc2l0aW9uR3JvdXA6IF9wcm9wVHlwZXMyLmRlZmF1bHQub2JqZWN0LmlzUmVxdWlyZWRcbn07XG5cblxuVHJhbnNpdGlvbkdyb3VwLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHByb3BUeXBlcyA6IHt9O1xuVHJhbnNpdGlvbkdyb3VwLmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcblxuZXhwb3J0cy5kZWZhdWx0ID0gVHJhbnNpdGlvbkdyb3VwO1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107IiwiZnVuY3Rpb24gX25vbkl0ZXJhYmxlU3ByZWFkKCkge1xuICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIHNwcmVhZCBub24taXRlcmFibGUgaW5zdGFuY2VcIik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX25vbkl0ZXJhYmxlU3ByZWFkOyIsImZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXkoaXRlcikge1xuICBpZiAoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChpdGVyKSB8fCBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoaXRlcikgPT09IFwiW29iamVjdCBBcmd1bWVudHNdXCIpIHJldHVybiBBcnJheS5mcm9tKGl0ZXIpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9pdGVyYWJsZVRvQXJyYXk7IiwiZnVuY3Rpb24gX2FycmF5V2l0aG91dEhvbGVzKGFycikge1xuICBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkoYXJyLmxlbmd0aCk7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcbiAgICAgIGFycjJbaV0gPSBhcnJbaV07XG4gICAgfVxuXG4gICAgcmV0dXJuIGFycjI7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfYXJyYXlXaXRob3V0SG9sZXM7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLnN0eWxlcyA9IGV4cG9ydHMuREVMQVlfUklQUExFID0gdm9pZCAwO1xuXG52YXIgX2V4dGVuZHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2V4dGVuZHNcIikpO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiKSk7XG5cbnZhciBfdG9Db25zdW1hYmxlQXJyYXkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL3RvQ29uc3VtYWJsZUFycmF5XCIpKTtcblxudmFyIF9jbGFzc0NhbGxDaGVjazIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vY2xhc3NDYWxsQ2hlY2tcIikpO1xuXG52YXIgX2NyZWF0ZUNsYXNzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9jcmVhdGVDbGFzc1wiKSk7XG5cbnZhciBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vcG9zc2libGVDb25zdHJ1Y3RvclJldHVyblwiKSk7XG5cbnZhciBfaW5oZXJpdHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2luaGVyaXRzXCIpKTtcblxudmFyIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2Fzc2VydFRoaXNJbml0aWFsaXplZFwiKSk7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbnZhciBfcmVhY3REb20gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdC1kb21cIikpO1xuXG52YXIgX1RyYW5zaXRpb25Hcm91cCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0LXRyYW5zaXRpb24tZ3JvdXAvVHJhbnNpdGlvbkdyb3VwXCIpKTtcblxudmFyIF9jbGFzc25hbWVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY2xhc3NuYW1lc1wiKSk7XG5cbnZhciBfd2l0aFN0eWxlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3N0eWxlcy93aXRoU3R5bGVzXCIpKTtcblxudmFyIF9SaXBwbGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL1JpcHBsZVwiKSk7XG5cbnZhciBEVVJBVElPTiA9IDU1MDtcbnZhciBERUxBWV9SSVBQTEUgPSA4MDtcbmV4cG9ydHMuREVMQVlfUklQUExFID0gREVMQVlfUklQUExFO1xuXG52YXIgc3R5bGVzID0gZnVuY3Rpb24gc3R5bGVzKHRoZW1lKSB7XG4gIHJldHVybiB7XG4gICAgcm9vdDoge1xuICAgICAgZGlzcGxheTogJ2Jsb2NrJyxcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICAgICAgYm9yZGVyUmFkaXVzOiAnaW5oZXJpdCcsXG4gICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICBsZWZ0OiAwLFxuICAgICAgdG9wOiAwLFxuICAgICAgcG9pbnRlckV2ZW50czogJ25vbmUnLFxuICAgICAgekluZGV4OiAwXG4gICAgfSxcbiAgICByaXBwbGU6IHtcbiAgICAgIHdpZHRoOiA1MCxcbiAgICAgIGhlaWdodDogNTAsXG4gICAgICBsZWZ0OiAwLFxuICAgICAgdG9wOiAwLFxuICAgICAgb3BhY2l0eTogMCxcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnXG4gICAgfSxcbiAgICByaXBwbGVWaXNpYmxlOiB7XG4gICAgICBvcGFjaXR5OiAwLjMsXG4gICAgICB0cmFuc2Zvcm06ICdzY2FsZSgxKScsXG4gICAgICBhbmltYXRpb246IFwibXVpLXJpcHBsZS1lbnRlciBcIi5jb25jYXQoRFVSQVRJT04sIFwibXMgXCIpLmNvbmNhdCh0aGVtZS50cmFuc2l0aW9ucy5lYXNpbmcuZWFzZUluT3V0KVxuICAgIH0sXG4gICAgcmlwcGxlUHVsc2F0ZToge1xuICAgICAgYW5pbWF0aW9uRHVyYXRpb246IFwiXCIuY29uY2F0KHRoZW1lLnRyYW5zaXRpb25zLmR1cmF0aW9uLnNob3J0ZXIsIFwibXNcIilcbiAgICB9LFxuICAgIGNoaWxkOiB7XG4gICAgICBvcGFjaXR5OiAxLFxuICAgICAgZGlzcGxheTogJ2Jsb2NrJyxcbiAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICAgIGJvcmRlclJhZGl1czogJzUwJScsXG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6ICdjdXJyZW50Q29sb3InXG4gICAgfSxcbiAgICBjaGlsZExlYXZpbmc6IHtcbiAgICAgIG9wYWNpdHk6IDAsXG4gICAgICBhbmltYXRpb246IFwibXVpLXJpcHBsZS1leGl0IFwiLmNvbmNhdChEVVJBVElPTiwgXCJtcyBcIikuY29uY2F0KHRoZW1lLnRyYW5zaXRpb25zLmVhc2luZy5lYXNlSW5PdXQpXG4gICAgfSxcbiAgICBjaGlsZFB1bHNhdGU6IHtcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgbGVmdDogMCxcbiAgICAgIHRvcDogMCxcbiAgICAgIGFuaW1hdGlvbjogXCJtdWktcmlwcGxlLXB1bHNhdGUgMjUwMG1zIFwiLmNvbmNhdCh0aGVtZS50cmFuc2l0aW9ucy5lYXNpbmcuZWFzZUluT3V0LCBcIiAyMDBtcyBpbmZpbml0ZVwiKVxuICAgIH0sXG4gICAgJ0BrZXlmcmFtZXMgbXVpLXJpcHBsZS1lbnRlcic6IHtcbiAgICAgICcwJSc6IHtcbiAgICAgICAgdHJhbnNmb3JtOiAnc2NhbGUoMCknLFxuICAgICAgICBvcGFjaXR5OiAwLjFcbiAgICAgIH0sXG4gICAgICAnMTAwJSc6IHtcbiAgICAgICAgdHJhbnNmb3JtOiAnc2NhbGUoMSknLFxuICAgICAgICBvcGFjaXR5OiAwLjNcbiAgICAgIH1cbiAgICB9LFxuICAgICdAa2V5ZnJhbWVzIG11aS1yaXBwbGUtZXhpdCc6IHtcbiAgICAgICcwJSc6IHtcbiAgICAgICAgb3BhY2l0eTogMVxuICAgICAgfSxcbiAgICAgICcxMDAlJzoge1xuICAgICAgICBvcGFjaXR5OiAwXG4gICAgICB9XG4gICAgfSxcbiAgICAnQGtleWZyYW1lcyBtdWktcmlwcGxlLXB1bHNhdGUnOiB7XG4gICAgICAnMCUnOiB7XG4gICAgICAgIHRyYW5zZm9ybTogJ3NjYWxlKDEpJ1xuICAgICAgfSxcbiAgICAgICc1MCUnOiB7XG4gICAgICAgIHRyYW5zZm9ybTogJ3NjYWxlKDAuOTIpJ1xuICAgICAgfSxcbiAgICAgICcxMDAlJzoge1xuICAgICAgICB0cmFuc2Zvcm06ICdzY2FsZSgxKSdcbiAgICAgIH1cbiAgICB9XG4gIH07XG59O1xuXG5leHBvcnRzLnN0eWxlcyA9IHN0eWxlcztcblxudmFyIFRvdWNoUmlwcGxlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkUHVyZUNvbXBvbmVudCkge1xuICAoMCwgX2luaGVyaXRzMi5kZWZhdWx0KShUb3VjaFJpcHBsZSwgX1JlYWN0JFB1cmVDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFRvdWNoUmlwcGxlKCkge1xuICAgIHZhciBfcmVmO1xuXG4gICAgdmFyIF90ZW1wLCBfdGhpcztcblxuICAgICgwLCBfY2xhc3NDYWxsQ2hlY2syLmRlZmF1bHQpKHRoaXMsIFRvdWNoUmlwcGxlKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gKDAsIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMi5kZWZhdWx0KShfdGhpcywgKF90ZW1wID0gX3RoaXMgPSAoMCwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yLmRlZmF1bHQpKHRoaXMsIChfcmVmID0gVG91Y2hSaXBwbGUuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihUb3VjaFJpcHBsZSkpLmNhbGwuYXBwbHkoX3JlZiwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIG5leHRLZXk6IDAsXG4gICAgICByaXBwbGVzOiBbXVxuICAgIH0sIF90aGlzLmlnbm9yaW5nTW91c2VEb3duID0gZmFsc2UsIF90aGlzLnN0YXJ0VGltZXIgPSBudWxsLCBfdGhpcy5zdGFydFRpbWVyQ29tbWl0ID0gbnVsbCwgX3RoaXMucHVsc2F0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzLnN0YXJ0KHt9LCB7XG4gICAgICAgIHB1bHNhdGU6IHRydWVcbiAgICAgIH0pO1xuICAgIH0sIF90aGlzLnN0YXJ0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGV2ZW50ID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgICAgIHZhciBjYiA9IGFyZ3VtZW50cy5sZW5ndGggPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkO1xuICAgICAgdmFyIF9vcHRpb25zJHB1bHNhdGUgPSBvcHRpb25zLnB1bHNhdGUsXG4gICAgICAgICAgcHVsc2F0ZSA9IF9vcHRpb25zJHB1bHNhdGUgPT09IHZvaWQgMCA/IGZhbHNlIDogX29wdGlvbnMkcHVsc2F0ZSxcbiAgICAgICAgICBfb3B0aW9ucyRjZW50ZXIgPSBvcHRpb25zLmNlbnRlcixcbiAgICAgICAgICBjZW50ZXIgPSBfb3B0aW9ucyRjZW50ZXIgPT09IHZvaWQgMCA/IF90aGlzLnByb3BzLmNlbnRlciB8fCBvcHRpb25zLnB1bHNhdGUgOiBfb3B0aW9ucyRjZW50ZXIsXG4gICAgICAgICAgX29wdGlvbnMkZmFrZUVsZW1lbnQgPSBvcHRpb25zLmZha2VFbGVtZW50LFxuICAgICAgICAgIGZha2VFbGVtZW50ID0gX29wdGlvbnMkZmFrZUVsZW1lbnQgPT09IHZvaWQgMCA/IGZhbHNlIDogX29wdGlvbnMkZmFrZUVsZW1lbnQ7XG5cbiAgICAgIGlmIChldmVudC50eXBlID09PSAnbW91c2Vkb3duJyAmJiBfdGhpcy5pZ25vcmluZ01vdXNlRG93bikge1xuICAgICAgICBfdGhpcy5pZ25vcmluZ01vdXNlRG93biA9IGZhbHNlO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChldmVudC50eXBlID09PSAndG91Y2hzdGFydCcpIHtcbiAgICAgICAgX3RoaXMuaWdub3JpbmdNb3VzZURvd24gPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICB2YXIgZWxlbWVudCA9IGZha2VFbGVtZW50ID8gbnVsbCA6IF9yZWFjdERvbS5kZWZhdWx0LmZpbmRET01Ob2RlKCgwLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkMi5kZWZhdWx0KShfdGhpcykpO1xuICAgICAgdmFyIHJlY3QgPSBlbGVtZW50ID8gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSA6IHtcbiAgICAgICAgd2lkdGg6IDAsXG4gICAgICAgIGhlaWdodDogMCxcbiAgICAgICAgbGVmdDogMCxcbiAgICAgICAgdG9wOiAwXG4gICAgICB9OyAvLyBHZXQgdGhlIHNpemUgb2YgdGhlIHJpcHBsZVxuXG4gICAgICB2YXIgcmlwcGxlWDtcbiAgICAgIHZhciByaXBwbGVZO1xuICAgICAgdmFyIHJpcHBsZVNpemU7XG5cbiAgICAgIGlmIChjZW50ZXIgfHwgZXZlbnQuY2xpZW50WCA9PT0gMCAmJiBldmVudC5jbGllbnRZID09PSAwIHx8ICFldmVudC5jbGllbnRYICYmICFldmVudC50b3VjaGVzKSB7XG4gICAgICAgIHJpcHBsZVggPSBNYXRoLnJvdW5kKHJlY3Qud2lkdGggLyAyKTtcbiAgICAgICAgcmlwcGxlWSA9IE1hdGgucm91bmQocmVjdC5oZWlnaHQgLyAyKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBjbGllbnRYID0gZXZlbnQuY2xpZW50WCA/IGV2ZW50LmNsaWVudFggOiBldmVudC50b3VjaGVzWzBdLmNsaWVudFg7XG4gICAgICAgIHZhciBjbGllbnRZID0gZXZlbnQuY2xpZW50WSA/IGV2ZW50LmNsaWVudFkgOiBldmVudC50b3VjaGVzWzBdLmNsaWVudFk7XG4gICAgICAgIHJpcHBsZVggPSBNYXRoLnJvdW5kKGNsaWVudFggLSByZWN0LmxlZnQpO1xuICAgICAgICByaXBwbGVZID0gTWF0aC5yb3VuZChjbGllbnRZIC0gcmVjdC50b3ApO1xuICAgICAgfVxuXG4gICAgICBpZiAoY2VudGVyKSB7XG4gICAgICAgIHJpcHBsZVNpemUgPSBNYXRoLnNxcnQoKDIgKiBNYXRoLnBvdyhyZWN0LndpZHRoLCAyKSArIE1hdGgucG93KHJlY3QuaGVpZ2h0LCAyKSkgLyAzKTsgLy8gRm9yIHNvbWUgcmVhc29uIHRoZSBhbmltYXRpb24gaXMgYnJva2VuIG9uIE1vYmlsZSBDaHJvbWUgaWYgdGhlIHNpemUgaWYgZXZlbi5cblxuICAgICAgICBpZiAocmlwcGxlU2l6ZSAlIDIgPT09IDApIHtcbiAgICAgICAgICByaXBwbGVTaXplICs9IDE7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBzaXplWCA9IE1hdGgubWF4KE1hdGguYWJzKChlbGVtZW50ID8gZWxlbWVudC5jbGllbnRXaWR0aCA6IDApIC0gcmlwcGxlWCksIHJpcHBsZVgpICogMiArIDI7XG4gICAgICAgIHZhciBzaXplWSA9IE1hdGgubWF4KE1hdGguYWJzKChlbGVtZW50ID8gZWxlbWVudC5jbGllbnRIZWlnaHQgOiAwKSAtIHJpcHBsZVkpLCByaXBwbGVZKSAqIDIgKyAyO1xuICAgICAgICByaXBwbGVTaXplID0gTWF0aC5zcXJ0KE1hdGgucG93KHNpemVYLCAyKSArIE1hdGgucG93KHNpemVZLCAyKSk7XG4gICAgICB9IC8vIFRvdWNoZSBkZXZpY2VzXG5cblxuICAgICAgaWYgKGV2ZW50LnRvdWNoZXMpIHtcbiAgICAgICAgLy8gUHJlcGFyZSB0aGUgcmlwcGxlIGVmZmVjdC5cbiAgICAgICAgX3RoaXMuc3RhcnRUaW1lckNvbW1pdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBfdGhpcy5zdGFydENvbW1pdCh7XG4gICAgICAgICAgICBwdWxzYXRlOiBwdWxzYXRlLFxuICAgICAgICAgICAgcmlwcGxlWDogcmlwcGxlWCxcbiAgICAgICAgICAgIHJpcHBsZVk6IHJpcHBsZVksXG4gICAgICAgICAgICByaXBwbGVTaXplOiByaXBwbGVTaXplLFxuICAgICAgICAgICAgY2I6IGNiXG4gICAgICAgICAgfSk7XG4gICAgICAgIH07IC8vIERlcGxheSB0aGUgZXhlY3V0aW9uIG9mIHRoZSByaXBwbGUgZWZmZWN0LlxuXG5cbiAgICAgICAgX3RoaXMuc3RhcnRUaW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIF90aGlzLnN0YXJ0VGltZXJDb21taXQoKTtcblxuICAgICAgICAgIF90aGlzLnN0YXJ0VGltZXJDb21taXQgPSBudWxsO1xuICAgICAgICB9LCBERUxBWV9SSVBQTEUpOyAvLyBXZSBoYXZlIHRvIG1ha2UgYSB0cmFkZW9mZiB3aXRoIHRoaXMgdmFsdWUuXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBfdGhpcy5zdGFydENvbW1pdCh7XG4gICAgICAgICAgcHVsc2F0ZTogcHVsc2F0ZSxcbiAgICAgICAgICByaXBwbGVYOiByaXBwbGVYLFxuICAgICAgICAgIHJpcHBsZVk6IHJpcHBsZVksXG4gICAgICAgICAgcmlwcGxlU2l6ZTogcmlwcGxlU2l6ZSxcbiAgICAgICAgICBjYjogY2JcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSwgX3RoaXMuc3RhcnRDb21taXQgPSBmdW5jdGlvbiAocGFyYW1zKSB7XG4gICAgICB2YXIgcHVsc2F0ZSA9IHBhcmFtcy5wdWxzYXRlLFxuICAgICAgICAgIHJpcHBsZVggPSBwYXJhbXMucmlwcGxlWCxcbiAgICAgICAgICByaXBwbGVZID0gcGFyYW1zLnJpcHBsZVksXG4gICAgICAgICAgcmlwcGxlU2l6ZSA9IHBhcmFtcy5yaXBwbGVTaXplLFxuICAgICAgICAgIGNiID0gcGFyYW1zLmNiO1xuICAgICAgdmFyIHJpcHBsZXMgPSBfdGhpcy5zdGF0ZS5yaXBwbGVzOyAvLyBBZGQgYSByaXBwbGUgdG8gdGhlIHJpcHBsZXMgYXJyYXkuXG5cbiAgICAgIHJpcHBsZXMgPSAoMCwgX3RvQ29uc3VtYWJsZUFycmF5Mi5kZWZhdWx0KShyaXBwbGVzKS5jb25jYXQoW19yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX1JpcHBsZS5kZWZhdWx0LCB7XG4gICAgICAgIGtleTogX3RoaXMuc3RhdGUubmV4dEtleSxcbiAgICAgICAgY2xhc3NlczogX3RoaXMucHJvcHMuY2xhc3NlcyxcbiAgICAgICAgdGltZW91dDoge1xuICAgICAgICAgIGV4aXQ6IERVUkFUSU9OLFxuICAgICAgICAgIGVudGVyOiBEVVJBVElPTlxuICAgICAgICB9LFxuICAgICAgICBwdWxzYXRlOiBwdWxzYXRlLFxuICAgICAgICByaXBwbGVYOiByaXBwbGVYLFxuICAgICAgICByaXBwbGVZOiByaXBwbGVZLFxuICAgICAgICByaXBwbGVTaXplOiByaXBwbGVTaXplXG4gICAgICB9KV0pO1xuXG4gICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIG5leHRLZXk6IF90aGlzLnN0YXRlLm5leHRLZXkgKyAxLFxuICAgICAgICByaXBwbGVzOiByaXBwbGVzXG4gICAgICB9LCBjYik7XG4gICAgfSwgX3RoaXMuc3RvcCA9IGZ1bmN0aW9uIChldmVudCwgY2IpIHtcbiAgICAgIGNsZWFyVGltZW91dChfdGhpcy5zdGFydFRpbWVyKTtcbiAgICAgIHZhciByaXBwbGVzID0gX3RoaXMuc3RhdGUucmlwcGxlczsgLy8gVGhlIHRvdWNoIGludGVyYWN0aW9uIG9jY3VyZXMgdG8gcXVpY2tseS5cbiAgICAgIC8vIFdlIHN0aWxsIHdhbnQgdG8gc2hvdyByaXBwbGUgZWZmZWN0LlxuXG4gICAgICBpZiAoZXZlbnQudHlwZSA9PT0gJ3RvdWNoZW5kJyAmJiBfdGhpcy5zdGFydFRpbWVyQ29tbWl0KSB7XG4gICAgICAgIGV2ZW50LnBlcnNpc3QoKTtcblxuICAgICAgICBfdGhpcy5zdGFydFRpbWVyQ29tbWl0KCk7XG5cbiAgICAgICAgX3RoaXMuc3RhcnRUaW1lckNvbW1pdCA9IG51bGw7XG4gICAgICAgIF90aGlzLnN0YXJ0VGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBfdGhpcy5zdG9wKGV2ZW50LCBjYik7XG4gICAgICAgIH0sIDApO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIF90aGlzLnN0YXJ0VGltZXJDb21taXQgPSBudWxsO1xuXG4gICAgICBpZiAocmlwcGxlcyAmJiByaXBwbGVzLmxlbmd0aCkge1xuICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgcmlwcGxlczogcmlwcGxlcy5zbGljZSgxKVxuICAgICAgICB9LCBjYik7XG4gICAgICB9XG4gICAgfSwgX3RlbXApKTtcbiAgfVxuXG4gICgwLCBfY3JlYXRlQ2xhc3MyLmRlZmF1bHQpKFRvdWNoUmlwcGxlLCBbe1xuICAgIGtleTogXCJjb21wb25lbnRXaWxsVW5tb3VudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aGlzLnN0YXJ0VGltZXIpO1xuICAgIH0gLy8gVXNlZCB0byBmaWx0ZXIgb3V0IG1vdXNlIGVtdWxhdGVkIGV2ZW50cyBvbiBtb2JpbGUuXG5cbiAgfSwge1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgY2VudGVyID0gX3Byb3BzLmNlbnRlcixcbiAgICAgICAgICBjbGFzc2VzID0gX3Byb3BzLmNsYXNzZXMsXG4gICAgICAgICAgY2xhc3NOYW1lID0gX3Byb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgICBvdGhlciA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyLmRlZmF1bHQpKF9wcm9wcywgW1wiY2VudGVyXCIsIFwiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiXSk7XG4gICAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfVHJhbnNpdGlvbkdyb3VwLmRlZmF1bHQsICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe1xuICAgICAgICBjb21wb25lbnQ6IFwic3BhblwiLFxuICAgICAgICBlbnRlcjogdHJ1ZSxcbiAgICAgICAgZXhpdDogdHJ1ZSxcbiAgICAgICAgY2xhc3NOYW1lOiAoMCwgX2NsYXNzbmFtZXMuZGVmYXVsdCkoY2xhc3Nlcy5yb290LCBjbGFzc05hbWUpXG4gICAgICB9LCBvdGhlciksIHRoaXMuc3RhdGUucmlwcGxlcyk7XG4gICAgfVxuICB9XSk7XG4gIHJldHVybiBUb3VjaFJpcHBsZTtcbn0oX3JlYWN0LmRlZmF1bHQuUHVyZUNvbXBvbmVudCk7XG5cblRvdWNoUmlwcGxlLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIHJpcHBsZSBzdGFydHMgYXQgdGhlIGNlbnRlciBvZiB0aGUgY29tcG9uZW50XG4gICAqIHJhdGhlciB0aGFuIGF0IHRoZSBwb2ludCBvZiBpbnRlcmFjdGlvbi5cbiAgICovXG4gIGNlbnRlcjogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzLWFwaSkgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nXG59IDoge307XG5Ub3VjaFJpcHBsZS5kZWZhdWx0UHJvcHMgPSB7XG4gIGNlbnRlcjogZmFsc2Vcbn07XG5cbnZhciBfZGVmYXVsdCA9ICgwLCBfd2l0aFN0eWxlcy5kZWZhdWx0KShzdHlsZXMsIHtcbiAgZmxpcDogZmFsc2UsXG4gIG5hbWU6ICdNdWlUb3VjaFJpcHBsZSdcbn0pKFRvdWNoUmlwcGxlKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRldGVjdEZvY3VzVmlzaWJsZSA9IGRldGVjdEZvY3VzVmlzaWJsZTtcbmV4cG9ydHMubGlzdGVuRm9yRm9jdXNLZXlzID0gbGlzdGVuRm9yRm9jdXNLZXlzO1xuXG52YXIgX2tleWNvZGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJrZXljb2RlXCIpKTtcblxudmFyIF93YXJuaW5nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwid2FybmluZ1wiKSk7XG5cbnZhciBfY29udGFpbnMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJkb20taGVscGVycy9xdWVyeS9jb250YWluc1wiKSk7XG5cbnZhciBfb3duZXJEb2N1bWVudCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImRvbS1oZWxwZXJzL293bmVyRG9jdW1lbnRcIikpO1xuXG4vLyAgd2Vha1xudmFyIGludGVybmFsID0ge1xuICBmb2N1c0tleVByZXNzZWQ6IGZhbHNlLFxuICBrZXlVcEV2ZW50VGltZW91dDogLTFcbn07XG5cbmZ1bmN0aW9uIGRldGVjdEZvY3VzVmlzaWJsZShpbnN0YW5jZSwgZWxlbWVudCwgY2FsbGJhY2spIHtcbiAgdmFyIGF0dGVtcHQgPSBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6IDE7XG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/ICgwLCBfd2FybmluZy5kZWZhdWx0KShpbnN0YW5jZS5mb2N1c1Zpc2libGVDaGVja1RpbWUsICdNYXRlcmlhbC1VSTogbWlzc2luZyBpbnN0YW5jZS5mb2N1c1Zpc2libGVDaGVja1RpbWUuJykgOiB2b2lkIDA7XG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/ICgwLCBfd2FybmluZy5kZWZhdWx0KShpbnN0YW5jZS5mb2N1c1Zpc2libGVNYXhDaGVja1RpbWVzLCAnTWF0ZXJpYWwtVUk6IG1pc3NpbmcgaW5zdGFuY2UuZm9jdXNWaXNpYmxlTWF4Q2hlY2tUaW1lcy4nKSA6IHZvaWQgMDtcbiAgaW5zdGFuY2UuZm9jdXNWaXNpYmxlVGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgIHZhciBkb2MgPSAoMCwgX293bmVyRG9jdW1lbnQuZGVmYXVsdCkoZWxlbWVudCk7XG5cbiAgICBpZiAoaW50ZXJuYWwuZm9jdXNLZXlQcmVzc2VkICYmIChkb2MuYWN0aXZlRWxlbWVudCA9PT0gZWxlbWVudCB8fCAoMCwgX2NvbnRhaW5zLmRlZmF1bHQpKGVsZW1lbnQsIGRvYy5hY3RpdmVFbGVtZW50KSkpIHtcbiAgICAgIGNhbGxiYWNrKCk7XG4gICAgfSBlbHNlIGlmIChhdHRlbXB0IDwgaW5zdGFuY2UuZm9jdXNWaXNpYmxlTWF4Q2hlY2tUaW1lcykge1xuICAgICAgZGV0ZWN0Rm9jdXNWaXNpYmxlKGluc3RhbmNlLCBlbGVtZW50LCBjYWxsYmFjaywgYXR0ZW1wdCArIDEpO1xuICAgIH1cbiAgfSwgaW5zdGFuY2UuZm9jdXNWaXNpYmxlQ2hlY2tUaW1lKTtcbn1cblxudmFyIEZPQ1VTX0tFWVMgPSBbJ3RhYicsICdlbnRlcicsICdzcGFjZScsICdlc2MnLCAndXAnLCAnZG93bicsICdsZWZ0JywgJ3JpZ2h0J107XG5cbmZ1bmN0aW9uIGlzRm9jdXNLZXkoZXZlbnQpIHtcbiAgcmV0dXJuIEZPQ1VTX0tFWVMuaW5kZXhPZigoMCwgX2tleWNvZGUuZGVmYXVsdCkoZXZlbnQpKSA+IC0xO1xufVxuXG52YXIgaGFuZGxlS2V5VXBFdmVudCA9IGZ1bmN0aW9uIGhhbmRsZUtleVVwRXZlbnQoZXZlbnQpIHtcbiAgaWYgKGlzRm9jdXNLZXkoZXZlbnQpKSB7XG4gICAgaW50ZXJuYWwuZm9jdXNLZXlQcmVzc2VkID0gdHJ1ZTsgLy8gTGV0J3MgY29uc2lkZXIgdGhhdCB0aGUgdXNlciBpcyB1c2luZyBhIGtleWJvYXJkIGR1cmluZyBhIHdpbmRvdyBmcmFtZSBvZiAxcy5cblxuICAgIGNsZWFyVGltZW91dChpbnRlcm5hbC5rZXlVcEV2ZW50VGltZW91dCk7XG4gICAgaW50ZXJuYWwua2V5VXBFdmVudFRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIGludGVybmFsLmZvY3VzS2V5UHJlc3NlZCA9IGZhbHNlO1xuICAgIH0sIDFlMyk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGxpc3RlbkZvckZvY3VzS2V5cyh3aW4pIHtcbiAgLy8gVGhlIGV2ZW50IGxpc3RlbmVyIHdpbGwgb25seSBiZSBhZGRlZCBvbmNlIHBlciB3aW5kb3cuXG4gIC8vIER1cGxpY2F0ZSBldmVudCBsaXN0ZW5lcnMgd2lsbCBiZSBpZ25vcmVkIGJ5IGFkZEV2ZW50TGlzdGVuZXIuXG4gIC8vIEFsc28sIHRoaXMgbG9naWMgaXMgY2xpZW50IHNpZGUgb25seSwgd2UgZG9uJ3QgbmVlZCBhIHRlYXJkb3duLlxuICB3aW4uYWRkRXZlbnRMaXN0ZW5lcigna2V5dXAnLCBoYW5kbGVLZXlVcEV2ZW50KTtcbn0iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuc3R5bGVzID0gdm9pZCAwO1xuXG52YXIgX2V4dGVuZHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2V4dGVuZHNcIikpO1xuXG52YXIgX2RlZmluZVByb3BlcnR5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9kZWZpbmVQcm9wZXJ0eVwiKSk7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCIpKTtcblxudmFyIF9jbGFzc0NhbGxDaGVjazIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vY2xhc3NDYWxsQ2hlY2tcIikpO1xuXG52YXIgX2NyZWF0ZUNsYXNzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9jcmVhdGVDbGFzc1wiKSk7XG5cbnZhciBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vcG9zc2libGVDb25zdHJ1Y3RvclJldHVyblwiKSk7XG5cbnZhciBfaW5oZXJpdHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2luaGVyaXRzXCIpKTtcblxudmFyIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2Fzc2VydFRoaXNJbml0aWFsaXplZFwiKSk7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbnZhciBfcmVhY3REb20gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdC1kb21cIikpO1xuXG52YXIgX2NsYXNzbmFtZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJjbGFzc25hbWVzXCIpKTtcblxudmFyIF9rZXljb2RlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwia2V5Y29kZVwiKSk7XG5cbnZhciBfb3duZXJXaW5kb3cgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi91dGlscy9vd25lcldpbmRvd1wiKSk7XG5cbnZhciBfd2l0aFN0eWxlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3N0eWxlcy93aXRoU3R5bGVzXCIpKTtcblxudmFyIF9mb2N1c1Zpc2libGUgPSByZXF1aXJlKFwiLi9mb2N1c1Zpc2libGVcIik7XG5cbnZhciBfVG91Y2hSaXBwbGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL1RvdWNoUmlwcGxlXCIpKTtcblxudmFyIF9jcmVhdGVSaXBwbGVIYW5kbGVyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9jcmVhdGVSaXBwbGVIYW5kbGVyXCIpKTtcblxudmFyIHN0eWxlcyA9IHtcbiAgcm9vdDoge1xuICAgIGRpc3BsYXk6ICdpbmxpbmUtZmxleCcsXG4gICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLFxuICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgIC8vIFJlbW92ZSBncmV5IGhpZ2hsaWdodFxuICAgIFdlYmtpdFRhcEhpZ2hsaWdodENvbG9yOiAndHJhbnNwYXJlbnQnLFxuICAgIGJhY2tncm91bmRDb2xvcjogJ3RyYW5zcGFyZW50JyxcbiAgICAvLyBSZXNldCBkZWZhdWx0IHZhbHVlXG4gICAgLy8gV2UgZGlzYWJsZSB0aGUgZm9jdXMgcmluZyBmb3IgbW91c2UsIHRvdWNoIGFuZCBrZXlib2FyZCB1c2Vycy5cbiAgICBvdXRsaW5lOiAnbm9uZScsXG4gICAgYm9yZGVyOiAwLFxuICAgIG1hcmdpbjogMCxcbiAgICAvLyBSZW1vdmUgdGhlIG1hcmdpbiBpbiBTYWZhcmlcbiAgICBib3JkZXJSYWRpdXM6IDAsXG4gICAgcGFkZGluZzogMCxcbiAgICAvLyBSZW1vdmUgdGhlIHBhZGRpbmcgaW4gRmlyZWZveFxuICAgIGN1cnNvcjogJ3BvaW50ZXInLFxuICAgIHVzZXJTZWxlY3Q6ICdub25lJyxcbiAgICB2ZXJ0aWNhbEFsaWduOiAnbWlkZGxlJyxcbiAgICAnLW1vei1hcHBlYXJhbmNlJzogJ25vbmUnLFxuICAgIC8vIFJlc2V0XG4gICAgJy13ZWJraXQtYXBwZWFyYW5jZSc6ICdub25lJyxcbiAgICAvLyBSZXNldFxuICAgIHRleHREZWNvcmF0aW9uOiAnbm9uZScsXG4gICAgLy8gU28gd2UgdGFrZSBwcmVjZWRlbnQgb3ZlciB0aGUgc3R5bGUgb2YgYSBuYXRpdmUgPGEgLz4gZWxlbWVudC5cbiAgICBjb2xvcjogJ2luaGVyaXQnLFxuICAgICcmOjotbW96LWZvY3VzLWlubmVyJzoge1xuICAgICAgYm9yZGVyU3R5bGU6ICdub25lJyAvLyBSZW1vdmUgRmlyZWZveCBkb3R0ZWQgb3V0bGluZS5cblxuICAgIH0sXG4gICAgJyYkZGlzYWJsZWQnOiB7XG4gICAgICBwb2ludGVyRXZlbnRzOiAnbm9uZScsXG4gICAgICAvLyBEaXNhYmxlIGxpbmsgaW50ZXJhY3Rpb25zXG4gICAgICBjdXJzb3I6ICdkZWZhdWx0J1xuICAgIH1cbiAgfSxcbiAgZGlzYWJsZWQ6IHt9LFxuICBmb2N1c1Zpc2libGU6IHt9XG59O1xuLyogaXN0YW5idWwgaWdub3JlIGlmICovXG5cbmV4cG9ydHMuc3R5bGVzID0gc3R5bGVzO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhX3JlYWN0LmRlZmF1bHQuY3JlYXRlQ29udGV4dCkge1xuICB0aHJvdyBuZXcgRXJyb3IoJ01hdGVyaWFsLVVJOiByZWFjdEAxNi4zLjAgb3IgZ3JlYXRlciBpcyByZXF1aXJlZC4nKTtcbn1cbi8qKlxuICogYEJ1dHRvbkJhc2VgIGNvbnRhaW5zIGFzIGZldyBzdHlsZXMgYXMgcG9zc2libGUuXG4gKiBJdCBhaW1zIHRvIGJlIGEgc2ltcGxlIGJ1aWxkaW5nIGJsb2NrIGZvciBjcmVhdGluZyBhIGJ1dHRvbi5cbiAqIEl0IGNvbnRhaW5zIGEgbG9hZCBvZiBzdHlsZSByZXNldCBhbmQgc29tZSBmb2N1cy9yaXBwbGUgbG9naWMuXG4gKi9cblxuXG52YXIgQnV0dG9uQmFzZSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICAoMCwgX2luaGVyaXRzMi5kZWZhdWx0KShCdXR0b25CYXNlLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBCdXR0b25CYXNlKCkge1xuICAgIHZhciBfcmVmO1xuXG4gICAgdmFyIF90ZW1wLCBfdGhpcztcblxuICAgICgwLCBfY2xhc3NDYWxsQ2hlY2syLmRlZmF1bHQpKHRoaXMsIEJ1dHRvbkJhc2UpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiAoMCwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yLmRlZmF1bHQpKF90aGlzLCAoX3RlbXAgPSBfdGhpcyA9ICgwLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIuZGVmYXVsdCkodGhpcywgKF9yZWYgPSBCdXR0b25CYXNlLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoQnV0dG9uQmFzZSkpLmNhbGwuYXBwbHkoX3JlZiwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcy5zdGF0ZSA9IHt9LCBfdGhpcy5vbkZvY3VzVmlzaWJsZUhhbmRsZXIgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIF90aGlzLmtleURvd24gPSBmYWxzZTtcblxuICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICBmb2N1c1Zpc2libGU6IHRydWVcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoX3RoaXMucHJvcHMub25Gb2N1c1Zpc2libGUpIHtcbiAgICAgICAgX3RoaXMucHJvcHMub25Gb2N1c1Zpc2libGUoZXZlbnQpO1xuICAgICAgfVxuICAgIH0sIF90aGlzLm9uUmlwcGxlUmVmID0gZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgIF90aGlzLnJpcHBsZSA9IG5vZGU7XG4gICAgfSwgX3RoaXMucmlwcGxlID0gbnVsbCwgX3RoaXMua2V5RG93biA9IGZhbHNlLCBfdGhpcy5idXR0b24gPSBudWxsLCBfdGhpcy5mb2N1c1Zpc2libGVUaW1lb3V0ID0gbnVsbCwgX3RoaXMuZm9jdXNWaXNpYmxlQ2hlY2tUaW1lID0gNTAsIF90aGlzLmZvY3VzVmlzaWJsZU1heENoZWNrVGltZXMgPSA1LCBfdGhpcy5oYW5kbGVLZXlEb3duID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICBjb21wb25lbnQgPSBfdGhpcyRwcm9wcy5jb21wb25lbnQsXG4gICAgICAgICAgZm9jdXNSaXBwbGUgPSBfdGhpcyRwcm9wcy5mb2N1c1JpcHBsZSxcbiAgICAgICAgICBvbktleURvd24gPSBfdGhpcyRwcm9wcy5vbktleURvd24sXG4gICAgICAgICAgb25DbGljayA9IF90aGlzJHByb3BzLm9uQ2xpY2s7XG4gICAgICB2YXIga2V5ID0gKDAsIF9rZXljb2RlLmRlZmF1bHQpKGV2ZW50KTsgLy8gQ2hlY2sgaWYga2V5IGlzIGFscmVhZHkgZG93biB0byBhdm9pZCByZXBlYXRzIGJlaW5nIGNvdW50ZWQgYXMgbXVsdGlwbGUgYWN0aXZhdGlvbnNcblxuICAgICAgaWYgKGZvY3VzUmlwcGxlICYmICFfdGhpcy5rZXlEb3duICYmIF90aGlzLnN0YXRlLmZvY3VzVmlzaWJsZSAmJiBfdGhpcy5yaXBwbGUgJiYga2V5ID09PSAnc3BhY2UnKSB7XG4gICAgICAgIF90aGlzLmtleURvd24gPSB0cnVlO1xuICAgICAgICBldmVudC5wZXJzaXN0KCk7XG5cbiAgICAgICAgX3RoaXMucmlwcGxlLnN0b3AoZXZlbnQsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBfdGhpcy5yaXBwbGUuc3RhcnQoZXZlbnQpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgaWYgKG9uS2V5RG93bikge1xuICAgICAgICBvbktleURvd24oZXZlbnQpO1xuICAgICAgfSAvLyBLZXlib2FyZCBhY2Nlc3NpYmlsaXR5IGZvciBub24gaW50ZXJhY3RpdmUgZWxlbWVudHNcblxuXG4gICAgICBpZiAoZXZlbnQudGFyZ2V0ID09PSBldmVudC5jdXJyZW50VGFyZ2V0ICYmIGNvbXBvbmVudCAmJiBjb21wb25lbnQgIT09ICdidXR0b24nICYmIChrZXkgPT09ICdzcGFjZScgfHwga2V5ID09PSAnZW50ZXInKSAmJiAhKF90aGlzLmJ1dHRvbi50YWdOYW1lID09PSAnQScgJiYgX3RoaXMuYnV0dG9uLmhyZWYpKSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgaWYgKG9uQ2xpY2spIHtcbiAgICAgICAgICBvbkNsaWNrKGV2ZW50KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIF90aGlzLmhhbmRsZUtleVVwID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBpZiAoX3RoaXMucHJvcHMuZm9jdXNSaXBwbGUgJiYgKDAsIF9rZXljb2RlLmRlZmF1bHQpKGV2ZW50KSA9PT0gJ3NwYWNlJyAmJiBfdGhpcy5yaXBwbGUgJiYgX3RoaXMuc3RhdGUuZm9jdXNWaXNpYmxlKSB7XG4gICAgICAgIF90aGlzLmtleURvd24gPSBmYWxzZTtcbiAgICAgICAgZXZlbnQucGVyc2lzdCgpO1xuXG4gICAgICAgIF90aGlzLnJpcHBsZS5zdG9wKGV2ZW50LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgX3RoaXMucmlwcGxlLnB1bHNhdGUoZXZlbnQpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgaWYgKF90aGlzLnByb3BzLm9uS2V5VXApIHtcbiAgICAgICAgX3RoaXMucHJvcHMub25LZXlVcChldmVudCk7XG4gICAgICB9XG4gICAgfSwgX3RoaXMuaGFuZGxlTW91c2VEb3duID0gKDAsIF9jcmVhdGVSaXBwbGVIYW5kbGVyLmRlZmF1bHQpKCgwLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkMi5kZWZhdWx0KShfdGhpcyksICdNb3VzZURvd24nLCAnc3RhcnQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICBjbGVhclRpbWVvdXQoX3RoaXMuZm9jdXNWaXNpYmxlVGltZW91dCk7XG5cbiAgICAgIGlmIChfdGhpcy5zdGF0ZS5mb2N1c1Zpc2libGUpIHtcbiAgICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgIGZvY3VzVmlzaWJsZTogZmFsc2VcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSksIF90aGlzLmhhbmRsZU1vdXNlVXAgPSAoMCwgX2NyZWF0ZVJpcHBsZUhhbmRsZXIuZGVmYXVsdCkoKDAsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyLmRlZmF1bHQpKF90aGlzKSwgJ01vdXNlVXAnLCAnc3RvcCcpLCBfdGhpcy5oYW5kbGVNb3VzZUxlYXZlID0gKDAsIF9jcmVhdGVSaXBwbGVIYW5kbGVyLmRlZmF1bHQpKCgwLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkMi5kZWZhdWx0KShfdGhpcyksICdNb3VzZUxlYXZlJywgJ3N0b3AnLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGlmIChfdGhpcy5zdGF0ZS5mb2N1c1Zpc2libGUpIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIH1cbiAgICB9KSwgX3RoaXMuaGFuZGxlVG91Y2hTdGFydCA9ICgwLCBfY3JlYXRlUmlwcGxlSGFuZGxlci5kZWZhdWx0KSgoMCwgX2Fzc2VydFRoaXNJbml0aWFsaXplZDIuZGVmYXVsdCkoX3RoaXMpLCAnVG91Y2hTdGFydCcsICdzdGFydCcpLCBfdGhpcy5oYW5kbGVUb3VjaEVuZCA9ICgwLCBfY3JlYXRlUmlwcGxlSGFuZGxlci5kZWZhdWx0KSgoMCwgX2Fzc2VydFRoaXNJbml0aWFsaXplZDIuZGVmYXVsdCkoX3RoaXMpLCAnVG91Y2hFbmQnLCAnc3RvcCcpLCBfdGhpcy5oYW5kbGVUb3VjaE1vdmUgPSAoMCwgX2NyZWF0ZVJpcHBsZUhhbmRsZXIuZGVmYXVsdCkoKDAsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyLmRlZmF1bHQpKF90aGlzKSwgJ1RvdWNoTW92ZScsICdzdG9wJyksIF90aGlzLmhhbmRsZUJsdXIgPSAoMCwgX2NyZWF0ZVJpcHBsZUhhbmRsZXIuZGVmYXVsdCkoKDAsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyLmRlZmF1bHQpKF90aGlzKSwgJ0JsdXInLCAnc3RvcCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNsZWFyVGltZW91dChfdGhpcy5mb2N1c1Zpc2libGVUaW1lb3V0KTtcblxuICAgICAgaWYgKF90aGlzLnN0YXRlLmZvY3VzVmlzaWJsZSkge1xuICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgZm9jdXNWaXNpYmxlOiBmYWxzZVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KSwgX3RoaXMuaGFuZGxlRm9jdXMgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGlmIChfdGhpcy5wcm9wcy5kaXNhYmxlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9IC8vIEZpeCBmb3IgaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2lzc3Vlcy83NzY5XG5cblxuICAgICAgaWYgKCFfdGhpcy5idXR0b24pIHtcbiAgICAgICAgX3RoaXMuYnV0dG9uID0gZXZlbnQuY3VycmVudFRhcmdldDtcbiAgICAgIH1cblxuICAgICAgZXZlbnQucGVyc2lzdCgpO1xuICAgICAgKDAsIF9mb2N1c1Zpc2libGUuZGV0ZWN0Rm9jdXNWaXNpYmxlKSgoMCwgX2Fzc2VydFRoaXNJbml0aWFsaXplZDIuZGVmYXVsdCkoX3RoaXMpLCBfdGhpcy5idXR0b24sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMub25Gb2N1c1Zpc2libGVIYW5kbGVyKGV2ZW50KTtcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoX3RoaXMucHJvcHMub25Gb2N1cykge1xuICAgICAgICBfdGhpcy5wcm9wcy5vbkZvY3VzKGV2ZW50KTtcbiAgICAgIH1cbiAgICB9LCBfdGVtcCkpO1xuICB9XG5cbiAgKDAsIF9jcmVhdGVDbGFzczIuZGVmYXVsdCkoQnV0dG9uQmFzZSwgW3tcbiAgICBrZXk6IFwiY29tcG9uZW50RGlkTW91bnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgdGhpcy5idXR0b24gPSBfcmVhY3REb20uZGVmYXVsdC5maW5kRE9NTm9kZSh0aGlzKTtcbiAgICAgICgwLCBfZm9jdXNWaXNpYmxlLmxpc3RlbkZvckZvY3VzS2V5cykoKDAsIF9vd25lcldpbmRvdy5kZWZhdWx0KSh0aGlzLmJ1dHRvbikpO1xuXG4gICAgICBpZiAodGhpcy5wcm9wcy5hY3Rpb24pIHtcbiAgICAgICAgdGhpcy5wcm9wcy5hY3Rpb24oe1xuICAgICAgICAgIGZvY3VzVmlzaWJsZTogZnVuY3Rpb24gZm9jdXNWaXNpYmxlKCkge1xuICAgICAgICAgICAgX3RoaXMyLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgZm9jdXNWaXNpYmxlOiB0cnVlXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgX3RoaXMyLmJ1dHRvbi5mb2N1cygpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImNvbXBvbmVudERpZFVwZGF0ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzLCBwcmV2U3RhdGUpIHtcbiAgICAgIGlmICh0aGlzLnByb3BzLmZvY3VzUmlwcGxlICYmICF0aGlzLnByb3BzLmRpc2FibGVSaXBwbGUgJiYgIXByZXZTdGF0ZS5mb2N1c1Zpc2libGUgJiYgdGhpcy5zdGF0ZS5mb2N1c1Zpc2libGUpIHtcbiAgICAgICAgdGhpcy5yaXBwbGUucHVsc2F0ZSgpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJjb21wb25lbnRXaWxsVW5tb3VudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgIHRoaXMuYnV0dG9uID0gbnVsbDtcbiAgICAgIGNsZWFyVGltZW91dCh0aGlzLmZvY3VzVmlzaWJsZVRpbWVvdXQpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF9jbGFzc05hbWVzO1xuXG4gICAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBhY3Rpb24gPSBfcHJvcHMuYWN0aW9uLFxuICAgICAgICAgIGJ1dHRvblJlZiA9IF9wcm9wcy5idXR0b25SZWYsXG4gICAgICAgICAgY2VudGVyUmlwcGxlID0gX3Byb3BzLmNlbnRlclJpcHBsZSxcbiAgICAgICAgICBjaGlsZHJlbiA9IF9wcm9wcy5jaGlsZHJlbixcbiAgICAgICAgICBjbGFzc2VzID0gX3Byb3BzLmNsYXNzZXMsXG4gICAgICAgICAgY2xhc3NOYW1lUHJvcCA9IF9wcm9wcy5jbGFzc05hbWUsXG4gICAgICAgICAgY29tcG9uZW50ID0gX3Byb3BzLmNvbXBvbmVudCxcbiAgICAgICAgICBkaXNhYmxlZCA9IF9wcm9wcy5kaXNhYmxlZCxcbiAgICAgICAgICBkaXNhYmxlUmlwcGxlID0gX3Byb3BzLmRpc2FibGVSaXBwbGUsXG4gICAgICAgICAgZm9jdXNSaXBwbGUgPSBfcHJvcHMuZm9jdXNSaXBwbGUsXG4gICAgICAgICAgZm9jdXNWaXNpYmxlQ2xhc3NOYW1lID0gX3Byb3BzLmZvY3VzVmlzaWJsZUNsYXNzTmFtZSxcbiAgICAgICAgICBvbkJsdXIgPSBfcHJvcHMub25CbHVyLFxuICAgICAgICAgIG9uRm9jdXMgPSBfcHJvcHMub25Gb2N1cyxcbiAgICAgICAgICBvbkZvY3VzVmlzaWJsZSA9IF9wcm9wcy5vbkZvY3VzVmlzaWJsZSxcbiAgICAgICAgICBvbktleURvd24gPSBfcHJvcHMub25LZXlEb3duLFxuICAgICAgICAgIG9uS2V5VXAgPSBfcHJvcHMub25LZXlVcCxcbiAgICAgICAgICBvbk1vdXNlRG93biA9IF9wcm9wcy5vbk1vdXNlRG93bixcbiAgICAgICAgICBvbk1vdXNlTGVhdmUgPSBfcHJvcHMub25Nb3VzZUxlYXZlLFxuICAgICAgICAgIG9uTW91c2VVcCA9IF9wcm9wcy5vbk1vdXNlVXAsXG4gICAgICAgICAgb25Ub3VjaEVuZCA9IF9wcm9wcy5vblRvdWNoRW5kLFxuICAgICAgICAgIG9uVG91Y2hNb3ZlID0gX3Byb3BzLm9uVG91Y2hNb3ZlLFxuICAgICAgICAgIG9uVG91Y2hTdGFydCA9IF9wcm9wcy5vblRvdWNoU3RhcnQsXG4gICAgICAgICAgdGFiSW5kZXggPSBfcHJvcHMudGFiSW5kZXgsXG4gICAgICAgICAgVG91Y2hSaXBwbGVQcm9wcyA9IF9wcm9wcy5Ub3VjaFJpcHBsZVByb3BzLFxuICAgICAgICAgIHR5cGUgPSBfcHJvcHMudHlwZSxcbiAgICAgICAgICBvdGhlciA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyLmRlZmF1bHQpKF9wcm9wcywgW1wiYWN0aW9uXCIsIFwiYnV0dG9uUmVmXCIsIFwiY2VudGVyUmlwcGxlXCIsIFwiY2hpbGRyZW5cIiwgXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29tcG9uZW50XCIsIFwiZGlzYWJsZWRcIiwgXCJkaXNhYmxlUmlwcGxlXCIsIFwiZm9jdXNSaXBwbGVcIiwgXCJmb2N1c1Zpc2libGVDbGFzc05hbWVcIiwgXCJvbkJsdXJcIiwgXCJvbkZvY3VzXCIsIFwib25Gb2N1c1Zpc2libGVcIiwgXCJvbktleURvd25cIiwgXCJvbktleVVwXCIsIFwib25Nb3VzZURvd25cIiwgXCJvbk1vdXNlTGVhdmVcIiwgXCJvbk1vdXNlVXBcIiwgXCJvblRvdWNoRW5kXCIsIFwib25Ub3VjaE1vdmVcIiwgXCJvblRvdWNoU3RhcnRcIiwgXCJ0YWJJbmRleFwiLCBcIlRvdWNoUmlwcGxlUHJvcHNcIiwgXCJ0eXBlXCJdKTtcbiAgICAgIHZhciBjbGFzc05hbWUgPSAoMCwgX2NsYXNzbmFtZXMuZGVmYXVsdCkoY2xhc3Nlcy5yb290LCAoX2NsYXNzTmFtZXMgPSB7fSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2NsYXNzTmFtZXMsIGNsYXNzZXMuZGlzYWJsZWQsIGRpc2FibGVkKSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2NsYXNzTmFtZXMsIGNsYXNzZXMuZm9jdXNWaXNpYmxlLCB0aGlzLnN0YXRlLmZvY3VzVmlzaWJsZSksICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKF9jbGFzc05hbWVzLCBmb2N1c1Zpc2libGVDbGFzc05hbWUsIHRoaXMuc3RhdGUuZm9jdXNWaXNpYmxlKSwgX2NsYXNzTmFtZXMpLCBjbGFzc05hbWVQcm9wKTtcbiAgICAgIHZhciBidXR0b25Qcm9wcyA9IHt9O1xuICAgICAgdmFyIENvbXBvbmVudFByb3AgPSBjb21wb25lbnQ7XG5cbiAgICAgIGlmIChDb21wb25lbnRQcm9wID09PSAnYnV0dG9uJyAmJiBvdGhlci5ocmVmKSB7XG4gICAgICAgIENvbXBvbmVudFByb3AgPSAnYSc7XG4gICAgICB9XG5cbiAgICAgIGlmIChDb21wb25lbnRQcm9wID09PSAnYnV0dG9uJykge1xuICAgICAgICBidXR0b25Qcm9wcy50eXBlID0gdHlwZSB8fCAnYnV0dG9uJztcbiAgICAgICAgYnV0dG9uUHJvcHMuZGlzYWJsZWQgPSBkaXNhYmxlZDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGJ1dHRvblByb3BzLnJvbGUgPSAnYnV0dG9uJztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50UHJvcCwgKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7XG4gICAgICAgIG9uQmx1cjogdGhpcy5oYW5kbGVCbHVyLFxuICAgICAgICBvbkZvY3VzOiB0aGlzLmhhbmRsZUZvY3VzLFxuICAgICAgICBvbktleURvd246IHRoaXMuaGFuZGxlS2V5RG93bixcbiAgICAgICAgb25LZXlVcDogdGhpcy5oYW5kbGVLZXlVcCxcbiAgICAgICAgb25Nb3VzZURvd246IHRoaXMuaGFuZGxlTW91c2VEb3duLFxuICAgICAgICBvbk1vdXNlTGVhdmU6IHRoaXMuaGFuZGxlTW91c2VMZWF2ZSxcbiAgICAgICAgb25Nb3VzZVVwOiB0aGlzLmhhbmRsZU1vdXNlVXAsXG4gICAgICAgIG9uVG91Y2hFbmQ6IHRoaXMuaGFuZGxlVG91Y2hFbmQsXG4gICAgICAgIG9uVG91Y2hNb3ZlOiB0aGlzLmhhbmRsZVRvdWNoTW92ZSxcbiAgICAgICAgb25Ub3VjaFN0YXJ0OiB0aGlzLmhhbmRsZVRvdWNoU3RhcnQsXG4gICAgICAgIHRhYkluZGV4OiBkaXNhYmxlZCA/ICctMScgOiB0YWJJbmRleCxcbiAgICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWUsXG4gICAgICAgIHJlZjogYnV0dG9uUmVmXG4gICAgICB9LCBidXR0b25Qcm9wcywgb3RoZXIpLCBjaGlsZHJlbiwgIWRpc2FibGVSaXBwbGUgJiYgIWRpc2FibGVkID8gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfVG91Y2hSaXBwbGUuZGVmYXVsdCwgKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7XG4gICAgICAgIGlubmVyUmVmOiB0aGlzLm9uUmlwcGxlUmVmLFxuICAgICAgICBjZW50ZXI6IGNlbnRlclJpcHBsZVxuICAgICAgfSwgVG91Y2hSaXBwbGVQcm9wcykpIDogbnVsbCk7XG4gICAgfVxuICB9XSwgW3tcbiAgICBrZXk6IFwiZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyhuZXh0UHJvcHMsIHByZXZTdGF0ZSkge1xuICAgICAgaWYgKHR5cGVvZiBwcmV2U3RhdGUuZm9jdXNWaXNpYmxlID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGZvY3VzVmlzaWJsZTogZmFsc2UsXG4gICAgICAgICAgbGFzdERpc2FibGVkOiBuZXh0UHJvcHMuZGlzYWJsZWRcbiAgICAgICAgfTtcbiAgICAgIH0gLy8gVGhlIGJsdXIgd29uJ3QgZmlyZSB3aGVuIHRoZSBkaXNhYmxlZCBzdGF0ZSBpcyBzZXQgb24gYSBmb2N1c2VkIGlucHV0LlxuICAgICAgLy8gV2UgbmVlZCB0byBib29rIGtlZXAgdGhlIGZvY3VzZWQgc3RhdGUgbWFudWFsbHkuXG5cblxuICAgICAgaWYgKCFwcmV2U3RhdGUucHJldlN0YXRlICYmIG5leHRQcm9wcy5kaXNhYmxlZCAmJiBwcmV2U3RhdGUuZm9jdXNWaXNpYmxlKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgZm9jdXNWaXNpYmxlOiBmYWxzZSxcbiAgICAgICAgICBsYXN0RGlzYWJsZWQ6IG5leHRQcm9wcy5kaXNhYmxlZFxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBsYXN0RGlzYWJsZWQ6IG5leHRQcm9wcy5kaXNhYmxlZFxuICAgICAgfTtcbiAgICB9XG4gIH1dKTtcbiAgcmV0dXJuIEJ1dHRvbkJhc2U7XG59KF9yZWFjdC5kZWZhdWx0LkNvbXBvbmVudCk7XG5cbkJ1dHRvbkJhc2UucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgY29tcG9uZW50IG1vdW50cy5cbiAgICogVGhpcyBpcyB1c2VmdWwgd2hlbiB5b3Ugd2FudCB0byB0cmlnZ2VyIGFuIGFjdGlvbiBwcm9ncmFtbWF0aWNhbGx5LlxuICAgKiBJdCBjdXJyZW50bHkgb25seSBzdXBwb3J0cyBgZm9jdXNWaXNpYmxlKClgIGFjdGlvbi5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGFjdGlvbnMgVGhpcyBvYmplY3QgY29udGFpbnMgYWxsIHBvc3NpYmxlIGFjdGlvbnNcbiAgICogdGhhdCBjYW4gYmUgdHJpZ2dlcmVkIHByb2dyYW1tYXRpY2FsbHkuXG4gICAqL1xuICBhY3Rpb246IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBVc2UgdGhhdCBwcm9wZXJ0eSB0byBwYXNzIGEgcmVmIGNhbGxiYWNrIHRvIHRoZSBuYXRpdmUgYnV0dG9uIGNvbXBvbmVudC5cbiAgICovXG4gIGJ1dHRvblJlZjogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsIF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3RdKSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgcmlwcGxlcyB3aWxsIGJlIGNlbnRlcmVkLlxuICAgKiBUaGV5IHdvbid0IHN0YXJ0IGF0IHRoZSBjdXJzb3IgaW50ZXJhY3Rpb24gcG9zaXRpb24uXG4gICAqL1xuICBjZW50ZXJSaXBwbGU6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IF9wcm9wVHlwZXMuZGVmYXVsdC5ub2RlLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2Nzcy1hcGkpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgRE9NIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsIF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jXSksXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGJhc2UgYnV0dG9uIHdpbGwgYmUgZGlzYWJsZWQuXG4gICAqL1xuICBkaXNhYmxlZDogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIHJpcHBsZSBlZmZlY3Qgd2lsbCBiZSBkaXNhYmxlZC5cbiAgICovXG4gIGRpc2FibGVSaXBwbGU6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBiYXNlIGJ1dHRvbiB3aWxsIGhhdmUgYSBrZXlib2FyZCBmb2N1cyByaXBwbGUuXG4gICAqIGBkaXNhYmxlUmlwcGxlYCBtdXN0IGFsc28gYmUgYGZhbHNlYC5cbiAgICovXG4gIGZvY3VzUmlwcGxlOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogVGhpcyBwcm9wZXJ0eSBjYW4gaGVscCBhIHBlcnNvbiBrbm93IHdoaWNoIGVsZW1lbnQgaGFzIHRoZSBrZXlib2FyZCBmb2N1cy5cbiAgICogVGhlIGNsYXNzIG5hbWUgd2lsbCBiZSBhcHBsaWVkIHdoZW4gdGhlIGVsZW1lbnQgZ2FpbiB0aGUgZm9jdXMgdGhyb3VnaHQgYSBrZXlib2FyZCBpbnRlcmFjdGlvbi5cbiAgICogSXQncyBhIHBvbHlmaWxsIGZvciB0aGUgW0NTUyA6Zm9jdXMtdmlzaWJsZSBmZWF0dXJlXShodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvc2VsZWN0b3JzLTQvI3RoZS1mb2N1cy12aXNpYmxlLXBzZXVkbykuXG4gICAqIFRoZSByYXRpb25hbCBmb3IgdXNpbmcgdGhpcyBmZWF0dXJlIFtpcyBleHBsYWluIGhlcmVdKGh0dHBzOi8vZ2l0aHViLmNvbS9XSUNHL2ZvY3VzLXZpc2libGUvYmxvYi9tYXN0ZXIvZXhwbGFpbmVyLm1kKS5cbiAgICovXG4gIGZvY3VzVmlzaWJsZUNsYXNzTmFtZTogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25CbHVyOiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25DbGljazogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uRm9jdXM6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBjb21wb25lbnQgaXMgZm9jdXNlZCB3aXRoIGEga2V5Ym9hcmQuXG4gICAqIFdlIHRyaWdnZXIgYSBgb25Gb2N1c2AgY2FsbGJhY2sgdG9vLlxuICAgKi9cbiAgb25Gb2N1c1Zpc2libGU6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbktleURvd246IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbktleVVwOiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25Nb3VzZURvd246IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbk1vdXNlTGVhdmU6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbk1vdXNlVXA6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvblRvdWNoRW5kOiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25Ub3VjaE1vdmU6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvblRvdWNoU3RhcnQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICByb2xlOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICB0YWJJbmRleDogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlcy5kZWZhdWx0Lm51bWJlciwgX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZ10pLFxuXG4gIC8qKlxuICAgKiBQcm9wZXJ0aWVzIGFwcGxpZWQgdG8gdGhlIGBUb3VjaFJpcHBsZWAgZWxlbWVudC5cbiAgICovXG4gIFRvdWNoUmlwcGxlUHJvcHM6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QsXG5cbiAgLyoqXG4gICAqIFVzZWQgdG8gY29udHJvbCB0aGUgYnV0dG9uJ3MgcHVycG9zZS5cbiAgICogVGhpcyBwcm9wZXJ0eSBwYXNzZXMgdGhlIHZhbHVlIHRvIHRoZSBgdHlwZWAgYXR0cmlidXRlIG9mIHRoZSBuYXRpdmUgYnV0dG9uIGNvbXBvbmVudC5cbiAgICogVmFsaWQgcHJvcGVydHkgdmFsdWVzIGluY2x1ZGUgYGJ1dHRvbmAsIGBzdWJtaXRgLCBhbmQgYHJlc2V0YC5cbiAgICovXG4gIHR5cGU6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmdcbn0gOiB7fTtcbkJ1dHRvbkJhc2UuZGVmYXVsdFByb3BzID0ge1xuICBjZW50ZXJSaXBwbGU6IGZhbHNlLFxuICBjb21wb25lbnQ6ICdidXR0b24nLFxuICBkaXNhYmxlUmlwcGxlOiBmYWxzZSxcbiAgZm9jdXNSaXBwbGU6IGZhbHNlLFxuICB0YWJJbmRleDogJzAnLFxuICB0eXBlOiAnYnV0dG9uJ1xufTtcblxudmFyIF9kZWZhdWx0ID0gKDAsIF93aXRoU3R5bGVzLmRlZmF1bHQpKHN0eWxlcywge1xuICBuYW1lOiAnTXVpQnV0dG9uQmFzZSdcbn0pKEJ1dHRvbkJhc2UpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuc3R5bGVzID0gdm9pZCAwO1xuXG52YXIgX2V4dGVuZHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2V4dGVuZHNcIikpO1xuXG52YXIgX2RlZmluZVByb3BlcnR5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9kZWZpbmVQcm9wZXJ0eVwiKSk7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCIpKTtcblxudmFyIF9vYmplY3RTcHJlYWQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL29iamVjdFNwcmVhZFwiKSk7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbnZhciBfY2xhc3NuYW1lcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImNsYXNzbmFtZXNcIikpO1xuXG52YXIgX3dpdGhTdHlsZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9zdHlsZXMvd2l0aFN0eWxlc1wiKSk7XG5cbnZhciBfY29sb3JNYW5pcHVsYXRvciA9IHJlcXVpcmUoXCIuLi9zdHlsZXMvY29sb3JNYW5pcHVsYXRvclwiKTtcblxudmFyIF9CdXR0b25CYXNlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vQnV0dG9uQmFzZVwiKSk7XG5cbnZhciBfaGVscGVycyA9IHJlcXVpcmUoXCIuLi91dGlscy9oZWxwZXJzXCIpO1xuXG4vLyBAaW5oZXJpdGVkQ29tcG9uZW50IEJ1dHRvbkJhc2VcbnZhciBzdHlsZXMgPSBmdW5jdGlvbiBzdHlsZXModGhlbWUpIHtcbiAgcmV0dXJuIHtcbiAgICByb290OiAoMCwgX29iamVjdFNwcmVhZDIuZGVmYXVsdCkoe30sIHRoZW1lLnR5cG9ncmFwaHkuYnV0dG9uLCB7XG4gICAgICBsaW5lSGVpZ2h0OiAnMS40ZW0nLFxuICAgICAgLy8gSW1wcm92ZSByZWFkYWJpbGl0eSBmb3IgbXVsdGlsaW5lIGJ1dHRvbi5cbiAgICAgIGJveFNpemluZzogJ2JvcmRlci1ib3gnLFxuICAgICAgbWluV2lkdGg6IHRoZW1lLnNwYWNpbmcudW5pdCAqIDExLFxuICAgICAgbWluSGVpZ2h0OiAzNixcbiAgICAgIHBhZGRpbmc6IFwiXCIuY29uY2F0KHRoZW1lLnNwYWNpbmcudW5pdCwgXCJweCBcIikuY29uY2F0KHRoZW1lLnNwYWNpbmcudW5pdCAqIDIsIFwicHhcIiksXG4gICAgICBib3JkZXJSYWRpdXM6IDQsXG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS50ZXh0LnByaW1hcnksXG4gICAgICB0cmFuc2l0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoWydiYWNrZ3JvdW5kLWNvbG9yJywgJ2JveC1zaGFkb3cnXSwge1xuICAgICAgICBkdXJhdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuZHVyYXRpb24uc2hvcnRcbiAgICAgIH0pLFxuICAgICAgJyY6aG92ZXInOiB7XG4gICAgICAgIHRleHREZWNvcmF0aW9uOiAnbm9uZScsXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogKDAsIF9jb2xvck1hbmlwdWxhdG9yLmZhZGUpKHRoZW1lLnBhbGV0dGUudGV4dC5wcmltYXJ5LCB0aGVtZS5wYWxldHRlLmFjdGlvbi5ob3Zlck9wYWNpdHkpLFxuICAgICAgICAvLyBSZXNldCBvbiB0b3VjaCBkZXZpY2VzLCBpdCBkb2Vzbid0IGFkZCBzcGVjaWZpY2l0eVxuICAgICAgICAnQG1lZGlhIChob3Zlcjogbm9uZSknOiB7XG4gICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnXG4gICAgICAgIH0sXG4gICAgICAgICcmJGRpc2FibGVkJzoge1xuICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJ3RyYW5zcGFyZW50J1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgJyYkZGlzYWJsZWQnOiB7XG4gICAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLmFjdGlvbi5kaXNhYmxlZFxuICAgICAgfVxuICAgIH0pLFxuICAgIGxhYmVsOiB7XG4gICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgZGlzcGxheTogJ2luaGVyaXQnLFxuICAgICAgYWxpZ25JdGVtczogJ2luaGVyaXQnLFxuICAgICAganVzdGlmeUNvbnRlbnQ6ICdpbmhlcml0J1xuICAgIH0sXG4gICAgdGV4dFByaW1hcnk6IHtcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnByaW1hcnkubWFpbixcbiAgICAgICcmOmhvdmVyJzoge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICgwLCBfY29sb3JNYW5pcHVsYXRvci5mYWRlKSh0aGVtZS5wYWxldHRlLnByaW1hcnkubWFpbiwgdGhlbWUucGFsZXR0ZS5hY3Rpb24uaG92ZXJPcGFjaXR5KSxcbiAgICAgICAgLy8gUmVzZXQgb24gdG91Y2ggZGV2aWNlcywgaXQgZG9lc24ndCBhZGQgc3BlY2lmaWNpdHlcbiAgICAgICAgJ0BtZWRpYSAoaG92ZXI6IG5vbmUpJzoge1xuICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJ3RyYW5zcGFyZW50J1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICB0ZXh0U2Vjb25kYXJ5OiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5zZWNvbmRhcnkubWFpbixcbiAgICAgICcmOmhvdmVyJzoge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICgwLCBfY29sb3JNYW5pcHVsYXRvci5mYWRlKSh0aGVtZS5wYWxldHRlLnNlY29uZGFyeS5tYWluLCB0aGVtZS5wYWxldHRlLmFjdGlvbi5ob3Zlck9wYWNpdHkpLFxuICAgICAgICAvLyBSZXNldCBvbiB0b3VjaCBkZXZpY2VzLCBpdCBkb2Vzbid0IGFkZCBzcGVjaWZpY2l0eVxuICAgICAgICAnQG1lZGlhIChob3Zlcjogbm9uZSknOiB7XG4gICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIGZsYXQ6IHt9LFxuICAgIGZsYXRQcmltYXJ5OiB7fSxcbiAgICBmbGF0U2Vjb25kYXJ5OiB7fSxcbiAgICBvdXRsaW5lZDoge1xuICAgICAgYm9yZGVyOiBcIjFweCBzb2xpZCBcIi5jb25jYXQodGhlbWUucGFsZXR0ZS50eXBlID09PSAnbGlnaHQnID8gJ3JnYmEoMCwgMCwgMCwgMC4yMyknIDogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC4yMyknKVxuICAgIH0sXG4gICAgY29sb3JJbmhlcml0OiB7XG4gICAgICBjb2xvcjogJ2luaGVyaXQnXG4gICAgfSxcbiAgICBjb250YWluZWQ6IHtcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLmdldENvbnRyYXN0VGV4dCh0aGVtZS5wYWxldHRlLmdyZXlbMzAwXSksXG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUuZ3JleVszMDBdLFxuICAgICAgYm94U2hhZG93OiB0aGVtZS5zaGFkb3dzWzJdLFxuICAgICAgJyYkZm9jdXNWaXNpYmxlJzoge1xuICAgICAgICBib3hTaGFkb3c6IHRoZW1lLnNoYWRvd3NbNl1cbiAgICAgIH0sXG4gICAgICAnJjphY3RpdmUnOiB7XG4gICAgICAgIGJveFNoYWRvdzogdGhlbWUuc2hhZG93c1s4XVxuICAgICAgfSxcbiAgICAgICcmJGRpc2FibGVkJzoge1xuICAgICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5hY3Rpb24uZGlzYWJsZWQsXG4gICAgICAgIGJveFNoYWRvdzogdGhlbWUuc2hhZG93c1swXSxcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLmFjdGlvbi5kaXNhYmxlZEJhY2tncm91bmRcbiAgICAgIH0sXG4gICAgICAnJjpob3Zlcic6IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLmdyZXkuQTEwMCxcbiAgICAgICAgLy8gUmVzZXQgb24gdG91Y2ggZGV2aWNlcywgaXQgZG9lc24ndCBhZGQgc3BlY2lmaWNpdHlcbiAgICAgICAgJ0BtZWRpYSAoaG92ZXI6IG5vbmUpJzoge1xuICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS5ncmV5WzMwMF1cbiAgICAgICAgfSxcbiAgICAgICAgJyYkZGlzYWJsZWQnOiB7XG4gICAgICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLmFjdGlvbi5kaXNhYmxlZEJhY2tncm91bmRcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgY29udGFpbmVkUHJpbWFyeToge1xuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUucHJpbWFyeS5jb250cmFzdFRleHQsXG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUucHJpbWFyeS5tYWluLFxuICAgICAgJyY6aG92ZXInOiB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS5wcmltYXJ5LmRhcmssXG4gICAgICAgIC8vIFJlc2V0IG9uIHRvdWNoIGRldmljZXMsIGl0IGRvZXNuJ3QgYWRkIHNwZWNpZmljaXR5XG4gICAgICAgICdAbWVkaWEgKGhvdmVyOiBub25lKSc6IHtcbiAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUucHJpbWFyeS5tYWluXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIGNvbnRhaW5lZFNlY29uZGFyeToge1xuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuc2Vjb25kYXJ5LmNvbnRyYXN0VGV4dCxcbiAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS5zZWNvbmRhcnkubWFpbixcbiAgICAgICcmOmhvdmVyJzoge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUuc2Vjb25kYXJ5LmRhcmssXG4gICAgICAgIC8vIFJlc2V0IG9uIHRvdWNoIGRldmljZXMsIGl0IGRvZXNuJ3QgYWRkIHNwZWNpZmljaXR5XG4gICAgICAgICdAbWVkaWEgKGhvdmVyOiBub25lKSc6IHtcbiAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUuc2Vjb25kYXJ5Lm1haW5cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgcmFpc2VkOiB7fSxcbiAgICByYWlzZWRQcmltYXJ5OiB7fSxcbiAgICByYWlzZWRTZWNvbmRhcnk6IHt9LFxuICAgIGZvY3VzVmlzaWJsZToge30sXG4gICAgZGlzYWJsZWQ6IHt9LFxuICAgIGZhYjoge1xuICAgICAgYm9yZGVyUmFkaXVzOiAnNTAlJyxcbiAgICAgIHBhZGRpbmc6IDAsXG4gICAgICBtaW5XaWR0aDogMCxcbiAgICAgIHdpZHRoOiA1NixcbiAgICAgIGZvbnRTaXplOiAyNCxcbiAgICAgIGhlaWdodDogNTYsXG4gICAgICBib3hTaGFkb3c6IHRoZW1lLnNoYWRvd3NbNl0sXG4gICAgICAnJjphY3RpdmUnOiB7XG4gICAgICAgIGJveFNoYWRvdzogdGhlbWUuc2hhZG93c1sxMl1cbiAgICAgIH1cbiAgICB9LFxuICAgIG1pbmk6IHtcbiAgICAgIHdpZHRoOiA0MCxcbiAgICAgIGhlaWdodDogNDBcbiAgICB9LFxuICAgIHNpemVTbWFsbDoge1xuICAgICAgcGFkZGluZzogXCJcIi5jb25jYXQodGhlbWUuc3BhY2luZy51bml0IC0gMSwgXCJweCBcIikuY29uY2F0KHRoZW1lLnNwYWNpbmcudW5pdCwgXCJweFwiKSxcbiAgICAgIG1pbldpZHRoOiB0aGVtZS5zcGFjaW5nLnVuaXQgKiA4LFxuICAgICAgbWluSGVpZ2h0OiAzMixcbiAgICAgIGZvbnRTaXplOiB0aGVtZS50eXBvZ3JhcGh5LnB4VG9SZW0oMTMpXG4gICAgfSxcbiAgICBzaXplTGFyZ2U6IHtcbiAgICAgIHBhZGRpbmc6IFwiXCIuY29uY2F0KHRoZW1lLnNwYWNpbmcudW5pdCwgXCJweCBcIikuY29uY2F0KHRoZW1lLnNwYWNpbmcudW5pdCAqIDMsIFwicHhcIiksXG4gICAgICBtaW5XaWR0aDogdGhlbWUuc3BhY2luZy51bml0ICogMTQsXG4gICAgICBtaW5IZWlnaHQ6IDQwLFxuICAgICAgZm9udFNpemU6IHRoZW1lLnR5cG9ncmFwaHkucHhUb1JlbSgxNSlcbiAgICB9LFxuICAgIGZ1bGxXaWR0aDoge1xuICAgICAgd2lkdGg6ICcxMDAlJ1xuICAgIH1cbiAgfTtcbn07XG5cbmV4cG9ydHMuc3R5bGVzID0gc3R5bGVzO1xuXG5mdW5jdGlvbiBCdXR0b24ocHJvcHMpIHtcbiAgdmFyIF9jbGFzc05hbWVzO1xuXG4gIHZhciBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBjbGFzc05hbWVQcm9wID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgY29sb3IgPSBwcm9wcy5jb2xvcixcbiAgICAgIGRpc2FibGVkID0gcHJvcHMuZGlzYWJsZWQsXG4gICAgICBkaXNhYmxlRm9jdXNSaXBwbGUgPSBwcm9wcy5kaXNhYmxlRm9jdXNSaXBwbGUsXG4gICAgICBmdWxsV2lkdGggPSBwcm9wcy5mdWxsV2lkdGgsXG4gICAgICBmb2N1c1Zpc2libGVDbGFzc05hbWUgPSBwcm9wcy5mb2N1c1Zpc2libGVDbGFzc05hbWUsXG4gICAgICBtaW5pID0gcHJvcHMubWluaSxcbiAgICAgIHNpemUgPSBwcm9wcy5zaXplLFxuICAgICAgdmFyaWFudCA9IHByb3BzLnZhcmlhbnQsXG4gICAgICBvdGhlciA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyLmRlZmF1bHQpKHByb3BzLCBbXCJjaGlsZHJlblwiLCBcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJjb2xvclwiLCBcImRpc2FibGVkXCIsIFwiZGlzYWJsZUZvY3VzUmlwcGxlXCIsIFwiZnVsbFdpZHRoXCIsIFwiZm9jdXNWaXNpYmxlQ2xhc3NOYW1lXCIsIFwibWluaVwiLCBcInNpemVcIiwgXCJ2YXJpYW50XCJdKTtcbiAgdmFyIGZhYiA9IHZhcmlhbnQgPT09ICdmYWInO1xuICB2YXIgY29udGFpbmVkID0gdmFyaWFudCA9PT0gJ2NvbnRhaW5lZCcgfHwgdmFyaWFudCA9PT0gJ3JhaXNlZCc7XG4gIHZhciB0ZXh0ID0gIWNvbnRhaW5lZCAmJiAhZmFiO1xuICB2YXIgY2xhc3NOYW1lID0gKDAsIF9jbGFzc25hbWVzLmRlZmF1bHQpKGNsYXNzZXMucm9vdCwgKF9jbGFzc05hbWVzID0ge30sICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKF9jbGFzc05hbWVzLCBjbGFzc2VzLmNvbnRhaW5lZCwgY29udGFpbmVkIHx8IGZhYiksICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKF9jbGFzc05hbWVzLCBjbGFzc2VzLmZhYiwgZmFiKSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2NsYXNzTmFtZXMsIGNsYXNzZXMubWluaSwgZmFiICYmIG1pbmkpLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lcywgY2xhc3Nlcy5jb2xvckluaGVyaXQsIGNvbG9yID09PSAnaW5oZXJpdCcpLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lcywgY2xhc3Nlcy50ZXh0UHJpbWFyeSwgdGV4dCAmJiBjb2xvciA9PT0gJ3ByaW1hcnknKSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2NsYXNzTmFtZXMsIGNsYXNzZXMudGV4dFNlY29uZGFyeSwgdGV4dCAmJiBjb2xvciA9PT0gJ3NlY29uZGFyeScpLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lcywgY2xhc3Nlcy5mbGF0LCB0ZXh0KSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2NsYXNzTmFtZXMsIGNsYXNzZXMuZmxhdFByaW1hcnksIHRleHQgJiYgY29sb3IgPT09ICdwcmltYXJ5JyksICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKF9jbGFzc05hbWVzLCBjbGFzc2VzLmZsYXRTZWNvbmRhcnksIHRleHQgJiYgY29sb3IgPT09ICdzZWNvbmRhcnknKSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2NsYXNzTmFtZXMsIGNsYXNzZXMuY29udGFpbmVkUHJpbWFyeSwgIXRleHQgJiYgY29sb3IgPT09ICdwcmltYXJ5JyksICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKF9jbGFzc05hbWVzLCBjbGFzc2VzLmNvbnRhaW5lZFNlY29uZGFyeSwgIXRleHQgJiYgY29sb3IgPT09ICdzZWNvbmRhcnknKSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2NsYXNzTmFtZXMsIGNsYXNzZXMucmFpc2VkLCBjb250YWluZWQgfHwgZmFiKSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2NsYXNzTmFtZXMsIGNsYXNzZXMucmFpc2VkUHJpbWFyeSwgKGNvbnRhaW5lZCB8fCBmYWIpICYmIGNvbG9yID09PSAncHJpbWFyeScpLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lcywgY2xhc3Nlcy5yYWlzZWRTZWNvbmRhcnksIChjb250YWluZWQgfHwgZmFiKSAmJiBjb2xvciA9PT0gJ3NlY29uZGFyeScpLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lcywgY2xhc3Nlcy50ZXh0LCB2YXJpYW50ID09PSAndGV4dCcpLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lcywgY2xhc3Nlcy5vdXRsaW5lZCwgdmFyaWFudCA9PT0gJ291dGxpbmVkJyksICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKF9jbGFzc05hbWVzLCBjbGFzc2VzW1wic2l6ZVwiLmNvbmNhdCgoMCwgX2hlbHBlcnMuY2FwaXRhbGl6ZSkoc2l6ZSkpXSwgc2l6ZSAhPT0gJ21lZGl1bScpLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lcywgY2xhc3Nlcy5kaXNhYmxlZCwgZGlzYWJsZWQpLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lcywgY2xhc3Nlcy5mdWxsV2lkdGgsIGZ1bGxXaWR0aCksIF9jbGFzc05hbWVzKSwgY2xhc3NOYW1lUHJvcCk7XG4gIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9CdXR0b25CYXNlLmRlZmF1bHQsICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe1xuICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lLFxuICAgIGRpc2FibGVkOiBkaXNhYmxlZCxcbiAgICBmb2N1c1JpcHBsZTogIWRpc2FibGVGb2N1c1JpcHBsZSxcbiAgICBmb2N1c1Zpc2libGVDbGFzc05hbWU6ICgwLCBfY2xhc3NuYW1lcy5kZWZhdWx0KShjbGFzc2VzLmZvY3VzVmlzaWJsZSwgZm9jdXNWaXNpYmxlQ2xhc3NOYW1lKVxuICB9LCBvdGhlciksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICBjbGFzc05hbWU6IGNsYXNzZXMubGFiZWxcbiAgfSwgY2hpbGRyZW4pKTtcbn1cblxuQnV0dG9uLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBidXR0b24uXG4gICAqL1xuICBjaGlsZHJlbjogX3Byb3BUeXBlcy5kZWZhdWx0Lm5vZGUuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MtYXBpKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBjb2xvciBvZiB0aGUgY29tcG9uZW50LiBJdCBzdXBwb3J0cyB0aG9zZSB0aGVtZSBjb2xvcnMgdGhhdCBtYWtlIHNlbnNlIGZvciB0aGlzIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbG9yOiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2YoWydkZWZhdWx0JywgJ2luaGVyaXQnLCAncHJpbWFyeScsICdzZWNvbmRhcnknXSksXG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIERPTSBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgY29tcG9uZW50OiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLCBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuY10pLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBidXR0b24gd2lsbCBiZSBkaXNhYmxlZC5cbiAgICovXG4gIGRpc2FibGVkOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgIGtleWJvYXJkIGZvY3VzIHJpcHBsZSB3aWxsIGJlIGRpc2FibGVkLlxuICAgKiBgZGlzYWJsZVJpcHBsZWAgbXVzdCBhbHNvIGJlIHRydWUuXG4gICAqL1xuICBkaXNhYmxlRm9jdXNSaXBwbGU6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSByaXBwbGUgZWZmZWN0IHdpbGwgYmUgZGlzYWJsZWQuXG4gICAqL1xuICBkaXNhYmxlUmlwcGxlOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgZm9jdXNWaXNpYmxlQ2xhc3NOYW1lOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBidXR0b24gd2lsbCB0YWtlIHVwIHRoZSBmdWxsIHdpZHRoIG9mIGl0cyBjb250YWluZXIuXG4gICAqL1xuICBmdWxsV2lkdGg6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgVVJMIHRvIGxpbmsgdG8gd2hlbiB0aGUgYnV0dG9uIGlzIGNsaWNrZWQuXG4gICAqIElmIGRlZmluZWQsIGFuIGBhYCBlbGVtZW50IHdpbGwgYmUgdXNlZCBhcyB0aGUgcm9vdCBub2RlLlxuICAgKi9cbiAgaHJlZjogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCBhbmQgYHZhcmlhbnRgIGlzIGAnZmFiJ2AsIHdpbGwgdXNlIG1pbmkgZmxvYXRpbmcgYWN0aW9uIGJ1dHRvbiBzdHlsaW5nLlxuICAgKi9cbiAgbWluaTogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSBzaXplIG9mIHRoZSBidXR0b24uXG4gICAqIGBzbWFsbGAgaXMgZXF1aXZhbGVudCB0byB0aGUgZGVuc2UgYnV0dG9uIHN0eWxpbmcuXG4gICAqL1xuICBzaXplOiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2YoWydzbWFsbCcsICdtZWRpdW0nLCAnbGFyZ2UnXSksXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHR5cGU6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSB0eXBlIG9mIGJ1dHRvbi5cbiAgICovXG4gIHZhcmlhbnQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZihbJ3RleHQnLCAnZmxhdCcsICdvdXRsaW5lZCcsICdjb250YWluZWQnLCAncmFpc2VkJywgJ2ZhYiddKVxufSA6IHt9O1xuQnV0dG9uLmRlZmF1bHRQcm9wcyA9IHtcbiAgY29sb3I6ICdkZWZhdWx0JyxcbiAgY29tcG9uZW50OiAnYnV0dG9uJyxcbiAgZGlzYWJsZWQ6IGZhbHNlLFxuICBkaXNhYmxlRm9jdXNSaXBwbGU6IGZhbHNlLFxuICBmdWxsV2lkdGg6IGZhbHNlLFxuICBtaW5pOiBmYWxzZSxcbiAgc2l6ZTogJ21lZGl1bScsXG4gIHR5cGU6ICdidXR0b24nLFxuICB2YXJpYW50OiAndGV4dCdcbn07XG5cbnZhciBfZGVmYXVsdCA9ICgwLCBfd2l0aFN0eWxlcy5kZWZhdWx0KShzdHlsZXMsIHtcbiAgbmFtZTogJ011aUJ1dHRvbidcbn0pKEJ1dHRvbik7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5zdHlsZXMgPSB2b2lkIDA7XG5cbnZhciBfZXh0ZW5kczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vZXh0ZW5kc1wiKSk7XG5cbnZhciBfZGVmaW5lUHJvcGVydHkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2RlZmluZVByb3BlcnR5XCIpKTtcblxudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIikpO1xuXG52YXIgX29iamVjdFNwcmVhZDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vb2JqZWN0U3ByZWFkXCIpKTtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKTtcblxudmFyIF9jbGFzc25hbWVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY2xhc3NuYW1lc1wiKSk7XG5cbnZhciBfd2l0aFN0eWxlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3N0eWxlcy93aXRoU3R5bGVzXCIpKTtcblxudmFyIHN0eWxlcyA9IGZ1bmN0aW9uIHN0eWxlcyh0aGVtZSkge1xuICByZXR1cm4ge1xuICAgIHJvb3Q6ICgwLCBfb2JqZWN0U3ByZWFkMi5kZWZhdWx0KSh7fSwgdGhlbWUubWl4aW5zLnRvb2xiYXIsIHtcbiAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcidcbiAgICB9KSxcbiAgICBndXR0ZXJzOiB0aGVtZS5taXhpbnMuZ3V0dGVycygpXG4gIH07XG59O1xuXG5leHBvcnRzLnN0eWxlcyA9IHN0eWxlcztcblxuZnVuY3Rpb24gVG9vbGJhcihwcm9wcykge1xuICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY2xhc3NOYW1lUHJvcCA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIGRpc2FibGVHdXR0ZXJzID0gcHJvcHMuZGlzYWJsZUd1dHRlcnMsXG4gICAgICBvdGhlciA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyLmRlZmF1bHQpKHByb3BzLCBbXCJjaGlsZHJlblwiLCBcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJkaXNhYmxlR3V0dGVyc1wiXSk7XG4gIHZhciBjbGFzc05hbWUgPSAoMCwgX2NsYXNzbmFtZXMuZGVmYXVsdCkoY2xhc3Nlcy5yb290LCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KSh7fSwgY2xhc3Nlcy5ndXR0ZXJzLCAhZGlzYWJsZUd1dHRlcnMpLCBjbGFzc05hbWVQcm9wKTtcbiAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7XG4gICAgY2xhc3NOYW1lOiBjbGFzc05hbWVcbiAgfSwgb3RoZXIpLCBjaGlsZHJlbik7XG59XG5cblRvb2xiYXIucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKipcbiAgICogVG9vbGJhciBjaGlsZHJlbiwgdXN1YWxseSBhIG1peHR1cmUgb2YgYEljb25CdXR0b25gLCBgQnV0dG9uYCBhbmQgYFR5cG9ncmFwaHlgLlxuICAgKi9cbiAgY2hpbGRyZW46IF9wcm9wVHlwZXMuZGVmYXVsdC5ub2RlLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2Nzcy1hcGkpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCBkaXNhYmxlcyBndXR0ZXIgcGFkZGluZy5cbiAgICovXG4gIGRpc2FibGVHdXR0ZXJzOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbFxufSA6IHt9O1xuVG9vbGJhci5kZWZhdWx0UHJvcHMgPSB7XG4gIGRpc2FibGVHdXR0ZXJzOiBmYWxzZVxufTtcblxudmFyIF9kZWZhdWx0ID0gKDAsIF93aXRoU3R5bGVzLmRlZmF1bHQpKHN0eWxlcywge1xuICBuYW1lOiAnTXVpVG9vbGJhcidcbn0pKFRvb2xiYXIpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuc3R5bGVzID0gdm9pZCAwO1xuXG52YXIgX2V4dGVuZHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2V4dGVuZHNcIikpO1xuXG52YXIgX2RlZmluZVByb3BlcnR5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9kZWZpbmVQcm9wZXJ0eVwiKSk7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCIpKTtcblxudmFyIF9vYmplY3RTcHJlYWQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL29iamVjdFNwcmVhZFwiKSk7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbnZhciBfY2xhc3NuYW1lcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImNsYXNzbmFtZXNcIikpO1xuXG52YXIgX3dhcm5pbmcgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJ3YXJuaW5nXCIpKTtcblxudmFyIF93aXRoU3R5bGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vc3R5bGVzL3dpdGhTdHlsZXNcIikpO1xuXG52YXIgc3R5bGVzID0gZnVuY3Rpb24gc3R5bGVzKHRoZW1lKSB7XG4gIHZhciBlbGV2YXRpb25zID0ge307XG4gIHRoZW1lLnNoYWRvd3MuZm9yRWFjaChmdW5jdGlvbiAoc2hhZG93LCBpbmRleCkge1xuICAgIGVsZXZhdGlvbnNbXCJlbGV2YXRpb25cIi5jb25jYXQoaW5kZXgpXSA9IHtcbiAgICAgIGJveFNoYWRvdzogc2hhZG93XG4gICAgfTtcbiAgfSk7XG4gIHJldHVybiAoMCwgX29iamVjdFNwcmVhZDIuZGVmYXVsdCkoe1xuICAgIHJvb3Q6IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS5iYWNrZ3JvdW5kLnBhcGVyXG4gICAgfSxcbiAgICByb3VuZGVkOiB7XG4gICAgICBib3JkZXJSYWRpdXM6IDJcbiAgICB9XG4gIH0sIGVsZXZhdGlvbnMpO1xufTtcblxuZXhwb3J0cy5zdHlsZXMgPSBzdHlsZXM7XG5cbmZ1bmN0aW9uIFBhcGVyKHByb3BzKSB7XG4gIHZhciBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZVByb3AgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBDb21wb25lbnQgPSBwcm9wcy5jb21wb25lbnQsXG4gICAgICBzcXVhcmUgPSBwcm9wcy5zcXVhcmUsXG4gICAgICBlbGV2YXRpb24gPSBwcm9wcy5lbGV2YXRpb24sXG4gICAgICBvdGhlciA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyLmRlZmF1bHQpKHByb3BzLCBbXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29tcG9uZW50XCIsIFwic3F1YXJlXCIsIFwiZWxldmF0aW9uXCJdKTtcbiAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gKDAsIF93YXJuaW5nLmRlZmF1bHQpKGVsZXZhdGlvbiA+PSAwICYmIGVsZXZhdGlvbiA8IDI1LCBcIk1hdGVyaWFsLVVJOiB0aGlzIGVsZXZhdGlvbiBgXCIuY29uY2F0KGVsZXZhdGlvbiwgXCJgIGlzIG5vdCBpbXBsZW1lbnRlZC5cIikpIDogdm9pZCAwO1xuICB2YXIgY2xhc3NOYW1lID0gKDAsIF9jbGFzc25hbWVzLmRlZmF1bHQpKGNsYXNzZXMucm9vdCwgY2xhc3Nlc1tcImVsZXZhdGlvblwiLmNvbmNhdChlbGV2YXRpb24pXSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoe30sIGNsYXNzZXMucm91bmRlZCwgIXNxdWFyZSksIGNsYXNzTmFtZVByb3ApO1xuICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChDb21wb25lbnQsICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe1xuICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lXG4gIH0sIG90aGVyKSk7XG59XG5cblBhcGVyLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogX3Byb3BUeXBlcy5kZWZhdWx0Lm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzLWFwaSkgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBET00gZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZywgX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmNdKSxcblxuICAvKipcbiAgICogU2hhZG93IGRlcHRoLCBjb3JyZXNwb25kcyB0byBgZHBgIGluIHRoZSBzcGVjLlxuICAgKiBJdCdzIGFjY2VwdGluZyB2YWx1ZXMgYmV0d2VlbiAwIGFuZCAyNCBpbmNsdXNpdmUuXG4gICAqL1xuICBlbGV2YXRpb246IF9wcm9wVHlwZXMuZGVmYXVsdC5udW1iZXIsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgcm91bmRlZCBjb3JuZXJzIGFyZSBkaXNhYmxlZC5cbiAgICovXG4gIHNxdWFyZTogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2xcbn0gOiB7fTtcblBhcGVyLmRlZmF1bHRQcm9wcyA9IHtcbiAgY29tcG9uZW50OiAnZGl2JyxcbiAgZWxldmF0aW9uOiAyLFxuICBzcXVhcmU6IGZhbHNlXG59O1xuXG52YXIgX2RlZmF1bHQgPSAoMCwgX3dpdGhTdHlsZXMuZGVmYXVsdCkoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlQYXBlcidcbn0pKFBhcGVyKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLnN0eWxlcyA9IHZvaWQgMDtcblxudmFyIF9leHRlbmRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9leHRlbmRzXCIpKTtcblxudmFyIF9kZWZpbmVQcm9wZXJ0eTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vZGVmaW5lUHJvcGVydHlcIikpO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiKSk7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbnZhciBfY2xhc3NuYW1lcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImNsYXNzbmFtZXNcIikpO1xuXG52YXIgX3dpdGhTdHlsZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9zdHlsZXMvd2l0aFN0eWxlc1wiKSk7XG5cbnZhciBfaGVscGVycyA9IHJlcXVpcmUoXCIuLi91dGlscy9oZWxwZXJzXCIpO1xuXG52YXIgX1BhcGVyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vUGFwZXJcIikpO1xuXG4vLyBAaW5oZXJpdGVkQ29tcG9uZW50IFBhcGVyXG52YXIgc3R5bGVzID0gZnVuY3Rpb24gc3R5bGVzKHRoZW1lKSB7XG4gIHZhciBiYWNrZ3JvdW5kQ29sb3JEZWZhdWx0ID0gdGhlbWUucGFsZXR0ZS50eXBlID09PSAnbGlnaHQnID8gdGhlbWUucGFsZXR0ZS5ncmV5WzEwMF0gOiB0aGVtZS5wYWxldHRlLmdyZXlbOTAwXTtcbiAgcmV0dXJuIHtcbiAgICByb290OiB7XG4gICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICBmbGV4RGlyZWN0aW9uOiAnY29sdW1uJyxcbiAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgICAgIC8vIFByZXZlbnQgcGFkZGluZyBpc3N1ZSB3aXRoIHRoZSBNb2RhbCBhbmQgZml4ZWQgcG9zaXRpb25lZCBBcHBCYXIuXG4gICAgICB6SW5kZXg6IHRoZW1lLnpJbmRleC5hcHBCYXIsXG4gICAgICBmbGV4U2hyaW5rOiAwXG4gICAgfSxcbiAgICBwb3NpdGlvbkZpeGVkOiB7XG4gICAgICBwb3NpdGlvbjogJ2ZpeGVkJyxcbiAgICAgIHRvcDogMCxcbiAgICAgIGxlZnQ6ICdhdXRvJyxcbiAgICAgIHJpZ2h0OiAwXG4gICAgfSxcbiAgICBwb3NpdGlvbkFic29sdXRlOiB7XG4gICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgIHRvcDogMCxcbiAgICAgIGxlZnQ6ICdhdXRvJyxcbiAgICAgIHJpZ2h0OiAwXG4gICAgfSxcbiAgICBwb3NpdGlvblN0aWNreToge1xuICAgICAgcG9zaXRpb246ICdzdGlja3knLFxuICAgICAgdG9wOiAwLFxuICAgICAgbGVmdDogJ2F1dG8nLFxuICAgICAgcmlnaHQ6IDBcbiAgICB9LFxuICAgIHBvc2l0aW9uU3RhdGljOiB7XG4gICAgICBwb3NpdGlvbjogJ3N0YXRpYydcbiAgICB9LFxuICAgIGNvbG9yRGVmYXVsdDoge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiBiYWNrZ3JvdW5kQ29sb3JEZWZhdWx0LFxuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuZ2V0Q29udHJhc3RUZXh0KGJhY2tncm91bmRDb2xvckRlZmF1bHQpXG4gICAgfSxcbiAgICBjb2xvclByaW1hcnk6IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS5wcmltYXJ5Lm1haW4sXG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5wcmltYXJ5LmNvbnRyYXN0VGV4dFxuICAgIH0sXG4gICAgY29sb3JTZWNvbmRhcnk6IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS5zZWNvbmRhcnkubWFpbixcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnNlY29uZGFyeS5jb250cmFzdFRleHRcbiAgICB9XG4gIH07XG59O1xuXG5leHBvcnRzLnN0eWxlcyA9IHN0eWxlcztcblxuZnVuY3Rpb24gQXBwQmFyKHByb3BzKSB7XG4gIHZhciBfY2xhc3NOYW1lcztcblxuICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY2xhc3NOYW1lUHJvcCA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIGNvbG9yID0gcHJvcHMuY29sb3IsXG4gICAgICBwb3NpdGlvbiA9IHByb3BzLnBvc2l0aW9uLFxuICAgICAgb3RoZXIgPSAoMCwgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMi5kZWZhdWx0KShwcm9wcywgW1wiY2hpbGRyZW5cIiwgXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29sb3JcIiwgXCJwb3NpdGlvblwiXSk7XG4gIHZhciBjbGFzc05hbWUgPSAoMCwgX2NsYXNzbmFtZXMuZGVmYXVsdCkoY2xhc3Nlcy5yb290LCBjbGFzc2VzW1wicG9zaXRpb25cIi5jb25jYXQoKDAsIF9oZWxwZXJzLmNhcGl0YWxpemUpKHBvc2l0aW9uKSldLCAoX2NsYXNzTmFtZXMgPSB7fSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2NsYXNzTmFtZXMsIGNsYXNzZXNbXCJjb2xvclwiLmNvbmNhdCgoMCwgX2hlbHBlcnMuY2FwaXRhbGl6ZSkoY29sb3IpKV0sIGNvbG9yICE9PSAnaW5oZXJpdCcpLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lcywgJ211aS1maXhlZCcsIHBvc2l0aW9uID09PSAnZml4ZWQnKSwgX2NsYXNzTmFtZXMpLCBjbGFzc05hbWVQcm9wKTtcbiAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX1BhcGVyLmRlZmF1bHQsICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe1xuICAgIHNxdWFyZTogdHJ1ZSxcbiAgICBjb21wb25lbnQ6IFwiaGVhZGVyXCIsXG4gICAgZWxldmF0aW9uOiA0LFxuICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lXG4gIH0sIG90aGVyKSwgY2hpbGRyZW4pO1xufVxuXG5BcHBCYXIucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBfcHJvcFR5cGVzLmRlZmF1bHQubm9kZS5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2Nzcy1hcGkpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGNvbG9yIG9mIHRoZSBjb21wb25lbnQuIEl0IHN1cHBvcnRzIHRob3NlIHRoZW1lIGNvbG9ycyB0aGF0IG1ha2Ugc2Vuc2UgZm9yIHRoaXMgY29tcG9uZW50LlxuICAgKi9cbiAgY29sb3I6IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZihbJ2luaGVyaXQnLCAncHJpbWFyeScsICdzZWNvbmRhcnknLCAnZGVmYXVsdCddKSxcblxuICAvKipcbiAgICogVGhlIHBvc2l0aW9uaW5nIHR5cGUuIFRoZSBiZWhhdmlvciBvZiB0aGUgZGlmZmVyZW50IG9wdGlvbnMgaXMgZGVzY3JpYmVkXG4gICAqIFtoZXJlXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL0xlYXJuL0NTUy9DU1NfbGF5b3V0L1Bvc2l0aW9uaW5nKS5cbiAgICogTm90ZTogYHN0aWNreWAgaXMgbm90IHVuaXZlcnNhbGx5IHN1cHBvcnRlZCBhbmQgd2lsbCBmYWxsIGJhY2sgdG8gYHN0YXRpY2Agd2hlbiB1bmF2YWlsYWJsZS5cbiAgICovXG4gIHBvc2l0aW9uOiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2YoWydmaXhlZCcsICdhYnNvbHV0ZScsICdzdGlja3knLCAnc3RhdGljJ10pXG59IDoge307XG5BcHBCYXIuZGVmYXVsdFByb3BzID0ge1xuICBjb2xvcjogJ3ByaW1hcnknLFxuICBwb3NpdGlvbjogJ2ZpeGVkJ1xufTtcblxudmFyIF9kZWZhdWx0ID0gKDAsIF93aXRoU3R5bGVzLmRlZmF1bHQpKHN0eWxlcywge1xuICBuYW1lOiAnTXVpQXBwQmFyJ1xufSkoQXBwQmFyKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyB3aXRoU3R5bGVzIH0gZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvc3R5bGVzJztcbmltcG9ydCBBcHBCYXIgZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvQXBwQmFyJztcbmltcG9ydCBUb29sYmFyIGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL1Rvb2xiYXInO1xuaW1wb3J0IFR5cG9ncmFwaHkgZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvVHlwb2dyYXBoeSc7XG5pbXBvcnQgQnV0dG9uIGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL0J1dHRvbic7XG5pbXBvcnQgSWNvbkJ1dHRvbiBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9JY29uQnV0dG9uJztcbmltcG9ydCBNZW51SWNvbiBmcm9tICdAbWF0ZXJpYWwtdWkvaWNvbnMvTWVudSc7XG5pbXBvcnQgQWNvdW50Qm94IGZyb20gJ0BtYXRlcmlhbC11aS9pY29ucy9BY2NvdW50Qm94J1xuXG5jb25zdCBzdHlsZXMgPSB7XG4gICAgcm9vdDoge1xuICAgICAgICBmbGV4R3JvdzogMSxcbiAgICB9LFxuICAgIGZsZXg6IHtcbiAgICAgICAgZmxleDogMSxcbiAgICAgICAgdGV4dEFsaWduOiBcImNlbnRlclwiXG4gICAgfSxcbiAgICBtZW51QnV0dG9uOiB7XG4gICAgICAgIG1hcmdpbkxlZnQ6IC0xMixcbiAgICAgICAgbWFyZ2luUmlnaHQ6IDIwLFxuICAgIH0sXG4gICAgYWNvdW50QnV0dG9uOiB7XG4gICAgICAgIG1hcmdpblJpZ2h0OiAtMTIsXG4gICAgICAgIG1hcmdpbkxlZnQ6IDIwXG4gICAgfVxufTtcblxuY2xhc3MgQnV0dG9uQXBwQmFyIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICB9XG4gICAgXG4gICAgaGFuZGxlTG9nSW4gPSAoKSA9PiB7XG4gICAgICAgIC8vIHZhciBhdXRoVVJMID0gdW5kZWZpbmVkO1xuXG4gICAgICAgIC8vIGlmIChwcm9jZXNzLmVudi5wcm9kdWN0aW9uKSB7XG4gICAgICAgIC8vICAgICBhdXRoVVJMID0gXCJodHRwczovL2x5YmVyLXNlcnZlci5oZXJva3VhcHAuY29tL2F1dGgvbG9naW5cIjtcbiAgICAgICAgLy8gfSBlbHNlIHtcbiAgICAgICAgLy8gICAgIGF1dGhVUkwgPSBcImh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9hdXRoL2xvZ2luXCI7XG4gICAgICAgIC8vIH1cbiAgICAgICAgdmFyIGF1dGhVUkwgPSBcImh0dHBzOi8vbHliZXItc2VydmVyLmhlcm9rdWFwcC5jb20vYXV0aC9sb2dpblwiO1xuXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKFwiQXV0aFVSTFwiLCBhdXRoVVJMKTtcbiAgICAgICAgXG4gICAgICAgIHdpbmRvdy5sb2NhdGlvbiA9IGF1dGhVUkw7XG4gICAgfVxuICAgIFxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgY29uc3QgeyBjbGFzc2VzIH0gPSB0aGlzLnByb3BzO1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e2NsYXNzZXMucm9vdH0+XG4gICAgICAgICAgICAgICAgPEFwcEJhciBwb3NpdGlvbj1cImZpeGVkXCI+XG4gICAgICAgICAgICAgICAgICAgIDxUb29sYmFyPlxuICAgICAgICAgICAgICAgICAgICA8SWNvbkJ1dHRvbiBjbGFzc05hbWU9e2NsYXNzZXMubWVudUJ1dHRvbn0gY29sb3I9XCJpbmhlcml0XCIgYXJpYS1sYWJlbD1cIk1lbnVcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxNZW51SWNvbiAvPlxuICAgICAgICAgICAgICAgICAgICA8L0ljb25CdXR0b24+XG4gICAgICAgICAgICAgICAgICAgIDxUeXBvZ3JhcGh5IHZhcmlhbnQ9XCJ0aXRsZVwiIGNvbG9yPVwiaW5oZXJpdFwiIGNsYXNzTmFtZT17Y2xhc3Nlcy5mbGV4fT5cbiAgICAgICAgICAgICAgICAgICAgICAgIEx5YmVyXG4gICAgICAgICAgICAgICAgICAgIDwvVHlwb2dyYXBoeT5cbiAgICAgICAgICAgICAgICAgICAgey8qIDxCdXR0b24gY29sb3I9XCJpbmhlcml0XCI+TG9naW48L0J1dHRvbj4gKi99XG4gICAgICAgICAgICAgICAgICAgIDxJY29uQnV0dG9uIGNsYXNzTmFtZT17Y2xhc3Nlcy5hY291bnRCdXR0b259IGNvbG9yPVwiaW5oZXJpdFwiIGFyaWEtbGFiZWw9XCJNZW51XCIgb25DbGljaz17dGhpcy5oYW5kbGVMb2dJbn0+XG4gICAgICAgICAgICAgICAgICAgICAgICA8QWNvdW50Qm94IC8+XG4gICAgICAgICAgICAgICAgICAgIDwvSWNvbkJ1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgPC9Ub29sYmFyPlxuICAgICAgICAgICAgICAgIDwvQXBwQmFyPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICk7XG4gICAgfVxufVxuXG5CdXR0b25BcHBCYXIucHJvcFR5cGVzID0ge1xuICAgIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcbn07XG4gIFxuZXhwb3J0IGRlZmF1bHQgd2l0aFN0eWxlcyhzdHlsZXMpKEJ1dHRvbkFwcEJhcik7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLnN0eWxlcyA9IHZvaWQgMDtcblxudmFyIF9leHRlbmRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9leHRlbmRzXCIpKTtcblxudmFyIF9kZWZpbmVQcm9wZXJ0eTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vZGVmaW5lUHJvcGVydHlcIikpO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiKSk7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbnZhciBfY2xhc3NuYW1lcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImNsYXNzbmFtZXNcIikpO1xuXG52YXIgX3dpdGhTdHlsZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9zdHlsZXMvd2l0aFN0eWxlc1wiKSk7XG5cbnZhciBfaGVscGVycyA9IHJlcXVpcmUoXCIuLi91dGlscy9oZWxwZXJzXCIpO1xuXG52YXIgc3R5bGVzID0gZnVuY3Rpb24gc3R5bGVzKHRoZW1lKSB7XG4gIHJldHVybiB7XG4gICAgcm9vdDoge1xuICAgICAgZGlzcGxheTogJ2Jsb2NrJyxcbiAgICAgIG1hcmdpbjogMFxuICAgIH0sXG4gICAgZGlzcGxheTQ6IHRoZW1lLnR5cG9ncmFwaHkuZGlzcGxheTQsXG4gICAgZGlzcGxheTM6IHRoZW1lLnR5cG9ncmFwaHkuZGlzcGxheTMsXG4gICAgZGlzcGxheTI6IHRoZW1lLnR5cG9ncmFwaHkuZGlzcGxheTIsXG4gICAgZGlzcGxheTE6IHRoZW1lLnR5cG9ncmFwaHkuZGlzcGxheTEsXG4gICAgaGVhZGxpbmU6IHRoZW1lLnR5cG9ncmFwaHkuaGVhZGxpbmUsXG4gICAgdGl0bGU6IHRoZW1lLnR5cG9ncmFwaHkudGl0bGUsXG4gICAgc3ViaGVhZGluZzogdGhlbWUudHlwb2dyYXBoeS5zdWJoZWFkaW5nLFxuICAgIGJvZHkyOiB0aGVtZS50eXBvZ3JhcGh5LmJvZHkyLFxuICAgIGJvZHkxOiB0aGVtZS50eXBvZ3JhcGh5LmJvZHkxLFxuICAgIGNhcHRpb246IHRoZW1lLnR5cG9ncmFwaHkuY2FwdGlvbixcbiAgICBidXR0b246IHRoZW1lLnR5cG9ncmFwaHkuYnV0dG9uLFxuICAgIGFsaWduTGVmdDoge1xuICAgICAgdGV4dEFsaWduOiAnbGVmdCdcbiAgICB9LFxuICAgIGFsaWduQ2VudGVyOiB7XG4gICAgICB0ZXh0QWxpZ246ICdjZW50ZXInXG4gICAgfSxcbiAgICBhbGlnblJpZ2h0OiB7XG4gICAgICB0ZXh0QWxpZ246ICdyaWdodCdcbiAgICB9LFxuICAgIGFsaWduSnVzdGlmeToge1xuICAgICAgdGV4dEFsaWduOiAnanVzdGlmeSdcbiAgICB9LFxuICAgIG5vV3JhcDoge1xuICAgICAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICAgICAgdGV4dE92ZXJmbG93OiAnZWxsaXBzaXMnLFxuICAgICAgd2hpdGVTcGFjZTogJ25vd3JhcCdcbiAgICB9LFxuICAgIGd1dHRlckJvdHRvbToge1xuICAgICAgbWFyZ2luQm90dG9tOiAnMC4zNWVtJ1xuICAgIH0sXG4gICAgcGFyYWdyYXBoOiB7XG4gICAgICBtYXJnaW5Cb3R0b206IHRoZW1lLnNwYWNpbmcudW5pdCAqIDJcbiAgICB9LFxuICAgIGNvbG9ySW5oZXJpdDoge1xuICAgICAgY29sb3I6ICdpbmhlcml0J1xuICAgIH0sXG4gICAgY29sb3JQcmltYXJ5OiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5wcmltYXJ5Lm1haW5cbiAgICB9LFxuICAgIGNvbG9yU2Vjb25kYXJ5OiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5zZWNvbmRhcnkubWFpblxuICAgIH0sXG4gICAgY29sb3JUZXh0U2Vjb25kYXJ5OiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS50ZXh0LnNlY29uZGFyeVxuICAgIH0sXG4gICAgY29sb3JFcnJvcjoge1xuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuZXJyb3IubWFpblxuICAgIH1cbiAgfTtcbn07XG5cbmV4cG9ydHMuc3R5bGVzID0gc3R5bGVzO1xuXG5mdW5jdGlvbiBUeXBvZ3JhcGh5KHByb3BzKSB7XG4gIHZhciBfY2xhc3NOYW1lcztcblxuICB2YXIgYWxpZ24gPSBwcm9wcy5hbGlnbixcbiAgICAgIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY2xhc3NOYW1lUHJvcCA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIGNvbXBvbmVudFByb3AgPSBwcm9wcy5jb21wb25lbnQsXG4gICAgICBjb2xvciA9IHByb3BzLmNvbG9yLFxuICAgICAgZ3V0dGVyQm90dG9tID0gcHJvcHMuZ3V0dGVyQm90dG9tLFxuICAgICAgaGVhZGxpbmVNYXBwaW5nID0gcHJvcHMuaGVhZGxpbmVNYXBwaW5nLFxuICAgICAgbm9XcmFwID0gcHJvcHMubm9XcmFwLFxuICAgICAgcGFyYWdyYXBoID0gcHJvcHMucGFyYWdyYXBoLFxuICAgICAgdmFyaWFudCA9IHByb3BzLnZhcmlhbnQsXG4gICAgICBvdGhlciA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyLmRlZmF1bHQpKHByb3BzLCBbXCJhbGlnblwiLCBcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJjb21wb25lbnRcIiwgXCJjb2xvclwiLCBcImd1dHRlckJvdHRvbVwiLCBcImhlYWRsaW5lTWFwcGluZ1wiLCBcIm5vV3JhcFwiLCBcInBhcmFncmFwaFwiLCBcInZhcmlhbnRcIl0pO1xuICB2YXIgY2xhc3NOYW1lID0gKDAsIF9jbGFzc25hbWVzLmRlZmF1bHQpKGNsYXNzZXMucm9vdCwgY2xhc3Nlc1t2YXJpYW50XSwgKF9jbGFzc05hbWVzID0ge30sICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKF9jbGFzc05hbWVzLCBjbGFzc2VzW1wiY29sb3JcIi5jb25jYXQoKDAsIF9oZWxwZXJzLmNhcGl0YWxpemUpKGNvbG9yKSldLCBjb2xvciAhPT0gJ2RlZmF1bHQnKSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2NsYXNzTmFtZXMsIGNsYXNzZXMubm9XcmFwLCBub1dyYXApLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lcywgY2xhc3Nlcy5ndXR0ZXJCb3R0b20sIGd1dHRlckJvdHRvbSksICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKF9jbGFzc05hbWVzLCBjbGFzc2VzLnBhcmFncmFwaCwgcGFyYWdyYXBoKSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2NsYXNzTmFtZXMsIGNsYXNzZXNbXCJhbGlnblwiLmNvbmNhdCgoMCwgX2hlbHBlcnMuY2FwaXRhbGl6ZSkoYWxpZ24pKV0sIGFsaWduICE9PSAnaW5oZXJpdCcpLCBfY2xhc3NOYW1lcyksIGNsYXNzTmFtZVByb3ApO1xuICB2YXIgQ29tcG9uZW50ID0gY29tcG9uZW50UHJvcCB8fCAocGFyYWdyYXBoID8gJ3AnIDogaGVhZGxpbmVNYXBwaW5nW3ZhcmlhbnRdKSB8fCAnc3Bhbic7XG4gIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7XG4gICAgY2xhc3NOYW1lOiBjbGFzc05hbWVcbiAgfSwgb3RoZXIpKTtcbn1cblxuVHlwb2dyYXBoeS5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIC8qKlxuICAgKiBTZXQgdGhlIHRleHQtYWxpZ24gb24gdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGFsaWduOiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2YoWydpbmhlcml0JywgJ2xlZnQnLCAnY2VudGVyJywgJ3JpZ2h0JywgJ2p1c3RpZnknXSksXG5cbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogX3Byb3BUeXBlcy5kZWZhdWx0Lm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzLWFwaSkgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29sb3Igb2YgdGhlIGNvbXBvbmVudC4gSXQgc3VwcG9ydHMgdGhvc2UgdGhlbWUgY29sb3JzIHRoYXQgbWFrZSBzZW5zZSBmb3IgdGhpcyBjb21wb25lbnQuXG4gICAqL1xuICBjb2xvcjogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mKFsnaW5oZXJpdCcsICdwcmltYXJ5JywgJ3RleHRTZWNvbmRhcnknLCAnc2Vjb25kYXJ5JywgJ2Vycm9yJywgJ2RlZmF1bHQnXSksXG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIERPTSBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKiBCeSBkZWZhdWx0LCBpdCBtYXBzIHRoZSB2YXJpYW50IHRvIGEgZ29vZCBkZWZhdWx0IGhlYWRsaW5lIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZywgX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmNdKSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgdGV4dCB3aWxsIGhhdmUgYSBib3R0b20gbWFyZ2luLlxuICAgKi9cbiAgZ3V0dGVyQm90dG9tOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogV2UgYXJlIGVtcGlyaWNhbGx5IG1hcHBpbmcgdGhlIHZhcmlhbnQgcHJvcGVydHkgdG8gYSByYW5nZSBvZiBkaWZmZXJlbnQgRE9NIGVsZW1lbnQgdHlwZXMuXG4gICAqIEZvciBpbnN0YW5jZSwgaDEgdG8gaDYuIElmIHlvdSB3aXNoIHRvIGNoYW5nZSB0aGF0IG1hcHBpbmcsIHlvdSBjYW4gcHJvdmlkZSB5b3VyIG93bi5cbiAgICogQWx0ZXJuYXRpdmVseSwgeW91IGNhbiB1c2UgdGhlIGBjb21wb25lbnRgIHByb3BlcnR5LlxuICAgKi9cbiAgaGVhZGxpbmVNYXBwaW5nOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSB0ZXh0IHdpbGwgbm90IHdyYXAsIGJ1dCBpbnN0ZWFkIHdpbGwgdHJ1bmNhdGUgd2l0aCBhbiBlbGxpcHNpcy5cbiAgICovXG4gIG5vV3JhcDogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIHRleHQgd2lsbCBoYXZlIGEgYm90dG9tIG1hcmdpbi5cbiAgICovXG4gIHBhcmFncmFwaDogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIEFwcGxpZXMgdGhlIHRoZW1lIHR5cG9ncmFwaHkgc3R5bGVzLlxuICAgKi9cbiAgdmFyaWFudDogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mKFsnZGlzcGxheTQnLCAnZGlzcGxheTMnLCAnZGlzcGxheTInLCAnZGlzcGxheTEnLCAnaGVhZGxpbmUnLCAndGl0bGUnLCAnc3ViaGVhZGluZycsICdib2R5MicsICdib2R5MScsICdjYXB0aW9uJywgJ2J1dHRvbiddKVxufSA6IHt9O1xuVHlwb2dyYXBoeS5kZWZhdWx0UHJvcHMgPSB7XG4gIGFsaWduOiAnaW5oZXJpdCcsXG4gIGNvbG9yOiAnZGVmYXVsdCcsXG4gIGd1dHRlckJvdHRvbTogZmFsc2UsXG4gIGhlYWRsaW5lTWFwcGluZzoge1xuICAgIGRpc3BsYXk0OiAnaDEnLFxuICAgIGRpc3BsYXkzOiAnaDEnLFxuICAgIGRpc3BsYXkyOiAnaDEnLFxuICAgIGRpc3BsYXkxOiAnaDEnLFxuICAgIGhlYWRsaW5lOiAnaDEnLFxuICAgIHRpdGxlOiAnaDInLFxuICAgIHN1YmhlYWRpbmc6ICdoMycsXG4gICAgYm9keTI6ICdhc2lkZScsXG4gICAgYm9keTE6ICdwJ1xuICB9LFxuICBub1dyYXA6IGZhbHNlLFxuICBwYXJhZ3JhcGg6IGZhbHNlLFxuICB2YXJpYW50OiAnYm9keTEnXG59O1xuXG52YXIgX2RlZmF1bHQgPSAoMCwgX3dpdGhTdHlsZXMuZGVmYXVsdCkoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlUeXBvZ3JhcGh5J1xufSkoVHlwb2dyYXBoeSk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTQtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBTaW1pbGFyIHRvIGludmFyaWFudCBidXQgb25seSBsb2dzIGEgd2FybmluZyBpZiB0aGUgY29uZGl0aW9uIGlzIG5vdCBtZXQuXG4gKiBUaGlzIGNhbiBiZSB1c2VkIHRvIGxvZyBpc3N1ZXMgaW4gZGV2ZWxvcG1lbnQgZW52aXJvbm1lbnRzIGluIGNyaXRpY2FsXG4gKiBwYXRocy4gUmVtb3ZpbmcgdGhlIGxvZ2dpbmcgY29kZSBmb3IgcHJvZHVjdGlvbiBlbnZpcm9ubWVudHMgd2lsbCBrZWVwIHRoZVxuICogc2FtZSBsb2dpYyBhbmQgZm9sbG93IHRoZSBzYW1lIGNvZGUgcGF0aHMuXG4gKi9cblxudmFyIHdhcm5pbmcgPSBmdW5jdGlvbigpIHt9O1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB3YXJuaW5nID0gZnVuY3Rpb24oY29uZGl0aW9uLCBmb3JtYXQsIGFyZ3MpIHtcbiAgICB2YXIgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICBhcmdzID0gbmV3IEFycmF5KGxlbiA+IDIgPyBsZW4gLSAyIDogMCk7XG4gICAgZm9yICh2YXIga2V5ID0gMjsga2V5IDwgbGVuOyBrZXkrKykge1xuICAgICAgYXJnc1trZXkgLSAyXSA9IGFyZ3VtZW50c1trZXldO1xuICAgIH1cbiAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ2B3YXJuaW5nKGNvbmRpdGlvbiwgZm9ybWF0LCAuLi5hcmdzKWAgcmVxdWlyZXMgYSB3YXJuaW5nICcgK1xuICAgICAgICAnbWVzc2FnZSBhcmd1bWVudCdcbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKGZvcm1hdC5sZW5ndGggPCAxMCB8fCAoL15bc1xcV10qJC8pLnRlc3QoZm9ybWF0KSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnVGhlIHdhcm5pbmcgZm9ybWF0IHNob3VsZCBiZSBhYmxlIHRvIHVuaXF1ZWx5IGlkZW50aWZ5IHRoaXMgJyArXG4gICAgICAgICd3YXJuaW5nLiBQbGVhc2UsIHVzZSBhIG1vcmUgZGVzY3JpcHRpdmUgZm9ybWF0IHRoYW46ICcgKyBmb3JtYXRcbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKCFjb25kaXRpb24pIHtcbiAgICAgIHZhciBhcmdJbmRleCA9IDA7XG4gICAgICB2YXIgbWVzc2FnZSA9ICdXYXJuaW5nOiAnICtcbiAgICAgICAgZm9ybWF0LnJlcGxhY2UoLyVzL2csIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiBhcmdzW2FyZ0luZGV4KytdO1xuICAgICAgICB9KTtcbiAgICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihtZXNzYWdlKTtcbiAgICAgIH1cbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIFRoaXMgZXJyb3Igd2FzIHRocm93biBhcyBhIGNvbnZlbmllbmNlIHNvIHRoYXQgeW91IGNhbiB1c2UgdGhpcyBzdGFja1xuICAgICAgICAvLyB0byBmaW5kIHRoZSBjYWxsc2l0ZSB0aGF0IGNhdXNlZCB0aGlzIHdhcm5pbmcgdG8gZmlyZS5cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xuICAgICAgfSBjYXRjaCh4KSB7fVxuICAgIH1cbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB3YXJuaW5nO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLmlzV2lkdGhEb3duID0gZXhwb3J0cy5pc1dpZHRoVXAgPSB2b2lkIDA7XG5cbnZhciBfZXh0ZW5kczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vZXh0ZW5kc1wiKSk7XG5cbnZhciBfb2JqZWN0U3ByZWFkMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9vYmplY3RTcHJlYWRcIikpO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiKSk7XG5cbnZhciBfY2xhc3NDYWxsQ2hlY2syID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2NsYXNzQ2FsbENoZWNrXCIpKTtcblxudmFyIF9jcmVhdGVDbGFzczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vY3JlYXRlQ2xhc3NcIikpO1xuXG52YXIgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5cIikpO1xuXG52YXIgX2luaGVyaXRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9pbmhlcml0c1wiKSk7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbnZhciBfcmVhY3RFdmVudExpc3RlbmVyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3QtZXZlbnQtbGlzdGVuZXJcIikpO1xuXG52YXIgX2RlYm91bmNlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiZGVib3VuY2VcIikpO1xuXG52YXIgX3dyYXBEaXNwbGF5TmFtZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlY29tcG9zZS93cmFwRGlzcGxheU5hbWVcIikpO1xuXG52YXIgX2hvaXN0Tm9uUmVhY3RTdGF0aWNzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3NcIikpO1xuXG52YXIgX3dpdGhUaGVtZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3N0eWxlcy93aXRoVGhlbWVcIikpO1xuXG52YXIgX2NyZWF0ZUJyZWFrcG9pbnRzID0gcmVxdWlyZShcIi4uL3N0eWxlcy9jcmVhdGVCcmVha3BvaW50c1wiKTtcblxuLyogZXNsaW50LWRpc2FibGUgcmVhY3Qvbm8tZGlkLW1vdW50LXNldC1zdGF0ZSAqL1xuLy8gQnkgZGVmYXVsdCwgcmV0dXJucyB0cnVlIGlmIHNjcmVlbiB3aWR0aCBpcyB0aGUgc2FtZSBvciBncmVhdGVyIHRoYW4gdGhlIGdpdmVuIGJyZWFrcG9pbnQuXG52YXIgaXNXaWR0aFVwID0gZnVuY3Rpb24gaXNXaWR0aFVwKGJyZWFrcG9pbnQsIHdpZHRoKSB7XG4gIHZhciBpbmNsdXNpdmUgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IHRydWU7XG5cbiAgaWYgKGluY2x1c2l2ZSkge1xuICAgIHJldHVybiBfY3JlYXRlQnJlYWtwb2ludHMua2V5cy5pbmRleE9mKGJyZWFrcG9pbnQpIDw9IF9jcmVhdGVCcmVha3BvaW50cy5rZXlzLmluZGV4T2Yod2lkdGgpO1xuICB9XG5cbiAgcmV0dXJuIF9jcmVhdGVCcmVha3BvaW50cy5rZXlzLmluZGV4T2YoYnJlYWtwb2ludCkgPCBfY3JlYXRlQnJlYWtwb2ludHMua2V5cy5pbmRleE9mKHdpZHRoKTtcbn07IC8vIEJ5IGRlZmF1bHQsIHJldHVybnMgdHJ1ZSBpZiBzY3JlZW4gd2lkdGggaXMgdGhlIHNhbWUgb3IgbGVzcyB0aGFuIHRoZSBnaXZlbiBicmVha3BvaW50LlxuXG5cbmV4cG9ydHMuaXNXaWR0aFVwID0gaXNXaWR0aFVwO1xuXG52YXIgaXNXaWR0aERvd24gPSBmdW5jdGlvbiBpc1dpZHRoRG93bihicmVha3BvaW50LCB3aWR0aCkge1xuICB2YXIgaW5jbHVzaXZlID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiB0cnVlO1xuXG4gIGlmIChpbmNsdXNpdmUpIHtcbiAgICByZXR1cm4gX2NyZWF0ZUJyZWFrcG9pbnRzLmtleXMuaW5kZXhPZih3aWR0aCkgPD0gX2NyZWF0ZUJyZWFrcG9pbnRzLmtleXMuaW5kZXhPZihicmVha3BvaW50KTtcbiAgfVxuXG4gIHJldHVybiBfY3JlYXRlQnJlYWtwb2ludHMua2V5cy5pbmRleE9mKHdpZHRoKSA8IF9jcmVhdGVCcmVha3BvaW50cy5rZXlzLmluZGV4T2YoYnJlYWtwb2ludCk7XG59O1xuXG5leHBvcnRzLmlzV2lkdGhEb3duID0gaXNXaWR0aERvd247XG5cbnZhciB3aXRoV2lkdGggPSBmdW5jdGlvbiB3aXRoV2lkdGgoKSB7XG4gIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgcmV0dXJuIGZ1bmN0aW9uIChDb21wb25lbnQpIHtcbiAgICB2YXIgX29wdGlvbnMkd2l0aFRoZW1lID0gb3B0aW9ucy53aXRoVGhlbWUsXG4gICAgICAgIHdpdGhUaGVtZU9wdGlvbiA9IF9vcHRpb25zJHdpdGhUaGVtZSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfb3B0aW9ucyR3aXRoVGhlbWUsXG4gICAgICAgIF9vcHRpb25zJG5vU1NSID0gb3B0aW9ucy5ub1NTUixcbiAgICAgICAgbm9TU1IgPSBfb3B0aW9ucyRub1NTUiA9PT0gdm9pZCAwID8gZmFsc2UgOiBfb3B0aW9ucyRub1NTUixcbiAgICAgICAgaW5pdGlhbFdpZHRoT3B0aW9uID0gb3B0aW9ucy5pbml0aWFsV2lkdGgsXG4gICAgICAgIF9vcHRpb25zJHJlc2l6ZUludGVydiA9IG9wdGlvbnMucmVzaXplSW50ZXJ2YWwsXG4gICAgICAgIHJlc2l6ZUludGVydmFsID0gX29wdGlvbnMkcmVzaXplSW50ZXJ2ID09PSB2b2lkIDAgPyAxNjYgOiBfb3B0aW9ucyRyZXNpemVJbnRlcnY7XG5cbiAgICB2YXIgV2l0aFdpZHRoID1cbiAgICAvKiNfX1BVUkVfXyovXG4gICAgZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgICAgICgwLCBfaW5oZXJpdHMyLmRlZmF1bHQpKFdpdGhXaWR0aCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgICAgIGZ1bmN0aW9uIFdpdGhXaWR0aChwcm9wcykge1xuICAgICAgICB2YXIgX3RoaXM7XG5cbiAgICAgICAgKDAsIF9jbGFzc0NhbGxDaGVjazIuZGVmYXVsdCkodGhpcywgV2l0aFdpZHRoKTtcbiAgICAgICAgX3RoaXMgPSAoMCwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yLmRlZmF1bHQpKHRoaXMsIChXaXRoV2lkdGguX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihXaXRoV2lkdGgpKS5jYWxsKHRoaXMsIHByb3BzKSk7XG4gICAgICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgICAgIHdpZHRoOiB1bmRlZmluZWRcbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMuaGFuZGxlUmVzaXplID0gKDAsIF9kZWJvdW5jZS5kZWZhdWx0KShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdmFyIHdpZHRoID0gX3RoaXMuZ2V0V2lkdGgoKTtcblxuICAgICAgICAgIGlmICh3aWR0aCAhPT0gX3RoaXMuc3RhdGUud2lkdGgpIHtcbiAgICAgICAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgd2lkdGg6IHdpZHRoXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sIHJlc2l6ZUludGVydmFsKTtcblxuICAgICAgICBpZiAobm9TU1IpIHtcbiAgICAgICAgICBfdGhpcy5zdGF0ZS53aWR0aCA9IF90aGlzLmdldFdpZHRoKCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgICB9XG5cbiAgICAgICgwLCBfY3JlYXRlQ2xhc3MyLmRlZmF1bHQpKFdpdGhXaWR0aCwgW3tcbiAgICAgICAga2V5OiBcImNvbXBvbmVudERpZE1vdW50XCIsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgICAgICB2YXIgd2lkdGggPSB0aGlzLmdldFdpZHRoKCk7XG5cbiAgICAgICAgICBpZiAod2lkdGggIT09IHRoaXMuc3RhdGUud2lkdGgpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICB3aWR0aDogd2lkdGhcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSwge1xuICAgICAgICBrZXk6IFwiY29tcG9uZW50V2lsbFVubW91bnRcIixcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgICAgIHRoaXMuaGFuZGxlUmVzaXplLmNsZWFyKCk7XG4gICAgICAgIH1cbiAgICAgIH0sIHtcbiAgICAgICAga2V5OiBcImdldFdpZHRoXCIsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRXaWR0aCgpIHtcbiAgICAgICAgICB2YXIgaW5uZXJXaWR0aCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogd2luZG93LmlubmVyV2lkdGg7XG4gICAgICAgICAgdmFyIGJyZWFrcG9pbnRzID0gdGhpcy5wcm9wcy50aGVtZS5icmVha3BvaW50cztcbiAgICAgICAgICB2YXIgd2lkdGggPSBudWxsO1xuICAgICAgICAgIC8qKlxuICAgICAgICAgICAqIFN0YXJ0IHdpdGggdGhlIHNsb3dlc3QgdmFsdWUgYXMgbG93IGVuZCBkZXZpY2VzIG9mdGVuIGhhdmUgYSBzbWFsbCBzY3JlZW4uXG4gICAgICAgICAgICpcbiAgICAgICAgICAgKiBpbm5lcldpZHRoIHx4cyAgICAgIHNtICAgICAgbWQgICAgICBsZyAgICAgIHhsXG4gICAgICAgICAgICogICAgICAgICAgICB8LS0tLS0tLXwtLS0tLS0tfC0tLS0tLS18LS0tLS0tLXwtLS0tLS0+XG4gICAgICAgICAgICogd2lkdGggICAgICB8ICB4cyAgIHwgIHNtICAgfCAgbWQgICB8ICBsZyAgIHwgIHhsXG4gICAgICAgICAgICovXG5cbiAgICAgICAgICB2YXIgaW5kZXggPSAxO1xuXG4gICAgICAgICAgd2hpbGUgKHdpZHRoID09PSBudWxsICYmIGluZGV4IDwgX2NyZWF0ZUJyZWFrcG9pbnRzLmtleXMubGVuZ3RoKSB7XG4gICAgICAgICAgICB2YXIgY3VycmVudFdpZHRoID0gX2NyZWF0ZUJyZWFrcG9pbnRzLmtleXNbaW5kZXhdOyAvLyBAbWVkaWEgYXJlIGluY2x1c2l2ZSwgc28gcmVwcm9kdWNlIHRoZSBiZWhhdmlvciBoZXJlLlxuXG4gICAgICAgICAgICBpZiAoaW5uZXJXaWR0aCA8IGJyZWFrcG9pbnRzLnZhbHVlc1tjdXJyZW50V2lkdGhdKSB7XG4gICAgICAgICAgICAgIHdpZHRoID0gX2NyZWF0ZUJyZWFrcG9pbnRzLmtleXNbaW5kZXggLSAxXTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGluZGV4ICs9IDE7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgd2lkdGggPSB3aWR0aCB8fCAneGwnO1xuICAgICAgICAgIHJldHVybiB3aWR0aDtcbiAgICAgICAgfVxuICAgICAgfSwge1xuICAgICAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICAgICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgICAgIGluaXRpYWxXaWR0aCA9IF9wcm9wcy5pbml0aWFsV2lkdGgsXG4gICAgICAgICAgICAgIHRoZW1lID0gX3Byb3BzLnRoZW1lLFxuICAgICAgICAgICAgICB3aWR0aCA9IF9wcm9wcy53aWR0aCxcbiAgICAgICAgICAgICAgb3RoZXIgPSAoMCwgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMi5kZWZhdWx0KShfcHJvcHMsIFtcImluaXRpYWxXaWR0aFwiLCBcInRoZW1lXCIsIFwid2lkdGhcIl0pO1xuICAgICAgICAgIHZhciBwcm9wcyA9ICgwLCBfb2JqZWN0U3ByZWFkMi5kZWZhdWx0KSh7XG4gICAgICAgICAgICB3aWR0aDogd2lkdGggfHwgdGhpcy5zdGF0ZS53aWR0aCB8fCBpbml0aWFsV2lkdGggfHwgaW5pdGlhbFdpZHRoT3B0aW9uXG4gICAgICAgICAgfSwgb3RoZXIpO1xuICAgICAgICAgIHZhciBtb3JlID0ge307XG5cbiAgICAgICAgICBpZiAod2l0aFRoZW1lT3B0aW9uKSB7XG4gICAgICAgICAgICBtb3JlLnRoZW1lID0gdGhlbWU7XG4gICAgICAgICAgfSAvLyBXaGVuIHJlbmRlcmluZyB0aGUgY29tcG9uZW50IG9uIHRoZSBzZXJ2ZXIsXG4gICAgICAgICAgLy8gd2UgaGF2ZSBubyBpZGVhIGFib3V0IHRoZSBjbGllbnQgYnJvd3NlciBzY3JlZW4gd2lkdGguXG4gICAgICAgICAgLy8gSW4gb3JkZXIgdG8gcHJldmVudCBibGlua3MgYW5kIGhlbHAgdGhlIHJlY29uY2lsaWF0aW9uIG9mIHRoZSBSZWFjdCB0cmVlXG4gICAgICAgICAgLy8gd2UgYXJlIG5vdCByZW5kZXJpbmcgdGhlIGNoaWxkIGNvbXBvbmVudC5cbiAgICAgICAgICAvL1xuICAgICAgICAgIC8vIEFuIGFsdGVybmF0aXZlIGlzIHRvIHVzZSB0aGUgYGluaXRpYWxXaWR0aGAgcHJvcGVydHkuXG5cblxuICAgICAgICAgIGlmIChwcm9wcy53aWR0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3RFdmVudExpc3RlbmVyLmRlZmF1bHQsIHtcbiAgICAgICAgICAgIHRhcmdldDogXCJ3aW5kb3dcIixcbiAgICAgICAgICAgIG9uUmVzaXplOiB0aGlzLmhhbmRsZVJlc2l6ZVxuICAgICAgICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHt9LCBtb3JlLCBwcm9wcykpKTtcbiAgICAgICAgfVxuICAgICAgfV0pO1xuICAgICAgcmV0dXJuIFdpdGhXaWR0aDtcbiAgICB9KF9yZWFjdC5kZWZhdWx0LkNvbXBvbmVudCk7XG5cbiAgICBXaXRoV2lkdGgucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAgICAgLyoqXG4gICAgICAgKiBBcyBgd2luZG93LmlubmVyV2lkdGhgIGlzIHVuYXZhaWxhYmxlIG9uIHRoZSBzZXJ2ZXIsXG4gICAgICAgKiB3ZSBkZWZhdWx0IHRvIHJlbmRlcmluZyBhbiBlbXB0eSBjb21wb25lbnQgZHVyaW5nIHRoZSBmaXJzdCBtb3VudC5cbiAgICAgICAqIEluIHNvbWUgc2l0dWF0aW9uLCB5b3UgbWlnaHQgd2FudCB0byB1c2UgYW4gaGV1cmlzdGljIHRvIGFwcHJveGltYXRlXG4gICAgICAgKiB0aGUgc2NyZWVuIHdpZHRoIG9mIHRoZSBjbGllbnQgYnJvd3NlciBzY3JlZW4gd2lkdGguXG4gICAgICAgKlxuICAgICAgICogRm9yIGluc3RhbmNlLCB5b3UgY291bGQgYmUgdXNpbmcgdGhlIHVzZXItYWdlbnQgb3IgdGhlIGNsaWVudC1oaW50cy5cbiAgICAgICAqIGh0dHA6Ly9jYW5pdXNlLmNvbS8jc2VhcmNoPWNsaWVudCUyMGhpbnRcbiAgICAgICAqL1xuICAgICAgaW5pdGlhbFdpZHRoOiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2YoWyd4cycsICdzbScsICdtZCcsICdsZycsICd4bCddKSxcblxuICAgICAgLyoqXG4gICAgICAgKiBAaWdub3JlXG4gICAgICAgKi9cbiAgICAgIHRoZW1lOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgICAgIC8qKlxuICAgICAgICogQnlwYXNzIHRoZSB3aWR0aCBjYWxjdWxhdGlvbiBsb2dpYy5cbiAgICAgICAqL1xuICAgICAgd2lkdGg6IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZihbJ3hzJywgJ3NtJywgJ21kJywgJ2xnJywgJ3hsJ10pXG4gICAgfSA6IHt9O1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIFdpdGhXaWR0aC5kaXNwbGF5TmFtZSA9ICgwLCBfd3JhcERpc3BsYXlOYW1lLmRlZmF1bHQpKENvbXBvbmVudCwgJ1dpdGhXaWR0aCcpO1xuICAgIH1cblxuICAgICgwLCBfaG9pc3ROb25SZWFjdFN0YXRpY3MuZGVmYXVsdCkoV2l0aFdpZHRoLCBDb21wb25lbnQpO1xuICAgIHJldHVybiAoMCwgX3dpdGhUaGVtZS5kZWZhdWx0KSgpKFdpdGhXaWR0aCk7XG4gIH07XG59O1xuXG52YXIgX2RlZmF1bHQgPSB3aXRoV2lkdGg7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxuZnVuY3Rpb24gZ2V0VGhlbWVQcm9wcyhwYXJhbXMpIHtcbiAgdmFyIHRoZW1lID0gcGFyYW1zLnRoZW1lLFxuICAgICAgbmFtZSA9IHBhcmFtcy5uYW1lO1xuXG4gIGlmICghbmFtZSB8fCAhdGhlbWUucHJvcHMgfHwgIXRoZW1lLnByb3BzW25hbWVdKSB7XG4gICAgcmV0dXJuIHt9O1xuICB9XG5cbiAgcmV0dXJuIHRoZW1lLnByb3BzW25hbWVdO1xufVxuXG52YXIgX2RlZmF1bHQgPSBnZXRUaGVtZVByb3BzO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfb2JqZWN0U3ByZWFkMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9vYmplY3RTcHJlYWRcIikpO1xuXG52YXIgX3dhcm5pbmcgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJ3YXJuaW5nXCIpKTtcblxudmFyIF9kZWVwbWVyZ2UgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJkZWVwbWVyZ2VcIikpO1xuXG4vLyA8IDFrYiBwYXlsb2FkIG92ZXJoZWFkIHdoZW4gbG9kYXNoL21lcmdlIGlzID4gM2tiLlxuLy8gU3VwcG9ydCBmb3IgdGhlIGpzcy1leHBhbmQgcGx1Z2luLlxuZnVuY3Rpb24gYXJyYXlNZXJnZShkZXN0aW5hdGlvbiwgc291cmNlKSB7XG4gIHJldHVybiBzb3VyY2U7XG59XG5cbmZ1bmN0aW9uIGdldFN0eWxlc0NyZWF0b3Ioc3R5bGVzT3JDcmVhdG9yKSB7XG4gIHZhciB0aGVtaW5nRW5hYmxlZCA9IHR5cGVvZiBzdHlsZXNPckNyZWF0b3IgPT09ICdmdW5jdGlvbic7XG5cbiAgZnVuY3Rpb24gY3JlYXRlKHRoZW1lLCBuYW1lKSB7XG4gICAgdmFyIHN0eWxlcyA9IHRoZW1pbmdFbmFibGVkID8gc3R5bGVzT3JDcmVhdG9yKHRoZW1lKSA6IHN0eWxlc09yQ3JlYXRvcjtcblxuICAgIGlmICghbmFtZSB8fCAhdGhlbWUub3ZlcnJpZGVzIHx8ICF0aGVtZS5vdmVycmlkZXNbbmFtZV0pIHtcbiAgICAgIHJldHVybiBzdHlsZXM7XG4gICAgfVxuXG4gICAgdmFyIG92ZXJyaWRlcyA9IHRoZW1lLm92ZXJyaWRlc1tuYW1lXTtcbiAgICB2YXIgc3R5bGVzV2l0aE92ZXJyaWRlcyA9ICgwLCBfb2JqZWN0U3ByZWFkMi5kZWZhdWx0KSh7fSwgc3R5bGVzKTtcbiAgICBPYmplY3Qua2V5cyhvdmVycmlkZXMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gKDAsIF93YXJuaW5nLmRlZmF1bHQpKHN0eWxlc1dpdGhPdmVycmlkZXNba2V5XSwgWydNYXRlcmlhbC1VSTogeW91IGFyZSB0cnlpbmcgdG8gb3ZlcnJpZGUgYSBzdHlsZSB0aGF0IGRvZXMgbm90IGV4aXN0LicsIFwiRml4IHRoZSBgXCIuY29uY2F0KGtleSwgXCJgIGtleSBvZiBgdGhlbWUub3ZlcnJpZGVzLlwiKS5jb25jYXQobmFtZSwgXCJgLlwiKV0uam9pbignXFxuJykpIDogdm9pZCAwO1xuICAgICAgc3R5bGVzV2l0aE92ZXJyaWRlc1trZXldID0gKDAsIF9kZWVwbWVyZ2UuZGVmYXVsdCkoc3R5bGVzV2l0aE92ZXJyaWRlc1trZXldLCBvdmVycmlkZXNba2V5XSwge1xuICAgICAgICBhcnJheU1lcmdlOiBhcnJheU1lcmdlXG4gICAgICB9KTtcbiAgICB9KTtcbiAgICByZXR1cm4gc3R5bGVzV2l0aE92ZXJyaWRlcztcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgY3JlYXRlOiBjcmVhdGUsXG4gICAgb3B0aW9uczoge30sXG4gICAgdGhlbWluZ0VuYWJsZWQ6IHRoZW1pbmdFbmFibGVkXG4gIH07XG59XG5cbnZhciBfZGVmYXVsdCA9IGdldFN0eWxlc0NyZWF0b3I7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfcHJvcFR5cGVzID0gcmVxdWlyZSgncHJvcC10eXBlcycpO1xuXG5leHBvcnRzWydkZWZhdWx0J10gPSB7XG4gIGpzczogKDAsIF9wcm9wVHlwZXMuc2hhcGUpKHtcbiAgICBvcHRpb25zOiAoMCwgX3Byb3BUeXBlcy5zaGFwZSkoe1xuICAgICAgY3JlYXRlR2VuZXJhdGVDbGFzc05hbWU6IF9wcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkXG4gICAgfSkuaXNSZXF1aXJlZCxcbiAgICBjcmVhdGVTdHlsZVNoZWV0OiBfcHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICByZW1vdmVTdHlsZVNoZWV0OiBfcHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZFxuICB9KSxcbiAgcmVnaXN0cnk6ICgwLCBfcHJvcFR5cGVzLnNoYXBlKSh7XG4gICAgYWRkOiBfcHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICB0b1N0cmluZzogX3Byb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWRcbiAgfSlcbn07IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX25zJGpzcyRucyRzaGVldE9wdGlvO1xuXG52YXIgX3Byb3BUeXBlcyA9IHJlcXVpcmUoJ3Byb3AtdHlwZXMnKTtcblxudmFyIF9ucyA9IHJlcXVpcmUoJy4vbnMnKTtcblxudmFyIG5zID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQoX25zKTtcblxudmFyIF9wcm9wVHlwZXMyID0gcmVxdWlyZSgnLi9wcm9wVHlwZXMnKTtcblxudmFyIF9wcm9wVHlwZXMzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzMik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKSB7IGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsgcmV0dXJuIG9iajsgfSBlbHNlIHsgdmFyIG5ld09iaiA9IHt9OyBpZiAob2JqICE9IG51bGwpIHsgZm9yICh2YXIga2V5IGluIG9iaikgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsgfSB9IG5ld09ialsnZGVmYXVsdCddID0gb2JqOyByZXR1cm4gbmV3T2JqOyB9IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cblxuZXhwb3J0c1snZGVmYXVsdCddID0gKF9ucyRqc3MkbnMkc2hlZXRPcHRpbyA9IHt9LCBfZGVmaW5lUHJvcGVydHkoX25zJGpzcyRucyRzaGVldE9wdGlvLCBucy5qc3MsIF9wcm9wVHlwZXMzWydkZWZhdWx0J10uanNzKSwgX2RlZmluZVByb3BlcnR5KF9ucyRqc3MkbnMkc2hlZXRPcHRpbywgbnMuc2hlZXRPcHRpb25zLCBfcHJvcFR5cGVzLm9iamVjdCksIF9kZWZpbmVQcm9wZXJ0eShfbnMkanNzJG5zJHNoZWV0T3B0aW8sIG5zLnNoZWV0c1JlZ2lzdHJ5LCBfcHJvcFR5cGVzM1snZGVmYXVsdCddLnJlZ2lzdHJ5KSwgX2RlZmluZVByb3BlcnR5KF9ucyRqc3MkbnMkc2hlZXRPcHRpbywgbnMubWFuYWdlcnMsIF9wcm9wVHlwZXMub2JqZWN0KSwgX25zJGpzcyRucyRzaGVldE9wdGlvKTsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGNyZWF0ZVN0eWxlcztcblxuZnVuY3Rpb24gY3JlYXRlU3R5bGVzKHMpIHtcbiAgcmV0dXJuIHM7XG59IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1snZGVmYXVsdCddID0ganNzUHJvcHNTb3J0O1xuLyoqXG4gKiBTb3J0IHByb3BzIGJ5IGxlbmd0aC5cbiAqL1xuZnVuY3Rpb24ganNzUHJvcHNTb3J0KCkge1xuICBmdW5jdGlvbiBzb3J0KHByb3AwLCBwcm9wMSkge1xuICAgIHJldHVybiBwcm9wMC5sZW5ndGggLSBwcm9wMS5sZW5ndGg7XG4gIH1cblxuICBmdW5jdGlvbiBvblByb2Nlc3NTdHlsZShzdHlsZSwgcnVsZSkge1xuICAgIGlmIChydWxlLnR5cGUgIT09ICdzdHlsZScpIHJldHVybiBzdHlsZTtcblxuICAgIHZhciBuZXdTdHlsZSA9IHt9O1xuICAgIHZhciBwcm9wcyA9IE9iamVjdC5rZXlzKHN0eWxlKS5zb3J0KHNvcnQpO1xuICAgIGZvciAodmFyIHByb3AgaW4gcHJvcHMpIHtcbiAgICAgIG5ld1N0eWxlW3Byb3BzW3Byb3BdXSA9IHN0eWxlW3Byb3BzW3Byb3BdXTtcbiAgICB9XG4gICAgcmV0dXJuIG5ld1N0eWxlO1xuICB9XG5cbiAgcmV0dXJuIHsgb25Qcm9jZXNzU3R5bGU6IG9uUHJvY2Vzc1N0eWxlIH07XG59IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1snZGVmYXVsdCddID0gc3VwcG9ydGVkVmFsdWU7XG5cbnZhciBfaXNJbkJyb3dzZXIgPSByZXF1aXJlKCdpcy1pbi1icm93c2VyJyk7XG5cbnZhciBfaXNJbkJyb3dzZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaXNJbkJyb3dzZXIpO1xuXG52YXIgX3ByZWZpeCA9IHJlcXVpcmUoJy4vcHJlZml4Jyk7XG5cbnZhciBfcHJlZml4MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3ByZWZpeCk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblxudmFyIGNhY2hlID0ge307XG52YXIgZWwgPSB2b2lkIDA7XG5cbmlmIChfaXNJbkJyb3dzZXIyWydkZWZhdWx0J10pIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xuXG4vKipcbiAqIFJldHVybnMgcHJlZml4ZWQgdmFsdWUgaWYgbmVlZGVkLiBSZXR1cm5zIGBmYWxzZWAgaWYgdmFsdWUgaXMgbm90IHN1cHBvcnRlZC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gcHJvcGVydHlcbiAqIEBwYXJhbSB7U3RyaW5nfSB2YWx1ZVxuICogQHJldHVybiB7U3RyaW5nfEJvb2xlYW59XG4gKiBAYXBpIHB1YmxpY1xuICovXG5mdW5jdGlvbiBzdXBwb3J0ZWRWYWx1ZShwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgLy8gRm9yIHNlcnZlci1zaWRlIHJlbmRlcmluZy5cbiAgaWYgKCFlbCkgcmV0dXJuIHZhbHVlO1xuXG4gIC8vIEl0IGlzIGEgc3RyaW5nIG9yIGEgbnVtYmVyIGFzIGEgc3RyaW5nIGxpa2UgJzEnLlxuICAvLyBXZSB3YW50IG9ubHkgcHJlZml4YWJsZSB2YWx1ZXMgaGVyZS5cbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ3N0cmluZycgfHwgIWlzTmFOKHBhcnNlSW50KHZhbHVlLCAxMCkpKSByZXR1cm4gdmFsdWU7XG5cbiAgdmFyIGNhY2hlS2V5ID0gcHJvcGVydHkgKyB2YWx1ZTtcblxuICBpZiAoY2FjaGVbY2FjaGVLZXldICE9IG51bGwpIHJldHVybiBjYWNoZVtjYWNoZUtleV07XG5cbiAgLy8gSUUgY2FuIGV2ZW4gdGhyb3cgYW4gZXJyb3IgaW4gc29tZSBjYXNlcywgZm9yIGUuZy4gc3R5bGUuY29udGVudCA9ICdiYXInXG4gIHRyeSB7XG4gICAgLy8gVGVzdCB2YWx1ZSBhcyBpdCBpcy5cbiAgICBlbC5zdHlsZVtwcm9wZXJ0eV0gPSB2YWx1ZTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgY2FjaGVbY2FjaGVLZXldID0gZmFsc2U7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLy8gVmFsdWUgaXMgc3VwcG9ydGVkIGFzIGl0IGlzLlxuICBpZiAoZWwuc3R5bGVbcHJvcGVydHldICE9PSAnJykge1xuICAgIGNhY2hlW2NhY2hlS2V5XSA9IHZhbHVlO1xuICB9IGVsc2Uge1xuICAgIC8vIFRlc3QgdmFsdWUgd2l0aCB2ZW5kb3IgcHJlZml4LlxuICAgIHZhbHVlID0gX3ByZWZpeDJbJ2RlZmF1bHQnXS5jc3MgKyB2YWx1ZTtcblxuICAgIC8vIEhhcmRjb2RlIHRlc3QgdG8gY29udmVydCBcImZsZXhcIiB0byBcIi1tcy1mbGV4Ym94XCIgZm9yIElFMTAuXG4gICAgaWYgKHZhbHVlID09PSAnLW1zLWZsZXgnKSB2YWx1ZSA9ICctbXMtZmxleGJveCc7XG5cbiAgICBlbC5zdHlsZVtwcm9wZXJ0eV0gPSB2YWx1ZTtcblxuICAgIC8vIFZhbHVlIGlzIHN1cHBvcnRlZCB3aXRoIHZlbmRvciBwcmVmaXguXG4gICAgaWYgKGVsLnN0eWxlW3Byb3BlcnR5XSAhPT0gJycpIGNhY2hlW2NhY2hlS2V5XSA9IHZhbHVlO1xuICB9XG5cbiAgaWYgKCFjYWNoZVtjYWNoZUtleV0pIGNhY2hlW2NhY2hlS2V5XSA9IGZhbHNlO1xuXG4gIC8vIFJlc2V0IHN0eWxlIHZhbHVlLlxuICBlbC5zdHlsZVtwcm9wZXJ0eV0gPSAnJztcblxuICByZXR1cm4gY2FjaGVbY2FjaGVLZXldO1xufSIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IGNhbWVsaXplO1xudmFyIHJlZ0V4cCA9IC9bLVxcc10rKC4pPy9nO1xuXG4vKipcbiAqIENvbnZlcnQgZGFzaCBzZXBhcmF0ZWQgc3RyaW5ncyB0byBjYW1lbCBjYXNlZC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGNhbWVsaXplKHN0cikge1xuICByZXR1cm4gc3RyLnJlcGxhY2UocmVnRXhwLCB0b1VwcGVyKTtcbn1cblxuZnVuY3Rpb24gdG9VcHBlcihtYXRjaCwgYykge1xuICByZXR1cm4gYyA/IGMudG9VcHBlckNhc2UoKSA6ICcnO1xufSIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IHN1cHBvcnRlZFByb3BlcnR5O1xuXG52YXIgX2lzSW5Ccm93c2VyID0gcmVxdWlyZSgnaXMtaW4tYnJvd3NlcicpO1xuXG52YXIgX2lzSW5Ccm93c2VyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2lzSW5Ccm93c2VyKTtcblxudmFyIF9wcmVmaXggPSByZXF1aXJlKCcuL3ByZWZpeCcpO1xuXG52YXIgX3ByZWZpeDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcmVmaXgpO1xuXG52YXIgX2NhbWVsaXplID0gcmVxdWlyZSgnLi9jYW1lbGl6ZScpO1xuXG52YXIgX2NhbWVsaXplMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NhbWVsaXplKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG52YXIgZWwgPSB2b2lkIDA7XG52YXIgY2FjaGUgPSB7fTtcblxuaWYgKF9pc0luQnJvd3NlcjJbJ2RlZmF1bHQnXSkge1xuICBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTtcblxuICAvKipcbiAgICogV2UgdGVzdCBldmVyeSBwcm9wZXJ0eSBvbiB2ZW5kb3IgcHJlZml4IHJlcXVpcmVtZW50LlxuICAgKiBPbmNlIHRlc3RlZCwgcmVzdWx0IGlzIGNhY2hlZC4gSXQgZ2l2ZXMgdXMgdXAgdG8gNzAlIHBlcmYgYm9vc3QuXG4gICAqIGh0dHA6Ly9qc3BlcmYuY29tL2VsZW1lbnQtc3R5bGUtb2JqZWN0LWFjY2Vzcy12cy1wbGFpbi1vYmplY3RcbiAgICpcbiAgICogUHJlZmlsbCBjYWNoZSB3aXRoIGtub3duIGNzcyBwcm9wZXJ0aWVzIHRvIHJlZHVjZSBhbW91bnQgb2ZcbiAgICogcHJvcGVydGllcyB3ZSBuZWVkIHRvIGZlYXR1cmUgdGVzdCBhdCBydW50aW1lLlxuICAgKiBodHRwOi8vZGF2aWR3YWxzaC5uYW1lL3ZlbmRvci1wcmVmaXhcbiAgICovXG4gIHZhciBjb21wdXRlZCA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCwgJycpO1xuICBmb3IgKHZhciBrZXkgaW4gY29tcHV0ZWQpIHtcbiAgICBpZiAoIWlzTmFOKGtleSkpIGNhY2hlW2NvbXB1dGVkW2tleV1dID0gY29tcHV0ZWRba2V5XTtcbiAgfVxufVxuXG4vKipcbiAqIFRlc3QgaWYgYSBwcm9wZXJ0eSBpcyBzdXBwb3J0ZWQsIHJldHVybnMgc3VwcG9ydGVkIHByb3BlcnR5IHdpdGggdmVuZG9yXG4gKiBwcmVmaXggaWYgcmVxdWlyZWQuIFJldHVybnMgYGZhbHNlYCBpZiBub3Qgc3VwcG9ydGVkLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBwcm9wIGRhc2ggc2VwYXJhdGVkXG4gKiBAcmV0dXJuIHtTdHJpbmd8Qm9vbGVhbn1cbiAqIEBhcGkgcHVibGljXG4gKi9cbmZ1bmN0aW9uIHN1cHBvcnRlZFByb3BlcnR5KHByb3ApIHtcbiAgLy8gRm9yIHNlcnZlci1zaWRlIHJlbmRlcmluZy5cbiAgaWYgKCFlbCkgcmV0dXJuIHByb3A7XG5cbiAgLy8gV2UgaGF2ZSBub3QgdGVzdGVkIHRoaXMgcHJvcCB5ZXQsIGxldHMgZG8gdGhlIHRlc3QuXG4gIGlmIChjYWNoZVtwcm9wXSAhPSBudWxsKSByZXR1cm4gY2FjaGVbcHJvcF07XG5cbiAgLy8gQ2FtZWxpemF0aW9uIGlzIHJlcXVpcmVkIGJlY2F1c2Ugd2UgY2FuJ3QgdGVzdCB1c2luZ1xuICAvLyBjc3Mgc3ludGF4IGZvciBlLmcuIGluIEZGLlxuICAvLyBUZXN0IGlmIHByb3BlcnR5IGlzIHN1cHBvcnRlZCBhcyBpdCBpcy5cbiAgaWYgKCgwLCBfY2FtZWxpemUyWydkZWZhdWx0J10pKHByb3ApIGluIGVsLnN0eWxlKSB7XG4gICAgY2FjaGVbcHJvcF0gPSBwcm9wO1xuICB9XG4gIC8vIFRlc3QgaWYgcHJvcGVydHkgaXMgc3VwcG9ydGVkIHdpdGggdmVuZG9yIHByZWZpeC5cbiAgZWxzZSBpZiAoX3ByZWZpeDJbJ2RlZmF1bHQnXS5qcyArICgwLCBfY2FtZWxpemUyWydkZWZhdWx0J10pKCctJyArIHByb3ApIGluIGVsLnN0eWxlKSB7XG4gICAgICBjYWNoZVtwcm9wXSA9IF9wcmVmaXgyWydkZWZhdWx0J10uY3NzICsgcHJvcDtcbiAgICB9IGVsc2Uge1xuICAgICAgY2FjaGVbcHJvcF0gPSBmYWxzZTtcbiAgICB9XG5cbiAgcmV0dXJuIGNhY2hlW3Byb3BdO1xufSIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuc3VwcG9ydGVkVmFsdWUgPSBleHBvcnRzLnN1cHBvcnRlZFByb3BlcnR5ID0gZXhwb3J0cy5wcmVmaXggPSB1bmRlZmluZWQ7XG5cbnZhciBfcHJlZml4ID0gcmVxdWlyZSgnLi9wcmVmaXgnKTtcblxudmFyIF9wcmVmaXgyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJlZml4KTtcblxudmFyIF9zdXBwb3J0ZWRQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vc3VwcG9ydGVkLXByb3BlcnR5Jyk7XG5cbnZhciBfc3VwcG9ydGVkUHJvcGVydHkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc3VwcG9ydGVkUHJvcGVydHkpO1xuXG52YXIgX3N1cHBvcnRlZFZhbHVlID0gcmVxdWlyZSgnLi9zdXBwb3J0ZWQtdmFsdWUnKTtcblxudmFyIF9zdXBwb3J0ZWRWYWx1ZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zdXBwb3J0ZWRWYWx1ZSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblxuZXhwb3J0c1snZGVmYXVsdCddID0ge1xuICBwcmVmaXg6IF9wcmVmaXgyWydkZWZhdWx0J10sXG4gIHN1cHBvcnRlZFByb3BlcnR5OiBfc3VwcG9ydGVkUHJvcGVydHkyWydkZWZhdWx0J10sXG4gIHN1cHBvcnRlZFZhbHVlOiBfc3VwcG9ydGVkVmFsdWUyWydkZWZhdWx0J11cbn07IC8qKlxuICAgICogQ1NTIFZlbmRvciBwcmVmaXggZGV0ZWN0aW9uIGFuZCBwcm9wZXJ0eSBmZWF0dXJlIHRlc3RpbmcuXG4gICAgKlxuICAgICogQGNvcHlyaWdodCBPbGVnIFNsb2JvZHNrb2kgMjAxNVxuICAgICogQHdlYnNpdGUgaHR0cHM6Ly9naXRodWIuY29tL2pzc3R5bGVzL2Nzcy12ZW5kb3JcbiAgICAqIEBsaWNlbnNlIE1JVFxuICAgICovXG5cbmV4cG9ydHMucHJlZml4ID0gX3ByZWZpeDJbJ2RlZmF1bHQnXTtcbmV4cG9ydHMuc3VwcG9ydGVkUHJvcGVydHkgPSBfc3VwcG9ydGVkUHJvcGVydHkyWydkZWZhdWx0J107XG5leHBvcnRzLnN1cHBvcnRlZFZhbHVlID0gX3N1cHBvcnRlZFZhbHVlMlsnZGVmYXVsdCddOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IGpzc1ZlbmRvclByZWZpeGVyO1xuXG52YXIgX2Nzc1ZlbmRvciA9IHJlcXVpcmUoJ2Nzcy12ZW5kb3InKTtcblxudmFyIHZlbmRvciA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKF9jc3NWZW5kb3IpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmopIHsgaWYgKG9iaiAmJiBvYmouX19lc01vZHVsZSkgeyByZXR1cm4gb2JqOyB9IGVsc2UgeyB2YXIgbmV3T2JqID0ge307IGlmIChvYmogIT0gbnVsbCkgeyBmb3IgKHZhciBrZXkgaW4gb2JqKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSBuZXdPYmpba2V5XSA9IG9ialtrZXldOyB9IH0gbmV3T2JqWydkZWZhdWx0J10gPSBvYmo7IHJldHVybiBuZXdPYmo7IH0gfVxuXG4vKipcbiAqIEFkZCB2ZW5kb3IgcHJlZml4IHRvIGEgcHJvcGVydHkgbmFtZSB3aGVuIG5lZWRlZC5cbiAqXG4gKiBAcGFyYW0ge1J1bGV9IHJ1bGVcbiAqIEBhcGkgcHVibGljXG4gKi9cbmZ1bmN0aW9uIGpzc1ZlbmRvclByZWZpeGVyKCkge1xuICBmdW5jdGlvbiBvblByb2Nlc3NSdWxlKHJ1bGUpIHtcbiAgICBpZiAocnVsZS50eXBlID09PSAna2V5ZnJhbWVzJykge1xuICAgICAgcnVsZS5rZXkgPSAnQCcgKyB2ZW5kb3IucHJlZml4LmNzcyArIHJ1bGUua2V5LnN1YnN0cigxKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBvblByb2Nlc3NTdHlsZShzdHlsZSwgcnVsZSkge1xuICAgIGlmIChydWxlLnR5cGUgIT09ICdzdHlsZScpIHJldHVybiBzdHlsZTtcblxuICAgIGZvciAodmFyIHByb3AgaW4gc3R5bGUpIHtcbiAgICAgIHZhciB2YWx1ZSA9IHN0eWxlW3Byb3BdO1xuXG4gICAgICB2YXIgY2hhbmdlUHJvcCA9IGZhbHNlO1xuICAgICAgdmFyIHN1cHBvcnRlZFByb3AgPSB2ZW5kb3Iuc3VwcG9ydGVkUHJvcGVydHkocHJvcCk7XG4gICAgICBpZiAoc3VwcG9ydGVkUHJvcCAmJiBzdXBwb3J0ZWRQcm9wICE9PSBwcm9wKSBjaGFuZ2VQcm9wID0gdHJ1ZTtcblxuICAgICAgdmFyIGNoYW5nZVZhbHVlID0gZmFsc2U7XG4gICAgICB2YXIgc3VwcG9ydGVkVmFsdWUgPSB2ZW5kb3Iuc3VwcG9ydGVkVmFsdWUoc3VwcG9ydGVkUHJvcCwgdmFsdWUpO1xuICAgICAgaWYgKHN1cHBvcnRlZFZhbHVlICYmIHN1cHBvcnRlZFZhbHVlICE9PSB2YWx1ZSkgY2hhbmdlVmFsdWUgPSB0cnVlO1xuXG4gICAgICBpZiAoY2hhbmdlUHJvcCB8fCBjaGFuZ2VWYWx1ZSkge1xuICAgICAgICBpZiAoY2hhbmdlUHJvcCkgZGVsZXRlIHN0eWxlW3Byb3BdO1xuICAgICAgICBzdHlsZVtzdXBwb3J0ZWRQcm9wIHx8IHByb3BdID0gc3VwcG9ydGVkVmFsdWUgfHwgdmFsdWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHN0eWxlO1xuICB9XG5cbiAgZnVuY3Rpb24gb25DaGFuZ2VWYWx1ZSh2YWx1ZSwgcHJvcCkge1xuICAgIHJldHVybiB2ZW5kb3Iuc3VwcG9ydGVkVmFsdWUocHJvcCwgdmFsdWUpO1xuICB9XG5cbiAgcmV0dXJuIHsgb25Qcm9jZXNzUnVsZTogb25Qcm9jZXNzUnVsZSwgb25Qcm9jZXNzU3R5bGU6IG9uUHJvY2Vzc1N0eWxlLCBvbkNoYW5nZVZhbHVlOiBvbkNoYW5nZVZhbHVlIH07XG59IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuLyoqXG4gKiBHZW5lcmF0ZWQganNzLWRlZmF1bHQtdW5pdCBDU1MgcHJvcGVydHkgdW5pdHNcbiAqXG4gKiBAdHlwZSBvYmplY3RcbiAqL1xuZXhwb3J0c1snZGVmYXVsdCddID0ge1xuICAnYW5pbWF0aW9uLWRlbGF5JzogJ21zJyxcbiAgJ2FuaW1hdGlvbi1kdXJhdGlvbic6ICdtcycsXG4gICdiYWNrZ3JvdW5kLXBvc2l0aW9uJzogJ3B4JyxcbiAgJ2JhY2tncm91bmQtcG9zaXRpb24teCc6ICdweCcsXG4gICdiYWNrZ3JvdW5kLXBvc2l0aW9uLXknOiAncHgnLFxuICAnYmFja2dyb3VuZC1zaXplJzogJ3B4JyxcbiAgYm9yZGVyOiAncHgnLFxuICAnYm9yZGVyLWJvdHRvbSc6ICdweCcsXG4gICdib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzJzogJ3B4JyxcbiAgJ2JvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzJzogJ3B4JyxcbiAgJ2JvcmRlci1ib3R0b20td2lkdGgnOiAncHgnLFxuICAnYm9yZGVyLWxlZnQnOiAncHgnLFxuICAnYm9yZGVyLWxlZnQtd2lkdGgnOiAncHgnLFxuICAnYm9yZGVyLXJhZGl1cyc6ICdweCcsXG4gICdib3JkZXItcmlnaHQnOiAncHgnLFxuICAnYm9yZGVyLXJpZ2h0LXdpZHRoJzogJ3B4JyxcbiAgJ2JvcmRlci1zcGFjaW5nJzogJ3B4JyxcbiAgJ2JvcmRlci10b3AnOiAncHgnLFxuICAnYm9yZGVyLXRvcC1sZWZ0LXJhZGl1cyc6ICdweCcsXG4gICdib3JkZXItdG9wLXJpZ2h0LXJhZGl1cyc6ICdweCcsXG4gICdib3JkZXItdG9wLXdpZHRoJzogJ3B4JyxcbiAgJ2JvcmRlci13aWR0aCc6ICdweCcsXG4gICdib3JkZXItYWZ0ZXItd2lkdGgnOiAncHgnLFxuICAnYm9yZGVyLWJlZm9yZS13aWR0aCc6ICdweCcsXG4gICdib3JkZXItZW5kLXdpZHRoJzogJ3B4JyxcbiAgJ2JvcmRlci1ob3Jpem9udGFsLXNwYWNpbmcnOiAncHgnLFxuICAnYm9yZGVyLXN0YXJ0LXdpZHRoJzogJ3B4JyxcbiAgJ2JvcmRlci12ZXJ0aWNhbC1zcGFjaW5nJzogJ3B4JyxcbiAgYm90dG9tOiAncHgnLFxuICAnYm94LXNoYWRvdyc6ICdweCcsXG4gICdjb2x1bW4tZ2FwJzogJ3B4JyxcbiAgJ2NvbHVtbi1ydWxlJzogJ3B4JyxcbiAgJ2NvbHVtbi1ydWxlLXdpZHRoJzogJ3B4JyxcbiAgJ2NvbHVtbi13aWR0aCc6ICdweCcsXG4gICdmbGV4LWJhc2lzJzogJ3B4JyxcbiAgJ2ZvbnQtc2l6ZSc6ICdweCcsXG4gICdmb250LXNpemUtZGVsdGEnOiAncHgnLFxuICBoZWlnaHQ6ICdweCcsXG4gIGxlZnQ6ICdweCcsXG4gICdsZXR0ZXItc3BhY2luZyc6ICdweCcsXG4gICdsb2dpY2FsLWhlaWdodCc6ICdweCcsXG4gICdsb2dpY2FsLXdpZHRoJzogJ3B4JyxcbiAgbWFyZ2luOiAncHgnLFxuICAnbWFyZ2luLWFmdGVyJzogJ3B4JyxcbiAgJ21hcmdpbi1iZWZvcmUnOiAncHgnLFxuICAnbWFyZ2luLWJvdHRvbSc6ICdweCcsXG4gICdtYXJnaW4tbGVmdCc6ICdweCcsXG4gICdtYXJnaW4tcmlnaHQnOiAncHgnLFxuICAnbWFyZ2luLXRvcCc6ICdweCcsXG4gICdtYXgtaGVpZ2h0JzogJ3B4JyxcbiAgJ21heC13aWR0aCc6ICdweCcsXG4gICdtYXJnaW4tZW5kJzogJ3B4JyxcbiAgJ21hcmdpbi1zdGFydCc6ICdweCcsXG4gICdtYXNrLXBvc2l0aW9uLXgnOiAncHgnLFxuICAnbWFzay1wb3NpdGlvbi15JzogJ3B4JyxcbiAgJ21hc2stc2l6ZSc6ICdweCcsXG4gICdtYXgtbG9naWNhbC1oZWlnaHQnOiAncHgnLFxuICAnbWF4LWxvZ2ljYWwtd2lkdGgnOiAncHgnLFxuICAnbWluLWhlaWdodCc6ICdweCcsXG4gICdtaW4td2lkdGgnOiAncHgnLFxuICAnbWluLWxvZ2ljYWwtaGVpZ2h0JzogJ3B4JyxcbiAgJ21pbi1sb2dpY2FsLXdpZHRoJzogJ3B4JyxcbiAgbW90aW9uOiAncHgnLFxuICAnbW90aW9uLW9mZnNldCc6ICdweCcsXG4gIG91dGxpbmU6ICdweCcsXG4gICdvdXRsaW5lLW9mZnNldCc6ICdweCcsXG4gICdvdXRsaW5lLXdpZHRoJzogJ3B4JyxcbiAgcGFkZGluZzogJ3B4JyxcbiAgJ3BhZGRpbmctYm90dG9tJzogJ3B4JyxcbiAgJ3BhZGRpbmctbGVmdCc6ICdweCcsXG4gICdwYWRkaW5nLXJpZ2h0JzogJ3B4JyxcbiAgJ3BhZGRpbmctdG9wJzogJ3B4JyxcbiAgJ3BhZGRpbmctYWZ0ZXInOiAncHgnLFxuICAncGFkZGluZy1iZWZvcmUnOiAncHgnLFxuICAncGFkZGluZy1lbmQnOiAncHgnLFxuICAncGFkZGluZy1zdGFydCc6ICdweCcsXG4gICdwZXJzcGVjdGl2ZS1vcmlnaW4teCc6ICclJyxcbiAgJ3BlcnNwZWN0aXZlLW9yaWdpbi15JzogJyUnLFxuICBwZXJzcGVjdGl2ZTogJ3B4JyxcbiAgcmlnaHQ6ICdweCcsXG4gICdzaGFwZS1tYXJnaW4nOiAncHgnLFxuICBzaXplOiAncHgnLFxuICAndGV4dC1pbmRlbnQnOiAncHgnLFxuICAndGV4dC1zdHJva2UnOiAncHgnLFxuICAndGV4dC1zdHJva2Utd2lkdGgnOiAncHgnLFxuICB0b3A6ICdweCcsXG4gICd0cmFuc2Zvcm0tb3JpZ2luJzogJyUnLFxuICAndHJhbnNmb3JtLW9yaWdpbi14JzogJyUnLFxuICAndHJhbnNmb3JtLW9yaWdpbi15JzogJyUnLFxuICAndHJhbnNmb3JtLW9yaWdpbi16JzogJyUnLFxuICAndHJhbnNpdGlvbi1kZWxheSc6ICdtcycsXG4gICd0cmFuc2l0aW9uLWR1cmF0aW9uJzogJ21zJyxcbiAgJ3ZlcnRpY2FsLWFsaWduJzogJ3B4JyxcbiAgd2lkdGg6ICdweCcsXG4gICd3b3JkLXNwYWNpbmcnOiAncHgnLFxuICAvLyBOb3QgZXhpc3RpbmcgcHJvcGVydGllcy5cbiAgLy8gVXNlZCB0byBhdm9pZCBpc3N1ZXMgd2l0aCBqc3MtZXhwYW5kIGludGVyZ3JhdGlvbi5cbiAgJ2JveC1zaGFkb3cteCc6ICdweCcsXG4gICdib3gtc2hhZG93LXknOiAncHgnLFxuICAnYm94LXNoYWRvdy1ibHVyJzogJ3B4JyxcbiAgJ2JveC1zaGFkb3ctc3ByZWFkJzogJ3B4JyxcbiAgJ2ZvbnQtbGluZS1oZWlnaHQnOiAncHgnLFxuICAndGV4dC1zaGFkb3cteCc6ICdweCcsXG4gICd0ZXh0LXNoYWRvdy15JzogJ3B4JyxcbiAgJ3RleHQtc2hhZG93LWJsdXInOiAncHgnXG59OyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG5leHBvcnRzWydkZWZhdWx0J10gPSBkZWZhdWx0VW5pdDtcblxudmFyIF9kZWZhdWx0VW5pdHMgPSByZXF1aXJlKCcuL2RlZmF1bHRVbml0cycpO1xuXG52YXIgX2RlZmF1bHRVbml0czIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kZWZhdWx0VW5pdHMpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9XG5cbi8qKlxuICogQ2xvbmVzIHRoZSBvYmplY3QgYW5kIGFkZHMgYSBjYW1lbCBjYXNlZCBwcm9wZXJ0eSB2ZXJzaW9uLlxuICovXG5mdW5jdGlvbiBhZGRDYW1lbENhc2VkVmVyc2lvbihvYmopIHtcbiAgdmFyIHJlZ0V4cCA9IC8oLVthLXpdKS9nO1xuICB2YXIgcmVwbGFjZSA9IGZ1bmN0aW9uIHJlcGxhY2Uoc3RyKSB7XG4gICAgcmV0dXJuIHN0clsxXS50b1VwcGVyQ2FzZSgpO1xuICB9O1xuICB2YXIgbmV3T2JqID0ge307XG4gIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICBuZXdPYmpba2V5XSA9IG9ialtrZXldO1xuICAgIG5ld09ialtrZXkucmVwbGFjZShyZWdFeHAsIHJlcGxhY2UpXSA9IG9ialtrZXldO1xuICB9XG4gIHJldHVybiBuZXdPYmo7XG59XG5cbnZhciB1bml0cyA9IGFkZENhbWVsQ2FzZWRWZXJzaW9uKF9kZWZhdWx0VW5pdHMyWydkZWZhdWx0J10pO1xuXG4vKipcbiAqIFJlY3Vyc2l2ZSBkZWVwIHN0eWxlIHBhc3NpbmcgZnVuY3Rpb25cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gY3VycmVudCBwcm9wZXJ0eVxuICogQHBhcmFtIHsoT2JqZWN0fEFycmF5fE51bWJlcnxTdHJpbmcpfSBwcm9wZXJ0eSB2YWx1ZVxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAqIEByZXR1cm4geyhPYmplY3R8QXJyYXl8TnVtYmVyfFN0cmluZyl9IHJlc3VsdGluZyB2YWx1ZVxuICovXG5mdW5jdGlvbiBpdGVyYXRlKHByb3AsIHZhbHVlLCBvcHRpb25zKSB7XG4gIGlmICghdmFsdWUpIHJldHVybiB2YWx1ZTtcblxuICB2YXIgY29udmVydGVkVmFsdWUgPSB2YWx1ZTtcblxuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YodmFsdWUpO1xuICBpZiAodHlwZSA9PT0gJ29iamVjdCcgJiYgQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHR5cGUgPSAnYXJyYXknO1xuXG4gIHN3aXRjaCAodHlwZSkge1xuICAgIGNhc2UgJ29iamVjdCc6XG4gICAgICBpZiAocHJvcCA9PT0gJ2ZhbGxiYWNrcycpIHtcbiAgICAgICAgZm9yICh2YXIgaW5uZXJQcm9wIGluIHZhbHVlKSB7XG4gICAgICAgICAgdmFsdWVbaW5uZXJQcm9wXSA9IGl0ZXJhdGUoaW5uZXJQcm9wLCB2YWx1ZVtpbm5lclByb3BdLCBvcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGZvciAodmFyIF9pbm5lclByb3AgaW4gdmFsdWUpIHtcbiAgICAgICAgdmFsdWVbX2lubmVyUHJvcF0gPSBpdGVyYXRlKHByb3AgKyAnLScgKyBfaW5uZXJQcm9wLCB2YWx1ZVtfaW5uZXJQcm9wXSwgb3B0aW9ucyk7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlICdhcnJheSc6XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZhbHVlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhbHVlW2ldID0gaXRlcmF0ZShwcm9wLCB2YWx1ZVtpXSwgb3B0aW9ucyk7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlICdudW1iZXInOlxuICAgICAgaWYgKHZhbHVlICE9PSAwKSB7XG4gICAgICAgIGNvbnZlcnRlZFZhbHVlID0gdmFsdWUgKyAob3B0aW9uc1twcm9wXSB8fCB1bml0c1twcm9wXSB8fCAnJyk7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgYnJlYWs7XG4gIH1cblxuICByZXR1cm4gY29udmVydGVkVmFsdWU7XG59XG5cbi8qKlxuICogQWRkIHVuaXQgdG8gbnVtZXJpYyB2YWx1ZXMuXG4gKi9cbmZ1bmN0aW9uIGRlZmF1bHRVbml0KCkge1xuICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG5cbiAgdmFyIGNhbWVsQ2FzZWRPcHRpb25zID0gYWRkQ2FtZWxDYXNlZFZlcnNpb24ob3B0aW9ucyk7XG5cbiAgZnVuY3Rpb24gb25Qcm9jZXNzU3R5bGUoc3R5bGUsIHJ1bGUpIHtcbiAgICBpZiAocnVsZS50eXBlICE9PSAnc3R5bGUnKSByZXR1cm4gc3R5bGU7XG5cbiAgICBmb3IgKHZhciBwcm9wIGluIHN0eWxlKSB7XG4gICAgICBzdHlsZVtwcm9wXSA9IGl0ZXJhdGUocHJvcCwgc3R5bGVbcHJvcF0sIGNhbWVsQ2FzZWRPcHRpb25zKTtcbiAgICB9XG5cbiAgICByZXR1cm4gc3R5bGU7XG4gIH1cblxuICBmdW5jdGlvbiBvbkNoYW5nZVZhbHVlKHZhbHVlLCBwcm9wKSB7XG4gICAgcmV0dXJuIGl0ZXJhdGUocHJvcCwgdmFsdWUsIGNhbWVsQ2FzZWRPcHRpb25zKTtcbiAgfVxuXG4gIHJldHVybiB7IG9uUHJvY2Vzc1N0eWxlOiBvblByb2Nlc3NTdHlsZSwgb25DaGFuZ2VWYWx1ZTogb25DaGFuZ2VWYWx1ZSB9O1xufSIsIid1c2Ugc3RyaWN0JztcblxudmFyIHVwcGVyY2FzZVBhdHRlcm4gPSAvW0EtWl0vZztcbnZhciBtc1BhdHRlcm4gPSAvXm1zLS87XG52YXIgY2FjaGUgPSB7fTtcblxuZnVuY3Rpb24gaHlwaGVuYXRlU3R5bGVOYW1lKHN0cmluZykge1xuICAgIHJldHVybiBzdHJpbmcgaW4gY2FjaGVcbiAgICA/IGNhY2hlW3N0cmluZ11cbiAgICA6IGNhY2hlW3N0cmluZ10gPSBzdHJpbmdcbiAgICAgIC5yZXBsYWNlKHVwcGVyY2FzZVBhdHRlcm4sICctJCYnKVxuICAgICAgLnRvTG93ZXJDYXNlKClcbiAgICAgIC5yZXBsYWNlKG1zUGF0dGVybiwgJy1tcy0nKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBoeXBoZW5hdGVTdHlsZU5hbWU7XG4iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzWydkZWZhdWx0J10gPSBjYW1lbENhc2U7XG5cbnZhciBfaHlwaGVuYXRlU3R5bGVOYW1lID0gcmVxdWlyZSgnaHlwaGVuYXRlLXN0eWxlLW5hbWUnKTtcblxudmFyIF9oeXBoZW5hdGVTdHlsZU5hbWUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaHlwaGVuYXRlU3R5bGVOYW1lKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG4vKipcbiAqIENvbnZlcnQgY2FtZWwgY2FzZWQgcHJvcGVydHkgbmFtZXMgdG8gZGFzaCBzZXBhcmF0ZWQuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHN0eWxlXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKi9cbmZ1bmN0aW9uIGNvbnZlcnRDYXNlKHN0eWxlKSB7XG4gIHZhciBjb252ZXJ0ZWQgPSB7fTtcblxuICBmb3IgKHZhciBwcm9wIGluIHN0eWxlKSB7XG4gICAgY29udmVydGVkWygwLCBfaHlwaGVuYXRlU3R5bGVOYW1lMlsnZGVmYXVsdCddKShwcm9wKV0gPSBzdHlsZVtwcm9wXTtcbiAgfVxuXG4gIGlmIChzdHlsZS5mYWxsYmFja3MpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShzdHlsZS5mYWxsYmFja3MpKSBjb252ZXJ0ZWQuZmFsbGJhY2tzID0gc3R5bGUuZmFsbGJhY2tzLm1hcChjb252ZXJ0Q2FzZSk7ZWxzZSBjb252ZXJ0ZWQuZmFsbGJhY2tzID0gY29udmVydENhc2Uoc3R5bGUuZmFsbGJhY2tzKTtcbiAgfVxuXG4gIHJldHVybiBjb252ZXJ0ZWQ7XG59XG5cbi8qKlxuICogQWxsb3cgY2FtZWwgY2FzZWQgcHJvcGVydHkgbmFtZXMgYnkgY29udmVydGluZyB0aGVtIGJhY2sgdG8gZGFzaGVyaXplZC5cbiAqXG4gKiBAcGFyYW0ge1J1bGV9IHJ1bGVcbiAqL1xuZnVuY3Rpb24gY2FtZWxDYXNlKCkge1xuICBmdW5jdGlvbiBvblByb2Nlc3NTdHlsZShzdHlsZSkge1xuICAgIGlmIChBcnJheS5pc0FycmF5KHN0eWxlKSkge1xuICAgICAgLy8gSGFuZGxlIHJ1bGVzIGxpa2UgQGZvbnQtZmFjZSwgd2hpY2ggY2FuIGhhdmUgbXVsdGlwbGUgc3R5bGVzIGluIGFuIGFycmF5XG4gICAgICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgc3R5bGUubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgIHN0eWxlW2luZGV4XSA9IGNvbnZlcnRDYXNlKHN0eWxlW2luZGV4XSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gc3R5bGU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNvbnZlcnRDYXNlKHN0eWxlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uQ2hhbmdlVmFsdWUodmFsdWUsIHByb3AsIHJ1bGUpIHtcbiAgICB2YXIgaHlwaGVuYXRlZFByb3AgPSAoMCwgX2h5cGhlbmF0ZVN0eWxlTmFtZTJbJ2RlZmF1bHQnXSkocHJvcCk7XG5cbiAgICAvLyBUaGVyZSB3YXMgbm8gY2FtZWwgY2FzZSBpbiBwbGFjZVxuICAgIGlmIChwcm9wID09PSBoeXBoZW5hdGVkUHJvcCkgcmV0dXJuIHZhbHVlO1xuXG4gICAgcnVsZS5wcm9wKGh5cGhlbmF0ZWRQcm9wLCB2YWx1ZSk7XG5cbiAgICAvLyBDb3JlIHdpbGwgaWdub3JlIHRoYXQgcHJvcGVydHkgdmFsdWUgd2Ugc2V0IHRoZSBwcm9wZXIgb25lIGFib3ZlLlxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcmV0dXJuIHsgb25Qcm9jZXNzU3R5bGU6IG9uUHJvY2Vzc1N0eWxlLCBvbkNoYW5nZVZhbHVlOiBvbkNoYW5nZVZhbHVlIH07XG59IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxNC0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFNpbWlsYXIgdG8gaW52YXJpYW50IGJ1dCBvbmx5IGxvZ3MgYSB3YXJuaW5nIGlmIHRoZSBjb25kaXRpb24gaXMgbm90IG1ldC5cbiAqIFRoaXMgY2FuIGJlIHVzZWQgdG8gbG9nIGlzc3VlcyBpbiBkZXZlbG9wbWVudCBlbnZpcm9ubWVudHMgaW4gY3JpdGljYWxcbiAqIHBhdGhzLiBSZW1vdmluZyB0aGUgbG9nZ2luZyBjb2RlIGZvciBwcm9kdWN0aW9uIGVudmlyb25tZW50cyB3aWxsIGtlZXAgdGhlXG4gKiBzYW1lIGxvZ2ljIGFuZCBmb2xsb3cgdGhlIHNhbWUgY29kZSBwYXRocy5cbiAqL1xuXG52YXIgd2FybmluZyA9IGZ1bmN0aW9uKCkge307XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHdhcm5pbmcgPSBmdW5jdGlvbihjb25kaXRpb24sIGZvcm1hdCwgYXJncykge1xuICAgIHZhciBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIGFyZ3MgPSBuZXcgQXJyYXkobGVuID4gMiA/IGxlbiAtIDIgOiAwKTtcbiAgICBmb3IgKHZhciBrZXkgPSAyOyBrZXkgPCBsZW47IGtleSsrKSB7XG4gICAgICBhcmdzW2tleSAtIDJdID0gYXJndW1lbnRzW2tleV07XG4gICAgfVxuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnYHdhcm5pbmcoY29uZGl0aW9uLCBmb3JtYXQsIC4uLmFyZ3MpYCByZXF1aXJlcyBhIHdhcm5pbmcgJyArXG4gICAgICAgICdtZXNzYWdlIGFyZ3VtZW50J1xuICAgICAgKTtcbiAgICB9XG5cbiAgICBpZiAoZm9ybWF0Lmxlbmd0aCA8IDEwIHx8ICgvXltzXFxXXSokLykudGVzdChmb3JtYXQpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdUaGUgd2FybmluZyBmb3JtYXQgc2hvdWxkIGJlIGFibGUgdG8gdW5pcXVlbHkgaWRlbnRpZnkgdGhpcyAnICtcbiAgICAgICAgJ3dhcm5pbmcuIFBsZWFzZSwgdXNlIGEgbW9yZSBkZXNjcmlwdGl2ZSBmb3JtYXQgdGhhbjogJyArIGZvcm1hdFxuICAgICAgKTtcbiAgICB9XG5cbiAgICBpZiAoIWNvbmRpdGlvbikge1xuICAgICAgdmFyIGFyZ0luZGV4ID0gMDtcbiAgICAgIHZhciBtZXNzYWdlID0gJ1dhcm5pbmc6ICcgK1xuICAgICAgICBmb3JtYXQucmVwbGFjZSgvJXMvZywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIGFyZ3NbYXJnSW5kZXgrK107XG4gICAgICAgIH0pO1xuICAgICAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBjb25zb2xlLmVycm9yKG1lc3NhZ2UpO1xuICAgICAgfVxuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gVGhpcyBlcnJvciB3YXMgdGhyb3duIGFzIGEgY29udmVuaWVuY2Ugc28gdGhhdCB5b3UgY2FuIHVzZSB0aGlzIHN0YWNrXG4gICAgICAgIC8vIHRvIGZpbmQgdGhlIGNhbGxzaXRlIHRoYXQgY2F1c2VkIHRoaXMgd2FybmluZyB0byBmaXJlLlxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gICAgICB9IGNhdGNoKHgpIHt9XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHdhcm5pbmc7XG4iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGpzc05lc3RlZDtcblxudmFyIF93YXJuaW5nID0gcmVxdWlyZSgnd2FybmluZycpO1xuXG52YXIgX3dhcm5pbmcyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfd2FybmluZyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBzZXBhcmF0b3JSZWdFeHAgPSAvXFxzKixcXHMqL2c7XG52YXIgcGFyZW50UmVnRXhwID0gLyYvZztcbnZhciByZWZSZWdFeHAgPSAvXFwkKFtcXHctXSspL2c7XG5cbi8qKlxuICogQ29udmVydCBuZXN0ZWQgcnVsZXMgdG8gc2VwYXJhdGUsIHJlbW92ZSB0aGVtIGZyb20gb3JpZ2luYWwgc3R5bGVzLlxuICpcbiAqIEBwYXJhbSB7UnVsZX0gcnVsZVxuICogQGFwaSBwdWJsaWNcbiAqL1xuZnVuY3Rpb24ganNzTmVzdGVkKCkge1xuICAvLyBHZXQgYSBmdW5jdGlvbiB0byBiZSB1c2VkIGZvciAkcmVmIHJlcGxhY2VtZW50LlxuICBmdW5jdGlvbiBnZXRSZXBsYWNlUmVmKGNvbnRhaW5lcikge1xuICAgIHJldHVybiBmdW5jdGlvbiAobWF0Y2gsIGtleSkge1xuICAgICAgdmFyIHJ1bGUgPSBjb250YWluZXIuZ2V0UnVsZShrZXkpO1xuICAgICAgaWYgKHJ1bGUpIHJldHVybiBydWxlLnNlbGVjdG9yO1xuICAgICAgKDAsIF93YXJuaW5nMi5kZWZhdWx0KShmYWxzZSwgJ1tKU1NdIENvdWxkIG5vdCBmaW5kIHRoZSByZWZlcmVuY2VkIHJ1bGUgJXMgaW4gJXMuJywga2V5LCBjb250YWluZXIub3B0aW9ucy5tZXRhIHx8IGNvbnRhaW5lcik7XG4gICAgICByZXR1cm4ga2V5O1xuICAgIH07XG4gIH1cblxuICB2YXIgaGFzQW5kID0gZnVuY3Rpb24gaGFzQW5kKHN0cikge1xuICAgIHJldHVybiBzdHIuaW5kZXhPZignJicpICE9PSAtMTtcbiAgfTtcblxuICBmdW5jdGlvbiByZXBsYWNlUGFyZW50UmVmcyhuZXN0ZWRQcm9wLCBwYXJlbnRQcm9wKSB7XG4gICAgdmFyIHBhcmVudFNlbGVjdG9ycyA9IHBhcmVudFByb3Auc3BsaXQoc2VwYXJhdG9yUmVnRXhwKTtcbiAgICB2YXIgbmVzdGVkU2VsZWN0b3JzID0gbmVzdGVkUHJvcC5zcGxpdChzZXBhcmF0b3JSZWdFeHApO1xuXG4gICAgdmFyIHJlc3VsdCA9ICcnO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXJlbnRTZWxlY3RvcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBwYXJlbnQgPSBwYXJlbnRTZWxlY3RvcnNbaV07XG5cbiAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgbmVzdGVkU2VsZWN0b3JzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgIHZhciBuZXN0ZWQgPSBuZXN0ZWRTZWxlY3RvcnNbal07XG4gICAgICAgIGlmIChyZXN1bHQpIHJlc3VsdCArPSAnLCAnO1xuICAgICAgICAvLyBSZXBsYWNlIGFsbCAmIGJ5IHRoZSBwYXJlbnQgb3IgcHJlZml4ICYgd2l0aCB0aGUgcGFyZW50LlxuICAgICAgICByZXN1bHQgKz0gaGFzQW5kKG5lc3RlZCkgPyBuZXN0ZWQucmVwbGFjZShwYXJlbnRSZWdFeHAsIHBhcmVudCkgOiBwYXJlbnQgKyAnICcgKyBuZXN0ZWQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldE9wdGlvbnMocnVsZSwgY29udGFpbmVyLCBvcHRpb25zKSB7XG4gICAgLy8gT3B0aW9ucyBoYXMgYmVlbiBhbHJlYWR5IGNyZWF0ZWQsIG5vdyB3ZSBvbmx5IGluY3JlYXNlIGluZGV4LlxuICAgIGlmIChvcHRpb25zKSByZXR1cm4gX2V4dGVuZHMoe30sIG9wdGlvbnMsIHsgaW5kZXg6IG9wdGlvbnMuaW5kZXggKyAxIH0pO1xuXG4gICAgdmFyIG5lc3RpbmdMZXZlbCA9IHJ1bGUub3B0aW9ucy5uZXN0aW5nTGV2ZWw7XG5cbiAgICBuZXN0aW5nTGV2ZWwgPSBuZXN0aW5nTGV2ZWwgPT09IHVuZGVmaW5lZCA/IDEgOiBuZXN0aW5nTGV2ZWwgKyAxO1xuXG4gICAgcmV0dXJuIF9leHRlbmRzKHt9LCBydWxlLm9wdGlvbnMsIHtcbiAgICAgIG5lc3RpbmdMZXZlbDogbmVzdGluZ0xldmVsLFxuICAgICAgaW5kZXg6IGNvbnRhaW5lci5pbmRleE9mKHJ1bGUpICsgMVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gb25Qcm9jZXNzU3R5bGUoc3R5bGUsIHJ1bGUpIHtcbiAgICBpZiAocnVsZS50eXBlICE9PSAnc3R5bGUnKSByZXR1cm4gc3R5bGU7XG4gICAgdmFyIGNvbnRhaW5lciA9IHJ1bGUub3B0aW9ucy5wYXJlbnQ7XG4gICAgdmFyIG9wdGlvbnMgPSB2b2lkIDA7XG4gICAgdmFyIHJlcGxhY2VSZWYgPSB2b2lkIDA7XG4gICAgZm9yICh2YXIgcHJvcCBpbiBzdHlsZSkge1xuICAgICAgdmFyIGlzTmVzdGVkID0gaGFzQW5kKHByb3ApO1xuICAgICAgdmFyIGlzTmVzdGVkQ29uZGl0aW9uYWwgPSBwcm9wWzBdID09PSAnQCc7XG5cbiAgICAgIGlmICghaXNOZXN0ZWQgJiYgIWlzTmVzdGVkQ29uZGl0aW9uYWwpIGNvbnRpbnVlO1xuXG4gICAgICBvcHRpb25zID0gZ2V0T3B0aW9ucyhydWxlLCBjb250YWluZXIsIG9wdGlvbnMpO1xuXG4gICAgICBpZiAoaXNOZXN0ZWQpIHtcbiAgICAgICAgdmFyIHNlbGVjdG9yID0gcmVwbGFjZVBhcmVudFJlZnMocHJvcCwgcnVsZS5zZWxlY3RvclxuICAgICAgICAvLyBMYXppbHkgY3JlYXRlIHRoZSByZWYgcmVwbGFjZXIgZnVuY3Rpb24ganVzdCBvbmNlIGZvclxuICAgICAgICAvLyBhbGwgbmVzdGVkIHJ1bGVzIHdpdGhpbiB0aGUgc2hlZXQuXG4gICAgICAgICk7aWYgKCFyZXBsYWNlUmVmKSByZXBsYWNlUmVmID0gZ2V0UmVwbGFjZVJlZihjb250YWluZXJcbiAgICAgICAgLy8gUmVwbGFjZSBhbGwgJHJlZnMuXG4gICAgICAgICk7c2VsZWN0b3IgPSBzZWxlY3Rvci5yZXBsYWNlKHJlZlJlZ0V4cCwgcmVwbGFjZVJlZik7XG5cbiAgICAgICAgY29udGFpbmVyLmFkZFJ1bGUoc2VsZWN0b3IsIHN0eWxlW3Byb3BdLCBfZXh0ZW5kcyh7fSwgb3B0aW9ucywgeyBzZWxlY3Rvcjogc2VsZWN0b3IgfSkpO1xuICAgICAgfSBlbHNlIGlmIChpc05lc3RlZENvbmRpdGlvbmFsKSB7XG4gICAgICAgIGNvbnRhaW5lclxuICAgICAgICAvLyBQbGFjZSBjb25kaXRpb25hbCByaWdodCBhZnRlciB0aGUgcGFyZW50IHJ1bGUgdG8gZW5zdXJlIHJpZ2h0IG9yZGVyaW5nLlxuICAgICAgICAuYWRkUnVsZShwcm9wLCBudWxsLCBvcHRpb25zKS5hZGRSdWxlKHJ1bGUua2V5LCBzdHlsZVtwcm9wXSwgeyBzZWxlY3RvcjogcnVsZS5zZWxlY3RvciB9KTtcbiAgICAgIH1cblxuICAgICAgZGVsZXRlIHN0eWxlW3Byb3BdO1xuICAgIH1cblxuICAgIHJldHVybiBzdHlsZTtcbiAgfVxuXG4gIHJldHVybiB7IG9uUHJvY2Vzc1N0eWxlOiBvblByb2Nlc3NTdHlsZSB9O1xufSIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuLyogZXNsaW50LWRpc2FibGUgY2xhc3MtbWV0aG9kcy11c2UtdGhpcyAqL1xuXG4vKipcbiAqIFJlbmRlcmluZyBiYWNrZW5kIHRvIGRvIG5vdGhpbmcgaW4gbm9kZWpzLlxuICovXG52YXIgVmlydHVhbFJlbmRlcmVyID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBWaXJ0dWFsUmVuZGVyZXIoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFZpcnR1YWxSZW5kZXJlcik7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoVmlydHVhbFJlbmRlcmVyLCBbe1xuICAgIGtleTogJ3NldFByb3BlcnR5JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0UHJvcGVydHkoKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdnZXRQcm9wZXJ0eVZhbHVlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0UHJvcGVydHlWYWx1ZSgpIHtcbiAgICAgIHJldHVybiAnJztcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdyZW1vdmVQcm9wZXJ0eScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbW92ZVByb3BlcnR5KCkge31cbiAgfSwge1xuICAgIGtleTogJ3NldFNlbGVjdG9yJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0U2VsZWN0b3IoKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdnZXRLZXknLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRLZXkoKSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnYXR0YWNoJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gYXR0YWNoKCkge31cbiAgfSwge1xuICAgIGtleTogJ2RldGFjaCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRldGFjaCgpIHt9XG4gIH0sIHtcbiAgICBrZXk6ICdkZXBsb3knLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkZXBsb3koKSB7fVxuICB9LCB7XG4gICAga2V5OiAnaW5zZXJ0UnVsZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGluc2VydFJ1bGUoKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZGVsZXRlUnVsZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRlbGV0ZVJ1bGUoKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdyZXBsYWNlUnVsZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlcGxhY2VSdWxlKCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2dldFJ1bGVzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0UnVsZXMoKSB7fVxuICB9LCB7XG4gICAga2V5OiAnaW5kZXhPZicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGluZGV4T2YoKSB7XG4gICAgICByZXR1cm4gLTE7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFZpcnR1YWxSZW5kZXJlcjtcbn0oKTtcblxuZXhwb3J0c1snZGVmYXVsdCddID0gVmlydHVhbFJlbmRlcmVyOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF93YXJuaW5nID0gcmVxdWlyZSgnd2FybmluZycpO1xuXG52YXIgX3dhcm5pbmcyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfd2FybmluZyk7XG5cbnZhciBfc2hlZXRzID0gcmVxdWlyZSgnLi4vc2hlZXRzJyk7XG5cbnZhciBfc2hlZXRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3NoZWV0cyk7XG5cbnZhciBfU3R5bGVSdWxlID0gcmVxdWlyZSgnLi4vcnVsZXMvU3R5bGVSdWxlJyk7XG5cbnZhciBfU3R5bGVSdWxlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1N0eWxlUnVsZSk7XG5cbnZhciBfdG9Dc3NWYWx1ZSA9IHJlcXVpcmUoJy4uL3V0aWxzL3RvQ3NzVmFsdWUnKTtcblxudmFyIF90b0Nzc1ZhbHVlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3RvQ3NzVmFsdWUpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbi8qKlxuICogQ2FjaGUgdGhlIHZhbHVlIGZyb20gdGhlIGZpcnN0IHRpbWUgYSBmdW5jdGlvbiBpcyBjYWxsZWQuXG4gKi9cbnZhciBtZW1vaXplID0gZnVuY3Rpb24gbWVtb2l6ZShmbikge1xuICB2YXIgdmFsdWUgPSB2b2lkIDA7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCF2YWx1ZSkgdmFsdWUgPSBmbigpO1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfTtcbn07XG5cbi8qKlxuICogR2V0IGEgc3R5bGUgcHJvcGVydHkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGdldFByb3BlcnR5VmFsdWUoY3NzUnVsZSwgcHJvcCkge1xuICB0cnkge1xuICAgIHJldHVybiBjc3NSdWxlLnN0eWxlLmdldFByb3BlcnR5VmFsdWUocHJvcCk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIC8vIElFIG1heSB0aHJvdyBpZiBwcm9wZXJ0eSBpcyB1bmtub3duLlxuICAgIHJldHVybiAnJztcbiAgfVxufVxuXG4vKipcbiAqIFNldCBhIHN0eWxlIHByb3BlcnR5LlxuICovXG5mdW5jdGlvbiBzZXRQcm9wZXJ0eShjc3NSdWxlLCBwcm9wLCB2YWx1ZSkge1xuICB0cnkge1xuICAgIHZhciBjc3NWYWx1ZSA9IHZhbHVlO1xuXG4gICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICBjc3NWYWx1ZSA9ICgwLCBfdG9Dc3NWYWx1ZTJbJ2RlZmF1bHQnXSkodmFsdWUsIHRydWUpO1xuXG4gICAgICBpZiAodmFsdWVbdmFsdWUubGVuZ3RoIC0gMV0gPT09ICchaW1wb3J0YW50Jykge1xuICAgICAgICBjc3NSdWxlLnN0eWxlLnNldFByb3BlcnR5KHByb3AsIGNzc1ZhbHVlLCAnaW1wb3J0YW50Jyk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNzc1J1bGUuc3R5bGUuc2V0UHJvcGVydHkocHJvcCwgY3NzVmFsdWUpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICAvLyBJRSBtYXkgdGhyb3cgaWYgcHJvcGVydHkgaXMgdW5rbm93bi5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59XG5cbi8qKlxuICogUmVtb3ZlIGEgc3R5bGUgcHJvcGVydHkuXG4gKi9cbmZ1bmN0aW9uIHJlbW92ZVByb3BlcnR5KGNzc1J1bGUsIHByb3ApIHtcbiAgdHJ5IHtcbiAgICBjc3NSdWxlLnN0eWxlLnJlbW92ZVByb3BlcnR5KHByb3ApO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICAoMCwgX3dhcm5pbmcyWydkZWZhdWx0J10pKGZhbHNlLCAnW0pTU10gRE9NRXhjZXB0aW9uIFwiJXNcIiB3YXMgdGhyb3duLiBUcmllZCB0byByZW1vdmUgcHJvcGVydHkgXCIlc1wiLicsIGVyci5tZXNzYWdlLCBwcm9wKTtcbiAgfVxufVxuXG52YXIgQ1NTUnVsZVR5cGVzID0ge1xuICBTVFlMRV9SVUxFOiAxLFxuICBLRVlGUkFNRVNfUlVMRTogN1xuXG4gIC8qKlxuICAgKiBHZXQgdGhlIENTUyBSdWxlIGtleS5cbiAgICovXG5cbn07dmFyIGdldEtleSA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGV4dHJhY3RLZXkgPSBmdW5jdGlvbiBleHRyYWN0S2V5KGNzc1RleHQpIHtcbiAgICB2YXIgZnJvbSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogMDtcbiAgICByZXR1cm4gY3NzVGV4dC5zdWJzdHIoZnJvbSwgY3NzVGV4dC5pbmRleE9mKCd7JykgLSAxKTtcbiAgfTtcblxuICByZXR1cm4gZnVuY3Rpb24gKGNzc1J1bGUpIHtcbiAgICBpZiAoY3NzUnVsZS50eXBlID09PSBDU1NSdWxlVHlwZXMuU1RZTEVfUlVMRSkgcmV0dXJuIGNzc1J1bGUuc2VsZWN0b3JUZXh0O1xuICAgIGlmIChjc3NSdWxlLnR5cGUgPT09IENTU1J1bGVUeXBlcy5LRVlGUkFNRVNfUlVMRSkge1xuICAgICAgdmFyIG5hbWUgPSBjc3NSdWxlLm5hbWU7XG5cbiAgICAgIGlmIChuYW1lKSByZXR1cm4gJ0BrZXlmcmFtZXMgJyArIG5hbWU7XG5cbiAgICAgIC8vIFRoZXJlIGlzIG5vIHJ1bGUubmFtZSBpbiB0aGUgZm9sbG93aW5nIGJyb3dzZXJzOlxuICAgICAgLy8gLSBJRSA5XG4gICAgICAvLyAtIFNhZmFyaSA3LjEuOFxuICAgICAgLy8gLSBNb2JpbGUgU2FmYXJpIDkuMC4wXG4gICAgICB2YXIgY3NzVGV4dCA9IGNzc1J1bGUuY3NzVGV4dDtcblxuICAgICAgcmV0dXJuICdAJyArIGV4dHJhY3RLZXkoY3NzVGV4dCwgY3NzVGV4dC5pbmRleE9mKCdrZXlmcmFtZXMnKSk7XG4gICAgfVxuXG4gICAgLy8gQ29uZGl0aW9uYWxzLlxuICAgIHJldHVybiBleHRyYWN0S2V5KGNzc1J1bGUuY3NzVGV4dCk7XG4gIH07XG59KCk7XG5cbi8qKlxuICogU2V0IHRoZSBzZWxlY3Rvci5cbiAqL1xuZnVuY3Rpb24gc2V0U2VsZWN0b3IoY3NzUnVsZSwgc2VsZWN0b3JUZXh0KSB7XG4gIGNzc1J1bGUuc2VsZWN0b3JUZXh0ID0gc2VsZWN0b3JUZXh0O1xuXG4gIC8vIFJldHVybiBmYWxzZSBpZiBzZXR0ZXIgd2FzIG5vdCBzdWNjZXNzZnVsLlxuICAvLyBDdXJyZW50bHkgd29ya3MgaW4gY2hyb21lIG9ubHkuXG4gIHJldHVybiBjc3NSdWxlLnNlbGVjdG9yVGV4dCA9PT0gc2VsZWN0b3JUZXh0O1xufVxuXG4vKipcbiAqIEdldHMgdGhlIGBoZWFkYCBlbGVtZW50IHVwb24gdGhlIGZpcnN0IGNhbGwgYW5kIGNhY2hlcyBpdC5cbiAqL1xudmFyIGdldEhlYWQgPSBtZW1vaXplKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGRvY3VtZW50LmhlYWQgfHwgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2hlYWQnKVswXTtcbn0pO1xuXG4vKipcbiAqIEdldHMgYSBtYXAgb2YgcnVsZSBrZXlzLCB3aGVyZSB0aGUgcHJvcGVydHkgaXMgYW4gdW5lc2NhcGVkIGtleSBhbmQgdmFsdWVcbiAqIGlzIGEgcG90ZW50aWFsbHkgZXNjYXBlZCBvbmUuXG4gKiBJdCBpcyB1c2VkIHRvIGlkZW50aWZ5IENTUyBydWxlcyBhbmQgdGhlIGNvcnJlc3BvbmRpbmcgSlNTIHJ1bGVzLiBBcyBhbiBpZGVudGlmaWVyXG4gKiBmb3IgQ1NTU3R5bGVSdWxlIHdlIG5vcm1hbGx5IHVzZSBgc2VsZWN0b3JUZXh0YC4gVGhvdWdoIGlmIG9yaWdpbmFsIHNlbGVjdG9yIHRleHRcbiAqIGNvbnRhaW5zIGVzY2FwZWQgY29kZSBwb2ludHMgZS5nLiBgOm5vdCgjXFxcXDIwKWAsIENTU09NIHdpbGwgY29tcGlsZSBpdCB0byBgOm5vdCgjIClgXG4gKiBhbmQgc28gQ1NTIHJ1bGUncyBgc2VsZWN0b3JUZXh0YCB3b24ndCBtYXRjaCBKU1MgcnVsZSBzZWxlY3Rvci5cbiAqXG4gKiBodHRwczovL3d3dy53My5vcmcvSW50ZXJuYXRpb25hbC9xdWVzdGlvbnMvcWEtZXNjYXBlcyNjc3Nlc2NhcGVzXG4gKi9cbnZhciBnZXRVbmVzY2FwZWRLZXlzTWFwID0gZnVuY3Rpb24gKCkge1xuICB2YXIgc3R5bGUgPSB2b2lkIDA7XG4gIHZhciBpc0F0dGFjaGVkID0gZmFsc2U7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChydWxlcykge1xuICAgIHZhciBtYXAgPSB7fTtcbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svZmxvdy9pc3N1ZXMvMjY5NlxuICAgIGlmICghc3R5bGUpIHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJ1bGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgcnVsZSA9IHJ1bGVzW2ldO1xuICAgICAgaWYgKCEocnVsZSBpbnN0YW5jZW9mIF9TdHlsZVJ1bGUyWydkZWZhdWx0J10pKSBjb250aW51ZTtcbiAgICAgIHZhciBzZWxlY3RvciA9IHJ1bGUuc2VsZWN0b3I7XG4gICAgICAvLyBPbmx5IHVuZXNjYXBlIHNlbGVjdG9yIG92ZXIgQ1NTT00gaWYgaXQgY29udGFpbnMgYSBiYWNrIHNsYXNoLlxuXG4gICAgICBpZiAoc2VsZWN0b3IgJiYgc2VsZWN0b3IuaW5kZXhPZignXFxcXCcpICE9PSAtMSkge1xuICAgICAgICAvLyBMYXppbGx5IGF0dGFjaCB3aGVuIG5lZWRlZC5cbiAgICAgICAgaWYgKCFpc0F0dGFjaGVkKSB7XG4gICAgICAgICAgZ2V0SGVhZCgpLmFwcGVuZENoaWxkKHN0eWxlKTtcbiAgICAgICAgICBpc0F0dGFjaGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBzdHlsZS50ZXh0Q29udGVudCA9IHNlbGVjdG9yICsgJyB7fSc7XG4gICAgICAgIHZhciBfc3R5bGUgPSBzdHlsZSxcbiAgICAgICAgICAgIHNoZWV0ID0gX3N0eWxlLnNoZWV0O1xuXG4gICAgICAgIGlmIChzaGVldCkge1xuICAgICAgICAgIHZhciBjc3NSdWxlcyA9IHNoZWV0LmNzc1J1bGVzO1xuXG4gICAgICAgICAgaWYgKGNzc1J1bGVzKSBtYXBbY3NzUnVsZXNbMF0uc2VsZWN0b3JUZXh0XSA9IHJ1bGUua2V5O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChpc0F0dGFjaGVkKSB7XG4gICAgICBnZXRIZWFkKCkucmVtb3ZlQ2hpbGQoc3R5bGUpO1xuICAgICAgaXNBdHRhY2hlZCA9IGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gbWFwO1xuICB9O1xufSgpO1xuXG4vKipcbiAqIEZpbmQgYXR0YWNoZWQgc2hlZXQgd2l0aCBhbiBpbmRleCBoaWdoZXIgdGhhbiB0aGUgcGFzc2VkIG9uZS5cbiAqL1xuZnVuY3Rpb24gZmluZEhpZ2hlclNoZWV0KHJlZ2lzdHJ5LCBvcHRpb25zKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcmVnaXN0cnkubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgc2hlZXQgPSByZWdpc3RyeVtpXTtcbiAgICBpZiAoc2hlZXQuYXR0YWNoZWQgJiYgc2hlZXQub3B0aW9ucy5pbmRleCA+IG9wdGlvbnMuaW5kZXggJiYgc2hlZXQub3B0aW9ucy5pbnNlcnRpb25Qb2ludCA9PT0gb3B0aW9ucy5pbnNlcnRpb25Qb2ludCkge1xuICAgICAgcmV0dXJuIHNoZWV0O1xuICAgIH1cbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cblxuLyoqXG4gKiBGaW5kIGF0dGFjaGVkIHNoZWV0IHdpdGggdGhlIGhpZ2hlc3QgaW5kZXguXG4gKi9cbmZ1bmN0aW9uIGZpbmRIaWdoZXN0U2hlZXQocmVnaXN0cnksIG9wdGlvbnMpIHtcbiAgZm9yICh2YXIgaSA9IHJlZ2lzdHJ5Lmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgdmFyIHNoZWV0ID0gcmVnaXN0cnlbaV07XG4gICAgaWYgKHNoZWV0LmF0dGFjaGVkICYmIHNoZWV0Lm9wdGlvbnMuaW5zZXJ0aW9uUG9pbnQgPT09IG9wdGlvbnMuaW5zZXJ0aW9uUG9pbnQpIHtcbiAgICAgIHJldHVybiBzaGVldDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5cbi8qKlxuICogRmluZCBhIGNvbW1lbnQgd2l0aCBcImpzc1wiIGluc2lkZS5cbiAqL1xuZnVuY3Rpb24gZmluZENvbW1lbnROb2RlKHRleHQpIHtcbiAgdmFyIGhlYWQgPSBnZXRIZWFkKCk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgaGVhZC5jaGlsZE5vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIG5vZGUgPSBoZWFkLmNoaWxkTm9kZXNbaV07XG4gICAgaWYgKG5vZGUubm9kZVR5cGUgPT09IDggJiYgbm9kZS5ub2RlVmFsdWUudHJpbSgpID09PSB0ZXh0KSB7XG4gICAgICByZXR1cm4gbm9kZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5cbi8qKlxuICogRmluZCBhIG5vZGUgYmVmb3JlIHdoaWNoIHdlIGNhbiBpbnNlcnQgdGhlIHNoZWV0LlxuICovXG5mdW5jdGlvbiBmaW5kUHJldk5vZGUob3B0aW9ucykge1xuICB2YXIgcmVnaXN0cnkgPSBfc2hlZXRzMlsnZGVmYXVsdCddLnJlZ2lzdHJ5O1xuXG5cbiAgaWYgKHJlZ2lzdHJ5Lmxlbmd0aCA+IDApIHtcbiAgICAvLyBUcnkgdG8gaW5zZXJ0IGJlZm9yZSB0aGUgbmV4dCBoaWdoZXIgc2hlZXQuXG4gICAgdmFyIHNoZWV0ID0gZmluZEhpZ2hlclNoZWV0KHJlZ2lzdHJ5LCBvcHRpb25zKTtcbiAgICBpZiAoc2hlZXQpIHJldHVybiBzaGVldC5yZW5kZXJlci5lbGVtZW50O1xuXG4gICAgLy8gT3RoZXJ3aXNlIGluc2VydCBhZnRlciB0aGUgbGFzdCBhdHRhY2hlZC5cbiAgICBzaGVldCA9IGZpbmRIaWdoZXN0U2hlZXQocmVnaXN0cnksIG9wdGlvbnMpO1xuICAgIGlmIChzaGVldCkgcmV0dXJuIHNoZWV0LnJlbmRlcmVyLmVsZW1lbnQubmV4dEVsZW1lbnRTaWJsaW5nO1xuICB9XG5cbiAgLy8gVHJ5IHRvIGZpbmQgYSBjb21tZW50IHBsYWNlaG9sZGVyIGlmIHJlZ2lzdHJ5IGlzIGVtcHR5LlxuICB2YXIgaW5zZXJ0aW9uUG9pbnQgPSBvcHRpb25zLmluc2VydGlvblBvaW50O1xuXG4gIGlmIChpbnNlcnRpb25Qb2ludCAmJiB0eXBlb2YgaW5zZXJ0aW9uUG9pbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgdmFyIGNvbW1lbnQgPSBmaW5kQ29tbWVudE5vZGUoaW5zZXJ0aW9uUG9pbnQpO1xuICAgIGlmIChjb21tZW50KSByZXR1cm4gY29tbWVudC5uZXh0U2libGluZztcbiAgICAvLyBJZiB1c2VyIHNwZWNpZmllcyBhbiBpbnNlcnRpb24gcG9pbnQgYW5kIGl0IGNhbid0IGJlIGZvdW5kIGluIHRoZSBkb2N1bWVudCAtXG4gICAgLy8gYmFkIHNwZWNpZmljaXR5IGlzc3VlcyBtYXkgYXBwZWFyLlxuICAgICgwLCBfd2FybmluZzJbJ2RlZmF1bHQnXSkoaW5zZXJ0aW9uUG9pbnQgPT09ICdqc3MnLCAnW0pTU10gSW5zZXJ0aW9uIHBvaW50IFwiJXNcIiBub3QgZm91bmQuJywgaW5zZXJ0aW9uUG9pbnQpO1xuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG5cbi8qKlxuICogSW5zZXJ0IHN0eWxlIGVsZW1lbnQgaW50byB0aGUgRE9NLlxuICovXG5mdW5jdGlvbiBpbnNlcnRTdHlsZShzdHlsZSwgb3B0aW9ucykge1xuICB2YXIgaW5zZXJ0aW9uUG9pbnQgPSBvcHRpb25zLmluc2VydGlvblBvaW50O1xuXG4gIHZhciBwcmV2Tm9kZSA9IGZpbmRQcmV2Tm9kZShvcHRpb25zKTtcblxuICBpZiAocHJldk5vZGUpIHtcbiAgICB2YXIgcGFyZW50Tm9kZSA9IHByZXZOb2RlLnBhcmVudE5vZGU7XG5cbiAgICBpZiAocGFyZW50Tm9kZSkgcGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoc3R5bGUsIHByZXZOb2RlKTtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBXb3JrcyB3aXRoIGlmcmFtZXMgYW5kIGFueSBub2RlIHR5cGVzLlxuICBpZiAoaW5zZXJ0aW9uUG9pbnQgJiYgdHlwZW9mIGluc2VydGlvblBvaW50Lm5vZGVUeXBlID09PSAnbnVtYmVyJykge1xuICAgIC8vIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzQxMzI4NzI4L2ZvcmNlLWNhc3RpbmctaW4tZmxvd1xuICAgIHZhciBpbnNlcnRpb25Qb2ludEVsZW1lbnQgPSBpbnNlcnRpb25Qb2ludDtcbiAgICB2YXIgX3BhcmVudE5vZGUgPSBpbnNlcnRpb25Qb2ludEVsZW1lbnQucGFyZW50Tm9kZTtcblxuICAgIGlmIChfcGFyZW50Tm9kZSkgX3BhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHN0eWxlLCBpbnNlcnRpb25Qb2ludEVsZW1lbnQubmV4dFNpYmxpbmcpO2Vsc2UgKDAsIF93YXJuaW5nMlsnZGVmYXVsdCddKShmYWxzZSwgJ1tKU1NdIEluc2VydGlvbiBwb2ludCBpcyBub3QgaW4gdGhlIERPTS4nKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBnZXRIZWFkKCkuaW5zZXJ0QmVmb3JlKHN0eWxlLCBwcmV2Tm9kZSk7XG59XG5cbi8qKlxuICogUmVhZCBqc3Mgbm9uY2Ugc2V0dGluZyBmcm9tIHRoZSBwYWdlIGlmIHRoZSB1c2VyIGhhcyBzZXQgaXQuXG4gKi9cbnZhciBnZXROb25jZSA9IG1lbW9pemUoZnVuY3Rpb24gKCkge1xuICB2YXIgbm9kZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ21ldGFbcHJvcGVydHk9XCJjc3Atbm9uY2VcIl0nKTtcbiAgcmV0dXJuIG5vZGUgPyBub2RlLmdldEF0dHJpYnV0ZSgnY29udGVudCcpIDogbnVsbDtcbn0pO1xuXG52YXIgRG9tUmVuZGVyZXIgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIERvbVJlbmRlcmVyKHNoZWV0KSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIERvbVJlbmRlcmVyKTtcblxuICAgIHRoaXMuZ2V0UHJvcGVydHlWYWx1ZSA9IGdldFByb3BlcnR5VmFsdWU7XG4gICAgdGhpcy5zZXRQcm9wZXJ0eSA9IHNldFByb3BlcnR5O1xuICAgIHRoaXMucmVtb3ZlUHJvcGVydHkgPSByZW1vdmVQcm9wZXJ0eTtcbiAgICB0aGlzLnNldFNlbGVjdG9yID0gc2V0U2VsZWN0b3I7XG4gICAgdGhpcy5nZXRLZXkgPSBnZXRLZXk7XG4gICAgdGhpcy5nZXRVbmVzY2FwZWRLZXlzTWFwID0gZ2V0VW5lc2NhcGVkS2V5c01hcDtcbiAgICB0aGlzLmhhc0luc2VydGVkUnVsZXMgPSBmYWxzZTtcblxuICAgIC8vIFRoZXJlIGlzIG5vIHNoZWV0IHdoZW4gdGhlIHJlbmRlcmVyIGlzIHVzZWQgZnJvbSBhIHN0YW5kYWxvbmUgU3R5bGVSdWxlLlxuICAgIGlmIChzaGVldCkgX3NoZWV0czJbJ2RlZmF1bHQnXS5hZGQoc2hlZXQpO1xuXG4gICAgdGhpcy5zaGVldCA9IHNoZWV0O1xuXG4gICAgdmFyIF9yZWYgPSB0aGlzLnNoZWV0ID8gdGhpcy5zaGVldC5vcHRpb25zIDoge30sXG4gICAgICAgIG1lZGlhID0gX3JlZi5tZWRpYSxcbiAgICAgICAgbWV0YSA9IF9yZWYubWV0YSxcbiAgICAgICAgZWxlbWVudCA9IF9yZWYuZWxlbWVudDtcblxuICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQgfHwgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcbiAgICB0aGlzLmVsZW1lbnQudHlwZSA9ICd0ZXh0L2Nzcyc7XG4gICAgdGhpcy5lbGVtZW50LnNldEF0dHJpYnV0ZSgnZGF0YS1qc3MnLCAnJyk7XG4gICAgaWYgKG1lZGlhKSB0aGlzLmVsZW1lbnQuc2V0QXR0cmlidXRlKCdtZWRpYScsIG1lZGlhKTtcbiAgICBpZiAobWV0YSkgdGhpcy5lbGVtZW50LnNldEF0dHJpYnV0ZSgnZGF0YS1tZXRhJywgbWV0YSk7XG4gICAgdmFyIG5vbmNlID0gZ2V0Tm9uY2UoKTtcbiAgICBpZiAobm9uY2UpIHRoaXMuZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ25vbmNlJywgbm9uY2UpO1xuICB9XG5cbiAgLyoqXG4gICAqIEluc2VydCBzdHlsZSBlbGVtZW50IGludG8gcmVuZGVyIHRyZWUuXG4gICAqL1xuXG5cbiAgLy8gSFRNTFN0eWxlRWxlbWVudCBuZWVkcyBmaXhpbmcgaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL2Zsb3cvaXNzdWVzLzI2OTZcblxuXG4gIF9jcmVhdGVDbGFzcyhEb21SZW5kZXJlciwgW3tcbiAgICBrZXk6ICdhdHRhY2gnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBhdHRhY2goKSB7XG4gICAgICAvLyBJbiB0aGUgY2FzZSB0aGUgZWxlbWVudCBub2RlIGlzIGV4dGVybmFsIGFuZCBpdCBpcyBhbHJlYWR5IGluIHRoZSBET00uXG4gICAgICBpZiAodGhpcy5lbGVtZW50LnBhcmVudE5vZGUgfHwgIXRoaXMuc2hlZXQpIHJldHVybjtcblxuICAgICAgLy8gV2hlbiBydWxlcyBhcmUgaW5zZXJ0ZWQgdXNpbmcgYGluc2VydFJ1bGVgIEFQSSwgYWZ0ZXIgYHNoZWV0LmRldGFjaCgpLmF0dGFjaCgpYFxuICAgICAgLy8gYnJvd3NlcnMgcmVtb3ZlIHRob3NlIHJ1bGVzLlxuICAgICAgLy8gVE9ETyBmaWd1cmUgb3V0IGlmIGl0cyBhIGJ1ZyBhbmQgaWYgaXQgaXMga25vd24uXG4gICAgICAvLyBXb3JrYXJvdW5kIGlzIHRvIHJlZGVwbG95IHRoZSBzaGVldCBiZWZvcmUgYXR0YWNoaW5nIGFzIGEgc3RyaW5nLlxuICAgICAgaWYgKHRoaXMuaGFzSW5zZXJ0ZWRSdWxlcykge1xuICAgICAgICB0aGlzLmRlcGxveSgpO1xuICAgICAgICB0aGlzLmhhc0luc2VydGVkUnVsZXMgPSBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgaW5zZXJ0U3R5bGUodGhpcy5lbGVtZW50LCB0aGlzLnNoZWV0Lm9wdGlvbnMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZSBzdHlsZSBlbGVtZW50IGZyb20gcmVuZGVyIHRyZWUuXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2RldGFjaCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRldGFjaCgpIHtcbiAgICAgIHRoaXMuZWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMuZWxlbWVudCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW5qZWN0IENTUyBzdHJpbmcgaW50byBlbGVtZW50LlxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdkZXBsb3knLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkZXBsb3koKSB7XG4gICAgICBpZiAoIXRoaXMuc2hlZXQpIHJldHVybjtcbiAgICAgIHRoaXMuZWxlbWVudC50ZXh0Q29udGVudCA9ICdcXG4nICsgdGhpcy5zaGVldC50b1N0cmluZygpICsgJ1xcbic7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW5zZXJ0IGEgcnVsZSBpbnRvIGVsZW1lbnQuXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2luc2VydFJ1bGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBpbnNlcnRSdWxlKHJ1bGUsIGluZGV4KSB7XG4gICAgICB2YXIgc2hlZXQgPSB0aGlzLmVsZW1lbnQuc2hlZXQ7XG4gICAgICB2YXIgY3NzUnVsZXMgPSBzaGVldC5jc3NSdWxlcztcblxuICAgICAgdmFyIHN0ciA9IHJ1bGUudG9TdHJpbmcoKTtcbiAgICAgIGlmICghaW5kZXgpIGluZGV4ID0gY3NzUnVsZXMubGVuZ3RoO1xuXG4gICAgICBpZiAoIXN0cikgcmV0dXJuIGZhbHNlO1xuXG4gICAgICB0cnkge1xuICAgICAgICBzaGVldC5pbnNlcnRSdWxlKHN0ciwgaW5kZXgpO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICgwLCBfd2FybmluZzJbJ2RlZmF1bHQnXSkoZmFsc2UsICdbSlNTXSBDYW4gbm90IGluc2VydCBhbiB1bnN1cHBvcnRlZCBydWxlIFxcblxcciVzJywgcnVsZSk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHRoaXMuaGFzSW5zZXJ0ZWRSdWxlcyA9IHRydWU7XG5cbiAgICAgIHJldHVybiBjc3NSdWxlc1tpbmRleF07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGVsZXRlIGEgcnVsZS5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnZGVsZXRlUnVsZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRlbGV0ZVJ1bGUoY3NzUnVsZSkge1xuICAgICAgdmFyIHNoZWV0ID0gdGhpcy5lbGVtZW50LnNoZWV0O1xuXG4gICAgICB2YXIgaW5kZXggPSB0aGlzLmluZGV4T2YoY3NzUnVsZSk7XG4gICAgICBpZiAoaW5kZXggPT09IC0xKSByZXR1cm4gZmFsc2U7XG4gICAgICBzaGVldC5kZWxldGVSdWxlKGluZGV4KTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCBpbmRleCBvZiBhIENTUyBSdWxlLlxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdpbmRleE9mJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gaW5kZXhPZihjc3NSdWxlKSB7XG4gICAgICB2YXIgY3NzUnVsZXMgPSB0aGlzLmVsZW1lbnQuc2hlZXQuY3NzUnVsZXM7XG5cbiAgICAgIGZvciAodmFyIF9pbmRleCA9IDA7IF9pbmRleCA8IGNzc1J1bGVzLmxlbmd0aDsgX2luZGV4KyspIHtcbiAgICAgICAgaWYgKGNzc1J1bGUgPT09IGNzc1J1bGVzW19pbmRleF0pIHJldHVybiBfaW5kZXg7XG4gICAgICB9XG4gICAgICByZXR1cm4gLTE7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2VuZXJhdGUgYSBuZXcgQ1NTIHJ1bGUgYW5kIHJlcGxhY2UgdGhlIGV4aXN0aW5nIG9uZS5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAncmVwbGFjZVJ1bGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZXBsYWNlUnVsZShjc3NSdWxlLCBydWxlKSB7XG4gICAgICB2YXIgaW5kZXggPSB0aGlzLmluZGV4T2YoY3NzUnVsZSk7XG4gICAgICB2YXIgbmV3Q3NzUnVsZSA9IHRoaXMuaW5zZXJ0UnVsZShydWxlLCBpbmRleCk7XG4gICAgICB0aGlzLmVsZW1lbnQuc2hlZXQuZGVsZXRlUnVsZShpbmRleCk7XG4gICAgICByZXR1cm4gbmV3Q3NzUnVsZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgYWxsIHJ1bGVzIGVsZW1lbnRzLlxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdnZXRSdWxlcycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldFJ1bGVzKCkge1xuICAgICAgcmV0dXJuIHRoaXMuZWxlbWVudC5zaGVldC5jc3NSdWxlcztcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gRG9tUmVuZGVyZXI7XG59KCk7XG5cbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IERvbVJlbmRlcmVyOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9SdWxlTGlzdCA9IHJlcXVpcmUoJy4uL1J1bGVMaXN0Jyk7XG5cbnZhciBfUnVsZUxpc3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfUnVsZUxpc3QpO1xuXG52YXIgX1N0eWxlUnVsZSA9IHJlcXVpcmUoJy4uL3J1bGVzL1N0eWxlUnVsZScpO1xuXG52YXIgX1N0eWxlUnVsZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9TdHlsZVJ1bGUpO1xuXG52YXIgX2NyZWF0ZVJ1bGUgPSByZXF1aXJlKCcuLi91dGlscy9jcmVhdGVSdWxlJyk7XG5cbnZhciBfY3JlYXRlUnVsZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVSdWxlKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG4vLyBBIHN5bWJvbCByZXBsYWNlbWVudC5cbnZhciBub3cgPSBEYXRlLm5vdygpO1xuXG52YXIgZm5WYWx1ZXNOcyA9ICdmblZhbHVlcycgKyBub3c7XG52YXIgZm5TdHlsZU5zID0gJ2ZuU3R5bGUnICsgKytub3c7XG5cbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IHtcbiAgb25DcmVhdGVSdWxlOiBmdW5jdGlvbiBvbkNyZWF0ZVJ1bGUobmFtZSwgZGVjbCwgb3B0aW9ucykge1xuICAgIGlmICh0eXBlb2YgZGVjbCAhPT0gJ2Z1bmN0aW9uJykgcmV0dXJuIG51bGw7XG4gICAgdmFyIHJ1bGUgPSAoMCwgX2NyZWF0ZVJ1bGUyWydkZWZhdWx0J10pKG5hbWUsIHt9LCBvcHRpb25zKTtcbiAgICBydWxlW2ZuU3R5bGVOc10gPSBkZWNsO1xuICAgIHJldHVybiBydWxlO1xuICB9LFxuICBvblByb2Nlc3NTdHlsZTogZnVuY3Rpb24gb25Qcm9jZXNzU3R5bGUoc3R5bGUsIHJ1bGUpIHtcbiAgICB2YXIgZm4gPSB7fTtcbiAgICBmb3IgKHZhciBwcm9wIGluIHN0eWxlKSB7XG4gICAgICB2YXIgdmFsdWUgPSBzdHlsZVtwcm9wXTtcbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdmdW5jdGlvbicpIGNvbnRpbnVlO1xuICAgICAgZGVsZXRlIHN0eWxlW3Byb3BdO1xuICAgICAgZm5bcHJvcF0gPSB2YWx1ZTtcbiAgICB9XG4gICAgcnVsZSA9IHJ1bGU7XG4gICAgcnVsZVtmblZhbHVlc05zXSA9IGZuO1xuICAgIHJldHVybiBzdHlsZTtcbiAgfSxcbiAgb25VcGRhdGU6IGZ1bmN0aW9uIG9uVXBkYXRlKGRhdGEsIHJ1bGUpIHtcbiAgICAvLyBJdCBpcyBhIHJ1bGVzIGNvbnRhaW5lciBsaWtlIGZvciBlLmcuIENvbmRpdGlvbmFsUnVsZS5cbiAgICBpZiAocnVsZS5ydWxlcyBpbnN0YW5jZW9mIF9SdWxlTGlzdDJbJ2RlZmF1bHQnXSkge1xuICAgICAgcnVsZS5ydWxlcy51cGRhdGUoZGF0YSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICghKHJ1bGUgaW5zdGFuY2VvZiBfU3R5bGVSdWxlMlsnZGVmYXVsdCddKSkgcmV0dXJuO1xuXG4gICAgcnVsZSA9IHJ1bGU7XG5cbiAgICAvLyBJZiB3ZSBoYXZlIGEgZm4gdmFsdWVzIG1hcCwgaXQgaXMgYSBydWxlIHdpdGggZnVuY3Rpb24gdmFsdWVzLlxuICAgIGlmIChydWxlW2ZuVmFsdWVzTnNdKSB7XG4gICAgICBmb3IgKHZhciBwcm9wIGluIHJ1bGVbZm5WYWx1ZXNOc10pIHtcbiAgICAgICAgcnVsZS5wcm9wKHByb3AsIHJ1bGVbZm5WYWx1ZXNOc11bcHJvcF0oZGF0YSkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJ1bGUgPSBydWxlO1xuXG4gICAgdmFyIGZuU3R5bGUgPSBydWxlW2ZuU3R5bGVOc107XG5cbiAgICAvLyBJZiB3ZSBoYXZlIGEgc3R5bGUgZnVuY3Rpb24sIHRoZSBlbnRpcmUgcnVsZSBpcyBkeW5hbWljIGFuZCBzdHlsZSBvYmplY3RcbiAgICAvLyB3aWxsIGJlIHJldHVybmVkIGZyb20gdGhhdCBmdW5jdGlvbi5cbiAgICBpZiAoZm5TdHlsZSkge1xuICAgICAgdmFyIHN0eWxlID0gZm5TdHlsZShkYXRhKTtcbiAgICAgIGZvciAodmFyIF9wcm9wIGluIHN0eWxlKSB7XG4gICAgICAgIHJ1bGUucHJvcChfcHJvcCwgc3R5bGVbX3Byb3BdKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn07IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX1N0eWxlUnVsZSA9IHJlcXVpcmUoJy4uL3J1bGVzL1N0eWxlUnVsZScpO1xuXG52YXIgX1N0eWxlUnVsZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9TdHlsZVJ1bGUpO1xuXG52YXIgX2NyZWF0ZVJ1bGUgPSByZXF1aXJlKCcuLi91dGlscy9jcmVhdGVSdWxlJyk7XG5cbnZhciBfY3JlYXRlUnVsZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVSdWxlKTtcblxudmFyIF9pc09ic2VydmFibGUgPSByZXF1aXJlKCcuLi91dGlscy9pc09ic2VydmFibGUnKTtcblxudmFyIF9pc09ic2VydmFibGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaXNPYnNlcnZhYmxlKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG5leHBvcnRzWydkZWZhdWx0J10gPSB7XG4gIG9uQ3JlYXRlUnVsZTogZnVuY3Rpb24gb25DcmVhdGVSdWxlKG5hbWUsIGRlY2wsIG9wdGlvbnMpIHtcbiAgICBpZiAoISgwLCBfaXNPYnNlcnZhYmxlMlsnZGVmYXVsdCddKShkZWNsKSkgcmV0dXJuIG51bGw7XG5cbiAgICAvLyBDYXN0IGBkZWNsYCB0byBgT2JzZXJ2YWJsZWAsIHNpbmNlIGl0IHBhc3NlZCB0aGUgdHlwZSBndWFyZC5cbiAgICB2YXIgc3R5bGUkID0gZGVjbDtcblxuICAgIHZhciBydWxlID0gKDAsIF9jcmVhdGVSdWxlMlsnZGVmYXVsdCddKShuYW1lLCB7fSwgb3B0aW9ucyk7XG5cbiAgICAvLyBUT0RPXG4gICAgLy8gQ2FsbCBgc3RyZWFtLnN1YnNjcmliZSgpYCByZXR1cm5zIGEgc3Vic2NyaXB0aW9uLCB3aGljaCBzaG91bGQgYmUgZXhwbGljaXRseVxuICAgIC8vIHVuc3Vic2NyaWJlZCBmcm9tIHdoZW4gd2Uga25vdyB0aGlzIHNoZWV0IGlzIG5vIGxvbmdlciBuZWVkZWQuXG4gICAgc3R5bGUkLnN1YnNjcmliZShmdW5jdGlvbiAoc3R5bGUpIHtcbiAgICAgIGZvciAodmFyIHByb3AgaW4gc3R5bGUpIHtcbiAgICAgICAgcnVsZS5wcm9wKHByb3AsIHN0eWxlW3Byb3BdKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBydWxlO1xuICB9LFxuICBvblByb2Nlc3NSdWxlOiBmdW5jdGlvbiBvblByb2Nlc3NSdWxlKHJ1bGUpIHtcbiAgICBpZiAoIShydWxlIGluc3RhbmNlb2YgX1N0eWxlUnVsZTJbJ2RlZmF1bHQnXSkpIHJldHVybjtcbiAgICB2YXIgc3R5bGVSdWxlID0gcnVsZTtcbiAgICB2YXIgc3R5bGUgPSBzdHlsZVJ1bGUuc3R5bGU7XG5cbiAgICB2YXIgX2xvb3AgPSBmdW5jdGlvbiBfbG9vcChwcm9wKSB7XG4gICAgICB2YXIgdmFsdWUgPSBzdHlsZVtwcm9wXTtcbiAgICAgIGlmICghKDAsIF9pc09ic2VydmFibGUyWydkZWZhdWx0J10pKHZhbHVlKSkgcmV0dXJuICdjb250aW51ZSc7XG4gICAgICBkZWxldGUgc3R5bGVbcHJvcF07XG4gICAgICB2YWx1ZS5zdWJzY3JpYmUoe1xuICAgICAgICBuZXh0OiBmdW5jdGlvbiBuZXh0KG5leHRWYWx1ZSkge1xuICAgICAgICAgIHN0eWxlUnVsZS5wcm9wKHByb3AsIG5leHRWYWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBmb3IgKHZhciBwcm9wIGluIHN0eWxlKSB7XG4gICAgICB2YXIgX3JldCA9IF9sb29wKHByb3ApO1xuXG4gICAgICBpZiAoX3JldCA9PT0gJ2NvbnRpbnVlJykgY29udGludWU7XG4gICAgfVxuICB9XG59OyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF90b0NzcyA9IHJlcXVpcmUoJy4uL3V0aWxzL3RvQ3NzJyk7XG5cbnZhciBfdG9Dc3MyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdG9Dc3MpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbnZhciBWaWV3cG9ydFJ1bGUgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFZpZXdwb3J0UnVsZShrZXksIHN0eWxlLCBvcHRpb25zKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFZpZXdwb3J0UnVsZSk7XG5cbiAgICB0aGlzLnR5cGUgPSAndmlld3BvcnQnO1xuICAgIHRoaXMuaXNQcm9jZXNzZWQgPSBmYWxzZTtcblxuICAgIHRoaXMua2V5ID0ga2V5O1xuICAgIHRoaXMuc3R5bGUgPSBzdHlsZTtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICB9XG5cbiAgLyoqXG4gICAqIEdlbmVyYXRlcyBhIENTUyBzdHJpbmcuXG4gICAqL1xuXG5cbiAgX2NyZWF0ZUNsYXNzKFZpZXdwb3J0UnVsZSwgW3tcbiAgICBrZXk6ICd0b1N0cmluZycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHRvU3RyaW5nKG9wdGlvbnMpIHtcbiAgICAgIHJldHVybiAoMCwgX3RvQ3NzMlsnZGVmYXVsdCddKSh0aGlzLmtleSwgdGhpcy5zdHlsZSwgb3B0aW9ucyk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFZpZXdwb3J0UnVsZTtcbn0oKTtcblxuZXhwb3J0c1snZGVmYXVsdCddID0gVmlld3BvcnRSdWxlOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF90b0NzcyA9IHJlcXVpcmUoJy4uL3V0aWxzL3RvQ3NzJyk7XG5cbnZhciBfdG9Dc3MyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdG9Dc3MpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbnZhciBGb250RmFjZVJ1bGUgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEZvbnRGYWNlUnVsZShrZXksIHN0eWxlLCBvcHRpb25zKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEZvbnRGYWNlUnVsZSk7XG5cbiAgICB0aGlzLnR5cGUgPSAnZm9udC1mYWNlJztcbiAgICB0aGlzLmlzUHJvY2Vzc2VkID0gZmFsc2U7XG5cbiAgICB0aGlzLmtleSA9IGtleTtcbiAgICB0aGlzLnN0eWxlID0gc3R5bGU7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgfVxuXG4gIC8qKlxuICAgKiBHZW5lcmF0ZXMgYSBDU1Mgc3RyaW5nLlxuICAgKi9cblxuXG4gIF9jcmVhdGVDbGFzcyhGb250RmFjZVJ1bGUsIFt7XG4gICAga2V5OiAndG9TdHJpbmcnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB0b1N0cmluZyhvcHRpb25zKSB7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheSh0aGlzLnN0eWxlKSkge1xuICAgICAgICB2YXIgc3RyID0gJyc7XG4gICAgICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCB0aGlzLnN0eWxlLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICAgIHN0ciArPSAoMCwgX3RvQ3NzMlsnZGVmYXVsdCddKSh0aGlzLmtleSwgdGhpcy5zdHlsZVtpbmRleF0pO1xuICAgICAgICAgIGlmICh0aGlzLnN0eWxlW2luZGV4ICsgMV0pIHN0ciArPSAnXFxuJztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3RyO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gKDAsIF90b0NzczJbJ2RlZmF1bHQnXSkodGhpcy5rZXksIHRoaXMuc3R5bGUsIG9wdGlvbnMpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBGb250RmFjZVJ1bGU7XG59KCk7XG5cbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IEZvbnRGYWNlUnVsZTsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfUnVsZUxpc3QgPSByZXF1aXJlKCcuLi9SdWxlTGlzdCcpO1xuXG52YXIgX1J1bGVMaXN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1J1bGVMaXN0KTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG4vKipcbiAqIENvbmRpdGlvbmFsIHJ1bGUgZm9yIEBtZWRpYSwgQHN1cHBvcnRzXG4gKi9cbnZhciBDb25kaXRpb25hbFJ1bGUgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIENvbmRpdGlvbmFsUnVsZShrZXksIHN0eWxlcywgb3B0aW9ucykge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDb25kaXRpb25hbFJ1bGUpO1xuXG4gICAgdGhpcy50eXBlID0gJ2NvbmRpdGlvbmFsJztcbiAgICB0aGlzLmlzUHJvY2Vzc2VkID0gZmFsc2U7XG5cbiAgICB0aGlzLmtleSA9IGtleTtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIHRoaXMucnVsZXMgPSBuZXcgX1J1bGVMaXN0MlsnZGVmYXVsdCddKF9leHRlbmRzKHt9LCBvcHRpb25zLCB7IHBhcmVudDogdGhpcyB9KSk7XG5cbiAgICBmb3IgKHZhciBuYW1lIGluIHN0eWxlcykge1xuICAgICAgdGhpcy5ydWxlcy5hZGQobmFtZSwgc3R5bGVzW25hbWVdKTtcbiAgICB9XG5cbiAgICB0aGlzLnJ1bGVzLnByb2Nlc3MoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgYSBydWxlLlxuICAgKi9cblxuXG4gIF9jcmVhdGVDbGFzcyhDb25kaXRpb25hbFJ1bGUsIFt7XG4gICAga2V5OiAnZ2V0UnVsZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldFJ1bGUobmFtZSkge1xuICAgICAgcmV0dXJuIHRoaXMucnVsZXMuZ2V0KG5hbWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCBpbmRleCBvZiBhIHJ1bGUuXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2luZGV4T2YnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBpbmRleE9mKHJ1bGUpIHtcbiAgICAgIHJldHVybiB0aGlzLnJ1bGVzLmluZGV4T2YocnVsZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGFuZCByZWdpc3RlciBydWxlLCBydW4gcGx1Z2lucy5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnYWRkUnVsZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGFkZFJ1bGUobmFtZSwgc3R5bGUsIG9wdGlvbnMpIHtcbiAgICAgIHZhciBydWxlID0gdGhpcy5ydWxlcy5hZGQobmFtZSwgc3R5bGUsIG9wdGlvbnMpO1xuICAgICAgdGhpcy5vcHRpb25zLmpzcy5wbHVnaW5zLm9uUHJvY2Vzc1J1bGUocnVsZSk7XG4gICAgICByZXR1cm4gcnVsZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZW5lcmF0ZXMgYSBDU1Mgc3RyaW5nLlxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICd0b1N0cmluZycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHsgaW5kZW50OiAxIH07XG5cbiAgICAgIHZhciBpbm5lciA9IHRoaXMucnVsZXMudG9TdHJpbmcob3B0aW9ucyk7XG4gICAgICByZXR1cm4gaW5uZXIgPyB0aGlzLmtleSArICcge1xcbicgKyBpbm5lciArICdcXG59JyA6ICcnO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBDb25kaXRpb25hbFJ1bGU7XG59KCk7XG5cbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IENvbmRpdGlvbmFsUnVsZTsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfUnVsZUxpc3QgPSByZXF1aXJlKCcuLi9SdWxlTGlzdCcpO1xuXG52YXIgX1J1bGVMaXN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1J1bGVMaXN0KTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG4vKipcbiAqIFJ1bGUgZm9yIEBrZXlmcmFtZXNcbiAqL1xudmFyIEtleWZyYW1lc1J1bGUgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEtleWZyYW1lc1J1bGUoa2V5LCBmcmFtZXMsIG9wdGlvbnMpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgS2V5ZnJhbWVzUnVsZSk7XG5cbiAgICB0aGlzLnR5cGUgPSAna2V5ZnJhbWVzJztcbiAgICB0aGlzLmlzUHJvY2Vzc2VkID0gZmFsc2U7XG5cbiAgICB0aGlzLmtleSA9IGtleTtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIHRoaXMucnVsZXMgPSBuZXcgX1J1bGVMaXN0MlsnZGVmYXVsdCddKF9leHRlbmRzKHt9LCBvcHRpb25zLCB7IHBhcmVudDogdGhpcyB9KSk7XG5cbiAgICBmb3IgKHZhciBuYW1lIGluIGZyYW1lcykge1xuICAgICAgdGhpcy5ydWxlcy5hZGQobmFtZSwgZnJhbWVzW25hbWVdLCBfZXh0ZW5kcyh7fSwgdGhpcy5vcHRpb25zLCB7XG4gICAgICAgIHBhcmVudDogdGhpcyxcbiAgICAgICAgc2VsZWN0b3I6IG5hbWVcbiAgICAgIH0pKTtcbiAgICB9XG5cbiAgICB0aGlzLnJ1bGVzLnByb2Nlc3MoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZW5lcmF0ZXMgYSBDU1Mgc3RyaW5nLlxuICAgKi9cblxuXG4gIF9jcmVhdGVDbGFzcyhLZXlmcmFtZXNSdWxlLCBbe1xuICAgIGtleTogJ3RvU3RyaW5nJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogeyBpbmRlbnQ6IDEgfTtcblxuICAgICAgdmFyIGlubmVyID0gdGhpcy5ydWxlcy50b1N0cmluZyhvcHRpb25zKTtcbiAgICAgIGlmIChpbm5lcikgaW5uZXIgKz0gJ1xcbic7XG4gICAgICByZXR1cm4gdGhpcy5rZXkgKyAnIHtcXG4nICsgaW5uZXIgKyAnfSc7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIEtleWZyYW1lc1J1bGU7XG59KCk7XG5cbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IEtleWZyYW1lc1J1bGU7IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG52YXIgU2ltcGxlUnVsZSA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gU2ltcGxlUnVsZShrZXksIHZhbHVlLCBvcHRpb25zKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFNpbXBsZVJ1bGUpO1xuXG4gICAgdGhpcy50eXBlID0gJ3NpbXBsZSc7XG4gICAgdGhpcy5pc1Byb2Nlc3NlZCA9IGZhbHNlO1xuXG4gICAgdGhpcy5rZXkgPSBrZXk7XG4gICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gIH1cblxuICAvKipcbiAgICogR2VuZXJhdGVzIGEgQ1NTIHN0cmluZy5cbiAgICovXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuXG5cbiAgX2NyZWF0ZUNsYXNzKFNpbXBsZVJ1bGUsIFt7XG4gICAga2V5OiAndG9TdHJpbmcnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB0b1N0cmluZyhvcHRpb25zKSB7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheSh0aGlzLnZhbHVlKSkge1xuICAgICAgICB2YXIgc3RyID0gJyc7XG4gICAgICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCB0aGlzLnZhbHVlLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICAgIHN0ciArPSB0aGlzLmtleSArICcgJyArIHRoaXMudmFsdWVbaW5kZXhdICsgJzsnO1xuICAgICAgICAgIGlmICh0aGlzLnZhbHVlW2luZGV4ICsgMV0pIHN0ciArPSAnXFxuJztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3RyO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5rZXkgKyAnICcgKyB0aGlzLnZhbHVlICsgJzsnO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBTaW1wbGVSdWxlO1xufSgpO1xuXG5leHBvcnRzWydkZWZhdWx0J10gPSBTaW1wbGVSdWxlOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9TaW1wbGVSdWxlID0gcmVxdWlyZSgnLi4vcnVsZXMvU2ltcGxlUnVsZScpO1xuXG52YXIgX1NpbXBsZVJ1bGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfU2ltcGxlUnVsZSk7XG5cbnZhciBfS2V5ZnJhbWVzUnVsZSA9IHJlcXVpcmUoJy4uL3J1bGVzL0tleWZyYW1lc1J1bGUnKTtcblxudmFyIF9LZXlmcmFtZXNSdWxlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0tleWZyYW1lc1J1bGUpO1xuXG52YXIgX0NvbmRpdGlvbmFsUnVsZSA9IHJlcXVpcmUoJy4uL3J1bGVzL0NvbmRpdGlvbmFsUnVsZScpO1xuXG52YXIgX0NvbmRpdGlvbmFsUnVsZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9Db25kaXRpb25hbFJ1bGUpO1xuXG52YXIgX0ZvbnRGYWNlUnVsZSA9IHJlcXVpcmUoJy4uL3J1bGVzL0ZvbnRGYWNlUnVsZScpO1xuXG52YXIgX0ZvbnRGYWNlUnVsZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9Gb250RmFjZVJ1bGUpO1xuXG52YXIgX1ZpZXdwb3J0UnVsZSA9IHJlcXVpcmUoJy4uL3J1bGVzL1ZpZXdwb3J0UnVsZScpO1xuXG52YXIgX1ZpZXdwb3J0UnVsZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9WaWV3cG9ydFJ1bGUpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9XG5cbnZhciBjbGFzc2VzID0ge1xuICAnQGNoYXJzZXQnOiBfU2ltcGxlUnVsZTJbJ2RlZmF1bHQnXSxcbiAgJ0BpbXBvcnQnOiBfU2ltcGxlUnVsZTJbJ2RlZmF1bHQnXSxcbiAgJ0BuYW1lc3BhY2UnOiBfU2ltcGxlUnVsZTJbJ2RlZmF1bHQnXSxcbiAgJ0BrZXlmcmFtZXMnOiBfS2V5ZnJhbWVzUnVsZTJbJ2RlZmF1bHQnXSxcbiAgJ0BtZWRpYSc6IF9Db25kaXRpb25hbFJ1bGUyWydkZWZhdWx0J10sXG4gICdAc3VwcG9ydHMnOiBfQ29uZGl0aW9uYWxSdWxlMlsnZGVmYXVsdCddLFxuICAnQGZvbnQtZmFjZSc6IF9Gb250RmFjZVJ1bGUyWydkZWZhdWx0J10sXG4gICdAdmlld3BvcnQnOiBfVmlld3BvcnRSdWxlMlsnZGVmYXVsdCddLFxuICAnQC1tcy12aWV3cG9ydCc6IF9WaWV3cG9ydFJ1bGUyWydkZWZhdWx0J11cblxuICAvKipcbiAgICogR2VuZXJhdGUgcGx1Z2lucyB3aGljaCB3aWxsIHJlZ2lzdGVyIGFsbCBydWxlcy5cbiAgICovXG59O1xudmFyIHBsdWdpbnMgPSBPYmplY3Qua2V5cyhjbGFzc2VzKS5tYXAoZnVuY3Rpb24gKGtleSkge1xuICAvLyBodHRwczovL2pzcGVyZi5jb20vaW5kZXhvZi12cy1zdWJzdHItdnMtcmVnZXgtYXQtdGhlLWJlZ2lubmluZy0zXG4gIHZhciByZSA9IG5ldyBSZWdFeHAoJ14nICsga2V5KTtcbiAgdmFyIFJ1bGVDbGFzcyA9IGNsYXNzZXNba2V5XTtcbiAgdmFyIG9uQ3JlYXRlUnVsZSA9IGZ1bmN0aW9uIG9uQ3JlYXRlUnVsZShuYW1lLCBkZWNsLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIHJlLnRlc3QobmFtZSkgPyBuZXcgUnVsZUNsYXNzKG5hbWUsIGRlY2wsIG9wdGlvbnMpIDogbnVsbDtcbiAgfTtcbiAgcmV0dXJuIHsgb25DcmVhdGVSdWxlOiBvbkNyZWF0ZVJ1bGUgfTtcbn0pO1xuXG5leHBvcnRzWydkZWZhdWx0J10gPSBwbHVnaW5zOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF93YXJuaW5nID0gcmVxdWlyZSgnd2FybmluZycpO1xuXG52YXIgX3dhcm5pbmcyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfd2FybmluZyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxudmFyIFBsdWdpbnNSZWdpc3RyeSA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gUGx1Z2luc1JlZ2lzdHJ5KCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBQbHVnaW5zUmVnaXN0cnkpO1xuXG4gICAgdGhpcy5ob29rcyA9IHtcbiAgICAgIG9uQ3JlYXRlUnVsZTogW10sXG4gICAgICBvblByb2Nlc3NSdWxlOiBbXSxcbiAgICAgIG9uUHJvY2Vzc1N0eWxlOiBbXSxcbiAgICAgIG9uUHJvY2Vzc1NoZWV0OiBbXSxcbiAgICAgIG9uQ2hhbmdlVmFsdWU6IFtdLFxuICAgICAgb25VcGRhdGU6IFtdXG5cbiAgICAgIC8qKlxuICAgICAgICogQ2FsbCBgb25DcmVhdGVSdWxlYCBob29rcyBhbmQgcmV0dXJuIGFuIG9iamVjdCBpZiByZXR1cm5lZCBieSBhIGhvb2suXG4gICAgICAgKi9cbiAgICB9O1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFBsdWdpbnNSZWdpc3RyeSwgW3tcbiAgICBrZXk6ICdvbkNyZWF0ZVJ1bGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBvbkNyZWF0ZVJ1bGUobmFtZSwgZGVjbCwgb3B0aW9ucykge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmhvb2tzLm9uQ3JlYXRlUnVsZS5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgcnVsZSA9IHRoaXMuaG9va3Mub25DcmVhdGVSdWxlW2ldKG5hbWUsIGRlY2wsIG9wdGlvbnMpO1xuICAgICAgICBpZiAocnVsZSkgcmV0dXJuIHJ1bGU7XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDYWxsIGBvblByb2Nlc3NSdWxlYCBob29rcy5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnb25Qcm9jZXNzUnVsZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG9uUHJvY2Vzc1J1bGUocnVsZSkge1xuICAgICAgaWYgKHJ1bGUuaXNQcm9jZXNzZWQpIHJldHVybjtcbiAgICAgIHZhciBzaGVldCA9IHJ1bGUub3B0aW9ucy5zaGVldDtcblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmhvb2tzLm9uUHJvY2Vzc1J1bGUubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdGhpcy5ob29rcy5vblByb2Nlc3NSdWxlW2ldKHJ1bGUsIHNoZWV0KTtcbiAgICAgIH1cblxuICAgICAgLy8gJEZsb3dGaXhNZVxuICAgICAgaWYgKHJ1bGUuc3R5bGUpIHRoaXMub25Qcm9jZXNzU3R5bGUocnVsZS5zdHlsZSwgcnVsZSwgc2hlZXQpO1xuXG4gICAgICBydWxlLmlzUHJvY2Vzc2VkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDYWxsIGBvblByb2Nlc3NTdHlsZWAgaG9va3MuXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ29uUHJvY2Vzc1N0eWxlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gb25Qcm9jZXNzU3R5bGUoc3R5bGUsIHJ1bGUsIHNoZWV0KSB7XG4gICAgICB2YXIgbmV4dFN0eWxlID0gc3R5bGU7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5ob29rcy5vblByb2Nlc3NTdHlsZS5sZW5ndGg7IGkrKykge1xuICAgICAgICBuZXh0U3R5bGUgPSB0aGlzLmhvb2tzLm9uUHJvY2Vzc1N0eWxlW2ldKG5leHRTdHlsZSwgcnVsZSwgc2hlZXQpO1xuICAgICAgICAvLyAkRmxvd0ZpeE1lXG4gICAgICAgIHJ1bGUuc3R5bGUgPSBuZXh0U3R5bGU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2FsbCBgb25Qcm9jZXNzU2hlZXRgIGhvb2tzLlxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdvblByb2Nlc3NTaGVldCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG9uUHJvY2Vzc1NoZWV0KHNoZWV0KSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuaG9va3Mub25Qcm9jZXNzU2hlZXQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdGhpcy5ob29rcy5vblByb2Nlc3NTaGVldFtpXShzaGVldCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2FsbCBgb25VcGRhdGVgIGhvb2tzLlxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdvblVwZGF0ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG9uVXBkYXRlKGRhdGEsIHJ1bGUsIHNoZWV0KSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuaG9va3Mub25VcGRhdGUubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdGhpcy5ob29rcy5vblVwZGF0ZVtpXShkYXRhLCBydWxlLCBzaGVldCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2FsbCBgb25DaGFuZ2VWYWx1ZWAgaG9va3MuXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ29uQ2hhbmdlVmFsdWUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBvbkNoYW5nZVZhbHVlKHZhbHVlLCBwcm9wLCBydWxlKSB7XG4gICAgICB2YXIgcHJvY2Vzc2VkVmFsdWUgPSB2YWx1ZTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5ob29rcy5vbkNoYW5nZVZhbHVlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHByb2Nlc3NlZFZhbHVlID0gdGhpcy5ob29rcy5vbkNoYW5nZVZhbHVlW2ldKHByb2Nlc3NlZFZhbHVlLCBwcm9wLCBydWxlKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBwcm9jZXNzZWRWYWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZWdpc3RlciBhIHBsdWdpbi5cbiAgICAgKiBJZiBmdW5jdGlvbiBpcyBwYXNzZWQsIGl0IGlzIGEgc2hvcnRjdXQgZm9yIGB7b25Qcm9jZXNzUnVsZX1gLlxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICd1c2UnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB1c2UocGx1Z2luKSB7XG4gICAgICBmb3IgKHZhciBuYW1lIGluIHBsdWdpbikge1xuICAgICAgICBpZiAodGhpcy5ob29rc1tuYW1lXSkgdGhpcy5ob29rc1tuYW1lXS5wdXNoKHBsdWdpbltuYW1lXSk7ZWxzZSAoMCwgX3dhcm5pbmcyWydkZWZhdWx0J10pKGZhbHNlLCAnW0pTU10gVW5rbm93biBob29rIFwiJXNcIi4nLCBuYW1lKTtcbiAgICAgIH1cbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gUGx1Z2luc1JlZ2lzdHJ5O1xufSgpO1xuXG5leHBvcnRzWydkZWZhdWx0J10gPSBQbHVnaW5zUmVnaXN0cnk7IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfaXNJbkJyb3dzZXIgPSByZXF1aXJlKCdpcy1pbi1icm93c2VyJyk7XG5cbnZhciBfaXNJbkJyb3dzZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaXNJbkJyb3dzZXIpO1xuXG52YXIgX1N0eWxlU2hlZXQgPSByZXF1aXJlKCcuL1N0eWxlU2hlZXQnKTtcblxudmFyIF9TdHlsZVNoZWV0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1N0eWxlU2hlZXQpO1xuXG52YXIgX1BsdWdpbnNSZWdpc3RyeSA9IHJlcXVpcmUoJy4vUGx1Z2luc1JlZ2lzdHJ5Jyk7XG5cbnZhciBfUGx1Z2luc1JlZ2lzdHJ5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1BsdWdpbnNSZWdpc3RyeSk7XG5cbnZhciBfcnVsZXMgPSByZXF1aXJlKCcuL3BsdWdpbnMvcnVsZXMnKTtcblxudmFyIF9ydWxlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9ydWxlcyk7XG5cbnZhciBfb2JzZXJ2YWJsZXMgPSByZXF1aXJlKCcuL3BsdWdpbnMvb2JzZXJ2YWJsZXMnKTtcblxudmFyIF9vYnNlcnZhYmxlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9vYnNlcnZhYmxlcyk7XG5cbnZhciBfZnVuY3Rpb25zID0gcmVxdWlyZSgnLi9wbHVnaW5zL2Z1bmN0aW9ucycpO1xuXG52YXIgX2Z1bmN0aW9uczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9mdW5jdGlvbnMpO1xuXG52YXIgX3NoZWV0cyA9IHJlcXVpcmUoJy4vc2hlZXRzJyk7XG5cbnZhciBfc2hlZXRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3NoZWV0cyk7XG5cbnZhciBfU3R5bGVSdWxlID0gcmVxdWlyZSgnLi9ydWxlcy9TdHlsZVJ1bGUnKTtcblxudmFyIF9TdHlsZVJ1bGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfU3R5bGVSdWxlKTtcblxudmFyIF9jcmVhdGVHZW5lcmF0ZUNsYXNzTmFtZSA9IHJlcXVpcmUoJy4vdXRpbHMvY3JlYXRlR2VuZXJhdGVDbGFzc05hbWUnKTtcblxudmFyIF9jcmVhdGVHZW5lcmF0ZUNsYXNzTmFtZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVHZW5lcmF0ZUNsYXNzTmFtZSk7XG5cbnZhciBfY3JlYXRlUnVsZTIgPSByZXF1aXJlKCcuL3V0aWxzL2NyZWF0ZVJ1bGUnKTtcblxudmFyIF9jcmVhdGVSdWxlMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZVJ1bGUyKTtcblxudmFyIF9Eb21SZW5kZXJlciA9IHJlcXVpcmUoJy4vcmVuZGVyZXJzL0RvbVJlbmRlcmVyJyk7XG5cbnZhciBfRG9tUmVuZGVyZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfRG9tUmVuZGVyZXIpO1xuXG52YXIgX1ZpcnR1YWxSZW5kZXJlciA9IHJlcXVpcmUoJy4vcmVuZGVyZXJzL1ZpcnR1YWxSZW5kZXJlcicpO1xuXG52YXIgX1ZpcnR1YWxSZW5kZXJlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9WaXJ0dWFsUmVuZGVyZXIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbnZhciBkZWZhdWx0UGx1Z2lucyA9IF9ydWxlczJbJ2RlZmF1bHQnXS5jb25jYXQoW19vYnNlcnZhYmxlczJbJ2RlZmF1bHQnXSwgX2Z1bmN0aW9uczJbJ2RlZmF1bHQnXV0pO1xuXG52YXIgaW5zdGFuY2VDb3VudGVyID0gMDtcblxudmFyIEpzcyA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gSnNzKG9wdGlvbnMpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgSnNzKTtcblxuICAgIHRoaXMuaWQgPSBpbnN0YW5jZUNvdW50ZXIrKztcbiAgICB0aGlzLnZlcnNpb24gPSBcIjkuOC4zXCI7XG4gICAgdGhpcy5wbHVnaW5zID0gbmV3IF9QbHVnaW5zUmVnaXN0cnkyWydkZWZhdWx0J10oKTtcbiAgICB0aGlzLm9wdGlvbnMgPSB7XG4gICAgICBjcmVhdGVHZW5lcmF0ZUNsYXNzTmFtZTogX2NyZWF0ZUdlbmVyYXRlQ2xhc3NOYW1lMlsnZGVmYXVsdCddLFxuICAgICAgUmVuZGVyZXI6IF9pc0luQnJvd3NlcjJbJ2RlZmF1bHQnXSA/IF9Eb21SZW5kZXJlcjJbJ2RlZmF1bHQnXSA6IF9WaXJ0dWFsUmVuZGVyZXIyWydkZWZhdWx0J10sXG4gICAgICBwbHVnaW5zOiBbXVxuICAgIH07XG4gICAgdGhpcy5nZW5lcmF0ZUNsYXNzTmFtZSA9ICgwLCBfY3JlYXRlR2VuZXJhdGVDbGFzc05hbWUyWydkZWZhdWx0J10pKCk7XG5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLXNwcmVhZFxuICAgIHRoaXMudXNlLmFwcGx5KHRoaXMsIGRlZmF1bHRQbHVnaW5zKTtcbiAgICB0aGlzLnNldHVwKG9wdGlvbnMpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKEpzcywgW3tcbiAgICBrZXk6ICdzZXR1cCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldHVwKCkge1xuICAgICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuXG4gICAgICBpZiAob3B0aW9ucy5jcmVhdGVHZW5lcmF0ZUNsYXNzTmFtZSkge1xuICAgICAgICB0aGlzLm9wdGlvbnMuY3JlYXRlR2VuZXJhdGVDbGFzc05hbWUgPSBvcHRpb25zLmNyZWF0ZUdlbmVyYXRlQ2xhc3NOYW1lO1xuICAgICAgICAvLyAkRmxvd0ZpeE1lXG4gICAgICAgIHRoaXMuZ2VuZXJhdGVDbGFzc05hbWUgPSBvcHRpb25zLmNyZWF0ZUdlbmVyYXRlQ2xhc3NOYW1lKCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChvcHRpb25zLmluc2VydGlvblBvaW50ICE9IG51bGwpIHRoaXMub3B0aW9ucy5pbnNlcnRpb25Qb2ludCA9IG9wdGlvbnMuaW5zZXJ0aW9uUG9pbnQ7XG4gICAgICBpZiAob3B0aW9ucy52aXJ0dWFsIHx8IG9wdGlvbnMuUmVuZGVyZXIpIHtcbiAgICAgICAgdGhpcy5vcHRpb25zLlJlbmRlcmVyID0gb3B0aW9ucy5SZW5kZXJlciB8fCAob3B0aW9ucy52aXJ0dWFsID8gX1ZpcnR1YWxSZW5kZXJlcjJbJ2RlZmF1bHQnXSA6IF9Eb21SZW5kZXJlcjJbJ2RlZmF1bHQnXSk7XG4gICAgICB9XG5cbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItc3ByZWFkXG4gICAgICBpZiAob3B0aW9ucy5wbHVnaW5zKSB0aGlzLnVzZS5hcHBseSh0aGlzLCBvcHRpb25zLnBsdWdpbnMpO1xuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBTdHlsZSBTaGVldC5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnY3JlYXRlU3R5bGVTaGVldCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNyZWF0ZVN0eWxlU2hlZXQoc3R5bGVzKSB7XG4gICAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG5cbiAgICAgIHZhciBpbmRleCA9IG9wdGlvbnMuaW5kZXg7XG4gICAgICBpZiAodHlwZW9mIGluZGV4ICE9PSAnbnVtYmVyJykge1xuICAgICAgICBpbmRleCA9IF9zaGVldHMyWydkZWZhdWx0J10uaW5kZXggPT09IDAgPyAwIDogX3NoZWV0czJbJ2RlZmF1bHQnXS5pbmRleCArIDE7XG4gICAgICB9XG4gICAgICB2YXIgc2hlZXQgPSBuZXcgX1N0eWxlU2hlZXQyWydkZWZhdWx0J10oc3R5bGVzLCBfZXh0ZW5kcyh7fSwgb3B0aW9ucywge1xuICAgICAgICBqc3M6IHRoaXMsXG4gICAgICAgIGdlbmVyYXRlQ2xhc3NOYW1lOiBvcHRpb25zLmdlbmVyYXRlQ2xhc3NOYW1lIHx8IHRoaXMuZ2VuZXJhdGVDbGFzc05hbWUsXG4gICAgICAgIGluc2VydGlvblBvaW50OiB0aGlzLm9wdGlvbnMuaW5zZXJ0aW9uUG9pbnQsXG4gICAgICAgIFJlbmRlcmVyOiB0aGlzLm9wdGlvbnMuUmVuZGVyZXIsXG4gICAgICAgIGluZGV4OiBpbmRleFxuICAgICAgfSkpO1xuICAgICAgdGhpcy5wbHVnaW5zLm9uUHJvY2Vzc1NoZWV0KHNoZWV0KTtcblxuICAgICAgcmV0dXJuIHNoZWV0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERldGFjaCB0aGUgU3R5bGUgU2hlZXQgYW5kIHJlbW92ZSBpdCBmcm9tIHRoZSByZWdpc3RyeS5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAncmVtb3ZlU3R5bGVTaGVldCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbW92ZVN0eWxlU2hlZXQoc2hlZXQpIHtcbiAgICAgIHNoZWV0LmRldGFjaCgpO1xuICAgICAgX3NoZWV0czJbJ2RlZmF1bHQnXS5yZW1vdmUoc2hlZXQpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgcnVsZSB3aXRob3V0IGEgU3R5bGUgU2hlZXQuXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2NyZWF0ZVJ1bGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjcmVhdGVSdWxlKG5hbWUpIHtcbiAgICAgIHZhciBzdHlsZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG4gICAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDoge307XG5cbiAgICAgIC8vIEVuYWJsZSBydWxlIHdpdGhvdXQgbmFtZSBmb3IgaW5saW5lIHN0eWxlcy5cbiAgICAgIGlmICgodHlwZW9mIG5hbWUgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKG5hbWUpKSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgb3B0aW9ucyA9IHN0eWxlO1xuICAgICAgICBzdHlsZSA9IG5hbWU7XG4gICAgICAgIG5hbWUgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICAgIC8vIENhc3QgZnJvbSBSdWxlRmFjdG9yeU9wdGlvbnMgdG8gUnVsZU9wdGlvbnNcbiAgICAgIC8vIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzQxMzI4NzI4L2ZvcmNlLWNhc3RpbmctaW4tZmxvd1xuICAgICAgdmFyIHJ1bGVPcHRpb25zID0gb3B0aW9ucztcblxuICAgICAgcnVsZU9wdGlvbnMuanNzID0gdGhpcztcbiAgICAgIHJ1bGVPcHRpb25zLlJlbmRlcmVyID0gdGhpcy5vcHRpb25zLlJlbmRlcmVyO1xuICAgICAgaWYgKCFydWxlT3B0aW9ucy5nZW5lcmF0ZUNsYXNzTmFtZSkgcnVsZU9wdGlvbnMuZ2VuZXJhdGVDbGFzc05hbWUgPSB0aGlzLmdlbmVyYXRlQ2xhc3NOYW1lO1xuICAgICAgaWYgKCFydWxlT3B0aW9ucy5jbGFzc2VzKSBydWxlT3B0aW9ucy5jbGFzc2VzID0ge307XG4gICAgICB2YXIgcnVsZSA9ICgwLCBfY3JlYXRlUnVsZTNbJ2RlZmF1bHQnXSkobmFtZSwgc3R5bGUsIHJ1bGVPcHRpb25zKTtcblxuICAgICAgaWYgKCFydWxlT3B0aW9ucy5zZWxlY3RvciAmJiBydWxlIGluc3RhbmNlb2YgX1N0eWxlUnVsZTJbJ2RlZmF1bHQnXSkge1xuICAgICAgICBydWxlLnNlbGVjdG9yID0gJy4nICsgcnVsZU9wdGlvbnMuZ2VuZXJhdGVDbGFzc05hbWUocnVsZSk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMucGx1Z2lucy5vblByb2Nlc3NSdWxlKHJ1bGUpO1xuXG4gICAgICByZXR1cm4gcnVsZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZWdpc3RlciBwbHVnaW4uIFBhc3NlZCBmdW5jdGlvbiB3aWxsIGJlIGludm9rZWQgd2l0aCBhIHJ1bGUgaW5zdGFuY2UuXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ3VzZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHVzZSgpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBwbHVnaW5zID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgIHBsdWdpbnNbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICB9XG5cbiAgICAgIHBsdWdpbnMuZm9yRWFjaChmdW5jdGlvbiAocGx1Z2luKSB7XG4gICAgICAgIC8vIEF2b2lkcyBhcHBseWluZyBzYW1lIHBsdWdpbiB0d2ljZSwgYXQgbGVhc3QgYmFzZWQgb24gcmVmLlxuICAgICAgICBpZiAoX3RoaXMub3B0aW9ucy5wbHVnaW5zLmluZGV4T2YocGx1Z2luKSA9PT0gLTEpIHtcbiAgICAgICAgICBfdGhpcy5vcHRpb25zLnBsdWdpbnMucHVzaChwbHVnaW4pO1xuICAgICAgICAgIF90aGlzLnBsdWdpbnMudXNlKHBsdWdpbik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gSnNzO1xufSgpO1xuXG5leHBvcnRzWydkZWZhdWx0J10gPSBKc3M7IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xudmFyIG5zID0gJzJmMWFjYzZjM2E2MDZiMDgyZTVlZWY1ZTU0NDE0ZmZiJztcbmlmIChnbG9iYWxbbnNdID09IG51bGwpIGdsb2JhbFtuc10gPSAwO1xuXG4vLyBCdW5kbGUgbWF5IGNvbnRhaW4gbXVsdGlwbGUgSlNTIHZlcnNpb25zIGF0IHRoZSBzYW1lIHRpbWUuIEluIG9yZGVyIHRvIGlkZW50aWZ5XG4vLyB0aGUgY3VycmVudCB2ZXJzaW9uIHdpdGgganVzdCBvbmUgc2hvcnQgbnVtYmVyIGFuZCB1c2UgaXQgZm9yIGNsYXNzZXMgZ2VuZXJhdGlvblxuLy8gd2UgdXNlIGEgY291bnRlci4gQWxzbyBpdCBpcyBtb3JlIGFjY3VyYXRlLCBiZWNhdXNlIHVzZXIgY2FuIG1hbnVhbGx5IHJlZXZhbHVhdGVcbi8vIHRoZSBtb2R1bGUuXG5leHBvcnRzWydkZWZhdWx0J10gPSBnbG9iYWxbbnNdKys7IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xudmFyIENTUyA9IGdsb2JhbC5DU1M7XG5cbnZhciBlbnYgPSBwcm9jZXNzLmVudi5OT0RFX0VOVjtcblxudmFyIGVzY2FwZVJlZ2V4ID0gLyhbW1xcXS4jKiQ+PCt+PXxeOigpLFwiJ2BdKS9nO1xuXG5leHBvcnRzWydkZWZhdWx0J10gPSBmdW5jdGlvbiAoc3RyKSB7XG4gIC8vIFdlIGRvbid0IG5lZWQgdG8gZXNjYXBlIGl0IGluIHByb2R1Y3Rpb24sIGJlY2F1c2Ugd2UgYXJlIG5vdCB1c2luZyB1c2VyJ3NcbiAgLy8gaW5wdXQgZm9yIHNlbGVjdG9ycywgd2UgYXJlIGdlbmVyYXRpbmcgYSB2YWxpZCBzZWxlY3Rvci5cbiAgaWYgKGVudiA9PT0gJ3Byb2R1Y3Rpb24nKSByZXR1cm4gc3RyO1xuXG4gIGlmICghQ1NTIHx8ICFDU1MuZXNjYXBlKSB7XG4gICAgcmV0dXJuIHN0ci5yZXBsYWNlKGVzY2FwZVJlZ2V4LCAnXFxcXCQxJyk7XG4gIH1cblxuICByZXR1cm4gQ1NTLmVzY2FwZShzdHIpO1xufTsiLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG9yaWdpbmFsTW9kdWxlKSB7XG5cdGlmICghb3JpZ2luYWxNb2R1bGUud2VicGFja1BvbHlmaWxsKSB7XG5cdFx0dmFyIG1vZHVsZSA9IE9iamVjdC5jcmVhdGUob3JpZ2luYWxNb2R1bGUpO1xuXHRcdC8vIG1vZHVsZS5wYXJlbnQgPSB1bmRlZmluZWQgYnkgZGVmYXVsdFxuXHRcdGlmICghbW9kdWxlLmNoaWxkcmVuKSBtb2R1bGUuY2hpbGRyZW4gPSBbXTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImxvYWRlZFwiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5sO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwiaWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUuaTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImV4cG9ydHNcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZVxuXHRcdH0pO1xuXHRcdG1vZHVsZS53ZWJwYWNrUG9seWZpbGwgPSAxO1xuXHR9XG5cdHJldHVybiBtb2R1bGU7XG59O1xuIiwiLyogZ2xvYmFsIHdpbmRvdyAqL1xuaW1wb3J0IHBvbnlmaWxsIGZyb20gJy4vcG9ueWZpbGwuanMnO1xuXG52YXIgcm9vdDtcblxuaWYgKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJykge1xuICByb290ID0gc2VsZjtcbn0gZWxzZSBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgcm9vdCA9IHdpbmRvdztcbn0gZWxzZSBpZiAodHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgcm9vdCA9IGdsb2JhbDtcbn0gZWxzZSBpZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgcm9vdCA9IG1vZHVsZTtcbn0gZWxzZSB7XG4gIHJvb3QgPSBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xufVxuXG52YXIgcmVzdWx0ID0gcG9ueWZpbGwocm9vdCk7XG5leHBvcnQgZGVmYXVsdCByZXN1bHQ7XG4iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxuZXhwb3J0c1snZGVmYXVsdCddID0gY2xvbmVTdHlsZTtcblxudmFyIF9pc09ic2VydmFibGUgPSByZXF1aXJlKCcuL2lzT2JzZXJ2YWJsZScpO1xuXG52YXIgX2lzT2JzZXJ2YWJsZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pc09ic2VydmFibGUpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9XG5cbnZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcbmZ1bmN0aW9uIGNsb25lU3R5bGUoc3R5bGUpIHtcbiAgLy8gU3VwcG9ydCBlbXB0eSB2YWx1ZXMgaW4gY2FzZSB1c2VyIGVuZHMgdXAgd2l0aCB0aGVtIGJ5IGFjY2lkZW50LlxuICBpZiAoc3R5bGUgPT0gbnVsbCkgcmV0dXJuIHN0eWxlO1xuXG4gIC8vIFN1cHBvcnQgc3RyaW5nIHZhbHVlIGZvciBTaW1wbGVSdWxlLlxuICB2YXIgdHlwZU9mU3R5bGUgPSB0eXBlb2Ygc3R5bGUgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKHN0eWxlKTtcblxuICBpZiAodHlwZU9mU3R5bGUgPT09ICdzdHJpbmcnIHx8IHR5cGVPZlN0eWxlID09PSAnbnVtYmVyJyB8fCB0eXBlT2ZTdHlsZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBzdHlsZTtcbiAgfVxuXG4gIC8vIFN1cHBvcnQgYXJyYXkgZm9yIEZvbnRGYWNlUnVsZS5cbiAgaWYgKGlzQXJyYXkoc3R5bGUpKSByZXR1cm4gc3R5bGUubWFwKGNsb25lU3R5bGUpO1xuXG4gIC8vIFN1cHBvcnQgT2JzZXJ2YWJsZSBzdHlsZXMuICBPYnNlcnZhYmxlcyBhcmUgaW1tdXRhYmxlLCBzbyB3ZSBkb24ndCBuZWVkIHRvXG4gIC8vIGNvcHkgdGhlbS5cbiAgaWYgKCgwLCBfaXNPYnNlcnZhYmxlMlsnZGVmYXVsdCddKShzdHlsZSkpIHJldHVybiBzdHlsZTtcblxuICB2YXIgbmV3U3R5bGUgPSB7fTtcbiAgZm9yICh2YXIgbmFtZSBpbiBzdHlsZSkge1xuICAgIHZhciB2YWx1ZSA9IHN0eWxlW25hbWVdO1xuICAgIGlmICgodHlwZW9mIHZhbHVlID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZih2YWx1ZSkpID09PSAnb2JqZWN0Jykge1xuICAgICAgbmV3U3R5bGVbbmFtZV0gPSBjbG9uZVN0eWxlKHZhbHVlKTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBuZXdTdHlsZVtuYW1lXSA9IHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIG5ld1N0eWxlO1xufSIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF93YXJuaW5nID0gcmVxdWlyZSgnd2FybmluZycpO1xuXG52YXIgX3dhcm5pbmcyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfd2FybmluZyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuLyoqXG4gKiBTaGVldHNNYW5hZ2VyIGlzIGxpa2UgYSBXZWFrTWFwIHdoaWNoIGlzIGRlc2lnbmVkIHRvIGNvdW50IFN0eWxlU2hlZXRcbiAqIGluc3RhbmNlcyBhbmQgYXR0YWNoL2RldGFjaCBhdXRvbWF0aWNhbGx5LlxuICovXG52YXIgU2hlZXRzTWFuYWdlciA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gU2hlZXRzTWFuYWdlcigpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU2hlZXRzTWFuYWdlcik7XG5cbiAgICB0aGlzLnNoZWV0cyA9IFtdO1xuICAgIHRoaXMucmVmcyA9IFtdO1xuICAgIHRoaXMua2V5cyA9IFtdO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFNoZWV0c01hbmFnZXIsIFt7XG4gICAga2V5OiAnZ2V0JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0KGtleSkge1xuICAgICAgdmFyIGluZGV4ID0gdGhpcy5rZXlzLmluZGV4T2Yoa2V5KTtcbiAgICAgIHJldHVybiB0aGlzLnNoZWV0c1tpbmRleF07XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnYWRkJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gYWRkKGtleSwgc2hlZXQpIHtcbiAgICAgIHZhciBzaGVldHMgPSB0aGlzLnNoZWV0cyxcbiAgICAgICAgICByZWZzID0gdGhpcy5yZWZzLFxuICAgICAgICAgIGtleXMgPSB0aGlzLmtleXM7XG5cbiAgICAgIHZhciBpbmRleCA9IHNoZWV0cy5pbmRleE9mKHNoZWV0KTtcblxuICAgICAgaWYgKGluZGV4ICE9PSAtMSkgcmV0dXJuIGluZGV4O1xuXG4gICAgICBzaGVldHMucHVzaChzaGVldCk7XG4gICAgICByZWZzLnB1c2goMCk7XG4gICAgICBrZXlzLnB1c2goa2V5KTtcblxuICAgICAgcmV0dXJuIHNoZWV0cy5sZW5ndGggLSAxO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ21hbmFnZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG1hbmFnZShrZXkpIHtcbiAgICAgIHZhciBpbmRleCA9IHRoaXMua2V5cy5pbmRleE9mKGtleSk7XG4gICAgICB2YXIgc2hlZXQgPSB0aGlzLnNoZWV0c1tpbmRleF07XG4gICAgICBpZiAodGhpcy5yZWZzW2luZGV4XSA9PT0gMCkgc2hlZXQuYXR0YWNoKCk7XG4gICAgICB0aGlzLnJlZnNbaW5kZXhdKys7XG4gICAgICBpZiAoIXRoaXMua2V5c1tpbmRleF0pIHRoaXMua2V5cy5zcGxpY2UoaW5kZXgsIDAsIGtleSk7XG4gICAgICByZXR1cm4gc2hlZXQ7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAndW5tYW5hZ2UnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB1bm1hbmFnZShrZXkpIHtcbiAgICAgIHZhciBpbmRleCA9IHRoaXMua2V5cy5pbmRleE9mKGtleSk7XG4gICAgICBpZiAoaW5kZXggPT09IC0xKSB7XG4gICAgICAgIC8vIGVzbGludC1pZ25vcmUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgICAgKDAsIF93YXJuaW5nMlsnZGVmYXVsdCddKShmYWxzZSwgXCJTaGVldHNNYW5hZ2VyOiBjYW4ndCBmaW5kIHNoZWV0IHRvIHVubWFuYWdlXCIpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5yZWZzW2luZGV4XSA+IDApIHtcbiAgICAgICAgdGhpcy5yZWZzW2luZGV4XS0tO1xuICAgICAgICBpZiAodGhpcy5yZWZzW2luZGV4XSA9PT0gMCkgdGhpcy5zaGVldHNbaW5kZXhdLmRldGFjaCgpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3NpemUnLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMua2V5cy5sZW5ndGg7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFNoZWV0c01hbmFnZXI7XG59KCk7XG5cbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IFNoZWV0c01hbmFnZXI7IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IGdldER5bmFtaWNTdHlsZXM7XG4vKipcbiAqIEV4dHJhY3RzIGEgc3R5bGVzIG9iamVjdCB3aXRoIG9ubHkgcHJvcHMgdGhhdCBjb250YWluIGZ1bmN0aW9uIHZhbHVlcy5cbiAqL1xuZnVuY3Rpb24gZ2V0RHluYW1pY1N0eWxlcyhzdHlsZXMpIHtcbiAgdmFyIHRvID0gbnVsbDtcblxuICBmb3IgKHZhciBrZXkgaW4gc3R5bGVzKSB7XG4gICAgdmFyIHZhbHVlID0gc3R5bGVzW2tleV07XG4gICAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKHZhbHVlKTtcblxuICAgIGlmICh0eXBlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBpZiAoIXRvKSB0byA9IHt9O1xuICAgICAgdG9ba2V5XSA9IHZhbHVlO1xuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgIT09IG51bGwgJiYgIUFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICB2YXIgZXh0cmFjdGVkID0gZ2V0RHluYW1pY1N0eWxlcyh2YWx1ZSk7XG4gICAgICBpZiAoZXh0cmFjdGVkKSB7XG4gICAgICAgIGlmICghdG8pIHRvID0ge307XG4gICAgICAgIHRvW2tleV0gPSBleHRyYWN0ZWQ7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRvO1xufSIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuZXhwb3J0c1snZGVmYXVsdCddID0ganNzR2xvYmFsO1xuXG52YXIgX2pzcyA9IHJlcXVpcmUoJ2pzcycpO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG52YXIgcHJvcEtleSA9ICdAZ2xvYmFsJztcbnZhciBwcmVmaXhLZXkgPSAnQGdsb2JhbCAnO1xuXG52YXIgR2xvYmFsQ29udGFpbmVyUnVsZSA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gR2xvYmFsQ29udGFpbmVyUnVsZShrZXksIHN0eWxlcywgb3B0aW9ucykge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBHbG9iYWxDb250YWluZXJSdWxlKTtcblxuICAgIHRoaXMudHlwZSA9ICdnbG9iYWwnO1xuXG4gICAgdGhpcy5rZXkgPSBrZXk7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICB0aGlzLnJ1bGVzID0gbmV3IF9qc3MuUnVsZUxpc3QoX2V4dGVuZHMoe30sIG9wdGlvbnMsIHtcbiAgICAgIHBhcmVudDogdGhpc1xuICAgIH0pKTtcblxuICAgIGZvciAodmFyIHNlbGVjdG9yIGluIHN0eWxlcykge1xuICAgICAgdGhpcy5ydWxlcy5hZGQoc2VsZWN0b3IsIHN0eWxlc1tzZWxlY3Rvcl0sIHsgc2VsZWN0b3I6IHNlbGVjdG9yIH0pO1xuICAgIH1cblxuICAgIHRoaXMucnVsZXMucHJvY2VzcygpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBhIHJ1bGUuXG4gICAqL1xuXG5cbiAgX2NyZWF0ZUNsYXNzKEdsb2JhbENvbnRhaW5lclJ1bGUsIFt7XG4gICAga2V5OiAnZ2V0UnVsZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldFJ1bGUobmFtZSkge1xuICAgICAgcmV0dXJuIHRoaXMucnVsZXMuZ2V0KG5hbWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhbmQgcmVnaXN0ZXIgcnVsZSwgcnVuIHBsdWdpbnMuXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2FkZFJ1bGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBhZGRSdWxlKG5hbWUsIHN0eWxlLCBvcHRpb25zKSB7XG4gICAgICB2YXIgcnVsZSA9IHRoaXMucnVsZXMuYWRkKG5hbWUsIHN0eWxlLCBvcHRpb25zKTtcbiAgICAgIHRoaXMub3B0aW9ucy5qc3MucGx1Z2lucy5vblByb2Nlc3NSdWxlKHJ1bGUpO1xuICAgICAgcmV0dXJuIHJ1bGU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IGluZGV4IG9mIGEgcnVsZS5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnaW5kZXhPZicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGluZGV4T2YocnVsZSkge1xuICAgICAgcmV0dXJuIHRoaXMucnVsZXMuaW5kZXhPZihydWxlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZW5lcmF0ZXMgYSBDU1Mgc3RyaW5nLlxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICd0b1N0cmluZycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgICAgcmV0dXJuIHRoaXMucnVsZXMudG9TdHJpbmcoKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gR2xvYmFsQ29udGFpbmVyUnVsZTtcbn0oKTtcblxudmFyIEdsb2JhbFByZWZpeGVkUnVsZSA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gR2xvYmFsUHJlZml4ZWRSdWxlKG5hbWUsIHN0eWxlLCBvcHRpb25zKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEdsb2JhbFByZWZpeGVkUnVsZSk7XG5cbiAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgdmFyIHNlbGVjdG9yID0gbmFtZS5zdWJzdHIocHJlZml4S2V5Lmxlbmd0aCk7XG4gICAgdGhpcy5ydWxlID0gb3B0aW9ucy5qc3MuY3JlYXRlUnVsZShzZWxlY3Rvciwgc3R5bGUsIF9leHRlbmRzKHt9LCBvcHRpb25zLCB7XG4gICAgICBwYXJlbnQ6IHRoaXMsXG4gICAgICBzZWxlY3Rvcjogc2VsZWN0b3JcbiAgICB9KSk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoR2xvYmFsUHJlZml4ZWRSdWxlLCBbe1xuICAgIGtleTogJ3RvU3RyaW5nJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gdG9TdHJpbmcob3B0aW9ucykge1xuICAgICAgcmV0dXJuIHRoaXMucnVsZS50b1N0cmluZyhvcHRpb25zKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gR2xvYmFsUHJlZml4ZWRSdWxlO1xufSgpO1xuXG52YXIgc2VwYXJhdG9yUmVnRXhwID0gL1xccyosXFxzKi9nO1xuXG5mdW5jdGlvbiBhZGRTY29wZShzZWxlY3Rvciwgc2NvcGUpIHtcbiAgdmFyIHBhcnRzID0gc2VsZWN0b3Iuc3BsaXQoc2VwYXJhdG9yUmVnRXhwKTtcbiAgdmFyIHNjb3BlZCA9ICcnO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHBhcnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgc2NvcGVkICs9IHNjb3BlICsgJyAnICsgcGFydHNbaV0udHJpbSgpO1xuICAgIGlmIChwYXJ0c1tpICsgMV0pIHNjb3BlZCArPSAnLCAnO1xuICB9XG4gIHJldHVybiBzY29wZWQ7XG59XG5cbmZ1bmN0aW9uIGhhbmRsZU5lc3RlZEdsb2JhbENvbnRhaW5lclJ1bGUocnVsZSkge1xuICB2YXIgb3B0aW9ucyA9IHJ1bGUub3B0aW9ucyxcbiAgICAgIHN0eWxlID0gcnVsZS5zdHlsZTtcblxuICB2YXIgcnVsZXMgPSBzdHlsZVtwcm9wS2V5XTtcblxuICBpZiAoIXJ1bGVzKSByZXR1cm47XG5cbiAgZm9yICh2YXIgbmFtZSBpbiBydWxlcykge1xuICAgIG9wdGlvbnMuc2hlZXQuYWRkUnVsZShuYW1lLCBydWxlc1tuYW1lXSwgX2V4dGVuZHMoe30sIG9wdGlvbnMsIHtcbiAgICAgIHNlbGVjdG9yOiBhZGRTY29wZShuYW1lLCBydWxlLnNlbGVjdG9yKVxuICAgIH0pKTtcbiAgfVxuXG4gIGRlbGV0ZSBzdHlsZVtwcm9wS2V5XTtcbn1cblxuZnVuY3Rpb24gaGFuZGxlUHJlZml4ZWRHbG9iYWxSdWxlKHJ1bGUpIHtcbiAgdmFyIG9wdGlvbnMgPSBydWxlLm9wdGlvbnMsXG4gICAgICBzdHlsZSA9IHJ1bGUuc3R5bGU7XG5cbiAgZm9yICh2YXIgcHJvcCBpbiBzdHlsZSkge1xuICAgIGlmIChwcm9wLnN1YnN0cigwLCBwcm9wS2V5Lmxlbmd0aCkgIT09IHByb3BLZXkpIGNvbnRpbnVlO1xuXG4gICAgdmFyIHNlbGVjdG9yID0gYWRkU2NvcGUocHJvcC5zdWJzdHIocHJvcEtleS5sZW5ndGgpLCBydWxlLnNlbGVjdG9yKTtcbiAgICBvcHRpb25zLnNoZWV0LmFkZFJ1bGUoc2VsZWN0b3IsIHN0eWxlW3Byb3BdLCBfZXh0ZW5kcyh7fSwgb3B0aW9ucywge1xuICAgICAgc2VsZWN0b3I6IHNlbGVjdG9yXG4gICAgfSkpO1xuICAgIGRlbGV0ZSBzdHlsZVtwcm9wXTtcbiAgfVxufVxuXG4vKipcbiAqIENvbnZlcnQgbmVzdGVkIHJ1bGVzIHRvIHNlcGFyYXRlLCByZW1vdmUgdGhlbSBmcm9tIG9yaWdpbmFsIHN0eWxlcy5cbiAqXG4gKiBAcGFyYW0ge1J1bGV9IHJ1bGVcbiAqIEBhcGkgcHVibGljXG4gKi9cbmZ1bmN0aW9uIGpzc0dsb2JhbCgpIHtcbiAgZnVuY3Rpb24gb25DcmVhdGVSdWxlKG5hbWUsIHN0eWxlcywgb3B0aW9ucykge1xuICAgIGlmIChuYW1lID09PSBwcm9wS2V5KSB7XG4gICAgICByZXR1cm4gbmV3IEdsb2JhbENvbnRhaW5lclJ1bGUobmFtZSwgc3R5bGVzLCBvcHRpb25zKTtcbiAgICB9XG5cbiAgICBpZiAobmFtZVswXSA9PT0gJ0AnICYmIG5hbWUuc3Vic3RyKDAsIHByZWZpeEtleS5sZW5ndGgpID09PSBwcmVmaXhLZXkpIHtcbiAgICAgIHJldHVybiBuZXcgR2xvYmFsUHJlZml4ZWRSdWxlKG5hbWUsIHN0eWxlcywgb3B0aW9ucyk7XG4gICAgfVxuXG4gICAgdmFyIHBhcmVudCA9IG9wdGlvbnMucGFyZW50O1xuXG5cbiAgICBpZiAocGFyZW50KSB7XG4gICAgICBpZiAocGFyZW50LnR5cGUgPT09ICdnbG9iYWwnIHx8IHBhcmVudC5vcHRpb25zLnBhcmVudC50eXBlID09PSAnZ2xvYmFsJykge1xuICAgICAgICBvcHRpb25zLmdsb2JhbCA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMuZ2xvYmFsKSBvcHRpb25zLnNlbGVjdG9yID0gbmFtZTtcblxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgZnVuY3Rpb24gb25Qcm9jZXNzUnVsZShydWxlKSB7XG4gICAgaWYgKHJ1bGUudHlwZSAhPT0gJ3N0eWxlJykgcmV0dXJuO1xuXG4gICAgaGFuZGxlTmVzdGVkR2xvYmFsQ29udGFpbmVyUnVsZShydWxlKTtcbiAgICBoYW5kbGVQcmVmaXhlZEdsb2JhbFJ1bGUocnVsZSk7XG4gIH1cblxuICByZXR1cm4geyBvbkNyZWF0ZVJ1bGU6IG9uQ3JlYXRlUnVsZSwgb25Qcm9jZXNzUnVsZTogb25Qcm9jZXNzUnVsZSB9O1xufSIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xudmFyIF9kZWZhdWx0ID0ge1xuICAvLyBBbGwgY29tcG9uZW50cyBhbGlnbiB0byBhbiA4ZHAgc3F1YXJlIGJhc2VsaW5lIGdyaWQgZm9yIG1vYmlsZSwgdGFibGV0LCBhbmQgZGVza3RvcC5cbiAgLy8gaHR0cHM6Ly9tYXRlcmlhbC5pby9ndWlkZWxpbmVzL2xheW91dC9tZXRyaWNzLWtleWxpbmVzLmh0bWwjbWV0cmljcy1rZXlsaW5lcy1iYXNlbGluZS1ncmlkc1xuICB1bml0OiA4XG59O1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG4vLyBXZSBuZWVkIHRvIGNlbnRyYWxpemUgdGhlIHpJbmRleCBkZWZpbml0aW9ucyBhcyB0aGV5IHdvcmtcbi8vIGxpa2UgZ2xvYmFsIHZhbHVlcyBpbiB0aGUgYnJvd3Nlci5cbnZhciB6SW5kZXggPSB7XG4gIG1vYmlsZVN0ZXBwZXI6IDEwMDAsXG4gIGFwcEJhcjogMTEwMCxcbiAgZHJhd2VyOiAxMjAwLFxuICBtb2RhbDogMTMwMCxcbiAgc25hY2tiYXI6IDE0MDAsXG4gIHRvb2x0aXA6IDE1MDBcbn07XG52YXIgX2RlZmF1bHQgPSB6SW5kZXg7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcbnZhciBzaGFkb3dLZXlVbWJyYU9wYWNpdHkgPSAwLjI7XG52YXIgc2hhZG93S2V5UGVudW1icmFPcGFjaXR5ID0gMC4xNDtcbnZhciBzaGFkb3dBbWJpZW50U2hhZG93T3BhY2l0eSA9IDAuMTI7XG5cbmZ1bmN0aW9uIGNyZWF0ZVNoYWRvdygpIHtcbiAgcmV0dXJuIFtcIlwiLmNvbmNhdChhcmd1bWVudHMubGVuZ3RoIDw9IDAgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMF0sIFwicHggXCIpLmNvbmNhdChhcmd1bWVudHMubGVuZ3RoIDw9IDEgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMV0sIFwicHggXCIpLmNvbmNhdChhcmd1bWVudHMubGVuZ3RoIDw9IDIgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMl0sIFwicHggXCIpLmNvbmNhdChhcmd1bWVudHMubGVuZ3RoIDw9IDMgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbM10sIFwicHggcmdiYSgwLCAwLCAwLCBcIikuY29uY2F0KHNoYWRvd0tleVVtYnJhT3BhY2l0eSwgXCIpXCIpLCBcIlwiLmNvbmNhdChhcmd1bWVudHMubGVuZ3RoIDw9IDQgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbNF0sIFwicHggXCIpLmNvbmNhdChhcmd1bWVudHMubGVuZ3RoIDw9IDUgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbNV0sIFwicHggXCIpLmNvbmNhdChhcmd1bWVudHMubGVuZ3RoIDw9IDYgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbNl0sIFwicHggXCIpLmNvbmNhdChhcmd1bWVudHMubGVuZ3RoIDw9IDcgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbN10sIFwicHggcmdiYSgwLCAwLCAwLCBcIikuY29uY2F0KHNoYWRvd0tleVBlbnVtYnJhT3BhY2l0eSwgXCIpXCIpLCBcIlwiLmNvbmNhdChhcmd1bWVudHMubGVuZ3RoIDw9IDggPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbOF0sIFwicHggXCIpLmNvbmNhdChhcmd1bWVudHMubGVuZ3RoIDw9IDkgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbOV0sIFwicHggXCIpLmNvbmNhdChhcmd1bWVudHMubGVuZ3RoIDw9IDEwID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzEwXSwgXCJweCBcIikuY29uY2F0KGFyZ3VtZW50cy5sZW5ndGggPD0gMTEgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMTFdLCBcInB4IHJnYmEoMCwgMCwgMCwgXCIpLmNvbmNhdChzaGFkb3dBbWJpZW50U2hhZG93T3BhY2l0eSwgXCIpXCIpXS5qb2luKCcsJyk7XG59XG5cbnZhciBzaGFkb3dzID0gWydub25lJywgY3JlYXRlU2hhZG93KDAsIDEsIDMsIDAsIDAsIDEsIDEsIDAsIDAsIDIsIDEsIC0xKSwgY3JlYXRlU2hhZG93KDAsIDEsIDUsIDAsIDAsIDIsIDIsIDAsIDAsIDMsIDEsIC0yKSwgY3JlYXRlU2hhZG93KDAsIDEsIDgsIDAsIDAsIDMsIDQsIDAsIDAsIDMsIDMsIC0yKSwgY3JlYXRlU2hhZG93KDAsIDIsIDQsIC0xLCAwLCA0LCA1LCAwLCAwLCAxLCAxMCwgMCksIGNyZWF0ZVNoYWRvdygwLCAzLCA1LCAtMSwgMCwgNSwgOCwgMCwgMCwgMSwgMTQsIDApLCBjcmVhdGVTaGFkb3coMCwgMywgNSwgLTEsIDAsIDYsIDEwLCAwLCAwLCAxLCAxOCwgMCksIGNyZWF0ZVNoYWRvdygwLCA0LCA1LCAtMiwgMCwgNywgMTAsIDEsIDAsIDIsIDE2LCAxKSwgY3JlYXRlU2hhZG93KDAsIDUsIDUsIC0zLCAwLCA4LCAxMCwgMSwgMCwgMywgMTQsIDIpLCBjcmVhdGVTaGFkb3coMCwgNSwgNiwgLTMsIDAsIDksIDEyLCAxLCAwLCAzLCAxNiwgMiksIGNyZWF0ZVNoYWRvdygwLCA2LCA2LCAtMywgMCwgMTAsIDE0LCAxLCAwLCA0LCAxOCwgMyksIGNyZWF0ZVNoYWRvdygwLCA2LCA3LCAtNCwgMCwgMTEsIDE1LCAxLCAwLCA0LCAyMCwgMyksIGNyZWF0ZVNoYWRvdygwLCA3LCA4LCAtNCwgMCwgMTIsIDE3LCAyLCAwLCA1LCAyMiwgNCksIGNyZWF0ZVNoYWRvdygwLCA3LCA4LCAtNCwgMCwgMTMsIDE5LCAyLCAwLCA1LCAyNCwgNCksIGNyZWF0ZVNoYWRvdygwLCA3LCA5LCAtNCwgMCwgMTQsIDIxLCAyLCAwLCA1LCAyNiwgNCksIGNyZWF0ZVNoYWRvdygwLCA4LCA5LCAtNSwgMCwgMTUsIDIyLCAyLCAwLCA2LCAyOCwgNSksIGNyZWF0ZVNoYWRvdygwLCA4LCAxMCwgLTUsIDAsIDE2LCAyNCwgMiwgMCwgNiwgMzAsIDUpLCBjcmVhdGVTaGFkb3coMCwgOCwgMTEsIC01LCAwLCAxNywgMjYsIDIsIDAsIDYsIDMyLCA1KSwgY3JlYXRlU2hhZG93KDAsIDksIDExLCAtNSwgMCwgMTgsIDI4LCAyLCAwLCA3LCAzNCwgNiksIGNyZWF0ZVNoYWRvdygwLCA5LCAxMiwgLTYsIDAsIDE5LCAyOSwgMiwgMCwgNywgMzYsIDYpLCBjcmVhdGVTaGFkb3coMCwgMTAsIDEzLCAtNiwgMCwgMjAsIDMxLCAzLCAwLCA4LCAzOCwgNyksIGNyZWF0ZVNoYWRvdygwLCAxMCwgMTMsIC02LCAwLCAyMSwgMzMsIDMsIDAsIDgsIDQwLCA3KSwgY3JlYXRlU2hhZG93KDAsIDEwLCAxNCwgLTYsIDAsIDIyLCAzNSwgMywgMCwgOCwgNDIsIDcpLCBjcmVhdGVTaGFkb3coMCwgMTEsIDE0LCAtNywgMCwgMjMsIDM2LCAzLCAwLCA5LCA0NCwgOCksIGNyZWF0ZVNoYWRvdygwLCAxMSwgMTUsIC03LCAwLCAyNCwgMzgsIDMsIDAsIDksIDQ2LCA4KV07XG52YXIgX2RlZmF1bHQgPSBzaGFkb3dzO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYnVpbHRpbi9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBjcmVhdGVNaXhpbnM7XG5cbnZhciBfZGVmaW5lUHJvcGVydHkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2RlZmluZVByb3BlcnR5XCIpKTtcblxudmFyIF9vYmplY3RTcHJlYWQzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL29iamVjdFNwcmVhZFwiKSk7XG5cbmZ1bmN0aW9uIGNyZWF0ZU1peGlucyhicmVha3BvaW50cywgc3BhY2luZywgbWl4aW5zKSB7XG4gIHZhciBfdG9vbGJhcjtcblxuICByZXR1cm4gKDAsIF9vYmplY3RTcHJlYWQzLmRlZmF1bHQpKHtcbiAgICBndXR0ZXJzOiBmdW5jdGlvbiBndXR0ZXJzKCkge1xuICAgICAgdmFyIHN0eWxlcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gICAgICByZXR1cm4gKDAsIF9vYmplY3RTcHJlYWQzLmRlZmF1bHQpKHtcbiAgICAgICAgcGFkZGluZ0xlZnQ6IHNwYWNpbmcudW5pdCAqIDIsXG4gICAgICAgIHBhZGRpbmdSaWdodDogc3BhY2luZy51bml0ICogMlxuICAgICAgfSwgc3R5bGVzLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KSh7fSwgYnJlYWtwb2ludHMudXAoJ3NtJyksICgwLCBfb2JqZWN0U3ByZWFkMy5kZWZhdWx0KSh7XG4gICAgICAgIHBhZGRpbmdMZWZ0OiBzcGFjaW5nLnVuaXQgKiAzLFxuICAgICAgICBwYWRkaW5nUmlnaHQ6IHNwYWNpbmcudW5pdCAqIDNcbiAgICAgIH0sIHN0eWxlc1ticmVha3BvaW50cy51cCgnc20nKV0pKSk7XG4gICAgfSxcbiAgICB0b29sYmFyOiAoX3Rvb2xiYXIgPSB7XG4gICAgICBtaW5IZWlnaHQ6IDU2XG4gICAgfSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX3Rvb2xiYXIsIFwiXCIuY29uY2F0KGJyZWFrcG9pbnRzLnVwKCd4cycpLCBcIiBhbmQgKG9yaWVudGF0aW9uOiBsYW5kc2NhcGUpXCIpLCB7XG4gICAgICBtaW5IZWlnaHQ6IDQ4XG4gICAgfSksICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKF90b29sYmFyLCBicmVha3BvaW50cy51cCgnc20nKSwge1xuICAgICAgbWluSGVpZ2h0OiA2NFxuICAgIH0pLCBfdG9vbGJhcilcbiAgfSwgbWl4aW5zKTtcbn0iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGNyZWF0ZVBhbGV0dGU7XG5leHBvcnRzLmRhcmsgPSBleHBvcnRzLmxpZ2h0ID0gdm9pZCAwO1xuXG52YXIgX29iamVjdFNwcmVhZDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vb2JqZWN0U3ByZWFkXCIpKTtcblxudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2J1aWx0aW4vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIikpO1xuXG52YXIgX3dhcm5pbmcgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJ3YXJuaW5nXCIpKTtcblxudmFyIF9kZWVwbWVyZ2UgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJkZWVwbWVyZ2VcIikpO1xuXG52YXIgX2luZGlnbyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL2NvbG9ycy9pbmRpZ29cIikpO1xuXG52YXIgX3BpbmsgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9jb2xvcnMvcGlua1wiKSk7XG5cbnZhciBfZ3JleSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL2NvbG9ycy9ncmV5XCIpKTtcblxudmFyIF9yZWQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9jb2xvcnMvcmVkXCIpKTtcblxudmFyIF9jb21tb24gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9jb2xvcnMvY29tbW9uXCIpKTtcblxudmFyIF9jb2xvck1hbmlwdWxhdG9yID0gcmVxdWlyZShcIi4vY29sb3JNYW5pcHVsYXRvclwiKTtcblxuLy8gPCAxa2IgcGF5bG9hZCBvdmVyaGVhZCB3aGVuIGxvZGFzaC9tZXJnZSBpcyA+IDNrYi5cbnZhciBsaWdodCA9IHtcbiAgLy8gVGhlIGNvbG9ycyB1c2VkIHRvIHN0eWxlIHRoZSB0ZXh0LlxuICB0ZXh0OiB7XG4gICAgLy8gVGhlIG1vc3QgaW1wb3J0YW50IHRleHQuXG4gICAgcHJpbWFyeTogJ3JnYmEoMCwgMCwgMCwgMC44NyknLFxuICAgIC8vIFNlY29uZGFyeSB0ZXh0LlxuICAgIHNlY29uZGFyeTogJ3JnYmEoMCwgMCwgMCwgMC41NCknLFxuICAgIC8vIERpc2FibGVkIHRleHQgaGF2ZSBldmVuIGxvd2VyIHZpc3VhbCBwcm9taW5lbmNlLlxuICAgIGRpc2FibGVkOiAncmdiYSgwLCAwLCAwLCAwLjM4KScsXG4gICAgLy8gVGV4dCBoaW50cy5cbiAgICBoaW50OiAncmdiYSgwLCAwLCAwLCAwLjM4KSdcbiAgfSxcbiAgLy8gVGhlIGNvbG9yIHVzZWQgdG8gZGl2aWRlIGRpZmZlcmVudCBlbGVtZW50cy5cbiAgZGl2aWRlcjogJ3JnYmEoMCwgMCwgMCwgMC4xMiknLFxuICAvLyBUaGUgYmFja2dyb3VuZCBjb2xvcnMgdXNlZCB0byBzdHlsZSB0aGUgc3VyZmFjZXMuXG4gIC8vIENvbnNpc3RlbmN5IGJldHdlZW4gdGhlc2UgdmFsdWVzIGlzIGltcG9ydGFudC5cbiAgYmFja2dyb3VuZDoge1xuICAgIHBhcGVyOiBfY29tbW9uLmRlZmF1bHQud2hpdGUsXG4gICAgZGVmYXVsdDogX2dyZXkuZGVmYXVsdFs1MF1cbiAgfSxcbiAgLy8gVGhlIGNvbG9ycyB1c2VkIHRvIHN0eWxlIHRoZSBhY3Rpb24gZWxlbWVudHMuXG4gIGFjdGlvbjoge1xuICAgIC8vIFRoZSBjb2xvciBvZiBhbiBhY3RpdmUgYWN0aW9uIGxpa2UgYW4gaWNvbiBidXR0b24uXG4gICAgYWN0aXZlOiAncmdiYSgwLCAwLCAwLCAwLjU0KScsXG4gICAgLy8gVGhlIGNvbG9yIG9mIGFuIGhvdmVyZWQgYWN0aW9uLlxuICAgIGhvdmVyOiAncmdiYSgwLCAwLCAwLCAwLjA4KScsXG4gICAgaG92ZXJPcGFjaXR5OiAwLjA4LFxuICAgIC8vIFRoZSBjb2xvciBvZiBhIHNlbGVjdGVkIGFjdGlvbi5cbiAgICBzZWxlY3RlZDogJ3JnYmEoMCwgMCwgMCwgMC4xNCknLFxuICAgIC8vIFRoZSBjb2xvciBvZiBhIGRpc2FibGVkIGFjdGlvbi5cbiAgICBkaXNhYmxlZDogJ3JnYmEoMCwgMCwgMCwgMC4yNiknLFxuICAgIC8vIFRoZSBiYWNrZ3JvdW5kIGNvbG9yIG9mIGEgZGlzYWJsZWQgYWN0aW9uLlxuICAgIGRpc2FibGVkQmFja2dyb3VuZDogJ3JnYmEoMCwgMCwgMCwgMC4xMiknXG4gIH1cbn07XG5leHBvcnRzLmxpZ2h0ID0gbGlnaHQ7XG52YXIgZGFyayA9IHtcbiAgdGV4dDoge1xuICAgIHByaW1hcnk6IF9jb21tb24uZGVmYXVsdC53aGl0ZSxcbiAgICBzZWNvbmRhcnk6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNyknLFxuICAgIGRpc2FibGVkOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjUpJyxcbiAgICBoaW50OiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjUpJyxcbiAgICBpY29uOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjUpJ1xuICB9LFxuICBkaXZpZGVyOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjEyKScsXG4gIGJhY2tncm91bmQ6IHtcbiAgICBwYXBlcjogX2dyZXkuZGVmYXVsdFs4MDBdLFxuICAgIGRlZmF1bHQ6ICcjMzAzMDMwJ1xuICB9LFxuICBhY3Rpb246IHtcbiAgICBhY3RpdmU6IF9jb21tb24uZGVmYXVsdC53aGl0ZSxcbiAgICBob3ZlcjogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC4xKScsXG4gICAgaG92ZXJPcGFjaXR5OiAwLjEsXG4gICAgc2VsZWN0ZWQ6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMiknLFxuICAgIGRpc2FibGVkOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjMpJyxcbiAgICBkaXNhYmxlZEJhY2tncm91bmQ6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMTIpJ1xuICB9XG59O1xuZXhwb3J0cy5kYXJrID0gZGFyaztcblxuZnVuY3Rpb24gYWRkTGlnaHRPckRhcmsoaW50ZW50LCBkaXJlY3Rpb24sIHNoYWRlLCB0b25hbE9mZnNldCkge1xuICBpZiAoIWludGVudFtkaXJlY3Rpb25dKSB7XG4gICAgaWYgKGludGVudC5oYXNPd25Qcm9wZXJ0eShzaGFkZSkpIHtcbiAgICAgIGludGVudFtkaXJlY3Rpb25dID0gaW50ZW50W3NoYWRlXTtcbiAgICB9IGVsc2UgaWYgKGRpcmVjdGlvbiA9PT0gJ2xpZ2h0Jykge1xuICAgICAgaW50ZW50LmxpZ2h0ID0gKDAsIF9jb2xvck1hbmlwdWxhdG9yLmxpZ2h0ZW4pKGludGVudC5tYWluLCB0b25hbE9mZnNldCk7XG4gICAgfSBlbHNlIGlmIChkaXJlY3Rpb24gPT09ICdkYXJrJykge1xuICAgICAgaW50ZW50LmRhcmsgPSAoMCwgX2NvbG9yTWFuaXB1bGF0b3IuZGFya2VuKShpbnRlbnQubWFpbiwgdG9uYWxPZmZzZXQgKiAxLjUpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVQYWxldHRlKHBhbGV0dGUpIHtcbiAgdmFyIF9wYWxldHRlJHByaW1hcnkgPSBwYWxldHRlLnByaW1hcnksXG4gICAgICBwcmltYXJ5ID0gX3BhbGV0dGUkcHJpbWFyeSA9PT0gdm9pZCAwID8ge1xuICAgIGxpZ2h0OiBfaW5kaWdvLmRlZmF1bHRbMzAwXSxcbiAgICBtYWluOiBfaW5kaWdvLmRlZmF1bHRbNTAwXSxcbiAgICBkYXJrOiBfaW5kaWdvLmRlZmF1bHRbNzAwXVxuICB9IDogX3BhbGV0dGUkcHJpbWFyeSxcbiAgICAgIF9wYWxldHRlJHNlY29uZGFyeSA9IHBhbGV0dGUuc2Vjb25kYXJ5LFxuICAgICAgc2Vjb25kYXJ5ID0gX3BhbGV0dGUkc2Vjb25kYXJ5ID09PSB2b2lkIDAgPyB7XG4gICAgbGlnaHQ6IF9waW5rLmRlZmF1bHQuQTIwMCxcbiAgICBtYWluOiBfcGluay5kZWZhdWx0LkE0MDAsXG4gICAgZGFyazogX3BpbmsuZGVmYXVsdC5BNzAwXG4gIH0gOiBfcGFsZXR0ZSRzZWNvbmRhcnksXG4gICAgICBfcGFsZXR0ZSRlcnJvciA9IHBhbGV0dGUuZXJyb3IsXG4gICAgICBlcnJvciA9IF9wYWxldHRlJGVycm9yID09PSB2b2lkIDAgPyB7XG4gICAgbGlnaHQ6IF9yZWQuZGVmYXVsdFszMDBdLFxuICAgIG1haW46IF9yZWQuZGVmYXVsdFs1MDBdLFxuICAgIGRhcms6IF9yZWQuZGVmYXVsdFs3MDBdXG4gIH0gOiBfcGFsZXR0ZSRlcnJvcixcbiAgICAgIF9wYWxldHRlJHR5cGUgPSBwYWxldHRlLnR5cGUsXG4gICAgICB0eXBlID0gX3BhbGV0dGUkdHlwZSA9PT0gdm9pZCAwID8gJ2xpZ2h0JyA6IF9wYWxldHRlJHR5cGUsXG4gICAgICBfcGFsZXR0ZSRjb250cmFzdFRocmUgPSBwYWxldHRlLmNvbnRyYXN0VGhyZXNob2xkLFxuICAgICAgY29udHJhc3RUaHJlc2hvbGQgPSBfcGFsZXR0ZSRjb250cmFzdFRocmUgPT09IHZvaWQgMCA/IDMgOiBfcGFsZXR0ZSRjb250cmFzdFRocmUsXG4gICAgICBfcGFsZXR0ZSR0b25hbE9mZnNldCA9IHBhbGV0dGUudG9uYWxPZmZzZXQsXG4gICAgICB0b25hbE9mZnNldCA9IF9wYWxldHRlJHRvbmFsT2Zmc2V0ID09PSB2b2lkIDAgPyAwLjIgOiBfcGFsZXR0ZSR0b25hbE9mZnNldCxcbiAgICAgIG90aGVyID0gKDAsIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIuZGVmYXVsdCkocGFsZXR0ZSwgW1wicHJpbWFyeVwiLCBcInNlY29uZGFyeVwiLCBcImVycm9yXCIsIFwidHlwZVwiLCBcImNvbnRyYXN0VGhyZXNob2xkXCIsIFwidG9uYWxPZmZzZXRcIl0pO1xuXG4gIGZ1bmN0aW9uIGdldENvbnRyYXN0VGV4dChiYWNrZ3JvdW5kKSB7XG4gICAgLy8gVXNlIHRoZSBzYW1lIGxvZ2ljIGFzXG4gICAgLy8gQm9vdHN0cmFwOiBodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi8xZDZlMzcxMGRkNDQ3ZGUxYTIwMGYyOWU4ZmE1MjFmOGEwOTA4ZjcwL3Njc3MvX2Z1bmN0aW9ucy5zY3NzI0w1OVxuICAgIC8vIGFuZCBtYXRlcmlhbC1jb21wb25lbnRzLXdlYiBodHRwczovL2dpdGh1Yi5jb20vbWF0ZXJpYWwtY29tcG9uZW50cy9tYXRlcmlhbC1jb21wb25lbnRzLXdlYi9ibG9iL2FjNDZiODg2M2M0ZGFiOWZjMjJjNGM2NjJkYzZiZDFiNjVkZDY1MmYvcGFja2FnZXMvbWRjLXRoZW1lL19mdW5jdGlvbnMuc2NzcyNMNTRcbiAgICB2YXIgY29udHJhc3RUZXh0ID0gKDAsIF9jb2xvck1hbmlwdWxhdG9yLmdldENvbnRyYXN0UmF0aW8pKGJhY2tncm91bmQsIGRhcmsudGV4dC5wcmltYXJ5KSA+PSBjb250cmFzdFRocmVzaG9sZCA/IGRhcmsudGV4dC5wcmltYXJ5IDogbGlnaHQudGV4dC5wcmltYXJ5O1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHZhciBjb250cmFzdCA9ICgwLCBfY29sb3JNYW5pcHVsYXRvci5nZXRDb250cmFzdFJhdGlvKShiYWNrZ3JvdW5kLCBjb250cmFzdFRleHQpO1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gKDAsIF93YXJuaW5nLmRlZmF1bHQpKGNvbnRyYXN0ID49IDMsIFtcIk1hdGVyaWFsLVVJOiB0aGUgY29udHJhc3QgcmF0aW8gb2YgXCIuY29uY2F0KGNvbnRyYXN0LCBcIjoxIGZvciBcIikuY29uY2F0KGNvbnRyYXN0VGV4dCwgXCIgb24gXCIpLmNvbmNhdChiYWNrZ3JvdW5kKSwgJ2ZhbGxzIGJlbG93IHRoZSBXQUNHIHJlY29tbWVuZGVkIGFic29sdXRlIG1pbmltdW0gY29udHJhc3QgcmF0aW8gb2YgMzoxLicsICdodHRwczovL3d3dy53My5vcmcvVFIvMjAwOC9SRUMtV0NBRzIwLTIwMDgxMjExLyN2aXN1YWwtYXVkaW8tY29udHJhc3QtY29udHJhc3QnXS5qb2luKCdcXG4nKSkgOiB2b2lkIDA7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNvbnRyYXN0VGV4dDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGF1Z21lbnRDb2xvcihjb2xvciwgbWFpblNoYWRlLCBsaWdodFNoYWRlLCBkYXJrU2hhZGUpIHtcbiAgICBpZiAoIWNvbG9yLm1haW4gJiYgY29sb3JbbWFpblNoYWRlXSkge1xuICAgICAgY29sb3IubWFpbiA9IGNvbG9yW21haW5TaGFkZV07XG4gICAgfVxuXG4gICAgYWRkTGlnaHRPckRhcmsoY29sb3IsICdsaWdodCcsIGxpZ2h0U2hhZGUsIHRvbmFsT2Zmc2V0KTtcbiAgICBhZGRMaWdodE9yRGFyayhjb2xvciwgJ2RhcmsnLCBkYXJrU2hhZGUsIHRvbmFsT2Zmc2V0KTtcblxuICAgIGlmICghY29sb3IuY29udHJhc3RUZXh0KSB7XG4gICAgICBjb2xvci5jb250cmFzdFRleHQgPSBnZXRDb250cmFzdFRleHQoY29sb3IubWFpbik7XG4gICAgfVxuICB9XG5cbiAgYXVnbWVudENvbG9yKHByaW1hcnksIDUwMCwgMzAwLCA3MDApO1xuICBhdWdtZW50Q29sb3Ioc2Vjb25kYXJ5LCAnQTQwMCcsICdBMjAwJywgJ0E3MDAnKTtcbiAgYXVnbWVudENvbG9yKGVycm9yLCA1MDAsIDMwMCwgNzAwKTtcbiAgdmFyIHR5cGVzID0ge1xuICAgIGRhcms6IGRhcmssXG4gICAgbGlnaHQ6IGxpZ2h0XG4gIH07XG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/ICgwLCBfd2FybmluZy5kZWZhdWx0KSh0eXBlc1t0eXBlXSwgXCJNYXRlcmlhbC1VSTogdGhlIHBhbGV0dGUgdHlwZSBgXCIuY29uY2F0KHR5cGUsIFwiYCBpcyBub3Qgc3VwcG9ydGVkLlwiKSkgOiB2b2lkIDA7XG4gIHZhciBwYWxldHRlT3V0cHV0ID0gKDAsIF9kZWVwbWVyZ2UuZGVmYXVsdCkoKDAsIF9vYmplY3RTcHJlYWQyLmRlZmF1bHQpKHtcbiAgICAvLyBBIGNvbGxlY3Rpb24gb2YgY29tbW9uIGNvbG9ycy5cbiAgICBjb21tb246IF9jb21tb24uZGVmYXVsdCxcbiAgICAvLyBUaGUgcGFsZXR0ZSB0eXBlLCBjYW4gYmUgbGlnaHQgb3IgZGFyay5cbiAgICB0eXBlOiB0eXBlLFxuICAgIC8vIFRoZSBjb2xvcnMgdXNlZCB0byByZXByZXNlbnQgcHJpbWFyeSBpbnRlcmZhY2UgZWxlbWVudHMgZm9yIGEgdXNlci5cbiAgICBwcmltYXJ5OiBwcmltYXJ5LFxuICAgIC8vIFRoZSBjb2xvcnMgdXNlZCB0byByZXByZXNlbnQgc2Vjb25kYXJ5IGludGVyZmFjZSBlbGVtZW50cyBmb3IgYSB1c2VyLlxuICAgIHNlY29uZGFyeTogc2Vjb25kYXJ5LFxuICAgIC8vIFRoZSBjb2xvcnMgdXNlZCB0byByZXByZXNlbnQgaW50ZXJmYWNlIGVsZW1lbnRzIHRoYXQgdGhlIHVzZXIgc2hvdWxkIGJlIG1hZGUgYXdhcmUgb2YuXG4gICAgZXJyb3I6IGVycm9yLFxuICAgIC8vIFRoZSBncmV5IGNvbG9ycy5cbiAgICBncmV5OiBfZ3JleS5kZWZhdWx0LFxuICAgIC8vIFVzZWQgYnkgYGdldENvbnRyYXN0VGV4dCgpYCB0byBtYXhpbWl6ZSB0aGUgY29udHJhc3QgYmV0d2VlbiB0aGUgYmFja2dyb3VuZCBhbmRcbiAgICAvLyB0aGUgdGV4dC5cbiAgICBjb250cmFzdFRocmVzaG9sZDogY29udHJhc3RUaHJlc2hvbGQsXG4gICAgLy8gVGFrZSBhIGJhY2tncm91bmQgY29sb3IgYW5kIHJldHVybiB0aGUgY29sb3Igb2YgdGhlIHRleHQgdG8gbWF4aW1pemUgdGhlIGNvbnRyYXN0LlxuICAgIGdldENvbnRyYXN0VGV4dDogZ2V0Q29udHJhc3RUZXh0LFxuICAgIC8vIEdlbmVyYXRlIGEgcmljaCBjb2xvciBvYmplY3QuXG4gICAgYXVnbWVudENvbG9yOiBhdWdtZW50Q29sb3IsXG4gICAgLy8gVXNlZCBieSB0aGUgZnVuY3Rpb25zIGJlbG93IHRvIHNoaWZ0IGEgY29sb3IncyBsdW1pbmFuY2UgYnkgYXBwcm94aW1hdGVseVxuICAgIC8vIHR3byBpbmRleGVzIHdpdGhpbiBpdHMgdG9uYWwgcGFsZXR0ZS5cbiAgICAvLyBFLmcuLCBzaGlmdCBmcm9tIFJlZCA1MDAgdG8gUmVkIDMwMCBvciBSZWQgNzAwLlxuICAgIHRvbmFsT2Zmc2V0OiB0b25hbE9mZnNldFxuICB9LCB0eXBlc1t0eXBlXSksIG90aGVyLCB7XG4gICAgY2xvbmU6IGZhbHNlIC8vIE5vIG5lZWQgdG8gY2xvbmUgZGVlcFxuXG4gIH0pO1xuICByZXR1cm4gcGFsZXR0ZU91dHB1dDtcbn0iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGNyZWF0ZVR5cG9ncmFwaHk7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9idWlsdGluL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCIpKTtcblxudmFyIF9kZWVwbWVyZ2UgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJkZWVwbWVyZ2VcIikpO1xuXG4vLyA8IDFrYiBwYXlsb2FkIG92ZXJoZWFkIHdoZW4gbG9kYXNoL21lcmdlIGlzID4gM2tiLlxuZnVuY3Rpb24gcm91bmQodmFsdWUpIHtcbiAgcmV0dXJuIE1hdGgucm91bmQodmFsdWUgKiAxZTUpIC8gMWU1O1xufVxuXG5mdW5jdGlvbiBjcmVhdGVUeXBvZ3JhcGh5KHBhbGV0dGUsIHR5cG9ncmFwaHkpIHtcbiAgdmFyIF9yZWYgPSB0eXBlb2YgdHlwb2dyYXBoeSA9PT0gJ2Z1bmN0aW9uJyA/IHR5cG9ncmFwaHkocGFsZXR0ZSkgOiB0eXBvZ3JhcGh5LFxuICAgICAgX3JlZiRmb250RmFtaWx5ID0gX3JlZi5mb250RmFtaWx5LFxuICAgICAgZm9udEZhbWlseSA9IF9yZWYkZm9udEZhbWlseSA9PT0gdm9pZCAwID8gJ1wiUm9ib3RvXCIsIFwiSGVsdmV0aWNhXCIsIFwiQXJpYWxcIiwgc2Fucy1zZXJpZicgOiBfcmVmJGZvbnRGYW1pbHksXG4gICAgICBfcmVmJGZvbnRTaXplID0gX3JlZi5mb250U2l6ZSxcbiAgICAgIGZvbnRTaXplID0gX3JlZiRmb250U2l6ZSA9PT0gdm9pZCAwID8gMTQgOiBfcmVmJGZvbnRTaXplLFxuICAgICAgX3JlZiRmb250V2VpZ2h0TGlnaHQgPSBfcmVmLmZvbnRXZWlnaHRMaWdodCxcbiAgICAgIGZvbnRXZWlnaHRMaWdodCA9IF9yZWYkZm9udFdlaWdodExpZ2h0ID09PSB2b2lkIDAgPyAzMDAgOiBfcmVmJGZvbnRXZWlnaHRMaWdodCxcbiAgICAgIF9yZWYkZm9udFdlaWdodFJlZ3VsYSA9IF9yZWYuZm9udFdlaWdodFJlZ3VsYXIsXG4gICAgICBmb250V2VpZ2h0UmVndWxhciA9IF9yZWYkZm9udFdlaWdodFJlZ3VsYSA9PT0gdm9pZCAwID8gNDAwIDogX3JlZiRmb250V2VpZ2h0UmVndWxhLFxuICAgICAgX3JlZiRmb250V2VpZ2h0TWVkaXVtID0gX3JlZi5mb250V2VpZ2h0TWVkaXVtLFxuICAgICAgZm9udFdlaWdodE1lZGl1bSA9IF9yZWYkZm9udFdlaWdodE1lZGl1bSA9PT0gdm9pZCAwID8gNTAwIDogX3JlZiRmb250V2VpZ2h0TWVkaXVtLFxuICAgICAgX3JlZiRodG1sRm9udFNpemUgPSBfcmVmLmh0bWxGb250U2l6ZSxcbiAgICAgIGh0bWxGb250U2l6ZSA9IF9yZWYkaHRtbEZvbnRTaXplID09PSB2b2lkIDAgPyAxNiA6IF9yZWYkaHRtbEZvbnRTaXplLFxuICAgICAgb3RoZXIgPSAoMCwgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMi5kZWZhdWx0KShfcmVmLCBbXCJmb250RmFtaWx5XCIsIFwiZm9udFNpemVcIiwgXCJmb250V2VpZ2h0TGlnaHRcIiwgXCJmb250V2VpZ2h0UmVndWxhclwiLCBcImZvbnRXZWlnaHRNZWRpdW1cIiwgXCJodG1sRm9udFNpemVcIl0pO1xuXG4gIHZhciBjb2VmID0gZm9udFNpemUgLyAxNDtcblxuICBmdW5jdGlvbiBweFRvUmVtKHZhbHVlKSB7XG4gICAgcmV0dXJuIFwiXCIuY29uY2F0KHZhbHVlIC8gaHRtbEZvbnRTaXplICogY29lZiwgXCJyZW1cIik7XG4gIH1cblxuICByZXR1cm4gKDAsIF9kZWVwbWVyZ2UuZGVmYXVsdCkoe1xuICAgIHB4VG9SZW06IHB4VG9SZW0sXG4gICAgcm91bmQ6IHJvdW5kLFxuICAgIGZvbnRGYW1pbHk6IGZvbnRGYW1pbHksXG4gICAgZm9udFNpemU6IGZvbnRTaXplLFxuICAgIGZvbnRXZWlnaHRMaWdodDogZm9udFdlaWdodExpZ2h0LFxuICAgIGZvbnRXZWlnaHRSZWd1bGFyOiBmb250V2VpZ2h0UmVndWxhcixcbiAgICBmb250V2VpZ2h0TWVkaXVtOiBmb250V2VpZ2h0TWVkaXVtLFxuICAgIGRpc3BsYXk0OiB7XG4gICAgICBmb250U2l6ZTogcHhUb1JlbSgxMTIpLFxuICAgICAgZm9udFdlaWdodDogZm9udFdlaWdodExpZ2h0LFxuICAgICAgZm9udEZhbWlseTogZm9udEZhbWlseSxcbiAgICAgIGxldHRlclNwYWNpbmc6ICctLjA0ZW0nLFxuICAgICAgbGluZUhlaWdodDogXCJcIi5jb25jYXQocm91bmQoMTI4IC8gMTEyKSwgXCJlbVwiKSxcbiAgICAgIG1hcmdpbkxlZnQ6ICctLjA0ZW0nLFxuICAgICAgY29sb3I6IHBhbGV0dGUudGV4dC5zZWNvbmRhcnlcbiAgICB9LFxuICAgIGRpc3BsYXkzOiB7XG4gICAgICBmb250U2l6ZTogcHhUb1JlbSg1NiksXG4gICAgICBmb250V2VpZ2h0OiBmb250V2VpZ2h0UmVndWxhcixcbiAgICAgIGZvbnRGYW1pbHk6IGZvbnRGYW1pbHksXG4gICAgICBsZXR0ZXJTcGFjaW5nOiAnLS4wMmVtJyxcbiAgICAgIGxpbmVIZWlnaHQ6IFwiXCIuY29uY2F0KHJvdW5kKDczIC8gNTYpLCBcImVtXCIpLFxuICAgICAgbWFyZ2luTGVmdDogJy0uMDJlbScsXG4gICAgICBjb2xvcjogcGFsZXR0ZS50ZXh0LnNlY29uZGFyeVxuICAgIH0sXG4gICAgZGlzcGxheTI6IHtcbiAgICAgIGZvbnRTaXplOiBweFRvUmVtKDQ1KSxcbiAgICAgIGZvbnRXZWlnaHQ6IGZvbnRXZWlnaHRSZWd1bGFyLFxuICAgICAgZm9udEZhbWlseTogZm9udEZhbWlseSxcbiAgICAgIGxpbmVIZWlnaHQ6IFwiXCIuY29uY2F0KHJvdW5kKDQ4IC8gNDUpLCBcImVtXCIpLFxuICAgICAgbWFyZ2luTGVmdDogJy0uMDJlbScsXG4gICAgICBjb2xvcjogcGFsZXR0ZS50ZXh0LnNlY29uZGFyeVxuICAgIH0sXG4gICAgZGlzcGxheTE6IHtcbiAgICAgIGZvbnRTaXplOiBweFRvUmVtKDM0KSxcbiAgICAgIGZvbnRXZWlnaHQ6IGZvbnRXZWlnaHRSZWd1bGFyLFxuICAgICAgZm9udEZhbWlseTogZm9udEZhbWlseSxcbiAgICAgIGxpbmVIZWlnaHQ6IFwiXCIuY29uY2F0KHJvdW5kKDQxIC8gMzQpLCBcImVtXCIpLFxuICAgICAgY29sb3I6IHBhbGV0dGUudGV4dC5zZWNvbmRhcnlcbiAgICB9LFxuICAgIGhlYWRsaW5lOiB7XG4gICAgICBmb250U2l6ZTogcHhUb1JlbSgyNCksXG4gICAgICBmb250V2VpZ2h0OiBmb250V2VpZ2h0UmVndWxhcixcbiAgICAgIGZvbnRGYW1pbHk6IGZvbnRGYW1pbHksXG4gICAgICBsaW5lSGVpZ2h0OiBcIlwiLmNvbmNhdChyb3VuZCgzMi41IC8gMjQpLCBcImVtXCIpLFxuICAgICAgY29sb3I6IHBhbGV0dGUudGV4dC5wcmltYXJ5XG4gICAgfSxcbiAgICB0aXRsZToge1xuICAgICAgZm9udFNpemU6IHB4VG9SZW0oMjEpLFxuICAgICAgZm9udFdlaWdodDogZm9udFdlaWdodE1lZGl1bSxcbiAgICAgIGZvbnRGYW1pbHk6IGZvbnRGYW1pbHksXG4gICAgICBsaW5lSGVpZ2h0OiBcIlwiLmNvbmNhdChyb3VuZCgyNC41IC8gMjEpLCBcImVtXCIpLFxuICAgICAgY29sb3I6IHBhbGV0dGUudGV4dC5wcmltYXJ5XG4gICAgfSxcbiAgICBzdWJoZWFkaW5nOiB7XG4gICAgICBmb250U2l6ZTogcHhUb1JlbSgxNiksXG4gICAgICBmb250V2VpZ2h0OiBmb250V2VpZ2h0UmVndWxhcixcbiAgICAgIGZvbnRGYW1pbHk6IGZvbnRGYW1pbHksXG4gICAgICBsaW5lSGVpZ2h0OiBcIlwiLmNvbmNhdChyb3VuZCgyNCAvIDE2KSwgXCJlbVwiKSxcbiAgICAgIGNvbG9yOiBwYWxldHRlLnRleHQucHJpbWFyeVxuICAgIH0sXG4gICAgYm9keTI6IHtcbiAgICAgIGZvbnRTaXplOiBweFRvUmVtKDE0KSxcbiAgICAgIGZvbnRXZWlnaHQ6IGZvbnRXZWlnaHRNZWRpdW0sXG4gICAgICBmb250RmFtaWx5OiBmb250RmFtaWx5LFxuICAgICAgbGluZUhlaWdodDogXCJcIi5jb25jYXQocm91bmQoMjQgLyAxNCksIFwiZW1cIiksXG4gICAgICBjb2xvcjogcGFsZXR0ZS50ZXh0LnByaW1hcnlcbiAgICB9LFxuICAgIGJvZHkxOiB7XG4gICAgICBmb250U2l6ZTogcHhUb1JlbSgxNCksXG4gICAgICBmb250V2VpZ2h0OiBmb250V2VpZ2h0UmVndWxhcixcbiAgICAgIGZvbnRGYW1pbHk6IGZvbnRGYW1pbHksXG4gICAgICBsaW5lSGVpZ2h0OiBcIlwiLmNvbmNhdChyb3VuZCgyMC41IC8gMTQpLCBcImVtXCIpLFxuICAgICAgY29sb3I6IHBhbGV0dGUudGV4dC5wcmltYXJ5XG4gICAgfSxcbiAgICBjYXB0aW9uOiB7XG4gICAgICBmb250U2l6ZTogcHhUb1JlbSgxMiksXG4gICAgICBmb250V2VpZ2h0OiBmb250V2VpZ2h0UmVndWxhcixcbiAgICAgIGZvbnRGYW1pbHk6IGZvbnRGYW1pbHksXG4gICAgICBsaW5lSGVpZ2h0OiBcIlwiLmNvbmNhdChyb3VuZCgxNi41IC8gMTIpLCBcImVtXCIpLFxuICAgICAgY29sb3I6IHBhbGV0dGUudGV4dC5zZWNvbmRhcnlcbiAgICB9LFxuICAgIGJ1dHRvbjoge1xuICAgICAgZm9udFNpemU6IHB4VG9SZW0oMTQpLFxuICAgICAgdGV4dFRyYW5zZm9ybTogJ3VwcGVyY2FzZScsXG4gICAgICBmb250V2VpZ2h0OiBmb250V2VpZ2h0TWVkaXVtLFxuICAgICAgZm9udEZhbWlseTogZm9udEZhbWlseSxcbiAgICAgIGNvbG9yOiBwYWxldHRlLnRleHQucHJpbWFyeVxuICAgIH1cbiAgfSwgb3RoZXIsIHtcbiAgICBjbG9uZTogZmFsc2UgLy8gTm8gbmVlZCB0byBjbG9uZSBkZWVwXG5cbiAgfSk7XG59IiwiZnVuY3Rpb24gY3JlYXRlQnJvYWRjYXN0IChpbml0aWFsU3RhdGUpIHtcbiAgdmFyIGxpc3RlbmVycyA9IHt9O1xuICB2YXIgaWQgPSAxO1xuICB2YXIgX3N0YXRlID0gaW5pdGlhbFN0YXRlO1xuXG4gIGZ1bmN0aW9uIGdldFN0YXRlICgpIHtcbiAgICByZXR1cm4gX3N0YXRlXG4gIH1cblxuICBmdW5jdGlvbiBzZXRTdGF0ZSAoc3RhdGUpIHtcbiAgICBfc3RhdGUgPSBzdGF0ZTtcbiAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGxpc3RlbmVycyk7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBsZW4gPSBrZXlzLmxlbmd0aDtcbiAgICBmb3IgKDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAvLyBpZiBhIGxpc3RlbmVyIGdldHMgdW5zdWJzY3JpYmVkIGR1cmluZyBzZXRTdGF0ZSB3ZSBqdXN0IHNraXAgaXRcbiAgICAgIGlmIChsaXN0ZW5lcnNba2V5c1tpXV0pIHsgbGlzdGVuZXJzW2tleXNbaV1dKHN0YXRlKTsgfVxuICAgIH1cbiAgfVxuXG4gIC8vIHN1YnNjcmliZSB0byBjaGFuZ2VzIGFuZCByZXR1cm4gdGhlIHN1YnNjcmlwdGlvbklkXG4gIGZ1bmN0aW9uIHN1YnNjcmliZSAobGlzdGVuZXIpIHtcbiAgICBpZiAodHlwZW9mIGxpc3RlbmVyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2xpc3RlbmVyIG11c3QgYmUgYSBmdW5jdGlvbi4nKVxuICAgIH1cbiAgICB2YXIgY3VycmVudElkID0gaWQ7XG4gICAgbGlzdGVuZXJzW2N1cnJlbnRJZF0gPSBsaXN0ZW5lcjtcbiAgICBpZCArPSAxO1xuICAgIHJldHVybiBjdXJyZW50SWRcbiAgfVxuXG4gIC8vIHJlbW92ZSBzdWJzY3JpcHRpb24gYnkgcmVtb3ZpbmcgdGhlIGxpc3RlbmVyIGZ1bmN0aW9uXG4gIGZ1bmN0aW9uIHVuc3Vic2NyaWJlIChpZCkge1xuICAgIGxpc3RlbmVyc1tpZF0gPSB1bmRlZmluZWQ7XG4gIH1cblxuICByZXR1cm4geyBnZXRTdGF0ZTogZ2V0U3RhdGUsIHNldFN0YXRlOiBzZXRTdGF0ZSwgc3Vic2NyaWJlOiBzdWJzY3JpYmUsIHVuc3Vic2NyaWJlOiB1bnN1YnNjcmliZSB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUJyb2FkY2FzdDtcbiIsImZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7XG4gICAgby5fX3Byb3RvX18gPSBwO1xuICAgIHJldHVybiBvO1xuICB9O1xuXG4gIHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX3NldFByb3RvdHlwZU9mOyIsIihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gIGlmICh0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkge1xuICAgIGRlZmluZShbJ2V4cG9ydHMnLCAncmVhY3QnLCAncHJvcC10eXBlcycsICcuLi9saWIvYXJlUGF0aHNFcXVhbCcsICcuLi9saWIvU3RyaW5nJ10sIGZhY3RvcnkpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBleHBvcnRzICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgZmFjdG9yeShleHBvcnRzLCByZXF1aXJlKCdyZWFjdCcpLCByZXF1aXJlKCdwcm9wLXR5cGVzJyksIHJlcXVpcmUoJy4uL2xpYi9hcmVQYXRoc0VxdWFsJyksIHJlcXVpcmUoJy4uL2xpYi9TdHJpbmcnKSk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIG1vZCA9IHtcbiAgICAgIGV4cG9ydHM6IHt9XG4gICAgfTtcbiAgICBmYWN0b3J5KG1vZC5leHBvcnRzLCBnbG9iYWwucmVhY3QsIGdsb2JhbC5wcm9wVHlwZXMsIGdsb2JhbC5hcmVQYXRoc0VxdWFsLCBnbG9iYWwuU3RyaW5nKTtcbiAgICBnbG9iYWwuUG9seWdvbiA9IG1vZC5leHBvcnRzO1xuICB9XG59KSh0aGlzLCBmdW5jdGlvbiAoZXhwb3J0cywgX3JlYWN0LCBfcHJvcFR5cGVzLCBfYXJlUGF0aHNFcXVhbCwgX1N0cmluZykge1xuICAndXNlIHN0cmljdCc7XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbiAgfSk7XG4gIGV4cG9ydHMuUG9seWdvbiA9IHVuZGVmaW5lZDtcblxuICB2YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxuICB2YXIgX3Byb3BUeXBlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMpO1xuXG4gIGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7XG4gICAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHtcbiAgICAgIGRlZmF1bHQ6IG9ialxuICAgIH07XG4gIH1cblxuICB2YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcblxuICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9O1xuXG4gIGZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhvYmosIGtleXMpIHtcbiAgICB2YXIgdGFyZ2V0ID0ge307XG5cbiAgICBmb3IgKHZhciBpIGluIG9iaikge1xuICAgICAgaWYgKGtleXMuaW5kZXhPZihpKSA+PSAwKSBjb250aW51ZTtcbiAgICAgIGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgaSkpIGNvbnRpbnVlO1xuICAgICAgdGFyZ2V0W2ldID0gb2JqW2ldO1xuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXQ7XG4gIH1cblxuICBmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gICAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7XG4gICAgfVxuICB9XG5cbiAgdmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtcbiAgICAgICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO1xuICAgICAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7XG4gICAgICAgIGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xuICAgICAgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtcbiAgICAgIGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO1xuICAgICAgcmV0dXJuIENvbnN0cnVjdG9yO1xuICAgIH07XG4gIH0oKTtcblxuICBmdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7XG4gICAgaWYgKCFzZWxmKSB7XG4gICAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7XG4gIH1cblxuICBmdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgICBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTtcbiAgICB9XG5cbiAgICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHtcbiAgICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICAgIHZhbHVlOiBzdWJDbGFzcyxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7XG4gIH1cblxuICB2YXIgZXZ0TmFtZXMgPSBbJ2NsaWNrJywgJ21vdXNlb3V0JywgJ21vdXNlb3ZlciddO1xuXG4gIHZhciB3cmFwcGVkUHJvbWlzZSA9IGZ1bmN0aW9uIHdyYXBwZWRQcm9taXNlKCkge1xuICAgIHZhciB3cmFwcGVkUHJvbWlzZSA9IHt9LFxuICAgICAgICBwcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgd3JhcHBlZFByb21pc2UucmVzb2x2ZSA9IHJlc29sdmU7XG4gICAgICB3cmFwcGVkUHJvbWlzZS5yZWplY3QgPSByZWplY3Q7XG4gICAgfSk7XG4gICAgd3JhcHBlZFByb21pc2UudGhlbiA9IHByb21pc2UudGhlbi5iaW5kKHByb21pc2UpO1xuICAgIHdyYXBwZWRQcm9taXNlLmNhdGNoID0gcHJvbWlzZS5jYXRjaC5iaW5kKHByb21pc2UpO1xuICAgIHdyYXBwZWRQcm9taXNlLnByb21pc2UgPSBwcm9taXNlO1xuXG4gICAgcmV0dXJuIHdyYXBwZWRQcm9taXNlO1xuICB9O1xuXG4gIHZhciBQb2x5Z29uID0gZXhwb3J0cy5Qb2x5Z29uID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgICBfaW5oZXJpdHMoUG9seWdvbiwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgICBmdW5jdGlvbiBQb2x5Z29uKCkge1xuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFBvbHlnb24pO1xuXG4gICAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKFBvbHlnb24uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihQb2x5Z29uKSkuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gICAgfVxuXG4gICAgX2NyZWF0ZUNsYXNzKFBvbHlnb24sIFt7XG4gICAgICBrZXk6ICdjb21wb25lbnREaWRNb3VudCcsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICAgIHRoaXMucG9seWdvblByb21pc2UgPSB3cmFwcGVkUHJvbWlzZSgpO1xuICAgICAgICB0aGlzLnJlbmRlclBvbHlnb24oKTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6ICdjb21wb25lbnREaWRVcGRhdGUnLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMpIHtcbiAgICAgICAgaWYgKHRoaXMucHJvcHMubWFwICE9PSBwcmV2UHJvcHMubWFwIHx8ICEoMCwgX2FyZVBhdGhzRXF1YWwuYXJlUGF0aHNFcXVhbCkodGhpcy5wcm9wcy5wYXRocywgcHJldlByb3BzLnBhdGhzKSkge1xuICAgICAgICAgIGlmICh0aGlzLnBvbHlnb24pIHtcbiAgICAgICAgICAgIHRoaXMucG9seWdvbi5zZXRNYXAobnVsbCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMucmVuZGVyUG9seWdvbigpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiAnY29tcG9uZW50V2lsbFVubW91bnQnLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgICBpZiAodGhpcy5wb2x5Z29uKSB7XG4gICAgICAgICAgdGhpcy5wb2x5Z29uLnNldE1hcChudWxsKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogJ3JlbmRlclBvbHlnb24nLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlclBvbHlnb24oKSB7XG4gICAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgICAgbWFwID0gX3Byb3BzLm1hcCxcbiAgICAgICAgICAgIGdvb2dsZSA9IF9wcm9wcy5nb29nbGUsXG4gICAgICAgICAgICBwYXRocyA9IF9wcm9wcy5wYXRocyxcbiAgICAgICAgICAgIHN0cm9rZUNvbG9yID0gX3Byb3BzLnN0cm9rZUNvbG9yLFxuICAgICAgICAgICAgc3Ryb2tlT3BhY2l0eSA9IF9wcm9wcy5zdHJva2VPcGFjaXR5LFxuICAgICAgICAgICAgc3Ryb2tlV2VpZ2h0ID0gX3Byb3BzLnN0cm9rZVdlaWdodCxcbiAgICAgICAgICAgIGZpbGxDb2xvciA9IF9wcm9wcy5maWxsQ29sb3IsXG4gICAgICAgICAgICBmaWxsT3BhY2l0eSA9IF9wcm9wcy5maWxsT3BhY2l0eSxcbiAgICAgICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9wcm9wcywgWydtYXAnLCAnZ29vZ2xlJywgJ3BhdGhzJywgJ3N0cm9rZUNvbG9yJywgJ3N0cm9rZU9wYWNpdHknLCAnc3Ryb2tlV2VpZ2h0JywgJ2ZpbGxDb2xvcicsICdmaWxsT3BhY2l0eSddKTtcblxuICAgICAgICBpZiAoIWdvb2dsZSkge1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHBhcmFtcyA9IF9leHRlbmRzKHtcbiAgICAgICAgICBtYXA6IG1hcCxcbiAgICAgICAgICBwYXRoczogcGF0aHMsXG4gICAgICAgICAgc3Ryb2tlQ29sb3I6IHN0cm9rZUNvbG9yLFxuICAgICAgICAgIHN0cm9rZU9wYWNpdHk6IHN0cm9rZU9wYWNpdHksXG4gICAgICAgICAgc3Ryb2tlV2VpZ2h0OiBzdHJva2VXZWlnaHQsXG4gICAgICAgICAgZmlsbENvbG9yOiBmaWxsQ29sb3IsXG4gICAgICAgICAgZmlsbE9wYWNpdHk6IGZpbGxPcGFjaXR5XG4gICAgICAgIH0sIHByb3BzKTtcblxuICAgICAgICB0aGlzLnBvbHlnb24gPSBuZXcgZ29vZ2xlLm1hcHMuUG9seWdvbihwYXJhbXMpO1xuXG4gICAgICAgIGV2dE5hbWVzLmZvckVhY2goZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICBfdGhpczIucG9seWdvbi5hZGRMaXN0ZW5lcihlLCBfdGhpczIuaGFuZGxlRXZlbnQoZSkpO1xuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLnBvbHlnb25Qcm9taXNlLnJlc29sdmUodGhpcy5wb2x5Z29uKTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6ICdnZXRQb2x5Z29uJyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRQb2x5Z29uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wb2x5Z29uUHJvbWlzZTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6ICdoYW5kbGVFdmVudCcsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gaGFuZGxlRXZlbnQoZXZ0KSB7XG4gICAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgIHZhciBldnROYW1lID0gJ29uJyArICgwLCBfU3RyaW5nLmNhbWVsaXplKShldnQpO1xuICAgICAgICAgIGlmIChfdGhpczMucHJvcHNbZXZ0TmFtZV0pIHtcbiAgICAgICAgICAgIF90aGlzMy5wcm9wc1tldnROYW1lXShfdGhpczMucHJvcHMsIF90aGlzMy5wb2x5Z29uLCBlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiAncmVuZGVyJyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBQb2x5Z29uO1xuICB9KF9yZWFjdDIuZGVmYXVsdC5Db21wb25lbnQpO1xuXG4gIFBvbHlnb24ucHJvcFR5cGVzID0ge1xuICAgIHBhdGhzOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmFycmF5LFxuICAgIHN0cm9rZUNvbG9yOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZyxcbiAgICBzdHJva2VPcGFjaXR5OiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm51bWJlcixcbiAgICBzdHJva2VXZWlnaHQ6IF9wcm9wVHlwZXMyLmRlZmF1bHQubnVtYmVyLFxuICAgIGZpbGxDb2xvcjogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsXG4gICAgZmlsbE9wYWNpdHk6IF9wcm9wVHlwZXMyLmRlZmF1bHQubnVtYmVyXG4gIH07XG5cbiAgZXZ0TmFtZXMuZm9yRWFjaChmdW5jdGlvbiAoZSkge1xuICAgIHJldHVybiBQb2x5Z29uLnByb3BUeXBlc1tlXSA9IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYztcbiAgfSk7XG5cbiAgUG9seWdvbi5kZWZhdWx0UHJvcHMgPSB7XG4gICAgbmFtZTogJ1BvbHlnb24nXG4gIH07XG5cbiAgZXhwb3J0cy5kZWZhdWx0ID0gUG9seWdvbjtcbn0pOyIsIihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gIGlmICh0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkge1xuICAgIGRlZmluZShbJ2V4cG9ydHMnLCAncmVhY3QnLCAncHJvcC10eXBlcycsICcuLi9saWIvYXJlUGF0aHNFcXVhbCcsICcuLi9saWIvU3RyaW5nJ10sIGZhY3RvcnkpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBleHBvcnRzICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgZmFjdG9yeShleHBvcnRzLCByZXF1aXJlKCdyZWFjdCcpLCByZXF1aXJlKCdwcm9wLXR5cGVzJyksIHJlcXVpcmUoJy4uL2xpYi9hcmVQYXRoc0VxdWFsJyksIHJlcXVpcmUoJy4uL2xpYi9TdHJpbmcnKSk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIG1vZCA9IHtcbiAgICAgIGV4cG9ydHM6IHt9XG4gICAgfTtcbiAgICBmYWN0b3J5KG1vZC5leHBvcnRzLCBnbG9iYWwucmVhY3QsIGdsb2JhbC5wcm9wVHlwZXMsIGdsb2JhbC5hcmVQYXRoc0VxdWFsLCBnbG9iYWwuU3RyaW5nKTtcbiAgICBnbG9iYWwuUG9seWxpbmUgPSBtb2QuZXhwb3J0cztcbiAgfVxufSkodGhpcywgZnVuY3Rpb24gKGV4cG9ydHMsIF9yZWFjdCwgX3Byb3BUeXBlcywgX2FyZVBhdGhzRXF1YWwsIF9TdHJpbmcpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG4gIH0pO1xuICBleHBvcnRzLlBvbHlsaW5lID0gdW5kZWZpbmVkO1xuXG4gIHZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG4gIHZhciBfcHJvcFR5cGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb3BUeXBlcyk7XG5cbiAgZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHtcbiAgICByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDoge1xuICAgICAgZGVmYXVsdDogb2JqXG4gICAgfTtcbiAgfVxuXG4gIHZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuXG4gICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXQ7XG4gIH07XG5cbiAgZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9iaiwga2V5cykge1xuICAgIHZhciB0YXJnZXQgPSB7fTtcblxuICAgIGZvciAodmFyIGkgaW4gb2JqKSB7XG4gICAgICBpZiAoa2V5cy5pbmRleE9mKGkpID49IDApIGNvbnRpbnVlO1xuICAgICAgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBpKSkgY29udGludWU7XG4gICAgICB0YXJnZXRbaV0gPSBvYmpbaV07XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtcbiAgICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgICB9XG4gIH1cblxuICB2YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuICAgICAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG4gICAgICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcbiAgICAgICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gICAgICBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpO1xuICAgICAgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7XG4gICAgICByZXR1cm4gQ29uc3RydWN0b3I7XG4gICAgfTtcbiAgfSgpO1xuXG4gIGZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHtcbiAgICBpZiAoIXNlbGYpIHtcbiAgICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICAgIGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpO1xuICAgIH1cblxuICAgIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwge1xuICAgICAgY29uc3RydWN0b3I6IHtcbiAgICAgICAgdmFsdWU6IHN1YkNsYXNzLFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgfVxuICAgIH0pO1xuICAgIGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzcztcbiAgfVxuXG4gIHZhciBldnROYW1lcyA9IFsnY2xpY2snLCAnbW91c2VvdXQnLCAnbW91c2VvdmVyJ107XG5cbiAgdmFyIHdyYXBwZWRQcm9taXNlID0gZnVuY3Rpb24gd3JhcHBlZFByb21pc2UoKSB7XG4gICAgdmFyIHdyYXBwZWRQcm9taXNlID0ge30sXG4gICAgICAgIHByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICB3cmFwcGVkUHJvbWlzZS5yZXNvbHZlID0gcmVzb2x2ZTtcbiAgICAgIHdyYXBwZWRQcm9taXNlLnJlamVjdCA9IHJlamVjdDtcbiAgICB9KTtcbiAgICB3cmFwcGVkUHJvbWlzZS50aGVuID0gcHJvbWlzZS50aGVuLmJpbmQocHJvbWlzZSk7XG4gICAgd3JhcHBlZFByb21pc2UuY2F0Y2ggPSBwcm9taXNlLmNhdGNoLmJpbmQocHJvbWlzZSk7XG4gICAgd3JhcHBlZFByb21pc2UucHJvbWlzZSA9IHByb21pc2U7XG5cbiAgICByZXR1cm4gd3JhcHBlZFByb21pc2U7XG4gIH07XG5cbiAgdmFyIFBvbHlsaW5lID0gZXhwb3J0cy5Qb2x5bGluZSA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gICAgX2luaGVyaXRzKFBvbHlsaW5lLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICAgIGZ1bmN0aW9uIFBvbHlsaW5lKCkge1xuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFBvbHlsaW5lKTtcblxuICAgICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChQb2x5bGluZS5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKFBvbHlsaW5lKSkuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gICAgfVxuXG4gICAgX2NyZWF0ZUNsYXNzKFBvbHlsaW5lLCBbe1xuICAgICAga2V5OiAnY29tcG9uZW50RGlkTW91bnQnLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgICB0aGlzLnBvbHlsaW5lUHJvbWlzZSA9IHdyYXBwZWRQcm9taXNlKCk7XG4gICAgICAgIHRoaXMucmVuZGVyUG9seWxpbmUoKTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6ICdjb21wb25lbnREaWRVcGRhdGUnLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMpIHtcbiAgICAgICAgaWYgKHRoaXMucHJvcHMubWFwICE9PSBwcmV2UHJvcHMubWFwIHx8ICEoMCwgX2FyZVBhdGhzRXF1YWwuYXJlUGF0aHNFcXVhbCkodGhpcy5wcm9wcy5wYXRoLCBwcmV2UHJvcHMucGF0aCkpIHtcbiAgICAgICAgICBpZiAodGhpcy5wb2x5bGluZSkge1xuICAgICAgICAgICAgdGhpcy5wb2x5bGluZS5zZXRNYXAobnVsbCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMucmVuZGVyUG9seWxpbmUoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogJ2NvbXBvbmVudFdpbGxVbm1vdW50JyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgICAgaWYgKHRoaXMucG9seWxpbmUpIHtcbiAgICAgICAgICB0aGlzLnBvbHlsaW5lLnNldE1hcChudWxsKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogJ3JlbmRlclBvbHlsaW5lJyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXJQb2x5bGluZSgpIHtcbiAgICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgICBtYXAgPSBfcHJvcHMubWFwLFxuICAgICAgICAgICAgZ29vZ2xlID0gX3Byb3BzLmdvb2dsZSxcbiAgICAgICAgICAgIHBhdGggPSBfcHJvcHMucGF0aCxcbiAgICAgICAgICAgIHN0cm9rZUNvbG9yID0gX3Byb3BzLnN0cm9rZUNvbG9yLFxuICAgICAgICAgICAgc3Ryb2tlT3BhY2l0eSA9IF9wcm9wcy5zdHJva2VPcGFjaXR5LFxuICAgICAgICAgICAgc3Ryb2tlV2VpZ2h0ID0gX3Byb3BzLnN0cm9rZVdlaWdodCxcbiAgICAgICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9wcm9wcywgWydtYXAnLCAnZ29vZ2xlJywgJ3BhdGgnLCAnc3Ryb2tlQ29sb3InLCAnc3Ryb2tlT3BhY2l0eScsICdzdHJva2VXZWlnaHQnXSk7XG5cbiAgICAgICAgaWYgKCFnb29nbGUpIHtcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBwYXJhbXMgPSBfZXh0ZW5kcyh7XG4gICAgICAgICAgbWFwOiBtYXAsXG4gICAgICAgICAgcGF0aDogcGF0aCxcbiAgICAgICAgICBzdHJva2VDb2xvcjogc3Ryb2tlQ29sb3IsXG4gICAgICAgICAgc3Ryb2tlT3BhY2l0eTogc3Ryb2tlT3BhY2l0eSxcbiAgICAgICAgICBzdHJva2VXZWlnaHQ6IHN0cm9rZVdlaWdodFxuICAgICAgICB9LCBwcm9wcyk7XG5cbiAgICAgICAgdGhpcy5wb2x5bGluZSA9IG5ldyBnb29nbGUubWFwcy5Qb2x5bGluZShwYXJhbXMpO1xuXG4gICAgICAgIGV2dE5hbWVzLmZvckVhY2goZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICBfdGhpczIucG9seWxpbmUuYWRkTGlzdGVuZXIoZSwgX3RoaXMyLmhhbmRsZUV2ZW50KGUpKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5wb2x5bGluZVByb21pc2UucmVzb2x2ZSh0aGlzLnBvbHlsaW5lKTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6ICdnZXRQb2x5bGluZScsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0UG9seWxpbmUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnBvbHlsaW5lUHJvbWlzZTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6ICdoYW5kbGVFdmVudCcsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gaGFuZGxlRXZlbnQoZXZ0KSB7XG4gICAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgIHZhciBldnROYW1lID0gJ29uJyArICgwLCBfU3RyaW5nLmNhbWVsaXplKShldnQpO1xuICAgICAgICAgIGlmIChfdGhpczMucHJvcHNbZXZ0TmFtZV0pIHtcbiAgICAgICAgICAgIF90aGlzMy5wcm9wc1tldnROYW1lXShfdGhpczMucHJvcHMsIF90aGlzMy5wb2x5bGluZSwgZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogJ3JlbmRlcicsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gUG9seWxpbmU7XG4gIH0oX3JlYWN0Mi5kZWZhdWx0LkNvbXBvbmVudCk7XG5cbiAgUG9seWxpbmUucHJvcFR5cGVzID0ge1xuICAgIHBhdGg6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYXJyYXksXG4gICAgc3Ryb2tlQ29sb3I6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICAgIHN0cm9rZU9wYWNpdHk6IF9wcm9wVHlwZXMyLmRlZmF1bHQubnVtYmVyLFxuICAgIHN0cm9rZVdlaWdodDogX3Byb3BUeXBlczIuZGVmYXVsdC5udW1iZXJcbiAgfTtcblxuICBldnROYW1lcy5mb3JFYWNoKGZ1bmN0aW9uIChlKSB7XG4gICAgcmV0dXJuIFBvbHlsaW5lLnByb3BUeXBlc1tlXSA9IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYztcbiAgfSk7XG5cbiAgUG9seWxpbmUuZGVmYXVsdFByb3BzID0ge1xuICAgIG5hbWU6ICdQb2x5bGluZSdcbiAgfTtcblxuICBleHBvcnRzLmRlZmF1bHQgPSBQb2x5bGluZTtcbn0pOyIsIihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gIGlmICh0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkge1xuICAgIGRlZmluZShbXCJleHBvcnRzXCJdLCBmYWN0b3J5KTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgZXhwb3J0cyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGZhY3RvcnkoZXhwb3J0cyk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIG1vZCA9IHtcbiAgICAgIGV4cG9ydHM6IHt9XG4gICAgfTtcbiAgICBmYWN0b3J5KG1vZC5leHBvcnRzKTtcbiAgICBnbG9iYWwuY2FuY2VsYWJsZVByb21pc2UgPSBtb2QuZXhwb3J0cztcbiAgfVxufSkodGhpcywgZnVuY3Rpb24gKGV4cG9ydHMpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbiAgfSk7XG4gIC8vIGh0dHBzOi8vZmFjZWJvb2suZ2l0aHViLmlvL3JlYWN0L2Jsb2cvMjAxNS8xMi8xNi9pc21vdW50ZWQtYW50aXBhdHRlcm4uaHRtbFxuXG4gIHZhciBtYWtlQ2FuY2VsYWJsZSA9IGV4cG9ydHMubWFrZUNhbmNlbGFibGUgPSBmdW5jdGlvbiBtYWtlQ2FuY2VsYWJsZShwcm9taXNlKSB7XG4gICAgdmFyIGhhc0NhbmNlbGVkXyA9IGZhbHNlO1xuXG4gICAgdmFyIHdyYXBwZWRQcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgcHJvbWlzZS50aGVuKGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgICAgcmV0dXJuIGhhc0NhbmNlbGVkXyA/IHJlamVjdCh7IGlzQ2FuY2VsZWQ6IHRydWUgfSkgOiByZXNvbHZlKHZhbCk7XG4gICAgICB9KTtcbiAgICAgIHByb21pc2UuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgIHJldHVybiBoYXNDYW5jZWxlZF8gPyByZWplY3QoeyBpc0NhbmNlbGVkOiB0cnVlIH0pIDogcmVqZWN0KGVycm9yKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIHByb21pc2U6IHdyYXBwZWRQcm9taXNlLFxuICAgICAgY2FuY2VsOiBmdW5jdGlvbiBjYW5jZWwoKSB7XG4gICAgICAgIGhhc0NhbmNlbGVkXyA9IHRydWU7XG4gICAgICB9XG4gICAgfTtcbiAgfTtcbn0pOyIsIihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gIGlmICh0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkge1xuICAgIGRlZmluZShbJ2V4cG9ydHMnLCAncmVhY3QnLCAncHJvcC10eXBlcycsICcuLi9saWIvU3RyaW5nJ10sIGZhY3RvcnkpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBleHBvcnRzICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgZmFjdG9yeShleHBvcnRzLCByZXF1aXJlKCdyZWFjdCcpLCByZXF1aXJlKCdwcm9wLXR5cGVzJyksIHJlcXVpcmUoJy4uL2xpYi9TdHJpbmcnKSk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIG1vZCA9IHtcbiAgICAgIGV4cG9ydHM6IHt9XG4gICAgfTtcbiAgICBmYWN0b3J5KG1vZC5leHBvcnRzLCBnbG9iYWwucmVhY3QsIGdsb2JhbC5wcm9wVHlwZXMsIGdsb2JhbC5TdHJpbmcpO1xuICAgIGdsb2JhbC5IZWF0TWFwID0gbW9kLmV4cG9ydHM7XG4gIH1cbn0pKHRoaXMsIGZ1bmN0aW9uIChleHBvcnRzLCBfcmVhY3QsIF9wcm9wVHlwZXMsIF9TdHJpbmcpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG4gIH0pO1xuICBleHBvcnRzLkhlYXRNYXAgPSB1bmRlZmluZWQ7XG5cbiAgdmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbiAgdmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblxuICBmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikge1xuICAgIHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7XG4gICAgICBkZWZhdWx0OiBvYmpcbiAgICB9O1xuICB9XG5cbiAgdmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfTtcblxuICBmdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob2JqLCBrZXlzKSB7XG4gICAgdmFyIHRhcmdldCA9IHt9O1xuXG4gICAgZm9yICh2YXIgaSBpbiBvYmopIHtcbiAgICAgIGlmIChrZXlzLmluZGV4T2YoaSkgPj0gMCkgY29udGludWU7XG4gICAgICBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGkpKSBjb250aW51ZTtcbiAgICAgIHRhcmdldFtpXSA9IG9ialtpXTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9XG5cbiAgZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikge1xuICAgIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07XG4gICAgICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTtcbiAgICAgICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgICAgICBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgICAgIGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gICAgICBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtcbiAgICAgIHJldHVybiBDb25zdHJ1Y3RvcjtcbiAgICB9O1xuICB9KCk7XG5cbiAgZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkge1xuICAgIGlmICghc2VsZikge1xuICAgICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO1xuICAgIH1cblxuICAgIHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmO1xuICB9XG5cbiAgZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gICAgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7XG4gICAgfVxuXG4gICAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7XG4gICAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgICB2YWx1ZTogc3ViQ2xhc3MsXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICB9XG4gICAgfSk7XG4gICAgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzO1xuICB9XG5cbiAgdmFyIGV2dE5hbWVzID0gWydjbGljaycsICdtb3VzZW92ZXInLCAncmVjZW50ZXInXTtcblxuICB2YXIgd3JhcHBlZFByb21pc2UgPSBmdW5jdGlvbiB3cmFwcGVkUHJvbWlzZSgpIHtcbiAgICB2YXIgd3JhcHBlZFByb21pc2UgPSB7fSxcbiAgICAgICAgcHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHdyYXBwZWRQcm9taXNlLnJlc29sdmUgPSByZXNvbHZlO1xuICAgICAgd3JhcHBlZFByb21pc2UucmVqZWN0ID0gcmVqZWN0O1xuICAgIH0pO1xuICAgIHdyYXBwZWRQcm9taXNlLnRoZW4gPSBwcm9taXNlLnRoZW4uYmluZChwcm9taXNlKTtcbiAgICB3cmFwcGVkUHJvbWlzZS5jYXRjaCA9IHByb21pc2UuY2F0Y2guYmluZChwcm9taXNlKTtcbiAgICB3cmFwcGVkUHJvbWlzZS5wcm9taXNlID0gcHJvbWlzZTtcblxuICAgIHJldHVybiB3cmFwcGVkUHJvbWlzZTtcbiAgfTtcblxuICB2YXIgSGVhdE1hcCA9IGV4cG9ydHMuSGVhdE1hcCA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gICAgX2luaGVyaXRzKEhlYXRNYXAsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gICAgZnVuY3Rpb24gSGVhdE1hcCgpIHtcbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBIZWF0TWFwKTtcblxuICAgICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChIZWF0TWFwLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoSGVhdE1hcCkpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICAgIH1cblxuICAgIF9jcmVhdGVDbGFzcyhIZWF0TWFwLCBbe1xuICAgICAga2V5OiAnY29tcG9uZW50RGlkTW91bnQnLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgICB0aGlzLmhlYXRNYXBQcm9taXNlID0gd3JhcHBlZFByb21pc2UoKTtcbiAgICAgICAgdGhpcy5yZW5kZXJIZWF0TWFwKCk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiAnY29tcG9uZW50RGlkVXBkYXRlJyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzKSB7XG4gICAgICAgIGlmICh0aGlzLnByb3BzLm1hcCAhPT0gcHJldlByb3BzLm1hcCB8fCB0aGlzLnByb3BzLnBvc2l0aW9uICE9PSBwcmV2UHJvcHMucG9zaXRpb24pIHtcbiAgICAgICAgICBpZiAodGhpcy5oZWF0TWFwKSB7XG4gICAgICAgICAgICB0aGlzLmhlYXRNYXAuc2V0TWFwKG51bGwpO1xuICAgICAgICAgICAgdGhpcy5yZW5kZXJIZWF0TWFwKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiAnY29tcG9uZW50V2lsbFVubW91bnQnLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgICBpZiAodGhpcy5oZWF0TWFwKSB7XG4gICAgICAgICAgdGhpcy5oZWF0TWFwLnNldE1hcChudWxsKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogJ3JlbmRlckhlYXRNYXAnLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlckhlYXRNYXAoKSB7XG4gICAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgICAgbWFwID0gX3Byb3BzLm1hcCxcbiAgICAgICAgICAgIGdvb2dsZSA9IF9wcm9wcy5nb29nbGUsXG4gICAgICAgICAgICBwb3NpdGlvbnMgPSBfcHJvcHMucG9zaXRpb25zLFxuICAgICAgICAgICAgbWFwQ2VudGVyID0gX3Byb3BzLm1hcENlbnRlcixcbiAgICAgICAgICAgIGljb24gPSBfcHJvcHMuaWNvbixcbiAgICAgICAgICAgIGdyYWRpZW50ID0gX3Byb3BzLmdyYWRpZW50LFxuICAgICAgICAgICAgX3Byb3BzJHJhZGl1cyA9IF9wcm9wcy5yYWRpdXMsXG4gICAgICAgICAgICByYWRpdXMgPSBfcHJvcHMkcmFkaXVzID09PSB1bmRlZmluZWQgPyAyMCA6IF9wcm9wcyRyYWRpdXMsXG4gICAgICAgICAgICBfcHJvcHMkb3BhY2l0eSA9IF9wcm9wcy5vcGFjaXR5LFxuICAgICAgICAgICAgb3BhY2l0eSA9IF9wcm9wcyRvcGFjaXR5ID09PSB1bmRlZmluZWQgPyAwLjIgOiBfcHJvcHMkb3BhY2l0eSxcbiAgICAgICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9wcm9wcywgWydtYXAnLCAnZ29vZ2xlJywgJ3Bvc2l0aW9ucycsICdtYXBDZW50ZXInLCAnaWNvbicsICdncmFkaWVudCcsICdyYWRpdXMnLCAnb3BhY2l0eSddKTtcblxuICAgICAgICBpZiAoIWdvb2dsZSkge1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGRhdGEgPSBwb3NpdGlvbnMubWFwKGZ1bmN0aW9uIChwb3MpIHtcbiAgICAgICAgICByZXR1cm4gbmV3IGdvb2dsZS5tYXBzLkxhdExuZyhwb3MubGF0LCBwb3MubG5nKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdmFyIHByZWYgPSBfZXh0ZW5kcyh7XG4gICAgICAgICAgbWFwOiBtYXAsXG4gICAgICAgICAgZ3JhZGllbnQ6IGdyYWRpZW50LFxuICAgICAgICAgIHJhZGl1czogcmFkaXVzLFxuICAgICAgICAgIG9wYWNpdHk6IG9wYWNpdHksXG4gICAgICAgICAgZGF0YTogZGF0YVxuICAgICAgICB9LCBwcm9wcyk7XG5cbiAgICAgICAgdGhpcy5oZWF0TWFwID0gbmV3IGdvb2dsZS5tYXBzLnZpc3VhbGl6YXRpb24uSGVhdG1hcExheWVyKHByZWYpO1xuXG4gICAgICAgIHRoaXMuaGVhdE1hcC5zZXQoJ3JhZGl1cycsIHJhZGl1cyA9PT0gdW5kZWZpbmVkID8gMjAgOiByYWRpdXMpO1xuXG4gICAgICAgIHRoaXMuaGVhdE1hcC5zZXQoJ29wYWNpdHknLCBvcGFjaXR5ID09PSB1bmRlZmluZWQgPyAwLjIgOiBvcGFjaXR5KTtcblxuICAgICAgICBldnROYW1lcy5mb3JFYWNoKGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgX3RoaXMyLmhlYXRNYXAuYWRkTGlzdGVuZXIoZSwgX3RoaXMyLmhhbmRsZUV2ZW50KGUpKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5oZWF0TWFwUHJvbWlzZS5yZXNvbHZlKHRoaXMuaGVhdE1hcCk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiAnZ2V0SGVhdE1hcCcsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0SGVhdE1hcCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaGVhdE1hcFByb21pc2U7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiAnaGFuZGxlRXZlbnQnLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGhhbmRsZUV2ZW50KGV2dCkge1xuICAgICAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICB2YXIgZXZ0TmFtZSA9ICdvbicgKyAoMCwgX1N0cmluZy5jYW1lbGl6ZSkoZXZ0KTtcbiAgICAgICAgICBpZiAoX3RoaXMzLnByb3BzW2V2dE5hbWVdKSB7XG4gICAgICAgICAgICBfdGhpczMucHJvcHNbZXZ0TmFtZV0oX3RoaXMzLnByb3BzLCBfdGhpczMuaGVhdE1hcCwgZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogJ3JlbmRlcicsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gSGVhdE1hcDtcbiAgfShfcmVhY3QyLmRlZmF1bHQuQ29tcG9uZW50KTtcblxuICBIZWF0TWFwLnByb3BUeXBlcyA9IHtcbiAgICBwb3NpdGlvbjogX3Byb3BUeXBlczIuZGVmYXVsdC5vYmplY3QsXG4gICAgbWFwOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9iamVjdCxcbiAgICBpY29uOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZ1xuICB9O1xuXG4gIGV2dE5hbWVzLmZvckVhY2goZnVuY3Rpb24gKGUpIHtcbiAgICByZXR1cm4gSGVhdE1hcC5wcm9wVHlwZXNbZV0gPSBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmM7XG4gIH0pO1xuXG4gIEhlYXRNYXAuZGVmYXVsdFByb3BzID0ge1xuICAgIG5hbWU6ICdIZWF0TWFwJ1xuICB9O1xuXG4gIGV4cG9ydHMuZGVmYXVsdCA9IEhlYXRNYXA7XG59KTsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFxuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogTWVtb2l6ZXMgdGhlIHJldHVybiB2YWx1ZSBvZiBhIGZ1bmN0aW9uIHRoYXQgYWNjZXB0cyBvbmUgc3RyaW5nIGFyZ3VtZW50LlxuICovXG5cbmZ1bmN0aW9uIG1lbW9pemVTdHJpbmdPbmx5KGNhbGxiYWNrKSB7XG4gIHZhciBjYWNoZSA9IHt9O1xuICByZXR1cm4gZnVuY3Rpb24gKHN0cmluZykge1xuICAgIGlmICghY2FjaGUuaGFzT3duUHJvcGVydHkoc3RyaW5nKSkge1xuICAgICAgY2FjaGVbc3RyaW5nXSA9IGNhbGxiYWNrLmNhbGwodGhpcywgc3RyaW5nKTtcbiAgICB9XG4gICAgcmV0dXJuIGNhY2hlW3N0cmluZ107XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbWVtb2l6ZVN0cmluZ09ubHk7IiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEB0eXBlY2hlY2tzXG4gKi9cblxudmFyIF91cHBlcmNhc2VQYXR0ZXJuID0gLyhbQS1aXSkvZztcblxuLyoqXG4gKiBIeXBoZW5hdGVzIGEgY2FtZWxjYXNlZCBzdHJpbmcsIGZvciBleGFtcGxlOlxuICpcbiAqICAgPiBoeXBoZW5hdGUoJ2JhY2tncm91bmRDb2xvcicpXG4gKiAgIDwgXCJiYWNrZ3JvdW5kLWNvbG9yXCJcbiAqXG4gKiBGb3IgQ1NTIHN0eWxlIG5hbWVzLCB1c2UgYGh5cGhlbmF0ZVN0eWxlTmFtZWAgaW5zdGVhZCB3aGljaCB3b3JrcyBwcm9wZXJseVxuICogd2l0aCBhbGwgdmVuZG9yIHByZWZpeGVzLCBpbmNsdWRpbmcgYG1zYC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGh5cGhlbmF0ZShzdHJpbmcpIHtcbiAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKF91cHBlcmNhc2VQYXR0ZXJuLCAnLSQxJykudG9Mb3dlckNhc2UoKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBoeXBoZW5hdGU7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAdHlwZWNoZWNrc1xuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGh5cGhlbmF0ZSA9IHJlcXVpcmUoJy4vaHlwaGVuYXRlJyk7XG5cbnZhciBtc1BhdHRlcm4gPSAvXm1zLS87XG5cbi8qKlxuICogSHlwaGVuYXRlcyBhIGNhbWVsY2FzZWQgQ1NTIHByb3BlcnR5IG5hbWUsIGZvciBleGFtcGxlOlxuICpcbiAqICAgPiBoeXBoZW5hdGVTdHlsZU5hbWUoJ2JhY2tncm91bmRDb2xvcicpXG4gKiAgIDwgXCJiYWNrZ3JvdW5kLWNvbG9yXCJcbiAqICAgPiBoeXBoZW5hdGVTdHlsZU5hbWUoJ01velRyYW5zaXRpb24nKVxuICogICA8IFwiLW1vei10cmFuc2l0aW9uXCJcbiAqICAgPiBoeXBoZW5hdGVTdHlsZU5hbWUoJ21zVHJhbnNpdGlvbicpXG4gKiAgIDwgXCItbXMtdHJhbnNpdGlvblwiXG4gKlxuICogQXMgTW9kZXJuaXpyIHN1Z2dlc3RzIChodHRwOi8vbW9kZXJuaXpyLmNvbS9kb2NzLyNwcmVmaXhlZCksIGFuIGBtc2AgcHJlZml4XG4gKiBpcyBjb252ZXJ0ZWQgdG8gYC1tcy1gLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmdcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gaHlwaGVuYXRlU3R5bGVOYW1lKHN0cmluZykge1xuICByZXR1cm4gaHlwaGVuYXRlKHN0cmluZykucmVwbGFjZShtc1BhdHRlcm4sICctbXMtJyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaHlwaGVuYXRlU3R5bGVOYW1lOyIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTYuNC4wXG4gKiByZWFjdC1kb20tc2VydmVyLmJyb3dzZXIucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7dmFyIHA9cmVxdWlyZShcImZianMvbGliL2ludmFyaWFudFwiKSxyPXJlcXVpcmUoXCJvYmplY3QtYXNzaWduXCIpLHQ9cmVxdWlyZShcInJlYWN0XCIpLHc9cmVxdWlyZShcImZianMvbGliL2VtcHR5RnVuY3Rpb25cIikseD1yZXF1aXJlKFwiZmJqcy9saWIvZW1wdHlPYmplY3RcIikseT1yZXF1aXJlKFwiZmJqcy9saWIvaHlwaGVuYXRlU3R5bGVOYW1lXCIpLHo9cmVxdWlyZShcImZianMvbGliL21lbW9pemVTdHJpbmdPbmx5XCIpO1xuZnVuY3Rpb24gQShhKXtmb3IodmFyIGI9YXJndW1lbnRzLmxlbmd0aC0xLGQ9XCJodHRwczovL3JlYWN0anMub3JnL2RvY3MvZXJyb3ItZGVjb2Rlci5odG1sP2ludmFyaWFudD1cIithLGM9MDtjPGI7YysrKWQrPVwiJmFyZ3NbXT1cIitlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzW2MrMV0pO3AoITEsXCJNaW5pZmllZCBSZWFjdCBlcnJvciAjXCIrYStcIjsgdmlzaXQgJXMgZm9yIHRoZSBmdWxsIG1lc3NhZ2Ugb3IgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50IGZvciBmdWxsIGVycm9ycyBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLiBcIixkKX1cbnZhciBDPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3IsYWE9Qz9TeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpOjYwMTA2LEU9Qz9TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIik6NjAxMDcsYmE9Qz9TeW1ib2wuZm9yKFwicmVhY3Quc3RyaWN0X21vZGVcIik6NjAxMDgsY2E9Qz9TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIik6NjAxMTQsRj1DP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKTo2MDEwOSxkYT1DP1N5bWJvbC5mb3IoXCJyZWFjdC5jb250ZXh0XCIpOjYwMTEwLGVhPUM/U3ltYm9sLmZvcihcInJlYWN0LmFzeW5jX21vZGVcIik6NjAxMTEsZmE9Qz9TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIik6NjAxMTIsaGE9L15bOkEtWl9hLXpcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAyRkZcXHUwMzcwLVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkRdWzpBLVpfYS16XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkZGXFx1MDM3MC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXFwtLjAtOVxcdTAwQjdcXHUwMzAwLVxcdTAzNkZcXHUyMDNGLVxcdTIwNDBdKiQvLFxuRz17fSxIPXt9O2Z1bmN0aW9uIGlhKGEpe2lmKEguaGFzT3duUHJvcGVydHkoYSkpcmV0dXJuITA7aWYoRy5oYXNPd25Qcm9wZXJ0eShhKSlyZXR1cm4hMTtpZihoYS50ZXN0KGEpKXJldHVybiBIW2FdPSEwO0dbYV09ITA7cmV0dXJuITF9ZnVuY3Rpb24gamEoYSxiLGQsYyl7aWYobnVsbCE9PWQmJjA9PT1kLnR5cGUpcmV0dXJuITE7c3dpdGNoKHR5cGVvZiBiKXtjYXNlIFwiZnVuY3Rpb25cIjpjYXNlIFwic3ltYm9sXCI6cmV0dXJuITA7Y2FzZSBcImJvb2xlYW5cIjppZihjKXJldHVybiExO2lmKG51bGwhPT1kKXJldHVybiFkLmFjY2VwdHNCb29sZWFuczthPWEudG9Mb3dlckNhc2UoKS5zbGljZSgwLDUpO3JldHVyblwiZGF0YS1cIiE9PWEmJlwiYXJpYS1cIiE9PWE7ZGVmYXVsdDpyZXR1cm4hMX19XG5mdW5jdGlvbiBrYShhLGIsZCxjKXtpZihudWxsPT09Ynx8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiBifHxqYShhLGIsZCxjKSlyZXR1cm4hMDtpZihjKXJldHVybiExO2lmKG51bGwhPT1kKXN3aXRjaChkLnR5cGUpe2Nhc2UgMzpyZXR1cm4hYjtjYXNlIDQ6cmV0dXJuITE9PT1iO2Nhc2UgNTpyZXR1cm4gaXNOYU4oYik7Y2FzZSA2OnJldHVybiBpc05hTihiKXx8MT5ifXJldHVybiExfWZ1bmN0aW9uIEkoYSxiLGQsYyxrKXt0aGlzLmFjY2VwdHNCb29sZWFucz0yPT09Ynx8Mz09PWJ8fDQ9PT1iO3RoaXMuYXR0cmlidXRlTmFtZT1jO3RoaXMuYXR0cmlidXRlTmFtZXNwYWNlPWs7dGhpcy5tdXN0VXNlUHJvcGVydHk9ZDt0aGlzLnByb3BlcnR5TmFtZT1hO3RoaXMudHlwZT1ifXZhciBKPXt9O1xuXCJjaGlsZHJlbiBkYW5nZXJvdXNseVNldElubmVySFRNTCBkZWZhdWx0VmFsdWUgZGVmYXVsdENoZWNrZWQgaW5uZXJIVE1MIHN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZyBzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmcgc3R5bGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXtKW2FdPW5ldyBJKGEsMCwhMSxhLG51bGwpfSk7W1tcImFjY2VwdENoYXJzZXRcIixcImFjY2VwdC1jaGFyc2V0XCJdLFtcImNsYXNzTmFtZVwiLFwiY2xhc3NcIl0sW1wiaHRtbEZvclwiLFwiZm9yXCJdLFtcImh0dHBFcXVpdlwiLFwiaHR0cC1lcXVpdlwiXV0uZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hWzBdO0pbYl09bmV3IEkoYiwxLCExLGFbMV0sbnVsbCl9KTtbXCJjb250ZW50RWRpdGFibGVcIixcImRyYWdnYWJsZVwiLFwic3BlbGxDaGVja1wiLFwidmFsdWVcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtKW2FdPW5ldyBJKGEsMiwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCl9KTtcbltcImF1dG9SZXZlcnNlXCIsXCJleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkXCIsXCJwcmVzZXJ2ZUFscGhhXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7SlthXT1uZXcgSShhLDIsITEsYSxudWxsKX0pO1wiYWxsb3dGdWxsU2NyZWVuIGFzeW5jIGF1dG9Gb2N1cyBhdXRvUGxheSBjb250cm9scyBkZWZhdWx0IGRlZmVyIGRpc2FibGVkIGZvcm1Ob1ZhbGlkYXRlIGhpZGRlbiBsb29wIG5vTW9kdWxlIG5vVmFsaWRhdGUgb3BlbiBwbGF5c0lubGluZSByZWFkT25seSByZXF1aXJlZCByZXZlcnNlZCBzY29wZWQgc2VhbWxlc3MgaXRlbVNjb3BlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7SlthXT1uZXcgSShhLDMsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwpfSk7W1wiY2hlY2tlZFwiLFwibXVsdGlwbGVcIixcIm11dGVkXCIsXCJzZWxlY3RlZFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0pbYV09bmV3IEkoYSwzLCEwLGEudG9Mb3dlckNhc2UoKSxudWxsKX0pO1xuW1wiY2FwdHVyZVwiLFwiZG93bmxvYWRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtKW2FdPW5ldyBJKGEsNCwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCl9KTtbXCJjb2xzXCIsXCJyb3dzXCIsXCJzaXplXCIsXCJzcGFuXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7SlthXT1uZXcgSShhLDYsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwpfSk7W1wicm93U3BhblwiLFwic3RhcnRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtKW2FdPW5ldyBJKGEsNSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCl9KTt2YXIgSz0vW1xcLTpdKFthLXpdKS9nO2Z1bmN0aW9uIEwoYSl7cmV0dXJuIGFbMV0udG9VcHBlckNhc2UoKX1cblwiYWNjZW50LWhlaWdodCBhbGlnbm1lbnQtYmFzZWxpbmUgYXJhYmljLWZvcm0gYmFzZWxpbmUtc2hpZnQgY2FwLWhlaWdodCBjbGlwLXBhdGggY2xpcC1ydWxlIGNvbG9yLWludGVycG9sYXRpb24gY29sb3ItaW50ZXJwb2xhdGlvbi1maWx0ZXJzIGNvbG9yLXByb2ZpbGUgY29sb3ItcmVuZGVyaW5nIGRvbWluYW50LWJhc2VsaW5lIGVuYWJsZS1iYWNrZ3JvdW5kIGZpbGwtb3BhY2l0eSBmaWxsLXJ1bGUgZmxvb2QtY29sb3IgZmxvb2Qtb3BhY2l0eSBmb250LWZhbWlseSBmb250LXNpemUgZm9udC1zaXplLWFkanVzdCBmb250LXN0cmV0Y2ggZm9udC1zdHlsZSBmb250LXZhcmlhbnQgZm9udC13ZWlnaHQgZ2x5cGgtbmFtZSBnbHlwaC1vcmllbnRhdGlvbi1ob3Jpem9udGFsIGdseXBoLW9yaWVudGF0aW9uLXZlcnRpY2FsIGhvcml6LWFkdi14IGhvcml6LW9yaWdpbi14IGltYWdlLXJlbmRlcmluZyBsZXR0ZXItc3BhY2luZyBsaWdodGluZy1jb2xvciBtYXJrZXItZW5kIG1hcmtlci1taWQgbWFya2VyLXN0YXJ0IG92ZXJsaW5lLXBvc2l0aW9uIG92ZXJsaW5lLXRoaWNrbmVzcyBwYWludC1vcmRlciBwYW5vc2UtMSBwb2ludGVyLWV2ZW50cyByZW5kZXJpbmctaW50ZW50IHNoYXBlLXJlbmRlcmluZyBzdG9wLWNvbG9yIHN0b3Atb3BhY2l0eSBzdHJpa2V0aHJvdWdoLXBvc2l0aW9uIHN0cmlrZXRocm91Z2gtdGhpY2tuZXNzIHN0cm9rZS1kYXNoYXJyYXkgc3Ryb2tlLWRhc2hvZmZzZXQgc3Ryb2tlLWxpbmVjYXAgc3Ryb2tlLWxpbmVqb2luIHN0cm9rZS1taXRlcmxpbWl0IHN0cm9rZS1vcGFjaXR5IHN0cm9rZS13aWR0aCB0ZXh0LWFuY2hvciB0ZXh0LWRlY29yYXRpb24gdGV4dC1yZW5kZXJpbmcgdW5kZXJsaW5lLXBvc2l0aW9uIHVuZGVybGluZS10aGlja25lc3MgdW5pY29kZS1iaWRpIHVuaWNvZGUtcmFuZ2UgdW5pdHMtcGVyLWVtIHYtYWxwaGFiZXRpYyB2LWhhbmdpbmcgdi1pZGVvZ3JhcGhpYyB2LW1hdGhlbWF0aWNhbCB2ZWN0b3ItZWZmZWN0IHZlcnQtYWR2LXkgdmVydC1vcmlnaW4teCB2ZXJ0LW9yaWdpbi15IHdvcmQtc3BhY2luZyB3cml0aW5nLW1vZGUgeG1sbnM6eGxpbmsgeC1oZWlnaHRcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2UoSyxcbkwpO0pbYl09bmV3IEkoYiwxLCExLGEsbnVsbCl9KTtcInhsaW5rOmFjdHVhdGUgeGxpbms6YXJjcm9sZSB4bGluazpocmVmIHhsaW5rOnJvbGUgeGxpbms6c2hvdyB4bGluazp0aXRsZSB4bGluazp0eXBlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKEssTCk7SltiXT1uZXcgSShiLDEsITEsYSxcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIil9KTtbXCJ4bWw6YmFzZVwiLFwieG1sOmxhbmdcIixcInhtbDpzcGFjZVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShLLEwpO0pbYl09bmV3IEkoYiwxLCExLGEsXCJodHRwOi8vd3d3LnczLm9yZy9YTUwvMTk5OC9uYW1lc3BhY2VcIil9KTtKLnRhYkluZGV4PW5ldyBJKFwidGFiSW5kZXhcIiwxLCExLFwidGFiaW5kZXhcIixudWxsKTt2YXIgbGE9L1tcIicmPD5dLztcbmZ1bmN0aW9uIE0oYSl7aWYoXCJib29sZWFuXCI9PT10eXBlb2YgYXx8XCJudW1iZXJcIj09PXR5cGVvZiBhKXJldHVyblwiXCIrYTthPVwiXCIrYTt2YXIgYj1sYS5leGVjKGEpO2lmKGIpe3ZhciBkPVwiXCIsYyxrPTA7Zm9yKGM9Yi5pbmRleDtjPGEubGVuZ3RoO2MrKyl7c3dpdGNoKGEuY2hhckNvZGVBdChjKSl7Y2FzZSAzNDpiPVwiJnF1b3Q7XCI7YnJlYWs7Y2FzZSAzODpiPVwiJmFtcDtcIjticmVhaztjYXNlIDM5OmI9XCImI3gyNztcIjticmVhaztjYXNlIDYwOmI9XCImbHQ7XCI7YnJlYWs7Y2FzZSA2MjpiPVwiJmd0O1wiO2JyZWFrO2RlZmF1bHQ6Y29udGludWV9ayE9PWMmJihkKz1hLnN1YnN0cmluZyhrLGMpKTtrPWMrMTtkKz1ifWE9ayE9PWM/ZCthLnN1YnN0cmluZyhrLGMpOmR9cmV0dXJuIGF9dmFyIE49e2h0bWw6XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCIsbWF0aG1sOlwiaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTFwiLHN2ZzpcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJ9O1xuZnVuY3Rpb24gTyhhKXtzd2l0Y2goYSl7Y2FzZSBcInN2Z1wiOnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIjtjYXNlIFwibWF0aFwiOnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTFwiO2RlZmF1bHQ6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCJ9fVxudmFyIFA9e2FyZWE6ITAsYmFzZTohMCxicjohMCxjb2w6ITAsZW1iZWQ6ITAsaHI6ITAsaW1nOiEwLGlucHV0OiEwLGtleWdlbjohMCxsaW5rOiEwLG1ldGE6ITAscGFyYW06ITAsc291cmNlOiEwLHRyYWNrOiEwLHdicjohMH0sbWE9cih7bWVudWl0ZW06ITB9LFApLFE9e2FuaW1hdGlvbkl0ZXJhdGlvbkNvdW50OiEwLGJvcmRlckltYWdlT3V0c2V0OiEwLGJvcmRlckltYWdlU2xpY2U6ITAsYm9yZGVySW1hZ2VXaWR0aDohMCxib3hGbGV4OiEwLGJveEZsZXhHcm91cDohMCxib3hPcmRpbmFsR3JvdXA6ITAsY29sdW1uQ291bnQ6ITAsY29sdW1uczohMCxmbGV4OiEwLGZsZXhHcm93OiEwLGZsZXhQb3NpdGl2ZTohMCxmbGV4U2hyaW5rOiEwLGZsZXhOZWdhdGl2ZTohMCxmbGV4T3JkZXI6ITAsZ3JpZFJvdzohMCxncmlkUm93RW5kOiEwLGdyaWRSb3dTcGFuOiEwLGdyaWRSb3dTdGFydDohMCxncmlkQ29sdW1uOiEwLGdyaWRDb2x1bW5FbmQ6ITAsZ3JpZENvbHVtblNwYW46ITAsZ3JpZENvbHVtblN0YXJ0OiEwLFxuZm9udFdlaWdodDohMCxsaW5lQ2xhbXA6ITAsbGluZUhlaWdodDohMCxvcGFjaXR5OiEwLG9yZGVyOiEwLG9ycGhhbnM6ITAsdGFiU2l6ZTohMCx3aWRvd3M6ITAsekluZGV4OiEwLHpvb206ITAsZmlsbE9wYWNpdHk6ITAsZmxvb2RPcGFjaXR5OiEwLHN0b3BPcGFjaXR5OiEwLHN0cm9rZURhc2hhcnJheTohMCxzdHJva2VEYXNob2Zmc2V0OiEwLHN0cm9rZU1pdGVybGltaXQ6ITAsc3Ryb2tlT3BhY2l0eTohMCxzdHJva2VXaWR0aDohMH0sbmE9W1wiV2Via2l0XCIsXCJtc1wiLFwiTW96XCIsXCJPXCJdO09iamVjdC5rZXlzKFEpLmZvckVhY2goZnVuY3Rpb24oYSl7bmEuZm9yRWFjaChmdW5jdGlvbihiKXtiPWIrYS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSthLnN1YnN0cmluZygxKTtRW2JdPVFbYV19KX0pO3ZhciBSPXQuQ2hpbGRyZW4udG9BcnJheSxTPXcudGhhdFJldHVybnMoXCJcIik7dy50aGF0UmV0dXJucyhcIlwiKTt2YXIgb2E9e2xpc3Rpbmc6ITAscHJlOiEwLHRleHRhcmVhOiEwfTtcbmZ1bmN0aW9uIFQoYSl7cmV0dXJuXCJzdHJpbmdcIj09PXR5cGVvZiBhP2E6XCJmdW5jdGlvblwiPT09dHlwZW9mIGE/YS5kaXNwbGF5TmFtZXx8YS5uYW1lOm51bGx9dmFyIHBhPS9eW2EtekEtWl1bYS16QS1aOl9cXC5cXC1cXGRdKiQvLFU9e30scWE9eihmdW5jdGlvbihhKXtyZXR1cm4geShhKX0pO2Z1bmN0aW9uIHJhKGEpe3ZhciBiPVwiXCI7dC5DaGlsZHJlbi5mb3JFYWNoKGEsZnVuY3Rpb24oYSl7bnVsbD09YXx8XCJzdHJpbmdcIiE9PXR5cGVvZiBhJiZcIm51bWJlclwiIT09dHlwZW9mIGF8fChiKz1hKX0pO3JldHVybiBifWZ1bmN0aW9uIHNhKGEsYil7aWYoYT1hLmNvbnRleHRUeXBlcyl7dmFyIGQ9e30sYztmb3IoYyBpbiBhKWRbY109YltjXTtiPWR9ZWxzZSBiPXg7cmV0dXJuIGJ9dmFyIHRhPXtjaGlsZHJlbjpudWxsLGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MOm51bGwsc3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nOm51bGwsc3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nOm51bGx9O1xuZnVuY3Rpb24gVihhLGIpe3ZvaWQgMD09PWEmJkEoXCIxNTJcIixUKGIpfHxcIkNvbXBvbmVudFwiKX1cbmZ1bmN0aW9uIHVhKGEsYil7ZnVuY3Rpb24gZChjLGspe3ZhciBkPXNhKGssYiksZj1bXSxoPSExLGc9e2lzTW91bnRlZDpmdW5jdGlvbigpe3JldHVybiExfSxlbnF1ZXVlRm9yY2VVcGRhdGU6ZnVuY3Rpb24oKXtpZihudWxsPT09ZilyZXR1cm4gbnVsbH0sZW5xdWV1ZVJlcGxhY2VTdGF0ZTpmdW5jdGlvbihhLGIpe2g9ITA7Zj1bYl19LGVucXVldWVTZXRTdGF0ZTpmdW5jdGlvbihhLGIpe2lmKG51bGw9PT1mKXJldHVybiBudWxsO2YucHVzaChiKX19LGU9dm9pZCAwO2lmKGsucHJvdG90eXBlJiZrLnByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50KXtpZihlPW5ldyBrKGMucHJvcHMsZCxnKSxcImZ1bmN0aW9uXCI9PT10eXBlb2Ygay5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMpe3ZhciB2PWsuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzLmNhbGwobnVsbCxjLnByb3BzLGUuc3RhdGUpO251bGwhPXYmJihlLnN0YXRlPXIoe30sZS5zdGF0ZSx2KSl9fWVsc2UgaWYoZT1rKGMucHJvcHMsXG5kLGcpLG51bGw9PWV8fG51bGw9PWUucmVuZGVyKXthPWU7VihhLGspO3JldHVybn1lLnByb3BzPWMucHJvcHM7ZS5jb250ZXh0PWQ7ZS51cGRhdGVyPWc7Zz1lLnN0YXRlO3ZvaWQgMD09PWcmJihlLnN0YXRlPWc9bnVsbCk7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudHx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGUuY29tcG9uZW50V2lsbE1vdW50KWlmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmNvbXBvbmVudFdpbGxNb3VudCYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGsuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzJiZlLmNvbXBvbmVudFdpbGxNb3VudCgpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBrLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyYmZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50KCksZi5sZW5ndGgpe2c9Zjt2YXIgdT1oO2Y9bnVsbDtoPSExO2lmKHUmJlxuMT09PWcubGVuZ3RoKWUuc3RhdGU9Z1swXTtlbHNle3Y9dT9nWzBdOmUuc3RhdGU7dmFyIG09ITA7Zm9yKHU9dT8xOjA7dTxnLmxlbmd0aDt1Kyspe3ZhciBuPWdbdV07bj1cImZ1bmN0aW9uXCI9PT10eXBlb2Ygbj9uLmNhbGwoZSx2LGMucHJvcHMsZCk6bjtudWxsIT1uJiYobT8obT0hMSx2PXIoe30sdixuKSk6cih2LG4pKX1lLnN0YXRlPXZ9fWVsc2UgZj1udWxsO2E9ZS5yZW5kZXIoKTtWKGEsayk7Yz12b2lkIDA7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGUuZ2V0Q2hpbGRDb250ZXh0JiYoZD1rLmNoaWxkQ29udGV4dFR5cGVzLFwib2JqZWN0XCI9PT10eXBlb2YgZCkpe2M9ZS5nZXRDaGlsZENvbnRleHQoKTtmb3IodmFyIHEgaW4gYylxIGluIGQ/dm9pZCAwOkEoXCIxMDhcIixUKGspfHxcIlVua25vd25cIixxKX1jJiYoYj1yKHt9LGIsYykpfWZvcig7dC5pc1ZhbGlkRWxlbWVudChhKTspe3ZhciBjPWEsaz1jLnR5cGU7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIGspYnJlYWs7ZChjLGspfXJldHVybntjaGlsZDphLFxuY29udGV4dDpifX1cbnZhciBXPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gYShiLGQpe2lmKCEodGhpcyBpbnN0YW5jZW9mIGEpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7dC5pc1ZhbGlkRWxlbWVudChiKT9iLnR5cGUhPT1FP2I9W2JdOihiPWIucHJvcHMuY2hpbGRyZW4sYj10LmlzVmFsaWRFbGVtZW50KGIpP1tiXTpSKGIpKTpiPVIoYik7dGhpcy5zdGFjaz1be3R5cGU6bnVsbCxkb21OYW1lc3BhY2U6Ti5odG1sLGNoaWxkcmVuOmIsY2hpbGRJbmRleDowLGNvbnRleHQ6eCxmb290ZXI6XCJcIn1dO3RoaXMuZXhoYXVzdGVkPSExO3RoaXMuY3VycmVudFNlbGVjdFZhbHVlPW51bGw7dGhpcy5wcmV2aW91c1dhc1RleHROb2RlPSExO3RoaXMubWFrZVN0YXRpY01hcmt1cD1kO3RoaXMucHJvdmlkZXJTdGFjaz1bXTt0aGlzLnByb3ZpZGVySW5kZXg9LTF9YS5wcm90b3R5cGUucHVzaFByb3ZpZGVyPWZ1bmN0aW9uKGEpe3RoaXMucHJvdmlkZXJJbmRleCs9MTtcbnRoaXMucHJvdmlkZXJTdGFja1t0aGlzLnByb3ZpZGVySW5kZXhdPWE7YS50eXBlLl9jb250ZXh0Ll9jdXJyZW50VmFsdWU9YS5wcm9wcy52YWx1ZX07YS5wcm90b3R5cGUucG9wUHJvdmlkZXI9ZnVuY3Rpb24oYSl7dGhpcy5wcm92aWRlclN0YWNrW3RoaXMucHJvdmlkZXJJbmRleF09bnVsbDstLXRoaXMucHJvdmlkZXJJbmRleDthPWEudHlwZS5fY29udGV4dDthLl9jdXJyZW50VmFsdWU9MD50aGlzLnByb3ZpZGVySW5kZXg/YS5fZGVmYXVsdFZhbHVlOnRoaXMucHJvdmlkZXJTdGFja1t0aGlzLnByb3ZpZGVySW5kZXhdLnByb3BzLnZhbHVlfTthLnByb3RvdHlwZS5yZWFkPWZ1bmN0aW9uKGEpe2lmKHRoaXMuZXhoYXVzdGVkKXJldHVybiBudWxsO2Zvcih2YXIgYj1cIlwiO2IubGVuZ3RoPGE7KXtpZigwPT09dGhpcy5zdGFjay5sZW5ndGgpe3RoaXMuZXhoYXVzdGVkPSEwO2JyZWFrfXZhciBjPXRoaXMuc3RhY2tbdGhpcy5zdGFjay5sZW5ndGgtMV07aWYoYy5jaGlsZEluZGV4Pj1jLmNoaWxkcmVuLmxlbmd0aCl7dmFyIGs9XG5jLmZvb3RlcjtiKz1rO1wiXCIhPT1rJiYodGhpcy5wcmV2aW91c1dhc1RleHROb2RlPSExKTt0aGlzLnN0YWNrLnBvcCgpO1wic2VsZWN0XCI9PT1jLnR5cGU/dGhpcy5jdXJyZW50U2VsZWN0VmFsdWU9bnVsbDpudWxsIT1jLnR5cGUmJm51bGwhPWMudHlwZS50eXBlJiZjLnR5cGUudHlwZS4kJHR5cGVvZj09PUYmJnRoaXMucG9wUHJvdmlkZXIoYy50eXBlKX1lbHNlIGs9Yy5jaGlsZHJlbltjLmNoaWxkSW5kZXgrK10sYis9dGhpcy5yZW5kZXIoayxjLmNvbnRleHQsYy5kb21OYW1lc3BhY2UpfXJldHVybiBifTthLnByb3RvdHlwZS5yZW5kZXI9ZnVuY3Rpb24oYSxkLGMpe2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYXx8XCJudW1iZXJcIj09PXR5cGVvZiBhKXtjPVwiXCIrYTtpZihcIlwiPT09YylyZXR1cm5cIlwiO2lmKHRoaXMubWFrZVN0YXRpY01hcmt1cClyZXR1cm4gTShjKTtpZih0aGlzLnByZXZpb3VzV2FzVGV4dE5vZGUpcmV0dXJuXCJcXHgzYyEtLSAtLVxceDNlXCIrTShjKTt0aGlzLnByZXZpb3VzV2FzVGV4dE5vZGU9XG4hMDtyZXR1cm4gTShjKX1kPXVhKGEsZCk7YT1kLmNoaWxkO2Q9ZC5jb250ZXh0O2lmKG51bGw9PT1hfHwhMT09PWEpcmV0dXJuXCJcIjtpZighdC5pc1ZhbGlkRWxlbWVudChhKSl7aWYobnVsbCE9YSYmbnVsbCE9YS4kJHR5cGVvZil7dmFyIGI9YS4kJHR5cGVvZjtiPT09YWE/QShcIjI1N1wiKTp2b2lkIDA7QShcIjI1OFwiLGIudG9TdHJpbmcoKSl9YT1SKGEpO3RoaXMuc3RhY2sucHVzaCh7dHlwZTpudWxsLGRvbU5hbWVzcGFjZTpjLGNoaWxkcmVuOmEsY2hpbGRJbmRleDowLGNvbnRleHQ6ZCxmb290ZXI6XCJcIn0pO3JldHVyblwiXCJ9Yj1hLnR5cGU7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBiKXJldHVybiB0aGlzLnJlbmRlckRPTShhLGQsYyk7c3dpdGNoKGIpe2Nhc2UgYmE6Y2FzZSBlYTpjYXNlIGNhOmNhc2UgRTpyZXR1cm4gYT1SKGEucHJvcHMuY2hpbGRyZW4pLHRoaXMuc3RhY2sucHVzaCh7dHlwZTpudWxsLGRvbU5hbWVzcGFjZTpjLGNoaWxkcmVuOmEsY2hpbGRJbmRleDowLGNvbnRleHQ6ZCxcbmZvb3RlcjpcIlwifSksXCJcIn1pZihcIm9iamVjdFwiPT09dHlwZW9mIGImJm51bGwhPT1iKXN3aXRjaChiLiQkdHlwZW9mKXtjYXNlIGZhOnJldHVybiBhPVIoYi5yZW5kZXIoYS5wcm9wcyxhLnJlZikpLHRoaXMuc3RhY2sucHVzaCh7dHlwZTpudWxsLGRvbU5hbWVzcGFjZTpjLGNoaWxkcmVuOmEsY2hpbGRJbmRleDowLGNvbnRleHQ6ZCxmb290ZXI6XCJcIn0pLFwiXCI7Y2FzZSBGOnJldHVybiBiPVIoYS5wcm9wcy5jaGlsZHJlbiksYz17dHlwZTphLGRvbU5hbWVzcGFjZTpjLGNoaWxkcmVuOmIsY2hpbGRJbmRleDowLGNvbnRleHQ6ZCxmb290ZXI6XCJcIn0sdGhpcy5wdXNoUHJvdmlkZXIoYSksdGhpcy5zdGFjay5wdXNoKGMpLFwiXCI7Y2FzZSBkYTpyZXR1cm4gYj1SKGEucHJvcHMuY2hpbGRyZW4oYS50eXBlLl9jdXJyZW50VmFsdWUpKSx0aGlzLnN0YWNrLnB1c2goe3R5cGU6YSxkb21OYW1lc3BhY2U6YyxjaGlsZHJlbjpiLGNoaWxkSW5kZXg6MCxjb250ZXh0OmQsZm9vdGVyOlwiXCJ9KSxcIlwifUEoXCIxMzBcIixcbm51bGw9PWI/Yjp0eXBlb2YgYixcIlwiKX07YS5wcm90b3R5cGUucmVuZGVyRE9NPWZ1bmN0aW9uKGEsZCxjKXt2YXIgYj1hLnR5cGUudG9Mb3dlckNhc2UoKTtjPT09Ti5odG1sJiZPKGIpO1UuaGFzT3duUHJvcGVydHkoYil8fChwYS50ZXN0KGIpP3ZvaWQgMDpBKFwiNjVcIixiKSxVW2JdPSEwKTt2YXIgZj1hLnByb3BzO2lmKFwiaW5wdXRcIj09PWIpZj1yKHt0eXBlOnZvaWQgMH0sZix7ZGVmYXVsdENoZWNrZWQ6dm9pZCAwLGRlZmF1bHRWYWx1ZTp2b2lkIDAsdmFsdWU6bnVsbCE9Zi52YWx1ZT9mLnZhbHVlOmYuZGVmYXVsdFZhbHVlLGNoZWNrZWQ6bnVsbCE9Zi5jaGVja2VkP2YuY2hlY2tlZDpmLmRlZmF1bHRDaGVja2VkfSk7ZWxzZSBpZihcInRleHRhcmVhXCI9PT1iKXt2YXIgaD1mLnZhbHVlO2lmKG51bGw9PWgpe2g9Zi5kZWZhdWx0VmFsdWU7dmFyIGw9Zi5jaGlsZHJlbjtudWxsIT1sJiYobnVsbCE9aD9BKFwiOTJcIik6dm9pZCAwLEFycmF5LmlzQXJyYXkobCkmJigxPj1sLmxlbmd0aD9cbnZvaWQgMDpBKFwiOTNcIiksbD1sWzBdKSxoPVwiXCIrbCk7bnVsbD09aCYmKGg9XCJcIil9Zj1yKHt9LGYse3ZhbHVlOnZvaWQgMCxjaGlsZHJlbjpcIlwiK2h9KX1lbHNlIGlmKFwic2VsZWN0XCI9PT1iKXRoaXMuY3VycmVudFNlbGVjdFZhbHVlPW51bGwhPWYudmFsdWU/Zi52YWx1ZTpmLmRlZmF1bHRWYWx1ZSxmPXIoe30sZix7dmFsdWU6dm9pZCAwfSk7ZWxzZSBpZihcIm9wdGlvblwiPT09Yil7bD10aGlzLmN1cnJlbnRTZWxlY3RWYWx1ZTt2YXIgRD1yYShmLmNoaWxkcmVuKTtpZihudWxsIT1sKXt2YXIgQj1udWxsIT1mLnZhbHVlP2YudmFsdWUrXCJcIjpEO2g9ITE7aWYoQXJyYXkuaXNBcnJheShsKSlmb3IodmFyIGc9MDtnPGwubGVuZ3RoO2crKyl7aWYoXCJcIitsW2ddPT09Qil7aD0hMDticmVha319ZWxzZSBoPVwiXCIrbD09PUI7Zj1yKHtzZWxlY3RlZDp2b2lkIDAsY2hpbGRyZW46dm9pZCAwfSxmLHtzZWxlY3RlZDpoLGNoaWxkcmVuOkR9KX19aWYoaD1mKW1hW2JdJiYobnVsbCE9aC5jaGlsZHJlbnx8XG5udWxsIT1oLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MP0EoXCIxMzdcIixiLFMoKSk6dm9pZCAwKSxudWxsIT1oLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiYobnVsbCE9aC5jaGlsZHJlbj9BKFwiNjBcIik6dm9pZCAwLFwib2JqZWN0XCI9PT10eXBlb2YgaC5kYW5nZXJvdXNseVNldElubmVySFRNTCYmXCJfX2h0bWxcImluIGguZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw/dm9pZCAwOkEoXCI2MVwiKSksbnVsbCE9aC5zdHlsZSYmXCJvYmplY3RcIiE9PXR5cGVvZiBoLnN0eWxlP0EoXCI2MlwiLFMoKSk6dm9pZCAwO2g9ZjtsPXRoaXMubWFrZVN0YXRpY01hcmt1cDtEPTE9PT10aGlzLnN0YWNrLmxlbmd0aDtCPVwiPFwiK2EudHlwZTtmb3IocSBpbiBoKWlmKGguaGFzT3duUHJvcGVydHkocSkpe3ZhciBlPWhbcV07aWYobnVsbCE9ZSl7aWYoXCJzdHlsZVwiPT09cSl7Zz12b2lkIDA7dmFyIHY9XCJcIix1PVwiXCI7Zm9yKGcgaW4gZSlpZihlLmhhc093blByb3BlcnR5KGcpKXt2YXIgbT0wPT09Zy5pbmRleE9mKFwiLS1cIiksXG5uPWVbZ107bnVsbCE9biYmKHYrPXUrcWEoZykrXCI6XCIsdT1nLG09bnVsbD09bnx8XCJib29sZWFuXCI9PT10eXBlb2Ygbnx8XCJcIj09PW4/XCJcIjptfHxcIm51bWJlclwiIT09dHlwZW9mIG58fDA9PT1ufHxRLmhhc093blByb3BlcnR5KHUpJiZRW3VdPyhcIlwiK24pLnRyaW0oKTpuK1wicHhcIix2Kz1tLHU9XCI7XCIpfWU9dnx8bnVsbH1nPW51bGw7YjppZihtPWIsbj1oLC0xPT09bS5pbmRleE9mKFwiLVwiKSltPVwic3RyaW5nXCI9PT10eXBlb2Ygbi5pcztlbHNlIHN3aXRjaChtKXtjYXNlIFwiYW5ub3RhdGlvbi14bWxcIjpjYXNlIFwiY29sb3ItcHJvZmlsZVwiOmNhc2UgXCJmb250LWZhY2VcIjpjYXNlIFwiZm9udC1mYWNlLXNyY1wiOmNhc2UgXCJmb250LWZhY2UtdXJpXCI6Y2FzZSBcImZvbnQtZmFjZS1mb3JtYXRcIjpjYXNlIFwiZm9udC1mYWNlLW5hbWVcIjpjYXNlIFwibWlzc2luZy1nbHlwaFwiOm09ITE7YnJlYWsgYjtkZWZhdWx0Om09ITB9aWYobSl0YS5oYXNPd25Qcm9wZXJ0eShxKXx8KGc9cSxnPWlhKGcpJiZudWxsIT1cbmU/ZytcIj1cIisoJ1wiJytNKGUpKydcIicpOlwiXCIpO2Vsc2V7bT1xO2c9ZTtlPUouaGFzT3duUHJvcGVydHkobSk/SlttXTpudWxsO2lmKG49XCJzdHlsZVwiIT09bSluPW51bGwhPT1lPzA9PT1lLnR5cGU6ISgyPG0ubGVuZ3RoKXx8XCJvXCIhPT1tWzBdJiZcIk9cIiE9PW1bMF18fFwiblwiIT09bVsxXSYmXCJOXCIhPT1tWzFdPyExOiEwO258fGthKG0sZyxlLCExKT9nPVwiXCI6bnVsbCE9PWU/KG09ZS5hdHRyaWJ1dGVOYW1lLGU9ZS50eXBlLGc9Mz09PWV8fDQ9PT1lJiYhMD09PWc/bSsnPVwiXCInOm0rXCI9XCIrKCdcIicrTShnKSsnXCInKSk6Zz1tK1wiPVwiKygnXCInK00oZykrJ1wiJyl9ZyYmKEIrPVwiIFwiK2cpfX1sfHxEJiYoQis9JyBkYXRhLXJlYWN0cm9vdD1cIlwiJyk7dmFyIHE9QjtoPVwiXCI7UC5oYXNPd25Qcm9wZXJ0eShiKT9xKz1cIi8+XCI6KHErPVwiPlwiLGg9XCI8L1wiK2EudHlwZStcIj5cIik7YTp7bD1mLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MO2lmKG51bGwhPWwpe2lmKG51bGwhPWwuX19odG1sKXtsPWwuX19odG1sO1xuYnJlYWsgYX19ZWxzZSBpZihsPWYuY2hpbGRyZW4sXCJzdHJpbmdcIj09PXR5cGVvZiBsfHxcIm51bWJlclwiPT09dHlwZW9mIGwpe2w9TShsKTticmVhayBhfWw9bnVsbH1udWxsIT1sPyhmPVtdLG9hW2JdJiZcIlxcblwiPT09bC5jaGFyQXQoMCkmJihxKz1cIlxcblwiKSxxKz1sKTpmPVIoZi5jaGlsZHJlbik7YT1hLnR5cGU7Yz1udWxsPT1jfHxcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIj09PWM/TyhhKTpcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI9PT1jJiZcImZvcmVpZ25PYmplY3RcIj09PWE/XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI6Yzt0aGlzLnN0YWNrLnB1c2goe2RvbU5hbWVzcGFjZTpjLHR5cGU6YixjaGlsZHJlbjpmLGNoaWxkSW5kZXg6MCxjb250ZXh0OmQsZm9vdGVyOmh9KTt0aGlzLnByZXZpb3VzV2FzVGV4dE5vZGU9ITE7cmV0dXJuIHF9O3JldHVybiBhfSgpLFg9e3JlbmRlclRvU3RyaW5nOmZ1bmN0aW9uKGEpe3JldHVybihuZXcgVyhhLCExKSkucmVhZChJbmZpbml0eSl9LFxucmVuZGVyVG9TdGF0aWNNYXJrdXA6ZnVuY3Rpb24oYSl7cmV0dXJuKG5ldyBXKGEsITApKS5yZWFkKEluZmluaXR5KX0scmVuZGVyVG9Ob2RlU3RyZWFtOmZ1bmN0aW9uKCl7QShcIjIwN1wiKX0scmVuZGVyVG9TdGF0aWNOb2RlU3RyZWFtOmZ1bmN0aW9uKCl7QShcIjIwOFwiKX0sdmVyc2lvbjpcIjE2LjQuMFwifSxZPXtkZWZhdWx0Olh9LFo9WSYmWHx8WTttb2R1bGUuZXhwb3J0cz1aLmRlZmF1bHQ/Wi5kZWZhdWx0Olo7XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtZG9tLXNlcnZlci5icm93c2VyLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS1zZXJ2ZXIuYnJvd3Nlci5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgaWYgKHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSB7XG4gICAgZGVmaW5lKFsnZXhwb3J0cycsICdyZWFjdCcsICdwcm9wLXR5cGVzJywgJ3JlYWN0LWRvbScsICdyZWFjdC1kb20vc2VydmVyJ10sIGZhY3RvcnkpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBleHBvcnRzICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgZmFjdG9yeShleHBvcnRzLCByZXF1aXJlKCdyZWFjdCcpLCByZXF1aXJlKCdwcm9wLXR5cGVzJyksIHJlcXVpcmUoJ3JlYWN0LWRvbScpLCByZXF1aXJlKCdyZWFjdC1kb20vc2VydmVyJykpO1xuICB9IGVsc2Uge1xuICAgIHZhciBtb2QgPSB7XG4gICAgICBleHBvcnRzOiB7fVxuICAgIH07XG4gICAgZmFjdG9yeShtb2QuZXhwb3J0cywgZ2xvYmFsLnJlYWN0LCBnbG9iYWwucHJvcFR5cGVzLCBnbG9iYWwucmVhY3REb20sIGdsb2JhbC5zZXJ2ZXIpO1xuICAgIGdsb2JhbC5JbmZvV2luZG93ID0gbW9kLmV4cG9ydHM7XG4gIH1cbn0pKHRoaXMsIGZ1bmN0aW9uIChleHBvcnRzLCBfcmVhY3QsIF9wcm9wVHlwZXMsIF9yZWFjdERvbSwgX3NlcnZlcikge1xuICAndXNlIHN0cmljdCc7XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbiAgfSk7XG4gIGV4cG9ydHMuSW5mb1dpbmRvdyA9IHVuZGVmaW5lZDtcblxuICB2YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxuICB2YXIgX3Byb3BUeXBlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMpO1xuXG4gIHZhciBfcmVhY3REb20yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3REb20pO1xuXG4gIHZhciBfc2VydmVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3NlcnZlcik7XG5cbiAgZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHtcbiAgICByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDoge1xuICAgICAgZGVmYXVsdDogb2JqXG4gICAgfTtcbiAgfVxuXG4gIHZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuXG4gICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXQ7XG4gIH07XG5cbiAgZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9iaiwga2V5cykge1xuICAgIHZhciB0YXJnZXQgPSB7fTtcblxuICAgIGZvciAodmFyIGkgaW4gb2JqKSB7XG4gICAgICBpZiAoa2V5cy5pbmRleE9mKGkpID49IDApIGNvbnRpbnVlO1xuICAgICAgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBpKSkgY29udGludWU7XG4gICAgICB0YXJnZXRbaV0gPSBvYmpbaV07XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtcbiAgICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgICB9XG4gIH1cblxuICB2YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuICAgICAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG4gICAgICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcbiAgICAgICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gICAgICBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpO1xuICAgICAgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7XG4gICAgICByZXR1cm4gQ29uc3RydWN0b3I7XG4gICAgfTtcbiAgfSgpO1xuXG4gIGZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHtcbiAgICBpZiAoIXNlbGYpIHtcbiAgICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICAgIGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpO1xuICAgIH1cblxuICAgIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwge1xuICAgICAgY29uc3RydWN0b3I6IHtcbiAgICAgICAgdmFsdWU6IHN1YkNsYXNzLFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgfVxuICAgIH0pO1xuICAgIGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzcztcbiAgfVxuXG4gIHZhciBJbmZvV2luZG93ID0gZXhwb3J0cy5JbmZvV2luZG93ID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgICBfaW5oZXJpdHMoSW5mb1dpbmRvdywgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgICBmdW5jdGlvbiBJbmZvV2luZG93KCkge1xuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEluZm9XaW5kb3cpO1xuXG4gICAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKEluZm9XaW5kb3cuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihJbmZvV2luZG93KSkuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gICAgfVxuXG4gICAgX2NyZWF0ZUNsYXNzKEluZm9XaW5kb3csIFt7XG4gICAgICBrZXk6ICdjb21wb25lbnREaWRNb3VudCcsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICAgIHRoaXMucmVuZGVySW5mb1dpbmRvdygpO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogJ2NvbXBvbmVudERpZFVwZGF0ZScsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wcykge1xuICAgICAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICAgIGdvb2dsZSA9IF9wcm9wcy5nb29nbGUsXG4gICAgICAgICAgICBtYXAgPSBfcHJvcHMubWFwO1xuXG5cbiAgICAgICAgaWYgKCFnb29nbGUgfHwgIW1hcCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChtYXAgIT09IHByZXZQcm9wcy5tYXApIHtcbiAgICAgICAgICB0aGlzLnJlbmRlckluZm9XaW5kb3coKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLnByb3BzLnBvc2l0aW9uICE9PSBwcmV2UHJvcHMucG9zaXRpb24pIHtcbiAgICAgICAgICB0aGlzLnVwZGF0ZVBvc2l0aW9uKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5wcm9wcy5jaGlsZHJlbiAhPT0gcHJldlByb3BzLmNoaWxkcmVuKSB7XG4gICAgICAgICAgdGhpcy51cGRhdGVDb250ZW50KCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5wcm9wcy52aXNpYmxlICE9PSBwcmV2UHJvcHMudmlzaWJsZSB8fCB0aGlzLnByb3BzLm1hcmtlciAhPT0gcHJldlByb3BzLm1hcmtlciB8fCB0aGlzLnByb3BzLnBvc2l0aW9uICE9PSBwcmV2UHJvcHMucG9zaXRpb24pIHtcbiAgICAgICAgICB0aGlzLnByb3BzLnZpc2libGUgPyB0aGlzLm9wZW5XaW5kb3coKSA6IHRoaXMuY2xvc2VXaW5kb3coKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogJ3JlbmRlckluZm9XaW5kb3cnLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlckluZm9XaW5kb3coKSB7XG4gICAgICAgIHZhciBfcHJvcHMyID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICAgIG1hcCA9IF9wcm9wczIubWFwLFxuICAgICAgICAgICAgZ29vZ2xlID0gX3Byb3BzMi5nb29nbGUsXG4gICAgICAgICAgICBtYXBDZW50ZXIgPSBfcHJvcHMyLm1hcENlbnRlcixcbiAgICAgICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9wcm9wczIsIFsnbWFwJywgJ2dvb2dsZScsICdtYXBDZW50ZXInXSk7XG5cbiAgICAgICAgaWYgKCFnb29nbGUgfHwgIWdvb2dsZS5tYXBzKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGl3ID0gdGhpcy5pbmZvd2luZG93ID0gbmV3IGdvb2dsZS5tYXBzLkluZm9XaW5kb3coX2V4dGVuZHMoe1xuICAgICAgICAgIGNvbnRlbnQ6ICcnXG4gICAgICAgIH0sIHByb3BzKSk7XG5cbiAgICAgICAgZ29vZ2xlLm1hcHMuZXZlbnQuYWRkTGlzdGVuZXIoaXcsICdjbG9zZWNsaWNrJywgdGhpcy5vbkNsb3NlLmJpbmQodGhpcykpO1xuICAgICAgICBnb29nbGUubWFwcy5ldmVudC5hZGRMaXN0ZW5lcihpdywgJ2RvbXJlYWR5JywgdGhpcy5vbk9wZW4uYmluZCh0aGlzKSk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiAnb25PcGVuJyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBvbk9wZW4oKSB7XG4gICAgICAgIGlmICh0aGlzLnByb3BzLm9uT3Blbikge1xuICAgICAgICAgIHRoaXMucHJvcHMub25PcGVuKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6ICdvbkNsb3NlJyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBvbkNsb3NlKCkge1xuICAgICAgICBpZiAodGhpcy5wcm9wcy5vbkNsb3NlKSB7XG4gICAgICAgICAgdGhpcy5wcm9wcy5vbkNsb3NlKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6ICdvcGVuV2luZG93JyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBvcGVuV2luZG93KCkge1xuICAgICAgICB0aGlzLmluZm93aW5kb3cub3Blbih0aGlzLnByb3BzLm1hcCwgdGhpcy5wcm9wcy5tYXJrZXIpO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogJ3VwZGF0ZVBvc2l0aW9uJyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiB1cGRhdGVQb3NpdGlvbigpIHtcbiAgICAgICAgdmFyIHBvcyA9IHRoaXMucHJvcHMucG9zaXRpb247XG4gICAgICAgIGlmICghKHBvcyBpbnN0YW5jZW9mIGdvb2dsZS5tYXBzLkxhdExuZykpIHtcbiAgICAgICAgICBwb3MgPSBwb3MgJiYgbmV3IGdvb2dsZS5tYXBzLkxhdExuZyhwb3MubGF0LCBwb3MubG5nKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmluZm93aW5kb3cuc2V0UG9zaXRpb24ocG9zKTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6ICd1cGRhdGVDb250ZW50JyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiB1cGRhdGVDb250ZW50KCkge1xuICAgICAgICB2YXIgY29udGVudCA9IHRoaXMucmVuZGVyQ2hpbGRyZW4oKTtcbiAgICAgICAgdGhpcy5pbmZvd2luZG93LnNldENvbnRlbnQoY29udGVudCk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiAnY2xvc2VXaW5kb3cnLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNsb3NlV2luZG93KCkge1xuICAgICAgICB0aGlzLmluZm93aW5kb3cuY2xvc2UoKTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6ICdyZW5kZXJDaGlsZHJlbicsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyQ2hpbGRyZW4oKSB7XG4gICAgICAgIHZhciBjaGlsZHJlbiA9IHRoaXMucHJvcHMuY2hpbGRyZW47XG5cbiAgICAgICAgcmV0dXJuIF9zZXJ2ZXIyLmRlZmF1bHQucmVuZGVyVG9TdHJpbmcoY2hpbGRyZW4pO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogJ3JlbmRlcicsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gSW5mb1dpbmRvdztcbiAgfShfcmVhY3QyLmRlZmF1bHQuQ29tcG9uZW50KTtcblxuICBJbmZvV2luZG93LnByb3BUeXBlcyA9IHtcbiAgICBjaGlsZHJlbjogX3Byb3BUeXBlczIuZGVmYXVsdC5lbGVtZW50LmlzUmVxdWlyZWQsXG4gICAgbWFwOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9iamVjdCxcbiAgICBtYXJrZXI6IF9wcm9wVHlwZXMyLmRlZmF1bHQub2JqZWN0LFxuICAgIHBvc2l0aW9uOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9iamVjdCxcbiAgICB2aXNpYmxlOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG5cbiAgICAvLyBjYWxsYmFja3NcbiAgICBvbkNsb3NlOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmMsXG4gICAgb25PcGVuOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmNcbiAgfTtcblxuICBJbmZvV2luZG93LmRlZmF1bHRQcm9wcyA9IHtcbiAgICB2aXNpYmxlOiBmYWxzZVxuICB9O1xuXG4gIGV4cG9ydHMuZGVmYXVsdCA9IEluZm9XaW5kb3c7XG59KTsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0UHJvcFR5cGVzU2VjcmV0ID0gJ1NFQ1JFVF9ET19OT1RfUEFTU19USElTX09SX1lPVV9XSUxMX0JFX0ZJUkVEJztcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdFByb3BUeXBlc1NlY3JldDtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgZW1wdHlGdW5jdGlvbiA9IHJlcXVpcmUoJ2ZianMvbGliL2VtcHR5RnVuY3Rpb24nKTtcbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9pbnZhcmlhbnQnKTtcbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9IHJlcXVpcmUoJy4vbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG4gIGZ1bmN0aW9uIHNoaW0ocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lLCBzZWNyZXQpIHtcbiAgICBpZiAoc2VjcmV0ID09PSBSZWFjdFByb3BUeXBlc1NlY3JldCkge1xuICAgICAgLy8gSXQgaXMgc3RpbGwgc2FmZSB3aGVuIGNhbGxlZCBmcm9tIFJlYWN0LlxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpbnZhcmlhbnQoXG4gICAgICBmYWxzZSxcbiAgICAgICdDYWxsaW5nIFByb3BUeXBlcyB2YWxpZGF0b3JzIGRpcmVjdGx5IGlzIG5vdCBzdXBwb3J0ZWQgYnkgdGhlIGBwcm9wLXR5cGVzYCBwYWNrYWdlLiAnICtcbiAgICAgICdVc2UgUHJvcFR5cGVzLmNoZWNrUHJvcFR5cGVzKCkgdG8gY2FsbCB0aGVtLiAnICtcbiAgICAgICdSZWFkIG1vcmUgYXQgaHR0cDovL2ZiLm1lL3VzZS1jaGVjay1wcm9wLXR5cGVzJ1xuICAgICk7XG4gIH07XG4gIHNoaW0uaXNSZXF1aXJlZCA9IHNoaW07XG4gIGZ1bmN0aW9uIGdldFNoaW0oKSB7XG4gICAgcmV0dXJuIHNoaW07XG4gIH07XG4gIC8vIEltcG9ydGFudCFcbiAgLy8gS2VlcCB0aGlzIGxpc3QgaW4gc3luYyB3aXRoIHByb2R1Y3Rpb24gdmVyc2lvbiBpbiBgLi9mYWN0b3J5V2l0aFR5cGVDaGVja2Vycy5qc2AuXG4gIHZhciBSZWFjdFByb3BUeXBlcyA9IHtcbiAgICBhcnJheTogc2hpbSxcbiAgICBib29sOiBzaGltLFxuICAgIGZ1bmM6IHNoaW0sXG4gICAgbnVtYmVyOiBzaGltLFxuICAgIG9iamVjdDogc2hpbSxcbiAgICBzdHJpbmc6IHNoaW0sXG4gICAgc3ltYm9sOiBzaGltLFxuXG4gICAgYW55OiBzaGltLFxuICAgIGFycmF5T2Y6IGdldFNoaW0sXG4gICAgZWxlbWVudDogc2hpbSxcbiAgICBpbnN0YW5jZU9mOiBnZXRTaGltLFxuICAgIG5vZGU6IHNoaW0sXG4gICAgb2JqZWN0T2Y6IGdldFNoaW0sXG4gICAgb25lT2Y6IGdldFNoaW0sXG4gICAgb25lT2ZUeXBlOiBnZXRTaGltLFxuICAgIHNoYXBlOiBnZXRTaGltLFxuICAgIGV4YWN0OiBnZXRTaGltXG4gIH07XG5cbiAgUmVhY3RQcm9wVHlwZXMuY2hlY2tQcm9wVHlwZXMgPSBlbXB0eUZ1bmN0aW9uO1xuICBSZWFjdFByb3BUeXBlcy5Qcm9wVHlwZXMgPSBSZWFjdFByb3BUeXBlcztcblxuICByZXR1cm4gUmVhY3RQcm9wVHlwZXM7XG59O1xuIiwiKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgaWYgKHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSB7XG4gICAgZGVmaW5lKFsnZXhwb3J0cycsICdyZWFjdCcsICdwcm9wLXR5cGVzJywgJy4uL2xpYi9TdHJpbmcnXSwgZmFjdG9yeSk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGV4cG9ydHMgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBmYWN0b3J5KGV4cG9ydHMsIHJlcXVpcmUoJ3JlYWN0JyksIHJlcXVpcmUoJ3Byb3AtdHlwZXMnKSwgcmVxdWlyZSgnLi4vbGliL1N0cmluZycpKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgbW9kID0ge1xuICAgICAgZXhwb3J0czoge31cbiAgICB9O1xuICAgIGZhY3RvcnkobW9kLmV4cG9ydHMsIGdsb2JhbC5yZWFjdCwgZ2xvYmFsLnByb3BUeXBlcywgZ2xvYmFsLlN0cmluZyk7XG4gICAgZ2xvYmFsLk1hcmtlciA9IG1vZC5leHBvcnRzO1xuICB9XG59KSh0aGlzLCBmdW5jdGlvbiAoZXhwb3J0cywgX3JlYWN0LCBfcHJvcFR5cGVzLCBfU3RyaW5nKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxuICB9KTtcbiAgZXhwb3J0cy5NYXJrZXIgPSB1bmRlZmluZWQ7XG5cbiAgdmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbiAgdmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblxuICBmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikge1xuICAgIHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7XG4gICAgICBkZWZhdWx0OiBvYmpcbiAgICB9O1xuICB9XG5cbiAgdmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfTtcblxuICBmdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob2JqLCBrZXlzKSB7XG4gICAgdmFyIHRhcmdldCA9IHt9O1xuXG4gICAgZm9yICh2YXIgaSBpbiBvYmopIHtcbiAgICAgIGlmIChrZXlzLmluZGV4T2YoaSkgPj0gMCkgY29udGludWU7XG4gICAgICBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGkpKSBjb250aW51ZTtcbiAgICAgIHRhcmdldFtpXSA9IG9ialtpXTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9XG5cbiAgZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikge1xuICAgIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07XG4gICAgICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTtcbiAgICAgICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgICAgICBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgICAgIGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gICAgICBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtcbiAgICAgIHJldHVybiBDb25zdHJ1Y3RvcjtcbiAgICB9O1xuICB9KCk7XG5cbiAgZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkge1xuICAgIGlmICghc2VsZikge1xuICAgICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO1xuICAgIH1cblxuICAgIHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmO1xuICB9XG5cbiAgZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gICAgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7XG4gICAgfVxuXG4gICAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7XG4gICAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgICB2YWx1ZTogc3ViQ2xhc3MsXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICB9XG4gICAgfSk7XG4gICAgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzO1xuICB9XG5cbiAgdmFyIGV2dE5hbWVzID0gWydjbGljaycsICdkYmxjbGljaycsICdkcmFnZW5kJywgJ21vdXNlZG93bicsICdtb3VzZW91dCcsICdtb3VzZW92ZXInLCAnbW91c2V1cCcsICdyZWNlbnRlciddO1xuXG4gIHZhciB3cmFwcGVkUHJvbWlzZSA9IGZ1bmN0aW9uIHdyYXBwZWRQcm9taXNlKCkge1xuICAgIHZhciB3cmFwcGVkUHJvbWlzZSA9IHt9LFxuICAgICAgICBwcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgd3JhcHBlZFByb21pc2UucmVzb2x2ZSA9IHJlc29sdmU7XG4gICAgICB3cmFwcGVkUHJvbWlzZS5yZWplY3QgPSByZWplY3Q7XG4gICAgfSk7XG4gICAgd3JhcHBlZFByb21pc2UudGhlbiA9IHByb21pc2UudGhlbi5iaW5kKHByb21pc2UpO1xuICAgIHdyYXBwZWRQcm9taXNlLmNhdGNoID0gcHJvbWlzZS5jYXRjaC5iaW5kKHByb21pc2UpO1xuICAgIHdyYXBwZWRQcm9taXNlLnByb21pc2UgPSBwcm9taXNlO1xuXG4gICAgcmV0dXJuIHdyYXBwZWRQcm9taXNlO1xuICB9O1xuXG4gIHZhciBNYXJrZXIgPSBleHBvcnRzLk1hcmtlciA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gICAgX2luaGVyaXRzKE1hcmtlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgICBmdW5jdGlvbiBNYXJrZXIoKSB7XG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTWFya2VyKTtcblxuICAgICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChNYXJrZXIuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihNYXJrZXIpKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgICB9XG5cbiAgICBfY3JlYXRlQ2xhc3MoTWFya2VyLCBbe1xuICAgICAga2V5OiAnY29tcG9uZW50RGlkTW91bnQnLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgICB0aGlzLm1hcmtlclByb21pc2UgPSB3cmFwcGVkUHJvbWlzZSgpO1xuICAgICAgICB0aGlzLnJlbmRlck1hcmtlcigpO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogJ2NvbXBvbmVudERpZFVwZGF0ZScsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wcykge1xuICAgICAgICBpZiAodGhpcy5wcm9wcy5tYXAgIT09IHByZXZQcm9wcy5tYXAgfHwgdGhpcy5wcm9wcy5wb3NpdGlvbiAhPT0gcHJldlByb3BzLnBvc2l0aW9uIHx8IHRoaXMucHJvcHMuaWNvbiAhPT0gcHJldlByb3BzLmljb24pIHtcbiAgICAgICAgICBpZiAodGhpcy5tYXJrZXIpIHtcbiAgICAgICAgICAgIHRoaXMubWFya2VyLnNldE1hcChudWxsKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5yZW5kZXJNYXJrZXIoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogJ2NvbXBvbmVudFdpbGxVbm1vdW50JyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgICAgaWYgKHRoaXMubWFya2VyKSB7XG4gICAgICAgICAgdGhpcy5tYXJrZXIuc2V0TWFwKG51bGwpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiAncmVuZGVyTWFya2VyJyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXJNYXJrZXIoKSB7XG4gICAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgICAgbWFwID0gX3Byb3BzLm1hcCxcbiAgICAgICAgICAgIGdvb2dsZSA9IF9wcm9wcy5nb29nbGUsXG4gICAgICAgICAgICBwb3NpdGlvbiA9IF9wcm9wcy5wb3NpdGlvbixcbiAgICAgICAgICAgIG1hcENlbnRlciA9IF9wcm9wcy5tYXBDZW50ZXIsXG4gICAgICAgICAgICBpY29uID0gX3Byb3BzLmljb24sXG4gICAgICAgICAgICBsYWJlbCA9IF9wcm9wcy5sYWJlbCxcbiAgICAgICAgICAgIGRyYWdnYWJsZSA9IF9wcm9wcy5kcmFnZ2FibGUsXG4gICAgICAgICAgICB0aXRsZSA9IF9wcm9wcy50aXRsZSxcbiAgICAgICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9wcm9wcywgWydtYXAnLCAnZ29vZ2xlJywgJ3Bvc2l0aW9uJywgJ21hcENlbnRlcicsICdpY29uJywgJ2xhYmVsJywgJ2RyYWdnYWJsZScsICd0aXRsZSddKTtcblxuICAgICAgICBpZiAoIWdvb2dsZSkge1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHBvcyA9IHBvc2l0aW9uIHx8IG1hcENlbnRlcjtcbiAgICAgICAgaWYgKCEocG9zIGluc3RhbmNlb2YgZ29vZ2xlLm1hcHMuTGF0TG5nKSkge1xuICAgICAgICAgIHBvcyA9IG5ldyBnb29nbGUubWFwcy5MYXRMbmcocG9zLmxhdCwgcG9zLmxuZyk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgcHJlZiA9IF9leHRlbmRzKHtcbiAgICAgICAgICBtYXA6IG1hcCxcbiAgICAgICAgICBwb3NpdGlvbjogcG9zLFxuICAgICAgICAgIGljb246IGljb24sXG4gICAgICAgICAgbGFiZWw6IGxhYmVsLFxuICAgICAgICAgIHRpdGxlOiB0aXRsZSxcbiAgICAgICAgICBkcmFnZ2FibGU6IGRyYWdnYWJsZVxuICAgICAgICB9LCBwcm9wcyk7XG4gICAgICAgIHRoaXMubWFya2VyID0gbmV3IGdvb2dsZS5tYXBzLk1hcmtlcihwcmVmKTtcblxuICAgICAgICBldnROYW1lcy5mb3JFYWNoKGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgX3RoaXMyLm1hcmtlci5hZGRMaXN0ZW5lcihlLCBfdGhpczIuaGFuZGxlRXZlbnQoZSkpO1xuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLm1hcmtlclByb21pc2UucmVzb2x2ZSh0aGlzLm1hcmtlcik7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiAnZ2V0TWFya2VyJyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRNYXJrZXIoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1hcmtlclByb21pc2U7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiAnaGFuZGxlRXZlbnQnLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGhhbmRsZUV2ZW50KGV2dCkge1xuICAgICAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICB2YXIgZXZ0TmFtZSA9ICdvbicgKyAoMCwgX1N0cmluZy5jYW1lbGl6ZSkoZXZ0KTtcbiAgICAgICAgICBpZiAoX3RoaXMzLnByb3BzW2V2dE5hbWVdKSB7XG4gICAgICAgICAgICBfdGhpczMucHJvcHNbZXZ0TmFtZV0oX3RoaXMzLnByb3BzLCBfdGhpczMubWFya2VyLCBlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiAncmVuZGVyJyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBNYXJrZXI7XG4gIH0oX3JlYWN0Mi5kZWZhdWx0LkNvbXBvbmVudCk7XG5cbiAgTWFya2VyLnByb3BUeXBlcyA9IHtcbiAgICBwb3NpdGlvbjogX3Byb3BUeXBlczIuZGVmYXVsdC5vYmplY3QsXG4gICAgbWFwOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9iamVjdFxuICB9O1xuXG4gIGV2dE5hbWVzLmZvckVhY2goZnVuY3Rpb24gKGUpIHtcbiAgICByZXR1cm4gTWFya2VyLnByb3BUeXBlc1tlXSA9IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYztcbiAgfSk7XG5cbiAgTWFya2VyLmRlZmF1bHRQcm9wcyA9IHtcbiAgICBuYW1lOiAnTWFya2VyJ1xuICB9O1xuXG4gIGV4cG9ydHMuZGVmYXVsdCA9IE1hcmtlcjtcbn0pOyIsIihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gIGlmICh0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkge1xuICAgIGRlZmluZShbJ2V4cG9ydHMnXSwgZmFjdG9yeSk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGV4cG9ydHMgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBmYWN0b3J5KGV4cG9ydHMpO1xuICB9IGVsc2Uge1xuICAgIHZhciBtb2QgPSB7XG4gICAgICBleHBvcnRzOiB7fVxuICAgIH07XG4gICAgZmFjdG9yeShtb2QuZXhwb3J0cyk7XG4gICAgZ2xvYmFsLkdvb2dsZUFwaSA9IG1vZC5leHBvcnRzO1xuICB9XG59KSh0aGlzLCBmdW5jdGlvbiAoZXhwb3J0cykge1xuICAndXNlIHN0cmljdCc7XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbiAgfSk7XG4gIHZhciBHb29nbGVBcGkgPSBleHBvcnRzLkdvb2dsZUFwaSA9IGZ1bmN0aW9uIEdvb2dsZUFwaShvcHRzKSB7XG4gICAgb3B0cyA9IG9wdHMgfHwge307XG5cbiAgICBpZiAoIW9wdHMuaGFzT3duUHJvcGVydHkoJ2FwaUtleScpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1lvdSBtdXN0IHBhc3MgYW4gYXBpS2V5IHRvIHVzZSBHb29nbGVBcGknKTtcbiAgICB9XG5cbiAgICB2YXIgYXBpS2V5ID0gb3B0cy5hcGlLZXk7XG4gICAgdmFyIGxpYnJhcmllcyA9IG9wdHMubGlicmFyaWVzIHx8IFsncGxhY2VzJ107XG4gICAgdmFyIGNsaWVudCA9IG9wdHMuY2xpZW50O1xuICAgIHZhciBVUkwgPSBvcHRzLnVybCB8fCAnaHR0cHM6Ly9tYXBzLmdvb2dsZWFwaXMuY29tL21hcHMvYXBpL2pzJztcblxuICAgIHZhciBnb29nbGVWZXJzaW9uID0gb3B0cy52ZXJzaW9uIHx8ICczLjMxJztcblxuICAgIHZhciBzY3JpcHQgPSBudWxsO1xuICAgIHZhciBnb29nbGUgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuZ29vZ2xlIHx8IG51bGw7XG4gICAgdmFyIGxvYWRpbmcgPSBmYWxzZTtcbiAgICB2YXIgY2hhbm5lbCA9IG51bGw7XG4gICAgdmFyIGxhbmd1YWdlID0gb3B0cy5sYW5ndWFnZTtcbiAgICB2YXIgcmVnaW9uID0gb3B0cy5yZWdpb24gfHwgbnVsbDtcblxuICAgIHZhciBvbkxvYWRFdmVudHMgPSBbXTtcblxuICAgIHZhciB1cmwgPSBmdW5jdGlvbiB1cmwoKSB7XG4gICAgICB2YXIgdXJsID0gVVJMO1xuICAgICAgdmFyIHBhcmFtcyA9IHtcbiAgICAgICAga2V5OiBhcGlLZXksXG4gICAgICAgIGNhbGxiYWNrOiAnQ0FMTEJBQ0tfTkFNRScsXG4gICAgICAgIGxpYnJhcmllczogbGlicmFyaWVzLmpvaW4oJywnKSxcbiAgICAgICAgY2xpZW50OiBjbGllbnQsXG4gICAgICAgIHY6IGdvb2dsZVZlcnNpb24sXG4gICAgICAgIGNoYW5uZWw6IGNoYW5uZWwsXG4gICAgICAgIGxhbmd1YWdlOiBsYW5ndWFnZSxcbiAgICAgICAgcmVnaW9uOiByZWdpb25cbiAgICAgIH07XG5cbiAgICAgIHZhciBwYXJhbVN0ciA9IE9iamVjdC5rZXlzKHBhcmFtcykuZmlsdGVyKGZ1bmN0aW9uIChrKSB7XG4gICAgICAgIHJldHVybiAhIXBhcmFtc1trXTtcbiAgICAgIH0pLm1hcChmdW5jdGlvbiAoaykge1xuICAgICAgICByZXR1cm4gayArICc9JyArIHBhcmFtc1trXTtcbiAgICAgIH0pLmpvaW4oJyYnKTtcblxuICAgICAgcmV0dXJuIHVybCArICc/JyArIHBhcmFtU3RyO1xuICAgIH07XG5cbiAgICByZXR1cm4gdXJsKCk7XG4gIH07XG5cbiAgZXhwb3J0cy5kZWZhdWx0ID0gR29vZ2xlQXBpO1xufSk7IiwiKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgaWYgKHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSB7XG4gICAgZGVmaW5lKFsnbW9kdWxlJ10sIGZhY3RvcnkpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBleHBvcnRzICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgZmFjdG9yeShtb2R1bGUpO1xuICB9IGVsc2Uge1xuICAgIHZhciBtb2QgPSB7XG4gICAgICBleHBvcnRzOiB7fVxuICAgIH07XG4gICAgZmFjdG9yeShtb2QpO1xuICAgIGdsb2JhbC53aW5kb3dPckdsb2JhbCA9IG1vZC5leHBvcnRzO1xuICB9XG59KSh0aGlzLCBmdW5jdGlvbiAobW9kdWxlKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICB2YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikge1xuICAgIHJldHVybiB0eXBlb2Ygb2JqO1xuICB9IDogZnVuY3Rpb24gKG9iaikge1xuICAgIHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqO1xuICB9O1xuXG4gIG1vZHVsZS5leHBvcnRzID0gKHR5cGVvZiBzZWxmID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihzZWxmKSkgPT09ICdvYmplY3QnICYmIHNlbGYuc2VsZiA9PT0gc2VsZiAmJiBzZWxmIHx8ICh0eXBlb2YgZ2xvYmFsID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihnbG9iYWwpKSA9PT0gJ29iamVjdCcgJiYgZ2xvYmFsLmdsb2JhbCA9PT0gZ2xvYmFsICYmIGdsb2JhbCB8fCB1bmRlZmluZWQ7XG59KTsiLCIoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgIGlmICh0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkge1xuICAgICAgICBkZWZpbmUoWydleHBvcnRzJywgJy4vd2luZG93T3JHbG9iYWwnXSwgZmFjdG9yeSk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZXhwb3J0cyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBmYWN0b3J5KGV4cG9ydHMsIHJlcXVpcmUoJy4vd2luZG93T3JHbG9iYWwnKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIG1vZCA9IHtcbiAgICAgICAgICAgIGV4cG9ydHM6IHt9XG4gICAgICAgIH07XG4gICAgICAgIGZhY3RvcnkobW9kLmV4cG9ydHMsIGdsb2JhbC53aW5kb3dPckdsb2JhbCk7XG4gICAgICAgIGdsb2JhbC5TY3JpcHRDYWNoZSA9IG1vZC5leHBvcnRzO1xuICAgIH1cbn0pKHRoaXMsIGZ1bmN0aW9uIChleHBvcnRzLCB3aW5kb3cpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICAgICAgdmFsdWU6IHRydWVcbiAgICB9KTtcbiAgICB2YXIgY291bnRlciA9IDA7XG4gICAgdmFyIHNjcmlwdE1hcCA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5fc2NyaXB0TWFwIHx8IG5ldyBNYXAoKTtcbiAgICB2YXIgU2NyaXB0Q2FjaGUgPSBleHBvcnRzLlNjcmlwdENhY2hlID0gZnVuY3Rpb24gKGdsb2JhbCkge1xuICAgICAgICBnbG9iYWwuX3NjcmlwdE1hcCA9IGdsb2JhbC5fc2NyaXB0TWFwIHx8IHNjcmlwdE1hcDtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIFNjcmlwdENhY2hlKHNjcmlwdHMpIHtcbiAgICAgICAgICAgIHZhciBDYWNoZSA9IHt9O1xuXG4gICAgICAgICAgICBDYWNoZS5fb25Mb2FkID0gZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoY2IpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlZ2lzdGVyZWQgPSB0cnVlO1xuXG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHVucmVnaXN0ZXIoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZWdpc3RlcmVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB2YXIgc3RvcmVkID0gc2NyaXB0TWFwLmdldChrZXkpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChzdG9yZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0b3JlZC5wcm9taXNlLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZWdpc3RlcmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0b3JlZC5lcnJvciA/IGNiKHN0b3JlZC5lcnJvcikgOiBjYihudWxsLCBzdG9yZWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzdG9yZWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRPRE86XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdW5yZWdpc3RlcjtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgQ2FjaGUuX3NjcmlwdFRhZyA9IGZ1bmN0aW9uIChrZXksIHNyYykge1xuICAgICAgICAgICAgICAgIGlmICghc2NyaXB0TWFwLmhhcyhrZXkpKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFNlcnZlciBzaWRlIHJlbmRlcmluZyBlbnZpcm9ubWVudHMgZG9uJ3QgYWx3YXlzIGhhdmUgYWNjZXNzIHRvIHRoZSBgZG9jdW1lbnRgIGdsb2JhbC5cbiAgICAgICAgICAgICAgICAgICAgLy8gSW4gdGhlc2UgY2FzZXMsIHdlJ3JlIG5vdCBnb2luZyB0byBiZSBhYmxlIHRvIHJldHVybiBhIHNjcmlwdCB0YWcsIHNvIGp1c3QgcmV0dXJuIG51bGwuXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZG9jdW1lbnQgPT09ICd1bmRlZmluZWQnKSByZXR1cm4gbnVsbDtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgdGFnID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBwcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlc29sdmVkID0gZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JlZCA9IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvZHkgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnYm9keScpWzBdO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB0YWcudHlwZSA9ICd0ZXh0L2phdmFzY3JpcHQnO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGFnLmFzeW5jID0gZmFsc2U7IC8vIExvYWQgaW4gb3JkZXJcblxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNiTmFtZSA9ICdsb2FkZXJDQicgKyBjb3VudGVyKysgKyBEYXRlLm5vdygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNiID0gdm9pZCAwO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaGFuZGxlUmVzdWx0ID0gZnVuY3Rpb24gaGFuZGxlUmVzdWx0KHN0YXRlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChldnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHN0b3JlZCA9IHNjcmlwdE1hcC5nZXQoa2V5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXRlID09PSAnbG9hZGVkJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RvcmVkLnJlc29sdmVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoc3JjKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHN0b3JlZC5oYW5kbGVycy5mb3JFYWNoKGggPT4gaC5jYWxsKG51bGwsIHN0b3JlZCkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBzdG9yZWQuaGFuZGxlcnMgPSBbXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHN0YXRlID09PSAnZXJyb3InKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdG9yZWQuZXJyb3JlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBzdG9yZWQuaGFuZGxlcnMuZm9yRWFjaChoID0+IGguY2FsbChudWxsLCBzdG9yZWQpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gc3RvcmVkLmhhbmRsZXJzID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoZXZ0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdG9yZWQubG9hZGVkID0gdHJ1ZTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGVhbnVwKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjbGVhbnVwID0gZnVuY3Rpb24gY2xlYW51cCgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZ2xvYmFsW2NiTmFtZV0gJiYgdHlwZW9mIGdsb2JhbFtjYk5hbWVdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdsb2JhbFtjYk5hbWVdID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIGdsb2JhbFtjYk5hbWVdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRhZy5vbmxvYWQgPSBoYW5kbGVSZXN1bHQoJ2xvYWRlZCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGFnLm9uZXJyb3IgPSBoYW5kbGVSZXN1bHQoJ2Vycm9yJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0YWcub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZVJlc3VsdCh0YWcucmVhZHlTdGF0ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBQaWNrIG9mZiBjYWxsYmFjaywgaWYgdGhlcmUgaXMgb25lXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3JjLm1hdGNoKC9jYWxsYmFjaz1DQUxMQkFDS19OQU1FLykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcmMgPSBzcmMucmVwbGFjZSgvKGNhbGxiYWNrPSlbXlxcJl0rLywgJyQxJyArIGNiTmFtZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2IgPSB3aW5kb3dbY2JOYW1lXSA9IHRhZy5vbmxvYWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhZy5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgdGFnLm9ubG9hZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB0YWcuYWRkRXZlbnRMaXN0ZW5lcignZXJyb3InLCB0YWcub25lcnJvcik7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRhZy5zcmMgPSBzcmM7XG4gICAgICAgICAgICAgICAgICAgICAgICBib2R5LmFwcGVuZENoaWxkKHRhZyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0YWc7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB2YXIgaW5pdGlhbFN0YXRlID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgbG9hZGVkOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb21pc2U6IHByb21pc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICB0YWc6IHRhZ1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICBzY3JpcHRNYXAuc2V0KGtleSwgaW5pdGlhbFN0YXRlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNjcmlwdE1hcC5nZXQoa2V5KTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIC8vIGxldCBzY3JpcHRUYWdzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnc2NyaXB0JylcbiAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAvLyBOb2RlTGlzdC5wcm90b3R5cGUuZmlsdGVyID0gQXJyYXkucHJvdG90eXBlLmZpbHRlcjtcbiAgICAgICAgICAgIC8vIE5vZGVMaXN0LnByb3RvdHlwZS5tYXAgPSBBcnJheS5wcm90b3R5cGUubWFwO1xuICAgICAgICAgICAgLy8gY29uc3QgaW5pdGlhbFNjcmlwdHMgPSBzY3JpcHRUYWdzXG4gICAgICAgICAgICAvLyAgIC5maWx0ZXIocyA9PiAhIXMuc3JjKVxuICAgICAgICAgICAgLy8gICAubWFwKHMgPT4gcy5zcmMuc3BsaXQoJz8nKVswXSlcbiAgICAgICAgICAgIC8vICAgLnJlZHVjZSgobWVtbywgc2NyaXB0KSA9PiB7XG4gICAgICAgICAgICAvLyAgICAgbWVtb1tzY3JpcHRdID0gc2NyaXB0O1xuICAgICAgICAgICAgLy8gICAgIHJldHVybiBtZW1vO1xuICAgICAgICAgICAgLy8gICB9LCB7fSk7XG5cbiAgICAgICAgICAgIE9iamVjdC5rZXlzKHNjcmlwdHMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgICAgIHZhciBzY3JpcHQgPSBzY3JpcHRzW2tleV07XG5cbiAgICAgICAgICAgICAgICB2YXIgdGFnID0gd2luZG93Ll9zY3JpcHRNYXAuaGFzKGtleSkgPyB3aW5kb3cuX3NjcmlwdE1hcC5nZXQoa2V5KS50YWcgOiBDYWNoZS5fc2NyaXB0VGFnKGtleSwgc2NyaXB0KTtcblxuICAgICAgICAgICAgICAgIENhY2hlW2tleV0gPSB7XG4gICAgICAgICAgICAgICAgICAgIHRhZzogdGFnLFxuICAgICAgICAgICAgICAgICAgICBvbkxvYWQ6IENhY2hlLl9vbkxvYWQoa2V5KVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcmV0dXJuIENhY2hlO1xuICAgICAgICB9O1xuICAgIH0od2luZG93KTtcblxuICAgIGV4cG9ydHMuZGVmYXVsdCA9IFNjcmlwdENhY2hlO1xufSk7IiwiKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgaWYgKHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSB7XG4gICAgZGVmaW5lKFsnZXhwb3J0cycsICdyZWFjdCcsICdyZWFjdC1kb20nLCAnLi9saWIvU2NyaXB0Q2FjaGUnLCAnLi9saWIvR29vZ2xlQXBpJ10sIGZhY3RvcnkpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBleHBvcnRzICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgZmFjdG9yeShleHBvcnRzLCByZXF1aXJlKCdyZWFjdCcpLCByZXF1aXJlKCdyZWFjdC1kb20nKSwgcmVxdWlyZSgnLi9saWIvU2NyaXB0Q2FjaGUnKSwgcmVxdWlyZSgnLi9saWIvR29vZ2xlQXBpJykpO1xuICB9IGVsc2Uge1xuICAgIHZhciBtb2QgPSB7XG4gICAgICBleHBvcnRzOiB7fVxuICAgIH07XG4gICAgZmFjdG9yeShtb2QuZXhwb3J0cywgZ2xvYmFsLnJlYWN0LCBnbG9iYWwucmVhY3REb20sIGdsb2JhbC5TY3JpcHRDYWNoZSwgZ2xvYmFsLkdvb2dsZUFwaSk7XG4gICAgZ2xvYmFsLkdvb2dsZUFwaUNvbXBvbmVudCA9IG1vZC5leHBvcnRzO1xuICB9XG59KSh0aGlzLCBmdW5jdGlvbiAoZXhwb3J0cywgX3JlYWN0LCBfcmVhY3REb20sIF9TY3JpcHRDYWNoZSwgX0dvb2dsZUFwaSkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbiAgfSk7XG4gIGV4cG9ydHMud3JhcHBlciA9IHVuZGVmaW5lZDtcblxuICB2YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxuICB2YXIgX3JlYWN0RG9tMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0RG9tKTtcblxuICB2YXIgX0dvb2dsZUFwaTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9Hb29nbGVBcGkpO1xuXG4gIGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7XG4gICAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHtcbiAgICAgIGRlZmF1bHQ6IG9ialxuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gICAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7XG4gICAgfVxuICB9XG5cbiAgdmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtcbiAgICAgICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO1xuICAgICAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7XG4gICAgICAgIGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xuICAgICAgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtcbiAgICAgIGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO1xuICAgICAgcmV0dXJuIENvbnN0cnVjdG9yO1xuICAgIH07XG4gIH0oKTtcblxuICBmdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7XG4gICAgaWYgKCFzZWxmKSB7XG4gICAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7XG4gIH1cblxuICBmdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgICBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTtcbiAgICB9XG5cbiAgICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHtcbiAgICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICAgIHZhbHVlOiBzdWJDbGFzcyxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7XG4gIH1cblxuICB2YXIgZGVmYXVsdE1hcENvbmZpZyA9IHt9O1xuXG4gIHZhciBzZXJpYWxpemUgPSBmdW5jdGlvbiBzZXJpYWxpemUob2JqKSB7XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KG9iaik7XG4gIH07XG4gIHZhciBpc1NhbWUgPSBmdW5jdGlvbiBpc1NhbWUob2JqMSwgb2JqMikge1xuICAgIHJldHVybiBvYmoxID09PSBvYmoyIHx8IHNlcmlhbGl6ZShvYmoxKSA9PT0gc2VyaWFsaXplKG9iajIpO1xuICB9O1xuXG4gIHZhciBkZWZhdWx0Q3JlYXRlQ2FjaGUgPSBmdW5jdGlvbiBkZWZhdWx0Q3JlYXRlQ2FjaGUob3B0aW9ucykge1xuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgIHZhciBhcGlLZXkgPSBvcHRpb25zLmFwaUtleTtcbiAgICB2YXIgbGlicmFyaWVzID0gb3B0aW9ucy5saWJyYXJpZXMgfHwgWydwbGFjZXMnXTtcbiAgICB2YXIgdmVyc2lvbiA9IG9wdGlvbnMudmVyc2lvbiB8fCAnMyc7XG4gICAgdmFyIGxhbmd1YWdlID0gb3B0aW9ucy5sYW5ndWFnZSB8fCAnZW4nO1xuICAgIHZhciB1cmwgPSBvcHRpb25zLnVybDtcbiAgICB2YXIgY2xpZW50ID0gb3B0aW9ucy5jbGllbnQ7XG5cbiAgICByZXR1cm4gKDAsIF9TY3JpcHRDYWNoZS5TY3JpcHRDYWNoZSkoe1xuICAgICAgZ29vZ2xlOiAoMCwgX0dvb2dsZUFwaTIuZGVmYXVsdCkoe1xuICAgICAgICBhcGlLZXk6IGFwaUtleSxcbiAgICAgICAgbGFuZ3VhZ2U6IGxhbmd1YWdlLFxuICAgICAgICBsaWJyYXJpZXM6IGxpYnJhcmllcyxcbiAgICAgICAgdmVyc2lvbjogdmVyc2lvbixcbiAgICAgICAgdXJsOiB1cmwsXG4gICAgICAgIGNsaWVudDogY2xpZW50XG4gICAgICB9KVxuICAgIH0pO1xuICB9O1xuXG4gIHZhciBEZWZhdWx0TG9hZGluZ0NvbnRhaW5lciA9IGZ1bmN0aW9uIERlZmF1bHRMb2FkaW5nQ29udGFpbmVyKHByb3BzKSB7XG4gICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgJ2RpdicsXG4gICAgICBudWxsLFxuICAgICAgJ0xvYWRpbmcuLi4nXG4gICAgKTtcbiAgfTtcblxuICB2YXIgd3JhcHBlciA9IGV4cG9ydHMud3JhcHBlciA9IGZ1bmN0aW9uIHdyYXBwZXIoaW5wdXQpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKFdyYXBwZWRDb21wb25lbnQpIHtcbiAgICAgIHZhciBXcmFwcGVyID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgICAgICAgX2luaGVyaXRzKFdyYXBwZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gICAgICAgIGZ1bmN0aW9uIFdyYXBwZXIocHJvcHMsIGNvbnRleHQpIHtcbiAgICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgV3JhcHBlcik7XG5cbiAgICAgICAgICAvLyBCdWlsZCBvcHRpb25zIGZyb20gaW5wdXRcbiAgICAgICAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoV3JhcHBlci5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKFdyYXBwZXIpKS5jYWxsKHRoaXMsIHByb3BzLCBjb250ZXh0KSk7XG5cbiAgICAgICAgICB2YXIgb3B0aW9ucyA9IHR5cGVvZiBpbnB1dCA9PT0gJ2Z1bmN0aW9uJyA/IGlucHV0KHByb3BzKSA6IGlucHV0O1xuXG4gICAgICAgICAgLy8gSW5pdGlhbGl6ZSByZXF1aXJlZCBHb29nbGUgc2NyaXB0cyBhbmQgb3RoZXIgY29uZmlndXJlZCBvcHRpb25zXG4gICAgICAgICAgX3RoaXMuaW5pdGlhbGl6ZShvcHRpb25zKTtcblxuICAgICAgICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgICAgICAgbG9hZGVkOiBmYWxzZSxcbiAgICAgICAgICAgIG1hcDogbnVsbCxcbiAgICAgICAgICAgIGdvb2dsZTogbnVsbCxcbiAgICAgICAgICAgIG9wdGlvbnM6IG9wdGlvbnNcbiAgICAgICAgICB9O1xuICAgICAgICAgIHJldHVybiBfdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIF9jcmVhdGVDbGFzcyhXcmFwcGVyLCBbe1xuICAgICAgICAgIGtleTogJ2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMnLFxuICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKHByb3BzKSB7XG4gICAgICAgICAgICAvLyBEbyBub3QgdXBkYXRlIGlucHV0IGlmIGl0J3Mgbm90IGR5bmFtaWNcbiAgICAgICAgICAgIGlmICh0eXBlb2YgaW5wdXQgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBHZXQgb3B0aW9ucyB0byBjb21wYXJlXG4gICAgICAgICAgICB2YXIgcHJldk9wdGlvbnMgPSB0aGlzLnN0YXRlLm9wdGlvbnM7XG4gICAgICAgICAgICB2YXIgb3B0aW9ucyA9IHR5cGVvZiBpbnB1dCA9PT0gJ2Z1bmN0aW9uJyA/IGlucHV0KHByb3BzKSA6IGlucHV0O1xuXG4gICAgICAgICAgICAvLyBJZ25vcmUgd2hlbiBvcHRpb25zIGFyZSBub3QgY2hhbmdlZFxuICAgICAgICAgICAgaWYgKGlzU2FtZShvcHRpb25zLCBwcmV2T3B0aW9ucykpIHtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBJbml0aWFsaXplIHdpdGggbmV3IG9wdGlvbnNcbiAgICAgICAgICAgIHRoaXMuaW5pdGlhbGl6ZShvcHRpb25zKTtcblxuICAgICAgICAgICAgLy8gU2F2ZSBuZXcgb3B0aW9ucyBpbiBjb21wb25lbnQgc3RhdGUsXG4gICAgICAgICAgICAvLyBhbmQgcmVtb3ZlIGluZm9ybWF0aW9uIGFib3V0IHByZXZpb3VzIEFQSSBoYW5kbGVyc1xuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgIG9wdGlvbnM6IG9wdGlvbnMsXG4gICAgICAgICAgICAgIGxvYWRlZDogZmFsc2UsXG4gICAgICAgICAgICAgIGdvb2dsZTogbnVsbFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9LCB7XG4gICAgICAgICAga2V5OiAnaW5pdGlhbGl6ZScsXG4gICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGluaXRpYWxpemUob3B0aW9ucykge1xuICAgICAgICAgICAgLy8gQXZvaWQgcmFjZSBjb25kaXRpb246IHJlbW92ZSBwcmV2aW91cyAnbG9hZCcgbGlzdGVuZXJcbiAgICAgICAgICAgIGlmICh0aGlzLnVucmVnaXN0ZXJMb2FkSGFuZGxlcikge1xuICAgICAgICAgICAgICB0aGlzLnVucmVnaXN0ZXJMb2FkSGFuZGxlcigpO1xuICAgICAgICAgICAgICB0aGlzLnVucmVnaXN0ZXJMb2FkSGFuZGxlciA9IG51bGw7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIExvYWQgY2FjaGUgZmFjdG9yeVxuICAgICAgICAgICAgdmFyIGNyZWF0ZUNhY2hlID0gb3B0aW9ucy5jcmVhdGVDYWNoZSB8fCBkZWZhdWx0Q3JlYXRlQ2FjaGU7XG5cbiAgICAgICAgICAgIC8vIEJ1aWxkIHNjcmlwdFxuICAgICAgICAgICAgdGhpcy5zY3JpcHRDYWNoZSA9IGNyZWF0ZUNhY2hlKG9wdGlvbnMpO1xuICAgICAgICAgICAgdGhpcy51bnJlZ2lzdGVyTG9hZEhhbmRsZXIgPSB0aGlzLnNjcmlwdENhY2hlLmdvb2dsZS5vbkxvYWQodGhpcy5vbkxvYWQuYmluZCh0aGlzKSk7XG5cbiAgICAgICAgICAgIC8vIFN0b3JlIGluZm9ybWF0aW9uIGFib3V0IGxvYWRpbmcgY29udGFpbmVyXG4gICAgICAgICAgICB0aGlzLkxvYWRpbmdDb250YWluZXIgPSBvcHRpb25zLkxvYWRpbmdDb250YWluZXIgfHwgRGVmYXVsdExvYWRpbmdDb250YWluZXI7XG4gICAgICAgICAgfVxuICAgICAgICB9LCB7XG4gICAgICAgICAga2V5OiAnb25Mb2FkJyxcbiAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gb25Mb2FkKGVyciwgdGFnKSB7XG4gICAgICAgICAgICB0aGlzLl9nYXBpID0gd2luZG93Lmdvb2dsZTtcblxuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGxvYWRlZDogdHJ1ZSwgZ29vZ2xlOiB0aGlzLl9nYXBpIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSwge1xuICAgICAgICAgIGtleTogJ3JlbmRlcicsXG4gICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgICAgICAgIHZhciBMb2FkaW5nQ29udGFpbmVyID0gdGhpcy5Mb2FkaW5nQ29udGFpbmVyO1xuXG4gICAgICAgICAgICBpZiAoIXRoaXMuc3RhdGUubG9hZGVkKSB7XG4gICAgICAgICAgICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChMb2FkaW5nQ29udGFpbmVyLCBudWxsKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIHByb3BzID0gT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5wcm9wcywge1xuICAgICAgICAgICAgICBsb2FkZWQ6IHRoaXMuc3RhdGUubG9hZGVkLFxuICAgICAgICAgICAgICBnb29nbGU6IHdpbmRvdy5nb29nbGVcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChXcmFwcGVkQ29tcG9uZW50LCBwcm9wcyksXG4gICAgICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IHJlZjogJ21hcCcgfSlcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9XSk7XG5cbiAgICAgICAgcmV0dXJuIFdyYXBwZXI7XG4gICAgICB9KF9yZWFjdDIuZGVmYXVsdC5Db21wb25lbnQpO1xuXG4gICAgICByZXR1cm4gV3JhcHBlcjtcbiAgICB9O1xuICB9O1xuXG4gIGV4cG9ydHMuZGVmYXVsdCA9IHdyYXBwZXI7XG59KTsiLCIoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICBpZiAodHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIHtcbiAgICBkZWZpbmUoWydleHBvcnRzJywgJy4vR29vZ2xlQXBpQ29tcG9uZW50JywgJy4vY29tcG9uZW50cy9NYXJrZXInLCAnLi9jb21wb25lbnRzL0luZm9XaW5kb3cnLCAnLi9jb21wb25lbnRzL0hlYXRNYXAnLCAnLi9jb21wb25lbnRzL1BvbHlnb24nLCAnLi9jb21wb25lbnRzL1BvbHlsaW5lJywgJ3JlYWN0JywgJ3Byb3AtdHlwZXMnLCAncmVhY3QtZG9tJywgJy4vbGliL1N0cmluZycsICcuL2xpYi9jYW5jZWxhYmxlUHJvbWlzZSddLCBmYWN0b3J5KTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgZXhwb3J0cyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGZhY3RvcnkoZXhwb3J0cywgcmVxdWlyZSgnLi9Hb29nbGVBcGlDb21wb25lbnQnKSwgcmVxdWlyZSgnLi9jb21wb25lbnRzL01hcmtlcicpLCByZXF1aXJlKCcuL2NvbXBvbmVudHMvSW5mb1dpbmRvdycpLCByZXF1aXJlKCcuL2NvbXBvbmVudHMvSGVhdE1hcCcpLCByZXF1aXJlKCcuL2NvbXBvbmVudHMvUG9seWdvbicpLCByZXF1aXJlKCcuL2NvbXBvbmVudHMvUG9seWxpbmUnKSwgcmVxdWlyZSgncmVhY3QnKSwgcmVxdWlyZSgncHJvcC10eXBlcycpLCByZXF1aXJlKCdyZWFjdC1kb20nKSwgcmVxdWlyZSgnLi9saWIvU3RyaW5nJyksIHJlcXVpcmUoJy4vbGliL2NhbmNlbGFibGVQcm9taXNlJykpO1xuICB9IGVsc2Uge1xuICAgIHZhciBtb2QgPSB7XG4gICAgICBleHBvcnRzOiB7fVxuICAgIH07XG4gICAgZmFjdG9yeShtb2QuZXhwb3J0cywgZ2xvYmFsLkdvb2dsZUFwaUNvbXBvbmVudCwgZ2xvYmFsLk1hcmtlciwgZ2xvYmFsLkluZm9XaW5kb3csIGdsb2JhbC5IZWF0TWFwLCBnbG9iYWwuUG9seWdvbiwgZ2xvYmFsLlBvbHlsaW5lLCBnbG9iYWwucmVhY3QsIGdsb2JhbC5wcm9wVHlwZXMsIGdsb2JhbC5yZWFjdERvbSwgZ2xvYmFsLlN0cmluZywgZ2xvYmFsLmNhbmNlbGFibGVQcm9taXNlKTtcbiAgICBnbG9iYWwuaW5kZXggPSBtb2QuZXhwb3J0cztcbiAgfVxufSkodGhpcywgZnVuY3Rpb24gKGV4cG9ydHMsIF9Hb29nbGVBcGlDb21wb25lbnQsIF9NYXJrZXIsIF9JbmZvV2luZG93LCBfSGVhdE1hcCwgX1BvbHlnb24sIF9Qb2x5bGluZSwgX3JlYWN0LCBfcHJvcFR5cGVzLCBfcmVhY3REb20sIF9TdHJpbmcsIF9jYW5jZWxhYmxlUHJvbWlzZSkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbiAgfSk7XG4gIGV4cG9ydHMuTWFwID0gZXhwb3J0cy5Qb2x5bGluZSA9IGV4cG9ydHMuUG9seWdvbiA9IGV4cG9ydHMuSGVhdE1hcCA9IGV4cG9ydHMuSW5mb1dpbmRvdyA9IGV4cG9ydHMuTWFya2VyID0gZXhwb3J0cy5Hb29nbGVBcGlXcmFwcGVyID0gdW5kZWZpbmVkO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ0dvb2dsZUFwaVdyYXBwZXInLCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBfR29vZ2xlQXBpQ29tcG9uZW50LndyYXBwZXI7XG4gICAgfVxuICB9KTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdNYXJrZXInLCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBfTWFya2VyLk1hcmtlcjtcbiAgICB9XG4gIH0pO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ0luZm9XaW5kb3cnLCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBfSW5mb1dpbmRvdy5JbmZvV2luZG93O1xuICAgIH1cbiAgfSk7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnSGVhdE1hcCcsIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIF9IZWF0TWFwLkhlYXRNYXA7XG4gICAgfVxuICB9KTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdQb2x5Z29uJywge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gX1BvbHlnb24uUG9seWdvbjtcbiAgICB9XG4gIH0pO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ1BvbHlsaW5lJywge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gX1BvbHlsaW5lLlBvbHlsaW5lO1xuICAgIH1cbiAgfSk7XG5cbiAgdmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbiAgdmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblxuICB2YXIgX3JlYWN0RG9tMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0RG9tKTtcblxuICBmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikge1xuICAgIHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7XG4gICAgICBkZWZhdWx0OiBvYmpcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikge1xuICAgIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07XG4gICAgICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTtcbiAgICAgICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgICAgICBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgICAgIGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gICAgICBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtcbiAgICAgIHJldHVybiBDb25zdHJ1Y3RvcjtcbiAgICB9O1xuICB9KCk7XG5cbiAgZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkge1xuICAgIGlmICghc2VsZikge1xuICAgICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO1xuICAgIH1cblxuICAgIHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmO1xuICB9XG5cbiAgZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gICAgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7XG4gICAgfVxuXG4gICAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7XG4gICAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgICB2YWx1ZTogc3ViQ2xhc3MsXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICB9XG4gICAgfSk7XG4gICAgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzO1xuICB9XG5cbiAgdmFyIG1hcFN0eWxlcyA9IHtcbiAgICBjb250YWluZXI6IHtcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgIGhlaWdodDogJzEwMCUnXG4gICAgfSxcbiAgICBtYXA6IHtcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgbGVmdDogMCxcbiAgICAgIHJpZ2h0OiAwLFxuICAgICAgYm90dG9tOiAwLFxuICAgICAgdG9wOiAwXG4gICAgfVxuICB9O1xuXG4gIHZhciBldnROYW1lcyA9IFsncmVhZHknLCAnY2xpY2snLCAnZHJhZ2VuZCcsICdyZWNlbnRlcicsICdib3VuZHNfY2hhbmdlZCcsICdjZW50ZXJfY2hhbmdlZCcsICdkYmxjbGljaycsICdkcmFnc3RhcnQnLCAnaGVhZGluZ19jaGFuZ2UnLCAnaWRsZScsICdtYXB0eXBlaWRfY2hhbmdlZCcsICdtb3VzZW1vdmUnLCAnbW91c2VvdXQnLCAnbW91c2VvdmVyJywgJ3Byb2plY3Rpb25fY2hhbmdlZCcsICdyZXNpemUnLCAncmlnaHRjbGljaycsICd0aWxlc2xvYWRlZCcsICd0aWx0X2NoYW5nZWQnLCAnem9vbV9jaGFuZ2VkJ107XG5cbiAgdmFyIE1hcCA9IGV4cG9ydHMuTWFwID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgICBfaW5oZXJpdHMoTWFwLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICAgIGZ1bmN0aW9uIE1hcChwcm9wcykge1xuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE1hcCk7XG5cbiAgICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChNYXAuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihNYXApKS5jYWxsKHRoaXMsIHByb3BzKSk7XG5cbiAgICAgIGlmICghcHJvcHMuaGFzT3duUHJvcGVydHkoJ2dvb2dsZScpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignWW91IG11c3QgaW5jbHVkZSBhIGBnb29nbGVgIHByb3AnKTtcbiAgICAgIH1cblxuICAgICAgX3RoaXMubGlzdGVuZXJzID0ge307XG4gICAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgY3VycmVudExvY2F0aW9uOiB7XG4gICAgICAgICAgbGF0OiBfdGhpcy5wcm9wcy5pbml0aWFsQ2VudGVyLmxhdCxcbiAgICAgICAgICBsbmc6IF90aGlzLnByb3BzLmluaXRpYWxDZW50ZXIubG5nXG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuXG4gICAgX2NyZWF0ZUNsYXNzKE1hcCwgW3tcbiAgICAgIGtleTogJ2NvbXBvbmVudERpZE1vdW50JyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgICAgaWYgKHRoaXMucHJvcHMuY2VudGVyQXJvdW5kQ3VycmVudExvY2F0aW9uKSB7XG4gICAgICAgICAgaWYgKG5hdmlnYXRvciAmJiBuYXZpZ2F0b3IuZ2VvbG9jYXRpb24pIHtcbiAgICAgICAgICAgIHRoaXMuZ2VvUHJvbWlzZSA9ICgwLCBfY2FuY2VsYWJsZVByb21pc2UubWFrZUNhbmNlbGFibGUpKG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgICAgbmF2aWdhdG9yLmdlb2xvY2F0aW9uLmdldEN1cnJlbnRQb3NpdGlvbihyZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgICAgfSkpO1xuXG4gICAgICAgICAgICB0aGlzLmdlb1Byb21pc2UucHJvbWlzZS50aGVuKGZ1bmN0aW9uIChwb3MpIHtcbiAgICAgICAgICAgICAgdmFyIGNvb3JkcyA9IHBvcy5jb29yZHM7XG4gICAgICAgICAgICAgIF90aGlzMi5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgY3VycmVudExvY2F0aW9uOiB7XG4gICAgICAgICAgICAgICAgICBsYXQ6IGNvb3Jkcy5sYXRpdHVkZSxcbiAgICAgICAgICAgICAgICAgIGxuZzogY29vcmRzLmxvbmdpdHVkZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICByZXR1cm4gZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLmxvYWRNYXAoKTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6ICdjb21wb25lbnREaWRVcGRhdGUnLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMsIHByZXZTdGF0ZSkge1xuICAgICAgICBpZiAocHJldlByb3BzLmdvb2dsZSAhPT0gdGhpcy5wcm9wcy5nb29nbGUpIHtcbiAgICAgICAgICB0aGlzLmxvYWRNYXAoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5wcm9wcy52aXNpYmxlICE9PSBwcmV2UHJvcHMudmlzaWJsZSkge1xuICAgICAgICAgIHRoaXMucmVzdHlsZU1hcCgpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnByb3BzLnpvb20gIT09IHByZXZQcm9wcy56b29tKSB7XG4gICAgICAgICAgdGhpcy5tYXAuc2V0Wm9vbSh0aGlzLnByb3BzLnpvb20pO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnByb3BzLmNlbnRlciAhPT0gcHJldlByb3BzLmNlbnRlcikge1xuICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgY3VycmVudExvY2F0aW9uOiB0aGlzLnByb3BzLmNlbnRlclxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwcmV2U3RhdGUuY3VycmVudExvY2F0aW9uICE9PSB0aGlzLnN0YXRlLmN1cnJlbnRMb2NhdGlvbikge1xuICAgICAgICAgIHRoaXMucmVjZW50ZXJNYXAoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5wcm9wcy5ib3VuZHMgIT09IHByZXZQcm9wcy5ib3VuZHMpIHtcbiAgICAgICAgICB0aGlzLm1hcC5maXRCb3VuZHModGhpcy5wcm9wcy5ib3VuZHMpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiAnY29tcG9uZW50V2lsbFVubW91bnQnLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgICAgICB2YXIgZ29vZ2xlID0gdGhpcy5wcm9wcy5nb29nbGU7XG5cbiAgICAgICAgaWYgKHRoaXMuZ2VvUHJvbWlzZSkge1xuICAgICAgICAgIHRoaXMuZ2VvUHJvbWlzZS5jYW5jZWwoKTtcbiAgICAgICAgfVxuICAgICAgICBPYmplY3Qua2V5cyh0aGlzLmxpc3RlbmVycykuZm9yRWFjaChmdW5jdGlvbiAoZSkge1xuICAgICAgICAgIGdvb2dsZS5tYXBzLmV2ZW50LnJlbW92ZUxpc3RlbmVyKF90aGlzMy5saXN0ZW5lcnNbZV0pO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6ICdsb2FkTWFwJyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBsb2FkTWFwKCkge1xuICAgICAgICB2YXIgX3RoaXM0ID0gdGhpcztcblxuICAgICAgICBpZiAodGhpcy5wcm9wcyAmJiB0aGlzLnByb3BzLmdvb2dsZSkge1xuICAgICAgICAgIHZhciBnb29nbGUgPSB0aGlzLnByb3BzLmdvb2dsZTtcblxuICAgICAgICAgIHZhciBtYXBzID0gZ29vZ2xlLm1hcHM7XG5cbiAgICAgICAgICB2YXIgbWFwUmVmID0gdGhpcy5yZWZzLm1hcDtcbiAgICAgICAgICB2YXIgbm9kZSA9IF9yZWFjdERvbTIuZGVmYXVsdC5maW5kRE9NTm9kZShtYXBSZWYpO1xuICAgICAgICAgIHZhciBjdXJyID0gdGhpcy5zdGF0ZS5jdXJyZW50TG9jYXRpb247XG4gICAgICAgICAgdmFyIGNlbnRlciA9IG5ldyBtYXBzLkxhdExuZyhjdXJyLmxhdCwgY3Vyci5sbmcpO1xuXG4gICAgICAgICAgdmFyIG1hcFR5cGVJZHMgPSB0aGlzLnByb3BzLmdvb2dsZS5tYXBzLk1hcFR5cGVJZCB8fCB7fTtcbiAgICAgICAgICB2YXIgbWFwVHlwZUZyb21Qcm9wcyA9IFN0cmluZyh0aGlzLnByb3BzLm1hcFR5cGUpLnRvVXBwZXJDYXNlKCk7XG5cbiAgICAgICAgICB2YXIgbWFwQ29uZmlnID0gT2JqZWN0LmFzc2lnbih7fSwge1xuICAgICAgICAgICAgbWFwVHlwZUlkOiBtYXBUeXBlSWRzW21hcFR5cGVGcm9tUHJvcHNdLFxuICAgICAgICAgICAgY2VudGVyOiBjZW50ZXIsXG4gICAgICAgICAgICB6b29tOiB0aGlzLnByb3BzLnpvb20sXG4gICAgICAgICAgICBtYXhab29tOiB0aGlzLnByb3BzLm1heFpvb20sXG4gICAgICAgICAgICBtaW5ab29tOiB0aGlzLnByb3BzLm1pblpvb20sXG4gICAgICAgICAgICBjbGlja2FibGVJY29uczogISF0aGlzLnByb3BzLmNsaWNrYWJsZUljb25zLFxuICAgICAgICAgICAgZGlzYWJsZURlZmF1bHRVSTogdGhpcy5wcm9wcy5kaXNhYmxlRGVmYXVsdFVJLFxuICAgICAgICAgICAgem9vbUNvbnRyb2w6IHRoaXMucHJvcHMuem9vbUNvbnRyb2wsXG4gICAgICAgICAgICBtYXBUeXBlQ29udHJvbDogdGhpcy5wcm9wcy5tYXBUeXBlQ29udHJvbCxcbiAgICAgICAgICAgIHNjYWxlQ29udHJvbDogdGhpcy5wcm9wcy5zY2FsZUNvbnRyb2wsXG4gICAgICAgICAgICBzdHJlZXRWaWV3Q29udHJvbDogdGhpcy5wcm9wcy5zdHJlZXRWaWV3Q29udHJvbCxcbiAgICAgICAgICAgIHBhbkNvbnRyb2w6IHRoaXMucHJvcHMucGFuQ29udHJvbCxcbiAgICAgICAgICAgIHJvdGF0ZUNvbnRyb2w6IHRoaXMucHJvcHMucm90YXRlQ29udHJvbCxcbiAgICAgICAgICAgIGZ1bGxzY3JlZW5Db250cm9sOiB0aGlzLnByb3BzLmZ1bGxzY3JlZW5Db250cm9sLFxuICAgICAgICAgICAgc2Nyb2xsd2hlZWw6IHRoaXMucHJvcHMuc2Nyb2xsd2hlZWwsXG4gICAgICAgICAgICBkcmFnZ2FibGU6IHRoaXMucHJvcHMuZHJhZ2dhYmxlLFxuICAgICAgICAgICAga2V5Ym9hcmRTaG9ydGN1dHM6IHRoaXMucHJvcHMua2V5Ym9hcmRTaG9ydGN1dHMsXG4gICAgICAgICAgICBkaXNhYmxlRG91YmxlQ2xpY2tab29tOiB0aGlzLnByb3BzLmRpc2FibGVEb3VibGVDbGlja1pvb20sXG4gICAgICAgICAgICBub0NsZWFyOiB0aGlzLnByb3BzLm5vQ2xlYXIsXG4gICAgICAgICAgICBzdHlsZXM6IHRoaXMucHJvcHMuc3R5bGVzLFxuICAgICAgICAgICAgZ2VzdHVyZUhhbmRsaW5nOiB0aGlzLnByb3BzLmdlc3R1cmVIYW5kbGluZ1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgT2JqZWN0LmtleXMobWFwQ29uZmlnKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICAgIC8vIEFsbG93IHRvIGNvbmZpZ3VyZSBtYXBDb25maWcgd2l0aCAnZmFsc2UnXG4gICAgICAgICAgICBpZiAobWFwQ29uZmlnW2tleV0gPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgZGVsZXRlIG1hcENvbmZpZ1trZXldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgdGhpcy5tYXAgPSBuZXcgbWFwcy5NYXAobm9kZSwgbWFwQ29uZmlnKTtcblxuICAgICAgICAgIGV2dE5hbWVzLmZvckVhY2goZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgIF90aGlzNC5saXN0ZW5lcnNbZV0gPSBfdGhpczQubWFwLmFkZExpc3RlbmVyKGUsIF90aGlzNC5oYW5kbGVFdmVudChlKSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgbWFwcy5ldmVudC50cmlnZ2VyKHRoaXMubWFwLCAncmVhZHknKTtcbiAgICAgICAgICB0aGlzLmZvcmNlVXBkYXRlKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6ICdoYW5kbGVFdmVudCcsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gaGFuZGxlRXZlbnQoZXZ0TmFtZSkge1xuICAgICAgICB2YXIgX3RoaXM1ID0gdGhpcztcblxuICAgICAgICB2YXIgdGltZW91dCA9IHZvaWQgMDtcbiAgICAgICAgdmFyIGhhbmRsZXJOYW1lID0gJ29uJyArICgwLCBfU3RyaW5nLmNhbWVsaXplKShldnROYW1lKTtcblxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICBpZiAodGltZW91dCkge1xuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICAgICAgICAgICAgdGltZW91dCA9IG51bGw7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmIChfdGhpczUucHJvcHNbaGFuZGxlck5hbWVdKSB7XG4gICAgICAgICAgICAgIF90aGlzNS5wcm9wc1toYW5kbGVyTmFtZV0oX3RoaXM1LnByb3BzLCBfdGhpczUubWFwLCBlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LCAwKTtcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6ICdyZWNlbnRlck1hcCcsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gcmVjZW50ZXJNYXAoKSB7XG4gICAgICAgIHZhciBtYXAgPSB0aGlzLm1hcDtcblxuICAgICAgICB2YXIgZ29vZ2xlID0gdGhpcy5wcm9wcy5nb29nbGU7XG5cblxuICAgICAgICBpZiAoIWdvb2dsZSkgcmV0dXJuO1xuICAgICAgICB2YXIgbWFwcyA9IGdvb2dsZS5tYXBzO1xuXG4gICAgICAgIGlmIChtYXApIHtcbiAgICAgICAgICB2YXIgY2VudGVyID0gdGhpcy5zdGF0ZS5jdXJyZW50TG9jYXRpb247XG4gICAgICAgICAgaWYgKCEoY2VudGVyIGluc3RhbmNlb2YgZ29vZ2xlLm1hcHMuTGF0TG5nKSkge1xuICAgICAgICAgICAgY2VudGVyID0gbmV3IGdvb2dsZS5tYXBzLkxhdExuZyhjZW50ZXIubGF0LCBjZW50ZXIubG5nKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gbWFwLnBhblRvKGNlbnRlcilcbiAgICAgICAgICBtYXAuc2V0Q2VudGVyKGNlbnRlcik7XG4gICAgICAgICAgbWFwcy5ldmVudC50cmlnZ2VyKG1hcCwgJ3JlY2VudGVyJyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6ICdyZXN0eWxlTWFwJyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiByZXN0eWxlTWFwKCkge1xuICAgICAgICBpZiAodGhpcy5tYXApIHtcbiAgICAgICAgICB2YXIgZ29vZ2xlID0gdGhpcy5wcm9wcy5nb29nbGU7XG5cbiAgICAgICAgICBnb29nbGUubWFwcy5ldmVudC50cmlnZ2VyKHRoaXMubWFwLCAncmVzaXplJyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6ICdyZW5kZXJDaGlsZHJlbicsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyQ2hpbGRyZW4oKSB7XG4gICAgICAgIHZhciBfdGhpczYgPSB0aGlzO1xuXG4gICAgICAgIHZhciBjaGlsZHJlbiA9IHRoaXMucHJvcHMuY2hpbGRyZW47XG5cblxuICAgICAgICBpZiAoIWNoaWxkcmVuKSByZXR1cm47XG5cbiAgICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5DaGlsZHJlbi5tYXAoY2hpbGRyZW4sIGZ1bmN0aW9uIChjKSB7XG4gICAgICAgICAgaWYgKCFjKSByZXR1cm47XG4gICAgICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jbG9uZUVsZW1lbnQoYywge1xuICAgICAgICAgICAgbWFwOiBfdGhpczYubWFwLFxuICAgICAgICAgICAgZ29vZ2xlOiBfdGhpczYucHJvcHMuZ29vZ2xlLFxuICAgICAgICAgICAgbWFwQ2VudGVyOiBfdGhpczYuc3RhdGUuY3VycmVudExvY2F0aW9uXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogJ3JlbmRlcicsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICB2YXIgc3R5bGUgPSBPYmplY3QuYXNzaWduKHt9LCBtYXBTdHlsZXMubWFwLCB0aGlzLnByb3BzLnN0eWxlLCB7XG4gICAgICAgICAgZGlzcGxheTogdGhpcy5wcm9wcy52aXNpYmxlID8gJ2luaGVyaXQnIDogJ25vbmUnXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHZhciBjb250YWluZXJTdHlsZXMgPSBPYmplY3QuYXNzaWduKHt9LCBtYXBTdHlsZXMuY29udGFpbmVyLCB0aGlzLnByb3BzLmNvbnRhaW5lclN0eWxlKTtcblxuICAgICAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgeyBzdHlsZTogY29udGFpbmVyU3R5bGVzLCBjbGFzc05hbWU6IHRoaXMucHJvcHMuY2xhc3NOYW1lIH0sXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgIHsgc3R5bGU6IHN0eWxlLCByZWY6ICdtYXAnIH0sXG4gICAgICAgICAgICAnTG9hZGluZyBtYXAuLi4nXG4gICAgICAgICAgKSxcbiAgICAgICAgICB0aGlzLnJlbmRlckNoaWxkcmVuKClcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gTWFwO1xuICB9KF9yZWFjdDIuZGVmYXVsdC5Db21wb25lbnQpO1xuXG4gIE1hcC5wcm9wVHlwZXMgPSB7XG4gICAgZ29vZ2xlOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9iamVjdCxcbiAgICB6b29tOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm51bWJlcixcbiAgICBjZW50ZXJBcm91bmRDdXJyZW50TG9jYXRpb246IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcbiAgICBjZW50ZXI6IF9wcm9wVHlwZXMyLmRlZmF1bHQub2JqZWN0LFxuICAgIGluaXRpYWxDZW50ZXI6IF9wcm9wVHlwZXMyLmRlZmF1bHQub2JqZWN0LFxuICAgIGNsYXNzTmFtZTogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsXG4gICAgc3R5bGU6IF9wcm9wVHlwZXMyLmRlZmF1bHQub2JqZWN0LFxuICAgIGNvbnRhaW5lclN0eWxlOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9iamVjdCxcbiAgICB2aXNpYmxlOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG4gICAgbWFwVHlwZTogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsXG4gICAgbWF4Wm9vbTogX3Byb3BUeXBlczIuZGVmYXVsdC5udW1iZXIsXG4gICAgbWluWm9vbTogX3Byb3BUeXBlczIuZGVmYXVsdC5udW1iZXIsXG4gICAgY2xpY2thYmxlSWNvbnM6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcbiAgICBkaXNhYmxlRGVmYXVsdFVJOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG4gICAgem9vbUNvbnRyb2w6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcbiAgICBtYXBUeXBlQ29udHJvbDogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICAgIHNjYWxlQ29udHJvbDogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICAgIHN0cmVldFZpZXdDb250cm9sOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG4gICAgcGFuQ29udHJvbDogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICAgIHJvdGF0ZUNvbnRyb2w6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcbiAgICBmdWxsc2NyZWVuQ29udHJvbDogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICAgIHNjcm9sbHdoZWVsOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG4gICAgZHJhZ2dhYmxlOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG4gICAga2V5Ym9hcmRTaG9ydGN1dHM6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcbiAgICBkaXNhYmxlRG91YmxlQ2xpY2tab29tOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG4gICAgbm9DbGVhcjogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICAgIHN0eWxlczogX3Byb3BUeXBlczIuZGVmYXVsdC5hcnJheSxcbiAgICBnZXN0dXJlSGFuZGxpbmc6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICAgIGJvdW5kczogX3Byb3BUeXBlczIuZGVmYXVsdC5vYmplY3RcbiAgfTtcblxuICBldnROYW1lcy5mb3JFYWNoKGZ1bmN0aW9uIChlKSB7XG4gICAgcmV0dXJuIE1hcC5wcm9wVHlwZXNbKDAsIF9TdHJpbmcuY2FtZWxpemUpKGUpXSA9IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYztcbiAgfSk7XG5cbiAgTWFwLmRlZmF1bHRQcm9wcyA9IHtcbiAgICB6b29tOiAxNCxcbiAgICBpbml0aWFsQ2VudGVyOiB7XG4gICAgICBsYXQ6IDM3Ljc3NDkyOSxcbiAgICAgIGxuZzogLTEyMi40MTk0MTZcbiAgICB9LFxuICAgIGNlbnRlcjoge30sXG4gICAgY2VudGVyQXJvdW5kQ3VycmVudExvY2F0aW9uOiBmYWxzZSxcbiAgICBzdHlsZToge30sXG4gICAgY29udGFpbmVyU3R5bGU6IHt9LFxuICAgIHZpc2libGU6IHRydWVcbiAgfTtcblxuICBleHBvcnRzLmRlZmF1bHQgPSBNYXA7XG59KTsiLCIndXNlIHN0cmljdCc7XG52YXIgdG9rZW4gPSAnJVthLWYwLTldezJ9JztcbnZhciBzaW5nbGVNYXRjaGVyID0gbmV3IFJlZ0V4cCh0b2tlbiwgJ2dpJyk7XG52YXIgbXVsdGlNYXRjaGVyID0gbmV3IFJlZ0V4cCgnKCcgKyB0b2tlbiArICcpKycsICdnaScpO1xuXG5mdW5jdGlvbiBkZWNvZGVDb21wb25lbnRzKGNvbXBvbmVudHMsIHNwbGl0KSB7XG5cdHRyeSB7XG5cdFx0Ly8gVHJ5IHRvIGRlY29kZSB0aGUgZW50aXJlIHN0cmluZyBmaXJzdFxuXHRcdHJldHVybiBkZWNvZGVVUklDb21wb25lbnQoY29tcG9uZW50cy5qb2luKCcnKSk7XG5cdH0gY2F0Y2ggKGVycikge1xuXHRcdC8vIERvIG5vdGhpbmdcblx0fVxuXG5cdGlmIChjb21wb25lbnRzLmxlbmd0aCA9PT0gMSkge1xuXHRcdHJldHVybiBjb21wb25lbnRzO1xuXHR9XG5cblx0c3BsaXQgPSBzcGxpdCB8fCAxO1xuXG5cdC8vIFNwbGl0IHRoZSBhcnJheSBpbiAyIHBhcnRzXG5cdHZhciBsZWZ0ID0gY29tcG9uZW50cy5zbGljZSgwLCBzcGxpdCk7XG5cdHZhciByaWdodCA9IGNvbXBvbmVudHMuc2xpY2Uoc3BsaXQpO1xuXG5cdHJldHVybiBBcnJheS5wcm90b3R5cGUuY29uY2F0LmNhbGwoW10sIGRlY29kZUNvbXBvbmVudHMobGVmdCksIGRlY29kZUNvbXBvbmVudHMocmlnaHQpKTtcbn1cblxuZnVuY3Rpb24gZGVjb2RlKGlucHV0KSB7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChpbnB1dCk7XG5cdH0gY2F0Y2ggKGVycikge1xuXHRcdHZhciB0b2tlbnMgPSBpbnB1dC5tYXRjaChzaW5nbGVNYXRjaGVyKTtcblxuXHRcdGZvciAodmFyIGkgPSAxOyBpIDwgdG9rZW5zLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRpbnB1dCA9IGRlY29kZUNvbXBvbmVudHModG9rZW5zLCBpKS5qb2luKCcnKTtcblxuXHRcdFx0dG9rZW5zID0gaW5wdXQubWF0Y2goc2luZ2xlTWF0Y2hlcik7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGlucHV0O1xuXHR9XG59XG5cbmZ1bmN0aW9uIGN1c3RvbURlY29kZVVSSUNvbXBvbmVudChpbnB1dCkge1xuXHQvLyBLZWVwIHRyYWNrIG9mIGFsbCB0aGUgcmVwbGFjZW1lbnRzIGFuZCBwcmVmaWxsIHRoZSBtYXAgd2l0aCB0aGUgYEJPTWBcblx0dmFyIHJlcGxhY2VNYXAgPSB7XG5cdFx0JyVGRSVGRic6ICdcXHVGRkZEXFx1RkZGRCcsXG5cdFx0JyVGRiVGRSc6ICdcXHVGRkZEXFx1RkZGRCdcblx0fTtcblxuXHR2YXIgbWF0Y2ggPSBtdWx0aU1hdGNoZXIuZXhlYyhpbnB1dCk7XG5cdHdoaWxlIChtYXRjaCkge1xuXHRcdHRyeSB7XG5cdFx0XHQvLyBEZWNvZGUgYXMgYmlnIGNodW5rcyBhcyBwb3NzaWJsZVxuXHRcdFx0cmVwbGFjZU1hcFttYXRjaFswXV0gPSBkZWNvZGVVUklDb21wb25lbnQobWF0Y2hbMF0pO1xuXHRcdH0gY2F0Y2ggKGVycikge1xuXHRcdFx0dmFyIHJlc3VsdCA9IGRlY29kZShtYXRjaFswXSk7XG5cblx0XHRcdGlmIChyZXN1bHQgIT09IG1hdGNoWzBdKSB7XG5cdFx0XHRcdHJlcGxhY2VNYXBbbWF0Y2hbMF1dID0gcmVzdWx0O1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdG1hdGNoID0gbXVsdGlNYXRjaGVyLmV4ZWMoaW5wdXQpO1xuXHR9XG5cblx0Ly8gQWRkIGAlQzJgIGF0IHRoZSBlbmQgb2YgdGhlIG1hcCB0byBtYWtlIHN1cmUgaXQgZG9lcyBub3QgcmVwbGFjZSB0aGUgY29tYmluYXRvciBiZWZvcmUgZXZlcnl0aGluZyBlbHNlXG5cdHJlcGxhY2VNYXBbJyVDMiddID0gJ1xcdUZGRkQnO1xuXG5cdHZhciBlbnRyaWVzID0gT2JqZWN0LmtleXMocmVwbGFjZU1hcCk7XG5cblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBlbnRyaWVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0Ly8gUmVwbGFjZSBhbGwgZGVjb2RlZCBjb21wb25lbnRzXG5cdFx0dmFyIGtleSA9IGVudHJpZXNbaV07XG5cdFx0aW5wdXQgPSBpbnB1dC5yZXBsYWNlKG5ldyBSZWdFeHAoa2V5LCAnZycpLCByZXBsYWNlTWFwW2tleV0pO1xuXHR9XG5cblx0cmV0dXJuIGlucHV0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChlbmNvZGVkVVJJKSB7XG5cdGlmICh0eXBlb2YgZW5jb2RlZFVSSSAhPT0gJ3N0cmluZycpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBgZW5jb2RlZFVSSWAgdG8gYmUgb2YgdHlwZSBgc3RyaW5nYCwgZ290IGAnICsgdHlwZW9mIGVuY29kZWRVUkkgKyAnYCcpO1xuXHR9XG5cblx0dHJ5IHtcblx0XHRlbmNvZGVkVVJJID0gZW5jb2RlZFVSSS5yZXBsYWNlKC9cXCsvZywgJyAnKTtcblxuXHRcdC8vIFRyeSB0aGUgYnVpbHQgaW4gZGVjb2RlciBmaXJzdFxuXHRcdHJldHVybiBkZWNvZGVVUklDb21wb25lbnQoZW5jb2RlZFVSSSk7XG5cdH0gY2F0Y2ggKGVycikge1xuXHRcdC8vIEZhbGxiYWNrIHRvIGEgbW9yZSBhZHZhbmNlZCBkZWNvZGVyXG5cdFx0cmV0dXJuIGN1c3RvbURlY29kZVVSSUNvbXBvbmVudChlbmNvZGVkVVJJKTtcblx0fVxufTtcbiIsIid1c2Ugc3RyaWN0Jztcbm1vZHVsZS5leHBvcnRzID0gc3RyID0+IGVuY29kZVVSSUNvbXBvbmVudChzdHIpLnJlcGxhY2UoL1shJygpKl0vZywgeCA9PiBgJSR7eC5jaGFyQ29kZUF0KDApLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpfWApO1xuIiwiJ3VzZSBzdHJpY3QnO1xuY29uc3Qgc3RyaWN0VXJpRW5jb2RlID0gcmVxdWlyZSgnc3RyaWN0LXVyaS1lbmNvZGUnKTtcbmNvbnN0IGRlY29kZUNvbXBvbmVudCA9IHJlcXVpcmUoJ2RlY29kZS11cmktY29tcG9uZW50Jyk7XG5cbmZ1bmN0aW9uIGVuY29kZXJGb3JBcnJheUZvcm1hdChvcHRpb25zKSB7XG5cdHN3aXRjaCAob3B0aW9ucy5hcnJheUZvcm1hdCkge1xuXHRcdGNhc2UgJ2luZGV4Jzpcblx0XHRcdHJldHVybiAoa2V5LCB2YWx1ZSwgaW5kZXgpID0+IHtcblx0XHRcdFx0cmV0dXJuIHZhbHVlID09PSBudWxsID8gW1xuXHRcdFx0XHRcdGVuY29kZShrZXksIG9wdGlvbnMpLFxuXHRcdFx0XHRcdCdbJyxcblx0XHRcdFx0XHRpbmRleCxcblx0XHRcdFx0XHQnXSdcblx0XHRcdFx0XS5qb2luKCcnKSA6IFtcblx0XHRcdFx0XHRlbmNvZGUoa2V5LCBvcHRpb25zKSxcblx0XHRcdFx0XHQnWycsXG5cdFx0XHRcdFx0ZW5jb2RlKGluZGV4LCBvcHRpb25zKSxcblx0XHRcdFx0XHQnXT0nLFxuXHRcdFx0XHRcdGVuY29kZSh2YWx1ZSwgb3B0aW9ucylcblx0XHRcdFx0XS5qb2luKCcnKTtcblx0XHRcdH07XG5cdFx0Y2FzZSAnYnJhY2tldCc6XG5cdFx0XHRyZXR1cm4gKGtleSwgdmFsdWUpID0+IHtcblx0XHRcdFx0cmV0dXJuIHZhbHVlID09PSBudWxsID8gW2VuY29kZShrZXksIG9wdGlvbnMpLCAnW10nXS5qb2luKCcnKSA6IFtcblx0XHRcdFx0XHRlbmNvZGUoa2V5LCBvcHRpb25zKSxcblx0XHRcdFx0XHQnW109Jyxcblx0XHRcdFx0XHRlbmNvZGUodmFsdWUsIG9wdGlvbnMpXG5cdFx0XHRcdF0uam9pbignJyk7XG5cdFx0XHR9O1xuXHRcdGRlZmF1bHQ6XG5cdFx0XHRyZXR1cm4gKGtleSwgdmFsdWUpID0+IHtcblx0XHRcdFx0cmV0dXJuIHZhbHVlID09PSBudWxsID8gZW5jb2RlKGtleSwgb3B0aW9ucykgOiBbXG5cdFx0XHRcdFx0ZW5jb2RlKGtleSwgb3B0aW9ucyksXG5cdFx0XHRcdFx0Jz0nLFxuXHRcdFx0XHRcdGVuY29kZSh2YWx1ZSwgb3B0aW9ucylcblx0XHRcdFx0XS5qb2luKCcnKTtcblx0XHRcdH07XG5cdH1cbn1cblxuZnVuY3Rpb24gcGFyc2VyRm9yQXJyYXlGb3JtYXQob3B0aW9ucykge1xuXHRsZXQgcmVzdWx0O1xuXG5cdHN3aXRjaCAob3B0aW9ucy5hcnJheUZvcm1hdCkge1xuXHRcdGNhc2UgJ2luZGV4Jzpcblx0XHRcdHJldHVybiAoa2V5LCB2YWx1ZSwgYWNjdW11bGF0b3IpID0+IHtcblx0XHRcdFx0cmVzdWx0ID0gL1xcWyhcXGQqKVxcXSQvLmV4ZWMoa2V5KTtcblxuXHRcdFx0XHRrZXkgPSBrZXkucmVwbGFjZSgvXFxbXFxkKlxcXSQvLCAnJyk7XG5cblx0XHRcdFx0aWYgKCFyZXN1bHQpIHtcblx0XHRcdFx0XHRhY2N1bXVsYXRvcltrZXldID0gdmFsdWU7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKGFjY3VtdWxhdG9yW2tleV0gPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRcdGFjY3VtdWxhdG9yW2tleV0gPSB7fTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGFjY3VtdWxhdG9yW2tleV1bcmVzdWx0WzFdXSA9IHZhbHVlO1xuXHRcdFx0fTtcblx0XHRjYXNlICdicmFja2V0Jzpcblx0XHRcdHJldHVybiAoa2V5LCB2YWx1ZSwgYWNjdW11bGF0b3IpID0+IHtcblx0XHRcdFx0cmVzdWx0ID0gLyhcXFtcXF0pJC8uZXhlYyhrZXkpO1xuXHRcdFx0XHRrZXkgPSBrZXkucmVwbGFjZSgvXFxbXFxdJC8sICcnKTtcblxuXHRcdFx0XHRpZiAoIXJlc3VsdCkge1xuXHRcdFx0XHRcdGFjY3VtdWxhdG9yW2tleV0gPSB2YWx1ZTtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoYWNjdW11bGF0b3Jba2V5XSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdFx0YWNjdW11bGF0b3Jba2V5XSA9IFt2YWx1ZV07XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0YWNjdW11bGF0b3Jba2V5XSA9IFtdLmNvbmNhdChhY2N1bXVsYXRvcltrZXldLCB2YWx1ZSk7XG5cdFx0XHR9O1xuXHRcdGRlZmF1bHQ6XG5cdFx0XHRyZXR1cm4gKGtleSwgdmFsdWUsIGFjY3VtdWxhdG9yKSA9PiB7XG5cdFx0XHRcdGlmIChhY2N1bXVsYXRvcltrZXldID09PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0XHRhY2N1bXVsYXRvcltrZXldID0gdmFsdWU7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0YWNjdW11bGF0b3Jba2V5XSA9IFtdLmNvbmNhdChhY2N1bXVsYXRvcltrZXldLCB2YWx1ZSk7XG5cdFx0XHR9O1xuXHR9XG59XG5cbmZ1bmN0aW9uIGVuY29kZSh2YWx1ZSwgb3B0aW9ucykge1xuXHRpZiAob3B0aW9ucy5lbmNvZGUpIHtcblx0XHRyZXR1cm4gb3B0aW9ucy5zdHJpY3QgPyBzdHJpY3RVcmlFbmNvZGUodmFsdWUpIDogZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKTtcblx0fVxuXG5cdHJldHVybiB2YWx1ZTtcbn1cblxuZnVuY3Rpb24gZGVjb2RlKHZhbHVlLCBvcHRpb25zKSB7XG5cdGlmIChvcHRpb25zLmRlY29kZSkge1xuXHRcdHJldHVybiBkZWNvZGVDb21wb25lbnQodmFsdWUpO1xuXHR9XG5cblx0cmV0dXJuIHZhbHVlO1xufVxuXG5mdW5jdGlvbiBrZXlzU29ydGVyKGlucHV0KSB7XG5cdGlmIChBcnJheS5pc0FycmF5KGlucHV0KSkge1xuXHRcdHJldHVybiBpbnB1dC5zb3J0KCk7XG5cdH1cblxuXHRpZiAodHlwZW9mIGlucHV0ID09PSAnb2JqZWN0Jykge1xuXHRcdHJldHVybiBrZXlzU29ydGVyKE9iamVjdC5rZXlzKGlucHV0KSlcblx0XHRcdC5zb3J0KChhLCBiKSA9PiBOdW1iZXIoYSkgLSBOdW1iZXIoYikpXG5cdFx0XHQubWFwKGtleSA9PiBpbnB1dFtrZXldKTtcblx0fVxuXG5cdHJldHVybiBpbnB1dDtcbn1cblxuZnVuY3Rpb24gZXh0cmFjdChpbnB1dCkge1xuXHRjb25zdCBxdWVyeVN0YXJ0ID0gaW5wdXQuaW5kZXhPZignPycpO1xuXHRpZiAocXVlcnlTdGFydCA9PT0gLTEpIHtcblx0XHRyZXR1cm4gJyc7XG5cdH1cblx0cmV0dXJuIGlucHV0LnNsaWNlKHF1ZXJ5U3RhcnQgKyAxKTtcbn1cblxuZnVuY3Rpb24gcGFyc2UoaW5wdXQsIG9wdGlvbnMpIHtcblx0b3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe2RlY29kZTogdHJ1ZSwgYXJyYXlGb3JtYXQ6ICdub25lJ30sIG9wdGlvbnMpO1xuXG5cdGNvbnN0IGZvcm1hdHRlciA9IHBhcnNlckZvckFycmF5Rm9ybWF0KG9wdGlvbnMpO1xuXG5cdC8vIENyZWF0ZSBhbiBvYmplY3Qgd2l0aCBubyBwcm90b3R5cGVcblx0Y29uc3QgcmV0ID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuXHRpZiAodHlwZW9mIGlucHV0ICE9PSAnc3RyaW5nJykge1xuXHRcdHJldHVybiByZXQ7XG5cdH1cblxuXHRpbnB1dCA9IGlucHV0LnRyaW0oKS5yZXBsYWNlKC9eWz8jJl0vLCAnJyk7XG5cblx0aWYgKCFpbnB1dCkge1xuXHRcdHJldHVybiByZXQ7XG5cdH1cblxuXHRmb3IgKGNvbnN0IHBhcmFtIG9mIGlucHV0LnNwbGl0KCcmJykpIHtcblx0XHRsZXQgW2tleSwgdmFsdWVdID0gcGFyYW0ucmVwbGFjZSgvXFwrL2csICcgJykuc3BsaXQoJz0nKTtcblxuXHRcdC8vIE1pc3NpbmcgYD1gIHNob3VsZCBiZSBgbnVsbGA6XG5cdFx0Ly8gaHR0cDovL3czLm9yZy9UUi8yMDEyL1dELXVybC0yMDEyMDUyNC8jY29sbGVjdC11cmwtcGFyYW1ldGVyc1xuXHRcdHZhbHVlID0gdmFsdWUgPT09IHVuZGVmaW5lZCA/IG51bGwgOiBkZWNvZGUodmFsdWUsIG9wdGlvbnMpO1xuXG5cdFx0Zm9ybWF0dGVyKGRlY29kZShrZXksIG9wdGlvbnMpLCB2YWx1ZSwgcmV0KTtcblx0fVxuXG5cdHJldHVybiBPYmplY3Qua2V5cyhyZXQpLnNvcnQoKS5yZWR1Y2UoKHJlc3VsdCwga2V5KSA9PiB7XG5cdFx0Y29uc3QgdmFsdWUgPSByZXRba2V5XTtcblx0XHRpZiAoQm9vbGVhbih2YWx1ZSkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiAhQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcblx0XHRcdC8vIFNvcnQgb2JqZWN0IGtleXMsIG5vdCB2YWx1ZXNcblx0XHRcdHJlc3VsdFtrZXldID0ga2V5c1NvcnRlcih2YWx1ZSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJlc3VsdFtrZXldID0gdmFsdWU7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHJlc3VsdDtcblx0fSwgT2JqZWN0LmNyZWF0ZShudWxsKSk7XG59XG5cbmV4cG9ydHMuZXh0cmFjdCA9IGV4dHJhY3Q7XG5leHBvcnRzLnBhcnNlID0gcGFyc2U7XG5cbmV4cG9ydHMuc3RyaW5naWZ5ID0gKG9iaiwgb3B0aW9ucykgPT4ge1xuXHRjb25zdCBkZWZhdWx0cyA9IHtcblx0XHRlbmNvZGU6IHRydWUsXG5cdFx0c3RyaWN0OiB0cnVlLFxuXHRcdGFycmF5Rm9ybWF0OiAnbm9uZSdcblx0fTtcblxuXHRvcHRpb25zID0gT2JqZWN0LmFzc2lnbihkZWZhdWx0cywgb3B0aW9ucyk7XG5cblx0aWYgKG9wdGlvbnMuc29ydCA9PT0gZmFsc2UpIHtcblx0XHRvcHRpb25zLnNvcnQgPSAoKSA9PiB7fTtcblx0fVxuXG5cdGNvbnN0IGZvcm1hdHRlciA9IGVuY29kZXJGb3JBcnJheUZvcm1hdChvcHRpb25zKTtcblxuXHRyZXR1cm4gb2JqID8gT2JqZWN0LmtleXMob2JqKS5zb3J0KG9wdGlvbnMuc29ydCkubWFwKGtleSA9PiB7XG5cdFx0Y29uc3QgdmFsdWUgPSBvYmpba2V5XTtcblxuXHRcdGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRyZXR1cm4gJyc7XG5cdFx0fVxuXG5cdFx0aWYgKHZhbHVlID09PSBudWxsKSB7XG5cdFx0XHRyZXR1cm4gZW5jb2RlKGtleSwgb3B0aW9ucyk7XG5cdFx0fVxuXG5cdFx0aWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG5cdFx0XHRjb25zdCByZXN1bHQgPSBbXTtcblxuXHRcdFx0Zm9yIChjb25zdCB2YWx1ZTIgb2YgdmFsdWUuc2xpY2UoKSkge1xuXHRcdFx0XHRpZiAodmFsdWUyID09PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJlc3VsdC5wdXNoKGZvcm1hdHRlcihrZXksIHZhbHVlMiwgcmVzdWx0Lmxlbmd0aCkpO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gcmVzdWx0LmpvaW4oJyYnKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZW5jb2RlKGtleSwgb3B0aW9ucykgKyAnPScgKyBlbmNvZGUodmFsdWUsIG9wdGlvbnMpO1xuXHR9KS5maWx0ZXIoeCA9PiB4Lmxlbmd0aCA+IDApLmpvaW4oJyYnKSA6ICcnO1xufTtcblxuZXhwb3J0cy5wYXJzZVVybCA9IChpbnB1dCwgb3B0aW9ucykgPT4ge1xuXHRyZXR1cm4ge1xuXHRcdHVybDogaW5wdXQuc3BsaXQoJz8nKVswXSB8fCAnJyxcblx0XHRxdWVyeTogcGFyc2UoZXh0cmFjdChpbnB1dCksIG9wdGlvbnMpXG5cdH07XG59O1xuIiwiLy8gc2hpbSBmb3IgdXNpbmcgcHJvY2VzcyBpbiBicm93c2VyXG52YXIgcHJvY2VzcyA9IG1vZHVsZS5leHBvcnRzID0ge307XG5cbi8vIGNhY2hlZCBmcm9tIHdoYXRldmVyIGdsb2JhbCBpcyBwcmVzZW50IHNvIHRoYXQgdGVzdCBydW5uZXJzIHRoYXQgc3R1YiBpdFxuLy8gZG9uJ3QgYnJlYWsgdGhpbmdzLiAgQnV0IHdlIG5lZWQgdG8gd3JhcCBpdCBpbiBhIHRyeSBjYXRjaCBpbiBjYXNlIGl0IGlzXG4vLyB3cmFwcGVkIGluIHN0cmljdCBtb2RlIGNvZGUgd2hpY2ggZG9lc24ndCBkZWZpbmUgYW55IGdsb2JhbHMuICBJdCdzIGluc2lkZSBhXG4vLyBmdW5jdGlvbiBiZWNhdXNlIHRyeS9jYXRjaGVzIGRlb3B0aW1pemUgaW4gY2VydGFpbiBlbmdpbmVzLlxuXG52YXIgY2FjaGVkU2V0VGltZW91dDtcbnZhciBjYWNoZWRDbGVhclRpbWVvdXQ7XG5cbmZ1bmN0aW9uIGRlZmF1bHRTZXRUaW1vdXQoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdzZXRUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG5mdW5jdGlvbiBkZWZhdWx0Q2xlYXJUaW1lb3V0ICgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2NsZWFyVGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuKGZ1bmN0aW9uICgpIHtcbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIHNldFRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIGNsZWFyVGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICB9XG59ICgpKVxuZnVuY3Rpb24gcnVuVGltZW91dChmdW4pIHtcbiAgICBpZiAoY2FjaGVkU2V0VGltZW91dCA9PT0gc2V0VGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgLy8gaWYgc2V0VGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZFNldFRpbWVvdXQgPT09IGRlZmF1bHRTZXRUaW1vdXQgfHwgIWNhY2hlZFNldFRpbWVvdXQpICYmIHNldFRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9IGNhdGNoKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0IHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKG51bGwsIGZ1biwgMCk7XG4gICAgICAgIH0gY2F0Y2goZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvclxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbCh0aGlzLCBmdW4sIDApO1xuICAgICAgICB9XG4gICAgfVxuXG5cbn1cbmZ1bmN0aW9uIHJ1bkNsZWFyVGltZW91dChtYXJrZXIpIHtcbiAgICBpZiAoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgLy8gaWYgY2xlYXJUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBkZWZhdWx0Q2xlYXJUaW1lb3V0IHx8ICFjYWNoZWRDbGVhclRpbWVvdXQpICYmIGNsZWFyVGltZW91dCkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfSBjYXRjaCAoZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgIHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwobnVsbCwgbWFya2VyKTtcbiAgICAgICAgfSBjYXRjaCAoZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvci5cbiAgICAgICAgICAgIC8vIFNvbWUgdmVyc2lvbnMgb2YgSS5FLiBoYXZlIGRpZmZlcmVudCBydWxlcyBmb3IgY2xlYXJUaW1lb3V0IHZzIHNldFRpbWVvdXRcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbCh0aGlzLCBtYXJrZXIpO1xuICAgICAgICB9XG4gICAgfVxuXG5cblxufVxudmFyIHF1ZXVlID0gW107XG52YXIgZHJhaW5pbmcgPSBmYWxzZTtcbnZhciBjdXJyZW50UXVldWU7XG52YXIgcXVldWVJbmRleCA9IC0xO1xuXG5mdW5jdGlvbiBjbGVhblVwTmV4dFRpY2soKSB7XG4gICAgaWYgKCFkcmFpbmluZyB8fCAhY3VycmVudFF1ZXVlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBpZiAoY3VycmVudFF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBxdWV1ZSA9IGN1cnJlbnRRdWV1ZS5jb25jYXQocXVldWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICB9XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBkcmFpblF1ZXVlKCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBkcmFpblF1ZXVlKCkge1xuICAgIGlmIChkcmFpbmluZykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciB0aW1lb3V0ID0gcnVuVGltZW91dChjbGVhblVwTmV4dFRpY2spO1xuICAgIGRyYWluaW5nID0gdHJ1ZTtcblxuICAgIHZhciBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgd2hpbGUobGVuKSB7XG4gICAgICAgIGN1cnJlbnRRdWV1ZSA9IHF1ZXVlO1xuICAgICAgICBxdWV1ZSA9IFtdO1xuICAgICAgICB3aGlsZSAoKytxdWV1ZUluZGV4IDwgbGVuKSB7XG4gICAgICAgICAgICBpZiAoY3VycmVudFF1ZXVlKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudFF1ZXVlW3F1ZXVlSW5kZXhdLnJ1bigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICAgICAgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIH1cbiAgICBjdXJyZW50UXVldWUgPSBudWxsO1xuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgcnVuQ2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xufVxuXG5wcm9jZXNzLm5leHRUaWNrID0gZnVuY3Rpb24gKGZ1bikge1xuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggLSAxKTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHF1ZXVlLnB1c2gobmV3IEl0ZW0oZnVuLCBhcmdzKSk7XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCA9PT0gMSAmJiAhZHJhaW5pbmcpIHtcbiAgICAgICAgcnVuVGltZW91dChkcmFpblF1ZXVlKTtcbiAgICB9XG59O1xuXG4vLyB2OCBsaWtlcyBwcmVkaWN0aWJsZSBvYmplY3RzXG5mdW5jdGlvbiBJdGVtKGZ1biwgYXJyYXkpIHtcbiAgICB0aGlzLmZ1biA9IGZ1bjtcbiAgICB0aGlzLmFycmF5ID0gYXJyYXk7XG59XG5JdGVtLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5mdW4uYXBwbHkobnVsbCwgdGhpcy5hcnJheSk7XG59O1xucHJvY2Vzcy50aXRsZSA9ICdicm93c2VyJztcbnByb2Nlc3MuYnJvd3NlciA9IHRydWU7XG5wcm9jZXNzLmVudiA9IHt9O1xucHJvY2Vzcy5hcmd2ID0gW107XG5wcm9jZXNzLnZlcnNpb24gPSAnJzsgLy8gZW1wdHkgc3RyaW5nIHRvIGF2b2lkIHJlZ2V4cCBpc3N1ZXNcbnByb2Nlc3MudmVyc2lvbnMgPSB7fTtcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbnByb2Nlc3Mub24gPSBub29wO1xucHJvY2Vzcy5hZGRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLm9uY2UgPSBub29wO1xucHJvY2Vzcy5vZmYgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUFsbExpc3RlbmVycyA9IG5vb3A7XG5wcm9jZXNzLmVtaXQgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kT25jZUxpc3RlbmVyID0gbm9vcDtcblxucHJvY2Vzcy5saXN0ZW5lcnMgPSBmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gW10gfVxuXG5wcm9jZXNzLmJpbmRpbmcgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5iaW5kaW5nIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5cbnByb2Nlc3MuY3dkID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gJy8nIH07XG5wcm9jZXNzLmNoZGlyID0gZnVuY3Rpb24gKGRpcikge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5jaGRpciBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xucHJvY2Vzcy51bWFzayA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gMDsgfTtcbiIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgcXVlcnlTdHJpbmcgZnJvbSAncXVlcnktc3RyaW5nJztcbmltcG9ydCB7IEdvb2dsZUFwaVdyYXBwZXIgfSBmcm9tICdnb29nbGUtbWFwcy1yZWFjdCc7XG5cbi8vIE1VSVxuaW1wb3J0IE11aVRoZW1lUHJvdmlkZXIgZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvc3R5bGVzL011aVRoZW1lUHJvdmlkZXInO1xuaW1wb3J0IHsgY3JlYXRlTXVpVGhlbWUgfSBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9zdHlsZXMnO1xuaW1wb3J0IHdpdGhXaWR0aCBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS93aXRoV2lkdGgnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBUeXBvZ3JhcGh5IGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL1R5cG9ncmFwaHknO1xuaW1wb3J0IHsgd2l0aFN0eWxlcyB9IGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL3N0eWxlcyc7XG5cbi8vIENvbXBvbmVudHNcbmltcG9ydCBUb29sQmFyIGZyb20gJy4vY29tcG9uZW50cy9Ub29sQmFyJztcbmltcG9ydCBNYXAgZnJvbSAnLi9jb21wb25lbnRzL01hcCc7XG5pbXBvcnQgSW5wdXRGaWVsZCBmcm9tICcuL2NvbXBvbmVudHMvSW5wdXRGaWVsZCc7XG5pbXBvcnQgU2VhcmNoQnV0dG9uIGZyb20gJy4vY29tcG9uZW50cy9TZWFyY2hCdXR0b24nO1xuaW1wb3J0IENhcmRUYWJsZSBmcm9tICcuL2NvbXBvbmVudHMvQ2FyZFRhYmxlJztcblxuXG4vLyBVSVxuaW1wb3J0IEdyaWQgZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvR3JpZCc7XG5pbXBvcnQgeyBCdXR0b24gfSBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZSc7XG5pbXBvcnQgTGluZWFyUHJvZ3Jlc3MgZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvTGluZWFyUHJvZ3Jlc3MnO1xuXG5cblxuY29uc3QgdGhlbWUgPSBjcmVhdGVNdWlUaGVtZSh7XG4gICAgcGFsZXR0ZToge1xuICAgICAgICB0eXBlOiAnbGlnaHQnXG4gICAgfVxufSk7XG5cbmNvbnN0IHN0eWxlcyA9IHRoZW1lID0+ICh7XG4gICAgd3JhcHBlcjoge1xuICAgICAgICBoZWlnaHQ6ICcxMDB2aCcsXG4gICAgICAgIC8vIGJhY2tncm91bmRDb2xvcjogJ2dyZXknLFxuICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcbiAgICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICAgIGFsaWduQ29udGVudDogJ2NlbnRlcicsXG4gICAgICAgIG1hcmdpblRvcDogJzEwcHgnXG4gICAgfSxcbiAgICBjb250YWluZXI6IHtcbiAgICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICAgIHdpZHRoOiAnOTB2dycsXG4gICAgICAgIC8vIGJhY2tncm91bmRDb2xvcjogJ2N5YW4nLFxuICAgICAgICBhbGlnbkl0ZW1zOiAnZmxleC1zdGFydCcsXG4gICAgICAgIGFsaWduQ29udGVudDogJ2ZsZXgtc3RhcnQnLFxuICAgICAgICBqdXN0aWZ5Q29udGVudDogJ2ZsZXgtc3RhcnQnXG4gICAgfSxcbiAgICBwYWRkaW5nOiB7XG4gICAgICAgIGhlaWdodDogJzE1cHgnLFxuICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICAvLyBiYWNrZ3JvdW5kQ29sb3I6ICdncmV5J1xuICAgIH1cbn0pO1xuXG5jbGFzcyBBcHAgZXh0ZW5kcyBDb21wb25lbnQge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICAvLyBQVVQgU1RBVEUgVVBXQVJEU1xuICAgICAgICAvLyBPTkxZIFBBU1MgRE9XTiBEQVRBIFRPIENISUxEIENPTVBPTkVOVFNcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgICAgIGRlcGFyTGF0OiB1bmRlZmluZWQsXG4gICAgICAgICAgICBkZXBhckxuZzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgZGVwYXJBZGRyOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBkZXN0TGF0OiB1bmRlZmluZWQsXG4gICAgICAgICAgICBkZXN0TG5nOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBkZXBhckFkZHI6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGVzdERhdGE6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGxvYWRpbmc6IGZhbHNlLFxuICAgICAgICAgICAgdXNlclByb2ZpbGU6IHVuZGVmaW5lZFxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogXG4gICAgICogVXBkYXRlIHRoZSBwb3NpdGlvblxuICAgICAqIFxuICAgICAqIERvYzoge0BsaW5rICBodHRwczovL2RldmVsb3BlcnMuZ29vZ2xlLmNvbS9tYXBzL2RvY3VtZW50YXRpb24vamF2YXNjcmlwdC9yZWZlcmVuY2UvMy9wbGFjZXMtc2VydmljZSNQbGFjZVJlc3VsdH1cbiAgICAgKiBcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gdGFnICAgICAgICAgICAgICBUYWcgb2YgZW5kcG9pbnQuIGBkZXBhciB8fCBkZXN0YFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBsb2NhdGlvbiAgICAgICAgIHtsYXQ6ICwgbG5nOiB9XG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtkaXNwbGF5TmFtZV0gICAgQWRkcmVzcyAvIE5pY2tuYW1lIG9mIHRoZSBsb2NhdGlvbiBkaXNwbGF5ZWQgb24gdGhlIHRleHQgZmllbGRcbiAgICAgKi9cbiAgICB1cGRhdGVMb2NhdGlvbiA9ICh0YWcsIGxvY2F0aW9uLCBkaXNwbGF5TmFtZSkgPT4ge1xuICAgICAgICBcbiAgICAgICAgLy8gT3B0aW9uYWwgUGFyYW1cbiAgICAgICAgZGlzcGxheU5hbWUgPSBkaXNwbGF5TmFtZSB8fCB1bmRlZmluZWQ7XG4gICAgICAgIFxuICAgICAgICAvLyBjb25zb2xlLmxvZyhcIltVcGRhdGVMb2NhdGlvbl1cIiwgdGFnLCBsb2NhdGlvbiwgZGlzcGxheU5hbWUpO1xuXG4gICAgICAgIGlmICh0YWcgPT0gXCJkZXBhclwiKSB7XG4gICAgICAgICAgICBpZiAobG9jYXRpb24pIHtcbiAgICAgICAgICAgICAgICAvLyBTZXQgbG9jYXRpb25cbiAgICAgICAgICAgICAgICBpZiAoZGlzcGxheU5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZXBhckxhdDogbG9jYXRpb24ubGF0LCBcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlcGFyTG5nOiBsb2NhdGlvbi5sbmcsXG4gICAgICAgICAgICAgICAgICAgICAgICBkZXBhckFkZHI6IGRpc3BsYXlOYW1lXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZ2VvY29kZUxhdExuZyhcImRlcGFyQWRkclwiLCBsb2NhdGlvbik7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVwYXJMYXQ6IGxvY2F0aW9uLmxhdCwgXG4gICAgICAgICAgICAgICAgICAgICAgICBkZXBhckxuZzogbG9jYXRpb24ubG5nLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIENsZWFyIGxvY2F0aW9uXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgICAgIGRlcGFyTGF0OiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgICAgIGRlcGFyTG5nOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgICAgIGRlcGFyQWRkcjogdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICh0YWcgPT0gXCJkZXN0XCIpIHtcbiAgICAgICAgICAgIGlmIChsb2NhdGlvbikge1xuICAgICAgICAgICAgICAgIGlmIChkaXNwbGF5TmFtZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlc3RMYXQ6IGxvY2F0aW9uLmxhdCwgXG4gICAgICAgICAgICAgICAgICAgICAgICBkZXN0TG5nOiBsb2NhdGlvbi5sbmcsXG4gICAgICAgICAgICAgICAgICAgICAgICBkZXN0QWRkcjogZGlzcGxheU5hbWVcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5nZW9jb2RlTGF0TG5nKFwiZGVzdEFkZHJcIiwgbG9jYXRpb24pO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlc3RMYXQ6IGxvY2F0aW9uLmxhdCwgXG4gICAgICAgICAgICAgICAgICAgICAgICBkZXN0TG5nOiBsb2NhdGlvbi5sbmcsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgICAgIGRlc3RMYXQ6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICAgICAgZGVzdExuZzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgICAgICBkZXN0QWRkcjogdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIltFcnJdIFVuZGVmaW5lZCB0YWcvcGxhY2VcIik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZW9jb2RlTGF0TG5nKG5hbWUsIGxhdGxuZykge1xuICAgICAgICB2YXIgeyBnb29nbGUgfSA9IHRoaXMucHJvcHM7XG4gICAgICAgIHZhciBnZW9jb2RlciA9IG5ldyBnb29nbGUubWFwcy5HZW9jb2RlcjtcbiAgICAgICAgXG4gICAgICAgIGdlb2NvZGVyLmdlb2NvZGUoeydsb2NhdGlvbic6IGxhdGxuZ30sIGZ1bmN0aW9uIChyZXN1bHRzLCBzdGF0dXMpIHtcbiAgICAgICAgICAgIGlmIChzdGF0dXMgPT09ICdPSycpIHtcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhcIltHZW9Db2RpbmddXCIpO1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgICAgICBbbmFtZV06IHJlc3VsdHNbMF0uZm9ybWF0dGVkX2FkZHJlc3NcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIkZhaWxlZCB0byByZXRyaWV2ZSBpbmZvcm1hdGlvblwiKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgfS5iaW5kKHRoaXMpKTtcbiAgICB9XG4gICAgXG4gICAgc2V0Q3VycmVudExvY2F0aW9uKCkge1xuICAgICAgICBpZiAobmF2aWdhdG9yLmdlb2xvY2F0aW9uKSB7XG4gICAgICAgICAgICAvLyBUT0RPOiBIYW5sZGUgZmFpbGVkIGNhc2VcbiAgICAgICAgICAgIC8vIHZhciByZXMgPSB1bmRlZmluZWRcbiAgICAgICAgICAgIC8vIG5hdmlnYXRvci5nZW9sb2NhdGlvbi5nZXRDdXJyZW50UG9zaXRpb24oKHBvc2l0aW9uKSA9PiB7XG4gICAgICAgICAgICAvLyAgICAgdGhpcy51cGRhdGVMb2NhdGlvbihcImRlcGFyXCIsIHsgbGF0OiBwb3NpdGlvbi5jb29yZHMubGF0aXR1ZGUsIGxuZzogcG9zaXRpb24uY29vcmRzLmxvbmdpdHVkZSB9KTtcbiAgICAgICAgICAgIC8vICAgICByZXMgPSAgeyBsYXQ6IHBvc2l0aW9uLmNvb3Jkcy5sYXRpdHVkZSwgbG5nOiBwb3NpdGlvbi5jb29yZHMubG9uZ2l0dWRlIH1cbiAgICAgICAgICAgIC8vIH0pO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICB2YXIgZ2V0UG9zaXRpb24gPSBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgIG5hdmlnYXRvci5nZW9sb2NhdGlvbi5nZXRDdXJyZW50UG9zaXRpb24ocmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICAgICAgICB9KS50aGVuKChwb3NpdGlvbikgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZUxvY2F0aW9uKFwiZGVwYXJcIiwgeyBsYXQ6IHBvc2l0aW9uLmNvb3Jkcy5sYXRpdHVkZSwgbG5nOiBwb3NpdGlvbi5jb29yZHMubG9uZ2l0dWRlIH0pO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcG9zaXRpb247XG4gICAgICAgICAgICAgICAgfSwgKHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHJldHVybiBnZXRQb3NpdGlvbjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBcIlwiO1xuICAgICAgICB9XG4gICAgfVxuICAgIFxuICAgIHNlYXJjaEZhcmUgPSAoKSA9PiB7XG4gICAgICAgIGlmICghdGhpcy5zdGF0ZS5kZXBhckxhdCB8fCAhdGhpcy5zdGF0ZS5kZXBhckxuZyB8fCAhdGhpcy5zdGF0ZS5kZXN0TGF0IHx8ICF0aGlzLnN0YXRlLmRlc3RMbmcpIHtcbiAgICAgICAgICAgIGFsZXJ0KCdQbGVhc2Ugc2V0IGJvdGggZGVwYXJ0dXJlIGFkZHJlc3MgYW5kIGRlc3RpbmF0aW9uIGFkZHJlc3MuJyk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTZXQgbG9hZGluZyBzdGF0dXNcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBsb2FkaW5nOiB0cnVlXG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIFNldCBxdWVyeSBwYXJhbVxuICAgICAgICBjb25zdCBkZXBhckxhdCA9IHRoaXMuc3RhdGUuZGVwYXJMYXQ7XG4gICAgICAgIGNvbnN0IGRlcGFyTG5nID0gdGhpcy5zdGF0ZS5kZXBhckxuZztcbiAgICAgICAgY29uc3QgZGVzdExhdCA9IHRoaXMuc3RhdGUuZGVzdExhdDtcbiAgICAgICAgY29uc3QgZGVzdExuZyA9IHRoaXMuc3RhdGUuZGVzdExuZztcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IHF1ZXJ5UGFyYW0gPSBgP2RlcGFyX2xhdD0ke2RlcGFyTGF0fSZkZXBhcl9sbmc9JHtkZXBhckxuZ30mZGVzdF9sYXQ9JHtkZXN0TGF0fSZkZXN0X2xuZz0ke2Rlc3RMbmd9YDtcblxuICAgICAgICBjb25zdCBlc3RpbWF0ZUFQSSA9IFwiaHR0cHM6Ly9seWJlci1zZXJ2ZXIuaGVyb2t1YXBwLmNvbS9hcGkvZXN0aW1hdGVcIiArIHF1ZXJ5UGFyYW07XG5cbiAgICAgICAgZmV0Y2goZXN0aW1hdGVBUEksIHtcbiAgICAgICAgICAgIG1ldGhvZDogJ0dFVCdcbiAgICAgICAgfSlcbiAgICAgICAgLnRoZW4ocmVzcG9uc2UgPT4gcmVzcG9uc2UuanNvbigpKVxuICAgICAgICAudGhlbihkYXRhID0+IHtcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgZXN0RGF0YTogZGF0YS5wcmljZXMsXG4gICAgICAgICAgICBsb2FkaW5nOiBmYWxzZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIExpZmUgQ3ljbGUgSG9va3NcbiAgICAgKi9cbiAgICBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzLCBwcmV2U3RhdGUpIHtcbiAgICAgICAgaWYgKCF0aGlzLnN0YXRlLmRlcGFyTGF0ICYmICF0aGlzLnN0YXRlLmRlcGFyTG5nICYmICF0aGlzLnN0YXRlLmRlc3RMYXQgJiYgIXRoaXMuc3RhdGUuZGVzdExuZykge1xuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coXCJDbGVhcmVkIGRlcGFydHVyZSAmIGRlc3RpbmF0aW9uIVwiKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBcbiAgICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgICAgLy8gbGV0IHBhcnNlZCA9IHF1ZXJ5U3RyaW5nLnBhcnNlKHdpbmRvdy5sb2NhdGlvbi5zZWFyY2gpO1xuICAgICAgICAvLyBsZXQgYWNjZXNzVG9rZW4gPSBwYXJzZWQuYWNjZXNzX3Rva2VuO1xuICAgICAgICBcbiAgICAgICAgLy8gaWYgKCFhY2Nlc3NUb2tlbikge1xuICAgICAgICAvLyAgICAgcmV0dXJuO1xuICAgICAgICAvLyB9XG5cbiAgICAgICAgLy8gY29uc29sZS5sb2coXCJBY2Nlc3NUb2tlblwiLCBhY2Nlc3NUb2tlbik7XG5cbiAgICAgICAgLy8gZmV0Y2goXCJodHRwczovL2FwaS51YmVyLmNvbS92MS4yL21lXCIsIHtcbiAgICAgICAgLy8gICAgIGhlYWRlcnM6IHtcbiAgICAgICAgLy8gICAgICAgICAnQXV0aG9yaXphdGlvbic6ICdCZWFyZXIgJyArIGFjY2Vzc1Rva2VuLFxuICAgICAgICAvLyAgICAgICAgICdBY2NlcHQtTGFuZ3VhZ2UnOiAnZW5fVScsXG4gICAgICAgIC8vICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xuICAgICAgICAvLyAgICAgfVxuICAgICAgICAvLyB9KS50aGVuKHJlcyA9PiByZXMuanNvbigpKVxuICAgICAgICAvLyAudGhlbihkYXRhID0+IHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAvLyAgICAgdXNlclByb2ZpbGU6IGRhdGFcbiAgICAgICAgLy8gfSkpXG4gICAgICAgIC8vIC50aGVuKCgpID0+IGNvbnNvbGUubG9nKHRoaXMuc3RhdGUudXNlclByb2ZpbGUpKVxuICAgICAgICAvLyAuY2F0Y2goZSA9PiBjb25zb2xlLmxvZyhlKSk7XG4gICAgfVxuXG4gICAgcmVuZGVyKCkge1xuICAgICAgICBjb25zdCB7IGNsYXNzZXMgfSA9IHRoaXMucHJvcHM7XG5cbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYXBwQ29udGFpbmVyXCI+XG4gICAgICAgICAgICAgICAgPE11aVRoZW1lUHJvdmlkZXIgdGhlbWU9e3RoZW1lfT4gXG4gICAgICAgICAgICAgICAgICAgIDxUb29sQmFyIGRpc2FibGVHdXR0ZXJzPVwidHJ1ZVwiLz5cbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZS51c2VyUHJvZmlsZSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgPFR5cG9ncmFwaHkgdmFyaWFudD1cImJvZHkxXCIgY29sb3I9XCJpbmhlcml0XCIgY2xhc3NOYW1lPXtjbGFzc2VzLmZsZXh9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEhlbGxvLCB7dGhpcy5zdGF0ZS51c2VyUHJvZmlsZS5maXJzdF9uYW1lfSB7dGhpcy5zdGF0ZS51c2VyUHJvZmlsZS5sYXN0X25hbWV9XG4gICAgICAgICAgICAgICAgICAgICAgICA8L1R5cG9ncmFwaHk+XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e2NsYXNzZXMud3JhcHBlcn0+XG4gICAgICAgICAgICAgICAgICAgICAgICA8R3JpZCBjb250YWluZXIgZGlyZWN0aW9uPVwicm93XCIgY2xhc3NOYW1lPXtjbGFzc2VzLmNvbnRhaW5lcn0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPE1hcFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnb29nbGU9e3RoaXMucHJvcHMuZ29vZ2xlfSBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVwYXJMYXQ9e3RoaXMuc3RhdGUuZGVwYXJMYXR9IFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXBhckxuZz17dGhpcy5zdGF0ZS5kZXBhckxuZ31cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzdExhdD17dGhpcy5zdGF0ZS5kZXN0TGF0fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXN0TG5nPXt0aGlzLnN0YXRlLmRlc3RMbmd9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlcGFyVmlld1BvcnQ9e3RoaXMuc3RhdGUuZGVwYXJQbGFjZSA/IHRoaXMuc3RhdGUuZGVwYXJQbGFjZS5nZW9tZXRyeS52aWV3cG9ydCA6IHVuZGVmaW5lZH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzdFZpZXdQb3J0PXt0aGlzLnN0YXRlLmRlc3RQbGFjID8gdGhpcy5zdGF0ZS5kZXN0UGxhY2UuZ2VvbWV0cnkudmlld3BvcnQgOiB1bmRlZmluZWR9IFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVMb2NhdGlvbj17dGhpcy51cGRhdGVMb2NhdGlvbn1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtjbGFzc2VzLnBhZGRpbmd9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxJbnB1dEZpZWxkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17Y2xhc3Nlcy5pbnB1dEZpZWxkfSBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ29vZ2xlPXt0aGlzLnByb3BzLmdvb2dsZX0gXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZUxvY2F0aW9uPXt0aGlzLnVwZGF0ZUxvY2F0aW9ufVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYW5kbGVDdXJyZW50TG9jYXRpb249e3RoaXMuc2V0Q3VycmVudExvY2F0aW9uLmJpbmQodGhpcyl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZVNlYXJjaD17dGhpcy5zZWFyY2hGYXJlLmJpbmQodGhpcyl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlcGFyQWRkcj17dGhpcy5zdGF0ZS5kZXBhckFkZHJ9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc3RBZGRyPXt0aGlzLnN0YXRlLmRlc3RBZGRyfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlLmxvYWRpbmdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyA8R3JpZCBpdGVtIHN0eWxlPXt7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9fT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxMaW5lYXJQcm9ncmVzcyAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L0dyaWQ+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogPENhcmRUYWJsZSBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVzdERhdGE9e3RoaXMuc3RhdGUuZXN0RGF0YX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlcGFyTGF0PXt0aGlzLnN0YXRlLmRlcGFyTGF0fSBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlcGFyTG5nPXt0aGlzLnN0YXRlLmRlcGFyTG5nfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzdExhdD17dGhpcy5zdGF0ZS5kZXN0TGF0fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzdExuZz17dGhpcy5zdGF0ZS5kZXN0TG5nfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVwYXJBZGRyPXt0aGlzLnN0YXRlLmRlcGFyQWRkcn1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc3RBZGRyPXt0aGlzLnN0YXRlLmRlc3RBZGRyfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgey8qIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZS5lc3REYXRhXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gPENhcmRUYWJsZSBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVzdERhdGE9e3RoaXMuc3RhdGUuZXN0RGF0YX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlcGFyTGF0PXt0aGlzLnN0YXRlLmRlcGFyTGF0fSBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlcGFyTG5nPXt0aGlzLnN0YXRlLmRlcGFyTG5nfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzdExhdD17dGhpcy5zdGF0ZS5kZXN0TGF0fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzdExuZz17dGhpcy5zdGF0ZS5kZXN0TG5nfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVwYXJBZGRyPXt0aGlzLnN0YXRlLmRlcGFyQWRkcn1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc3RBZGRyPXt0aGlzLnN0YXRlLmRlc3RBZGRyfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IDxJbnB1dEZpZWxkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2NsYXNzZXMuaW5wdXRGaWVsZH0gXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnb29nbGU9e3RoaXMucHJvcHMuZ29vZ2xlfSBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZUxvY2F0aW9uPXt0aGlzLnVwZGF0ZUxvY2F0aW9ufVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFuZGxlQ3VycmVudExvY2F0aW9uPXt0aGlzLnNldEN1cnJlbnRMb2NhdGlvbn1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZVNlYXJjaD17dGhpcy5zZWFyY2hGYXJlLmJpbmQodGhpcyl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gKi99XG4gICAgICAgICAgICAgICAgICAgICAgICA8L0dyaWQ+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDwvTXVpVGhlbWVQcm92aWRlcj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICApXG4gICAgfVxufVxuXG52YXIgZ29vZ2xlVG9rZW4gPSB1bmRlZmluZWQ7XG5pZiAocHJvY2Vzcy5lbnYuZ29vZ2xlVG9rZW4pIHtcbiAgICBnb29nbGVUb2tlbiA9IHByb2Nlc3MuZW52Lmdvb2dsZVRva2VuXG59IGVsc2Uge1xuICAgIGdvb2dsZVRva2VuID0gcmVxdWlyZSgnLi4vY29uZmlnLmpzb24nKS5nb29nbGVUb2tlbjtcbn1cblxuLy8gdmFyIGdvb2dsZVRva2VuID0gcHJvY2Vzcy5lbnYuZ29vZ2xlVG9rZW5cblxuZXhwb3J0IGRlZmF1bHQgR29vZ2xlQXBpV3JhcHBlcih7XG4gICAgYXBpS2V5OiBnb29nbGVUb2tlbixcbiAgfSkod2l0aFN0eWxlcyhzdHlsZXMpKEFwcCkpOyIsIlxuLyoqXG4gKiBXaGVuIHNvdXJjZSBtYXBzIGFyZSBlbmFibGVkLCBgc3R5bGUtbG9hZGVyYCB1c2VzIGEgbGluayBlbGVtZW50IHdpdGggYSBkYXRhLXVyaSB0b1xuICogZW1iZWQgdGhlIGNzcyBvbiB0aGUgcGFnZS4gVGhpcyBicmVha3MgYWxsIHJlbGF0aXZlIHVybHMgYmVjYXVzZSBub3cgdGhleSBhcmUgcmVsYXRpdmUgdG8gYVxuICogYnVuZGxlIGluc3RlYWQgb2YgdGhlIGN1cnJlbnQgcGFnZS5cbiAqXG4gKiBPbmUgc29sdXRpb24gaXMgdG8gb25seSB1c2UgZnVsbCB1cmxzLCBidXQgdGhhdCBtYXkgYmUgaW1wb3NzaWJsZS5cbiAqXG4gKiBJbnN0ZWFkLCB0aGlzIGZ1bmN0aW9uIFwiZml4ZXNcIiB0aGUgcmVsYXRpdmUgdXJscyB0byBiZSBhYnNvbHV0ZSBhY2NvcmRpbmcgdG8gdGhlIGN1cnJlbnQgcGFnZSBsb2NhdGlvbi5cbiAqXG4gKiBBIHJ1ZGltZW50YXJ5IHRlc3Qgc3VpdGUgaXMgbG9jYXRlZCBhdCBgdGVzdC9maXhVcmxzLmpzYCBhbmQgY2FuIGJlIHJ1biB2aWEgdGhlIGBucG0gdGVzdGAgY29tbWFuZC5cbiAqXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY3NzKSB7XG4gIC8vIGdldCBjdXJyZW50IGxvY2F0aW9uXG4gIHZhciBsb2NhdGlvbiA9IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgJiYgd2luZG93LmxvY2F0aW9uO1xuXG4gIGlmICghbG9jYXRpb24pIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJmaXhVcmxzIHJlcXVpcmVzIHdpbmRvdy5sb2NhdGlvblwiKTtcbiAgfVxuXG5cdC8vIGJsYW5rIG9yIG51bGw/XG5cdGlmICghY3NzIHx8IHR5cGVvZiBjc3MgIT09IFwic3RyaW5nXCIpIHtcblx0ICByZXR1cm4gY3NzO1xuICB9XG5cbiAgdmFyIGJhc2VVcmwgPSBsb2NhdGlvbi5wcm90b2NvbCArIFwiLy9cIiArIGxvY2F0aW9uLmhvc3Q7XG4gIHZhciBjdXJyZW50RGlyID0gYmFzZVVybCArIGxvY2F0aW9uLnBhdGhuYW1lLnJlcGxhY2UoL1xcL1teXFwvXSokLywgXCIvXCIpO1xuXG5cdC8vIGNvbnZlcnQgZWFjaCB1cmwoLi4uKVxuXHQvKlxuXHRUaGlzIHJlZ3VsYXIgZXhwcmVzc2lvbiBpcyBqdXN0IGEgd2F5IHRvIHJlY3Vyc2l2ZWx5IG1hdGNoIGJyYWNrZXRzIHdpdGhpblxuXHRhIHN0cmluZy5cblxuXHQgL3VybFxccypcXCggID0gTWF0Y2ggb24gdGhlIHdvcmQgXCJ1cmxcIiB3aXRoIGFueSB3aGl0ZXNwYWNlIGFmdGVyIGl0IGFuZCB0aGVuIGEgcGFyZW5zXG5cdCAgICggID0gU3RhcnQgYSBjYXB0dXJpbmcgZ3JvdXBcblx0ICAgICAoPzogID0gU3RhcnQgYSBub24tY2FwdHVyaW5nIGdyb3VwXG5cdCAgICAgICAgIFteKShdICA9IE1hdGNoIGFueXRoaW5nIHRoYXQgaXNuJ3QgYSBwYXJlbnRoZXNlc1xuXHQgICAgICAgICB8ICA9IE9SXG5cdCAgICAgICAgIFxcKCAgPSBNYXRjaCBhIHN0YXJ0IHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICAoPzogID0gU3RhcnQgYW5vdGhlciBub24tY2FwdHVyaW5nIGdyb3Vwc1xuXHQgICAgICAgICAgICAgICAgIFteKShdKyAgPSBNYXRjaCBhbnl0aGluZyB0aGF0IGlzbid0IGEgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICAgICB8ICA9IE9SXG5cdCAgICAgICAgICAgICAgICAgXFwoICA9IE1hdGNoIGEgc3RhcnQgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICAgICAgICAgW14pKF0qICA9IE1hdGNoIGFueXRoaW5nIHRoYXQgaXNuJ3QgYSBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgICAgIFxcKSAgPSBNYXRjaCBhIGVuZCBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgKSAgPSBFbmQgR3JvdXBcbiAgICAgICAgICAgICAgKlxcKSA9IE1hdGNoIGFueXRoaW5nIGFuZCB0aGVuIGEgY2xvc2UgcGFyZW5zXG4gICAgICAgICAgKSAgPSBDbG9zZSBub24tY2FwdHVyaW5nIGdyb3VwXG4gICAgICAgICAgKiAgPSBNYXRjaCBhbnl0aGluZ1xuICAgICAgICkgID0gQ2xvc2UgY2FwdHVyaW5nIGdyb3VwXG5cdCBcXCkgID0gTWF0Y2ggYSBjbG9zZSBwYXJlbnNcblxuXHQgL2dpICA9IEdldCBhbGwgbWF0Y2hlcywgbm90IHRoZSBmaXJzdC4gIEJlIGNhc2UgaW5zZW5zaXRpdmUuXG5cdCAqL1xuXHR2YXIgZml4ZWRDc3MgPSBjc3MucmVwbGFjZSgvdXJsXFxzKlxcKCgoPzpbXikoXXxcXCgoPzpbXikoXSt8XFwoW14pKF0qXFwpKSpcXCkpKilcXCkvZ2ksIGZ1bmN0aW9uKGZ1bGxNYXRjaCwgb3JpZ1VybCkge1xuXHRcdC8vIHN0cmlwIHF1b3RlcyAoaWYgdGhleSBleGlzdClcblx0XHR2YXIgdW5xdW90ZWRPcmlnVXJsID0gb3JpZ1VybFxuXHRcdFx0LnRyaW0oKVxuXHRcdFx0LnJlcGxhY2UoL15cIiguKilcIiQvLCBmdW5jdGlvbihvLCAkMSl7IHJldHVybiAkMTsgfSlcblx0XHRcdC5yZXBsYWNlKC9eJyguKiknJC8sIGZ1bmN0aW9uKG8sICQxKXsgcmV0dXJuICQxOyB9KTtcblxuXHRcdC8vIGFscmVhZHkgYSBmdWxsIHVybD8gbm8gY2hhbmdlXG5cdFx0aWYgKC9eKCN8ZGF0YTp8aHR0cDpcXC9cXC98aHR0cHM6XFwvXFwvfGZpbGU6XFwvXFwvXFwvfFxccyokKS9pLnRlc3QodW5xdW90ZWRPcmlnVXJsKSkge1xuXHRcdCAgcmV0dXJuIGZ1bGxNYXRjaDtcblx0XHR9XG5cblx0XHQvLyBjb252ZXJ0IHRoZSB1cmwgdG8gYSBmdWxsIHVybFxuXHRcdHZhciBuZXdVcmw7XG5cblx0XHRpZiAodW5xdW90ZWRPcmlnVXJsLmluZGV4T2YoXCIvL1wiKSA9PT0gMCkge1xuXHRcdCAgXHQvL1RPRE86IHNob3VsZCB3ZSBhZGQgcHJvdG9jb2w/XG5cdFx0XHRuZXdVcmwgPSB1bnF1b3RlZE9yaWdVcmw7XG5cdFx0fSBlbHNlIGlmICh1bnF1b3RlZE9yaWdVcmwuaW5kZXhPZihcIi9cIikgPT09IDApIHtcblx0XHRcdC8vIHBhdGggc2hvdWxkIGJlIHJlbGF0aXZlIHRvIHRoZSBiYXNlIHVybFxuXHRcdFx0bmV3VXJsID0gYmFzZVVybCArIHVucXVvdGVkT3JpZ1VybDsgLy8gYWxyZWFkeSBzdGFydHMgd2l0aCAnLydcblx0XHR9IGVsc2Uge1xuXHRcdFx0Ly8gcGF0aCBzaG91bGQgYmUgcmVsYXRpdmUgdG8gY3VycmVudCBkaXJlY3Rvcnlcblx0XHRcdG5ld1VybCA9IGN1cnJlbnREaXIgKyB1bnF1b3RlZE9yaWdVcmwucmVwbGFjZSgvXlxcLlxcLy8sIFwiXCIpOyAvLyBTdHJpcCBsZWFkaW5nICcuLydcblx0XHR9XG5cblx0XHQvLyBzZW5kIGJhY2sgdGhlIGZpeGVkIHVybCguLi4pXG5cdFx0cmV0dXJuIFwidXJsKFwiICsgSlNPTi5zdHJpbmdpZnkobmV3VXJsKSArIFwiKVwiO1xuXHR9KTtcblxuXHQvLyBzZW5kIGJhY2sgdGhlIGZpeGVkIGNzc1xuXHRyZXR1cm4gZml4ZWRDc3M7XG59O1xuIiwiLypcblx0TUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcblx0QXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cblxudmFyIHN0eWxlc0luRG9tID0ge307XG5cbnZhclx0bWVtb2l6ZSA9IGZ1bmN0aW9uIChmbikge1xuXHR2YXIgbWVtbztcblxuXHRyZXR1cm4gZnVuY3Rpb24gKCkge1xuXHRcdGlmICh0eXBlb2YgbWVtbyA9PT0gXCJ1bmRlZmluZWRcIikgbWVtbyA9IGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cdFx0cmV0dXJuIG1lbW87XG5cdH07XG59O1xuXG52YXIgaXNPbGRJRSA9IG1lbW9pemUoZnVuY3Rpb24gKCkge1xuXHQvLyBUZXN0IGZvciBJRSA8PSA5IGFzIHByb3Bvc2VkIGJ5IEJyb3dzZXJoYWNrc1xuXHQvLyBAc2VlIGh0dHA6Ly9icm93c2VyaGFja3MuY29tLyNoYWNrLWU3MWQ4NjkyZjY1MzM0MTczZmVlNzE1YzIyMmNiODA1XG5cdC8vIFRlc3RzIGZvciBleGlzdGVuY2Ugb2Ygc3RhbmRhcmQgZ2xvYmFscyBpcyB0byBhbGxvdyBzdHlsZS1sb2FkZXJcblx0Ly8gdG8gb3BlcmF0ZSBjb3JyZWN0bHkgaW50byBub24tc3RhbmRhcmQgZW52aXJvbm1lbnRzXG5cdC8vIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3dlYnBhY2stY29udHJpYi9zdHlsZS1sb2FkZXIvaXNzdWVzLzE3N1xuXHRyZXR1cm4gd2luZG93ICYmIGRvY3VtZW50ICYmIGRvY3VtZW50LmFsbCAmJiAhd2luZG93LmF0b2I7XG59KTtcblxudmFyIGdldFRhcmdldCA9IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTtcbn07XG5cbnZhciBnZXRFbGVtZW50ID0gKGZ1bmN0aW9uIChmbikge1xuXHR2YXIgbWVtbyA9IHt9O1xuXG5cdHJldHVybiBmdW5jdGlvbih0YXJnZXQpIHtcbiAgICAgICAgICAgICAgICAvLyBJZiBwYXNzaW5nIGZ1bmN0aW9uIGluIG9wdGlvbnMsIHRoZW4gdXNlIGl0IGZvciByZXNvbHZlIFwiaGVhZFwiIGVsZW1lbnQuXG4gICAgICAgICAgICAgICAgLy8gVXNlZnVsIGZvciBTaGFkb3cgUm9vdCBzdHlsZSBpLmVcbiAgICAgICAgICAgICAgICAvLyB7XG4gICAgICAgICAgICAgICAgLy8gICBpbnNlcnRJbnRvOiBmdW5jdGlvbiAoKSB7IHJldHVybiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2Zvb1wiKS5zaGFkb3dSb290IH1cbiAgICAgICAgICAgICAgICAvLyB9XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB0YXJnZXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0YXJnZXQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBtZW1vW3RhcmdldF0gPT09IFwidW5kZWZpbmVkXCIpIHtcblx0XHRcdHZhciBzdHlsZVRhcmdldCA9IGdldFRhcmdldC5jYWxsKHRoaXMsIHRhcmdldCk7XG5cdFx0XHQvLyBTcGVjaWFsIGNhc2UgdG8gcmV0dXJuIGhlYWQgb2YgaWZyYW1lIGluc3RlYWQgb2YgaWZyYW1lIGl0c2VsZlxuXHRcdFx0aWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG5cdFx0XHRcdFx0Ly8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcblx0XHRcdFx0XHRzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuXHRcdFx0XHR9IGNhdGNoKGUpIHtcblx0XHRcdFx0XHRzdHlsZVRhcmdldCA9IG51bGw7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdG1lbW9bdGFyZ2V0XSA9IHN0eWxlVGFyZ2V0O1xuXHRcdH1cblx0XHRyZXR1cm4gbWVtb1t0YXJnZXRdXG5cdH07XG59KSgpO1xuXG52YXIgc2luZ2xldG9uID0gbnVsbDtcbnZhclx0c2luZ2xldG9uQ291bnRlciA9IDA7XG52YXJcdHN0eWxlc0luc2VydGVkQXRUb3AgPSBbXTtcblxudmFyXHRmaXhVcmxzID0gcmVxdWlyZShcIi4vdXJsc1wiKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihsaXN0LCBvcHRpb25zKSB7XG5cdGlmICh0eXBlb2YgREVCVUcgIT09IFwidW5kZWZpbmVkXCIgJiYgREVCVUcpIHtcblx0XHRpZiAodHlwZW9mIGRvY3VtZW50ICE9PSBcIm9iamVjdFwiKSB0aHJvdyBuZXcgRXJyb3IoXCJUaGUgc3R5bGUtbG9hZGVyIGNhbm5vdCBiZSB1c2VkIGluIGEgbm9uLWJyb3dzZXIgZW52aXJvbm1lbnRcIik7XG5cdH1cblxuXHRvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuXHRvcHRpb25zLmF0dHJzID0gdHlwZW9mIG9wdGlvbnMuYXR0cnMgPT09IFwib2JqZWN0XCIgPyBvcHRpb25zLmF0dHJzIDoge307XG5cblx0Ly8gRm9yY2Ugc2luZ2xlLXRhZyBzb2x1dGlvbiBvbiBJRTYtOSwgd2hpY2ggaGFzIGEgaGFyZCBsaW1pdCBvbiB0aGUgIyBvZiA8c3R5bGU+XG5cdC8vIHRhZ3MgaXQgd2lsbCBhbGxvdyBvbiBhIHBhZ2Vcblx0aWYgKCFvcHRpb25zLnNpbmdsZXRvbiAmJiB0eXBlb2Ygb3B0aW9ucy5zaW5nbGV0b24gIT09IFwiYm9vbGVhblwiKSBvcHRpb25zLnNpbmdsZXRvbiA9IGlzT2xkSUUoKTtcblxuXHQvLyBCeSBkZWZhdWx0LCBhZGQgPHN0eWxlPiB0YWdzIHRvIHRoZSA8aGVhZD4gZWxlbWVudFxuICAgICAgICBpZiAoIW9wdGlvbnMuaW5zZXJ0SW50bykgb3B0aW9ucy5pbnNlcnRJbnRvID0gXCJoZWFkXCI7XG5cblx0Ly8gQnkgZGVmYXVsdCwgYWRkIDxzdHlsZT4gdGFncyB0byB0aGUgYm90dG9tIG9mIHRoZSB0YXJnZXRcblx0aWYgKCFvcHRpb25zLmluc2VydEF0KSBvcHRpb25zLmluc2VydEF0ID0gXCJib3R0b21cIjtcblxuXHR2YXIgc3R5bGVzID0gbGlzdFRvU3R5bGVzKGxpc3QsIG9wdGlvbnMpO1xuXG5cdGFkZFN0eWxlc1RvRG9tKHN0eWxlcywgb3B0aW9ucyk7XG5cblx0cmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZSAobmV3TGlzdCkge1xuXHRcdHZhciBtYXlSZW1vdmUgPSBbXTtcblxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgaXRlbSA9IHN0eWxlc1tpXTtcblx0XHRcdHZhciBkb21TdHlsZSA9IHN0eWxlc0luRG9tW2l0ZW0uaWRdO1xuXG5cdFx0XHRkb21TdHlsZS5yZWZzLS07XG5cdFx0XHRtYXlSZW1vdmUucHVzaChkb21TdHlsZSk7XG5cdFx0fVxuXG5cdFx0aWYobmV3TGlzdCkge1xuXHRcdFx0dmFyIG5ld1N0eWxlcyA9IGxpc3RUb1N0eWxlcyhuZXdMaXN0LCBvcHRpb25zKTtcblx0XHRcdGFkZFN0eWxlc1RvRG9tKG5ld1N0eWxlcywgb3B0aW9ucyk7XG5cdFx0fVxuXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBtYXlSZW1vdmUubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBkb21TdHlsZSA9IG1heVJlbW92ZVtpXTtcblxuXHRcdFx0aWYoZG9tU3R5bGUucmVmcyA9PT0gMCkge1xuXHRcdFx0XHRmb3IgKHZhciBqID0gMDsgaiA8IGRvbVN0eWxlLnBhcnRzLmxlbmd0aDsgaisrKSBkb21TdHlsZS5wYXJ0c1tqXSgpO1xuXG5cdFx0XHRcdGRlbGV0ZSBzdHlsZXNJbkRvbVtkb21TdHlsZS5pZF07XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xufTtcblxuZnVuY3Rpb24gYWRkU3R5bGVzVG9Eb20gKHN0eWxlcywgb3B0aW9ucykge1xuXHRmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlcy5sZW5ndGg7IGkrKykge1xuXHRcdHZhciBpdGVtID0gc3R5bGVzW2ldO1xuXHRcdHZhciBkb21TdHlsZSA9IHN0eWxlc0luRG9tW2l0ZW0uaWRdO1xuXG5cdFx0aWYoZG9tU3R5bGUpIHtcblx0XHRcdGRvbVN0eWxlLnJlZnMrKztcblxuXHRcdFx0Zm9yKHZhciBqID0gMDsgaiA8IGRvbVN0eWxlLnBhcnRzLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRcdGRvbVN0eWxlLnBhcnRzW2pdKGl0ZW0ucGFydHNbal0pO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3IoOyBqIDwgaXRlbS5wYXJ0cy5sZW5ndGg7IGorKykge1xuXHRcdFx0XHRkb21TdHlsZS5wYXJ0cy5wdXNoKGFkZFN0eWxlKGl0ZW0ucGFydHNbal0sIG9wdGlvbnMpKTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0dmFyIHBhcnRzID0gW107XG5cblx0XHRcdGZvcih2YXIgaiA9IDA7IGogPCBpdGVtLnBhcnRzLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRcdHBhcnRzLnB1c2goYWRkU3R5bGUoaXRlbS5wYXJ0c1tqXSwgb3B0aW9ucykpO1xuXHRcdFx0fVxuXG5cdFx0XHRzdHlsZXNJbkRvbVtpdGVtLmlkXSA9IHtpZDogaXRlbS5pZCwgcmVmczogMSwgcGFydHM6IHBhcnRzfTtcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gbGlzdFRvU3R5bGVzIChsaXN0LCBvcHRpb25zKSB7XG5cdHZhciBzdHlsZXMgPSBbXTtcblx0dmFyIG5ld1N0eWxlcyA9IHt9O1xuXG5cdGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuXHRcdHZhciBpdGVtID0gbGlzdFtpXTtcblx0XHR2YXIgaWQgPSBvcHRpb25zLmJhc2UgPyBpdGVtWzBdICsgb3B0aW9ucy5iYXNlIDogaXRlbVswXTtcblx0XHR2YXIgY3NzID0gaXRlbVsxXTtcblx0XHR2YXIgbWVkaWEgPSBpdGVtWzJdO1xuXHRcdHZhciBzb3VyY2VNYXAgPSBpdGVtWzNdO1xuXHRcdHZhciBwYXJ0ID0ge2NzczogY3NzLCBtZWRpYTogbWVkaWEsIHNvdXJjZU1hcDogc291cmNlTWFwfTtcblxuXHRcdGlmKCFuZXdTdHlsZXNbaWRdKSBzdHlsZXMucHVzaChuZXdTdHlsZXNbaWRdID0ge2lkOiBpZCwgcGFydHM6IFtwYXJ0XX0pO1xuXHRcdGVsc2UgbmV3U3R5bGVzW2lkXS5wYXJ0cy5wdXNoKHBhcnQpO1xuXHR9XG5cblx0cmV0dXJuIHN0eWxlcztcbn1cblxuZnVuY3Rpb24gaW5zZXJ0U3R5bGVFbGVtZW50IChvcHRpb25zLCBzdHlsZSkge1xuXHR2YXIgdGFyZ2V0ID0gZ2V0RWxlbWVudChvcHRpb25zLmluc2VydEludG8pXG5cblx0aWYgKCF0YXJnZXQpIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydEludG8nIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcblx0fVxuXG5cdHZhciBsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcCA9IHN0eWxlc0luc2VydGVkQXRUb3Bbc3R5bGVzSW5zZXJ0ZWRBdFRvcC5sZW5ndGggLSAxXTtcblxuXHRpZiAob3B0aW9ucy5pbnNlcnRBdCA9PT0gXCJ0b3BcIikge1xuXHRcdGlmICghbGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3ApIHtcblx0XHRcdHRhcmdldC5pbnNlcnRCZWZvcmUoc3R5bGUsIHRhcmdldC5maXJzdENoaWxkKTtcblx0XHR9IGVsc2UgaWYgKGxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wLm5leHRTaWJsaW5nKSB7XG5cdFx0XHR0YXJnZXQuaW5zZXJ0QmVmb3JlKHN0eWxlLCBsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcC5uZXh0U2libGluZyk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG5cdFx0fVxuXHRcdHN0eWxlc0luc2VydGVkQXRUb3AucHVzaChzdHlsZSk7XG5cdH0gZWxzZSBpZiAob3B0aW9ucy5pbnNlcnRBdCA9PT0gXCJib3R0b21cIikge1xuXHRcdHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG5cdH0gZWxzZSBpZiAodHlwZW9mIG9wdGlvbnMuaW5zZXJ0QXQgPT09IFwib2JqZWN0XCIgJiYgb3B0aW9ucy5pbnNlcnRBdC5iZWZvcmUpIHtcblx0XHR2YXIgbmV4dFNpYmxpbmcgPSBnZXRFbGVtZW50KG9wdGlvbnMuaW5zZXJ0SW50byArIFwiIFwiICsgb3B0aW9ucy5pbnNlcnRBdC5iZWZvcmUpO1xuXHRcdHRhcmdldC5pbnNlcnRCZWZvcmUoc3R5bGUsIG5leHRTaWJsaW5nKTtcblx0fSBlbHNlIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoXCJbU3R5bGUgTG9hZGVyXVxcblxcbiBJbnZhbGlkIHZhbHVlIGZvciBwYXJhbWV0ZXIgJ2luc2VydEF0JyAoJ29wdGlvbnMuaW5zZXJ0QXQnKSBmb3VuZC5cXG4gTXVzdCBiZSAndG9wJywgJ2JvdHRvbScsIG9yIE9iamVjdC5cXG4gKGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJwYWNrLWNvbnRyaWIvc3R5bGUtbG9hZGVyI2luc2VydGF0KVxcblwiKTtcblx0fVxufVxuXG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQgKHN0eWxlKSB7XG5cdGlmIChzdHlsZS5wYXJlbnROb2RlID09PSBudWxsKSByZXR1cm4gZmFsc2U7XG5cdHN0eWxlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGUpO1xuXG5cdHZhciBpZHggPSBzdHlsZXNJbnNlcnRlZEF0VG9wLmluZGV4T2Yoc3R5bGUpO1xuXHRpZihpZHggPj0gMCkge1xuXHRcdHN0eWxlc0luc2VydGVkQXRUb3Auc3BsaWNlKGlkeCwgMSk7XG5cdH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlU3R5bGVFbGVtZW50IChvcHRpb25zKSB7XG5cdHZhciBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcblxuXHRpZihvcHRpb25zLmF0dHJzLnR5cGUgPT09IHVuZGVmaW5lZCkge1xuXHRcdG9wdGlvbnMuYXR0cnMudHlwZSA9IFwidGV4dC9jc3NcIjtcblx0fVxuXG5cdGFkZEF0dHJzKHN0eWxlLCBvcHRpb25zLmF0dHJzKTtcblx0aW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMsIHN0eWxlKTtcblxuXHRyZXR1cm4gc3R5bGU7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUxpbmtFbGVtZW50IChvcHRpb25zKSB7XG5cdHZhciBsaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxpbmtcIik7XG5cblx0aWYob3B0aW9ucy5hdHRycy50eXBlID09PSB1bmRlZmluZWQpIHtcblx0XHRvcHRpb25zLmF0dHJzLnR5cGUgPSBcInRleHQvY3NzXCI7XG5cdH1cblx0b3B0aW9ucy5hdHRycy5yZWwgPSBcInN0eWxlc2hlZXRcIjtcblxuXHRhZGRBdHRycyhsaW5rLCBvcHRpb25zLmF0dHJzKTtcblx0aW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMsIGxpbmspO1xuXG5cdHJldHVybiBsaW5rO1xufVxuXG5mdW5jdGlvbiBhZGRBdHRycyAoZWwsIGF0dHJzKSB7XG5cdE9iamVjdC5rZXlzKGF0dHJzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcblx0XHRlbC5zZXRBdHRyaWJ1dGUoa2V5LCBhdHRyc1trZXldKTtcblx0fSk7XG59XG5cbmZ1bmN0aW9uIGFkZFN0eWxlIChvYmosIG9wdGlvbnMpIHtcblx0dmFyIHN0eWxlLCB1cGRhdGUsIHJlbW92ZSwgcmVzdWx0O1xuXG5cdC8vIElmIGEgdHJhbnNmb3JtIGZ1bmN0aW9uIHdhcyBkZWZpbmVkLCBydW4gaXQgb24gdGhlIGNzc1xuXHRpZiAob3B0aW9ucy50cmFuc2Zvcm0gJiYgb2JqLmNzcykge1xuXHQgICAgcmVzdWx0ID0gb3B0aW9ucy50cmFuc2Zvcm0ob2JqLmNzcyk7XG5cblx0ICAgIGlmIChyZXN1bHQpIHtcblx0ICAgIFx0Ly8gSWYgdHJhbnNmb3JtIHJldHVybnMgYSB2YWx1ZSwgdXNlIHRoYXQgaW5zdGVhZCBvZiB0aGUgb3JpZ2luYWwgY3NzLlxuXHQgICAgXHQvLyBUaGlzIGFsbG93cyBydW5uaW5nIHJ1bnRpbWUgdHJhbnNmb3JtYXRpb25zIG9uIHRoZSBjc3MuXG5cdCAgICBcdG9iai5jc3MgPSByZXN1bHQ7XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgXHQvLyBJZiB0aGUgdHJhbnNmb3JtIGZ1bmN0aW9uIHJldHVybnMgYSBmYWxzeSB2YWx1ZSwgZG9uJ3QgYWRkIHRoaXMgY3NzLlxuXHQgICAgXHQvLyBUaGlzIGFsbG93cyBjb25kaXRpb25hbCBsb2FkaW5nIG9mIGNzc1xuXHQgICAgXHRyZXR1cm4gZnVuY3Rpb24oKSB7XG5cdCAgICBcdFx0Ly8gbm9vcFxuXHQgICAgXHR9O1xuXHQgICAgfVxuXHR9XG5cblx0aWYgKG9wdGlvbnMuc2luZ2xldG9uKSB7XG5cdFx0dmFyIHN0eWxlSW5kZXggPSBzaW5nbGV0b25Db3VudGVyKys7XG5cblx0XHRzdHlsZSA9IHNpbmdsZXRvbiB8fCAoc2luZ2xldG9uID0gY3JlYXRlU3R5bGVFbGVtZW50KG9wdGlvbnMpKTtcblxuXHRcdHVwZGF0ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgZmFsc2UpO1xuXHRcdHJlbW92ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgdHJ1ZSk7XG5cblx0fSBlbHNlIGlmIChcblx0XHRvYmouc291cmNlTWFwICYmXG5cdFx0dHlwZW9mIFVSTCA9PT0gXCJmdW5jdGlvblwiICYmXG5cdFx0dHlwZW9mIFVSTC5jcmVhdGVPYmplY3RVUkwgPT09IFwiZnVuY3Rpb25cIiAmJlxuXHRcdHR5cGVvZiBVUkwucmV2b2tlT2JqZWN0VVJMID09PSBcImZ1bmN0aW9uXCIgJiZcblx0XHR0eXBlb2YgQmxvYiA9PT0gXCJmdW5jdGlvblwiICYmXG5cdFx0dHlwZW9mIGJ0b2EgPT09IFwiZnVuY3Rpb25cIlxuXHQpIHtcblx0XHRzdHlsZSA9IGNyZWF0ZUxpbmtFbGVtZW50KG9wdGlvbnMpO1xuXHRcdHVwZGF0ZSA9IHVwZGF0ZUxpbmsuYmluZChudWxsLCBzdHlsZSwgb3B0aW9ucyk7XG5cdFx0cmVtb3ZlID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0cmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKTtcblxuXHRcdFx0aWYoc3R5bGUuaHJlZikgVVJMLnJldm9rZU9iamVjdFVSTChzdHlsZS5ocmVmKTtcblx0XHR9O1xuXHR9IGVsc2Uge1xuXHRcdHN0eWxlID0gY3JlYXRlU3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuXHRcdHVwZGF0ZSA9IGFwcGx5VG9UYWcuYmluZChudWxsLCBzdHlsZSk7XG5cdFx0cmVtb3ZlID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0cmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKTtcblx0XHR9O1xuXHR9XG5cblx0dXBkYXRlKG9iaik7XG5cblx0cmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZVN0eWxlIChuZXdPYmopIHtcblx0XHRpZiAobmV3T2JqKSB7XG5cdFx0XHRpZiAoXG5cdFx0XHRcdG5ld09iai5jc3MgPT09IG9iai5jc3MgJiZcblx0XHRcdFx0bmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiZcblx0XHRcdFx0bmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcFxuXHRcdFx0KSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0dXBkYXRlKG9iaiA9IG5ld09iaik7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJlbW92ZSgpO1xuXHRcdH1cblx0fTtcbn1cblxudmFyIHJlcGxhY2VUZXh0ID0gKGZ1bmN0aW9uICgpIHtcblx0dmFyIHRleHRTdG9yZSA9IFtdO1xuXG5cdHJldHVybiBmdW5jdGlvbiAoaW5kZXgsIHJlcGxhY2VtZW50KSB7XG5cdFx0dGV4dFN0b3JlW2luZGV4XSA9IHJlcGxhY2VtZW50O1xuXG5cdFx0cmV0dXJuIHRleHRTdG9yZS5maWx0ZXIoQm9vbGVhbikuam9pbignXFxuJyk7XG5cdH07XG59KSgpO1xuXG5mdW5jdGlvbiBhcHBseVRvU2luZ2xldG9uVGFnIChzdHlsZSwgaW5kZXgsIHJlbW92ZSwgb2JqKSB7XG5cdHZhciBjc3MgPSByZW1vdmUgPyBcIlwiIDogb2JqLmNzcztcblxuXHRpZiAoc3R5bGUuc3R5bGVTaGVldCkge1xuXHRcdHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IHJlcGxhY2VUZXh0KGluZGV4LCBjc3MpO1xuXHR9IGVsc2Uge1xuXHRcdHZhciBjc3NOb2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKTtcblx0XHR2YXIgY2hpbGROb2RlcyA9IHN0eWxlLmNoaWxkTm9kZXM7XG5cblx0XHRpZiAoY2hpbGROb2Rlc1tpbmRleF0pIHN0eWxlLnJlbW92ZUNoaWxkKGNoaWxkTm9kZXNbaW5kZXhdKTtcblxuXHRcdGlmIChjaGlsZE5vZGVzLmxlbmd0aCkge1xuXHRcdFx0c3R5bGUuaW5zZXJ0QmVmb3JlKGNzc05vZGUsIGNoaWxkTm9kZXNbaW5kZXhdKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0c3R5bGUuYXBwZW5kQ2hpbGQoY3NzTm9kZSk7XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIGFwcGx5VG9UYWcgKHN0eWxlLCBvYmopIHtcblx0dmFyIGNzcyA9IG9iai5jc3M7XG5cdHZhciBtZWRpYSA9IG9iai5tZWRpYTtcblxuXHRpZihtZWRpYSkge1xuXHRcdHN0eWxlLnNldEF0dHJpYnV0ZShcIm1lZGlhXCIsIG1lZGlhKVxuXHR9XG5cblx0aWYoc3R5bGUuc3R5bGVTaGVldCkge1xuXHRcdHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcblx0fSBlbHNlIHtcblx0XHR3aGlsZShzdHlsZS5maXJzdENoaWxkKSB7XG5cdFx0XHRzdHlsZS5yZW1vdmVDaGlsZChzdHlsZS5maXJzdENoaWxkKTtcblx0XHR9XG5cblx0XHRzdHlsZS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcblx0fVxufVxuXG5mdW5jdGlvbiB1cGRhdGVMaW5rIChsaW5rLCBvcHRpb25zLCBvYmopIHtcblx0dmFyIGNzcyA9IG9iai5jc3M7XG5cdHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuXG5cdC8qXG5cdFx0SWYgY29udmVydFRvQWJzb2x1dGVVcmxzIGlzbid0IGRlZmluZWQsIGJ1dCBzb3VyY2VtYXBzIGFyZSBlbmFibGVkXG5cdFx0YW5kIHRoZXJlIGlzIG5vIHB1YmxpY1BhdGggZGVmaW5lZCB0aGVuIGxldHMgdHVybiBjb252ZXJ0VG9BYnNvbHV0ZVVybHNcblx0XHRvbiBieSBkZWZhdWx0LiAgT3RoZXJ3aXNlIGRlZmF1bHQgdG8gdGhlIGNvbnZlcnRUb0Fic29sdXRlVXJscyBvcHRpb25cblx0XHRkaXJlY3RseVxuXHQqL1xuXHR2YXIgYXV0b0ZpeFVybHMgPSBvcHRpb25zLmNvbnZlcnRUb0Fic29sdXRlVXJscyA9PT0gdW5kZWZpbmVkICYmIHNvdXJjZU1hcDtcblxuXHRpZiAob3B0aW9ucy5jb252ZXJ0VG9BYnNvbHV0ZVVybHMgfHwgYXV0b0ZpeFVybHMpIHtcblx0XHRjc3MgPSBmaXhVcmxzKGNzcyk7XG5cdH1cblxuXHRpZiAoc291cmNlTWFwKSB7XG5cdFx0Ly8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjY2MDM4NzVcblx0XHRjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiICsgYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSArIFwiICovXCI7XG5cdH1cblxuXHR2YXIgYmxvYiA9IG5ldyBCbG9iKFtjc3NdLCB7IHR5cGU6IFwidGV4dC9jc3NcIiB9KTtcblxuXHR2YXIgb2xkU3JjID0gbGluay5ocmVmO1xuXG5cdGxpbmsuaHJlZiA9IFVSTC5jcmVhdGVPYmplY3RVUkwoYmxvYik7XG5cblx0aWYob2xkU3JjKSBVUkwucmV2b2tlT2JqZWN0VVJMKG9sZFNyYyk7XG59XG4iLCIvKlxuXHRNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuXHRBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xuLy8gY3NzIGJhc2UgY29kZSwgaW5qZWN0ZWQgYnkgdGhlIGNzcy1sb2FkZXJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24odXNlU291cmNlTWFwKSB7XG5cdHZhciBsaXN0ID0gW107XG5cblx0Ly8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuXHRsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG5cdFx0cmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG5cdFx0XHR2YXIgY29udGVudCA9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSwgdXNlU291cmNlTWFwKTtcblx0XHRcdGlmKGl0ZW1bMl0pIHtcblx0XHRcdFx0cmV0dXJuIFwiQG1lZGlhIFwiICsgaXRlbVsyXSArIFwie1wiICsgY29udGVudCArIFwifVwiO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmV0dXJuIGNvbnRlbnQ7XG5cdFx0XHR9XG5cdFx0fSkuam9pbihcIlwiKTtcblx0fTtcblxuXHQvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuXHRsaXN0LmkgPSBmdW5jdGlvbihtb2R1bGVzLCBtZWRpYVF1ZXJ5KSB7XG5cdFx0aWYodHlwZW9mIG1vZHVsZXMgPT09IFwic3RyaW5nXCIpXG5cdFx0XHRtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCBcIlwiXV07XG5cdFx0dmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcblx0XHRmb3IodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGlkID0gdGhpc1tpXVswXTtcblx0XHRcdGlmKHR5cGVvZiBpZCA9PT0gXCJudW1iZXJcIilcblx0XHRcdFx0YWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuXHRcdH1cblx0XHRmb3IoaSA9IDA7IGkgPCBtb2R1bGVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgaXRlbSA9IG1vZHVsZXNbaV07XG5cdFx0XHQvLyBza2lwIGFscmVhZHkgaW1wb3J0ZWQgbW9kdWxlXG5cdFx0XHQvLyB0aGlzIGltcGxlbWVudGF0aW9uIGlzIG5vdCAxMDAlIHBlcmZlY3QgZm9yIHdlaXJkIG1lZGlhIHF1ZXJ5IGNvbWJpbmF0aW9uc1xuXHRcdFx0Ly8gIHdoZW4gYSBtb2R1bGUgaXMgaW1wb3J0ZWQgbXVsdGlwbGUgdGltZXMgd2l0aCBkaWZmZXJlbnQgbWVkaWEgcXVlcmllcy5cblx0XHRcdC8vICBJIGhvcGUgdGhpcyB3aWxsIG5ldmVyIG9jY3VyIChIZXkgdGhpcyB3YXkgd2UgaGF2ZSBzbWFsbGVyIGJ1bmRsZXMpXG5cdFx0XHRpZih0eXBlb2YgaXRlbVswXSAhPT0gXCJudW1iZXJcIiB8fCAhYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuXHRcdFx0XHRpZihtZWRpYVF1ZXJ5ICYmICFpdGVtWzJdKSB7XG5cdFx0XHRcdFx0aXRlbVsyXSA9IG1lZGlhUXVlcnk7XG5cdFx0XHRcdH0gZWxzZSBpZihtZWRpYVF1ZXJ5KSB7XG5cdFx0XHRcdFx0aXRlbVsyXSA9IFwiKFwiICsgaXRlbVsyXSArIFwiKSBhbmQgKFwiICsgbWVkaWFRdWVyeSArIFwiKVwiO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGxpc3QucHVzaChpdGVtKTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cdHJldHVybiBsaXN0O1xufTtcblxuZnVuY3Rpb24gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtLCB1c2VTb3VyY2VNYXApIHtcblx0dmFyIGNvbnRlbnQgPSBpdGVtWzFdIHx8ICcnO1xuXHR2YXIgY3NzTWFwcGluZyA9IGl0ZW1bM107XG5cdGlmICghY3NzTWFwcGluZykge1xuXHRcdHJldHVybiBjb250ZW50O1xuXHR9XG5cblx0aWYgKHVzZVNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdHZhciBzb3VyY2VNYXBwaW5nID0gdG9Db21tZW50KGNzc01hcHBpbmcpO1xuXHRcdHZhciBzb3VyY2VVUkxzID0gY3NzTWFwcGluZy5zb3VyY2VzLm1hcChmdW5jdGlvbiAoc291cmNlKSB7XG5cdFx0XHRyZXR1cm4gJy8qIyBzb3VyY2VVUkw9JyArIGNzc01hcHBpbmcuc291cmNlUm9vdCArIHNvdXJjZSArICcgKi8nXG5cdFx0fSk7XG5cblx0XHRyZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChzb3VyY2VVUkxzKS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKCdcXG4nKTtcblx0fVxuXG5cdHJldHVybiBbY29udGVudF0uam9pbignXFxuJyk7XG59XG5cbi8vIEFkYXB0ZWQgZnJvbSBjb252ZXJ0LXNvdXJjZS1tYXAgKE1JVClcbmZ1bmN0aW9uIHRvQ29tbWVudChzb3VyY2VNYXApIHtcblx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG5cdHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpO1xuXHR2YXIgZGF0YSA9ICdzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCwnICsgYmFzZTY0O1xuXG5cdHJldHVybiAnLyojICcgKyBkYXRhICsgJyAqLyc7XG59XG4iLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzXCIpKHRydWUpO1xuLy8gaW1wb3J0c1xuXG5cbi8vIG1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiXCIsIFwiXCIsIHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJcIixcImZpbGVcIjpcIkFwcC5jc3NcIixcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuXG4vLyBleHBvcnRzXG4iLCJcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanM/P3JlZi0tNS0xIS4vQXBwLmNzc1wiKTtcblxuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5cbnZhciB0cmFuc2Zvcm07XG52YXIgaW5zZXJ0SW50bztcblxuXG5cbnZhciBvcHRpb25zID0ge1wiaG1yXCI6dHJ1ZX1cblxub3B0aW9ucy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1cbm9wdGlvbnMuaW5zZXJ0SW50byA9IHVuZGVmaW5lZDtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscztcblxuaWYobW9kdWxlLmhvdCkge1xuXHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanM/P3JlZi0tNS0xIS4vQXBwLmNzc1wiLCBmdW5jdGlvbigpIHtcblx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzPz9yZWYtLTUtMSEuL0FwcC5jc3NcIik7XG5cblx0XHRpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcblxuXHRcdHZhciBsb2NhbHMgPSAoZnVuY3Rpb24oYSwgYikge1xuXHRcdFx0dmFyIGtleSwgaWR4ID0gMDtcblxuXHRcdFx0Zm9yKGtleSBpbiBhKSB7XG5cdFx0XHRcdGlmKCFiIHx8IGFba2V5XSAhPT0gYltrZXldKSByZXR1cm4gZmFsc2U7XG5cdFx0XHRcdGlkeCsrO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3Ioa2V5IGluIGIpIGlkeC0tO1xuXG5cdFx0XHRyZXR1cm4gaWR4ID09PSAwO1xuXHRcdH0oY29udGVudC5sb2NhbHMsIG5ld0NvbnRlbnQubG9jYWxzKSk7XG5cblx0XHRpZighbG9jYWxzKSB0aHJvdyBuZXcgRXJyb3IoJ0Fib3J0aW5nIENTUyBITVIgZHVlIHRvIGNoYW5nZWQgY3NzLW1vZHVsZXMgbG9jYWxzLicpO1xuXG5cdFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xuXHR9KTtcblxuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn0iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQHR5cGVjaGVja3NcbiAqL1xuXG4vKipcbiAqIEBwYXJhbSB7Kn0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY2hlY2suXG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIG9yIG5vdCB0aGUgb2JqZWN0IGlzIGEgRE9NIG5vZGUuXG4gKi9cbmZ1bmN0aW9uIGlzTm9kZShvYmplY3QpIHtcbiAgdmFyIGRvYyA9IG9iamVjdCA/IG9iamVjdC5vd25lckRvY3VtZW50IHx8IG9iamVjdCA6IGRvY3VtZW50O1xuICB2YXIgZGVmYXVsdFZpZXcgPSBkb2MuZGVmYXVsdFZpZXcgfHwgd2luZG93O1xuICByZXR1cm4gISEob2JqZWN0ICYmICh0eXBlb2YgZGVmYXVsdFZpZXcuTm9kZSA9PT0gJ2Z1bmN0aW9uJyA/IG9iamVjdCBpbnN0YW5jZW9mIGRlZmF1bHRWaWV3Lk5vZGUgOiB0eXBlb2Ygb2JqZWN0ID09PSAnb2JqZWN0JyAmJiB0eXBlb2Ygb2JqZWN0Lm5vZGVUeXBlID09PSAnbnVtYmVyJyAmJiB0eXBlb2Ygb2JqZWN0Lm5vZGVOYW1lID09PSAnc3RyaW5nJykpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzTm9kZTsiLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQHR5cGVjaGVja3NcbiAqL1xuXG52YXIgaXNOb2RlID0gcmVxdWlyZSgnLi9pc05vZGUnKTtcblxuLyoqXG4gKiBAcGFyYW0geyp9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNoZWNrLlxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciBvciBub3QgdGhlIG9iamVjdCBpcyBhIERPTSB0ZXh0IG5vZGUuXG4gKi9cbmZ1bmN0aW9uIGlzVGV4dE5vZGUob2JqZWN0KSB7XG4gIHJldHVybiBpc05vZGUob2JqZWN0KSAmJiBvYmplY3Qubm9kZVR5cGUgPT0gMztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc1RleHROb2RlOyIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqL1xuXG52YXIgaXNUZXh0Tm9kZSA9IHJlcXVpcmUoJy4vaXNUZXh0Tm9kZScpO1xuXG4vKmVzbGludC1kaXNhYmxlIG5vLWJpdHdpc2UgKi9cblxuLyoqXG4gKiBDaGVja3MgaWYgYSBnaXZlbiBET00gbm9kZSBjb250YWlucyBvciBpcyBhbm90aGVyIERPTSBub2RlLlxuICovXG5mdW5jdGlvbiBjb250YWluc05vZGUob3V0ZXJOb2RlLCBpbm5lck5vZGUpIHtcbiAgaWYgKCFvdXRlck5vZGUgfHwgIWlubmVyTm9kZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfSBlbHNlIGlmIChvdXRlck5vZGUgPT09IGlubmVyTm9kZSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9IGVsc2UgaWYgKGlzVGV4dE5vZGUob3V0ZXJOb2RlKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfSBlbHNlIGlmIChpc1RleHROb2RlKGlubmVyTm9kZSkpIHtcbiAgICByZXR1cm4gY29udGFpbnNOb2RlKG91dGVyTm9kZSwgaW5uZXJOb2RlLnBhcmVudE5vZGUpO1xuICB9IGVsc2UgaWYgKCdjb250YWlucycgaW4gb3V0ZXJOb2RlKSB7XG4gICAgcmV0dXJuIG91dGVyTm9kZS5jb250YWlucyhpbm5lck5vZGUpO1xuICB9IGVsc2UgaWYgKG91dGVyTm9kZS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbikge1xuICAgIHJldHVybiAhIShvdXRlck5vZGUuY29tcGFyZURvY3VtZW50UG9zaXRpb24oaW5uZXJOb2RlKSAmIDE2KTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjb250YWluc05vZGU7IiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEB0eXBlY2hlY2tzXG4gKi9cblxuLyogZXNsaW50LWRpc2FibGUgZmItd3d3L3R5cGVvZi11bmRlZmluZWQgKi9cblxuLyoqXG4gKiBTYW1lIGFzIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgYnV0IHdyYXBzIGluIGEgdHJ5LWNhdGNoIGJsb2NrLiBJbiBJRSBpdCBpc1xuICogbm90IHNhZmUgdG8gY2FsbCBkb2N1bWVudC5hY3RpdmVFbGVtZW50IGlmIHRoZXJlIGlzIG5vdGhpbmcgZm9jdXNlZC5cbiAqXG4gKiBUaGUgYWN0aXZlRWxlbWVudCB3aWxsIGJlIG51bGwgb25seSBpZiB0aGUgZG9jdW1lbnQgb3IgZG9jdW1lbnQgYm9keSBpcyBub3RcbiAqIHlldCBkZWZpbmVkLlxuICpcbiAqIEBwYXJhbSB7P0RPTURvY3VtZW50fSBkb2MgRGVmYXVsdHMgdG8gY3VycmVudCBkb2N1bWVudC5cbiAqIEByZXR1cm4gez9ET01FbGVtZW50fVxuICovXG5mdW5jdGlvbiBnZXRBY3RpdmVFbGVtZW50KGRvYykgLyo/RE9NRWxlbWVudCove1xuICBkb2MgPSBkb2MgfHwgKHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgPyBkb2N1bWVudCA6IHVuZGVmaW5lZCk7XG4gIGlmICh0eXBlb2YgZG9jID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHRyeSB7XG4gICAgcmV0dXJuIGRvYy5hY3RpdmVFbGVtZW50IHx8IGRvYy5ib2R5O1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGRvYy5ib2R5O1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0QWN0aXZlRWxlbWVudDsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBjYW5Vc2VET00gPSAhISh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuZG9jdW1lbnQgJiYgd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO1xuXG4vKipcbiAqIFNpbXBsZSwgbGlnaHR3ZWlnaHQgbW9kdWxlIGFzc2lzdGluZyB3aXRoIHRoZSBkZXRlY3Rpb24gYW5kIGNvbnRleHQgb2ZcbiAqIFdvcmtlci4gSGVscHMgYXZvaWQgY2lyY3VsYXIgZGVwZW5kZW5jaWVzIGFuZCBhbGxvd3MgY29kZSB0byByZWFzb24gYWJvdXRcbiAqIHdoZXRoZXIgb3Igbm90IHRoZXkgYXJlIGluIGEgV29ya2VyLCBldmVuIGlmIHRoZXkgbmV2ZXIgaW5jbHVkZSB0aGUgbWFpblxuICogYFJlYWN0V29ya2VyYCBkZXBlbmRlbmN5LlxuICovXG52YXIgRXhlY3V0aW9uRW52aXJvbm1lbnQgPSB7XG5cbiAgY2FuVXNlRE9NOiBjYW5Vc2VET00sXG5cbiAgY2FuVXNlV29ya2VyczogdHlwZW9mIFdvcmtlciAhPT0gJ3VuZGVmaW5lZCcsXG5cbiAgY2FuVXNlRXZlbnRMaXN0ZW5lcnM6IGNhblVzZURPTSAmJiAhISh3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciB8fCB3aW5kb3cuYXR0YWNoRXZlbnQpLFxuXG4gIGNhblVzZVZpZXdwb3J0OiBjYW5Vc2VET00gJiYgISF3aW5kb3cuc2NyZWVuLFxuXG4gIGlzSW5Xb3JrZXI6ICFjYW5Vc2VET00gLy8gRm9yIG5vdywgdGhpcyBpcyB0cnVlIC0gbWlnaHQgY2hhbmdlIGluIHRoZSBmdXR1cmUuXG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRXhlY3V0aW9uRW52aXJvbm1lbnQ7IiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNi40LjBcbiAqIHJlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbi8qXG4gTW9kZXJuaXpyIDMuMC4wcHJlIChDdXN0b20gQnVpbGQpIHwgTUlUXG4qL1xuJ3VzZSBzdHJpY3QnO3ZhciBhYT1yZXF1aXJlKFwiZmJqcy9saWIvaW52YXJpYW50XCIpLGNhPXJlcXVpcmUoXCJyZWFjdFwiKSxtPXJlcXVpcmUoXCJmYmpzL2xpYi9FeGVjdXRpb25FbnZpcm9ubWVudFwiKSxwPXJlcXVpcmUoXCJvYmplY3QtYXNzaWduXCIpLHY9cmVxdWlyZShcImZianMvbGliL2VtcHR5RnVuY3Rpb25cIiksZGE9cmVxdWlyZShcImZianMvbGliL2dldEFjdGl2ZUVsZW1lbnRcIiksZWE9cmVxdWlyZShcImZianMvbGliL3NoYWxsb3dFcXVhbFwiKSxmYT1yZXF1aXJlKFwiZmJqcy9saWIvY29udGFpbnNOb2RlXCIpLGhhPXJlcXVpcmUoXCJmYmpzL2xpYi9lbXB0eU9iamVjdFwiKTtcbmZ1bmN0aW9uIEEoYSl7Zm9yKHZhciBiPWFyZ3VtZW50cy5sZW5ndGgtMSxjPVwiaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL2Vycm9yLWRlY29kZXIuaHRtbD9pbnZhcmlhbnQ9XCIrYSxkPTA7ZDxiO2QrKyljKz1cIiZhcmdzW109XCIrZW5jb2RlVVJJQ29tcG9uZW50KGFyZ3VtZW50c1tkKzFdKTthYSghMSxcIk1pbmlmaWVkIFJlYWN0IGVycm9yICNcIithK1wiOyB2aXNpdCAlcyBmb3IgdGhlIGZ1bGwgbWVzc2FnZSBvciB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIGZ1bGwgZXJyb3JzIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuIFwiLGMpfWNhP3ZvaWQgMDpBKFwiMjI3XCIpO1xuZnVuY3Rpb24gaWEoYSxiLGMsZCxlLGYsZyxoLGspe3RoaXMuX2hhc0NhdWdodEVycm9yPSExO3RoaXMuX2NhdWdodEVycm9yPW51bGw7dmFyIG49QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDMpO3RyeXtiLmFwcGx5KGMsbil9Y2F0Y2gocil7dGhpcy5fY2F1Z2h0RXJyb3I9cix0aGlzLl9oYXNDYXVnaHRFcnJvcj0hMH19XG52YXIgQj17X2NhdWdodEVycm9yOm51bGwsX2hhc0NhdWdodEVycm9yOiExLF9yZXRocm93RXJyb3I6bnVsbCxfaGFzUmV0aHJvd0Vycm9yOiExLGludm9rZUd1YXJkZWRDYWxsYmFjazpmdW5jdGlvbihhLGIsYyxkLGUsZixnLGgsayl7aWEuYXBwbHkoQixhcmd1bWVudHMpfSxpbnZva2VHdWFyZGVkQ2FsbGJhY2tBbmRDYXRjaEZpcnN0RXJyb3I6ZnVuY3Rpb24oYSxiLGMsZCxlLGYsZyxoLGspe0IuaW52b2tlR3VhcmRlZENhbGxiYWNrLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtpZihCLmhhc0NhdWdodEVycm9yKCkpe3ZhciBuPUIuY2xlYXJDYXVnaHRFcnJvcigpO0IuX2hhc1JldGhyb3dFcnJvcnx8KEIuX2hhc1JldGhyb3dFcnJvcj0hMCxCLl9yZXRocm93RXJyb3I9bil9fSxyZXRocm93Q2F1Z2h0RXJyb3I6ZnVuY3Rpb24oKXtyZXR1cm4ga2EuYXBwbHkoQixhcmd1bWVudHMpfSxoYXNDYXVnaHRFcnJvcjpmdW5jdGlvbigpe3JldHVybiBCLl9oYXNDYXVnaHRFcnJvcn0sY2xlYXJDYXVnaHRFcnJvcjpmdW5jdGlvbigpe2lmKEIuX2hhc0NhdWdodEVycm9yKXt2YXIgYT1cbkIuX2NhdWdodEVycm9yO0IuX2NhdWdodEVycm9yPW51bGw7Qi5faGFzQ2F1Z2h0RXJyb3I9ITE7cmV0dXJuIGF9QShcIjE5OFwiKX19O2Z1bmN0aW9uIGthKCl7aWYoQi5faGFzUmV0aHJvd0Vycm9yKXt2YXIgYT1CLl9yZXRocm93RXJyb3I7Qi5fcmV0aHJvd0Vycm9yPW51bGw7Qi5faGFzUmV0aHJvd0Vycm9yPSExO3Rocm93IGE7fX12YXIgbGE9bnVsbCxtYT17fTtcbmZ1bmN0aW9uIG5hKCl7aWYobGEpZm9yKHZhciBhIGluIG1hKXt2YXIgYj1tYVthXSxjPWxhLmluZGV4T2YoYSk7LTE8Yz92b2lkIDA6QShcIjk2XCIsYSk7aWYoIW9hW2NdKXtiLmV4dHJhY3RFdmVudHM/dm9pZCAwOkEoXCI5N1wiLGEpO29hW2NdPWI7Yz1iLmV2ZW50VHlwZXM7Zm9yKHZhciBkIGluIGMpe3ZhciBlPXZvaWQgMDt2YXIgZj1jW2RdLGc9YixoPWQ7cGEuaGFzT3duUHJvcGVydHkoaCk/QShcIjk5XCIsaCk6dm9pZCAwO3BhW2hdPWY7dmFyIGs9Zi5waGFzZWRSZWdpc3RyYXRpb25OYW1lcztpZihrKXtmb3IoZSBpbiBrKWsuaGFzT3duUHJvcGVydHkoZSkmJnFhKGtbZV0sZyxoKTtlPSEwfWVsc2UgZi5yZWdpc3RyYXRpb25OYW1lPyhxYShmLnJlZ2lzdHJhdGlvbk5hbWUsZyxoKSxlPSEwKTplPSExO2U/dm9pZCAwOkEoXCI5OFwiLGQsYSl9fX19XG5mdW5jdGlvbiBxYShhLGIsYyl7cmFbYV0/QShcIjEwMFwiLGEpOnZvaWQgMDtyYVthXT1iO3NhW2FdPWIuZXZlbnRUeXBlc1tjXS5kZXBlbmRlbmNpZXN9dmFyIG9hPVtdLHBhPXt9LHJhPXt9LHNhPXt9O2Z1bmN0aW9uIHRhKGEpe2xhP0EoXCIxMDFcIik6dm9pZCAwO2xhPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGEpO25hKCl9ZnVuY3Rpb24gdWEoYSl7dmFyIGI9ITEsYztmb3IoYyBpbiBhKWlmKGEuaGFzT3duUHJvcGVydHkoYykpe3ZhciBkPWFbY107bWEuaGFzT3duUHJvcGVydHkoYykmJm1hW2NdPT09ZHx8KG1hW2NdP0EoXCIxMDJcIixjKTp2b2lkIDAsbWFbY109ZCxiPSEwKX1iJiZuYSgpfVxudmFyIHZhPXtwbHVnaW5zOm9hLGV2ZW50TmFtZURpc3BhdGNoQ29uZmlnczpwYSxyZWdpc3RyYXRpb25OYW1lTW9kdWxlczpyYSxyZWdpc3RyYXRpb25OYW1lRGVwZW5kZW5jaWVzOnNhLHBvc3NpYmxlUmVnaXN0cmF0aW9uTmFtZXM6bnVsbCxpbmplY3RFdmVudFBsdWdpbk9yZGVyOnRhLGluamVjdEV2ZW50UGx1Z2luc0J5TmFtZTp1YX0sd2E9bnVsbCx4YT1udWxsLHlhPW51bGw7ZnVuY3Rpb24gemEoYSxiLGMsZCl7Yj1hLnR5cGV8fFwidW5rbm93bi1ldmVudFwiO2EuY3VycmVudFRhcmdldD15YShkKTtCLmludm9rZUd1YXJkZWRDYWxsYmFja0FuZENhdGNoRmlyc3RFcnJvcihiLGMsdm9pZCAwLGEpO2EuY3VycmVudFRhcmdldD1udWxsfVxuZnVuY3Rpb24gQWEoYSxiKXtudWxsPT1iP0EoXCIzMFwiKTp2b2lkIDA7aWYobnVsbD09YSlyZXR1cm4gYjtpZihBcnJheS5pc0FycmF5KGEpKXtpZihBcnJheS5pc0FycmF5KGIpKXJldHVybiBhLnB1c2guYXBwbHkoYSxiKSxhO2EucHVzaChiKTtyZXR1cm4gYX1yZXR1cm4gQXJyYXkuaXNBcnJheShiKT9bYV0uY29uY2F0KGIpOlthLGJdfWZ1bmN0aW9uIEJhKGEsYixjKXtBcnJheS5pc0FycmF5KGEpP2EuZm9yRWFjaChiLGMpOmEmJmIuY2FsbChjLGEpfXZhciBDYT1udWxsO1xuZnVuY3Rpb24gRGEoYSxiKXtpZihhKXt2YXIgYz1hLl9kaXNwYXRjaExpc3RlbmVycyxkPWEuX2Rpc3BhdGNoSW5zdGFuY2VzO2lmKEFycmF5LmlzQXJyYXkoYykpZm9yKHZhciBlPTA7ZTxjLmxlbmd0aCYmIWEuaXNQcm9wYWdhdGlvblN0b3BwZWQoKTtlKyspemEoYSxiLGNbZV0sZFtlXSk7ZWxzZSBjJiZ6YShhLGIsYyxkKTthLl9kaXNwYXRjaExpc3RlbmVycz1udWxsO2EuX2Rpc3BhdGNoSW5zdGFuY2VzPW51bGw7YS5pc1BlcnNpc3RlbnQoKXx8YS5jb25zdHJ1Y3Rvci5yZWxlYXNlKGEpfX1mdW5jdGlvbiBFYShhKXtyZXR1cm4gRGEoYSwhMCl9ZnVuY3Rpb24gRmEoYSl7cmV0dXJuIERhKGEsITEpfXZhciBHYT17aW5qZWN0RXZlbnRQbHVnaW5PcmRlcjp0YSxpbmplY3RFdmVudFBsdWdpbnNCeU5hbWU6dWF9O1xuZnVuY3Rpb24gSGEoYSxiKXt2YXIgYz1hLnN0YXRlTm9kZTtpZighYylyZXR1cm4gbnVsbDt2YXIgZD13YShjKTtpZighZClyZXR1cm4gbnVsbDtjPWRbYl07YTpzd2l0Y2goYil7Y2FzZSBcIm9uQ2xpY2tcIjpjYXNlIFwib25DbGlja0NhcHR1cmVcIjpjYXNlIFwib25Eb3VibGVDbGlja1wiOmNhc2UgXCJvbkRvdWJsZUNsaWNrQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlRG93blwiOmNhc2UgXCJvbk1vdXNlRG93bkNhcHR1cmVcIjpjYXNlIFwib25Nb3VzZU1vdmVcIjpjYXNlIFwib25Nb3VzZU1vdmVDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VVcFwiOmNhc2UgXCJvbk1vdXNlVXBDYXB0dXJlXCI6KGQ9IWQuZGlzYWJsZWQpfHwoYT1hLnR5cGUsZD0hKFwiYnV0dG9uXCI9PT1hfHxcImlucHV0XCI9PT1hfHxcInNlbGVjdFwiPT09YXx8XCJ0ZXh0YXJlYVwiPT09YSkpO2E9IWQ7YnJlYWsgYTtkZWZhdWx0OmE9ITF9aWYoYSlyZXR1cm4gbnVsbDtjJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYz9BKFwiMjMxXCIsYix0eXBlb2YgYyk6dm9pZCAwO1xucmV0dXJuIGN9ZnVuY3Rpb24gSWEoYSxiKXtudWxsIT09YSYmKENhPUFhKENhLGEpKTthPUNhO0NhPW51bGw7YSYmKGI/QmEoYSxFYSk6QmEoYSxGYSksQ2E/QShcIjk1XCIpOnZvaWQgMCxCLnJldGhyb3dDYXVnaHRFcnJvcigpKX1mdW5jdGlvbiBKYShhLGIsYyxkKXtmb3IodmFyIGU9bnVsbCxmPTA7ZjxvYS5sZW5ndGg7ZisrKXt2YXIgZz1vYVtmXTtnJiYoZz1nLmV4dHJhY3RFdmVudHMoYSxiLGMsZCkpJiYoZT1BYShlLGcpKX1JYShlLCExKX12YXIgS2E9e2luamVjdGlvbjpHYSxnZXRMaXN0ZW5lcjpIYSxydW5FdmVudHNJbkJhdGNoOklhLHJ1bkV4dHJhY3RlZEV2ZW50c0luQmF0Y2g6SmF9LExhPU1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnNsaWNlKDIpLEM9XCJfX3JlYWN0SW50ZXJuYWxJbnN0YW5jZSRcIitMYSxNYT1cIl9fcmVhY3RFdmVudEhhbmRsZXJzJFwiK0xhO1xuZnVuY3Rpb24gTmEoYSl7aWYoYVtDXSlyZXR1cm4gYVtDXTtmb3IoOyFhW0NdOylpZihhLnBhcmVudE5vZGUpYT1hLnBhcmVudE5vZGU7ZWxzZSByZXR1cm4gbnVsbDthPWFbQ107cmV0dXJuIDU9PT1hLnRhZ3x8Nj09PWEudGFnP2E6bnVsbH1mdW5jdGlvbiBPYShhKXtpZig1PT09YS50YWd8fDY9PT1hLnRhZylyZXR1cm4gYS5zdGF0ZU5vZGU7QShcIjMzXCIpfWZ1bmN0aW9uIFBhKGEpe3JldHVybiBhW01hXXx8bnVsbH12YXIgUWE9e3ByZWNhY2hlRmliZXJOb2RlOmZ1bmN0aW9uKGEsYil7YltDXT1hfSxnZXRDbG9zZXN0SW5zdGFuY2VGcm9tTm9kZTpOYSxnZXRJbnN0YW5jZUZyb21Ob2RlOmZ1bmN0aW9uKGEpe2E9YVtDXTtyZXR1cm4hYXx8NSE9PWEudGFnJiY2IT09YS50YWc/bnVsbDphfSxnZXROb2RlRnJvbUluc3RhbmNlOk9hLGdldEZpYmVyQ3VycmVudFByb3BzRnJvbU5vZGU6UGEsdXBkYXRlRmliZXJQcm9wczpmdW5jdGlvbihhLGIpe2FbTWFdPWJ9fTtcbmZ1bmN0aW9uIEYoYSl7ZG8gYT1hLnJldHVybjt3aGlsZShhJiY1IT09YS50YWcpO3JldHVybiBhP2E6bnVsbH1mdW5jdGlvbiBSYShhLGIsYyl7Zm9yKHZhciBkPVtdO2E7KWQucHVzaChhKSxhPUYoYSk7Zm9yKGE9ZC5sZW5ndGg7MDxhLS07KWIoZFthXSxcImNhcHR1cmVkXCIsYyk7Zm9yKGE9MDthPGQubGVuZ3RoO2ErKyliKGRbYV0sXCJidWJibGVkXCIsYyl9ZnVuY3Rpb24gU2EoYSxiLGMpe2lmKGI9SGEoYSxjLmRpc3BhdGNoQ29uZmlnLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzW2JdKSljLl9kaXNwYXRjaExpc3RlbmVycz1BYShjLl9kaXNwYXRjaExpc3RlbmVycyxiKSxjLl9kaXNwYXRjaEluc3RhbmNlcz1BYShjLl9kaXNwYXRjaEluc3RhbmNlcyxhKX1mdW5jdGlvbiBUYShhKXthJiZhLmRpc3BhdGNoQ29uZmlnLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzJiZSYShhLl90YXJnZXRJbnN0LFNhLGEpfVxuZnVuY3Rpb24gVWEoYSl7aWYoYSYmYS5kaXNwYXRjaENvbmZpZy5waGFzZWRSZWdpc3RyYXRpb25OYW1lcyl7dmFyIGI9YS5fdGFyZ2V0SW5zdDtiPWI/RihiKTpudWxsO1JhKGIsU2EsYSl9fWZ1bmN0aW9uIFZhKGEsYixjKXthJiZjJiZjLmRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWUmJihiPUhhKGEsYy5kaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lKSkmJihjLl9kaXNwYXRjaExpc3RlbmVycz1BYShjLl9kaXNwYXRjaExpc3RlbmVycyxiKSxjLl9kaXNwYXRjaEluc3RhbmNlcz1BYShjLl9kaXNwYXRjaEluc3RhbmNlcyxhKSl9ZnVuY3Rpb24gWGEoYSl7YSYmYS5kaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lJiZWYShhLl90YXJnZXRJbnN0LG51bGwsYSl9ZnVuY3Rpb24gWWEoYSl7QmEoYSxUYSl9XG5mdW5jdGlvbiBaYShhLGIsYyxkKXtpZihjJiZkKWE6e3ZhciBlPWM7Zm9yKHZhciBmPWQsZz0wLGg9ZTtoO2g9RihoKSlnKys7aD0wO2Zvcih2YXIgaz1mO2s7az1GKGspKWgrKztmb3IoOzA8Zy1oOyllPUYoZSksZy0tO2Zvcig7MDxoLWc7KWY9RihmKSxoLS07Zm9yKDtnLS07KXtpZihlPT09Znx8ZT09PWYuYWx0ZXJuYXRlKWJyZWFrIGE7ZT1GKGUpO2Y9RihmKX1lPW51bGx9ZWxzZSBlPW51bGw7Zj1lO2ZvcihlPVtdO2MmJmMhPT1mOyl7Zz1jLmFsdGVybmF0ZTtpZihudWxsIT09ZyYmZz09PWYpYnJlYWs7ZS5wdXNoKGMpO2M9RihjKX1mb3IoYz1bXTtkJiZkIT09Zjspe2c9ZC5hbHRlcm5hdGU7aWYobnVsbCE9PWcmJmc9PT1mKWJyZWFrO2MucHVzaChkKTtkPUYoZCl9Zm9yKGQ9MDtkPGUubGVuZ3RoO2QrKylWYShlW2RdLFwiYnViYmxlZFwiLGEpO2ZvcihhPWMubGVuZ3RoOzA8YS0tOylWYShjW2FdLFwiY2FwdHVyZWRcIixiKX1cbnZhciAkYT17YWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlczpZYSxhY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzU2tpcFRhcmdldDpmdW5jdGlvbihhKXtCYShhLFVhKX0sYWNjdW11bGF0ZUVudGVyTGVhdmVEaXNwYXRjaGVzOlphLGFjY3VtdWxhdGVEaXJlY3REaXNwYXRjaGVzOmZ1bmN0aW9uKGEpe0JhKGEsWGEpfX07ZnVuY3Rpb24gYWIoYSxiKXt2YXIgYz17fTtjW2EudG9Mb3dlckNhc2UoKV09Yi50b0xvd2VyQ2FzZSgpO2NbXCJXZWJraXRcIithXT1cIndlYmtpdFwiK2I7Y1tcIk1velwiK2FdPVwibW96XCIrYjtjW1wibXNcIithXT1cIk1TXCIrYjtjW1wiT1wiK2FdPVwib1wiK2IudG9Mb3dlckNhc2UoKTtyZXR1cm4gY31cbnZhciBiYj17YW5pbWF0aW9uZW5kOmFiKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25FbmRcIiksYW5pbWF0aW9uaXRlcmF0aW9uOmFiKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25JdGVyYXRpb25cIiksYW5pbWF0aW9uc3RhcnQ6YWIoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvblN0YXJ0XCIpLHRyYW5zaXRpb25lbmQ6YWIoXCJUcmFuc2l0aW9uXCIsXCJUcmFuc2l0aW9uRW5kXCIpfSxjYj17fSxkYj17fTttLmNhblVzZURPTSYmKGRiPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikuc3R5bGUsXCJBbmltYXRpb25FdmVudFwiaW4gd2luZG93fHwoZGVsZXRlIGJiLmFuaW1hdGlvbmVuZC5hbmltYXRpb24sZGVsZXRlIGJiLmFuaW1hdGlvbml0ZXJhdGlvbi5hbmltYXRpb24sZGVsZXRlIGJiLmFuaW1hdGlvbnN0YXJ0LmFuaW1hdGlvbiksXCJUcmFuc2l0aW9uRXZlbnRcImluIHdpbmRvd3x8ZGVsZXRlIGJiLnRyYW5zaXRpb25lbmQudHJhbnNpdGlvbik7XG5mdW5jdGlvbiBlYihhKXtpZihjYlthXSlyZXR1cm4gY2JbYV07aWYoIWJiW2FdKXJldHVybiBhO3ZhciBiPWJiW2FdLGM7Zm9yKGMgaW4gYilpZihiLmhhc093blByb3BlcnR5KGMpJiZjIGluIGRiKXJldHVybiBjYlthXT1iW2NdO3JldHVybiBhfXZhciBmYj1lYihcImFuaW1hdGlvbmVuZFwiKSxnYj1lYihcImFuaW1hdGlvbml0ZXJhdGlvblwiKSxoYj1lYihcImFuaW1hdGlvbnN0YXJ0XCIpLGliPWViKFwidHJhbnNpdGlvbmVuZFwiKSxqYj1cImFib3J0IGNhbnBsYXkgY2FucGxheXRocm91Z2ggZHVyYXRpb25jaGFuZ2UgZW1wdGllZCBlbmNyeXB0ZWQgZW5kZWQgZXJyb3IgbG9hZGVkZGF0YSBsb2FkZWRtZXRhZGF0YSBsb2Fkc3RhcnQgcGF1c2UgcGxheSBwbGF5aW5nIHByb2dyZXNzIHJhdGVjaGFuZ2Ugc2Vla2VkIHNlZWtpbmcgc3RhbGxlZCBzdXNwZW5kIHRpbWV1cGRhdGUgdm9sdW1lY2hhbmdlIHdhaXRpbmdcIi5zcGxpdChcIiBcIiksa2I9bnVsbDtcbmZ1bmN0aW9uIGxiKCl7IWtiJiZtLmNhblVzZURPTSYmKGtiPVwidGV4dENvbnRlbnRcImluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudD9cInRleHRDb250ZW50XCI6XCJpbm5lclRleHRcIik7cmV0dXJuIGtifXZhciBHPXtfcm9vdDpudWxsLF9zdGFydFRleHQ6bnVsbCxfZmFsbGJhY2tUZXh0Om51bGx9O2Z1bmN0aW9uIG1iKCl7aWYoRy5fZmFsbGJhY2tUZXh0KXJldHVybiBHLl9mYWxsYmFja1RleHQ7dmFyIGEsYj1HLl9zdGFydFRleHQsYz1iLmxlbmd0aCxkLGU9bmIoKSxmPWUubGVuZ3RoO2ZvcihhPTA7YTxjJiZiW2FdPT09ZVthXTthKyspO3ZhciBnPWMtYTtmb3IoZD0xO2Q8PWcmJmJbYy1kXT09PWVbZi1kXTtkKyspO0cuX2ZhbGxiYWNrVGV4dD1lLnNsaWNlKGEsMTxkPzEtZDp2b2lkIDApO3JldHVybiBHLl9mYWxsYmFja1RleHR9ZnVuY3Rpb24gbmIoKXtyZXR1cm5cInZhbHVlXCJpbiBHLl9yb290P0cuX3Jvb3QudmFsdWU6Ry5fcm9vdFtsYigpXX1cbnZhciBvYj1cImRpc3BhdGNoQ29uZmlnIF90YXJnZXRJbnN0IG5hdGl2ZUV2ZW50IGlzRGVmYXVsdFByZXZlbnRlZCBpc1Byb3BhZ2F0aW9uU3RvcHBlZCBfZGlzcGF0Y2hMaXN0ZW5lcnMgX2Rpc3BhdGNoSW5zdGFuY2VzXCIuc3BsaXQoXCIgXCIpLHBiPXt0eXBlOm51bGwsdGFyZ2V0Om51bGwsY3VycmVudFRhcmdldDp2LnRoYXRSZXR1cm5zTnVsbCxldmVudFBoYXNlOm51bGwsYnViYmxlczpudWxsLGNhbmNlbGFibGU6bnVsbCx0aW1lU3RhbXA6ZnVuY3Rpb24oYSl7cmV0dXJuIGEudGltZVN0YW1wfHxEYXRlLm5vdygpfSxkZWZhdWx0UHJldmVudGVkOm51bGwsaXNUcnVzdGVkOm51bGx9O1xuZnVuY3Rpb24gSChhLGIsYyxkKXt0aGlzLmRpc3BhdGNoQ29uZmlnPWE7dGhpcy5fdGFyZ2V0SW5zdD1iO3RoaXMubmF0aXZlRXZlbnQ9YzthPXRoaXMuY29uc3RydWN0b3IuSW50ZXJmYWNlO2Zvcih2YXIgZSBpbiBhKWEuaGFzT3duUHJvcGVydHkoZSkmJigoYj1hW2VdKT90aGlzW2VdPWIoYyk6XCJ0YXJnZXRcIj09PWU/dGhpcy50YXJnZXQ9ZDp0aGlzW2VdPWNbZV0pO3RoaXMuaXNEZWZhdWx0UHJldmVudGVkPShudWxsIT1jLmRlZmF1bHRQcmV2ZW50ZWQ/Yy5kZWZhdWx0UHJldmVudGVkOiExPT09Yy5yZXR1cm5WYWx1ZSk/di50aGF0UmV0dXJuc1RydWU6di50aGF0UmV0dXJuc0ZhbHNlO3RoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQ9di50aGF0UmV0dXJuc0ZhbHNlO3JldHVybiB0aGlzfVxucChILnByb3RvdHlwZSx7cHJldmVudERlZmF1bHQ6ZnVuY3Rpb24oKXt0aGlzLmRlZmF1bHRQcmV2ZW50ZWQ9ITA7dmFyIGE9dGhpcy5uYXRpdmVFdmVudDthJiYoYS5wcmV2ZW50RGVmYXVsdD9hLnByZXZlbnREZWZhdWx0KCk6XCJ1bmtub3duXCIhPT10eXBlb2YgYS5yZXR1cm5WYWx1ZSYmKGEucmV0dXJuVmFsdWU9ITEpLHRoaXMuaXNEZWZhdWx0UHJldmVudGVkPXYudGhhdFJldHVybnNUcnVlKX0sc3RvcFByb3BhZ2F0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5uYXRpdmVFdmVudDthJiYoYS5zdG9wUHJvcGFnYXRpb24/YS5zdG9wUHJvcGFnYXRpb24oKTpcInVua25vd25cIiE9PXR5cGVvZiBhLmNhbmNlbEJ1YmJsZSYmKGEuY2FuY2VsQnViYmxlPSEwKSx0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkPXYudGhhdFJldHVybnNUcnVlKX0scGVyc2lzdDpmdW5jdGlvbigpe3RoaXMuaXNQZXJzaXN0ZW50PXYudGhhdFJldHVybnNUcnVlfSxpc1BlcnNpc3RlbnQ6di50aGF0UmV0dXJuc0ZhbHNlLFxuZGVzdHJ1Y3RvcjpmdW5jdGlvbigpe3ZhciBhPXRoaXMuY29uc3RydWN0b3IuSW50ZXJmYWNlLGI7Zm9yKGIgaW4gYSl0aGlzW2JdPW51bGw7Zm9yKGE9MDthPG9iLmxlbmd0aDthKyspdGhpc1tvYlthXV09bnVsbH19KTtILkludGVyZmFjZT1wYjtILmV4dGVuZD1mdW5jdGlvbihhKXtmdW5jdGlvbiBiKCl7fWZ1bmN0aW9uIGMoKXtyZXR1cm4gZC5hcHBseSh0aGlzLGFyZ3VtZW50cyl9dmFyIGQ9dGhpcztiLnByb3RvdHlwZT1kLnByb3RvdHlwZTt2YXIgZT1uZXcgYjtwKGUsYy5wcm90b3R5cGUpO2MucHJvdG90eXBlPWU7Yy5wcm90b3R5cGUuY29uc3RydWN0b3I9YztjLkludGVyZmFjZT1wKHt9LGQuSW50ZXJmYWNlLGEpO2MuZXh0ZW5kPWQuZXh0ZW5kO3FiKGMpO3JldHVybiBjfTtxYihIKTtcbmZ1bmN0aW9uIHJiKGEsYixjLGQpe2lmKHRoaXMuZXZlbnRQb29sLmxlbmd0aCl7dmFyIGU9dGhpcy5ldmVudFBvb2wucG9wKCk7dGhpcy5jYWxsKGUsYSxiLGMsZCk7cmV0dXJuIGV9cmV0dXJuIG5ldyB0aGlzKGEsYixjLGQpfWZ1bmN0aW9uIHNiKGEpe2EgaW5zdGFuY2VvZiB0aGlzP3ZvaWQgMDpBKFwiMjIzXCIpO2EuZGVzdHJ1Y3RvcigpOzEwPnRoaXMuZXZlbnRQb29sLmxlbmd0aCYmdGhpcy5ldmVudFBvb2wucHVzaChhKX1mdW5jdGlvbiBxYihhKXthLmV2ZW50UG9vbD1bXTthLmdldFBvb2xlZD1yYjthLnJlbGVhc2U9c2J9dmFyIHRiPUguZXh0ZW5kKHtkYXRhOm51bGx9KSx1Yj1ILmV4dGVuZCh7ZGF0YTpudWxsfSksdmI9WzksMTMsMjcsMzJdLHdiPW0uY2FuVXNlRE9NJiZcIkNvbXBvc2l0aW9uRXZlbnRcImluIHdpbmRvdyx4Yj1udWxsO20uY2FuVXNlRE9NJiZcImRvY3VtZW50TW9kZVwiaW4gZG9jdW1lbnQmJih4Yj1kb2N1bWVudC5kb2N1bWVudE1vZGUpO1xudmFyIHliPW0uY2FuVXNlRE9NJiZcIlRleHRFdmVudFwiaW4gd2luZG93JiYheGIsemI9bS5jYW5Vc2VET00mJighd2J8fHhiJiY4PHhiJiYxMT49eGIpLEFiPVN0cmluZy5mcm9tQ2hhckNvZGUoMzIpLEJiPXtiZWZvcmVJbnB1dDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkJlZm9yZUlucHV0XCIsY2FwdHVyZWQ6XCJvbkJlZm9yZUlucHV0Q2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6W1wiY29tcG9zaXRpb25lbmRcIixcImtleXByZXNzXCIsXCJ0ZXh0SW5wdXRcIixcInBhc3RlXCJdfSxjb21wb3NpdGlvbkVuZDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkNvbXBvc2l0aW9uRW5kXCIsY2FwdHVyZWQ6XCJvbkNvbXBvc2l0aW9uRW5kQ2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJibHVyIGNvbXBvc2l0aW9uZW5kIGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpfSxjb21wb3NpdGlvblN0YXJ0OntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQ29tcG9zaXRpb25TdGFydFwiLFxuY2FwdHVyZWQ6XCJvbkNvbXBvc2l0aW9uU3RhcnRDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcImJsdXIgY29tcG9zaXRpb25zdGFydCBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKX0sY29tcG9zaXRpb25VcGRhdGU6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25Db21wb3NpdGlvblVwZGF0ZVwiLGNhcHR1cmVkOlwib25Db21wb3NpdGlvblVwZGF0ZUNhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwiYmx1ciBjb21wb3NpdGlvbnVwZGF0ZSBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKX19LENiPSExO1xuZnVuY3Rpb24gRGIoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImtleXVwXCI6cmV0dXJuLTEhPT12Yi5pbmRleE9mKGIua2V5Q29kZSk7Y2FzZSBcImtleWRvd25cIjpyZXR1cm4gMjI5IT09Yi5rZXlDb2RlO2Nhc2UgXCJrZXlwcmVzc1wiOmNhc2UgXCJtb3VzZWRvd25cIjpjYXNlIFwiYmx1clwiOnJldHVybiEwO2RlZmF1bHQ6cmV0dXJuITF9fWZ1bmN0aW9uIEViKGEpe2E9YS5kZXRhaWw7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZcImRhdGFcImluIGE/YS5kYXRhOm51bGx9dmFyIEZiPSExO2Z1bmN0aW9uIEdiKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOnJldHVybiBFYihiKTtjYXNlIFwia2V5cHJlc3NcIjppZigzMiE9PWIud2hpY2gpcmV0dXJuIG51bGw7Q2I9ITA7cmV0dXJuIEFiO2Nhc2UgXCJ0ZXh0SW5wdXRcIjpyZXR1cm4gYT1iLmRhdGEsYT09PUFiJiZDYj9udWxsOmE7ZGVmYXVsdDpyZXR1cm4gbnVsbH19XG5mdW5jdGlvbiBIYihhLGIpe2lmKEZiKXJldHVyblwiY29tcG9zaXRpb25lbmRcIj09PWF8fCF3YiYmRGIoYSxiKT8oYT1tYigpLEcuX3Jvb3Q9bnVsbCxHLl9zdGFydFRleHQ9bnVsbCxHLl9mYWxsYmFja1RleHQ9bnVsbCxGYj0hMSxhKTpudWxsO3N3aXRjaChhKXtjYXNlIFwicGFzdGVcIjpyZXR1cm4gbnVsbDtjYXNlIFwia2V5cHJlc3NcIjppZighKGIuY3RybEtleXx8Yi5hbHRLZXl8fGIubWV0YUtleSl8fGIuY3RybEtleSYmYi5hbHRLZXkpe2lmKGIuY2hhciYmMTxiLmNoYXIubGVuZ3RoKXJldHVybiBiLmNoYXI7aWYoYi53aGljaClyZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShiLndoaWNoKX1yZXR1cm4gbnVsbDtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpyZXR1cm4gemI/bnVsbDpiLmRhdGE7ZGVmYXVsdDpyZXR1cm4gbnVsbH19XG52YXIgSWI9e2V2ZW50VHlwZXM6QmIsZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT12b2lkIDA7dmFyIGY9dm9pZCAwO2lmKHdiKWI6e3N3aXRjaChhKXtjYXNlIFwiY29tcG9zaXRpb25zdGFydFwiOmU9QmIuY29tcG9zaXRpb25TdGFydDticmVhayBiO2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOmU9QmIuY29tcG9zaXRpb25FbmQ7YnJlYWsgYjtjYXNlIFwiY29tcG9zaXRpb251cGRhdGVcIjplPUJiLmNvbXBvc2l0aW9uVXBkYXRlO2JyZWFrIGJ9ZT12b2lkIDB9ZWxzZSBGYj9EYihhLGMpJiYoZT1CYi5jb21wb3NpdGlvbkVuZCk6XCJrZXlkb3duXCI9PT1hJiYyMjk9PT1jLmtleUNvZGUmJihlPUJiLmNvbXBvc2l0aW9uU3RhcnQpO2U/KHpiJiYoRmJ8fGUhPT1CYi5jb21wb3NpdGlvblN0YXJ0P2U9PT1CYi5jb21wb3NpdGlvbkVuZCYmRmImJihmPW1iKCkpOihHLl9yb290PWQsRy5fc3RhcnRUZXh0PW5iKCksRmI9ITApKSxlPXRiLmdldFBvb2xlZChlLGIsYyxkKSxmP2UuZGF0YT1cbmY6KGY9RWIoYyksbnVsbCE9PWYmJihlLmRhdGE9ZikpLFlhKGUpLGY9ZSk6Zj1udWxsOyhhPXliP0diKGEsYyk6SGIoYSxjKSk/KGI9dWIuZ2V0UG9vbGVkKEJiLmJlZm9yZUlucHV0LGIsYyxkKSxiLmRhdGE9YSxZYShiKSk6Yj1udWxsO3JldHVybiBudWxsPT09Zj9iOm51bGw9PT1iP2Y6W2YsYl19fSxKYj1udWxsLEtiPXtpbmplY3RGaWJlckNvbnRyb2xsZWRIb3N0Q29tcG9uZW50OmZ1bmN0aW9uKGEpe0piPWF9fSxMYj1udWxsLE1iPW51bGw7ZnVuY3Rpb24gTmIoYSl7aWYoYT14YShhKSl7SmImJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBKYi5yZXN0b3JlQ29udHJvbGxlZFN0YXRlP3ZvaWQgMDpBKFwiMTk0XCIpO3ZhciBiPXdhKGEuc3RhdGVOb2RlKTtKYi5yZXN0b3JlQ29udHJvbGxlZFN0YXRlKGEuc3RhdGVOb2RlLGEudHlwZSxiKX19ZnVuY3Rpb24gT2IoYSl7TGI/TWI/TWIucHVzaChhKTpNYj1bYV06TGI9YX1cbmZ1bmN0aW9uIFBiKCl7cmV0dXJuIG51bGwhPT1MYnx8bnVsbCE9PU1ifWZ1bmN0aW9uIFFiKCl7aWYoTGIpe3ZhciBhPUxiLGI9TWI7TWI9TGI9bnVsbDtOYihhKTtpZihiKWZvcihhPTA7YTxiLmxlbmd0aDthKyspTmIoYlthXSl9fXZhciBSYj17aW5qZWN0aW9uOktiLGVucXVldWVTdGF0ZVJlc3RvcmU6T2IsbmVlZHNTdGF0ZVJlc3RvcmU6UGIscmVzdG9yZVN0YXRlSWZOZWVkZWQ6UWJ9O2Z1bmN0aW9uIFNiKGEsYil7cmV0dXJuIGEoYil9ZnVuY3Rpb24gVGIoYSxiLGMpe3JldHVybiBhKGIsYyl9ZnVuY3Rpb24gVWIoKXt9dmFyIFZiPSExO2Z1bmN0aW9uIFdiKGEsYil7aWYoVmIpcmV0dXJuIGEoYik7VmI9ITA7dHJ5e3JldHVybiBTYihhLGIpfWZpbmFsbHl7VmI9ITEsUGIoKSYmKFViKCksUWIoKSl9fVxudmFyIFhiPXtjb2xvcjohMCxkYXRlOiEwLGRhdGV0aW1lOiEwLFwiZGF0ZXRpbWUtbG9jYWxcIjohMCxlbWFpbDohMCxtb250aDohMCxudW1iZXI6ITAscGFzc3dvcmQ6ITAscmFuZ2U6ITAsc2VhcmNoOiEwLHRlbDohMCx0ZXh0OiEwLHRpbWU6ITAsdXJsOiEwLHdlZWs6ITB9O2Z1bmN0aW9uIFliKGEpe3ZhciBiPWEmJmEubm9kZU5hbWUmJmEubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm5cImlucHV0XCI9PT1iPyEhWGJbYS50eXBlXTpcInRleHRhcmVhXCI9PT1iPyEwOiExfWZ1bmN0aW9uIFpiKGEpe2E9YS50YXJnZXR8fHdpbmRvdzthLmNvcnJlc3BvbmRpbmdVc2VFbGVtZW50JiYoYT1hLmNvcnJlc3BvbmRpbmdVc2VFbGVtZW50KTtyZXR1cm4gMz09PWEubm9kZVR5cGU/YS5wYXJlbnROb2RlOmF9XG5mdW5jdGlvbiAkYihhLGIpe2lmKCFtLmNhblVzZURPTXx8YiYmIShcImFkZEV2ZW50TGlzdGVuZXJcImluIGRvY3VtZW50KSlyZXR1cm4hMTthPVwib25cIithO2I9YSBpbiBkb2N1bWVudDtifHwoYj1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLGIuc2V0QXR0cmlidXRlKGEsXCJyZXR1cm47XCIpLGI9XCJmdW5jdGlvblwiPT09dHlwZW9mIGJbYV0pO3JldHVybiBifWZ1bmN0aW9uIGFjKGEpe3ZhciBiPWEudHlwZTtyZXR1cm4oYT1hLm5vZGVOYW1lKSYmXCJpbnB1dFwiPT09YS50b0xvd2VyQ2FzZSgpJiYoXCJjaGVja2JveFwiPT09Ynx8XCJyYWRpb1wiPT09Yil9XG5mdW5jdGlvbiBiYyhhKXt2YXIgYj1hYyhhKT9cImNoZWNrZWRcIjpcInZhbHVlXCIsYz1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGEuY29uc3RydWN0b3IucHJvdG90eXBlLGIpLGQ9XCJcIithW2JdO2lmKCFhLmhhc093blByb3BlcnR5KGIpJiZcInVuZGVmaW5lZFwiIT09dHlwZW9mIGMmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLmdldCYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGMuc2V0KXt2YXIgZT1jLmdldCxmPWMuc2V0O09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLGIse2NvbmZpZ3VyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gZS5jYWxsKHRoaXMpfSxzZXQ6ZnVuY3Rpb24oYSl7ZD1cIlwiK2E7Zi5jYWxsKHRoaXMsYSl9fSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGEsYix7ZW51bWVyYWJsZTpjLmVudW1lcmFibGV9KTtyZXR1cm57Z2V0VmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gZH0sc2V0VmFsdWU6ZnVuY3Rpb24oYSl7ZD1cIlwiK2F9LHN0b3BUcmFja2luZzpmdW5jdGlvbigpe2EuX3ZhbHVlVHJhY2tlcj1cbm51bGw7ZGVsZXRlIGFbYl19fX19ZnVuY3Rpb24gY2MoYSl7YS5fdmFsdWVUcmFja2VyfHwoYS5fdmFsdWVUcmFja2VyPWJjKGEpKX1mdW5jdGlvbiBkYyhhKXtpZighYSlyZXR1cm4hMTt2YXIgYj1hLl92YWx1ZVRyYWNrZXI7aWYoIWIpcmV0dXJuITA7dmFyIGM9Yi5nZXRWYWx1ZSgpO3ZhciBkPVwiXCI7YSYmKGQ9YWMoYSk/YS5jaGVja2VkP1widHJ1ZVwiOlwiZmFsc2VcIjphLnZhbHVlKTthPWQ7cmV0dXJuIGEhPT1jPyhiLnNldFZhbHVlKGEpLCEwKTohMX1cbnZhciBlYz1jYS5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRC5SZWFjdEN1cnJlbnRPd25lcixJPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3IsZmM9ST9TeW1ib2wuZm9yKFwicmVhY3QuZWxlbWVudFwiKTo2MDEwMyxnYz1JP1N5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIik6NjAxMDYsaGM9ST9TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIik6NjAxMDcsaWM9ST9TeW1ib2wuZm9yKFwicmVhY3Quc3RyaWN0X21vZGVcIik6NjAxMDgsamM9ST9TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIik6NjAxMTQsbWM9ST9TeW1ib2wuZm9yKFwicmVhY3QucHJvdmlkZXJcIik6NjAxMDksbmM9ST9TeW1ib2wuZm9yKFwicmVhY3QuY29udGV4dFwiKTo2MDExMCxvYz1JP1N5bWJvbC5mb3IoXCJyZWFjdC5hc3luY19tb2RlXCIpOjYwMTExLHBjPUk/U3ltYm9sLmZvcihcInJlYWN0LmZvcndhcmRfcmVmXCIpOjYwMTEyLHFjPUk/U3ltYm9sLmZvcihcInJlYWN0LnRpbWVvdXRcIik6XG42MDExMyxyYz1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3I7ZnVuY3Rpb24gc2MoYSl7aWYobnVsbD09PWF8fFwidW5kZWZpbmVkXCI9PT10eXBlb2YgYSlyZXR1cm4gbnVsbDthPXJjJiZhW3JjXXx8YVtcIkBAaXRlcmF0b3JcIl07cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGE/YTpudWxsfVxuZnVuY3Rpb24gdGMoYSl7dmFyIGI9YS50eXBlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBiKXJldHVybiBiLmRpc3BsYXlOYW1lfHxiLm5hbWU7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBiKXJldHVybiBiO3N3aXRjaChiKXtjYXNlIG9jOnJldHVyblwiQXN5bmNNb2RlXCI7Y2FzZSBuYzpyZXR1cm5cIkNvbnRleHQuQ29uc3VtZXJcIjtjYXNlIGhjOnJldHVyblwiUmVhY3RGcmFnbWVudFwiO2Nhc2UgZ2M6cmV0dXJuXCJSZWFjdFBvcnRhbFwiO2Nhc2UgamM6cmV0dXJuXCJQcm9maWxlcihcIithLnBlbmRpbmdQcm9wcy5pZCtcIilcIjtjYXNlIG1jOnJldHVyblwiQ29udGV4dC5Qcm92aWRlclwiO2Nhc2UgaWM6cmV0dXJuXCJTdHJpY3RNb2RlXCI7Y2FzZSBxYzpyZXR1cm5cIlRpbWVvdXRcIn1pZihcIm9iamVjdFwiPT09dHlwZW9mIGImJm51bGwhPT1iKXN3aXRjaChiLiQkdHlwZW9mKXtjYXNlIHBjOnJldHVybiBhPWIucmVuZGVyLmRpc3BsYXlOYW1lfHxiLnJlbmRlci5uYW1lfHxcIlwiLFwiXCIhPT1hP1wiRm9yd2FyZFJlZihcIitcbmErXCIpXCI6XCJGb3J3YXJkUmVmXCJ9cmV0dXJuIG51bGx9ZnVuY3Rpb24gdmMoYSl7dmFyIGI9XCJcIjtkb3thOnN3aXRjaChhLnRhZyl7Y2FzZSAwOmNhc2UgMTpjYXNlIDI6Y2FzZSA1OnZhciBjPWEuX2RlYnVnT3duZXIsZD1hLl9kZWJ1Z1NvdXJjZTt2YXIgZT10YyhhKTt2YXIgZj1udWxsO2MmJihmPXRjKGMpKTtjPWQ7ZT1cIlxcbiAgICBpbiBcIisoZXx8XCJVbmtub3duXCIpKyhjP1wiIChhdCBcIitjLmZpbGVOYW1lLnJlcGxhY2UoL14uKltcXFxcXFwvXS8sXCJcIikrXCI6XCIrYy5saW5lTnVtYmVyK1wiKVwiOmY/XCIgKGNyZWF0ZWQgYnkgXCIrZitcIilcIjpcIlwiKTticmVhayBhO2RlZmF1bHQ6ZT1cIlwifWIrPWU7YT1hLnJldHVybn13aGlsZShhKTtyZXR1cm4gYn1cbnZhciB3Yz0vXls6QS1aX2EtelxcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDJGRlxcdTAzNzAtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRF1bOkEtWl9hLXpcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAyRkZcXHUwMzcwLVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkRcXC0uMC05XFx1MDBCN1xcdTAzMDAtXFx1MDM2RlxcdTIwM0YtXFx1MjA0MF0qJC8seGM9e30seWM9e307ZnVuY3Rpb24gemMoYSl7aWYoeWMuaGFzT3duUHJvcGVydHkoYSkpcmV0dXJuITA7aWYoeGMuaGFzT3duUHJvcGVydHkoYSkpcmV0dXJuITE7aWYod2MudGVzdChhKSlyZXR1cm4geWNbYV09ITA7eGNbYV09ITA7cmV0dXJuITF9XG5mdW5jdGlvbiBBYyhhLGIsYyxkKXtpZihudWxsIT09YyYmMD09PWMudHlwZSlyZXR1cm4hMTtzd2l0Y2godHlwZW9mIGIpe2Nhc2UgXCJmdW5jdGlvblwiOmNhc2UgXCJzeW1ib2xcIjpyZXR1cm4hMDtjYXNlIFwiYm9vbGVhblwiOmlmKGQpcmV0dXJuITE7aWYobnVsbCE9PWMpcmV0dXJuIWMuYWNjZXB0c0Jvb2xlYW5zO2E9YS50b0xvd2VyQ2FzZSgpLnNsaWNlKDAsNSk7cmV0dXJuXCJkYXRhLVwiIT09YSYmXCJhcmlhLVwiIT09YTtkZWZhdWx0OnJldHVybiExfX1mdW5jdGlvbiBCYyhhLGIsYyxkKXtpZihudWxsPT09Ynx8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiBifHxBYyhhLGIsYyxkKSlyZXR1cm4hMDtpZihkKXJldHVybiExO2lmKG51bGwhPT1jKXN3aXRjaChjLnR5cGUpe2Nhc2UgMzpyZXR1cm4hYjtjYXNlIDQ6cmV0dXJuITE9PT1iO2Nhc2UgNTpyZXR1cm4gaXNOYU4oYik7Y2FzZSA2OnJldHVybiBpc05hTihiKXx8MT5ifXJldHVybiExfVxuZnVuY3Rpb24gSihhLGIsYyxkLGUpe3RoaXMuYWNjZXB0c0Jvb2xlYW5zPTI9PT1ifHwzPT09Ynx8ND09PWI7dGhpcy5hdHRyaWJ1dGVOYW1lPWQ7dGhpcy5hdHRyaWJ1dGVOYW1lc3BhY2U9ZTt0aGlzLm11c3RVc2VQcm9wZXJ0eT1jO3RoaXMucHJvcGVydHlOYW1lPWE7dGhpcy50eXBlPWJ9dmFyIEs9e307XCJjaGlsZHJlbiBkYW5nZXJvdXNseVNldElubmVySFRNTCBkZWZhdWx0VmFsdWUgZGVmYXVsdENoZWNrZWQgaW5uZXJIVE1MIHN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZyBzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmcgc3R5bGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXtLW2FdPW5ldyBKKGEsMCwhMSxhLG51bGwpfSk7XG5bW1wiYWNjZXB0Q2hhcnNldFwiLFwiYWNjZXB0LWNoYXJzZXRcIl0sW1wiY2xhc3NOYW1lXCIsXCJjbGFzc1wiXSxbXCJodG1sRm9yXCIsXCJmb3JcIl0sW1wiaHR0cEVxdWl2XCIsXCJodHRwLWVxdWl2XCJdXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWFbMF07S1tiXT1uZXcgSihiLDEsITEsYVsxXSxudWxsKX0pO1tcImNvbnRlbnRFZGl0YWJsZVwiLFwiZHJhZ2dhYmxlXCIsXCJzcGVsbENoZWNrXCIsXCJ2YWx1ZVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0tbYV09bmV3IEooYSwyLCExLGEudG9Mb3dlckNhc2UoKSxudWxsKX0pO1tcImF1dG9SZXZlcnNlXCIsXCJleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkXCIsXCJwcmVzZXJ2ZUFscGhhXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7S1thXT1uZXcgSihhLDIsITEsYSxudWxsKX0pO1xuXCJhbGxvd0Z1bGxTY3JlZW4gYXN5bmMgYXV0b0ZvY3VzIGF1dG9QbGF5IGNvbnRyb2xzIGRlZmF1bHQgZGVmZXIgZGlzYWJsZWQgZm9ybU5vVmFsaWRhdGUgaGlkZGVuIGxvb3Agbm9Nb2R1bGUgbm9WYWxpZGF0ZSBvcGVuIHBsYXlzSW5saW5lIHJlYWRPbmx5IHJlcXVpcmVkIHJldmVyc2VkIHNjb3BlZCBzZWFtbGVzcyBpdGVtU2NvcGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXtLW2FdPW5ldyBKKGEsMywhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCl9KTtbXCJjaGVja2VkXCIsXCJtdWx0aXBsZVwiLFwibXV0ZWRcIixcInNlbGVjdGVkXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7S1thXT1uZXcgSihhLDMsITAsYS50b0xvd2VyQ2FzZSgpLG51bGwpfSk7W1wiY2FwdHVyZVwiLFwiZG93bmxvYWRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtLW2FdPW5ldyBKKGEsNCwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCl9KTtcbltcImNvbHNcIixcInJvd3NcIixcInNpemVcIixcInNwYW5cIl0uZm9yRWFjaChmdW5jdGlvbihhKXtLW2FdPW5ldyBKKGEsNiwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCl9KTtbXCJyb3dTcGFuXCIsXCJzdGFydFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0tbYV09bmV3IEooYSw1LCExLGEudG9Mb3dlckNhc2UoKSxudWxsKX0pO3ZhciBDYz0vW1xcLTpdKFthLXpdKS9nO2Z1bmN0aW9uIERjKGEpe3JldHVybiBhWzFdLnRvVXBwZXJDYXNlKCl9XG5cImFjY2VudC1oZWlnaHQgYWxpZ25tZW50LWJhc2VsaW5lIGFyYWJpYy1mb3JtIGJhc2VsaW5lLXNoaWZ0IGNhcC1oZWlnaHQgY2xpcC1wYXRoIGNsaXAtcnVsZSBjb2xvci1pbnRlcnBvbGF0aW9uIGNvbG9yLWludGVycG9sYXRpb24tZmlsdGVycyBjb2xvci1wcm9maWxlIGNvbG9yLXJlbmRlcmluZyBkb21pbmFudC1iYXNlbGluZSBlbmFibGUtYmFja2dyb3VuZCBmaWxsLW9wYWNpdHkgZmlsbC1ydWxlIGZsb29kLWNvbG9yIGZsb29kLW9wYWNpdHkgZm9udC1mYW1pbHkgZm9udC1zaXplIGZvbnQtc2l6ZS1hZGp1c3QgZm9udC1zdHJldGNoIGZvbnQtc3R5bGUgZm9udC12YXJpYW50IGZvbnQtd2VpZ2h0IGdseXBoLW5hbWUgZ2x5cGgtb3JpZW50YXRpb24taG9yaXpvbnRhbCBnbHlwaC1vcmllbnRhdGlvbi12ZXJ0aWNhbCBob3Jpei1hZHYteCBob3Jpei1vcmlnaW4teCBpbWFnZS1yZW5kZXJpbmcgbGV0dGVyLXNwYWNpbmcgbGlnaHRpbmctY29sb3IgbWFya2VyLWVuZCBtYXJrZXItbWlkIG1hcmtlci1zdGFydCBvdmVybGluZS1wb3NpdGlvbiBvdmVybGluZS10aGlja25lc3MgcGFpbnQtb3JkZXIgcGFub3NlLTEgcG9pbnRlci1ldmVudHMgcmVuZGVyaW5nLWludGVudCBzaGFwZS1yZW5kZXJpbmcgc3RvcC1jb2xvciBzdG9wLW9wYWNpdHkgc3RyaWtldGhyb3VnaC1wb3NpdGlvbiBzdHJpa2V0aHJvdWdoLXRoaWNrbmVzcyBzdHJva2UtZGFzaGFycmF5IHN0cm9rZS1kYXNob2Zmc2V0IHN0cm9rZS1saW5lY2FwIHN0cm9rZS1saW5lam9pbiBzdHJva2UtbWl0ZXJsaW1pdCBzdHJva2Utb3BhY2l0eSBzdHJva2Utd2lkdGggdGV4dC1hbmNob3IgdGV4dC1kZWNvcmF0aW9uIHRleHQtcmVuZGVyaW5nIHVuZGVybGluZS1wb3NpdGlvbiB1bmRlcmxpbmUtdGhpY2tuZXNzIHVuaWNvZGUtYmlkaSB1bmljb2RlLXJhbmdlIHVuaXRzLXBlci1lbSB2LWFscGhhYmV0aWMgdi1oYW5naW5nIHYtaWRlb2dyYXBoaWMgdi1tYXRoZW1hdGljYWwgdmVjdG9yLWVmZmVjdCB2ZXJ0LWFkdi15IHZlcnQtb3JpZ2luLXggdmVydC1vcmlnaW4teSB3b3JkLXNwYWNpbmcgd3JpdGluZy1tb2RlIHhtbG5zOnhsaW5rIHgtaGVpZ2h0XCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKENjLFxuRGMpO0tbYl09bmV3IEooYiwxLCExLGEsbnVsbCl9KTtcInhsaW5rOmFjdHVhdGUgeGxpbms6YXJjcm9sZSB4bGluazpocmVmIHhsaW5rOnJvbGUgeGxpbms6c2hvdyB4bGluazp0aXRsZSB4bGluazp0eXBlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKENjLERjKTtLW2JdPW5ldyBKKGIsMSwhMSxhLFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiKX0pO1tcInhtbDpiYXNlXCIsXCJ4bWw6bGFuZ1wiLFwieG1sOnNwYWNlXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKENjLERjKTtLW2JdPW5ldyBKKGIsMSwhMSxhLFwiaHR0cDovL3d3dy53My5vcmcvWE1MLzE5OTgvbmFtZXNwYWNlXCIpfSk7Sy50YWJJbmRleD1uZXcgSihcInRhYkluZGV4XCIsMSwhMSxcInRhYmluZGV4XCIsbnVsbCk7XG5mdW5jdGlvbiBFYyhhLGIsYyxkKXt2YXIgZT1LLmhhc093blByb3BlcnR5KGIpP0tbYl06bnVsbDt2YXIgZj1udWxsIT09ZT8wPT09ZS50eXBlOmQ/ITE6ISgyPGIubGVuZ3RoKXx8XCJvXCIhPT1iWzBdJiZcIk9cIiE9PWJbMF18fFwiblwiIT09YlsxXSYmXCJOXCIhPT1iWzFdPyExOiEwO2Z8fChCYyhiLGMsZSxkKSYmKGM9bnVsbCksZHx8bnVsbD09PWU/emMoYikmJihudWxsPT09Yz9hLnJlbW92ZUF0dHJpYnV0ZShiKTphLnNldEF0dHJpYnV0ZShiLFwiXCIrYykpOmUubXVzdFVzZVByb3BlcnR5P2FbZS5wcm9wZXJ0eU5hbWVdPW51bGw9PT1jPzM9PT1lLnR5cGU/ITE6XCJcIjpjOihiPWUuYXR0cmlidXRlTmFtZSxkPWUuYXR0cmlidXRlTmFtZXNwYWNlLG51bGw9PT1jP2EucmVtb3ZlQXR0cmlidXRlKGIpOihlPWUudHlwZSxjPTM9PT1lfHw0PT09ZSYmITA9PT1jP1wiXCI6XCJcIitjLGQ/YS5zZXRBdHRyaWJ1dGVOUyhkLGIsYyk6YS5zZXRBdHRyaWJ1dGUoYixjKSkpKX1cbmZ1bmN0aW9uIEZjKGEsYil7dmFyIGM9Yi5jaGVja2VkO3JldHVybiBwKHt9LGIse2RlZmF1bHRDaGVja2VkOnZvaWQgMCxkZWZhdWx0VmFsdWU6dm9pZCAwLHZhbHVlOnZvaWQgMCxjaGVja2VkOm51bGwhPWM/YzphLl93cmFwcGVyU3RhdGUuaW5pdGlhbENoZWNrZWR9KX1mdW5jdGlvbiBHYyhhLGIpe3ZhciBjPW51bGw9PWIuZGVmYXVsdFZhbHVlP1wiXCI6Yi5kZWZhdWx0VmFsdWUsZD1udWxsIT1iLmNoZWNrZWQ/Yi5jaGVja2VkOmIuZGVmYXVsdENoZWNrZWQ7Yz1IYyhudWxsIT1iLnZhbHVlP2IudmFsdWU6Yyk7YS5fd3JhcHBlclN0YXRlPXtpbml0aWFsQ2hlY2tlZDpkLGluaXRpYWxWYWx1ZTpjLGNvbnRyb2xsZWQ6XCJjaGVja2JveFwiPT09Yi50eXBlfHxcInJhZGlvXCI9PT1iLnR5cGU/bnVsbCE9Yi5jaGVja2VkOm51bGwhPWIudmFsdWV9fWZ1bmN0aW9uIEljKGEsYil7Yj1iLmNoZWNrZWQ7bnVsbCE9YiYmRWMoYSxcImNoZWNrZWRcIixiLCExKX1cbmZ1bmN0aW9uIEpjKGEsYil7SWMoYSxiKTt2YXIgYz1IYyhiLnZhbHVlKTtpZihudWxsIT1jKWlmKFwibnVtYmVyXCI9PT1iLnR5cGUpe2lmKDA9PT1jJiZcIlwiPT09YS52YWx1ZXx8YS52YWx1ZSE9YylhLnZhbHVlPVwiXCIrY31lbHNlIGEudmFsdWUhPT1cIlwiK2MmJihhLnZhbHVlPVwiXCIrYyk7Yi5oYXNPd25Qcm9wZXJ0eShcInZhbHVlXCIpP0tjKGEsYi50eXBlLGMpOmIuaGFzT3duUHJvcGVydHkoXCJkZWZhdWx0VmFsdWVcIikmJktjKGEsYi50eXBlLEhjKGIuZGVmYXVsdFZhbHVlKSk7bnVsbD09Yi5jaGVja2VkJiZudWxsIT1iLmRlZmF1bHRDaGVja2VkJiYoYS5kZWZhdWx0Q2hlY2tlZD0hIWIuZGVmYXVsdENoZWNrZWQpfVxuZnVuY3Rpb24gTGMoYSxiKXtpZihiLmhhc093blByb3BlcnR5KFwidmFsdWVcIil8fGIuaGFzT3duUHJvcGVydHkoXCJkZWZhdWx0VmFsdWVcIikpXCJcIj09PWEudmFsdWUmJihhLnZhbHVlPVwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZSksYS5kZWZhdWx0VmFsdWU9XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlO2I9YS5uYW1lO1wiXCIhPT1iJiYoYS5uYW1lPVwiXCIpO2EuZGVmYXVsdENoZWNrZWQ9IWEuZGVmYXVsdENoZWNrZWQ7YS5kZWZhdWx0Q2hlY2tlZD0hYS5kZWZhdWx0Q2hlY2tlZDtcIlwiIT09YiYmKGEubmFtZT1iKX1mdW5jdGlvbiBLYyhhLGIsYyl7aWYoXCJudW1iZXJcIiE9PWJ8fGEub3duZXJEb2N1bWVudC5hY3RpdmVFbGVtZW50IT09YSludWxsPT1jP2EuZGVmYXVsdFZhbHVlPVwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZTphLmRlZmF1bHRWYWx1ZSE9PVwiXCIrYyYmKGEuZGVmYXVsdFZhbHVlPVwiXCIrYyl9XG5mdW5jdGlvbiBIYyhhKXtzd2l0Y2godHlwZW9mIGEpe2Nhc2UgXCJib29sZWFuXCI6Y2FzZSBcIm51bWJlclwiOmNhc2UgXCJvYmplY3RcIjpjYXNlIFwic3RyaW5nXCI6Y2FzZSBcInVuZGVmaW5lZFwiOnJldHVybiBhO2RlZmF1bHQ6cmV0dXJuXCJcIn19dmFyIE1jPXtjaGFuZ2U6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25DaGFuZ2VcIixjYXB0dXJlZDpcIm9uQ2hhbmdlQ2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJibHVyIGNoYW5nZSBjbGljayBmb2N1cyBpbnB1dCBrZXlkb3duIGtleXVwIHNlbGVjdGlvbmNoYW5nZVwiLnNwbGl0KFwiIFwiKX19O2Z1bmN0aW9uIE5jKGEsYixjKXthPUguZ2V0UG9vbGVkKE1jLmNoYW5nZSxhLGIsYyk7YS50eXBlPVwiY2hhbmdlXCI7T2IoYyk7WWEoYSk7cmV0dXJuIGF9dmFyIE9jPW51bGwsUGM9bnVsbDtmdW5jdGlvbiBRYyhhKXtJYShhLCExKX1mdW5jdGlvbiBSYyhhKXt2YXIgYj1PYShhKTtpZihkYyhiKSlyZXR1cm4gYX1cbmZ1bmN0aW9uIFNjKGEsYil7aWYoXCJjaGFuZ2VcIj09PWEpcmV0dXJuIGJ9dmFyIFRjPSExO20uY2FuVXNlRE9NJiYoVGM9JGIoXCJpbnB1dFwiKSYmKCFkb2N1bWVudC5kb2N1bWVudE1vZGV8fDk8ZG9jdW1lbnQuZG9jdW1lbnRNb2RlKSk7ZnVuY3Rpb24gVWMoKXtPYyYmKE9jLmRldGFjaEV2ZW50KFwib25wcm9wZXJ0eWNoYW5nZVwiLFZjKSxQYz1PYz1udWxsKX1mdW5jdGlvbiBWYyhhKXtcInZhbHVlXCI9PT1hLnByb3BlcnR5TmFtZSYmUmMoUGMpJiYoYT1OYyhQYyxhLFpiKGEpKSxXYihRYyxhKSl9ZnVuY3Rpb24gV2MoYSxiLGMpe1wiZm9jdXNcIj09PWE/KFVjKCksT2M9YixQYz1jLE9jLmF0dGFjaEV2ZW50KFwib25wcm9wZXJ0eWNoYW5nZVwiLFZjKSk6XCJibHVyXCI9PT1hJiZVYygpfWZ1bmN0aW9uIFhjKGEpe2lmKFwic2VsZWN0aW9uY2hhbmdlXCI9PT1hfHxcImtleXVwXCI9PT1hfHxcImtleWRvd25cIj09PWEpcmV0dXJuIFJjKFBjKX1cbmZ1bmN0aW9uIFljKGEsYil7aWYoXCJjbGlja1wiPT09YSlyZXR1cm4gUmMoYil9ZnVuY3Rpb24gWmMoYSxiKXtpZihcImlucHV0XCI9PT1hfHxcImNoYW5nZVwiPT09YSlyZXR1cm4gUmMoYil9XG52YXIgJGM9e2V2ZW50VHlwZXM6TWMsX2lzSW5wdXRFdmVudFN1cHBvcnRlZDpUYyxleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPWI/T2EoYik6d2luZG93LGY9dm9pZCAwLGc9dm9pZCAwLGg9ZS5ub2RlTmFtZSYmZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1wic2VsZWN0XCI9PT1ofHxcImlucHV0XCI9PT1oJiZcImZpbGVcIj09PWUudHlwZT9mPVNjOlliKGUpP1RjP2Y9WmM6KGY9WGMsZz1XYyk6KGg9ZS5ub2RlTmFtZSkmJlwiaW5wdXRcIj09PWgudG9Mb3dlckNhc2UoKSYmKFwiY2hlY2tib3hcIj09PWUudHlwZXx8XCJyYWRpb1wiPT09ZS50eXBlKSYmKGY9WWMpO2lmKGYmJihmPWYoYSxiKSkpcmV0dXJuIE5jKGYsYyxkKTtnJiZnKGEsZSxiKTtcImJsdXJcIj09PWEmJm51bGwhPWImJihhPWIuX3dyYXBwZXJTdGF0ZXx8ZS5fd3JhcHBlclN0YXRlKSYmYS5jb250cm9sbGVkJiZcIm51bWJlclwiPT09ZS50eXBlJiZLYyhlLFwibnVtYmVyXCIsZS52YWx1ZSl9fSxhZD1ILmV4dGVuZCh7dmlldzpudWxsLFxuZGV0YWlsOm51bGx9KSxiZD17QWx0OlwiYWx0S2V5XCIsQ29udHJvbDpcImN0cmxLZXlcIixNZXRhOlwibWV0YUtleVwiLFNoaWZ0Olwic2hpZnRLZXlcIn07ZnVuY3Rpb24gY2QoYSl7dmFyIGI9dGhpcy5uYXRpdmVFdmVudDtyZXR1cm4gYi5nZXRNb2RpZmllclN0YXRlP2IuZ2V0TW9kaWZpZXJTdGF0ZShhKTooYT1iZFthXSk/ISFiW2FdOiExfWZ1bmN0aW9uIGRkKCl7cmV0dXJuIGNkfVxudmFyIGVkPWFkLmV4dGVuZCh7c2NyZWVuWDpudWxsLHNjcmVlblk6bnVsbCxjbGllbnRYOm51bGwsY2xpZW50WTpudWxsLHBhZ2VYOm51bGwscGFnZVk6bnVsbCxjdHJsS2V5Om51bGwsc2hpZnRLZXk6bnVsbCxhbHRLZXk6bnVsbCxtZXRhS2V5Om51bGwsZ2V0TW9kaWZpZXJTdGF0ZTpkZCxidXR0b246bnVsbCxidXR0b25zOm51bGwscmVsYXRlZFRhcmdldDpmdW5jdGlvbihhKXtyZXR1cm4gYS5yZWxhdGVkVGFyZ2V0fHwoYS5mcm9tRWxlbWVudD09PWEuc3JjRWxlbWVudD9hLnRvRWxlbWVudDphLmZyb21FbGVtZW50KX19KSxmZD1lZC5leHRlbmQoe3BvaW50ZXJJZDpudWxsLHdpZHRoOm51bGwsaGVpZ2h0Om51bGwscHJlc3N1cmU6bnVsbCx0aWx0WDpudWxsLHRpbHRZOm51bGwscG9pbnRlclR5cGU6bnVsbCxpc1ByaW1hcnk6bnVsbH0pLGdkPXttb3VzZUVudGVyOntyZWdpc3RyYXRpb25OYW1lOlwib25Nb3VzZUVudGVyXCIsZGVwZW5kZW5jaWVzOltcIm1vdXNlb3V0XCIsXCJtb3VzZW92ZXJcIl19LFxubW91c2VMZWF2ZTp7cmVnaXN0cmF0aW9uTmFtZTpcIm9uTW91c2VMZWF2ZVwiLGRlcGVuZGVuY2llczpbXCJtb3VzZW91dFwiLFwibW91c2VvdmVyXCJdfSxwb2ludGVyRW50ZXI6e3JlZ2lzdHJhdGlvbk5hbWU6XCJvblBvaW50ZXJFbnRlclwiLGRlcGVuZGVuY2llczpbXCJwb2ludGVyb3V0XCIsXCJwb2ludGVyb3ZlclwiXX0scG9pbnRlckxlYXZlOntyZWdpc3RyYXRpb25OYW1lOlwib25Qb2ludGVyTGVhdmVcIixkZXBlbmRlbmNpZXM6W1wicG9pbnRlcm91dFwiLFwicG9pbnRlcm92ZXJcIl19fSxoZD17ZXZlbnRUeXBlczpnZCxleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPVwibW91c2VvdmVyXCI9PT1hfHxcInBvaW50ZXJvdmVyXCI9PT1hLGY9XCJtb3VzZW91dFwiPT09YXx8XCJwb2ludGVyb3V0XCI9PT1hO2lmKGUmJihjLnJlbGF0ZWRUYXJnZXR8fGMuZnJvbUVsZW1lbnQpfHwhZiYmIWUpcmV0dXJuIG51bGw7ZT1kLndpbmRvdz09PWQ/ZDooZT1kLm93bmVyRG9jdW1lbnQpP2UuZGVmYXVsdFZpZXd8fFxuZS5wYXJlbnRXaW5kb3c6d2luZG93O2Y/KGY9YixiPShiPWMucmVsYXRlZFRhcmdldHx8Yy50b0VsZW1lbnQpP05hKGIpOm51bGwpOmY9bnVsbDtpZihmPT09YilyZXR1cm4gbnVsbDt2YXIgZz12b2lkIDAsaD12b2lkIDAsaz12b2lkIDAsbj12b2lkIDA7aWYoXCJtb3VzZW91dFwiPT09YXx8XCJtb3VzZW92ZXJcIj09PWEpZz1lZCxoPWdkLm1vdXNlTGVhdmUsaz1nZC5tb3VzZUVudGVyLG49XCJtb3VzZVwiO2Vsc2UgaWYoXCJwb2ludGVyb3V0XCI9PT1hfHxcInBvaW50ZXJvdmVyXCI9PT1hKWc9ZmQsaD1nZC5wb2ludGVyTGVhdmUsaz1nZC5wb2ludGVyRW50ZXIsbj1cInBvaW50ZXJcIjthPW51bGw9PWY/ZTpPYShmKTtlPW51bGw9PWI/ZTpPYShiKTtoPWcuZ2V0UG9vbGVkKGgsZixjLGQpO2gudHlwZT1uK1wibGVhdmVcIjtoLnRhcmdldD1hO2gucmVsYXRlZFRhcmdldD1lO2M9Zy5nZXRQb29sZWQoayxiLGMsZCk7Yy50eXBlPW4rXCJlbnRlclwiO2MudGFyZ2V0PWU7Yy5yZWxhdGVkVGFyZ2V0PWE7WmEoaCxcbmMsZixiKTtyZXR1cm5baCxjXX19O2Z1bmN0aW9uIGlkKGEpe3ZhciBiPWE7aWYoYS5hbHRlcm5hdGUpZm9yKDtiLnJldHVybjspYj1iLnJldHVybjtlbHNle2lmKDAhPT0oYi5lZmZlY3RUYWcmMikpcmV0dXJuIDE7Zm9yKDtiLnJldHVybjspaWYoYj1iLnJldHVybiwwIT09KGIuZWZmZWN0VGFnJjIpKXJldHVybiAxfXJldHVybiAzPT09Yi50YWc/MjozfWZ1bmN0aW9uIGpkKGEpezIhPT1pZChhKT9BKFwiMTg4XCIpOnZvaWQgMH1cbmZ1bmN0aW9uIGtkKGEpe3ZhciBiPWEuYWx0ZXJuYXRlO2lmKCFiKXJldHVybiBiPWlkKGEpLDM9PT1iP0EoXCIxODhcIik6dm9pZCAwLDE9PT1iP251bGw6YTtmb3IodmFyIGM9YSxkPWI7Oyl7dmFyIGU9Yy5yZXR1cm4sZj1lP2UuYWx0ZXJuYXRlOm51bGw7aWYoIWV8fCFmKWJyZWFrO2lmKGUuY2hpbGQ9PT1mLmNoaWxkKXtmb3IodmFyIGc9ZS5jaGlsZDtnOyl7aWYoZz09PWMpcmV0dXJuIGpkKGUpLGE7aWYoZz09PWQpcmV0dXJuIGpkKGUpLGI7Zz1nLnNpYmxpbmd9QShcIjE4OFwiKX1pZihjLnJldHVybiE9PWQucmV0dXJuKWM9ZSxkPWY7ZWxzZXtnPSExO2Zvcih2YXIgaD1lLmNoaWxkO2g7KXtpZihoPT09Yyl7Zz0hMDtjPWU7ZD1mO2JyZWFrfWlmKGg9PT1kKXtnPSEwO2Q9ZTtjPWY7YnJlYWt9aD1oLnNpYmxpbmd9aWYoIWcpe2ZvcihoPWYuY2hpbGQ7aDspe2lmKGg9PT1jKXtnPSEwO2M9ZjtkPWU7YnJlYWt9aWYoaD09PWQpe2c9ITA7ZD1mO2M9ZTticmVha31oPWguc2libGluZ31nP1xudm9pZCAwOkEoXCIxODlcIil9fWMuYWx0ZXJuYXRlIT09ZD9BKFwiMTkwXCIpOnZvaWQgMH0zIT09Yy50YWc/QShcIjE4OFwiKTp2b2lkIDA7cmV0dXJuIGMuc3RhdGVOb2RlLmN1cnJlbnQ9PT1jP2E6Yn1mdW5jdGlvbiBsZChhKXthPWtkKGEpO2lmKCFhKXJldHVybiBudWxsO2Zvcih2YXIgYj1hOzspe2lmKDU9PT1iLnRhZ3x8Nj09PWIudGFnKXJldHVybiBiO2lmKGIuY2hpbGQpYi5jaGlsZC5yZXR1cm49YixiPWIuY2hpbGQ7ZWxzZXtpZihiPT09YSlicmVhaztmb3IoOyFiLnNpYmxpbmc7KXtpZighYi5yZXR1cm58fGIucmV0dXJuPT09YSlyZXR1cm4gbnVsbDtiPWIucmV0dXJufWIuc2libGluZy5yZXR1cm49Yi5yZXR1cm47Yj1iLnNpYmxpbmd9fXJldHVybiBudWxsfVxuZnVuY3Rpb24gbWQoYSl7YT1rZChhKTtpZighYSlyZXR1cm4gbnVsbDtmb3IodmFyIGI9YTs7KXtpZig1PT09Yi50YWd8fDY9PT1iLnRhZylyZXR1cm4gYjtpZihiLmNoaWxkJiY0IT09Yi50YWcpYi5jaGlsZC5yZXR1cm49YixiPWIuY2hpbGQ7ZWxzZXtpZihiPT09YSlicmVhaztmb3IoOyFiLnNpYmxpbmc7KXtpZighYi5yZXR1cm58fGIucmV0dXJuPT09YSlyZXR1cm4gbnVsbDtiPWIucmV0dXJufWIuc2libGluZy5yZXR1cm49Yi5yZXR1cm47Yj1iLnNpYmxpbmd9fXJldHVybiBudWxsfXZhciBuZD1ILmV4dGVuZCh7YW5pbWF0aW9uTmFtZTpudWxsLGVsYXBzZWRUaW1lOm51bGwscHNldWRvRWxlbWVudDpudWxsfSksb2Q9SC5leHRlbmQoe2NsaXBib2FyZERhdGE6ZnVuY3Rpb24oYSl7cmV0dXJuXCJjbGlwYm9hcmREYXRhXCJpbiBhP2EuY2xpcGJvYXJkRGF0YTp3aW5kb3cuY2xpcGJvYXJkRGF0YX19KSxwZD1hZC5leHRlbmQoe3JlbGF0ZWRUYXJnZXQ6bnVsbH0pO1xuZnVuY3Rpb24gcWQoYSl7dmFyIGI9YS5rZXlDb2RlO1wiY2hhckNvZGVcImluIGE/KGE9YS5jaGFyQ29kZSwwPT09YSYmMTM9PT1iJiYoYT0xMykpOmE9YjsxMD09PWEmJihhPTEzKTtyZXR1cm4gMzI8PWF8fDEzPT09YT9hOjB9XG52YXIgcmQ9e0VzYzpcIkVzY2FwZVwiLFNwYWNlYmFyOlwiIFwiLExlZnQ6XCJBcnJvd0xlZnRcIixVcDpcIkFycm93VXBcIixSaWdodDpcIkFycm93UmlnaHRcIixEb3duOlwiQXJyb3dEb3duXCIsRGVsOlwiRGVsZXRlXCIsV2luOlwiT1NcIixNZW51OlwiQ29udGV4dE1lbnVcIixBcHBzOlwiQ29udGV4dE1lbnVcIixTY3JvbGw6XCJTY3JvbGxMb2NrXCIsTW96UHJpbnRhYmxlS2V5OlwiVW5pZGVudGlmaWVkXCJ9LHNkPXs4OlwiQmFja3NwYWNlXCIsOTpcIlRhYlwiLDEyOlwiQ2xlYXJcIiwxMzpcIkVudGVyXCIsMTY6XCJTaGlmdFwiLDE3OlwiQ29udHJvbFwiLDE4OlwiQWx0XCIsMTk6XCJQYXVzZVwiLDIwOlwiQ2Fwc0xvY2tcIiwyNzpcIkVzY2FwZVwiLDMyOlwiIFwiLDMzOlwiUGFnZVVwXCIsMzQ6XCJQYWdlRG93blwiLDM1OlwiRW5kXCIsMzY6XCJIb21lXCIsMzc6XCJBcnJvd0xlZnRcIiwzODpcIkFycm93VXBcIiwzOTpcIkFycm93UmlnaHRcIiw0MDpcIkFycm93RG93blwiLDQ1OlwiSW5zZXJ0XCIsNDY6XCJEZWxldGVcIiwxMTI6XCJGMVwiLDExMzpcIkYyXCIsMTE0OlwiRjNcIiwxMTU6XCJGNFwiLFxuMTE2OlwiRjVcIiwxMTc6XCJGNlwiLDExODpcIkY3XCIsMTE5OlwiRjhcIiwxMjA6XCJGOVwiLDEyMTpcIkYxMFwiLDEyMjpcIkYxMVwiLDEyMzpcIkYxMlwiLDE0NDpcIk51bUxvY2tcIiwxNDU6XCJTY3JvbGxMb2NrXCIsMjI0OlwiTWV0YVwifSx0ZD1hZC5leHRlbmQoe2tleTpmdW5jdGlvbihhKXtpZihhLmtleSl7dmFyIGI9cmRbYS5rZXldfHxhLmtleTtpZihcIlVuaWRlbnRpZmllZFwiIT09YilyZXR1cm4gYn1yZXR1cm5cImtleXByZXNzXCI9PT1hLnR5cGU/KGE9cWQoYSksMTM9PT1hP1wiRW50ZXJcIjpTdHJpbmcuZnJvbUNoYXJDb2RlKGEpKTpcImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP3NkW2Eua2V5Q29kZV18fFwiVW5pZGVudGlmaWVkXCI6XCJcIn0sbG9jYXRpb246bnVsbCxjdHJsS2V5Om51bGwsc2hpZnRLZXk6bnVsbCxhbHRLZXk6bnVsbCxtZXRhS2V5Om51bGwscmVwZWF0Om51bGwsbG9jYWxlOm51bGwsZ2V0TW9kaWZpZXJTdGF0ZTpkZCxjaGFyQ29kZTpmdW5jdGlvbihhKXtyZXR1cm5cImtleXByZXNzXCI9PT1cbmEudHlwZT9xZChhKTowfSxrZXlDb2RlOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/YS5rZXlDb2RlOjB9LHdoaWNoOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5cHJlc3NcIj09PWEudHlwZT9xZChhKTpcImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP2Eua2V5Q29kZTowfX0pLHVkPWVkLmV4dGVuZCh7ZGF0YVRyYW5zZmVyOm51bGx9KSx2ZD1hZC5leHRlbmQoe3RvdWNoZXM6bnVsbCx0YXJnZXRUb3VjaGVzOm51bGwsY2hhbmdlZFRvdWNoZXM6bnVsbCxhbHRLZXk6bnVsbCxtZXRhS2V5Om51bGwsY3RybEtleTpudWxsLHNoaWZ0S2V5Om51bGwsZ2V0TW9kaWZpZXJTdGF0ZTpkZH0pLHdkPUguZXh0ZW5kKHtwcm9wZXJ0eU5hbWU6bnVsbCxlbGFwc2VkVGltZTpudWxsLHBzZXVkb0VsZW1lbnQ6bnVsbH0pLHhkPWVkLmV4dGVuZCh7ZGVsdGFYOmZ1bmN0aW9uKGEpe3JldHVyblwiZGVsdGFYXCJpbiBhP2EuZGVsdGFYOlwid2hlZWxEZWx0YVhcImluXG5hPy1hLndoZWVsRGVsdGFYOjB9LGRlbHRhWTpmdW5jdGlvbihhKXtyZXR1cm5cImRlbHRhWVwiaW4gYT9hLmRlbHRhWTpcIndoZWVsRGVsdGFZXCJpbiBhPy1hLndoZWVsRGVsdGFZOlwid2hlZWxEZWx0YVwiaW4gYT8tYS53aGVlbERlbHRhOjB9LGRlbHRhWjpudWxsLGRlbHRhTW9kZTpudWxsfSkseWQ9W1tcImFib3J0XCIsXCJhYm9ydFwiXSxbZmIsXCJhbmltYXRpb25FbmRcIl0sW2diLFwiYW5pbWF0aW9uSXRlcmF0aW9uXCJdLFtoYixcImFuaW1hdGlvblN0YXJ0XCJdLFtcImNhbnBsYXlcIixcImNhblBsYXlcIl0sW1wiY2FucGxheXRocm91Z2hcIixcImNhblBsYXlUaHJvdWdoXCJdLFtcImRyYWdcIixcImRyYWdcIl0sW1wiZHJhZ2VudGVyXCIsXCJkcmFnRW50ZXJcIl0sW1wiZHJhZ2V4aXRcIixcImRyYWdFeGl0XCJdLFtcImRyYWdsZWF2ZVwiLFwiZHJhZ0xlYXZlXCJdLFtcImRyYWdvdmVyXCIsXCJkcmFnT3ZlclwiXSxbXCJkdXJhdGlvbmNoYW5nZVwiLFwiZHVyYXRpb25DaGFuZ2VcIl0sW1wiZW1wdGllZFwiLFwiZW1wdGllZFwiXSxbXCJlbmNyeXB0ZWRcIixcImVuY3J5cHRlZFwiXSxcbltcImVuZGVkXCIsXCJlbmRlZFwiXSxbXCJlcnJvclwiLFwiZXJyb3JcIl0sW1wiZ290cG9pbnRlcmNhcHR1cmVcIixcImdvdFBvaW50ZXJDYXB0dXJlXCJdLFtcImxvYWRcIixcImxvYWRcIl0sW1wibG9hZGVkZGF0YVwiLFwibG9hZGVkRGF0YVwiXSxbXCJsb2FkZWRtZXRhZGF0YVwiLFwibG9hZGVkTWV0YWRhdGFcIl0sW1wibG9hZHN0YXJ0XCIsXCJsb2FkU3RhcnRcIl0sW1wibG9zdHBvaW50ZXJjYXB0dXJlXCIsXCJsb3N0UG9pbnRlckNhcHR1cmVcIl0sW1wibW91c2Vtb3ZlXCIsXCJtb3VzZU1vdmVcIl0sW1wibW91c2VvdXRcIixcIm1vdXNlT3V0XCJdLFtcIm1vdXNlb3ZlclwiLFwibW91c2VPdmVyXCJdLFtcInBsYXlpbmdcIixcInBsYXlpbmdcIl0sW1wicG9pbnRlcm1vdmVcIixcInBvaW50ZXJNb3ZlXCJdLFtcInBvaW50ZXJvdXRcIixcInBvaW50ZXJPdXRcIl0sW1wicG9pbnRlcm92ZXJcIixcInBvaW50ZXJPdmVyXCJdLFtcInByb2dyZXNzXCIsXCJwcm9ncmVzc1wiXSxbXCJzY3JvbGxcIixcInNjcm9sbFwiXSxbXCJzZWVraW5nXCIsXCJzZWVraW5nXCJdLFtcInN0YWxsZWRcIixcInN0YWxsZWRcIl0sXG5bXCJzdXNwZW5kXCIsXCJzdXNwZW5kXCJdLFtcInRpbWV1cGRhdGVcIixcInRpbWVVcGRhdGVcIl0sW1widG9nZ2xlXCIsXCJ0b2dnbGVcIl0sW1widG91Y2htb3ZlXCIsXCJ0b3VjaE1vdmVcIl0sW2liLFwidHJhbnNpdGlvbkVuZFwiXSxbXCJ3YWl0aW5nXCIsXCJ3YWl0aW5nXCJdLFtcIndoZWVsXCIsXCJ3aGVlbFwiXV0semQ9e30sQWQ9e307ZnVuY3Rpb24gQmQoYSxiKXt2YXIgYz1hWzBdO2E9YVsxXTt2YXIgZD1cIm9uXCIrKGFbMF0udG9VcHBlckNhc2UoKSthLnNsaWNlKDEpKTtiPXtwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpkLGNhcHR1cmVkOmQrXCJDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpbY10saXNJbnRlcmFjdGl2ZTpifTt6ZFthXT1iO0FkW2NdPWJ9XG5bW1wiYmx1clwiLFwiYmx1clwiXSxbXCJjYW5jZWxcIixcImNhbmNlbFwiXSxbXCJjbGlja1wiLFwiY2xpY2tcIl0sW1wiY2xvc2VcIixcImNsb3NlXCJdLFtcImNvbnRleHRtZW51XCIsXCJjb250ZXh0TWVudVwiXSxbXCJjb3B5XCIsXCJjb3B5XCJdLFtcImN1dFwiLFwiY3V0XCJdLFtcImRibGNsaWNrXCIsXCJkb3VibGVDbGlja1wiXSxbXCJkcmFnZW5kXCIsXCJkcmFnRW5kXCJdLFtcImRyYWdzdGFydFwiLFwiZHJhZ1N0YXJ0XCJdLFtcImRyb3BcIixcImRyb3BcIl0sW1wiZm9jdXNcIixcImZvY3VzXCJdLFtcImlucHV0XCIsXCJpbnB1dFwiXSxbXCJpbnZhbGlkXCIsXCJpbnZhbGlkXCJdLFtcImtleWRvd25cIixcImtleURvd25cIl0sW1wia2V5cHJlc3NcIixcImtleVByZXNzXCJdLFtcImtleXVwXCIsXCJrZXlVcFwiXSxbXCJtb3VzZWRvd25cIixcIm1vdXNlRG93blwiXSxbXCJtb3VzZXVwXCIsXCJtb3VzZVVwXCJdLFtcInBhc3RlXCIsXCJwYXN0ZVwiXSxbXCJwYXVzZVwiLFwicGF1c2VcIl0sW1wicGxheVwiLFwicGxheVwiXSxbXCJwb2ludGVyY2FuY2VsXCIsXCJwb2ludGVyQ2FuY2VsXCJdLFtcInBvaW50ZXJkb3duXCIsXCJwb2ludGVyRG93blwiXSxcbltcInBvaW50ZXJ1cFwiLFwicG9pbnRlclVwXCJdLFtcInJhdGVjaGFuZ2VcIixcInJhdGVDaGFuZ2VcIl0sW1wicmVzZXRcIixcInJlc2V0XCJdLFtcInNlZWtlZFwiLFwic2Vla2VkXCJdLFtcInN1Ym1pdFwiLFwic3VibWl0XCJdLFtcInRvdWNoY2FuY2VsXCIsXCJ0b3VjaENhbmNlbFwiXSxbXCJ0b3VjaGVuZFwiLFwidG91Y2hFbmRcIl0sW1widG91Y2hzdGFydFwiLFwidG91Y2hTdGFydFwiXSxbXCJ2b2x1bWVjaGFuZ2VcIixcInZvbHVtZUNoYW5nZVwiXV0uZm9yRWFjaChmdW5jdGlvbihhKXtCZChhLCEwKX0pO3lkLmZvckVhY2goZnVuY3Rpb24oYSl7QmQoYSwhMSl9KTtcbnZhciBDZD17ZXZlbnRUeXBlczp6ZCxpc0ludGVyYWN0aXZlVG9wTGV2ZWxFdmVudFR5cGU6ZnVuY3Rpb24oYSl7YT1BZFthXTtyZXR1cm4gdm9pZCAwIT09YSYmITA9PT1hLmlzSW50ZXJhY3RpdmV9LGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9QWRbYV07aWYoIWUpcmV0dXJuIG51bGw7c3dpdGNoKGEpe2Nhc2UgXCJrZXlwcmVzc1wiOmlmKDA9PT1xZChjKSlyZXR1cm4gbnVsbDtjYXNlIFwia2V5ZG93blwiOmNhc2UgXCJrZXl1cFwiOmE9dGQ7YnJlYWs7Y2FzZSBcImJsdXJcIjpjYXNlIFwiZm9jdXNcIjphPXBkO2JyZWFrO2Nhc2UgXCJjbGlja1wiOmlmKDI9PT1jLmJ1dHRvbilyZXR1cm4gbnVsbDtjYXNlIFwiZGJsY2xpY2tcIjpjYXNlIFwibW91c2Vkb3duXCI6Y2FzZSBcIm1vdXNlbW92ZVwiOmNhc2UgXCJtb3VzZXVwXCI6Y2FzZSBcIm1vdXNlb3V0XCI6Y2FzZSBcIm1vdXNlb3ZlclwiOmNhc2UgXCJjb250ZXh0bWVudVwiOmE9ZWQ7YnJlYWs7Y2FzZSBcImRyYWdcIjpjYXNlIFwiZHJhZ2VuZFwiOmNhc2UgXCJkcmFnZW50ZXJcIjpjYXNlIFwiZHJhZ2V4aXRcIjpjYXNlIFwiZHJhZ2xlYXZlXCI6Y2FzZSBcImRyYWdvdmVyXCI6Y2FzZSBcImRyYWdzdGFydFwiOmNhc2UgXCJkcm9wXCI6YT1cbnVkO2JyZWFrO2Nhc2UgXCJ0b3VjaGNhbmNlbFwiOmNhc2UgXCJ0b3VjaGVuZFwiOmNhc2UgXCJ0b3VjaG1vdmVcIjpjYXNlIFwidG91Y2hzdGFydFwiOmE9dmQ7YnJlYWs7Y2FzZSBmYjpjYXNlIGdiOmNhc2UgaGI6YT1uZDticmVhaztjYXNlIGliOmE9d2Q7YnJlYWs7Y2FzZSBcInNjcm9sbFwiOmE9YWQ7YnJlYWs7Y2FzZSBcIndoZWVsXCI6YT14ZDticmVhaztjYXNlIFwiY29weVwiOmNhc2UgXCJjdXRcIjpjYXNlIFwicGFzdGVcIjphPW9kO2JyZWFrO2Nhc2UgXCJnb3Rwb2ludGVyY2FwdHVyZVwiOmNhc2UgXCJsb3N0cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwicG9pbnRlcmNhbmNlbFwiOmNhc2UgXCJwb2ludGVyZG93blwiOmNhc2UgXCJwb2ludGVybW92ZVwiOmNhc2UgXCJwb2ludGVyb3V0XCI6Y2FzZSBcInBvaW50ZXJvdmVyXCI6Y2FzZSBcInBvaW50ZXJ1cFwiOmE9ZmQ7YnJlYWs7ZGVmYXVsdDphPUh9Yj1hLmdldFBvb2xlZChlLGIsYyxkKTtZYShiKTtyZXR1cm4gYn19LERkPUNkLmlzSW50ZXJhY3RpdmVUb3BMZXZlbEV2ZW50VHlwZSxcbkVkPVtdO2Z1bmN0aW9uIEZkKGEpe3ZhciBiPWEudGFyZ2V0SW5zdDtkb3tpZighYil7YS5hbmNlc3RvcnMucHVzaChiKTticmVha312YXIgYztmb3IoYz1iO2MucmV0dXJuOyljPWMucmV0dXJuO2M9MyE9PWMudGFnP251bGw6Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztpZighYylicmVhazthLmFuY2VzdG9ycy5wdXNoKGIpO2I9TmEoYyl9d2hpbGUoYik7Zm9yKGM9MDtjPGEuYW5jZXN0b3JzLmxlbmd0aDtjKyspYj1hLmFuY2VzdG9yc1tjXSxKYShhLnRvcExldmVsVHlwZSxiLGEubmF0aXZlRXZlbnQsWmIoYS5uYXRpdmVFdmVudCkpfXZhciBHZD0hMDtmdW5jdGlvbiBJZChhKXtHZD0hIWF9ZnVuY3Rpb24gTChhLGIpe2lmKCFiKXJldHVybiBudWxsO3ZhciBjPShEZChhKT9KZDpLZCkuYmluZChudWxsLGEpO2IuYWRkRXZlbnRMaXN0ZW5lcihhLGMsITEpfVxuZnVuY3Rpb24gTGQoYSxiKXtpZighYilyZXR1cm4gbnVsbDt2YXIgYz0oRGQoYSk/SmQ6S2QpLmJpbmQobnVsbCxhKTtiLmFkZEV2ZW50TGlzdGVuZXIoYSxjLCEwKX1mdW5jdGlvbiBKZChhLGIpe1RiKEtkLGEsYil9ZnVuY3Rpb24gS2QoYSxiKXtpZihHZCl7dmFyIGM9WmIoYik7Yz1OYShjKTtudWxsPT09Y3x8XCJudW1iZXJcIiE9PXR5cGVvZiBjLnRhZ3x8Mj09PWlkKGMpfHwoYz1udWxsKTtpZihFZC5sZW5ndGgpe3ZhciBkPUVkLnBvcCgpO2QudG9wTGV2ZWxUeXBlPWE7ZC5uYXRpdmVFdmVudD1iO2QudGFyZ2V0SW5zdD1jO2E9ZH1lbHNlIGE9e3RvcExldmVsVHlwZTphLG5hdGl2ZUV2ZW50OmIsdGFyZ2V0SW5zdDpjLGFuY2VzdG9yczpbXX07dHJ5e1diKEZkLGEpfWZpbmFsbHl7YS50b3BMZXZlbFR5cGU9bnVsbCxhLm5hdGl2ZUV2ZW50PW51bGwsYS50YXJnZXRJbnN0PW51bGwsYS5hbmNlc3RvcnMubGVuZ3RoPTAsMTA+RWQubGVuZ3RoJiZFZC5wdXNoKGEpfX19XG52YXIgTWQ9e2dldCBfZW5hYmxlZCgpe3JldHVybiBHZH0sc2V0RW5hYmxlZDpJZCxpc0VuYWJsZWQ6ZnVuY3Rpb24oKXtyZXR1cm4gR2R9LHRyYXBCdWJibGVkRXZlbnQ6TCx0cmFwQ2FwdHVyZWRFdmVudDpMZCxkaXNwYXRjaEV2ZW50OktkfSxOZD17fSxPZD0wLFBkPVwiX3JlYWN0TGlzdGVuZXJzSURcIisoXCJcIitNYXRoLnJhbmRvbSgpKS5zbGljZSgyKTtmdW5jdGlvbiBRZChhKXtPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYSxQZCl8fChhW1BkXT1PZCsrLE5kW2FbUGRdXT17fSk7cmV0dXJuIE5kW2FbUGRdXX1mdW5jdGlvbiBSZChhKXtmb3IoO2EmJmEuZmlyc3RDaGlsZDspYT1hLmZpcnN0Q2hpbGQ7cmV0dXJuIGF9XG5mdW5jdGlvbiBTZChhLGIpe3ZhciBjPVJkKGEpO2E9MDtmb3IodmFyIGQ7Yzspe2lmKDM9PT1jLm5vZGVUeXBlKXtkPWErYy50ZXh0Q29udGVudC5sZW5ndGg7aWYoYTw9YiYmZD49YilyZXR1cm57bm9kZTpjLG9mZnNldDpiLWF9O2E9ZH1hOntmb3IoO2M7KXtpZihjLm5leHRTaWJsaW5nKXtjPWMubmV4dFNpYmxpbmc7YnJlYWsgYX1jPWMucGFyZW50Tm9kZX1jPXZvaWQgMH1jPVJkKGMpfX1mdW5jdGlvbiBUZChhKXt2YXIgYj1hJiZhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuIGImJihcImlucHV0XCI9PT1iJiZcInRleHRcIj09PWEudHlwZXx8XCJ0ZXh0YXJlYVwiPT09Ynx8XCJ0cnVlXCI9PT1hLmNvbnRlbnRFZGl0YWJsZSl9XG52YXIgVWQ9bS5jYW5Vc2VET00mJlwiZG9jdW1lbnRNb2RlXCJpbiBkb2N1bWVudCYmMTE+PWRvY3VtZW50LmRvY3VtZW50TW9kZSxWZD17c2VsZWN0OntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uU2VsZWN0XCIsY2FwdHVyZWQ6XCJvblNlbGVjdENhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwiYmx1ciBjb250ZXh0bWVudSBmb2N1cyBrZXlkb3duIGtleXVwIG1vdXNlZG93biBtb3VzZXVwIHNlbGVjdGlvbmNoYW5nZVwiLnNwbGl0KFwiIFwiKX19LFdkPW51bGwsWGQ9bnVsbCxZZD1udWxsLFpkPSExO1xuZnVuY3Rpb24gJGQoYSxiKXtpZihaZHx8bnVsbD09V2R8fFdkIT09ZGEoKSlyZXR1cm4gbnVsbDt2YXIgYz1XZDtcInNlbGVjdGlvblN0YXJ0XCJpbiBjJiZUZChjKT9jPXtzdGFydDpjLnNlbGVjdGlvblN0YXJ0LGVuZDpjLnNlbGVjdGlvbkVuZH06d2luZG93LmdldFNlbGVjdGlvbj8oYz13aW5kb3cuZ2V0U2VsZWN0aW9uKCksYz17YW5jaG9yTm9kZTpjLmFuY2hvck5vZGUsYW5jaG9yT2Zmc2V0OmMuYW5jaG9yT2Zmc2V0LGZvY3VzTm9kZTpjLmZvY3VzTm9kZSxmb2N1c09mZnNldDpjLmZvY3VzT2Zmc2V0fSk6Yz12b2lkIDA7cmV0dXJuIFlkJiZlYShZZCxjKT9udWxsOihZZD1jLGE9SC5nZXRQb29sZWQoVmQuc2VsZWN0LFhkLGEsYiksYS50eXBlPVwic2VsZWN0XCIsYS50YXJnZXQ9V2QsWWEoYSksYSl9XG52YXIgYWU9e2V2ZW50VHlwZXM6VmQsZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1kLndpbmRvdz09PWQ/ZC5kb2N1bWVudDo5PT09ZC5ub2RlVHlwZT9kOmQub3duZXJEb2N1bWVudCxmO2lmKCEoZj0hZSkpe2E6e2U9UWQoZSk7Zj1zYS5vblNlbGVjdDtmb3IodmFyIGc9MDtnPGYubGVuZ3RoO2crKyl7dmFyIGg9ZltnXTtpZighZS5oYXNPd25Qcm9wZXJ0eShoKXx8IWVbaF0pe2U9ITE7YnJlYWsgYX19ZT0hMH1mPSFlfWlmKGYpcmV0dXJuIG51bGw7ZT1iP09hKGIpOndpbmRvdztzd2l0Y2goYSl7Y2FzZSBcImZvY3VzXCI6aWYoWWIoZSl8fFwidHJ1ZVwiPT09ZS5jb250ZW50RWRpdGFibGUpV2Q9ZSxYZD1iLFlkPW51bGw7YnJlYWs7Y2FzZSBcImJsdXJcIjpZZD1YZD1XZD1udWxsO2JyZWFrO2Nhc2UgXCJtb3VzZWRvd25cIjpaZD0hMDticmVhaztjYXNlIFwiY29udGV4dG1lbnVcIjpjYXNlIFwibW91c2V1cFwiOnJldHVybiBaZD0hMSwkZChjLGQpO2Nhc2UgXCJzZWxlY3Rpb25jaGFuZ2VcIjppZihVZClicmVhaztcbmNhc2UgXCJrZXlkb3duXCI6Y2FzZSBcImtleXVwXCI6cmV0dXJuICRkKGMsZCl9cmV0dXJuIG51bGx9fTtHYS5pbmplY3RFdmVudFBsdWdpbk9yZGVyKFwiUmVzcG9uZGVyRXZlbnRQbHVnaW4gU2ltcGxlRXZlbnRQbHVnaW4gVGFwRXZlbnRQbHVnaW4gRW50ZXJMZWF2ZUV2ZW50UGx1Z2luIENoYW5nZUV2ZW50UGx1Z2luIFNlbGVjdEV2ZW50UGx1Z2luIEJlZm9yZUlucHV0RXZlbnRQbHVnaW5cIi5zcGxpdChcIiBcIikpO3dhPVFhLmdldEZpYmVyQ3VycmVudFByb3BzRnJvbU5vZGU7eGE9UWEuZ2V0SW5zdGFuY2VGcm9tTm9kZTt5YT1RYS5nZXROb2RlRnJvbUluc3RhbmNlO0dhLmluamVjdEV2ZW50UGx1Z2luc0J5TmFtZSh7U2ltcGxlRXZlbnRQbHVnaW46Q2QsRW50ZXJMZWF2ZUV2ZW50UGx1Z2luOmhkLENoYW5nZUV2ZW50UGx1Z2luOiRjLFNlbGVjdEV2ZW50UGx1Z2luOmFlLEJlZm9yZUlucHV0RXZlbnRQbHVnaW46SWJ9KTt2YXIgYmU9dm9pZCAwO1xuYmU9XCJvYmplY3RcIj09PXR5cGVvZiBwZXJmb3JtYW5jZSYmXCJmdW5jdGlvblwiPT09dHlwZW9mIHBlcmZvcm1hbmNlLm5vdz9mdW5jdGlvbigpe3JldHVybiBwZXJmb3JtYW5jZS5ub3coKX06ZnVuY3Rpb24oKXtyZXR1cm4gRGF0ZS5ub3coKX07dmFyIGNlPXZvaWQgMCxkZT12b2lkIDA7XG5pZihtLmNhblVzZURPTSl7dmFyIGVlPVtdLGZlPTAsZ2U9e30saGU9LTEsaWU9ITEsamU9ITEsa2U9MCxsZT0zMyxtZT0zMyxuZT17ZGlkVGltZW91dDohMSx0aW1lUmVtYWluaW5nOmZ1bmN0aW9uKCl7dmFyIGE9a2UtYmUoKTtyZXR1cm4gMDxhP2E6MH19LG9lPWZ1bmN0aW9uKGEsYil7aWYoZ2VbYl0pdHJ5e2EobmUpfWZpbmFsbHl7ZGVsZXRlIGdlW2JdfX0scGU9XCJfX3JlYWN0SWRsZUNhbGxiYWNrJFwiK01hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnNsaWNlKDIpO3dpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwibWVzc2FnZVwiLGZ1bmN0aW9uKGEpe2lmKGEuc291cmNlPT09d2luZG93JiZhLmRhdGE9PT1wZSYmKGllPSExLDAhPT1lZS5sZW5ndGgpKXtpZigwIT09ZWUubGVuZ3RoJiYoYT1iZSgpLCEoLTE9PT1oZXx8aGU+YSkpKXtoZT0tMTtuZS5kaWRUaW1lb3V0PSEwO2Zvcih2YXIgYj0wLGM9ZWUubGVuZ3RoO2I8YztiKyspe3ZhciBkPWVlW2JdLGU9ZC50aW1lb3V0VGltZTstMSE9PVxuZSYmZTw9YT9vZShkLnNjaGVkdWxlZENhbGxiYWNrLGQuY2FsbGJhY2tJZCk6LTEhPT1lJiYoLTE9PT1oZXx8ZTxoZSkmJihoZT1lKX19Zm9yKGE9YmUoKTswPGtlLWEmJjA8ZWUubGVuZ3RoOylhPWVlLnNoaWZ0KCksbmUuZGlkVGltZW91dD0hMSxvZShhLnNjaGVkdWxlZENhbGxiYWNrLGEuY2FsbGJhY2tJZCksYT1iZSgpOzA8ZWUubGVuZ3RoJiYhamUmJihqZT0hMCxyZXF1ZXN0QW5pbWF0aW9uRnJhbWUocWUpKX19LCExKTt2YXIgcWU9ZnVuY3Rpb24oYSl7amU9ITE7dmFyIGI9YS1rZSttZTtiPG1lJiZsZTxtZT8oOD5iJiYoYj04KSxtZT1iPGxlP2xlOmIpOmxlPWI7a2U9YSttZTtpZXx8KGllPSEwLHdpbmRvdy5wb3N0TWVzc2FnZShwZSxcIipcIikpfTtjZT1mdW5jdGlvbihhLGIpe3ZhciBjPS0xO251bGwhPWImJlwibnVtYmVyXCI9PT10eXBlb2YgYi50aW1lb3V0JiYoYz1iZSgpK2IudGltZW91dCk7aWYoLTE9PT1oZXx8LTEhPT1jJiZjPGhlKWhlPWM7ZmUrKztiPWZlO2VlLnB1c2goe3NjaGVkdWxlZENhbGxiYWNrOmEsXG5jYWxsYmFja0lkOmIsdGltZW91dFRpbWU6Y30pO2dlW2JdPSEwO2plfHwoamU9ITAscmVxdWVzdEFuaW1hdGlvbkZyYW1lKHFlKSk7cmV0dXJuIGJ9O2RlPWZ1bmN0aW9uKGEpe2RlbGV0ZSBnZVthXX19ZWxzZXt2YXIgcmU9MCxzZT17fTtjZT1mdW5jdGlvbihhKXt2YXIgYj1yZSsrLGM9c2V0VGltZW91dChmdW5jdGlvbigpe2Eoe3RpbWVSZW1haW5pbmc6ZnVuY3Rpb24oKXtyZXR1cm4gSW5maW5pdHl9LGRpZFRpbWVvdXQ6ITF9KX0pO3NlW2JdPWM7cmV0dXJuIGJ9O2RlPWZ1bmN0aW9uKGEpe3ZhciBiPXNlW2FdO2RlbGV0ZSBzZVthXTtjbGVhclRpbWVvdXQoYil9fWZ1bmN0aW9uIHRlKGEpe3ZhciBiPVwiXCI7Y2EuQ2hpbGRyZW4uZm9yRWFjaChhLGZ1bmN0aW9uKGEpe251bGw9PWF8fFwic3RyaW5nXCIhPT10eXBlb2YgYSYmXCJudW1iZXJcIiE9PXR5cGVvZiBhfHwoYis9YSl9KTtyZXR1cm4gYn1cbmZ1bmN0aW9uIHVlKGEsYil7YT1wKHtjaGlsZHJlbjp2b2lkIDB9LGIpO2lmKGI9dGUoYi5jaGlsZHJlbikpYS5jaGlsZHJlbj1iO3JldHVybiBhfWZ1bmN0aW9uIHZlKGEsYixjLGQpe2E9YS5vcHRpb25zO2lmKGIpe2I9e307Zm9yKHZhciBlPTA7ZTxjLmxlbmd0aDtlKyspYltcIiRcIitjW2VdXT0hMDtmb3IoYz0wO2M8YS5sZW5ndGg7YysrKWU9Yi5oYXNPd25Qcm9wZXJ0eShcIiRcIithW2NdLnZhbHVlKSxhW2NdLnNlbGVjdGVkIT09ZSYmKGFbY10uc2VsZWN0ZWQ9ZSksZSYmZCYmKGFbY10uZGVmYXVsdFNlbGVjdGVkPSEwKX1lbHNle2M9XCJcIitjO2I9bnVsbDtmb3IoZT0wO2U8YS5sZW5ndGg7ZSsrKXtpZihhW2VdLnZhbHVlPT09Yyl7YVtlXS5zZWxlY3RlZD0hMDtkJiYoYVtlXS5kZWZhdWx0U2VsZWN0ZWQ9ITApO3JldHVybn1udWxsIT09Ynx8YVtlXS5kaXNhYmxlZHx8KGI9YVtlXSl9bnVsbCE9PWImJihiLnNlbGVjdGVkPSEwKX19XG5mdW5jdGlvbiB3ZShhLGIpe3ZhciBjPWIudmFsdWU7YS5fd3JhcHBlclN0YXRlPXtpbml0aWFsVmFsdWU6bnVsbCE9Yz9jOmIuZGVmYXVsdFZhbHVlLHdhc011bHRpcGxlOiEhYi5tdWx0aXBsZX19ZnVuY3Rpb24geGUoYSxiKXtudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MP0EoXCI5MVwiKTp2b2lkIDA7cmV0dXJuIHAoe30sYix7dmFsdWU6dm9pZCAwLGRlZmF1bHRWYWx1ZTp2b2lkIDAsY2hpbGRyZW46XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlfSl9ZnVuY3Rpb24geWUoYSxiKXt2YXIgYz1iLnZhbHVlO251bGw9PWMmJihjPWIuZGVmYXVsdFZhbHVlLGI9Yi5jaGlsZHJlbixudWxsIT1iJiYobnVsbCE9Yz9BKFwiOTJcIik6dm9pZCAwLEFycmF5LmlzQXJyYXkoYikmJigxPj1iLmxlbmd0aD92b2lkIDA6QShcIjkzXCIpLGI9YlswXSksYz1cIlwiK2IpLG51bGw9PWMmJihjPVwiXCIpKTthLl93cmFwcGVyU3RhdGU9e2luaXRpYWxWYWx1ZTpcIlwiK2N9fVxuZnVuY3Rpb24gemUoYSxiKXt2YXIgYz1iLnZhbHVlO251bGwhPWMmJihjPVwiXCIrYyxjIT09YS52YWx1ZSYmKGEudmFsdWU9YyksbnVsbD09Yi5kZWZhdWx0VmFsdWUmJihhLmRlZmF1bHRWYWx1ZT1jKSk7bnVsbCE9Yi5kZWZhdWx0VmFsdWUmJihhLmRlZmF1bHRWYWx1ZT1iLmRlZmF1bHRWYWx1ZSl9ZnVuY3Rpb24gQWUoYSl7dmFyIGI9YS50ZXh0Q29udGVudDtiPT09YS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZSYmKGEudmFsdWU9Yil9dmFyIEJlPXtodG1sOlwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiLG1hdGhtbDpcImh0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUxcIixzdmc6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wifTtcbmZ1bmN0aW9uIENlKGEpe3N3aXRjaChhKXtjYXNlIFwic3ZnXCI6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiO2Nhc2UgXCJtYXRoXCI6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MXCI7ZGVmYXVsdDpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIn19ZnVuY3Rpb24gRGUoYSxiKXtyZXR1cm4gbnVsbD09YXx8XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI9PT1hP0NlKGIpOlwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj09PWEmJlwiZm9yZWlnbk9iamVjdFwiPT09Yj9cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIjphfVxudmFyIEVlPXZvaWQgMCxGZT1mdW5jdGlvbihhKXtyZXR1cm5cInVuZGVmaW5lZFwiIT09dHlwZW9mIE1TQXBwJiZNU0FwcC5leGVjVW5zYWZlTG9jYWxGdW5jdGlvbj9mdW5jdGlvbihiLGMsZCxlKXtNU0FwcC5leGVjVW5zYWZlTG9jYWxGdW5jdGlvbihmdW5jdGlvbigpe3JldHVybiBhKGIsYyxkLGUpfSl9OmF9KGZ1bmN0aW9uKGEsYil7aWYoYS5uYW1lc3BhY2VVUkkhPT1CZS5zdmd8fFwiaW5uZXJIVE1MXCJpbiBhKWEuaW5uZXJIVE1MPWI7ZWxzZXtFZT1FZXx8ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtFZS5pbm5lckhUTUw9XCI8c3ZnPlwiK2IrXCI8L3N2Zz5cIjtmb3IoYj1FZS5maXJzdENoaWxkO2EuZmlyc3RDaGlsZDspYS5yZW1vdmVDaGlsZChhLmZpcnN0Q2hpbGQpO2Zvcig7Yi5maXJzdENoaWxkOylhLmFwcGVuZENoaWxkKGIuZmlyc3RDaGlsZCl9fSk7XG5mdW5jdGlvbiBHZShhLGIpe2lmKGIpe3ZhciBjPWEuZmlyc3RDaGlsZDtpZihjJiZjPT09YS5sYXN0Q2hpbGQmJjM9PT1jLm5vZGVUeXBlKXtjLm5vZGVWYWx1ZT1iO3JldHVybn19YS50ZXh0Q29udGVudD1ifVxudmFyIEhlPXthbmltYXRpb25JdGVyYXRpb25Db3VudDohMCxib3JkZXJJbWFnZU91dHNldDohMCxib3JkZXJJbWFnZVNsaWNlOiEwLGJvcmRlckltYWdlV2lkdGg6ITAsYm94RmxleDohMCxib3hGbGV4R3JvdXA6ITAsYm94T3JkaW5hbEdyb3VwOiEwLGNvbHVtbkNvdW50OiEwLGNvbHVtbnM6ITAsZmxleDohMCxmbGV4R3JvdzohMCxmbGV4UG9zaXRpdmU6ITAsZmxleFNocmluazohMCxmbGV4TmVnYXRpdmU6ITAsZmxleE9yZGVyOiEwLGdyaWRSb3c6ITAsZ3JpZFJvd0VuZDohMCxncmlkUm93U3BhbjohMCxncmlkUm93U3RhcnQ6ITAsZ3JpZENvbHVtbjohMCxncmlkQ29sdW1uRW5kOiEwLGdyaWRDb2x1bW5TcGFuOiEwLGdyaWRDb2x1bW5TdGFydDohMCxmb250V2VpZ2h0OiEwLGxpbmVDbGFtcDohMCxsaW5lSGVpZ2h0OiEwLG9wYWNpdHk6ITAsb3JkZXI6ITAsb3JwaGFuczohMCx0YWJTaXplOiEwLHdpZG93czohMCx6SW5kZXg6ITAsem9vbTohMCxmaWxsT3BhY2l0eTohMCxmbG9vZE9wYWNpdHk6ITAsXG5zdG9wT3BhY2l0eTohMCxzdHJva2VEYXNoYXJyYXk6ITAsc3Ryb2tlRGFzaG9mZnNldDohMCxzdHJva2VNaXRlcmxpbWl0OiEwLHN0cm9rZU9wYWNpdHk6ITAsc3Ryb2tlV2lkdGg6ITB9LEllPVtcIldlYmtpdFwiLFwibXNcIixcIk1velwiLFwiT1wiXTtPYmplY3Qua2V5cyhIZSkuZm9yRWFjaChmdW5jdGlvbihhKXtJZS5mb3JFYWNoKGZ1bmN0aW9uKGIpe2I9YithLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpK2Euc3Vic3RyaW5nKDEpO0hlW2JdPUhlW2FdfSl9KTtcbmZ1bmN0aW9uIEplKGEsYil7YT1hLnN0eWxlO2Zvcih2YXIgYyBpbiBiKWlmKGIuaGFzT3duUHJvcGVydHkoYykpe3ZhciBkPTA9PT1jLmluZGV4T2YoXCItLVwiKTt2YXIgZT1jO3ZhciBmPWJbY107ZT1udWxsPT1mfHxcImJvb2xlYW5cIj09PXR5cGVvZiBmfHxcIlwiPT09Zj9cIlwiOmR8fFwibnVtYmVyXCIhPT10eXBlb2YgZnx8MD09PWZ8fEhlLmhhc093blByb3BlcnR5KGUpJiZIZVtlXT8oXCJcIitmKS50cmltKCk6ZitcInB4XCI7XCJmbG9hdFwiPT09YyYmKGM9XCJjc3NGbG9hdFwiKTtkP2Euc2V0UHJvcGVydHkoYyxlKTphW2NdPWV9fXZhciBLZT1wKHttZW51aXRlbTohMH0se2FyZWE6ITAsYmFzZTohMCxicjohMCxjb2w6ITAsZW1iZWQ6ITAsaHI6ITAsaW1nOiEwLGlucHV0OiEwLGtleWdlbjohMCxsaW5rOiEwLG1ldGE6ITAscGFyYW06ITAsc291cmNlOiEwLHRyYWNrOiEwLHdicjohMH0pO1xuZnVuY3Rpb24gTGUoYSxiLGMpe2ImJihLZVthXSYmKG51bGwhPWIuY2hpbGRyZW58fG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw/QShcIjEzN1wiLGEsYygpKTp2b2lkIDApLG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJihudWxsIT1iLmNoaWxkcmVuP0EoXCI2MFwiKTp2b2lkIDAsXCJvYmplY3RcIj09PXR5cGVvZiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZcIl9faHRtbFwiaW4gYi5kYW5nZXJvdXNseVNldElubmVySFRNTD92b2lkIDA6QShcIjYxXCIpKSxudWxsIT1iLnN0eWxlJiZcIm9iamVjdFwiIT09dHlwZW9mIGIuc3R5bGU/QShcIjYyXCIsYygpKTp2b2lkIDApfVxuZnVuY3Rpb24gTWUoYSxiKXtpZigtMT09PWEuaW5kZXhPZihcIi1cIikpcmV0dXJuXCJzdHJpbmdcIj09PXR5cGVvZiBiLmlzO3N3aXRjaChhKXtjYXNlIFwiYW5ub3RhdGlvbi14bWxcIjpjYXNlIFwiY29sb3ItcHJvZmlsZVwiOmNhc2UgXCJmb250LWZhY2VcIjpjYXNlIFwiZm9udC1mYWNlLXNyY1wiOmNhc2UgXCJmb250LWZhY2UtdXJpXCI6Y2FzZSBcImZvbnQtZmFjZS1mb3JtYXRcIjpjYXNlIFwiZm9udC1mYWNlLW5hbWVcIjpjYXNlIFwibWlzc2luZy1nbHlwaFwiOnJldHVybiExO2RlZmF1bHQ6cmV0dXJuITB9fXZhciBOZT12LnRoYXRSZXR1cm5zKFwiXCIpO1xuZnVuY3Rpb24gT2UoYSxiKXthPTk9PT1hLm5vZGVUeXBlfHwxMT09PWEubm9kZVR5cGU/YTphLm93bmVyRG9jdW1lbnQ7dmFyIGM9UWQoYSk7Yj1zYVtiXTtmb3IodmFyIGQ9MDtkPGIubGVuZ3RoO2QrKyl7dmFyIGU9YltkXTtpZighYy5oYXNPd25Qcm9wZXJ0eShlKXx8IWNbZV0pe3N3aXRjaChlKXtjYXNlIFwic2Nyb2xsXCI6TGQoXCJzY3JvbGxcIixhKTticmVhaztjYXNlIFwiZm9jdXNcIjpjYXNlIFwiYmx1clwiOkxkKFwiZm9jdXNcIixhKTtMZChcImJsdXJcIixhKTtjLmJsdXI9ITA7Yy5mb2N1cz0hMDticmVhaztjYXNlIFwiY2FuY2VsXCI6Y2FzZSBcImNsb3NlXCI6JGIoZSwhMCkmJkxkKGUsYSk7YnJlYWs7Y2FzZSBcImludmFsaWRcIjpjYXNlIFwic3VibWl0XCI6Y2FzZSBcInJlc2V0XCI6YnJlYWs7ZGVmYXVsdDotMT09PWpiLmluZGV4T2YoZSkmJkwoZSxhKX1jW2VdPSEwfX19XG5mdW5jdGlvbiBQZShhLGIsYyxkKXtjPTk9PT1jLm5vZGVUeXBlP2M6Yy5vd25lckRvY3VtZW50O2Q9PT1CZS5odG1sJiYoZD1DZShhKSk7ZD09PUJlLmh0bWw/XCJzY3JpcHRcIj09PWE/KGE9Yy5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLGEuaW5uZXJIVE1MPVwiPHNjcmlwdD5cXHgzYy9zY3JpcHQ+XCIsYT1hLnJlbW92ZUNoaWxkKGEuZmlyc3RDaGlsZCkpOmE9XCJzdHJpbmdcIj09PXR5cGVvZiBiLmlzP2MuY3JlYXRlRWxlbWVudChhLHtpczpiLmlzfSk6Yy5jcmVhdGVFbGVtZW50KGEpOmE9Yy5jcmVhdGVFbGVtZW50TlMoZCxhKTtyZXR1cm4gYX1mdW5jdGlvbiBRZShhLGIpe3JldHVybig5PT09Yi5ub2RlVHlwZT9iOmIub3duZXJEb2N1bWVudCkuY3JlYXRlVGV4dE5vZGUoYSl9XG5mdW5jdGlvbiBSZShhLGIsYyxkKXt2YXIgZT1NZShiLGMpO3N3aXRjaChiKXtjYXNlIFwiaWZyYW1lXCI6Y2FzZSBcIm9iamVjdFwiOkwoXCJsb2FkXCIsYSk7dmFyIGY9YzticmVhaztjYXNlIFwidmlkZW9cIjpjYXNlIFwiYXVkaW9cIjpmb3IoZj0wO2Y8amIubGVuZ3RoO2YrKylMKGpiW2ZdLGEpO2Y9YzticmVhaztjYXNlIFwic291cmNlXCI6TChcImVycm9yXCIsYSk7Zj1jO2JyZWFrO2Nhc2UgXCJpbWdcIjpjYXNlIFwiaW1hZ2VcIjpjYXNlIFwibGlua1wiOkwoXCJlcnJvclwiLGEpO0woXCJsb2FkXCIsYSk7Zj1jO2JyZWFrO2Nhc2UgXCJmb3JtXCI6TChcInJlc2V0XCIsYSk7TChcInN1Ym1pdFwiLGEpO2Y9YzticmVhaztjYXNlIFwiZGV0YWlsc1wiOkwoXCJ0b2dnbGVcIixhKTtmPWM7YnJlYWs7Y2FzZSBcImlucHV0XCI6R2MoYSxjKTtmPUZjKGEsYyk7TChcImludmFsaWRcIixhKTtPZShkLFwib25DaGFuZ2VcIik7YnJlYWs7Y2FzZSBcIm9wdGlvblwiOmY9dWUoYSxjKTticmVhaztjYXNlIFwic2VsZWN0XCI6d2UoYSxjKTtmPXAoe30sYyx7dmFsdWU6dm9pZCAwfSk7XG5MKFwiaW52YWxpZFwiLGEpO09lKGQsXCJvbkNoYW5nZVwiKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjp5ZShhLGMpO2Y9eGUoYSxjKTtMKFwiaW52YWxpZFwiLGEpO09lKGQsXCJvbkNoYW5nZVwiKTticmVhaztkZWZhdWx0OmY9Y31MZShiLGYsTmUpO3ZhciBnPWYsaDtmb3IoaCBpbiBnKWlmKGcuaGFzT3duUHJvcGVydHkoaCkpe3ZhciBrPWdbaF07XCJzdHlsZVwiPT09aD9KZShhLGssTmUpOlwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWg/KGs9az9rLl9faHRtbDp2b2lkIDAsbnVsbCE9ayYmRmUoYSxrKSk6XCJjaGlsZHJlblwiPT09aD9cInN0cmluZ1wiPT09dHlwZW9mIGs/KFwidGV4dGFyZWFcIiE9PWJ8fFwiXCIhPT1rKSYmR2UoYSxrKTpcIm51bWJlclwiPT09dHlwZW9mIGsmJkdlKGEsXCJcIitrKTpcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09aCYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWgmJlwiYXV0b0ZvY3VzXCIhPT1oJiYocmEuaGFzT3duUHJvcGVydHkoaCk/bnVsbCE9ayYmT2UoZCxcbmgpOm51bGwhPWsmJkVjKGEsaCxrLGUpKX1zd2l0Y2goYil7Y2FzZSBcImlucHV0XCI6Y2MoYSk7TGMoYSxjKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpjYyhhKTtBZShhLGMpO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjpudWxsIT1jLnZhbHVlJiZhLnNldEF0dHJpYnV0ZShcInZhbHVlXCIsYy52YWx1ZSk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmEubXVsdGlwbGU9ISFjLm11bHRpcGxlO2I9Yy52YWx1ZTtudWxsIT1iP3ZlKGEsISFjLm11bHRpcGxlLGIsITEpOm51bGwhPWMuZGVmYXVsdFZhbHVlJiZ2ZShhLCEhYy5tdWx0aXBsZSxjLmRlZmF1bHRWYWx1ZSwhMCk7YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCI9PT10eXBlb2YgZi5vbkNsaWNrJiYoYS5vbmNsaWNrPXYpfX1cbmZ1bmN0aW9uIFNlKGEsYixjLGQsZSl7dmFyIGY9bnVsbDtzd2l0Y2goYil7Y2FzZSBcImlucHV0XCI6Yz1GYyhhLGMpO2Q9RmMoYSxkKTtmPVtdO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjpjPXVlKGEsYyk7ZD11ZShhLGQpO2Y9W107YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmM9cCh7fSxjLHt2YWx1ZTp2b2lkIDB9KTtkPXAoe30sZCx7dmFsdWU6dm9pZCAwfSk7Zj1bXTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpjPXhlKGEsYyk7ZD14ZShhLGQpO2Y9W107YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCIhPT10eXBlb2YgYy5vbkNsaWNrJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5vbkNsaWNrJiYoYS5vbmNsaWNrPXYpfUxlKGIsZCxOZSk7Yj1hPXZvaWQgMDt2YXIgZz1udWxsO2ZvcihhIGluIGMpaWYoIWQuaGFzT3duUHJvcGVydHkoYSkmJmMuaGFzT3duUHJvcGVydHkoYSkmJm51bGwhPWNbYV0paWYoXCJzdHlsZVwiPT09YSl7dmFyIGg9Y1thXTtmb3IoYiBpbiBoKWguaGFzT3duUHJvcGVydHkoYikmJihnfHxcbihnPXt9KSxnW2JdPVwiXCIpfWVsc2VcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCIhPT1hJiZcImNoaWxkcmVuXCIhPT1hJiZcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09YSYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWEmJlwiYXV0b0ZvY3VzXCIhPT1hJiYocmEuaGFzT3duUHJvcGVydHkoYSk/Znx8KGY9W10pOihmPWZ8fFtdKS5wdXNoKGEsbnVsbCkpO2ZvcihhIGluIGQpe3ZhciBrPWRbYV07aD1udWxsIT1jP2NbYV06dm9pZCAwO2lmKGQuaGFzT3duUHJvcGVydHkoYSkmJmshPT1oJiYobnVsbCE9a3x8bnVsbCE9aCkpaWYoXCJzdHlsZVwiPT09YSlpZihoKXtmb3IoYiBpbiBoKSFoLmhhc093blByb3BlcnR5KGIpfHxrJiZrLmhhc093blByb3BlcnR5KGIpfHwoZ3x8KGc9e30pLGdbYl09XCJcIik7Zm9yKGIgaW4gaylrLmhhc093blByb3BlcnR5KGIpJiZoW2JdIT09a1tiXSYmKGd8fChnPXt9KSxnW2JdPWtbYl0pfWVsc2UgZ3x8KGZ8fChmPVtdKSxmLnB1c2goYSxnKSksXG5nPWs7ZWxzZVwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWE/KGs9az9rLl9faHRtbDp2b2lkIDAsaD1oP2guX19odG1sOnZvaWQgMCxudWxsIT1rJiZoIT09ayYmKGY9Znx8W10pLnB1c2goYSxcIlwiK2spKTpcImNoaWxkcmVuXCI9PT1hP2g9PT1rfHxcInN0cmluZ1wiIT09dHlwZW9mIGsmJlwibnVtYmVyXCIhPT10eXBlb2Yga3x8KGY9Znx8W10pLnB1c2goYSxcIlwiK2spOlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1hJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09YSYmKHJhLmhhc093blByb3BlcnR5KGEpPyhudWxsIT1rJiZPZShlLGEpLGZ8fGg9PT1rfHwoZj1bXSkpOihmPWZ8fFtdKS5wdXNoKGEsaykpfWcmJihmPWZ8fFtdKS5wdXNoKFwic3R5bGVcIixnKTtyZXR1cm4gZn1cbmZ1bmN0aW9uIFRlKGEsYixjLGQsZSl7XCJpbnB1dFwiPT09YyYmXCJyYWRpb1wiPT09ZS50eXBlJiZudWxsIT1lLm5hbWUmJkljKGEsZSk7TWUoYyxkKTtkPU1lKGMsZSk7Zm9yKHZhciBmPTA7ZjxiLmxlbmd0aDtmKz0yKXt2YXIgZz1iW2ZdLGg9YltmKzFdO1wic3R5bGVcIj09PWc/SmUoYSxoLE5lKTpcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1nP0ZlKGEsaCk6XCJjaGlsZHJlblwiPT09Zz9HZShhLGgpOkVjKGEsZyxoLGQpfXN3aXRjaChjKXtjYXNlIFwiaW5wdXRcIjpKYyhhLGUpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOnplKGEsZSk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWU9dm9pZCAwLGI9YS5fd3JhcHBlclN0YXRlLndhc011bHRpcGxlLGEuX3dyYXBwZXJTdGF0ZS53YXNNdWx0aXBsZT0hIWUubXVsdGlwbGUsYz1lLnZhbHVlLG51bGwhPWM/dmUoYSwhIWUubXVsdGlwbGUsYywhMSk6YiE9PSEhZS5tdWx0aXBsZSYmKG51bGwhPWUuZGVmYXVsdFZhbHVlP1xudmUoYSwhIWUubXVsdGlwbGUsZS5kZWZhdWx0VmFsdWUsITApOnZlKGEsISFlLm11bHRpcGxlLGUubXVsdGlwbGU/W106XCJcIiwhMSkpfX1cbmZ1bmN0aW9uIFVlKGEsYixjLGQsZSl7c3dpdGNoKGIpe2Nhc2UgXCJpZnJhbWVcIjpjYXNlIFwib2JqZWN0XCI6TChcImxvYWRcIixhKTticmVhaztjYXNlIFwidmlkZW9cIjpjYXNlIFwiYXVkaW9cIjpmb3IoZD0wO2Q8amIubGVuZ3RoO2QrKylMKGpiW2RdLGEpO2JyZWFrO2Nhc2UgXCJzb3VyY2VcIjpMKFwiZXJyb3JcIixhKTticmVhaztjYXNlIFwiaW1nXCI6Y2FzZSBcImltYWdlXCI6Y2FzZSBcImxpbmtcIjpMKFwiZXJyb3JcIixhKTtMKFwibG9hZFwiLGEpO2JyZWFrO2Nhc2UgXCJmb3JtXCI6TChcInJlc2V0XCIsYSk7TChcInN1Ym1pdFwiLGEpO2JyZWFrO2Nhc2UgXCJkZXRhaWxzXCI6TChcInRvZ2dsZVwiLGEpO2JyZWFrO2Nhc2UgXCJpbnB1dFwiOkdjKGEsYyk7TChcImludmFsaWRcIixhKTtPZShlLFwib25DaGFuZ2VcIik7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOndlKGEsYyk7TChcImludmFsaWRcIixhKTtPZShlLFwib25DaGFuZ2VcIik7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6eWUoYSxjKSxMKFwiaW52YWxpZFwiLGEpLE9lKGUsXCJvbkNoYW5nZVwiKX1MZShiLFxuYyxOZSk7ZD1udWxsO2Zvcih2YXIgZiBpbiBjKWlmKGMuaGFzT3duUHJvcGVydHkoZikpe3ZhciBnPWNbZl07XCJjaGlsZHJlblwiPT09Zj9cInN0cmluZ1wiPT09dHlwZW9mIGc/YS50ZXh0Q29udGVudCE9PWcmJihkPVtcImNoaWxkcmVuXCIsZ10pOlwibnVtYmVyXCI9PT10eXBlb2YgZyYmYS50ZXh0Q29udGVudCE9PVwiXCIrZyYmKGQ9W1wiY2hpbGRyZW5cIixcIlwiK2ddKTpyYS5oYXNPd25Qcm9wZXJ0eShmKSYmbnVsbCE9ZyYmT2UoZSxmKX1zd2l0Y2goYil7Y2FzZSBcImlucHV0XCI6Y2MoYSk7TGMoYSxjKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpjYyhhKTtBZShhLGMpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpjYXNlIFwib3B0aW9uXCI6YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5vbkNsaWNrJiYoYS5vbmNsaWNrPXYpfXJldHVybiBkfWZ1bmN0aW9uIFZlKGEsYil7cmV0dXJuIGEubm9kZVZhbHVlIT09Yn1cbnZhciBXZT17Y3JlYXRlRWxlbWVudDpQZSxjcmVhdGVUZXh0Tm9kZTpRZSxzZXRJbml0aWFsUHJvcGVydGllczpSZSxkaWZmUHJvcGVydGllczpTZSx1cGRhdGVQcm9wZXJ0aWVzOlRlLGRpZmZIeWRyYXRlZFByb3BlcnRpZXM6VWUsZGlmZkh5ZHJhdGVkVGV4dDpWZSx3YXJuRm9yVW5tYXRjaGVkVGV4dDpmdW5jdGlvbigpe30sd2FybkZvckRlbGV0ZWRIeWRyYXRhYmxlRWxlbWVudDpmdW5jdGlvbigpe30sd2FybkZvckRlbGV0ZWRIeWRyYXRhYmxlVGV4dDpmdW5jdGlvbigpe30sd2FybkZvckluc2VydGVkSHlkcmF0ZWRFbGVtZW50OmZ1bmN0aW9uKCl7fSx3YXJuRm9ySW5zZXJ0ZWRIeWRyYXRlZFRleHQ6ZnVuY3Rpb24oKXt9LHJlc3RvcmVDb250cm9sbGVkU3RhdGU6ZnVuY3Rpb24oYSxiLGMpe3N3aXRjaChiKXtjYXNlIFwiaW5wdXRcIjpKYyhhLGMpO2I9Yy5uYW1lO2lmKFwicmFkaW9cIj09PWMudHlwZSYmbnVsbCE9Yil7Zm9yKGM9YTtjLnBhcmVudE5vZGU7KWM9Yy5wYXJlbnROb2RlO1xuYz1jLnF1ZXJ5U2VsZWN0b3JBbGwoXCJpbnB1dFtuYW1lPVwiK0pTT04uc3RyaW5naWZ5KFwiXCIrYikrJ11bdHlwZT1cInJhZGlvXCJdJyk7Zm9yKGI9MDtiPGMubGVuZ3RoO2IrKyl7dmFyIGQ9Y1tiXTtpZihkIT09YSYmZC5mb3JtPT09YS5mb3JtKXt2YXIgZT1QYShkKTtlP3ZvaWQgMDpBKFwiOTBcIik7ZGMoZCk7SmMoZCxlKX19fWJyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOnplKGEsYyk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmI9Yy52YWx1ZSxudWxsIT1iJiZ2ZShhLCEhYy5tdWx0aXBsZSxiLCExKX19fSxYZT1udWxsLFllPW51bGw7ZnVuY3Rpb24gWmUoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImJ1dHRvblwiOmNhc2UgXCJpbnB1dFwiOmNhc2UgXCJzZWxlY3RcIjpjYXNlIFwidGV4dGFyZWFcIjpyZXR1cm4hIWIuYXV0b0ZvY3VzfXJldHVybiExfVxuZnVuY3Rpb24gJGUoYSxiKXtyZXR1cm5cInRleHRhcmVhXCI9PT1hfHxcInN0cmluZ1wiPT09dHlwZW9mIGIuY2hpbGRyZW58fFwibnVtYmVyXCI9PT10eXBlb2YgYi5jaGlsZHJlbnx8XCJvYmplY3RcIj09PXR5cGVvZiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZudWxsIT09Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmXCJzdHJpbmdcIj09PXR5cGVvZiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MLl9faHRtbH12YXIgYWY9YmUsYmY9Y2UsY2Y9ZGU7ZnVuY3Rpb24gZGYoYSl7Zm9yKGE9YS5uZXh0U2libGluZzthJiYxIT09YS5ub2RlVHlwZSYmMyE9PWEubm9kZVR5cGU7KWE9YS5uZXh0U2libGluZztyZXR1cm4gYX1mdW5jdGlvbiBlZihhKXtmb3IoYT1hLmZpcnN0Q2hpbGQ7YSYmMSE9PWEubm9kZVR5cGUmJjMhPT1hLm5vZGVUeXBlOylhPWEubmV4dFNpYmxpbmc7cmV0dXJuIGF9bmV3IFNldDt2YXIgZmY9W10sZ2Y9LTE7ZnVuY3Rpb24gaGYoYSl7cmV0dXJue2N1cnJlbnQ6YX19XG5mdW5jdGlvbiBNKGEpezA+Z2Z8fChhLmN1cnJlbnQ9ZmZbZ2ZdLGZmW2dmXT1udWxsLGdmLS0pfWZ1bmN0aW9uIE4oYSxiKXtnZisrO2ZmW2dmXT1hLmN1cnJlbnQ7YS5jdXJyZW50PWJ9dmFyIGpmPWhmKGhhKSxPPWhmKCExKSxrZj1oYTtmdW5jdGlvbiBsZihhKXtyZXR1cm4gbWYoYSk/a2Y6amYuY3VycmVudH1cbmZ1bmN0aW9uIG5mKGEsYil7dmFyIGM9YS50eXBlLmNvbnRleHRUeXBlcztpZighYylyZXR1cm4gaGE7dmFyIGQ9YS5zdGF0ZU5vZGU7aWYoZCYmZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PT09YilyZXR1cm4gZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dDt2YXIgZT17fSxmO2ZvcihmIGluIGMpZVtmXT1iW2ZdO2QmJihhPWEuc3RhdGVOb2RlLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD1iLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ9ZSk7cmV0dXJuIGV9ZnVuY3Rpb24gbWYoYSl7cmV0dXJuIDI9PT1hLnRhZyYmbnVsbCE9YS50eXBlLmNoaWxkQ29udGV4dFR5cGVzfWZ1bmN0aW9uIG9mKGEpe21mKGEpJiYoTShPLGEpLE0oamYsYSkpfWZ1bmN0aW9uIHBmKGEpe00oTyxhKTtNKGpmLGEpfVxuZnVuY3Rpb24gcWYoYSxiLGMpe2pmLmN1cnJlbnQhPT1oYT9BKFwiMTY4XCIpOnZvaWQgMDtOKGpmLGIsYSk7TihPLGMsYSl9ZnVuY3Rpb24gcmYoYSxiKXt2YXIgYz1hLnN0YXRlTm9kZSxkPWEudHlwZS5jaGlsZENvbnRleHRUeXBlcztpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgYy5nZXRDaGlsZENvbnRleHQpcmV0dXJuIGI7Yz1jLmdldENoaWxkQ29udGV4dCgpO2Zvcih2YXIgZSBpbiBjKWUgaW4gZD92b2lkIDA6QShcIjEwOFwiLHRjKGEpfHxcIlVua25vd25cIixlKTtyZXR1cm4gcCh7fSxiLGMpfWZ1bmN0aW9uIHNmKGEpe2lmKCFtZihhKSlyZXR1cm4hMTt2YXIgYj1hLnN0YXRlTm9kZTtiPWImJmIuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHR8fGhhO2tmPWpmLmN1cnJlbnQ7TihqZixiLGEpO04oTyxPLmN1cnJlbnQsYSk7cmV0dXJuITB9XG5mdW5jdGlvbiB0ZihhLGIpe3ZhciBjPWEuc3RhdGVOb2RlO2M/dm9pZCAwOkEoXCIxNjlcIik7aWYoYil7dmFyIGQ9cmYoYSxrZik7Yy5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dD1kO00oTyxhKTtNKGpmLGEpO04oamYsZCxhKX1lbHNlIE0oTyxhKTtOKE8sYixhKX1cbmZ1bmN0aW9uIHVmKGEsYixjLGQpe3RoaXMudGFnPWE7dGhpcy5rZXk9Yzt0aGlzLnNpYmxpbmc9dGhpcy5jaGlsZD10aGlzLnJldHVybj10aGlzLnN0YXRlTm9kZT10aGlzLnR5cGU9bnVsbDt0aGlzLmluZGV4PTA7dGhpcy5yZWY9bnVsbDt0aGlzLnBlbmRpbmdQcm9wcz1iO3RoaXMubWVtb2l6ZWRTdGF0ZT10aGlzLnVwZGF0ZVF1ZXVlPXRoaXMubWVtb2l6ZWRQcm9wcz1udWxsO3RoaXMubW9kZT1kO3RoaXMuZWZmZWN0VGFnPTA7dGhpcy5sYXN0RWZmZWN0PXRoaXMuZmlyc3RFZmZlY3Q9dGhpcy5uZXh0RWZmZWN0PW51bGw7dGhpcy5leHBpcmF0aW9uVGltZT0wO3RoaXMuYWx0ZXJuYXRlPW51bGx9XG5mdW5jdGlvbiB2ZihhLGIsYyl7dmFyIGQ9YS5hbHRlcm5hdGU7bnVsbD09PWQ/KGQ9bmV3IHVmKGEudGFnLGIsYS5rZXksYS5tb2RlKSxkLnR5cGU9YS50eXBlLGQuc3RhdGVOb2RlPWEuc3RhdGVOb2RlLGQuYWx0ZXJuYXRlPWEsYS5hbHRlcm5hdGU9ZCk6KGQucGVuZGluZ1Byb3BzPWIsZC5lZmZlY3RUYWc9MCxkLm5leHRFZmZlY3Q9bnVsbCxkLmZpcnN0RWZmZWN0PW51bGwsZC5sYXN0RWZmZWN0PW51bGwpO2QuZXhwaXJhdGlvblRpbWU9YztkLmNoaWxkPWEuY2hpbGQ7ZC5tZW1vaXplZFByb3BzPWEubWVtb2l6ZWRQcm9wcztkLm1lbW9pemVkU3RhdGU9YS5tZW1vaXplZFN0YXRlO2QudXBkYXRlUXVldWU9YS51cGRhdGVRdWV1ZTtkLnNpYmxpbmc9YS5zaWJsaW5nO2QuaW5kZXg9YS5pbmRleDtkLnJlZj1hLnJlZjtyZXR1cm4gZH1cbmZ1bmN0aW9uIHdmKGEsYixjKXt2YXIgZD1hLnR5cGUsZT1hLmtleTthPWEucHJvcHM7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGQpdmFyIGY9ZC5wcm90b3R5cGUmJmQucHJvdG90eXBlLmlzUmVhY3RDb21wb25lbnQ/MjowO2Vsc2UgaWYoXCJzdHJpbmdcIj09PXR5cGVvZiBkKWY9NTtlbHNlIHN3aXRjaChkKXtjYXNlIGhjOnJldHVybiB4ZihhLmNoaWxkcmVuLGIsYyxlKTtjYXNlIG9jOmY9MTE7Ynw9MzticmVhaztjYXNlIGljOmY9MTE7Ynw9MjticmVhaztjYXNlIGpjOnJldHVybiBkPW5ldyB1ZigxNSxhLGUsYnw0KSxkLnR5cGU9amMsZC5leHBpcmF0aW9uVGltZT1jLGQ7Y2FzZSBxYzpmPTE2O2J8PTI7YnJlYWs7ZGVmYXVsdDphOntzd2l0Y2goXCJvYmplY3RcIj09PXR5cGVvZiBkJiZudWxsIT09ZD9kLiQkdHlwZW9mOm51bGwpe2Nhc2UgbWM6Zj0xMzticmVhayBhO2Nhc2UgbmM6Zj0xMjticmVhayBhO2Nhc2UgcGM6Zj0xNDticmVhayBhO2RlZmF1bHQ6QShcIjEzMFwiLG51bGw9PWQ/XG5kOnR5cGVvZiBkLFwiXCIpfWY9dm9pZCAwfX1iPW5ldyB1ZihmLGEsZSxiKTtiLnR5cGU9ZDtiLmV4cGlyYXRpb25UaW1lPWM7cmV0dXJuIGJ9ZnVuY3Rpb24geGYoYSxiLGMsZCl7YT1uZXcgdWYoMTAsYSxkLGIpO2EuZXhwaXJhdGlvblRpbWU9YztyZXR1cm4gYX1mdW5jdGlvbiB5ZihhLGIsYyl7YT1uZXcgdWYoNixhLG51bGwsYik7YS5leHBpcmF0aW9uVGltZT1jO3JldHVybiBhfWZ1bmN0aW9uIHpmKGEsYixjKXtiPW5ldyB1Zig0LG51bGwhPT1hLmNoaWxkcmVuP2EuY2hpbGRyZW46W10sYS5rZXksYik7Yi5leHBpcmF0aW9uVGltZT1jO2Iuc3RhdGVOb2RlPXtjb250YWluZXJJbmZvOmEuY29udGFpbmVySW5mbyxwZW5kaW5nQ2hpbGRyZW46bnVsbCxpbXBsZW1lbnRhdGlvbjphLmltcGxlbWVudGF0aW9ufTtyZXR1cm4gYn1cbmZ1bmN0aW9uIEFmKGEsYixjKXtiPW5ldyB1ZigzLG51bGwsbnVsbCxiPzM6MCk7YT17Y3VycmVudDpiLGNvbnRhaW5lckluZm86YSxwZW5kaW5nQ2hpbGRyZW46bnVsbCxlYXJsaWVzdFBlbmRpbmdUaW1lOjAsbGF0ZXN0UGVuZGluZ1RpbWU6MCxlYXJsaWVzdFN1c3BlbmRlZFRpbWU6MCxsYXRlc3RTdXNwZW5kZWRUaW1lOjAsbGF0ZXN0UGluZ2VkVGltZTowLHBlbmRpbmdDb21taXRFeHBpcmF0aW9uVGltZTowLGZpbmlzaGVkV29yazpudWxsLGNvbnRleHQ6bnVsbCxwZW5kaW5nQ29udGV4dDpudWxsLGh5ZHJhdGU6YyxyZW1haW5pbmdFeHBpcmF0aW9uVGltZTowLGZpcnN0QmF0Y2g6bnVsbCxuZXh0U2NoZWR1bGVkUm9vdDpudWxsfTtyZXR1cm4gYi5zdGF0ZU5vZGU9YX12YXIgQmY9bnVsbCxDZj1udWxsO2Z1bmN0aW9uIERmKGEpe3JldHVybiBmdW5jdGlvbihiKXt0cnl7cmV0dXJuIGEoYil9Y2F0Y2goYyl7fX19XG5mdW5jdGlvbiBFZihhKXtpZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXylyZXR1cm4hMTt2YXIgYj1fX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX187aWYoYi5pc0Rpc2FibGVkfHwhYi5zdXBwb3J0c0ZpYmVyKXJldHVybiEwO3RyeXt2YXIgYz1iLmluamVjdChhKTtCZj1EZihmdW5jdGlvbihhKXtyZXR1cm4gYi5vbkNvbW1pdEZpYmVyUm9vdChjLGEpfSk7Q2Y9RGYoZnVuY3Rpb24oYSl7cmV0dXJuIGIub25Db21taXRGaWJlclVubW91bnQoYyxhKX0pfWNhdGNoKGQpe31yZXR1cm4hMH1mdW5jdGlvbiBGZihhKXtcImZ1bmN0aW9uXCI9PT10eXBlb2YgQmYmJkJmKGEpfWZ1bmN0aW9uIEdmKGEpe1wiZnVuY3Rpb25cIj09PXR5cGVvZiBDZiYmQ2YoYSl9dmFyIEhmPSExO1xuZnVuY3Rpb24gSWYoYSl7cmV0dXJue2V4cGlyYXRpb25UaW1lOjAsYmFzZVN0YXRlOmEsZmlyc3RVcGRhdGU6bnVsbCxsYXN0VXBkYXRlOm51bGwsZmlyc3RDYXB0dXJlZFVwZGF0ZTpudWxsLGxhc3RDYXB0dXJlZFVwZGF0ZTpudWxsLGZpcnN0RWZmZWN0Om51bGwsbGFzdEVmZmVjdDpudWxsLGZpcnN0Q2FwdHVyZWRFZmZlY3Q6bnVsbCxsYXN0Q2FwdHVyZWRFZmZlY3Q6bnVsbH19ZnVuY3Rpb24gSmYoYSl7cmV0dXJue2V4cGlyYXRpb25UaW1lOmEuZXhwaXJhdGlvblRpbWUsYmFzZVN0YXRlOmEuYmFzZVN0YXRlLGZpcnN0VXBkYXRlOmEuZmlyc3RVcGRhdGUsbGFzdFVwZGF0ZTphLmxhc3RVcGRhdGUsZmlyc3RDYXB0dXJlZFVwZGF0ZTpudWxsLGxhc3RDYXB0dXJlZFVwZGF0ZTpudWxsLGZpcnN0RWZmZWN0Om51bGwsbGFzdEVmZmVjdDpudWxsLGZpcnN0Q2FwdHVyZWRFZmZlY3Q6bnVsbCxsYXN0Q2FwdHVyZWRFZmZlY3Q6bnVsbH19XG5mdW5jdGlvbiBLZihhKXtyZXR1cm57ZXhwaXJhdGlvblRpbWU6YSx0YWc6MCxwYXlsb2FkOm51bGwsY2FsbGJhY2s6bnVsbCxuZXh0Om51bGwsbmV4dEVmZmVjdDpudWxsfX1mdW5jdGlvbiBMZihhLGIsYyl7bnVsbD09PWEubGFzdFVwZGF0ZT9hLmZpcnN0VXBkYXRlPWEubGFzdFVwZGF0ZT1iOihhLmxhc3RVcGRhdGUubmV4dD1iLGEubGFzdFVwZGF0ZT1iKTtpZigwPT09YS5leHBpcmF0aW9uVGltZXx8YS5leHBpcmF0aW9uVGltZT5jKWEuZXhwaXJhdGlvblRpbWU9Y31cbmZ1bmN0aW9uIE1mKGEsYixjKXt2YXIgZD1hLmFsdGVybmF0ZTtpZihudWxsPT09ZCl7dmFyIGU9YS51cGRhdGVRdWV1ZTt2YXIgZj1udWxsO251bGw9PT1lJiYoZT1hLnVwZGF0ZVF1ZXVlPUlmKGEubWVtb2l6ZWRTdGF0ZSkpfWVsc2UgZT1hLnVwZGF0ZVF1ZXVlLGY9ZC51cGRhdGVRdWV1ZSxudWxsPT09ZT9udWxsPT09Zj8oZT1hLnVwZGF0ZVF1ZXVlPUlmKGEubWVtb2l6ZWRTdGF0ZSksZj1kLnVwZGF0ZVF1ZXVlPUlmKGQubWVtb2l6ZWRTdGF0ZSkpOmU9YS51cGRhdGVRdWV1ZT1KZihmKTpudWxsPT09ZiYmKGY9ZC51cGRhdGVRdWV1ZT1KZihlKSk7bnVsbD09PWZ8fGU9PT1mP0xmKGUsYixjKTpudWxsPT09ZS5sYXN0VXBkYXRlfHxudWxsPT09Zi5sYXN0VXBkYXRlPyhMZihlLGIsYyksTGYoZixiLGMpKTooTGYoZSxiLGMpLGYubGFzdFVwZGF0ZT1iKX1cbmZ1bmN0aW9uIE5mKGEsYixjKXt2YXIgZD1hLnVwZGF0ZVF1ZXVlO2Q9bnVsbD09PWQ/YS51cGRhdGVRdWV1ZT1JZihhLm1lbW9pemVkU3RhdGUpOk9mKGEsZCk7bnVsbD09PWQubGFzdENhcHR1cmVkVXBkYXRlP2QuZmlyc3RDYXB0dXJlZFVwZGF0ZT1kLmxhc3RDYXB0dXJlZFVwZGF0ZT1iOihkLmxhc3RDYXB0dXJlZFVwZGF0ZS5uZXh0PWIsZC5sYXN0Q2FwdHVyZWRVcGRhdGU9Yik7aWYoMD09PWQuZXhwaXJhdGlvblRpbWV8fGQuZXhwaXJhdGlvblRpbWU+YylkLmV4cGlyYXRpb25UaW1lPWN9ZnVuY3Rpb24gT2YoYSxiKXt2YXIgYz1hLmFsdGVybmF0ZTtudWxsIT09YyYmYj09PWMudXBkYXRlUXVldWUmJihiPWEudXBkYXRlUXVldWU9SmYoYikpO3JldHVybiBifVxuZnVuY3Rpb24gUGYoYSxiLGMsZCxlLGYpe3N3aXRjaChjLnRhZyl7Y2FzZSAxOnJldHVybiBhPWMucGF5bG9hZCxcImZ1bmN0aW9uXCI9PT10eXBlb2YgYT9hLmNhbGwoZixkLGUpOmE7Y2FzZSAzOmEuZWZmZWN0VGFnPWEuZWZmZWN0VGFnJi0xMDI1fDY0O2Nhc2UgMDphPWMucGF5bG9hZDtlPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2EuY2FsbChmLGQsZSk6YTtpZihudWxsPT09ZXx8dm9pZCAwPT09ZSlicmVhaztyZXR1cm4gcCh7fSxkLGUpO2Nhc2UgMjpIZj0hMH1yZXR1cm4gZH1cbmZ1bmN0aW9uIFFmKGEsYixjLGQsZSl7SGY9ITE7aWYoISgwPT09Yi5leHBpcmF0aW9uVGltZXx8Yi5leHBpcmF0aW9uVGltZT5lKSl7Yj1PZihhLGIpO2Zvcih2YXIgZj1iLmJhc2VTdGF0ZSxnPW51bGwsaD0wLGs9Yi5maXJzdFVwZGF0ZSxuPWY7bnVsbCE9PWs7KXt2YXIgcj1rLmV4cGlyYXRpb25UaW1lO2lmKHI+ZSl7aWYobnVsbD09PWcmJihnPWssZj1uKSwwPT09aHx8aD5yKWg9cn1lbHNlIG49UGYoYSxiLGssbixjLGQpLG51bGwhPT1rLmNhbGxiYWNrJiYoYS5lZmZlY3RUYWd8PTMyLGsubmV4dEVmZmVjdD1udWxsLG51bGw9PT1iLmxhc3RFZmZlY3Q/Yi5maXJzdEVmZmVjdD1iLmxhc3RFZmZlY3Q9azooYi5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9ayxiLmxhc3RFZmZlY3Q9aykpO2s9ay5uZXh0fXI9bnVsbDtmb3Ioaz1iLmZpcnN0Q2FwdHVyZWRVcGRhdGU7bnVsbCE9PWs7KXt2YXIgdz1rLmV4cGlyYXRpb25UaW1lO2lmKHc+ZSl7aWYobnVsbD09PXImJihyPWssbnVsbD09PVxuZyYmKGY9bikpLDA9PT1ofHxoPncpaD13fWVsc2Ugbj1QZihhLGIsayxuLGMsZCksbnVsbCE9PWsuY2FsbGJhY2smJihhLmVmZmVjdFRhZ3w9MzIsay5uZXh0RWZmZWN0PW51bGwsbnVsbD09PWIubGFzdENhcHR1cmVkRWZmZWN0P2IuZmlyc3RDYXB0dXJlZEVmZmVjdD1iLmxhc3RDYXB0dXJlZEVmZmVjdD1rOihiLmxhc3RDYXB0dXJlZEVmZmVjdC5uZXh0RWZmZWN0PWssYi5sYXN0Q2FwdHVyZWRFZmZlY3Q9aykpO2s9ay5uZXh0fW51bGw9PT1nJiYoYi5sYXN0VXBkYXRlPW51bGwpO251bGw9PT1yP2IubGFzdENhcHR1cmVkVXBkYXRlPW51bGw6YS5lZmZlY3RUYWd8PTMyO251bGw9PT1nJiZudWxsPT09ciYmKGY9bik7Yi5iYXNlU3RhdGU9ZjtiLmZpcnN0VXBkYXRlPWc7Yi5maXJzdENhcHR1cmVkVXBkYXRlPXI7Yi5leHBpcmF0aW9uVGltZT1oO2EubWVtb2l6ZWRTdGF0ZT1ufX1cbmZ1bmN0aW9uIFJmKGEsYil7XCJmdW5jdGlvblwiIT09dHlwZW9mIGE/QShcIjE5MVwiLGEpOnZvaWQgMDthLmNhbGwoYil9XG5mdW5jdGlvbiBTZihhLGIsYyl7bnVsbCE9PWIuZmlyc3RDYXB0dXJlZFVwZGF0ZSYmKG51bGwhPT1iLmxhc3RVcGRhdGUmJihiLmxhc3RVcGRhdGUubmV4dD1iLmZpcnN0Q2FwdHVyZWRVcGRhdGUsYi5sYXN0VXBkYXRlPWIubGFzdENhcHR1cmVkVXBkYXRlKSxiLmZpcnN0Q2FwdHVyZWRVcGRhdGU9Yi5sYXN0Q2FwdHVyZWRVcGRhdGU9bnVsbCk7YT1iLmZpcnN0RWZmZWN0O2ZvcihiLmZpcnN0RWZmZWN0PWIubGFzdEVmZmVjdD1udWxsO251bGwhPT1hOyl7dmFyIGQ9YS5jYWxsYmFjaztudWxsIT09ZCYmKGEuY2FsbGJhY2s9bnVsbCxSZihkLGMpKTthPWEubmV4dEVmZmVjdH1hPWIuZmlyc3RDYXB0dXJlZEVmZmVjdDtmb3IoYi5maXJzdENhcHR1cmVkRWZmZWN0PWIubGFzdENhcHR1cmVkRWZmZWN0PW51bGw7bnVsbCE9PWE7KWI9YS5jYWxsYmFjayxudWxsIT09YiYmKGEuY2FsbGJhY2s9bnVsbCxSZihiLGMpKSxhPWEubmV4dEVmZmVjdH1cbmZ1bmN0aW9uIFRmKGEsYil7cmV0dXJue3ZhbHVlOmEsc291cmNlOmIsc3RhY2s6dmMoYil9fXZhciBVZj1oZihudWxsKSxWZj1oZihudWxsKSxXZj1oZigwKTtmdW5jdGlvbiBYZihhKXt2YXIgYj1hLnR5cGUuX2NvbnRleHQ7TihXZixiLl9jaGFuZ2VkQml0cyxhKTtOKFZmLGIuX2N1cnJlbnRWYWx1ZSxhKTtOKFVmLGEsYSk7Yi5fY3VycmVudFZhbHVlPWEucGVuZGluZ1Byb3BzLnZhbHVlO2IuX2NoYW5nZWRCaXRzPWEuc3RhdGVOb2RlfWZ1bmN0aW9uIFlmKGEpe3ZhciBiPVdmLmN1cnJlbnQsYz1WZi5jdXJyZW50O00oVWYsYSk7TShWZixhKTtNKFdmLGEpO2E9YS50eXBlLl9jb250ZXh0O2EuX2N1cnJlbnRWYWx1ZT1jO2EuX2NoYW5nZWRCaXRzPWJ9dmFyIFpmPXt9LCRmPWhmKFpmKSxhZz1oZihaZiksYmc9aGYoWmYpO2Z1bmN0aW9uIGNnKGEpe2E9PT1aZj9BKFwiMTc0XCIpOnZvaWQgMDtyZXR1cm4gYX1cbmZ1bmN0aW9uIGRnKGEsYil7TihiZyxiLGEpO04oYWcsYSxhKTtOKCRmLFpmLGEpO3ZhciBjPWIubm9kZVR5cGU7c3dpdGNoKGMpe2Nhc2UgOTpjYXNlIDExOmI9KGI9Yi5kb2N1bWVudEVsZW1lbnQpP2IubmFtZXNwYWNlVVJJOkRlKG51bGwsXCJcIik7YnJlYWs7ZGVmYXVsdDpjPTg9PT1jP2IucGFyZW50Tm9kZTpiLGI9Yy5uYW1lc3BhY2VVUkl8fG51bGwsYz1jLnRhZ05hbWUsYj1EZShiLGMpfU0oJGYsYSk7TigkZixiLGEpfWZ1bmN0aW9uIGVnKGEpe00oJGYsYSk7TShhZyxhKTtNKGJnLGEpfWZ1bmN0aW9uIGZnKGEpe2FnLmN1cnJlbnQ9PT1hJiYoTSgkZixhKSxNKGFnLGEpKX1mdW5jdGlvbiBoZyhhLGIsYyl7dmFyIGQ9YS5tZW1vaXplZFN0YXRlO2I9YihjLGQpO2Q9bnVsbD09PWJ8fHZvaWQgMD09PWI/ZDpwKHt9LGQsYik7YS5tZW1vaXplZFN0YXRlPWQ7YT1hLnVwZGF0ZVF1ZXVlO251bGwhPT1hJiYwPT09YS5leHBpcmF0aW9uVGltZSYmKGEuYmFzZVN0YXRlPWQpfVxudmFyIGxnPXtpc01vdW50ZWQ6ZnVuY3Rpb24oYSl7cmV0dXJuKGE9YS5fcmVhY3RJbnRlcm5hbEZpYmVyKT8yPT09aWQoYSk6ITF9LGVucXVldWVTZXRTdGF0ZTpmdW5jdGlvbihhLGIsYyl7YT1hLl9yZWFjdEludGVybmFsRmliZXI7dmFyIGQ9aWcoKTtkPWpnKGQsYSk7dmFyIGU9S2YoZCk7ZS5wYXlsb2FkPWI7dm9pZCAwIT09YyYmbnVsbCE9PWMmJihlLmNhbGxiYWNrPWMpO01mKGEsZSxkKTtrZyhhLGQpfSxlbnF1ZXVlUmVwbGFjZVN0YXRlOmZ1bmN0aW9uKGEsYixjKXthPWEuX3JlYWN0SW50ZXJuYWxGaWJlcjt2YXIgZD1pZygpO2Q9amcoZCxhKTt2YXIgZT1LZihkKTtlLnRhZz0xO2UucGF5bG9hZD1iO3ZvaWQgMCE9PWMmJm51bGwhPT1jJiYoZS5jYWxsYmFjaz1jKTtNZihhLGUsZCk7a2coYSxkKX0sZW5xdWV1ZUZvcmNlVXBkYXRlOmZ1bmN0aW9uKGEsYil7YT1hLl9yZWFjdEludGVybmFsRmliZXI7dmFyIGM9aWcoKTtjPWpnKGMsYSk7dmFyIGQ9S2YoYyk7ZC50YWc9Mjt2b2lkIDAhPT1cbmImJm51bGwhPT1iJiYoZC5jYWxsYmFjaz1iKTtNZihhLGQsYyk7a2coYSxjKX19O2Z1bmN0aW9uIG1nKGEsYixjLGQsZSxmKXt2YXIgZz1hLnN0YXRlTm9kZTthPWEudHlwZTtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5zaG91bGRDb21wb25lbnRVcGRhdGU/Zy5zaG91bGRDb21wb25lbnRVcGRhdGUoYyxlLGYpOmEucHJvdG90eXBlJiZhLnByb3RvdHlwZS5pc1B1cmVSZWFjdENvbXBvbmVudD8hZWEoYixjKXx8IWVhKGQsZSk6ITB9XG5mdW5jdGlvbiBuZyhhLGIsYyxkKXthPWIuc3RhdGU7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmYi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKGMsZCk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJmIuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoYyxkKTtiLnN0YXRlIT09YSYmbGcuZW5xdWV1ZVJlcGxhY2VTdGF0ZShiLGIuc3RhdGUsbnVsbCl9XG5mdW5jdGlvbiBvZyhhLGIpe3ZhciBjPWEudHlwZSxkPWEuc3RhdGVOb2RlLGU9YS5wZW5kaW5nUHJvcHMsZj1sZihhKTtkLnByb3BzPWU7ZC5zdGF0ZT1hLm1lbW9pemVkU3RhdGU7ZC5yZWZzPWhhO2QuY29udGV4dD1uZihhLGYpO2Y9YS51cGRhdGVRdWV1ZTtudWxsIT09ZiYmKFFmKGEsZixlLGQsYiksZC5zdGF0ZT1hLm1lbW9pemVkU3RhdGUpO2Y9YS50eXBlLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcztcImZ1bmN0aW9uXCI9PT10eXBlb2YgZiYmKGhnKGEsZixlKSxkLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGMuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGQuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGQuY29tcG9uZW50V2lsbE1vdW50fHwoYz1kLnN0YXRlLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLmNvbXBvbmVudFdpbGxNb3VudCYmXG5kLmNvbXBvbmVudFdpbGxNb3VudCgpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJmQuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpLGMhPT1kLnN0YXRlJiZsZy5lbnF1ZXVlUmVwbGFjZVN0YXRlKGQsZC5zdGF0ZSxudWxsKSxmPWEudXBkYXRlUXVldWUsbnVsbCE9PWYmJihRZihhLGYsZSxkLGIpLGQuc3RhdGU9YS5tZW1vaXplZFN0YXRlKSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGQuY29tcG9uZW50RGlkTW91bnQmJihhLmVmZmVjdFRhZ3w9NCl9dmFyIHBnPUFycmF5LmlzQXJyYXk7XG5mdW5jdGlvbiBxZyhhLGIsYyl7YT1jLnJlZjtpZihudWxsIT09YSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGEmJlwib2JqZWN0XCIhPT10eXBlb2YgYSl7aWYoYy5fb3duZXIpe2M9Yy5fb3duZXI7dmFyIGQ9dm9pZCAwO2MmJigyIT09Yy50YWc/QShcIjExMFwiKTp2b2lkIDAsZD1jLnN0YXRlTm9kZSk7ZD92b2lkIDA6QShcIjE0N1wiLGEpO3ZhciBlPVwiXCIrYTtpZihudWxsIT09YiYmbnVsbCE9PWIucmVmJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5yZWYmJmIucmVmLl9zdHJpbmdSZWY9PT1lKXJldHVybiBiLnJlZjtiPWZ1bmN0aW9uKGEpe3ZhciBiPWQucmVmcz09PWhhP2QucmVmcz17fTpkLnJlZnM7bnVsbD09PWE/ZGVsZXRlIGJbZV06YltlXT1hfTtiLl9zdHJpbmdSZWY9ZTtyZXR1cm4gYn1cInN0cmluZ1wiIT09dHlwZW9mIGE/QShcIjE0OFwiKTp2b2lkIDA7Yy5fb3duZXI/dm9pZCAwOkEoXCIyNTRcIixhKX1yZXR1cm4gYX1cbmZ1bmN0aW9uIHJnKGEsYil7XCJ0ZXh0YXJlYVwiIT09YS50eXBlJiZBKFwiMzFcIixcIltvYmplY3QgT2JqZWN0XVwiPT09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGIpP1wib2JqZWN0IHdpdGgga2V5cyB7XCIrT2JqZWN0LmtleXMoYikuam9pbihcIiwgXCIpK1wifVwiOmIsXCJcIil9XG5mdW5jdGlvbiBzZyhhKXtmdW5jdGlvbiBiKGIsYyl7aWYoYSl7dmFyIGQ9Yi5sYXN0RWZmZWN0O251bGwhPT1kPyhkLm5leHRFZmZlY3Q9YyxiLmxhc3RFZmZlY3Q9Yyk6Yi5maXJzdEVmZmVjdD1iLmxhc3RFZmZlY3Q9YztjLm5leHRFZmZlY3Q9bnVsbDtjLmVmZmVjdFRhZz04fX1mdW5jdGlvbiBjKGMsZCl7aWYoIWEpcmV0dXJuIG51bGw7Zm9yKDtudWxsIT09ZDspYihjLGQpLGQ9ZC5zaWJsaW5nO3JldHVybiBudWxsfWZ1bmN0aW9uIGQoYSxiKXtmb3IoYT1uZXcgTWFwO251bGwhPT1iOyludWxsIT09Yi5rZXk/YS5zZXQoYi5rZXksYik6YS5zZXQoYi5pbmRleCxiKSxiPWIuc2libGluZztyZXR1cm4gYX1mdW5jdGlvbiBlKGEsYixjKXthPXZmKGEsYixjKTthLmluZGV4PTA7YS5zaWJsaW5nPW51bGw7cmV0dXJuIGF9ZnVuY3Rpb24gZihiLGMsZCl7Yi5pbmRleD1kO2lmKCFhKXJldHVybiBjO2Q9Yi5hbHRlcm5hdGU7aWYobnVsbCE9PWQpcmV0dXJuIGQ9ZC5pbmRleCxkPGM/KGIuZWZmZWN0VGFnPVxuMixjKTpkO2IuZWZmZWN0VGFnPTI7cmV0dXJuIGN9ZnVuY3Rpb24gZyhiKXthJiZudWxsPT09Yi5hbHRlcm5hdGUmJihiLmVmZmVjdFRhZz0yKTtyZXR1cm4gYn1mdW5jdGlvbiBoKGEsYixjLGQpe2lmKG51bGw9PT1ifHw2IT09Yi50YWcpcmV0dXJuIGI9eWYoYyxhLm1vZGUsZCksYi5yZXR1cm49YSxiO2I9ZShiLGMsZCk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiBrKGEsYixjLGQpe2lmKG51bGwhPT1iJiZiLnR5cGU9PT1jLnR5cGUpcmV0dXJuIGQ9ZShiLGMucHJvcHMsZCksZC5yZWY9cWcoYSxiLGMpLGQucmV0dXJuPWEsZDtkPXdmKGMsYS5tb2RlLGQpO2QucmVmPXFnKGEsYixjKTtkLnJldHVybj1hO3JldHVybiBkfWZ1bmN0aW9uIG4oYSxiLGMsZCl7aWYobnVsbD09PWJ8fDQhPT1iLnRhZ3x8Yi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyE9PWMuY29udGFpbmVySW5mb3x8Yi5zdGF0ZU5vZGUuaW1wbGVtZW50YXRpb24hPT1jLmltcGxlbWVudGF0aW9uKXJldHVybiBiPVxuemYoYyxhLm1vZGUsZCksYi5yZXR1cm49YSxiO2I9ZShiLGMuY2hpbGRyZW58fFtdLGQpO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gcihhLGIsYyxkLGYpe2lmKG51bGw9PT1ifHwxMCE9PWIudGFnKXJldHVybiBiPXhmKGMsYS5tb2RlLGQsZiksYi5yZXR1cm49YSxiO2I9ZShiLGMsZCk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiB3KGEsYixjKXtpZihcInN0cmluZ1wiPT09dHlwZW9mIGJ8fFwibnVtYmVyXCI9PT10eXBlb2YgYilyZXR1cm4gYj15ZihcIlwiK2IsYS5tb2RlLGMpLGIucmV0dXJuPWEsYjtpZihcIm9iamVjdFwiPT09dHlwZW9mIGImJm51bGwhPT1iKXtzd2l0Y2goYi4kJHR5cGVvZil7Y2FzZSBmYzpyZXR1cm4gYz13ZihiLGEubW9kZSxjKSxjLnJlZj1xZyhhLG51bGwsYiksYy5yZXR1cm49YSxjO2Nhc2UgZ2M6cmV0dXJuIGI9emYoYixhLm1vZGUsYyksYi5yZXR1cm49YSxifWlmKHBnKGIpfHxzYyhiKSlyZXR1cm4gYj14ZihiLGEubW9kZSxjLG51bGwpLGIucmV0dXJuPVxuYSxiO3JnKGEsYil9cmV0dXJuIG51bGx9ZnVuY3Rpb24gUChhLGIsYyxkKXt2YXIgZT1udWxsIT09Yj9iLmtleTpudWxsO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgY3x8XCJudW1iZXJcIj09PXR5cGVvZiBjKXJldHVybiBudWxsIT09ZT9udWxsOmgoYSxiLFwiXCIrYyxkKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGMmJm51bGwhPT1jKXtzd2l0Y2goYy4kJHR5cGVvZil7Y2FzZSBmYzpyZXR1cm4gYy5rZXk9PT1lP2MudHlwZT09PWhjP3IoYSxiLGMucHJvcHMuY2hpbGRyZW4sZCxlKTprKGEsYixjLGQpOm51bGw7Y2FzZSBnYzpyZXR1cm4gYy5rZXk9PT1lP24oYSxiLGMsZCk6bnVsbH1pZihwZyhjKXx8c2MoYykpcmV0dXJuIG51bGwhPT1lP251bGw6cihhLGIsYyxkLG51bGwpO3JnKGEsYyl9cmV0dXJuIG51bGx9ZnVuY3Rpb24ga2MoYSxiLGMsZCxlKXtpZihcInN0cmluZ1wiPT09dHlwZW9mIGR8fFwibnVtYmVyXCI9PT10eXBlb2YgZClyZXR1cm4gYT1hLmdldChjKXx8bnVsbCxoKGIsYSxcIlwiK2QsZSk7XG5pZihcIm9iamVjdFwiPT09dHlwZW9mIGQmJm51bGwhPT1kKXtzd2l0Y2goZC4kJHR5cGVvZil7Y2FzZSBmYzpyZXR1cm4gYT1hLmdldChudWxsPT09ZC5rZXk/YzpkLmtleSl8fG51bGwsZC50eXBlPT09aGM/cihiLGEsZC5wcm9wcy5jaGlsZHJlbixlLGQua2V5KTprKGIsYSxkLGUpO2Nhc2UgZ2M6cmV0dXJuIGE9YS5nZXQobnVsbD09PWQua2V5P2M6ZC5rZXkpfHxudWxsLG4oYixhLGQsZSl9aWYocGcoZCl8fHNjKGQpKXJldHVybiBhPWEuZ2V0KGMpfHxudWxsLHIoYixhLGQsZSxudWxsKTtyZyhiLGQpfXJldHVybiBudWxsfWZ1bmN0aW9uIEhkKGUsZyxoLGspe2Zvcih2YXIgdT1udWxsLHg9bnVsbCx0PWcscT1nPTAsbj1udWxsO251bGwhPT10JiZxPGgubGVuZ3RoO3ErKyl7dC5pbmRleD5xPyhuPXQsdD1udWxsKTpuPXQuc2libGluZzt2YXIgbD1QKGUsdCxoW3FdLGspO2lmKG51bGw9PT1sKXtudWxsPT09dCYmKHQ9bik7YnJlYWt9YSYmdCYmbnVsbD09PWwuYWx0ZXJuYXRlJiZiKGUsXG50KTtnPWYobCxnLHEpO251bGw9PT14P3U9bDp4LnNpYmxpbmc9bDt4PWw7dD1ufWlmKHE9PT1oLmxlbmd0aClyZXR1cm4gYyhlLHQpLHU7aWYobnVsbD09PXQpe2Zvcig7cTxoLmxlbmd0aDtxKyspaWYodD13KGUsaFtxXSxrKSlnPWYodCxnLHEpLG51bGw9PT14P3U9dDp4LnNpYmxpbmc9dCx4PXQ7cmV0dXJuIHV9Zm9yKHQ9ZChlLHQpO3E8aC5sZW5ndGg7cSsrKWlmKG49a2ModCxlLHEsaFtxXSxrKSlhJiZudWxsIT09bi5hbHRlcm5hdGUmJnQuZGVsZXRlKG51bGw9PT1uLmtleT9xOm4ua2V5KSxnPWYobixnLHEpLG51bGw9PT14P3U9bjp4LnNpYmxpbmc9bix4PW47YSYmdC5mb3JFYWNoKGZ1bmN0aW9uKGEpe3JldHVybiBiKGUsYSl9KTtyZXR1cm4gdX1mdW5jdGlvbiBFKGUsZyxoLGspe3ZhciB0PXNjKGgpO1wiZnVuY3Rpb25cIiE9PXR5cGVvZiB0P0EoXCIxNTBcIik6dm9pZCAwO2g9dC5jYWxsKGgpO251bGw9PWg/QShcIjE1MVwiKTp2b2lkIDA7Zm9yKHZhciB1PXQ9bnVsbCxuPWcseD1cbmc9MCx5PW51bGwsbD1oLm5leHQoKTtudWxsIT09biYmIWwuZG9uZTt4KyssbD1oLm5leHQoKSl7bi5pbmRleD54Pyh5PW4sbj1udWxsKTp5PW4uc2libGluZzt2YXIgcj1QKGUsbixsLnZhbHVlLGspO2lmKG51bGw9PT1yKXtufHwobj15KTticmVha31hJiZuJiZudWxsPT09ci5hbHRlcm5hdGUmJmIoZSxuKTtnPWYocixnLHgpO251bGw9PT11P3Q9cjp1LnNpYmxpbmc9cjt1PXI7bj15fWlmKGwuZG9uZSlyZXR1cm4gYyhlLG4pLHQ7aWYobnVsbD09PW4pe2Zvcig7IWwuZG9uZTt4KyssbD1oLm5leHQoKSlsPXcoZSxsLnZhbHVlLGspLG51bGwhPT1sJiYoZz1mKGwsZyx4KSxudWxsPT09dT90PWw6dS5zaWJsaW5nPWwsdT1sKTtyZXR1cm4gdH1mb3Iobj1kKGUsbik7IWwuZG9uZTt4KyssbD1oLm5leHQoKSlsPWtjKG4sZSx4LGwudmFsdWUsayksbnVsbCE9PWwmJihhJiZudWxsIT09bC5hbHRlcm5hdGUmJm4uZGVsZXRlKG51bGw9PT1sLmtleT94Omwua2V5KSxnPWYobCxnLHgpLG51bGw9PT1cbnU/dD1sOnUuc2libGluZz1sLHU9bCk7YSYmbi5mb3JFYWNoKGZ1bmN0aW9uKGEpe3JldHVybiBiKGUsYSl9KTtyZXR1cm4gdH1yZXR1cm4gZnVuY3Rpb24oYSxkLGYsaCl7XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09ZiYmZi50eXBlPT09aGMmJm51bGw9PT1mLmtleSYmKGY9Zi5wcm9wcy5jaGlsZHJlbik7dmFyIGs9XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09ZjtpZihrKXN3aXRjaChmLiQkdHlwZW9mKXtjYXNlIGZjOmE6e3ZhciBuPWYua2V5O2ZvcihrPWQ7bnVsbCE9PWs7KXtpZihrLmtleT09PW4paWYoMTA9PT1rLnRhZz9mLnR5cGU9PT1oYzprLnR5cGU9PT1mLnR5cGUpe2MoYSxrLnNpYmxpbmcpO2Q9ZShrLGYudHlwZT09PWhjP2YucHJvcHMuY2hpbGRyZW46Zi5wcm9wcyxoKTtkLnJlZj1xZyhhLGssZik7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX1lbHNle2MoYSxrKTticmVha31lbHNlIGIoYSxrKTtrPWsuc2libGluZ31mLnR5cGU9PT1oYz8oZD14ZihmLnByb3BzLmNoaWxkcmVuLFxuYS5tb2RlLGgsZi5rZXkpLGQucmV0dXJuPWEsYT1kKTooaD13ZihmLGEubW9kZSxoKSxoLnJlZj1xZyhhLGQsZiksaC5yZXR1cm49YSxhPWgpfXJldHVybiBnKGEpO2Nhc2UgZ2M6YTp7Zm9yKGs9Zi5rZXk7bnVsbCE9PWQ7KXtpZihkLmtleT09PWspaWYoND09PWQudGFnJiZkLnN0YXRlTm9kZS5jb250YWluZXJJbmZvPT09Zi5jb250YWluZXJJbmZvJiZkLnN0YXRlTm9kZS5pbXBsZW1lbnRhdGlvbj09PWYuaW1wbGVtZW50YXRpb24pe2MoYSxkLnNpYmxpbmcpO2Q9ZShkLGYuY2hpbGRyZW58fFtdLGgpO2QucmV0dXJuPWE7YT1kO2JyZWFrIGF9ZWxzZXtjKGEsZCk7YnJlYWt9ZWxzZSBiKGEsZCk7ZD1kLnNpYmxpbmd9ZD16ZihmLGEubW9kZSxoKTtkLnJldHVybj1hO2E9ZH1yZXR1cm4gZyhhKX1pZihcInN0cmluZ1wiPT09dHlwZW9mIGZ8fFwibnVtYmVyXCI9PT10eXBlb2YgZilyZXR1cm4gZj1cIlwiK2YsbnVsbCE9PWQmJjY9PT1kLnRhZz8oYyhhLGQuc2libGluZyksZD1lKGQsZixoKSxkLnJldHVybj1cbmEsYT1kKTooYyhhLGQpLGQ9eWYoZixhLm1vZGUsaCksZC5yZXR1cm49YSxhPWQpLGcoYSk7aWYocGcoZikpcmV0dXJuIEhkKGEsZCxmLGgpO2lmKHNjKGYpKXJldHVybiBFKGEsZCxmLGgpO2smJnJnKGEsZik7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBmKXN3aXRjaChhLnRhZyl7Y2FzZSAyOmNhc2UgMTpoPWEudHlwZSxBKFwiMTUyXCIsaC5kaXNwbGF5TmFtZXx8aC5uYW1lfHxcIkNvbXBvbmVudFwiKX1yZXR1cm4gYyhhLGQpfX12YXIgdGc9c2coITApLHVnPXNnKCExKSx2Zz1udWxsLHdnPW51bGwseGc9ITE7ZnVuY3Rpb24geWcoYSxiKXt2YXIgYz1uZXcgdWYoNSxudWxsLG51bGwsMCk7Yy50eXBlPVwiREVMRVRFRFwiO2Muc3RhdGVOb2RlPWI7Yy5yZXR1cm49YTtjLmVmZmVjdFRhZz04O251bGwhPT1hLmxhc3RFZmZlY3Q/KGEubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWMsYS5sYXN0RWZmZWN0PWMpOmEuZmlyc3RFZmZlY3Q9YS5sYXN0RWZmZWN0PWN9XG5mdW5jdGlvbiB6ZyhhLGIpe3N3aXRjaChhLnRhZyl7Y2FzZSA1OnZhciBjPWEudHlwZTtiPTEhPT1iLm5vZGVUeXBlfHxjLnRvTG93ZXJDYXNlKCkhPT1iLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk/bnVsbDpiO3JldHVybiBudWxsIT09Yj8oYS5zdGF0ZU5vZGU9YiwhMCk6ITE7Y2FzZSA2OnJldHVybiBiPVwiXCI9PT1hLnBlbmRpbmdQcm9wc3x8MyE9PWIubm9kZVR5cGU/bnVsbDpiLG51bGwhPT1iPyhhLnN0YXRlTm9kZT1iLCEwKTohMTtkZWZhdWx0OnJldHVybiExfX1mdW5jdGlvbiBBZyhhKXtpZih4Zyl7dmFyIGI9d2c7aWYoYil7dmFyIGM9YjtpZighemcoYSxiKSl7Yj1kZihjKTtpZighYnx8IXpnKGEsYikpe2EuZWZmZWN0VGFnfD0yO3hnPSExO3ZnPWE7cmV0dXJufXlnKHZnLGMpfXZnPWE7d2c9ZWYoYil9ZWxzZSBhLmVmZmVjdFRhZ3w9Mix4Zz0hMSx2Zz1hfX1cbmZ1bmN0aW9uIEJnKGEpe2ZvcihhPWEucmV0dXJuO251bGwhPT1hJiY1IT09YS50YWcmJjMhPT1hLnRhZzspYT1hLnJldHVybjt2Zz1hfWZ1bmN0aW9uIENnKGEpe2lmKGEhPT12ZylyZXR1cm4hMTtpZigheGcpcmV0dXJuIEJnKGEpLHhnPSEwLCExO3ZhciBiPWEudHlwZTtpZig1IT09YS50YWd8fFwiaGVhZFwiIT09YiYmXCJib2R5XCIhPT1iJiYhJGUoYixhLm1lbW9pemVkUHJvcHMpKWZvcihiPXdnO2I7KXlnKGEsYiksYj1kZihiKTtCZyhhKTt3Zz12Zz9kZihhLnN0YXRlTm9kZSk6bnVsbDtyZXR1cm4hMH1mdW5jdGlvbiBEZygpe3dnPXZnPW51bGw7eGc9ITF9ZnVuY3Rpb24gUShhLGIsYyl7RWcoYSxiLGMsYi5leHBpcmF0aW9uVGltZSl9ZnVuY3Rpb24gRWcoYSxiLGMsZCl7Yi5jaGlsZD1udWxsPT09YT91ZyhiLG51bGwsYyxkKTp0ZyhiLGEuY2hpbGQsYyxkKX1cbmZ1bmN0aW9uIEZnKGEsYil7dmFyIGM9Yi5yZWY7aWYobnVsbD09PWEmJm51bGwhPT1jfHxudWxsIT09YSYmYS5yZWYhPT1jKWIuZWZmZWN0VGFnfD0xMjh9ZnVuY3Rpb24gR2coYSxiLGMsZCxlKXtGZyhhLGIpO3ZhciBmPTAhPT0oYi5lZmZlY3RUYWcmNjQpO2lmKCFjJiYhZilyZXR1cm4gZCYmdGYoYiwhMSksUihhLGIpO2M9Yi5zdGF0ZU5vZGU7ZWMuY3VycmVudD1iO3ZhciBnPWY/bnVsbDpjLnJlbmRlcigpO2IuZWZmZWN0VGFnfD0xO2YmJihFZyhhLGIsbnVsbCxlKSxiLmNoaWxkPW51bGwpO0VnKGEsYixnLGUpO2IubWVtb2l6ZWRTdGF0ZT1jLnN0YXRlO2IubWVtb2l6ZWRQcm9wcz1jLnByb3BzO2QmJnRmKGIsITApO3JldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gSGcoYSl7dmFyIGI9YS5zdGF0ZU5vZGU7Yi5wZW5kaW5nQ29udGV4dD9xZihhLGIucGVuZGluZ0NvbnRleHQsYi5wZW5kaW5nQ29udGV4dCE9PWIuY29udGV4dCk6Yi5jb250ZXh0JiZxZihhLGIuY29udGV4dCwhMSk7ZGcoYSxiLmNvbnRhaW5lckluZm8pfVxuZnVuY3Rpb24gSWcoYSxiLGMsZCl7dmFyIGU9YS5jaGlsZDtudWxsIT09ZSYmKGUucmV0dXJuPWEpO2Zvcig7bnVsbCE9PWU7KXtzd2l0Y2goZS50YWcpe2Nhc2UgMTI6dmFyIGY9ZS5zdGF0ZU5vZGV8MDtpZihlLnR5cGU9PT1iJiYwIT09KGYmYykpe2ZvcihmPWU7bnVsbCE9PWY7KXt2YXIgZz1mLmFsdGVybmF0ZTtpZigwPT09Zi5leHBpcmF0aW9uVGltZXx8Zi5leHBpcmF0aW9uVGltZT5kKWYuZXhwaXJhdGlvblRpbWU9ZCxudWxsIT09ZyYmKDA9PT1nLmV4cGlyYXRpb25UaW1lfHxnLmV4cGlyYXRpb25UaW1lPmQpJiYoZy5leHBpcmF0aW9uVGltZT1kKTtlbHNlIGlmKG51bGwhPT1nJiYoMD09PWcuZXhwaXJhdGlvblRpbWV8fGcuZXhwaXJhdGlvblRpbWU+ZCkpZy5leHBpcmF0aW9uVGltZT1kO2Vsc2UgYnJlYWs7Zj1mLnJldHVybn1mPW51bGx9ZWxzZSBmPWUuY2hpbGQ7YnJlYWs7Y2FzZSAxMzpmPWUudHlwZT09PWEudHlwZT9udWxsOmUuY2hpbGQ7YnJlYWs7ZGVmYXVsdDpmPVxuZS5jaGlsZH1pZihudWxsIT09ZilmLnJldHVybj1lO2Vsc2UgZm9yKGY9ZTtudWxsIT09Zjspe2lmKGY9PT1hKXtmPW51bGw7YnJlYWt9ZT1mLnNpYmxpbmc7aWYobnVsbCE9PWUpe2UucmV0dXJuPWYucmV0dXJuO2Y9ZTticmVha31mPWYucmV0dXJufWU9Zn19XG5mdW5jdGlvbiBKZyhhLGIsYyl7dmFyIGQ9Yi50eXBlLl9jb250ZXh0LGU9Yi5wZW5kaW5nUHJvcHMsZj1iLm1lbW9pemVkUHJvcHMsZz0hMDtpZihPLmN1cnJlbnQpZz0hMTtlbHNlIGlmKGY9PT1lKXJldHVybiBiLnN0YXRlTm9kZT0wLFhmKGIpLFIoYSxiKTt2YXIgaD1lLnZhbHVlO2IubWVtb2l6ZWRQcm9wcz1lO2lmKG51bGw9PT1mKWg9MTA3Mzc0MTgyMztlbHNlIGlmKGYudmFsdWU9PT1lLnZhbHVlKXtpZihmLmNoaWxkcmVuPT09ZS5jaGlsZHJlbiYmZylyZXR1cm4gYi5zdGF0ZU5vZGU9MCxYZihiKSxSKGEsYik7aD0wfWVsc2V7dmFyIGs9Zi52YWx1ZTtpZihrPT09aCYmKDAhPT1rfHwxL2s9PT0xL2gpfHxrIT09ayYmaCE9PWgpe2lmKGYuY2hpbGRyZW49PT1lLmNoaWxkcmVuJiZnKXJldHVybiBiLnN0YXRlTm9kZT0wLFhmKGIpLFIoYSxiKTtoPTB9ZWxzZSBpZihoPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLl9jYWxjdWxhdGVDaGFuZ2VkQml0cz9kLl9jYWxjdWxhdGVDaGFuZ2VkQml0cyhrLFxuaCk6MTA3Mzc0MTgyMyxofD0wLDA9PT1oKXtpZihmLmNoaWxkcmVuPT09ZS5jaGlsZHJlbiYmZylyZXR1cm4gYi5zdGF0ZU5vZGU9MCxYZihiKSxSKGEsYil9ZWxzZSBJZyhiLGQsaCxjKX1iLnN0YXRlTm9kZT1oO1hmKGIpO1EoYSxiLGUuY2hpbGRyZW4pO3JldHVybiBiLmNoaWxkfWZ1bmN0aW9uIFIoYSxiKXtudWxsIT09YSYmYi5jaGlsZCE9PWEuY2hpbGQ/QShcIjE1M1wiKTp2b2lkIDA7aWYobnVsbCE9PWIuY2hpbGQpe2E9Yi5jaGlsZDt2YXIgYz12ZihhLGEucGVuZGluZ1Byb3BzLGEuZXhwaXJhdGlvblRpbWUpO2IuY2hpbGQ9Yztmb3IoYy5yZXR1cm49YjtudWxsIT09YS5zaWJsaW5nOylhPWEuc2libGluZyxjPWMuc2libGluZz12ZihhLGEucGVuZGluZ1Byb3BzLGEuZXhwaXJhdGlvblRpbWUpLGMucmV0dXJuPWI7Yy5zaWJsaW5nPW51bGx9cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiBLZyhhLGIsYyl7aWYoMD09PWIuZXhwaXJhdGlvblRpbWV8fGIuZXhwaXJhdGlvblRpbWU+Yyl7c3dpdGNoKGIudGFnKXtjYXNlIDM6SGcoYik7YnJlYWs7Y2FzZSAyOnNmKGIpO2JyZWFrO2Nhc2UgNDpkZyhiLGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pO2JyZWFrO2Nhc2UgMTM6WGYoYil9cmV0dXJuIG51bGx9c3dpdGNoKGIudGFnKXtjYXNlIDA6bnVsbCE9PWE/QShcIjE1NVwiKTp2b2lkIDA7dmFyIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZj1sZihiKTtmPW5mKGIsZik7ZD1kKGUsZik7Yi5lZmZlY3RUYWd8PTE7XCJvYmplY3RcIj09PXR5cGVvZiBkJiZudWxsIT09ZCYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGQucmVuZGVyJiZ2b2lkIDA9PT1kLiQkdHlwZW9mPyhmPWIudHlwZSxiLnRhZz0yLGIubWVtb2l6ZWRTdGF0ZT1udWxsIT09ZC5zdGF0ZSYmdm9pZCAwIT09ZC5zdGF0ZT9kLnN0YXRlOm51bGwsZj1mLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyxcImZ1bmN0aW9uXCI9PT1cbnR5cGVvZiBmJiZoZyhiLGYsZSksZT1zZihiKSxkLnVwZGF0ZXI9bGcsYi5zdGF0ZU5vZGU9ZCxkLl9yZWFjdEludGVybmFsRmliZXI9YixvZyhiLGMpLGE9R2coYSxiLCEwLGUsYykpOihiLnRhZz0xLFEoYSxiLGQpLGIubWVtb2l6ZWRQcm9wcz1lLGE9Yi5jaGlsZCk7cmV0dXJuIGE7Y2FzZSAxOnJldHVybiBlPWIudHlwZSxjPWIucGVuZGluZ1Byb3BzLE8uY3VycmVudHx8Yi5tZW1vaXplZFByb3BzIT09Yz8oZD1sZihiKSxkPW5mKGIsZCksZT1lKGMsZCksYi5lZmZlY3RUYWd8PTEsUShhLGIsZSksYi5tZW1vaXplZFByb3BzPWMsYT1iLmNoaWxkKTphPVIoYSxiKSxhO2Nhc2UgMjplPXNmKGIpO2lmKG51bGw9PT1hKWlmKG51bGw9PT1iLnN0YXRlTm9kZSl7dmFyIGc9Yi5wZW5kaW5nUHJvcHMsaD1iLnR5cGU7ZD1sZihiKTt2YXIgaz0yPT09Yi50YWcmJm51bGwhPWIudHlwZS5jb250ZXh0VHlwZXM7Zj1rP25mKGIsZCk6aGE7Zz1uZXcgaChnLGYpO2IubWVtb2l6ZWRTdGF0ZT1udWxsIT09XG5nLnN0YXRlJiZ2b2lkIDAhPT1nLnN0YXRlP2cuc3RhdGU6bnVsbDtnLnVwZGF0ZXI9bGc7Yi5zdGF0ZU5vZGU9ZztnLl9yZWFjdEludGVybmFsRmliZXI9YjtrJiYoaz1iLnN0YXRlTm9kZSxrLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9ZCxrLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0PWYpO29nKGIsYyk7ZD0hMH1lbHNle2g9Yi50eXBlO2Q9Yi5zdGF0ZU5vZGU7az1iLm1lbW9pemVkUHJvcHM7Zj1iLnBlbmRpbmdQcm9wcztkLnByb3BzPWs7dmFyIG49ZC5jb250ZXh0O2c9bGYoYik7Zz1uZihiLGcpO3ZhciByPWguZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzOyhoPVwiZnVuY3Rpb25cIj09PXR5cGVvZiByfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSl8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBkLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZC5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzfHxcbihrIT09Znx8biE9PWcpJiZuZyhiLGQsZixnKTtIZj0hMTt2YXIgdz1iLm1lbW9pemVkU3RhdGU7bj1kLnN0YXRlPXc7dmFyIFA9Yi51cGRhdGVRdWV1ZTtudWxsIT09UCYmKFFmKGIsUCxmLGQsYyksbj1iLm1lbW9pemVkU3RhdGUpO2shPT1mfHx3IT09bnx8Ty5jdXJyZW50fHxIZj8oXCJmdW5jdGlvblwiPT09dHlwZW9mIHImJihoZyhiLHIsZiksbj1iLm1lbW9pemVkU3RhdGUpLChrPUhmfHxtZyhiLGssZix3LG4sZykpPyhofHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZC5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZC5jb21wb25lbnRXaWxsTW91bnR8fChcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5jb21wb25lbnRXaWxsTW91bnQmJmQuY29tcG9uZW50V2lsbE1vdW50KCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGQuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmZC5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50KCkpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLmNvbXBvbmVudERpZE1vdW50JiZcbihiLmVmZmVjdFRhZ3w9NCkpOihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5jb21wb25lbnREaWRNb3VudCYmKGIuZWZmZWN0VGFnfD00KSxiLm1lbW9pemVkUHJvcHM9ZixiLm1lbW9pemVkU3RhdGU9biksZC5wcm9wcz1mLGQuc3RhdGU9bixkLmNvbnRleHQ9ZyxkPWspOihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5jb21wb25lbnREaWRNb3VudCYmKGIuZWZmZWN0VGFnfD00KSxkPSExKX1lbHNlIGg9Yi50eXBlLGQ9Yi5zdGF0ZU5vZGUsZj1iLm1lbW9pemVkUHJvcHMsaz1iLnBlbmRpbmdQcm9wcyxkLnByb3BzPWYsbj1kLmNvbnRleHQsZz1sZihiKSxnPW5mKGIsZykscj1oLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcywoaD1cImZ1bmN0aW9uXCI9PT10eXBlb2Ygcnx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGQuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUpfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZC5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGQuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc3x8XG4oZiE9PWt8fG4hPT1nKSYmbmcoYixkLGssZyksSGY9ITEsbj1iLm1lbW9pemVkU3RhdGUsdz1kLnN0YXRlPW4sUD1iLnVwZGF0ZVF1ZXVlLG51bGwhPT1QJiYoUWYoYixQLGssZCxjKSx3PWIubWVtb2l6ZWRTdGF0ZSksZiE9PWt8fG4hPT13fHxPLmN1cnJlbnR8fEhmPyhcImZ1bmN0aW9uXCI9PT10eXBlb2YgciYmKGhnKGIscixrKSx3PWIubWVtb2l6ZWRTdGF0ZSksKHI9SGZ8fG1nKGIsZixrLG4sdyxnKSk/KGh8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBkLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZC5jb21wb25lbnRXaWxsVXBkYXRlfHwoXCJmdW5jdGlvblwiPT09dHlwZW9mIGQuY29tcG9uZW50V2lsbFVwZGF0ZSYmZC5jb21wb25lbnRXaWxsVXBkYXRlKGssdyxnKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSYmZC5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZShrLHcsZykpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLmNvbXBvbmVudERpZFVwZGF0ZSYmXG4oYi5lZmZlY3RUYWd8PTQpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlJiYoYi5lZmZlY3RUYWd8PTI1NikpOihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZC5jb21wb25lbnREaWRVcGRhdGV8fGY9PT1hLm1lbW9pemVkUHJvcHMmJm49PT1hLm1lbW9pemVkU3RhdGV8fChiLmVmZmVjdFRhZ3w9NCksXCJmdW5jdGlvblwiIT09dHlwZW9mIGQuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fGY9PT1hLm1lbW9pemVkUHJvcHMmJm49PT1hLm1lbW9pemVkU3RhdGV8fChiLmVmZmVjdFRhZ3w9MjU2KSxiLm1lbW9pemVkUHJvcHM9ayxiLm1lbW9pemVkU3RhdGU9dyksZC5wcm9wcz1rLGQuc3RhdGU9dyxkLmNvbnRleHQ9ZyxkPXIpOihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZC5jb21wb25lbnREaWRVcGRhdGV8fGY9PT1hLm1lbW9pemVkUHJvcHMmJm49PT1hLm1lbW9pemVkU3RhdGV8fChiLmVmZmVjdFRhZ3w9NCksXCJmdW5jdGlvblwiIT09dHlwZW9mIGQuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fFxuZj09PWEubWVtb2l6ZWRQcm9wcyYmbj09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZWZmZWN0VGFnfD0yNTYpLGQ9ITEpO3JldHVybiBHZyhhLGIsZCxlLGMpO2Nhc2UgMzpIZyhiKTtlPWIudXBkYXRlUXVldWU7aWYobnVsbCE9PWUpaWYoZD1iLm1lbW9pemVkU3RhdGUsZD1udWxsIT09ZD9kLmVsZW1lbnQ6bnVsbCxRZihiLGUsYi5wZW5kaW5nUHJvcHMsbnVsbCxjKSxlPWIubWVtb2l6ZWRTdGF0ZS5lbGVtZW50LGU9PT1kKURnKCksYT1SKGEsYik7ZWxzZXtkPWIuc3RhdGVOb2RlO2lmKGQ9KG51bGw9PT1hfHxudWxsPT09YS5jaGlsZCkmJmQuaHlkcmF0ZSl3Zz1lZihiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKSx2Zz1iLGQ9eGc9ITA7ZD8oYi5lZmZlY3RUYWd8PTIsYi5jaGlsZD11ZyhiLG51bGwsZSxjKSk6KERnKCksUShhLGIsZSkpO2E9Yi5jaGlsZH1lbHNlIERnKCksYT1SKGEsYik7cmV0dXJuIGE7Y2FzZSA1OmE6e2NnKGJnLmN1cnJlbnQpO2U9Y2coJGYuY3VycmVudCk7ZD1EZShlLFxuYi50eXBlKTtlIT09ZCYmKE4oYWcsYixiKSxOKCRmLGQsYikpO251bGw9PT1hJiZBZyhiKTtlPWIudHlwZTtrPWIubWVtb2l6ZWRQcm9wcztkPWIucGVuZGluZ1Byb3BzO2Y9bnVsbCE9PWE/YS5tZW1vaXplZFByb3BzOm51bGw7aWYoIU8uY3VycmVudCYmaz09PWQpe2lmKGs9Yi5tb2RlJjEmJiEhZC5oaWRkZW4pYi5leHBpcmF0aW9uVGltZT0xMDczNzQxODIzO2lmKCFrfHwxMDczNzQxODIzIT09Yyl7YT1SKGEsYik7YnJlYWsgYX19az1kLmNoaWxkcmVuOyRlKGUsZCk/az1udWxsOmYmJiRlKGUsZikmJihiLmVmZmVjdFRhZ3w9MTYpO0ZnKGEsYik7MTA3Mzc0MTgyMyE9PWMmJmIubW9kZSYxJiZkLmhpZGRlbj8oYi5leHBpcmF0aW9uVGltZT0xMDczNzQxODIzLGIubWVtb2l6ZWRQcm9wcz1kLGE9bnVsbCk6KFEoYSxiLGspLGIubWVtb2l6ZWRQcm9wcz1kLGE9Yi5jaGlsZCl9cmV0dXJuIGE7Y2FzZSA2OnJldHVybiBudWxsPT09YSYmQWcoYiksYi5tZW1vaXplZFByb3BzPWIucGVuZGluZ1Byb3BzLFxubnVsbDtjYXNlIDE2OnJldHVybiBudWxsO2Nhc2UgNDpyZXR1cm4gZGcoYixiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKSxlPWIucGVuZGluZ1Byb3BzLE8uY3VycmVudHx8Yi5tZW1vaXplZFByb3BzIT09ZT8obnVsbD09PWE/Yi5jaGlsZD10ZyhiLG51bGwsZSxjKTpRKGEsYixlKSxiLm1lbW9pemVkUHJvcHM9ZSxhPWIuY2hpbGQpOmE9UihhLGIpLGE7Y2FzZSAxNDpyZXR1cm4gZT1iLnR5cGUucmVuZGVyLGM9Yi5wZW5kaW5nUHJvcHMsZD1iLnJlZixPLmN1cnJlbnR8fGIubWVtb2l6ZWRQcm9wcyE9PWN8fGQhPT0obnVsbCE9PWE/YS5yZWY6bnVsbCk/KGU9ZShjLGQpLFEoYSxiLGUpLGIubWVtb2l6ZWRQcm9wcz1jLGE9Yi5jaGlsZCk6YT1SKGEsYiksYTtjYXNlIDEwOnJldHVybiBjPWIucGVuZGluZ1Byb3BzLE8uY3VycmVudHx8Yi5tZW1vaXplZFByb3BzIT09Yz8oUShhLGIsYyksYi5tZW1vaXplZFByb3BzPWMsYT1iLmNoaWxkKTphPVIoYSxiKSxhO2Nhc2UgMTE6cmV0dXJuIGM9XG5iLnBlbmRpbmdQcm9wcy5jaGlsZHJlbixPLmN1cnJlbnR8fG51bGwhPT1jJiZiLm1lbW9pemVkUHJvcHMhPT1jPyhRKGEsYixjKSxiLm1lbW9pemVkUHJvcHM9YyxhPWIuY2hpbGQpOmE9UihhLGIpLGE7Y2FzZSAxNTpyZXR1cm4gYz1iLnBlbmRpbmdQcm9wcyxiLm1lbW9pemVkUHJvcHM9PT1jP2E9UihhLGIpOihRKGEsYixjLmNoaWxkcmVuKSxiLm1lbW9pemVkUHJvcHM9YyxhPWIuY2hpbGQpLGE7Y2FzZSAxMzpyZXR1cm4gSmcoYSxiLGMpO2Nhc2UgMTI6YTppZihkPWIudHlwZSxmPWIucGVuZGluZ1Byb3BzLGs9Yi5tZW1vaXplZFByb3BzLGU9ZC5fY3VycmVudFZhbHVlLGc9ZC5fY2hhbmdlZEJpdHMsTy5jdXJyZW50fHwwIT09Z3x8ayE9PWYpe2IubWVtb2l6ZWRQcm9wcz1mO2g9Zi51bnN0YWJsZV9vYnNlcnZlZEJpdHM7aWYodm9pZCAwPT09aHx8bnVsbD09PWgpaD0xMDczNzQxODIzO2Iuc3RhdGVOb2RlPWg7aWYoMCE9PShnJmgpKUlnKGIsZCxnLGMpO2Vsc2UgaWYoaz09PWYpe2E9XG5SKGEsYik7YnJlYWsgYX1jPWYuY2hpbGRyZW47Yz1jKGUpO2IuZWZmZWN0VGFnfD0xO1EoYSxiLGMpO2E9Yi5jaGlsZH1lbHNlIGE9UihhLGIpO3JldHVybiBhO2RlZmF1bHQ6QShcIjE1NlwiKX19ZnVuY3Rpb24gTGcoYSl7YS5lZmZlY3RUYWd8PTR9dmFyIFBnPXZvaWQgMCxRZz12b2lkIDAsUmc9dm9pZCAwO1BnPWZ1bmN0aW9uKCl7fTtRZz1mdW5jdGlvbihhLGIsYyl7KGIudXBkYXRlUXVldWU9YykmJkxnKGIpfTtSZz1mdW5jdGlvbihhLGIsYyxkKXtjIT09ZCYmTGcoYil9O1xuZnVuY3Rpb24gU2coYSxiKXt2YXIgYz1iLnBlbmRpbmdQcm9wcztzd2l0Y2goYi50YWcpe2Nhc2UgMTpyZXR1cm4gbnVsbDtjYXNlIDI6cmV0dXJuIG9mKGIpLG51bGw7Y2FzZSAzOmVnKGIpO3BmKGIpO3ZhciBkPWIuc3RhdGVOb2RlO2QucGVuZGluZ0NvbnRleHQmJihkLmNvbnRleHQ9ZC5wZW5kaW5nQ29udGV4dCxkLnBlbmRpbmdDb250ZXh0PW51bGwpO2lmKG51bGw9PT1hfHxudWxsPT09YS5jaGlsZClDZyhiKSxiLmVmZmVjdFRhZyY9LTM7UGcoYik7cmV0dXJuIG51bGw7Y2FzZSA1OmZnKGIpO2Q9Y2coYmcuY3VycmVudCk7dmFyIGU9Yi50eXBlO2lmKG51bGwhPT1hJiZudWxsIT1iLnN0YXRlTm9kZSl7dmFyIGY9YS5tZW1vaXplZFByb3BzLGc9Yi5zdGF0ZU5vZGUsaD1jZygkZi5jdXJyZW50KTtnPVNlKGcsZSxmLGMsZCk7UWcoYSxiLGcsZSxmLGMsZCxoKTthLnJlZiE9PWIucmVmJiYoYi5lZmZlY3RUYWd8PTEyOCl9ZWxzZXtpZighYylyZXR1cm4gbnVsbD09PWIuc3RhdGVOb2RlP1xuQShcIjE2NlwiKTp2b2lkIDAsbnVsbDthPWNnKCRmLmN1cnJlbnQpO2lmKENnKGIpKWM9Yi5zdGF0ZU5vZGUsZT1iLnR5cGUsZj1iLm1lbW9pemVkUHJvcHMsY1tDXT1iLGNbTWFdPWYsZD1VZShjLGUsZixhLGQpLGIudXBkYXRlUXVldWU9ZCxudWxsIT09ZCYmTGcoYik7ZWxzZXthPVBlKGUsYyxkLGEpO2FbQ109YjthW01hXT1jO2E6Zm9yKGY9Yi5jaGlsZDtudWxsIT09Zjspe2lmKDU9PT1mLnRhZ3x8Nj09PWYudGFnKWEuYXBwZW5kQ2hpbGQoZi5zdGF0ZU5vZGUpO2Vsc2UgaWYoNCE9PWYudGFnJiZudWxsIT09Zi5jaGlsZCl7Zi5jaGlsZC5yZXR1cm49ZjtmPWYuY2hpbGQ7Y29udGludWV9aWYoZj09PWIpYnJlYWs7Zm9yKDtudWxsPT09Zi5zaWJsaW5nOyl7aWYobnVsbD09PWYucmV0dXJufHxmLnJldHVybj09PWIpYnJlYWsgYTtmPWYucmV0dXJufWYuc2libGluZy5yZXR1cm49Zi5yZXR1cm47Zj1mLnNpYmxpbmd9UmUoYSxlLGMsZCk7WmUoZSxjKSYmTGcoYik7Yi5zdGF0ZU5vZGU9XG5hfW51bGwhPT1iLnJlZiYmKGIuZWZmZWN0VGFnfD0xMjgpfXJldHVybiBudWxsO2Nhc2UgNjppZihhJiZudWxsIT1iLnN0YXRlTm9kZSlSZyhhLGIsYS5tZW1vaXplZFByb3BzLGMpO2Vsc2V7aWYoXCJzdHJpbmdcIiE9PXR5cGVvZiBjKXJldHVybiBudWxsPT09Yi5zdGF0ZU5vZGU/QShcIjE2NlwiKTp2b2lkIDAsbnVsbDtkPWNnKGJnLmN1cnJlbnQpO2NnKCRmLmN1cnJlbnQpO0NnKGIpPyhkPWIuc3RhdGVOb2RlLGM9Yi5tZW1vaXplZFByb3BzLGRbQ109YixWZShkLGMpJiZMZyhiKSk6KGQ9UWUoYyxkKSxkW0NdPWIsYi5zdGF0ZU5vZGU9ZCl9cmV0dXJuIG51bGw7Y2FzZSAxNDpyZXR1cm4gbnVsbDtjYXNlIDE2OnJldHVybiBudWxsO2Nhc2UgMTA6cmV0dXJuIG51bGw7Y2FzZSAxMTpyZXR1cm4gbnVsbDtjYXNlIDE1OnJldHVybiBudWxsO2Nhc2UgNDpyZXR1cm4gZWcoYiksUGcoYiksbnVsbDtjYXNlIDEzOnJldHVybiBZZihiKSxudWxsO2Nhc2UgMTI6cmV0dXJuIG51bGw7Y2FzZSAwOkEoXCIxNjdcIik7XG5kZWZhdWx0OkEoXCIxNTZcIil9fWZ1bmN0aW9uIFRnKGEsYil7dmFyIGM9Yi5zb3VyY2U7bnVsbD09PWIuc3RhY2smJm51bGwhPT1jJiZ2YyhjKTtudWxsIT09YyYmdGMoYyk7Yj1iLnZhbHVlO251bGwhPT1hJiYyPT09YS50YWcmJnRjKGEpO3RyeXtiJiZiLnN1cHByZXNzUmVhY3RFcnJvckxvZ2dpbmd8fGNvbnNvbGUuZXJyb3IoYil9Y2F0Y2goZCl7ZCYmZC5zdXBwcmVzc1JlYWN0RXJyb3JMb2dnaW5nfHxjb25zb2xlLmVycm9yKGQpfX1mdW5jdGlvbiBVZyhhKXt2YXIgYj1hLnJlZjtpZihudWxsIT09YilpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYil0cnl7YihudWxsKX1jYXRjaChjKXtWZyhhLGMpfWVsc2UgYi5jdXJyZW50PW51bGx9XG5mdW5jdGlvbiBXZyhhKXtcImZ1bmN0aW9uXCI9PT10eXBlb2YgR2YmJkdmKGEpO3N3aXRjaChhLnRhZyl7Y2FzZSAyOlVnKGEpO3ZhciBiPWEuc3RhdGVOb2RlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBiLmNvbXBvbmVudFdpbGxVbm1vdW50KXRyeXtiLnByb3BzPWEubWVtb2l6ZWRQcm9wcyxiLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSxiLmNvbXBvbmVudFdpbGxVbm1vdW50KCl9Y2F0Y2goYyl7VmcoYSxjKX1icmVhaztjYXNlIDU6VWcoYSk7YnJlYWs7Y2FzZSA0OlhnKGEpfX1mdW5jdGlvbiBZZyhhKXtyZXR1cm4gNT09PWEudGFnfHwzPT09YS50YWd8fDQ9PT1hLnRhZ31cbmZ1bmN0aW9uIFpnKGEpe2E6e2Zvcih2YXIgYj1hLnJldHVybjtudWxsIT09Yjspe2lmKFlnKGIpKXt2YXIgYz1iO2JyZWFrIGF9Yj1iLnJldHVybn1BKFwiMTYwXCIpO2M9dm9pZCAwfXZhciBkPWI9dm9pZCAwO3N3aXRjaChjLnRhZyl7Y2FzZSA1OmI9Yy5zdGF0ZU5vZGU7ZD0hMTticmVhaztjYXNlIDM6Yj1jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2Q9ITA7YnJlYWs7Y2FzZSA0OmI9Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztkPSEwO2JyZWFrO2RlZmF1bHQ6QShcIjE2MVwiKX1jLmVmZmVjdFRhZyYxNiYmKEdlKGIsXCJcIiksYy5lZmZlY3RUYWcmPS0xNyk7YTpiOmZvcihjPWE7Oyl7Zm9yKDtudWxsPT09Yy5zaWJsaW5nOyl7aWYobnVsbD09PWMucmV0dXJufHxZZyhjLnJldHVybikpe2M9bnVsbDticmVhayBhfWM9Yy5yZXR1cm59Yy5zaWJsaW5nLnJldHVybj1jLnJldHVybjtmb3IoYz1jLnNpYmxpbmc7NSE9PWMudGFnJiY2IT09Yy50YWc7KXtpZihjLmVmZmVjdFRhZyYyKWNvbnRpbnVlIGI7XG5pZihudWxsPT09Yy5jaGlsZHx8ND09PWMudGFnKWNvbnRpbnVlIGI7ZWxzZSBjLmNoaWxkLnJldHVybj1jLGM9Yy5jaGlsZH1pZighKGMuZWZmZWN0VGFnJjIpKXtjPWMuc3RhdGVOb2RlO2JyZWFrIGF9fWZvcih2YXIgZT1hOzspe2lmKDU9PT1lLnRhZ3x8Nj09PWUudGFnKWlmKGMpaWYoZCl7dmFyIGY9YixnPWUuc3RhdGVOb2RlLGg9Yzs4PT09Zi5ub2RlVHlwZT9mLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGcsaCk6Zi5pbnNlcnRCZWZvcmUoZyxoKX1lbHNlIGIuaW5zZXJ0QmVmb3JlKGUuc3RhdGVOb2RlLGMpO2Vsc2UgZD8oZj1iLGc9ZS5zdGF0ZU5vZGUsOD09PWYubm9kZVR5cGU/Zi5wYXJlbnROb2RlLmluc2VydEJlZm9yZShnLGYpOmYuYXBwZW5kQ2hpbGQoZykpOmIuYXBwZW5kQ2hpbGQoZS5zdGF0ZU5vZGUpO2Vsc2UgaWYoNCE9PWUudGFnJiZudWxsIT09ZS5jaGlsZCl7ZS5jaGlsZC5yZXR1cm49ZTtlPWUuY2hpbGQ7Y29udGludWV9aWYoZT09PWEpYnJlYWs7Zm9yKDtudWxsPT09XG5lLnNpYmxpbmc7KXtpZihudWxsPT09ZS5yZXR1cm58fGUucmV0dXJuPT09YSlyZXR1cm47ZT1lLnJldHVybn1lLnNpYmxpbmcucmV0dXJuPWUucmV0dXJuO2U9ZS5zaWJsaW5nfX1cbmZ1bmN0aW9uIFhnKGEpe2Zvcih2YXIgYj1hLGM9ITEsZD12b2lkIDAsZT12b2lkIDA7Oyl7aWYoIWMpe2M9Yi5yZXR1cm47YTpmb3IoOzspe251bGw9PT1jP0EoXCIxNjBcIik6dm9pZCAwO3N3aXRjaChjLnRhZyl7Y2FzZSA1OmQ9Yy5zdGF0ZU5vZGU7ZT0hMTticmVhayBhO2Nhc2UgMzpkPWMuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87ZT0hMDticmVhayBhO2Nhc2UgNDpkPWMuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87ZT0hMDticmVhayBhfWM9Yy5yZXR1cm59Yz0hMH1pZig1PT09Yi50YWd8fDY9PT1iLnRhZyl7YTpmb3IodmFyIGY9YixnPWY7OylpZihXZyhnKSxudWxsIT09Zy5jaGlsZCYmNCE9PWcudGFnKWcuY2hpbGQucmV0dXJuPWcsZz1nLmNoaWxkO2Vsc2V7aWYoZz09PWYpYnJlYWs7Zm9yKDtudWxsPT09Zy5zaWJsaW5nOyl7aWYobnVsbD09PWcucmV0dXJufHxnLnJldHVybj09PWYpYnJlYWsgYTtnPWcucmV0dXJufWcuc2libGluZy5yZXR1cm49Zy5yZXR1cm47Zz1nLnNpYmxpbmd9ZT9cbihmPWQsZz1iLnN0YXRlTm9kZSw4PT09Zi5ub2RlVHlwZT9mLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZyk6Zi5yZW1vdmVDaGlsZChnKSk6ZC5yZW1vdmVDaGlsZChiLnN0YXRlTm9kZSl9ZWxzZSBpZig0PT09Yi50YWc/ZD1iLnN0YXRlTm9kZS5jb250YWluZXJJbmZvOldnKGIpLG51bGwhPT1iLmNoaWxkKXtiLmNoaWxkLnJldHVybj1iO2I9Yi5jaGlsZDtjb250aW51ZX1pZihiPT09YSlicmVhaztmb3IoO251bGw9PT1iLnNpYmxpbmc7KXtpZihudWxsPT09Yi5yZXR1cm58fGIucmV0dXJuPT09YSlyZXR1cm47Yj1iLnJldHVybjs0PT09Yi50YWcmJihjPSExKX1iLnNpYmxpbmcucmV0dXJuPWIucmV0dXJuO2I9Yi5zaWJsaW5nfX1cbmZ1bmN0aW9uICRnKGEsYil7c3dpdGNoKGIudGFnKXtjYXNlIDI6YnJlYWs7Y2FzZSA1OnZhciBjPWIuc3RhdGVOb2RlO2lmKG51bGwhPWMpe3ZhciBkPWIubWVtb2l6ZWRQcm9wczthPW51bGwhPT1hP2EubWVtb2l6ZWRQcm9wczpkO3ZhciBlPWIudHlwZSxmPWIudXBkYXRlUXVldWU7Yi51cGRhdGVRdWV1ZT1udWxsO251bGwhPT1mJiYoY1tNYV09ZCxUZShjLGYsZSxhLGQpKX1icmVhaztjYXNlIDY6bnVsbD09PWIuc3RhdGVOb2RlP0EoXCIxNjJcIik6dm9pZCAwO2Iuc3RhdGVOb2RlLm5vZGVWYWx1ZT1iLm1lbW9pemVkUHJvcHM7YnJlYWs7Y2FzZSAzOmJyZWFrO2Nhc2UgMTU6YnJlYWs7Y2FzZSAxNjpicmVhaztkZWZhdWx0OkEoXCIxNjNcIil9fWZ1bmN0aW9uIGFoKGEsYixjKXtjPUtmKGMpO2MudGFnPTM7Yy5wYXlsb2FkPXtlbGVtZW50Om51bGx9O3ZhciBkPWIudmFsdWU7Yy5jYWxsYmFjaz1mdW5jdGlvbigpe2JoKGQpO1RnKGEsYil9O3JldHVybiBjfVxuZnVuY3Rpb24gY2goYSxiLGMpe2M9S2YoYyk7Yy50YWc9Mzt2YXIgZD1hLnN0YXRlTm9kZTtudWxsIT09ZCYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGQuY29tcG9uZW50RGlkQ2F0Y2gmJihjLmNhbGxiYWNrPWZ1bmN0aW9uKCl7bnVsbD09PWRoP2RoPW5ldyBTZXQoW3RoaXNdKTpkaC5hZGQodGhpcyk7dmFyIGM9Yi52YWx1ZSxkPWIuc3RhY2s7VGcoYSxiKTt0aGlzLmNvbXBvbmVudERpZENhdGNoKGMse2NvbXBvbmVudFN0YWNrOm51bGwhPT1kP2Q6XCJcIn0pfSk7cmV0dXJuIGN9XG5mdW5jdGlvbiBlaChhLGIsYyxkLGUsZil7Yy5lZmZlY3RUYWd8PTUxMjtjLmZpcnN0RWZmZWN0PWMubGFzdEVmZmVjdD1udWxsO2Q9VGYoZCxjKTthPWI7ZG97c3dpdGNoKGEudGFnKXtjYXNlIDM6YS5lZmZlY3RUYWd8PTEwMjQ7ZD1haChhLGQsZik7TmYoYSxkLGYpO3JldHVybjtjYXNlIDI6aWYoYj1kLGM9YS5zdGF0ZU5vZGUsMD09PShhLmVmZmVjdFRhZyY2NCkmJm51bGwhPT1jJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5jb21wb25lbnREaWRDYXRjaCYmKG51bGw9PT1kaHx8IWRoLmhhcyhjKSkpe2EuZWZmZWN0VGFnfD0xMDI0O2Q9Y2goYSxiLGYpO05mKGEsZCxmKTtyZXR1cm59fWE9YS5yZXR1cm59d2hpbGUobnVsbCE9PWEpfVxuZnVuY3Rpb24gZmgoYSl7c3dpdGNoKGEudGFnKXtjYXNlIDI6b2YoYSk7dmFyIGI9YS5lZmZlY3RUYWc7cmV0dXJuIGImMTAyND8oYS5lZmZlY3RUYWc9YiYtMTAyNXw2NCxhKTpudWxsO2Nhc2UgMzpyZXR1cm4gZWcoYSkscGYoYSksYj1hLmVmZmVjdFRhZyxiJjEwMjQ/KGEuZWZmZWN0VGFnPWImLTEwMjV8NjQsYSk6bnVsbDtjYXNlIDU6cmV0dXJuIGZnKGEpLG51bGw7Y2FzZSAxNjpyZXR1cm4gYj1hLmVmZmVjdFRhZyxiJjEwMjQ/KGEuZWZmZWN0VGFnPWImLTEwMjV8NjQsYSk6bnVsbDtjYXNlIDQ6cmV0dXJuIGVnKGEpLG51bGw7Y2FzZSAxMzpyZXR1cm4gWWYoYSksbnVsbDtkZWZhdWx0OnJldHVybiBudWxsfX12YXIgZ2g9YWYoKSxoaD0yLGloPWdoLGpoPTAsa2g9MCxsaD0hMSxTPW51bGwsbWg9bnVsbCxUPTAsbmg9LTEsb2g9ITEsVT1udWxsLHBoPSExLHFoPSExLGRoPW51bGw7XG5mdW5jdGlvbiByaCgpe2lmKG51bGwhPT1TKWZvcih2YXIgYT1TLnJldHVybjtudWxsIT09YTspe3ZhciBiPWE7c3dpdGNoKGIudGFnKXtjYXNlIDI6b2YoYik7YnJlYWs7Y2FzZSAzOmVnKGIpO3BmKGIpO2JyZWFrO2Nhc2UgNTpmZyhiKTticmVhaztjYXNlIDQ6ZWcoYik7YnJlYWs7Y2FzZSAxMzpZZihiKX1hPWEucmV0dXJufW1oPW51bGw7VD0wO25oPS0xO29oPSExO1M9bnVsbDtxaD0hMX1cbmZ1bmN0aW9uIHNoKGEpe2Zvcig7Oyl7dmFyIGI9YS5hbHRlcm5hdGUsYz1hLnJldHVybixkPWEuc2libGluZztpZigwPT09KGEuZWZmZWN0VGFnJjUxMikpe2I9U2coYixhLFQpO3ZhciBlPWE7aWYoMTA3Mzc0MTgyMz09PVR8fDEwNzM3NDE4MjMhPT1lLmV4cGlyYXRpb25UaW1lKXt2YXIgZj0wO3N3aXRjaChlLnRhZyl7Y2FzZSAzOmNhc2UgMjp2YXIgZz1lLnVwZGF0ZVF1ZXVlO251bGwhPT1nJiYoZj1nLmV4cGlyYXRpb25UaW1lKX1mb3IoZz1lLmNoaWxkO251bGwhPT1nOykwIT09Zy5leHBpcmF0aW9uVGltZSYmKDA9PT1mfHxmPmcuZXhwaXJhdGlvblRpbWUpJiYoZj1nLmV4cGlyYXRpb25UaW1lKSxnPWcuc2libGluZztlLmV4cGlyYXRpb25UaW1lPWZ9aWYobnVsbCE9PWIpcmV0dXJuIGI7bnVsbCE9PWMmJjA9PT0oYy5lZmZlY3RUYWcmNTEyKSYmKG51bGw9PT1jLmZpcnN0RWZmZWN0JiYoYy5maXJzdEVmZmVjdD1hLmZpcnN0RWZmZWN0KSxudWxsIT09YS5sYXN0RWZmZWN0JiZcbihudWxsIT09Yy5sYXN0RWZmZWN0JiYoYy5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9YS5maXJzdEVmZmVjdCksYy5sYXN0RWZmZWN0PWEubGFzdEVmZmVjdCksMTxhLmVmZmVjdFRhZyYmKG51bGwhPT1jLmxhc3RFZmZlY3Q/Yy5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9YTpjLmZpcnN0RWZmZWN0PWEsYy5sYXN0RWZmZWN0PWEpKTtpZihudWxsIT09ZClyZXR1cm4gZDtpZihudWxsIT09YylhPWM7ZWxzZXtxaD0hMDticmVha319ZWxzZXthPWZoKGEsb2gsVCk7aWYobnVsbCE9PWEpcmV0dXJuIGEuZWZmZWN0VGFnJj01MTEsYTtudWxsIT09YyYmKGMuZmlyc3RFZmZlY3Q9Yy5sYXN0RWZmZWN0PW51bGwsYy5lZmZlY3RUYWd8PTUxMik7aWYobnVsbCE9PWQpcmV0dXJuIGQ7aWYobnVsbCE9PWMpYT1jO2Vsc2UgYnJlYWt9fXJldHVybiBudWxsfVxuZnVuY3Rpb24gdGgoYSl7dmFyIGI9S2coYS5hbHRlcm5hdGUsYSxUKTtudWxsPT09YiYmKGI9c2goYSkpO2VjLmN1cnJlbnQ9bnVsbDtyZXR1cm4gYn1cbmZ1bmN0aW9uIHVoKGEsYixjKXtsaD9BKFwiMjQzXCIpOnZvaWQgMDtsaD0hMDtpZihiIT09VHx8YSE9PW1ofHxudWxsPT09UylyaCgpLG1oPWEsVD1iLG5oPS0xLFM9dmYobWguY3VycmVudCxudWxsLFQpLGEucGVuZGluZ0NvbW1pdEV4cGlyYXRpb25UaW1lPTA7dmFyIGQ9ITE7b2g9IWN8fFQ8PWhoO2Rve3RyeXtpZihjKWZvcig7bnVsbCE9PVMmJiF2aCgpOylTPXRoKFMpO2Vsc2UgZm9yKDtudWxsIT09UzspUz10aChTKX1jYXRjaChmKXtpZihudWxsPT09UylkPSEwLGJoKGYpO2Vsc2V7bnVsbD09PVM/QShcIjI3MVwiKTp2b2lkIDA7Yz1TO3ZhciBlPWMucmV0dXJuO2lmKG51bGw9PT1lKXtkPSEwO2JoKGYpO2JyZWFrfWVoKGEsZSxjLGYsb2gsVCxpaCk7Uz1zaChjKX19YnJlYWt9d2hpbGUoMSk7bGg9ITE7aWYoZClyZXR1cm4gbnVsbDtpZihudWxsPT09Uyl7aWYocWgpcmV0dXJuIGEucGVuZGluZ0NvbW1pdEV4cGlyYXRpb25UaW1lPWIsYS5jdXJyZW50LmFsdGVybmF0ZTtvaD9BKFwiMjYyXCIpOlxudm9pZCAwOzA8PW5oJiZzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7dmFyIGI9YS5jdXJyZW50LmV4cGlyYXRpb25UaW1lOzAhPT1iJiYoMD09PWEucmVtYWluaW5nRXhwaXJhdGlvblRpbWV8fGEucmVtYWluaW5nRXhwaXJhdGlvblRpbWU8YikmJndoKGEsYil9LG5oKTt4aChhLmN1cnJlbnQuZXhwaXJhdGlvblRpbWUpfXJldHVybiBudWxsfVxuZnVuY3Rpb24gVmcoYSxiKXt2YXIgYzthOntsaCYmIXBoP0EoXCIyNjNcIik6dm9pZCAwO2ZvcihjPWEucmV0dXJuO251bGwhPT1jOyl7c3dpdGNoKGMudGFnKXtjYXNlIDI6dmFyIGQ9Yy5zdGF0ZU5vZGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGMudHlwZS5nZXREZXJpdmVkU3RhdGVGcm9tQ2F0Y2h8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLmNvbXBvbmVudERpZENhdGNoJiYobnVsbD09PWRofHwhZGguaGFzKGQpKSl7YT1UZihiLGEpO2E9Y2goYyxhLDEpO01mKGMsYSwxKTtrZyhjLDEpO2M9dm9pZCAwO2JyZWFrIGF9YnJlYWs7Y2FzZSAzOmE9VGYoYixhKTthPWFoKGMsYSwxKTtNZihjLGEsMSk7a2coYywxKTtjPXZvaWQgMDticmVhayBhfWM9Yy5yZXR1cm59Mz09PWEudGFnJiYoYz1UZihiLGEpLGM9YWgoYSxjLDEpLE1mKGEsYywxKSxrZyhhLDEpKTtjPXZvaWQgMH1yZXR1cm4gY31cbmZ1bmN0aW9uIHloKCl7dmFyIGE9MisyNSooKChpZygpLTIrNTAwKS8yNXwwKSsxKTthPD1qaCYmKGE9amgrMSk7cmV0dXJuIGpoPWF9ZnVuY3Rpb24gamcoYSxiKXthPTAhPT1raD9raDpsaD9waD8xOlQ6Yi5tb2RlJjE/emg/MisxMCooKChhLTIrMTUpLzEwfDApKzEpOjIrMjUqKCgoYS0yKzUwMCkvMjV8MCkrMSk6MTt6aCYmKDA9PT1BaHx8YT5BaCkmJihBaD1hKTtyZXR1cm4gYX1cbmZ1bmN0aW9uIGtnKGEsYil7Zm9yKDtudWxsIT09YTspe2lmKDA9PT1hLmV4cGlyYXRpb25UaW1lfHxhLmV4cGlyYXRpb25UaW1lPmIpYS5leHBpcmF0aW9uVGltZT1iO251bGwhPT1hLmFsdGVybmF0ZSYmKDA9PT1hLmFsdGVybmF0ZS5leHBpcmF0aW9uVGltZXx8YS5hbHRlcm5hdGUuZXhwaXJhdGlvblRpbWU+YikmJihhLmFsdGVybmF0ZS5leHBpcmF0aW9uVGltZT1iKTtpZihudWxsPT09YS5yZXR1cm4paWYoMz09PWEudGFnKXt2YXIgYz1hLnN0YXRlTm9kZTshbGgmJjAhPT1UJiZiPFQmJnJoKCk7dmFyIGQ9Yy5jdXJyZW50LmV4cGlyYXRpb25UaW1lO2xoJiYhcGgmJm1oPT09Y3x8d2goYyxkKTtCaD5DaCYmQShcIjE4NVwiKX1lbHNlIGJyZWFrO2E9YS5yZXR1cm59fWZ1bmN0aW9uIGlnKCl7aWg9YWYoKS1naDtyZXR1cm4gaGg9KGloLzEwfDApKzJ9XG5mdW5jdGlvbiBEaChhKXt2YXIgYj1raDtraD0yKzI1KigoKGlnKCktMis1MDApLzI1fDApKzEpO3RyeXtyZXR1cm4gYSgpfWZpbmFsbHl7a2g9Yn19ZnVuY3Rpb24gRWgoYSxiLGMsZCxlKXt2YXIgZj1raDtraD0xO3RyeXtyZXR1cm4gYShiLGMsZCxlKX1maW5hbGx5e2toPWZ9fXZhciBGaD1udWxsLFY9bnVsbCxHaD0wLEhoPS0xLFc9ITEsWD1udWxsLFk9MCxBaD0wLEloPSExLEpoPSExLEtoPW51bGwsTGg9bnVsbCxaPSExLE1oPSExLHpoPSExLE5oPW51bGwsQ2g9MUUzLEJoPTAsT2g9MTtmdW5jdGlvbiBQaChhKXtpZigwIT09R2gpe2lmKGE+R2gpcmV0dXJuO2NmKEhoKX12YXIgYj1hZigpLWdoO0doPWE7SGg9YmYoUWgse3RpbWVvdXQ6MTAqKGEtMiktYn0pfVxuZnVuY3Rpb24gd2goYSxiKXtpZihudWxsPT09YS5uZXh0U2NoZWR1bGVkUm9vdClhLnJlbWFpbmluZ0V4cGlyYXRpb25UaW1lPWIsbnVsbD09PVY/KEZoPVY9YSxhLm5leHRTY2hlZHVsZWRSb290PWEpOihWPVYubmV4dFNjaGVkdWxlZFJvb3Q9YSxWLm5leHRTY2hlZHVsZWRSb290PUZoKTtlbHNle3ZhciBjPWEucmVtYWluaW5nRXhwaXJhdGlvblRpbWU7aWYoMD09PWN8fGI8YylhLnJlbWFpbmluZ0V4cGlyYXRpb25UaW1lPWJ9V3x8KFo/TWgmJihYPWEsWT0xLFJoKGEsMSwhMSkpOjE9PT1iP1NoKCk6UGgoYikpfVxuZnVuY3Rpb24gVGgoKXt2YXIgYT0wLGI9bnVsbDtpZihudWxsIT09Vilmb3IodmFyIGM9VixkPUZoO251bGwhPT1kOyl7dmFyIGU9ZC5yZW1haW5pbmdFeHBpcmF0aW9uVGltZTtpZigwPT09ZSl7bnVsbD09PWN8fG51bGw9PT1WP0EoXCIyNDRcIik6dm9pZCAwO2lmKGQ9PT1kLm5leHRTY2hlZHVsZWRSb290KXtGaD1WPWQubmV4dFNjaGVkdWxlZFJvb3Q9bnVsbDticmVha31lbHNlIGlmKGQ9PT1GaClGaD1lPWQubmV4dFNjaGVkdWxlZFJvb3QsVi5uZXh0U2NoZWR1bGVkUm9vdD1lLGQubmV4dFNjaGVkdWxlZFJvb3Q9bnVsbDtlbHNlIGlmKGQ9PT1WKXtWPWM7Vi5uZXh0U2NoZWR1bGVkUm9vdD1GaDtkLm5leHRTY2hlZHVsZWRSb290PW51bGw7YnJlYWt9ZWxzZSBjLm5leHRTY2hlZHVsZWRSb290PWQubmV4dFNjaGVkdWxlZFJvb3QsZC5uZXh0U2NoZWR1bGVkUm9vdD1udWxsO2Q9Yy5uZXh0U2NoZWR1bGVkUm9vdH1lbHNle2lmKDA9PT1hfHxlPGEpYT1lLGI9ZDtpZihkPT09VilicmVhaztcbmM9ZDtkPWQubmV4dFNjaGVkdWxlZFJvb3R9fWM9WDtudWxsIT09YyYmYz09PWImJjE9PT1hP0JoKys6Qmg9MDtYPWI7WT1hfWZ1bmN0aW9uIFFoKGEpe1VoKDAsITAsYSl9ZnVuY3Rpb24gU2goKXtVaCgxLCExLG51bGwpfWZ1bmN0aW9uIFVoKGEsYixjKXtMaD1jO1RoKCk7aWYoYilmb3IoO251bGwhPT1YJiYwIT09WSYmKDA9PT1hfHxhPj1ZKSYmKCFJaHx8aWcoKT49WSk7KWlnKCksUmgoWCxZLCFJaCksVGgoKTtlbHNlIGZvcig7bnVsbCE9PVgmJjAhPT1ZJiYoMD09PWF8fGE+PVkpOylSaChYLFksITEpLFRoKCk7bnVsbCE9PUxoJiYoR2g9MCxIaD0tMSk7MCE9PVkmJlBoKFkpO0xoPW51bGw7SWg9ITE7VmgoKX1mdW5jdGlvbiBXaChhLGIpe1c/QShcIjI1M1wiKTp2b2lkIDA7WD1hO1k9YjtSaChhLGIsITEpO1NoKCk7VmgoKX1cbmZ1bmN0aW9uIFZoKCl7Qmg9MDtpZihudWxsIT09Tmgpe3ZhciBhPU5oO05oPW51bGw7Zm9yKHZhciBiPTA7YjxhLmxlbmd0aDtiKyspe3ZhciBjPWFbYl07dHJ5e2MuX29uQ29tcGxldGUoKX1jYXRjaChkKXtKaHx8KEpoPSEwLEtoPWQpfX19aWYoSmgpdGhyb3cgYT1LaCxLaD1udWxsLEpoPSExLGE7fWZ1bmN0aW9uIFJoKGEsYixjKXtXP0EoXCIyNDVcIik6dm9pZCAwO1c9ITA7Yz8oYz1hLmZpbmlzaGVkV29yayxudWxsIT09Yz9YaChhLGMsYik6KGEuZmluaXNoZWRXb3JrPW51bGwsYz11aChhLGIsITApLG51bGwhPT1jJiYodmgoKT9hLmZpbmlzaGVkV29yaz1jOlhoKGEsYyxiKSkpKTooYz1hLmZpbmlzaGVkV29yayxudWxsIT09Yz9YaChhLGMsYik6KGEuZmluaXNoZWRXb3JrPW51bGwsYz11aChhLGIsITEpLG51bGwhPT1jJiZYaChhLGMsYikpKTtXPSExfVxuZnVuY3Rpb24gWGgoYSxiLGMpe3ZhciBkPWEuZmlyc3RCYXRjaDtpZihudWxsIT09ZCYmZC5fZXhwaXJhdGlvblRpbWU8PWMmJihudWxsPT09Tmg/Tmg9W2RdOk5oLnB1c2goZCksZC5fZGVmZXIpKXthLmZpbmlzaGVkV29yaz1iO2EucmVtYWluaW5nRXhwaXJhdGlvblRpbWU9MDtyZXR1cm59YS5maW5pc2hlZFdvcms9bnVsbDtwaD1saD0hMDtjPWIuc3RhdGVOb2RlO2MuY3VycmVudD09PWI/QShcIjE3N1wiKTp2b2lkIDA7ZD1jLnBlbmRpbmdDb21taXRFeHBpcmF0aW9uVGltZTswPT09ZD9BKFwiMjYxXCIpOnZvaWQgMDtjLnBlbmRpbmdDb21taXRFeHBpcmF0aW9uVGltZT0wO2lnKCk7ZWMuY3VycmVudD1udWxsO2lmKDE8Yi5lZmZlY3RUYWcpaWYobnVsbCE9PWIubGFzdEVmZmVjdCl7Yi5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9Yjt2YXIgZT1iLmZpcnN0RWZmZWN0fWVsc2UgZT1iO2Vsc2UgZT1iLmZpcnN0RWZmZWN0O1hlPUdkO3ZhciBmPWRhKCk7aWYoVGQoZikpe2lmKFwic2VsZWN0aW9uU3RhcnRcImluXG5mKXZhciBnPXtzdGFydDpmLnNlbGVjdGlvblN0YXJ0LGVuZDpmLnNlbGVjdGlvbkVuZH07ZWxzZSBhOnt2YXIgaD13aW5kb3cuZ2V0U2VsZWN0aW9uJiZ3aW5kb3cuZ2V0U2VsZWN0aW9uKCk7aWYoaCYmMCE9PWgucmFuZ2VDb3VudCl7Zz1oLmFuY2hvck5vZGU7dmFyIGs9aC5hbmNob3JPZmZzZXQsbj1oLmZvY3VzTm9kZTtoPWguZm9jdXNPZmZzZXQ7dHJ5e2cubm9kZVR5cGUsbi5ub2RlVHlwZX1jYXRjaChXYSl7Zz1udWxsO2JyZWFrIGF9dmFyIHI9MCx3PS0xLFA9LTEsa2M9MCxIZD0wLEU9Zix0PW51bGw7Yjpmb3IoOzspe2Zvcih2YXIgeDs7KXtFIT09Z3x8MCE9PWsmJjMhPT1FLm5vZGVUeXBlfHwodz1yK2spO0UhPT1ufHwwIT09aCYmMyE9PUUubm9kZVR5cGV8fChQPXIraCk7Mz09PUUubm9kZVR5cGUmJihyKz1FLm5vZGVWYWx1ZS5sZW5ndGgpO2lmKG51bGw9PT0oeD1FLmZpcnN0Q2hpbGQpKWJyZWFrO3Q9RTtFPXh9Zm9yKDs7KXtpZihFPT09ZilicmVhayBiO3Q9PT1nJiZcbisra2M9PT1rJiYodz1yKTt0PT09biYmKytIZD09PWgmJihQPXIpO2lmKG51bGwhPT0oeD1FLm5leHRTaWJsaW5nKSlicmVhaztFPXQ7dD1FLnBhcmVudE5vZGV9RT14fWc9LTE9PT13fHwtMT09PVA/bnVsbDp7c3RhcnQ6dyxlbmQ6UH19ZWxzZSBnPW51bGx9Zz1nfHx7c3RhcnQ6MCxlbmQ6MH19ZWxzZSBnPW51bGw7WWU9e2ZvY3VzZWRFbGVtOmYsc2VsZWN0aW9uUmFuZ2U6Z307SWQoITEpO2ZvcihVPWU7bnVsbCE9PVU7KXtmPSExO2c9dm9pZCAwO3RyeXtmb3IoO251bGwhPT1VOyl7aWYoVS5lZmZlY3RUYWcmMjU2KXt2YXIgdT1VLmFsdGVybmF0ZTtrPVU7c3dpdGNoKGsudGFnKXtjYXNlIDI6aWYoay5lZmZlY3RUYWcmMjU2JiZudWxsIT09dSl7dmFyIHk9dS5tZW1vaXplZFByb3BzLEQ9dS5tZW1vaXplZFN0YXRlLGphPWsuc3RhdGVOb2RlO2phLnByb3BzPWsubWVtb2l6ZWRQcm9wcztqYS5zdGF0ZT1rLm1lbW9pemVkU3RhdGU7dmFyIGhpPWphLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKHksXG5EKTtqYS5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZT1oaX1icmVhaztjYXNlIDM6Y2FzZSA1OmNhc2UgNjpjYXNlIDQ6YnJlYWs7ZGVmYXVsdDpBKFwiMTYzXCIpfX1VPVUubmV4dEVmZmVjdH19Y2F0Y2goV2Epe2Y9ITAsZz1XYX1mJiYobnVsbD09PVU/QShcIjE3OFwiKTp2b2lkIDAsVmcoVSxnKSxudWxsIT09VSYmKFU9VS5uZXh0RWZmZWN0KSl9Zm9yKFU9ZTtudWxsIT09VTspe3U9ITE7eT12b2lkIDA7dHJ5e2Zvcig7bnVsbCE9PVU7KXt2YXIgcT1VLmVmZmVjdFRhZztxJjE2JiZHZShVLnN0YXRlTm9kZSxcIlwiKTtpZihxJjEyOCl7dmFyIHo9VS5hbHRlcm5hdGU7aWYobnVsbCE9PXope3ZhciBsPXoucmVmO251bGwhPT1sJiYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGw/bChudWxsKTpsLmN1cnJlbnQ9bnVsbCl9fXN3aXRjaChxJjE0KXtjYXNlIDI6WmcoVSk7VS5lZmZlY3RUYWcmPS0zO2JyZWFrO2Nhc2UgNjpaZyhVKTtVLmVmZmVjdFRhZyY9LTM7JGcoVS5hbHRlcm5hdGUsXG5VKTticmVhaztjYXNlIDQ6JGcoVS5hbHRlcm5hdGUsVSk7YnJlYWs7Y2FzZSA4OkQ9VSxYZyhEKSxELnJldHVybj1udWxsLEQuY2hpbGQ9bnVsbCxELmFsdGVybmF0ZSYmKEQuYWx0ZXJuYXRlLmNoaWxkPW51bGwsRC5hbHRlcm5hdGUucmV0dXJuPW51bGwpfVU9VS5uZXh0RWZmZWN0fX1jYXRjaChXYSl7dT0hMCx5PVdhfXUmJihudWxsPT09VT9BKFwiMTc4XCIpOnZvaWQgMCxWZyhVLHkpLG51bGwhPT1VJiYoVT1VLm5leHRFZmZlY3QpKX1sPVllO3o9ZGEoKTtxPWwuZm9jdXNlZEVsZW07dT1sLnNlbGVjdGlvblJhbmdlO2lmKHohPT1xJiZmYShkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQscSkpe1RkKHEpJiYoej11LnN0YXJ0LGw9dS5lbmQsdm9pZCAwPT09bCYmKGw9eiksXCJzZWxlY3Rpb25TdGFydFwiaW4gcT8ocS5zZWxlY3Rpb25TdGFydD16LHEuc2VsZWN0aW9uRW5kPU1hdGgubWluKGwscS52YWx1ZS5sZW5ndGgpKTp3aW5kb3cuZ2V0U2VsZWN0aW9uJiYoej13aW5kb3cuZ2V0U2VsZWN0aW9uKCksXG55PXFbbGIoKV0ubGVuZ3RoLGw9TWF0aC5taW4odS5zdGFydCx5KSx1PXZvaWQgMD09PXUuZW5kP2w6TWF0aC5taW4odS5lbmQseSksIXouZXh0ZW5kJiZsPnUmJih5PXUsdT1sLGw9eSkseT1TZChxLGwpLEQ9U2QocSx1KSx5JiZEJiYoMSE9PXoucmFuZ2VDb3VudHx8ei5hbmNob3JOb2RlIT09eS5ub2RlfHx6LmFuY2hvck9mZnNldCE9PXkub2Zmc2V0fHx6LmZvY3VzTm9kZSE9PUQubm9kZXx8ei5mb2N1c09mZnNldCE9PUQub2Zmc2V0KSYmKGphPWRvY3VtZW50LmNyZWF0ZVJhbmdlKCksamEuc2V0U3RhcnQoeS5ub2RlLHkub2Zmc2V0KSx6LnJlbW92ZUFsbFJhbmdlcygpLGw+dT8oei5hZGRSYW5nZShqYSksei5leHRlbmQoRC5ub2RlLEQub2Zmc2V0KSk6KGphLnNldEVuZChELm5vZGUsRC5vZmZzZXQpLHouYWRkUmFuZ2UoamEpKSkpKTt6PVtdO2ZvcihsPXE7bD1sLnBhcmVudE5vZGU7KTE9PT1sLm5vZGVUeXBlJiZ6LnB1c2goe2VsZW1lbnQ6bCxsZWZ0Omwuc2Nyb2xsTGVmdCxcbnRvcDpsLnNjcm9sbFRvcH0pO3EuZm9jdXMoKTtmb3IocT0wO3E8ei5sZW5ndGg7cSsrKWw9eltxXSxsLmVsZW1lbnQuc2Nyb2xsTGVmdD1sLmxlZnQsbC5lbGVtZW50LnNjcm9sbFRvcD1sLnRvcH1ZZT1udWxsO0lkKFhlKTtYZT1udWxsO2MuY3VycmVudD1iO2ZvcihVPWU7bnVsbCE9PVU7KXtlPSExO3E9dm9pZCAwO3RyeXtmb3Ioej1kO251bGwhPT1VOyl7dmFyIGdnPVUuZWZmZWN0VGFnO2lmKGdnJjM2KXt2YXIgbGM9VS5hbHRlcm5hdGU7bD1VO3U9ejtzd2l0Y2gobC50YWcpe2Nhc2UgMjp2YXIgYmE9bC5zdGF0ZU5vZGU7aWYobC5lZmZlY3RUYWcmNClpZihudWxsPT09bGMpYmEucHJvcHM9bC5tZW1vaXplZFByb3BzLGJhLnN0YXRlPWwubWVtb2l6ZWRTdGF0ZSxiYS5jb21wb25lbnREaWRNb3VudCgpO2Vsc2V7dmFyIHJpPWxjLm1lbW9pemVkUHJvcHMsc2k9bGMubWVtb2l6ZWRTdGF0ZTtiYS5wcm9wcz1sLm1lbW9pemVkUHJvcHM7YmEuc3RhdGU9bC5tZW1vaXplZFN0YXRlO1xuYmEuY29tcG9uZW50RGlkVXBkYXRlKHJpLHNpLGJhLl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlKX12YXIgTWc9bC51cGRhdGVRdWV1ZTtudWxsIT09TWcmJihiYS5wcm9wcz1sLm1lbW9pemVkUHJvcHMsYmEuc3RhdGU9bC5tZW1vaXplZFN0YXRlLFNmKGwsTWcsYmEsdSkpO2JyZWFrO2Nhc2UgMzp2YXIgTmc9bC51cGRhdGVRdWV1ZTtpZihudWxsIT09Tmcpe3k9bnVsbDtpZihudWxsIT09bC5jaGlsZClzd2l0Y2gobC5jaGlsZC50YWcpe2Nhc2UgNTp5PWwuY2hpbGQuc3RhdGVOb2RlO2JyZWFrO2Nhc2UgMjp5PWwuY2hpbGQuc3RhdGVOb2RlfVNmKGwsTmcseSx1KX1icmVhaztjYXNlIDU6dmFyIHRpPWwuc3RhdGVOb2RlO251bGw9PT1sYyYmbC5lZmZlY3RUYWcmNCYmWmUobC50eXBlLGwubWVtb2l6ZWRQcm9wcykmJnRpLmZvY3VzKCk7YnJlYWs7Y2FzZSA2OmJyZWFrO2Nhc2UgNDpicmVhaztjYXNlIDE1OmJyZWFrO2Nhc2UgMTY6YnJlYWs7ZGVmYXVsdDpBKFwiMTYzXCIpfX1pZihnZyZcbjEyOCl7bD12b2lkIDA7dmFyIHVjPVUucmVmO2lmKG51bGwhPT11Yyl7dmFyIE9nPVUuc3RhdGVOb2RlO3N3aXRjaChVLnRhZyl7Y2FzZSA1Omw9T2c7YnJlYWs7ZGVmYXVsdDpsPU9nfVwiZnVuY3Rpb25cIj09PXR5cGVvZiB1Yz91YyhsKTp1Yy5jdXJyZW50PWx9fXZhciB1aT1VLm5leHRFZmZlY3Q7VS5uZXh0RWZmZWN0PW51bGw7VT11aX19Y2F0Y2goV2Epe2U9ITAscT1XYX1lJiYobnVsbD09PVU/QShcIjE3OFwiKTp2b2lkIDAsVmcoVSxxKSxudWxsIT09VSYmKFU9VS5uZXh0RWZmZWN0KSl9bGg9cGg9ITE7XCJmdW5jdGlvblwiPT09dHlwZW9mIEZmJiZGZihiLnN0YXRlTm9kZSk7Yj1jLmN1cnJlbnQuZXhwaXJhdGlvblRpbWU7MD09PWImJihkaD1udWxsKTthLnJlbWFpbmluZ0V4cGlyYXRpb25UaW1lPWJ9ZnVuY3Rpb24gdmgoKXtyZXR1cm4gbnVsbD09PUxofHxMaC50aW1lUmVtYWluaW5nKCk+T2g/ITE6SWg9ITB9XG5mdW5jdGlvbiBiaChhKXtudWxsPT09WD9BKFwiMjQ2XCIpOnZvaWQgMDtYLnJlbWFpbmluZ0V4cGlyYXRpb25UaW1lPTA7Smh8fChKaD0hMCxLaD1hKX1mdW5jdGlvbiB4aChhKXtudWxsPT09WD9BKFwiMjQ2XCIpOnZvaWQgMDtYLnJlbWFpbmluZ0V4cGlyYXRpb25UaW1lPWF9ZnVuY3Rpb24gWWgoYSxiKXt2YXIgYz1aO1o9ITA7dHJ5e3JldHVybiBhKGIpfWZpbmFsbHl7KFo9Yyl8fFd8fFNoKCl9fWZ1bmN0aW9uIFpoKGEsYil7aWYoWiYmIU1oKXtNaD0hMDt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXtNaD0hMX19cmV0dXJuIGEoYil9ZnVuY3Rpb24gJGgoYSxiKXtXP0EoXCIxODdcIik6dm9pZCAwO3ZhciBjPVo7Wj0hMDt0cnl7cmV0dXJuIEVoKGEsYil9ZmluYWxseXtaPWMsU2goKX19ZnVuY3Rpb24gYWkoYSl7dmFyIGI9WjtaPSEwO3RyeXtFaChhKX1maW5hbGx5eyhaPWIpfHxXfHxVaCgxLCExLG51bGwpfX1cbmZ1bmN0aW9uIGJpKGEsYixjLGQsZSl7dmFyIGY9Yi5jdXJyZW50O2lmKGMpe2M9Yy5fcmVhY3RJbnRlcm5hbEZpYmVyO3ZhciBnO2I6ezI9PT1pZChjKSYmMj09PWMudGFnP3ZvaWQgMDpBKFwiMTcwXCIpO2ZvcihnPWM7MyE9PWcudGFnOyl7aWYobWYoZykpe2c9Zy5zdGF0ZU5vZGUuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQ7YnJlYWsgYn0oZz1nLnJldHVybik/dm9pZCAwOkEoXCIxNzFcIil9Zz1nLnN0YXRlTm9kZS5jb250ZXh0fWM9bWYoYyk/cmYoYyxnKTpnfWVsc2UgYz1oYTtudWxsPT09Yi5jb250ZXh0P2IuY29udGV4dD1jOmIucGVuZGluZ0NvbnRleHQ9YztiPWU7ZT1LZihkKTtlLnBheWxvYWQ9e2VsZW1lbnQ6YX07Yj12b2lkIDA9PT1iP251bGw6YjtudWxsIT09YiYmKGUuY2FsbGJhY2s9Yik7TWYoZixlLGQpO2tnKGYsZCk7cmV0dXJuIGR9XG5mdW5jdGlvbiBjaShhKXt2YXIgYj1hLl9yZWFjdEludGVybmFsRmliZXI7dm9pZCAwPT09YiYmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhLnJlbmRlcj9BKFwiMTg4XCIpOkEoXCIyNjhcIixPYmplY3Qua2V5cyhhKSkpO2E9bGQoYik7cmV0dXJuIG51bGw9PT1hP251bGw6YS5zdGF0ZU5vZGV9ZnVuY3Rpb24gZGkoYSxiLGMsZCl7dmFyIGU9Yi5jdXJyZW50LGY9aWcoKTtlPWpnKGYsZSk7cmV0dXJuIGJpKGEsYixjLGUsZCl9ZnVuY3Rpb24gZWkoYSl7YT1hLmN1cnJlbnQ7aWYoIWEuY2hpbGQpcmV0dXJuIG51bGw7c3dpdGNoKGEuY2hpbGQudGFnKXtjYXNlIDU6cmV0dXJuIGEuY2hpbGQuc3RhdGVOb2RlO2RlZmF1bHQ6cmV0dXJuIGEuY2hpbGQuc3RhdGVOb2RlfX1cbmZ1bmN0aW9uIGZpKGEpe3ZhciBiPWEuZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U7cmV0dXJuIEVmKHAoe30sYSx7ZmluZEhvc3RJbnN0YW5jZUJ5RmliZXI6ZnVuY3Rpb24oYSl7YT1sZChhKTtyZXR1cm4gbnVsbD09PWE/bnVsbDphLnN0YXRlTm9kZX0sZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U6ZnVuY3Rpb24oYSl7cmV0dXJuIGI/YihhKTpudWxsfX0pKX1cbnZhciBnaT17dXBkYXRlQ29udGFpbmVyQXRFeHBpcmF0aW9uVGltZTpiaSxjcmVhdGVDb250YWluZXI6ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBBZihhLGIsYyl9LHVwZGF0ZUNvbnRhaW5lcjpkaSxmbHVzaFJvb3Q6V2gscmVxdWVzdFdvcms6d2gsY29tcHV0ZVVuaXF1ZUFzeW5jRXhwaXJhdGlvbjp5aCxiYXRjaGVkVXBkYXRlczpZaCx1bmJhdGNoZWRVcGRhdGVzOlpoLGRlZmVycmVkVXBkYXRlczpEaCxzeW5jVXBkYXRlczpFaCxpbnRlcmFjdGl2ZVVwZGF0ZXM6ZnVuY3Rpb24oYSxiLGMpe2lmKHpoKXJldHVybiBhKGIsYyk7Wnx8V3x8MD09PUFofHwoVWgoQWgsITEsbnVsbCksQWg9MCk7dmFyIGQ9emgsZT1aO1o9emg9ITA7dHJ5e3JldHVybiBhKGIsYyl9ZmluYWxseXt6aD1kLChaPWUpfHxXfHxTaCgpfX0sZmx1c2hJbnRlcmFjdGl2ZVVwZGF0ZXM6ZnVuY3Rpb24oKXtXfHwwPT09QWh8fChVaChBaCwhMSxudWxsKSxBaD0wKX0sZmx1c2hDb250cm9sbGVkOmFpLGZsdXNoU3luYzokaCxcbmdldFB1YmxpY1Jvb3RJbnN0YW5jZTplaSxmaW5kSG9zdEluc3RhbmNlOmNpLGZpbmRIb3N0SW5zdGFuY2VXaXRoTm9Qb3J0YWxzOmZ1bmN0aW9uKGEpe2E9bWQoYSk7cmV0dXJuIG51bGw9PT1hP251bGw6YS5zdGF0ZU5vZGV9LGluamVjdEludG9EZXZUb29sczpmaX07ZnVuY3Rpb24gaWkoYSxiLGMpe3ZhciBkPTM8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzNdP2FyZ3VtZW50c1szXTpudWxsO3JldHVybnskJHR5cGVvZjpnYyxrZXk6bnVsbD09ZD9udWxsOlwiXCIrZCxjaGlsZHJlbjphLGNvbnRhaW5lckluZm86YixpbXBsZW1lbnRhdGlvbjpjfX1LYi5pbmplY3RGaWJlckNvbnRyb2xsZWRIb3N0Q29tcG9uZW50KFdlKTtcbmZ1bmN0aW9uIGppKGEpe3RoaXMuX2V4cGlyYXRpb25UaW1lPXloKCk7dGhpcy5fcm9vdD1hO3RoaXMuX2NhbGxiYWNrcz10aGlzLl9uZXh0PW51bGw7dGhpcy5faGFzQ2hpbGRyZW49dGhpcy5fZGlkQ29tcGxldGU9ITE7dGhpcy5fY2hpbGRyZW49bnVsbDt0aGlzLl9kZWZlcj0hMH1qaS5wcm90b3R5cGUucmVuZGVyPWZ1bmN0aW9uKGEpe3RoaXMuX2RlZmVyP3ZvaWQgMDpBKFwiMjUwXCIpO3RoaXMuX2hhc0NoaWxkcmVuPSEwO3RoaXMuX2NoaWxkcmVuPWE7dmFyIGI9dGhpcy5fcm9vdC5faW50ZXJuYWxSb290LGM9dGhpcy5fZXhwaXJhdGlvblRpbWUsZD1uZXcga2k7YmkoYSxiLG51bGwsYyxkLl9vbkNvbW1pdCk7cmV0dXJuIGR9O2ppLnByb3RvdHlwZS50aGVuPWZ1bmN0aW9uKGEpe2lmKHRoaXMuX2RpZENvbXBsZXRlKWEoKTtlbHNle3ZhciBiPXRoaXMuX2NhbGxiYWNrcztudWxsPT09YiYmKGI9dGhpcy5fY2FsbGJhY2tzPVtdKTtiLnB1c2goYSl9fTtcbmppLnByb3RvdHlwZS5jb21taXQ9ZnVuY3Rpb24oKXt2YXIgYT10aGlzLl9yb290Ll9pbnRlcm5hbFJvb3QsYj1hLmZpcnN0QmF0Y2g7dGhpcy5fZGVmZXImJm51bGwhPT1iP3ZvaWQgMDpBKFwiMjUxXCIpO2lmKHRoaXMuX2hhc0NoaWxkcmVuKXt2YXIgYz10aGlzLl9leHBpcmF0aW9uVGltZTtpZihiIT09dGhpcyl7dGhpcy5faGFzQ2hpbGRyZW4mJihjPXRoaXMuX2V4cGlyYXRpb25UaW1lPWIuX2V4cGlyYXRpb25UaW1lLHRoaXMucmVuZGVyKHRoaXMuX2NoaWxkcmVuKSk7Zm9yKHZhciBkPW51bGwsZT1iO2UhPT10aGlzOylkPWUsZT1lLl9uZXh0O251bGw9PT1kP0EoXCIyNTFcIik6dm9pZCAwO2QuX25leHQ9ZS5fbmV4dDt0aGlzLl9uZXh0PWI7YS5maXJzdEJhdGNoPXRoaXN9dGhpcy5fZGVmZXI9ITE7V2goYSxjKTtiPXRoaXMuX25leHQ7dGhpcy5fbmV4dD1udWxsO2I9YS5maXJzdEJhdGNoPWI7bnVsbCE9PWImJmIuX2hhc0NoaWxkcmVuJiZiLnJlbmRlcihiLl9jaGlsZHJlbil9ZWxzZSB0aGlzLl9uZXh0PVxubnVsbCx0aGlzLl9kZWZlcj0hMX07amkucHJvdG90eXBlLl9vbkNvbXBsZXRlPWZ1bmN0aW9uKCl7aWYoIXRoaXMuX2RpZENvbXBsZXRlKXt0aGlzLl9kaWRDb21wbGV0ZT0hMDt2YXIgYT10aGlzLl9jYWxsYmFja3M7aWYobnVsbCE9PWEpZm9yKHZhciBiPTA7YjxhLmxlbmd0aDtiKyspKDAsYVtiXSkoKX19O2Z1bmN0aW9uIGtpKCl7dGhpcy5fY2FsbGJhY2tzPW51bGw7dGhpcy5fZGlkQ29tbWl0PSExO3RoaXMuX29uQ29tbWl0PXRoaXMuX29uQ29tbWl0LmJpbmQodGhpcyl9a2kucHJvdG90eXBlLnRoZW49ZnVuY3Rpb24oYSl7aWYodGhpcy5fZGlkQ29tbWl0KWEoKTtlbHNle3ZhciBiPXRoaXMuX2NhbGxiYWNrcztudWxsPT09YiYmKGI9dGhpcy5fY2FsbGJhY2tzPVtdKTtiLnB1c2goYSl9fTtcbmtpLnByb3RvdHlwZS5fb25Db21taXQ9ZnVuY3Rpb24oKXtpZighdGhpcy5fZGlkQ29tbWl0KXt0aGlzLl9kaWRDb21taXQ9ITA7dmFyIGE9dGhpcy5fY2FsbGJhY2tzO2lmKG51bGwhPT1hKWZvcih2YXIgYj0wO2I8YS5sZW5ndGg7YisrKXt2YXIgYz1hW2JdO1wiZnVuY3Rpb25cIiE9PXR5cGVvZiBjP0EoXCIxOTFcIixjKTp2b2lkIDA7YygpfX19O2Z1bmN0aW9uIGxpKGEsYixjKXt0aGlzLl9pbnRlcm5hbFJvb3Q9QWYoYSxiLGMpfWxpLnByb3RvdHlwZS5yZW5kZXI9ZnVuY3Rpb24oYSxiKXt2YXIgYz10aGlzLl9pbnRlcm5hbFJvb3QsZD1uZXcga2k7Yj12b2lkIDA9PT1iP251bGw6YjtudWxsIT09YiYmZC50aGVuKGIpO2RpKGEsYyxudWxsLGQuX29uQ29tbWl0KTtyZXR1cm4gZH07XG5saS5wcm90b3R5cGUudW5tb3VudD1mdW5jdGlvbihhKXt2YXIgYj10aGlzLl9pbnRlcm5hbFJvb3QsYz1uZXcga2k7YT12b2lkIDA9PT1hP251bGw6YTtudWxsIT09YSYmYy50aGVuKGEpO2RpKG51bGwsYixudWxsLGMuX29uQ29tbWl0KTtyZXR1cm4gY307bGkucHJvdG90eXBlLmxlZ2FjeV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcj1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9dGhpcy5faW50ZXJuYWxSb290LGU9bmV3IGtpO2M9dm9pZCAwPT09Yz9udWxsOmM7bnVsbCE9PWMmJmUudGhlbihjKTtkaShiLGQsYSxlLl9vbkNvbW1pdCk7cmV0dXJuIGV9O1xubGkucHJvdG90eXBlLmNyZWF0ZUJhdGNoPWZ1bmN0aW9uKCl7dmFyIGE9bmV3IGppKHRoaXMpLGI9YS5fZXhwaXJhdGlvblRpbWUsYz10aGlzLl9pbnRlcm5hbFJvb3QsZD1jLmZpcnN0QmF0Y2g7aWYobnVsbD09PWQpYy5maXJzdEJhdGNoPWEsYS5fbmV4dD1udWxsO2Vsc2V7Zm9yKGM9bnVsbDtudWxsIT09ZCYmZC5fZXhwaXJhdGlvblRpbWU8PWI7KWM9ZCxkPWQuX25leHQ7YS5fbmV4dD1kO251bGwhPT1jJiYoYy5fbmV4dD1hKX1yZXR1cm4gYX07ZnVuY3Rpb24gbWkoYSl7cmV0dXJuISghYXx8MSE9PWEubm9kZVR5cGUmJjkhPT1hLm5vZGVUeXBlJiYxMSE9PWEubm9kZVR5cGUmJig4IT09YS5ub2RlVHlwZXx8XCIgcmVhY3QtbW91bnQtcG9pbnQtdW5zdGFibGUgXCIhPT1hLm5vZGVWYWx1ZSkpfVNiPWdpLmJhdGNoZWRVcGRhdGVzO1RiPWdpLmludGVyYWN0aXZlVXBkYXRlcztVYj1naS5mbHVzaEludGVyYWN0aXZlVXBkYXRlcztcbmZ1bmN0aW9uIG5pKGEsYil7Ynx8KGI9YT85PT09YS5ub2RlVHlwZT9hLmRvY3VtZW50RWxlbWVudDphLmZpcnN0Q2hpbGQ6bnVsbCxiPSEoIWJ8fDEhPT1iLm5vZGVUeXBlfHwhYi5oYXNBdHRyaWJ1dGUoXCJkYXRhLXJlYWN0cm9vdFwiKSkpO2lmKCFiKWZvcih2YXIgYztjPWEubGFzdENoaWxkOylhLnJlbW92ZUNoaWxkKGMpO3JldHVybiBuZXcgbGkoYSwhMSxiKX1cbmZ1bmN0aW9uIG9pKGEsYixjLGQsZSl7bWkoYyk/dm9pZCAwOkEoXCIyMDBcIik7dmFyIGY9Yy5fcmVhY3RSb290Q29udGFpbmVyO2lmKGYpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlKXt2YXIgZz1lO2U9ZnVuY3Rpb24oKXt2YXIgYT1laShmLl9pbnRlcm5hbFJvb3QpO2cuY2FsbChhKX19bnVsbCE9YT9mLmxlZ2FjeV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcihhLGIsZSk6Zi5yZW5kZXIoYixlKX1lbHNle2Y9Yy5fcmVhY3RSb290Q29udGFpbmVyPW5pKGMsZCk7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGUpe3ZhciBoPWU7ZT1mdW5jdGlvbigpe3ZhciBhPWVpKGYuX2ludGVybmFsUm9vdCk7aC5jYWxsKGEpfX1aaChmdW5jdGlvbigpe251bGwhPWE/Zi5sZWdhY3lfcmVuZGVyU3VidHJlZUludG9Db250YWluZXIoYSxiLGUpOmYucmVuZGVyKGIsZSl9KX1yZXR1cm4gZWkoZi5faW50ZXJuYWxSb290KX1cbmZ1bmN0aW9uIHBpKGEsYil7dmFyIGM9Mjxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOm51bGw7bWkoYik/dm9pZCAwOkEoXCIyMDBcIik7cmV0dXJuIGlpKGEsYixudWxsLGMpfVxudmFyIHFpPXtjcmVhdGVQb3J0YWw6cGksZmluZERPTU5vZGU6ZnVuY3Rpb24oYSl7cmV0dXJuIG51bGw9PWE/bnVsbDoxPT09YS5ub2RlVHlwZT9hOmNpKGEpfSxoeWRyYXRlOmZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gb2kobnVsbCxhLGIsITAsYyl9LHJlbmRlcjpmdW5jdGlvbihhLGIsYyl7cmV0dXJuIG9pKG51bGwsYSxiLCExLGMpfSx1bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcjpmdW5jdGlvbihhLGIsYyxkKXtudWxsPT1hfHx2b2lkIDA9PT1hLl9yZWFjdEludGVybmFsRmliZXI/QShcIjM4XCIpOnZvaWQgMDtyZXR1cm4gb2koYSxiLGMsITEsZCl9LHVubW91bnRDb21wb25lbnRBdE5vZGU6ZnVuY3Rpb24oYSl7bWkoYSk/dm9pZCAwOkEoXCI0MFwiKTtyZXR1cm4gYS5fcmVhY3RSb290Q29udGFpbmVyPyhaaChmdW5jdGlvbigpe29pKG51bGwsbnVsbCxhLCExLGZ1bmN0aW9uKCl7YS5fcmVhY3RSb290Q29udGFpbmVyPW51bGx9KX0pLCEwKTohMX0sdW5zdGFibGVfY3JlYXRlUG9ydGFsOmZ1bmN0aW9uKCl7cmV0dXJuIHBpLmFwcGx5KHZvaWQgMCxcbmFyZ3VtZW50cyl9LHVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzOlloLHVuc3RhYmxlX2RlZmVycmVkVXBkYXRlczpEaCxmbHVzaFN5bmM6JGgsdW5zdGFibGVfZmx1c2hDb250cm9sbGVkOmFpLF9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEOntFdmVudFBsdWdpbkh1YjpLYSxFdmVudFBsdWdpblJlZ2lzdHJ5OnZhLEV2ZW50UHJvcGFnYXRvcnM6JGEsUmVhY3RDb250cm9sbGVkQ29tcG9uZW50OlJiLFJlYWN0RE9NQ29tcG9uZW50VHJlZTpRYSxSZWFjdERPTUV2ZW50TGlzdGVuZXI6TWR9LHVuc3RhYmxlX2NyZWF0ZVJvb3Q6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gbmV3IGxpKGEsITAsbnVsbCE9YiYmITA9PT1iLmh5ZHJhdGUpfX07Zmkoe2ZpbmRGaWJlckJ5SG9zdEluc3RhbmNlOk5hLGJ1bmRsZVR5cGU6MCx2ZXJzaW9uOlwiMTYuNC4wXCIscmVuZGVyZXJQYWNrYWdlTmFtZTpcInJlYWN0LWRvbVwifSk7XG52YXIgdmk9e2RlZmF1bHQ6cWl9LHdpPXZpJiZxaXx8dmk7bW9kdWxlLmV4cG9ydHM9d2kuZGVmYXVsdD93aS5kZWZhdWx0OndpO1xuIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNi40LjBcbiAqIHJlYWN0LnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO3ZhciBrPXJlcXVpcmUoXCJvYmplY3QtYXNzaWduXCIpLG49cmVxdWlyZShcImZianMvbGliL2ludmFyaWFudFwiKSxwPXJlcXVpcmUoXCJmYmpzL2xpYi9lbXB0eU9iamVjdFwiKSxxPXJlcXVpcmUoXCJmYmpzL2xpYi9lbXB0eUZ1bmN0aW9uXCIpLHI9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcix0PXI/U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIik6NjAxMDMsdT1yP1N5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIik6NjAxMDYsdj1yP1N5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKTo2MDEwNyx3PXI/U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpOjYwMTA4LHg9cj9TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIik6NjAxMTQseT1yP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKTo2MDEwOSx6PXI/U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIik6NjAxMTAsQT1yP1N5bWJvbC5mb3IoXCJyZWFjdC5hc3luY19tb2RlXCIpOjYwMTExLEI9XG5yP1N5bWJvbC5mb3IoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKTo2MDExMjtyJiZTeW1ib2wuZm9yKFwicmVhY3QudGltZW91dFwiKTt2YXIgQz1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3I7ZnVuY3Rpb24gRChhKXtmb3IodmFyIGI9YXJndW1lbnRzLmxlbmd0aC0xLGU9XCJodHRwczovL3JlYWN0anMub3JnL2RvY3MvZXJyb3ItZGVjb2Rlci5odG1sP2ludmFyaWFudD1cIithLGM9MDtjPGI7YysrKWUrPVwiJmFyZ3NbXT1cIitlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzW2MrMV0pO24oITEsXCJNaW5pZmllZCBSZWFjdCBlcnJvciAjXCIrYStcIjsgdmlzaXQgJXMgZm9yIHRoZSBmdWxsIG1lc3NhZ2Ugb3IgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50IGZvciBmdWxsIGVycm9ycyBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLiBcIixlKX1cbnZhciBFPXtpc01vdW50ZWQ6ZnVuY3Rpb24oKXtyZXR1cm4hMX0sZW5xdWV1ZUZvcmNlVXBkYXRlOmZ1bmN0aW9uKCl7fSxlbnF1ZXVlUmVwbGFjZVN0YXRlOmZ1bmN0aW9uKCl7fSxlbnF1ZXVlU2V0U3RhdGU6ZnVuY3Rpb24oKXt9fTtmdW5jdGlvbiBGKGEsYixlKXt0aGlzLnByb3BzPWE7dGhpcy5jb250ZXh0PWI7dGhpcy5yZWZzPXA7dGhpcy51cGRhdGVyPWV8fEV9Ri5wcm90b3R5cGUuaXNSZWFjdENvbXBvbmVudD17fTtGLnByb3RvdHlwZS5zZXRTdGF0ZT1mdW5jdGlvbihhLGIpe1wib2JqZWN0XCIhPT10eXBlb2YgYSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGEmJm51bGwhPWE/RChcIjg1XCIpOnZvaWQgMDt0aGlzLnVwZGF0ZXIuZW5xdWV1ZVNldFN0YXRlKHRoaXMsYSxiLFwic2V0U3RhdGVcIil9O0YucHJvdG90eXBlLmZvcmNlVXBkYXRlPWZ1bmN0aW9uKGEpe3RoaXMudXBkYXRlci5lbnF1ZXVlRm9yY2VVcGRhdGUodGhpcyxhLFwiZm9yY2VVcGRhdGVcIil9O2Z1bmN0aW9uIEcoKXt9XG5HLnByb3RvdHlwZT1GLnByb3RvdHlwZTtmdW5jdGlvbiBIKGEsYixlKXt0aGlzLnByb3BzPWE7dGhpcy5jb250ZXh0PWI7dGhpcy5yZWZzPXA7dGhpcy51cGRhdGVyPWV8fEV9dmFyIEk9SC5wcm90b3R5cGU9bmV3IEc7SS5jb25zdHJ1Y3Rvcj1IO2soSSxGLnByb3RvdHlwZSk7SS5pc1B1cmVSZWFjdENvbXBvbmVudD0hMDt2YXIgSj17Y3VycmVudDpudWxsfSxLPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksTD17a2V5OiEwLHJlZjohMCxfX3NlbGY6ITAsX19zb3VyY2U6ITB9O1xuZnVuY3Rpb24gTShhLGIsZSl7dmFyIGM9dm9pZCAwLGQ9e30sZz1udWxsLGg9bnVsbDtpZihudWxsIT1iKWZvcihjIGluIHZvaWQgMCE9PWIucmVmJiYoaD1iLnJlZiksdm9pZCAwIT09Yi5rZXkmJihnPVwiXCIrYi5rZXkpLGIpSy5jYWxsKGIsYykmJiFMLmhhc093blByb3BlcnR5KGMpJiYoZFtjXT1iW2NdKTt2YXIgZj1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWYpZC5jaGlsZHJlbj1lO2Vsc2UgaWYoMTxmKXtmb3IodmFyIGw9QXJyYXkoZiksbT0wO208ZjttKyspbFttXT1hcmd1bWVudHNbbSsyXTtkLmNoaWxkcmVuPWx9aWYoYSYmYS5kZWZhdWx0UHJvcHMpZm9yKGMgaW4gZj1hLmRlZmF1bHRQcm9wcyxmKXZvaWQgMD09PWRbY10mJihkW2NdPWZbY10pO3JldHVybnskJHR5cGVvZjp0LHR5cGU6YSxrZXk6ZyxyZWY6aCxwcm9wczpkLF9vd25lcjpKLmN1cnJlbnR9fVxuZnVuY3Rpb24gTihhKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZhLiQkdHlwZW9mPT09dH1mdW5jdGlvbiBlc2NhcGUoYSl7dmFyIGI9e1wiPVwiOlwiPTBcIixcIjpcIjpcIj0yXCJ9O3JldHVyblwiJFwiKyhcIlwiK2EpLnJlcGxhY2UoL1s9Ol0vZyxmdW5jdGlvbihhKXtyZXR1cm4gYlthXX0pfXZhciBPPS9cXC8rL2csUD1bXTtmdW5jdGlvbiBRKGEsYixlLGMpe2lmKFAubGVuZ3RoKXt2YXIgZD1QLnBvcCgpO2QucmVzdWx0PWE7ZC5rZXlQcmVmaXg9YjtkLmZ1bmM9ZTtkLmNvbnRleHQ9YztkLmNvdW50PTA7cmV0dXJuIGR9cmV0dXJue3Jlc3VsdDphLGtleVByZWZpeDpiLGZ1bmM6ZSxjb250ZXh0OmMsY291bnQ6MH19ZnVuY3Rpb24gUihhKXthLnJlc3VsdD1udWxsO2Eua2V5UHJlZml4PW51bGw7YS5mdW5jPW51bGw7YS5jb250ZXh0PW51bGw7YS5jb3VudD0wOzEwPlAubGVuZ3RoJiZQLnB1c2goYSl9XG5mdW5jdGlvbiBTKGEsYixlLGMpe3ZhciBkPXR5cGVvZiBhO2lmKFwidW5kZWZpbmVkXCI9PT1kfHxcImJvb2xlYW5cIj09PWQpYT1udWxsO3ZhciBnPSExO2lmKG51bGw9PT1hKWc9ITA7ZWxzZSBzd2l0Y2goZCl7Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJudW1iZXJcIjpnPSEwO2JyZWFrO2Nhc2UgXCJvYmplY3RcIjpzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSB0OmNhc2UgdTpnPSEwfX1pZihnKXJldHVybiBlKGMsYSxcIlwiPT09Yj9cIi5cIitUKGEsMCk6YiksMTtnPTA7Yj1cIlwiPT09Yj9cIi5cIjpiK1wiOlwiO2lmKEFycmF5LmlzQXJyYXkoYSkpZm9yKHZhciBoPTA7aDxhLmxlbmd0aDtoKyspe2Q9YVtoXTt2YXIgZj1iK1QoZCxoKTtnKz1TKGQsZixlLGMpfWVsc2UgaWYobnVsbD09PWF8fFwidW5kZWZpbmVkXCI9PT10eXBlb2YgYT9mPW51bGw6KGY9QyYmYVtDXXx8YVtcIkBAaXRlcmF0b3JcIl0sZj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgZj9mOm51bGwpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBmKWZvcihhPWYuY2FsbChhKSxcbmg9MDshKGQ9YS5uZXh0KCkpLmRvbmU7KWQ9ZC52YWx1ZSxmPWIrVChkLGgrKyksZys9UyhkLGYsZSxjKTtlbHNlXCJvYmplY3RcIj09PWQmJihlPVwiXCIrYSxEKFwiMzFcIixcIltvYmplY3QgT2JqZWN0XVwiPT09ZT9cIm9iamVjdCB3aXRoIGtleXMge1wiK09iamVjdC5rZXlzKGEpLmpvaW4oXCIsIFwiKStcIn1cIjplLFwiXCIpKTtyZXR1cm4gZ31mdW5jdGlvbiBUKGEsYil7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmbnVsbCE9YS5rZXk/ZXNjYXBlKGEua2V5KTpiLnRvU3RyaW5nKDM2KX1mdW5jdGlvbiBVKGEsYil7YS5mdW5jLmNhbGwoYS5jb250ZXh0LGIsYS5jb3VudCsrKX1cbmZ1bmN0aW9uIFYoYSxiLGUpe3ZhciBjPWEucmVzdWx0LGQ9YS5rZXlQcmVmaXg7YT1hLmZ1bmMuY2FsbChhLmNvbnRleHQsYixhLmNvdW50KyspO0FycmF5LmlzQXJyYXkoYSk/VyhhLGMsZSxxLnRoYXRSZXR1cm5zQXJndW1lbnQpOm51bGwhPWEmJihOKGEpJiYoYj1kKyghYS5rZXl8fGImJmIua2V5PT09YS5rZXk/XCJcIjooXCJcIithLmtleSkucmVwbGFjZShPLFwiJCYvXCIpK1wiL1wiKStlLGE9eyQkdHlwZW9mOnQsdHlwZTphLnR5cGUsa2V5OmIscmVmOmEucmVmLHByb3BzOmEucHJvcHMsX293bmVyOmEuX293bmVyfSksYy5wdXNoKGEpKX1mdW5jdGlvbiBXKGEsYixlLGMsZCl7dmFyIGc9XCJcIjtudWxsIT1lJiYoZz0oXCJcIitlKS5yZXBsYWNlKE8sXCIkJi9cIikrXCIvXCIpO2I9UShiLGcsYyxkKTtudWxsPT1hfHxTKGEsXCJcIixWLGIpO1IoYil9XG52YXIgWD17Q2hpbGRyZW46e21hcDpmdW5jdGlvbihhLGIsZSl7aWYobnVsbD09YSlyZXR1cm4gYTt2YXIgYz1bXTtXKGEsYyxudWxsLGIsZSk7cmV0dXJuIGN9LGZvckVhY2g6ZnVuY3Rpb24oYSxiLGUpe2lmKG51bGw9PWEpcmV0dXJuIGE7Yj1RKG51bGwsbnVsbCxiLGUpO251bGw9PWF8fFMoYSxcIlwiLFUsYik7UihiKX0sY291bnQ6ZnVuY3Rpb24oYSl7cmV0dXJuIG51bGw9PWE/MDpTKGEsXCJcIixxLnRoYXRSZXR1cm5zTnVsbCxudWxsKX0sdG9BcnJheTpmdW5jdGlvbihhKXt2YXIgYj1bXTtXKGEsYixudWxsLHEudGhhdFJldHVybnNBcmd1bWVudCk7cmV0dXJuIGJ9LG9ubHk6ZnVuY3Rpb24oYSl7TihhKT92b2lkIDA6RChcIjE0M1wiKTtyZXR1cm4gYX19LGNyZWF0ZVJlZjpmdW5jdGlvbigpe3JldHVybntjdXJyZW50Om51bGx9fSxDb21wb25lbnQ6RixQdXJlQ29tcG9uZW50OkgsY3JlYXRlQ29udGV4dDpmdW5jdGlvbihhLGIpe3ZvaWQgMD09PWImJihiPW51bGwpO2E9eyQkdHlwZW9mOnosXG5fY2FsY3VsYXRlQ2hhbmdlZEJpdHM6YixfZGVmYXVsdFZhbHVlOmEsX2N1cnJlbnRWYWx1ZTphLF9jdXJyZW50VmFsdWUyOmEsX2NoYW5nZWRCaXRzOjAsX2NoYW5nZWRCaXRzMjowLFByb3ZpZGVyOm51bGwsQ29uc3VtZXI6bnVsbH07YS5Qcm92aWRlcj17JCR0eXBlb2Y6eSxfY29udGV4dDphfTtyZXR1cm4gYS5Db25zdW1lcj1hfSxmb3J3YXJkUmVmOmZ1bmN0aW9uKGEpe3JldHVybnskJHR5cGVvZjpCLHJlbmRlcjphfX0sRnJhZ21lbnQ6dixTdHJpY3RNb2RlOncsdW5zdGFibGVfQXN5bmNNb2RlOkEsdW5zdGFibGVfUHJvZmlsZXI6eCxjcmVhdGVFbGVtZW50Ok0sY2xvbmVFbGVtZW50OmZ1bmN0aW9uKGEsYixlKXtudWxsPT09YXx8dm9pZCAwPT09YT9EKFwiMjY3XCIsYSk6dm9pZCAwO3ZhciBjPXZvaWQgMCxkPWsoe30sYS5wcm9wcyksZz1hLmtleSxoPWEucmVmLGY9YS5fb3duZXI7aWYobnVsbCE9Yil7dm9pZCAwIT09Yi5yZWYmJihoPWIucmVmLGY9Si5jdXJyZW50KTt2b2lkIDAhPT1cbmIua2V5JiYoZz1cIlwiK2Iua2V5KTt2YXIgbD12b2lkIDA7YS50eXBlJiZhLnR5cGUuZGVmYXVsdFByb3BzJiYobD1hLnR5cGUuZGVmYXVsdFByb3BzKTtmb3IoYyBpbiBiKUsuY2FsbChiLGMpJiYhTC5oYXNPd25Qcm9wZXJ0eShjKSYmKGRbY109dm9pZCAwPT09YltjXSYmdm9pZCAwIT09bD9sW2NdOmJbY10pfWM9YXJndW1lbnRzLmxlbmd0aC0yO2lmKDE9PT1jKWQuY2hpbGRyZW49ZTtlbHNlIGlmKDE8Yyl7bD1BcnJheShjKTtmb3IodmFyIG09MDttPGM7bSsrKWxbbV09YXJndW1lbnRzW20rMl07ZC5jaGlsZHJlbj1sfXJldHVybnskJHR5cGVvZjp0LHR5cGU6YS50eXBlLGtleTpnLHJlZjpoLHByb3BzOmQsX293bmVyOmZ9fSxjcmVhdGVGYWN0b3J5OmZ1bmN0aW9uKGEpe3ZhciBiPU0uYmluZChudWxsLGEpO2IudHlwZT1hO3JldHVybiBifSxpc1ZhbGlkRWxlbWVudDpOLHZlcnNpb246XCIxNi40LjBcIixfX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRDp7UmVhY3RDdXJyZW50T3duZXI6SixcbmFzc2lnbjprfX0sWT17ZGVmYXVsdDpYfSxaPVkmJlh8fFk7bW9kdWxlLmV4cG9ydHM9Wi5kZWZhdWx0P1ouZGVmYXVsdDpaO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFJlYWN0RE9NIGZyb20gXCJyZWFjdC1kb21cIjtcblxuaW1wb3J0ICcuL0FwcC5jc3MnO1xuaW1wb3J0IEFwcCBmcm9tICcuL0FwcCc7XG5cblJlYWN0RE9NLnJlbmRlcig8QXBwIC8+LCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImluZGV4XCIpKTsiXSwic291cmNlUm9vdCI6IiJ9